{"sha": "0486e12ad0661adcfdbd926dea17d7edfda419c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODZlMTJhZDA2NjFhZGNmZGJkOTI2ZGVhMTdkN2VkZmRhNDE5YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-23T16:21:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-23T16:21:07Z"}, "message": "Auto merge of #31148 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30997, #31019, #31031, #31035, #31045, #31050, #31054, #31055, #31061, #31088, #31090, #31111, #31113, #31128, #31130, #31136, #31145, #31146\n- Failed merges: #30932", "tree": {"sha": "313e2d985bcc9aca680a27e60a90182f48db2611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313e2d985bcc9aca680a27e60a90182f48db2611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0486e12ad0661adcfdbd926dea17d7edfda419c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0486e12ad0661adcfdbd926dea17d7edfda419c1", "html_url": "https://github.com/rust-lang/rust/commit/0486e12ad0661adcfdbd926dea17d7edfda419c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0486e12ad0661adcfdbd926dea17d7edfda419c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b78b9ae7b3dd03067c907e7a7ace970a8b26312d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78b9ae7b3dd03067c907e7a7ace970a8b26312d", "html_url": "https://github.com/rust-lang/rust/commit/b78b9ae7b3dd03067c907e7a7ace970a8b26312d"}, {"sha": "feb2673654a6c1d6aeb36b451081032cd46a7390", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb2673654a6c1d6aeb36b451081032cd46a7390", "html_url": "https://github.com/rust-lang/rust/commit/feb2673654a6c1d6aeb36b451081032cd46a7390"}], "stats": {"total": 198, "additions": 161, "deletions": 37}, "files": [{"sha": "6f6f51d1f60828aad04f9c6be5512214718c00b4", "filename": "src/doc/book/bibliography.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fbibliography.md", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fbibliography.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fbibliography.md?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -80,3 +80,4 @@ Language](http://www.cs.indiana.edu/~eholk/papers/hips2013.pdf). Early GPU work\n   Rust](http://munksgaard.me/papers/laumann-munksgaard-larsen.pdf). Philip\n   Munksgaard's master's thesis. Research for Servo.\n * [Ownership is Theft: Experiences Building an Embedded OS in Rust - Amit Levy, et. al.](http://amitlevy.com/papers/tock-plos2015.pdf)\n+* [You can't spell trust without Rust](https://raw.githubusercontent.com/Gankro/thesis/master/thesis.pdf). Alexis Beingessner's master's thesis."}, {"sha": "18d5ca5be1ae3fb910193a6758d5efa3ef7d9bc7", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -111,7 +111,7 @@ If we're on Linux or a Mac, all we need to do is open a terminal and type this:\n $ curl -sSf https://static.rust-lang.org/rustup.sh | sh\n ```\n \n-This will download a script, and stat the installation. If it all goes well,\n+This will download a script, and start the installation. If it all goes well,\n you\u2019ll see this appear:\n \n ```text"}, {"sha": "80aca56bd1e9f1ad30d15d704d7e602d2b5276c7", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -908,6 +908,7 @@ let guess: u32 = match guess.trim().parse() {\n ```\n \n This is how you generally move from \u2018crash on error\u2019 to \u2018actually handle the\n+error\u2019, by switching from `expect()` to a `match` statement. The `Result`\n returned by `parse()` is an `enum`  like `Ordering`, but in this case, each\n variant has some data associated with it: `Ok` is a success, and `Err` is a\n failure. Each contains more information: the successfully parsed integer, or an"}, {"sha": "610940cde95e6f3509b3740a8221e3ec71a70979", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -77,10 +77,11 @@ The compiler currently makes a few assumptions about symbols which are available\n in the executable to call. Normally these functions are provided by the standard\n library, but without it you must define your own.\n \n-The first of these two functions, `eh_personality`, is used by the\n-failure mechanisms of the compiler. This is often mapped to GCC's\n-personality function (see the\n-[libstd implementation](../std/rt/unwind/index.html) for more\n-information), but crates which do not trigger a panic can be assured\n-that this function is never called. The second function, `panic_fmt`, is\n-also used by the failure mechanisms of the compiler.\n+The first of these two functions, `eh_personality`, is used by the failure\n+mechanisms of the compiler. This is often mapped to GCC's personality function\n+(see the [libstd implementation][unwind] for more information), but crates\n+which do not trigger a panic can be assured that this function is never\n+called. The second function, `panic_fmt`, is also used by the failure\n+mechanisms of the compiler.\n+\n+[unwind]: https://github.com/rust-lang/rust/blob/master/src/libstd/sys/common/unwind/gcc.rs"}, {"sha": "2a164077683b29694e18628d32d32777a7c38eeb", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -277,16 +277,22 @@ This will compile without error.\n This means that even if someone does something bad like add methods to `i32`,\n it won\u2019t affect you, unless you `use` that trait.\n \n-There\u2019s one more restriction on implementing traits: either the trait, or the\n-type you\u2019re writing the `impl` for, must be defined by you. So, we could\n-implement the `HasArea` type for `i32`, because `HasArea` is in our code. But\n-if we tried to implement `ToString`, a trait provided by Rust, for `i32`, we could\n-not, because neither the trait nor the type are in our code.\n+There\u2019s one more restriction on implementing traits: either the trait\n+or the type you\u2019re implementing it for must be defined by you. Or more\n+precisely, one of them must be defined in the same crate as the `impl`\n+you're writing. For more on Rust's module and package system, see the\n+chapter on [crates and modules][cm].\n+\n+So, we could implement the `HasArea` type for `i32`, because we defined\n+`HasArea` in our code. But if we tried to implement `ToString`, a trait\n+provided by Rust, for `i32`, we could not, because neither the trait nor\n+the type are defined in our crate.\n \n One last thing about traits: generic functions with a trait bound use\n \u2018monomorphization\u2019 (mono: one, morph: form), so they are statically dispatched.\n What\u2019s that mean? Check out the chapter on [trait objects][to] for more details.\n \n+[cm]: crates-and-modules.html\n [to]: trait-objects.html\n \n # Multiple trait bounds"}, {"sha": "7215e4f13c9bb4d914032eda4192430e69c51a41", "filename": "src/doc/version_info.html.template", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fversion_info.html.template", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Fdoc%2Fversion_info.html.template", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fversion_info.html.template?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -1,5 +1,5 @@\n <div id=\"versioninfo\">\n-  <img src=\"https://www.rust-lang.org/logos/rust-logo-32x32-blk.png\" width=\"32\" height=\"32\" alt><br>\n+  <img src=\"https://www.rust-lang.org/logos/rust-logo-32x32-blk.png\" width=\"32\" height=\"32\" alt=\"Rust logo\"><br>\n   <span class=\"white-sticker\"><a href=\"https://www.rust-lang.org\">Rust</a> VERSION</span><br>\n   <a href=\"https://github.com/rust-lang/rust/commit/STAMP\"\n     class=\"hash white-sticker\">SHORT_HASH</a>"}, {"sha": "0ced4e1952aa51b4daa97a9bf2c3868e6b356beb", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -1194,17 +1194,17 @@ unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n }\n \n impl<K, V> BTreeMap<K, V> {\n-    /// Gets an iterator over the entries of the map.\n+    /// Gets an iterator over the entries of the map, sorted by key.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n-    /// map.insert(1, \"a\");\n-    /// map.insert(2, \"b\");\n     /// map.insert(3, \"c\");\n+    /// map.insert(2, \"b\");\n+    /// map.insert(1, \"a\");\n     ///\n     /// for (key, value) in map.iter() {\n     ///     println!(\"{}: {}\", key, value);\n@@ -1224,7 +1224,7 @@ impl<K, V> BTreeMap<K, V> {\n         }\n     }\n \n-    /// Gets a mutable iterator over the entries of the map.\n+    /// Gets a mutable iterator over the entries of the map, sorted by key.\n     ///\n     /// # Examples\n     ///\n@@ -1257,16 +1257,16 @@ impl<K, V> BTreeMap<K, V> {\n         }\n     }\n \n-    /// Gets an iterator over the keys of the map.\n+    /// Gets an iterator over the keys of the map, in sorted order.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n-    /// a.insert(1, \"a\");\n     /// a.insert(2, \"b\");\n+    /// a.insert(1, \"a\");\n     ///\n     /// let keys: Vec<_> = a.keys().cloned().collect();\n     /// assert_eq!(keys, [1, 2]);\n@@ -1276,19 +1276,19 @@ impl<K, V> BTreeMap<K, V> {\n         Keys { inner: self.iter() }\n     }\n \n-    /// Gets an iterator over the values of the map.\n+    /// Gets an iterator over the values of the map, in order by key.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n-    /// a.insert(1, \"a\");\n-    /// a.insert(2, \"b\");\n+    /// a.insert(1, \"hello\");\n+    /// a.insert(2, \"goodbye\");\n     ///\n     /// let values: Vec<&str> = a.values().cloned().collect();\n-    /// assert_eq!(values, [\"a\", \"b\"]);\n+    /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn values<'a>(&'a self) -> Values<'a, K, V> {"}, {"sha": "7ad4d3ca708987edd8d43fd52620f158d6fb0ba2", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -124,7 +124,7 @@ fn main() {\n     let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n     let y = x.clone();\n     x.borrow_mut().s = 6;\n-    println!(\"{}\", x.borrow.s);\n+    println!(\"{}\", x.borrow().s);\n }\n ```\n "}, {"sha": "dc6da1f0ef847044254a47e52aa7d018b379c505", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -207,7 +207,41 @@ https://doc.rust-lang.org/reference.html#statements\n E0317: r##\"\n User-defined types or type parameters cannot shadow the primitive types.\n This error indicates you tried to define a type, struct or enum with the same\n-name as an existing primitive type.\n+name as an existing primitive type:\n+\n+```\n+struct u8 {\n+    // ...\n+}\n+```\n+\n+To fix this, simply name it something else.\n+\n+Such an error may also occur if you define a type parameter which shadows a\n+primitive type. An example would be something like:\n+\n+```\n+impl<u8> MyTrait for Option<u8> {\n+    // ...\n+}\n+```\n+\n+In such a case, if you meant for `u8` to be a generic type parameter (i.e. any\n+type can be used in its place), use something like `T` instead:\n+\n+```\n+impl<T> MyTrait for Option<T> {\n+    // ...\n+}\n+```\n+\n+On the other hand, if you wished to refer to the specific type `u8`, remove it\n+from the type parameter list:\n+\n+```\n+impl MyTrait for Option<u8> {\n+    // ...\n+}\n \n See the Types section of the reference for more information about the primitive\n types:"}, {"sha": "8f7692c794540be513800d5231ee753d645c0126", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -2269,6 +2269,8 @@ struct MyType<T>(T);\n impl<T> ForeignTrait for MyType<T> { ... } // Ok\n ```\n \n+Please note that a type alias is not sufficient.\n+\n For another example of an error, suppose there's another trait defined in `foo`\n named `ForeignTrait2` that takes two type parameters. Then this `impl` results\n in the same rule violation:"}, {"sha": "ffcd22fa8209604daeda1542306d22cc1e13c07a", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -148,7 +148,7 @@ r##\"<!DOCTYPE html>\n         \"\".to_string()\n     } else {\n         format!(\"<a href='{}{}/index.html'>\\\n-                 <img src='{}' alt='' width='100'></a>\",\n+                 <img src='{}' alt='logo' width='100'></a>\",\n                 page.root_path, layout.krate,\n                 layout.logo)\n     },"}, {"sha": "c751cdeb6f790d65f1c43a78067d2f554fa16bd5", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -383,7 +383,7 @@ a {\n }\n \n .content span.enum, .content a.enum, .block a.current.enum { color: #5e9766; }\n-.content span.struct, .content a.struct, .block a.current.struct { color: #e53700; }\n+.content span.struct, .content a.struct, .block a.current.struct { color: #df3600; }\n .content a.type { color: #e57300; }\n .content a.macro { color: #068000; }\n .block a.current.crate { font-weight: 500; }"}, {"sha": "02bb5221886df4c21e7466d21526f415b6245cb5", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -106,14 +106,14 @@ a {\n }\n \n .docblock a, .stability a {\n-    color: #4e8bca;\n+    color: #3873AD;\n }\n \n a.test-arrow {\n     color: #f5f5f5;\n }\n \n-.content span.trait, .content a.trait, .block a.current.trait { color: #8866ff; }\n+.content span.trait, .content a.trait, .block a.current.trait { color: #7c5af3; }\n \n .search-input {\n     color: #555;"}, {"sha": "43bf86a00399c8da07108937e10afdf3da3a2fd9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -272,6 +272,35 @@ fn test_resize_policy() {\n /// }\n /// ```\n ///\n+/// `HashMap` also implements an [`Entry API`](#method.entry), which allows\n+/// for more complex methods of getting, setting, updating and removing keys and\n+/// their values:\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `HashMap<&str, u8>` in this example).\n+/// let mut player_stats = HashMap::new();\n+///\n+/// fn random_stat_buff() -> u8 {\n+///   // could actually return some random value here - let's just return\n+///   // some fixed value for now\n+///   42\n+/// }\n+///\n+/// // insert a key only if it doesn't already exist\n+/// player_stats.entry(\"health\").or_insert(100);\n+///\n+/// // insert a key using a function that provides a new value only if it\n+/// // doesn't already exist\n+/// player_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n+///\n+/// // update a key, guarding against the key possibly not being set\n+/// let stat = player_stats.entry(\"attack\").or_insert(100);\n+/// *stat += random_stat_buff();\n+/// ```\n+///\n /// The easiest way to use `HashMap` with a custom type as key is to derive `Eq` and `Hash`.\n /// We must also derive `PartialEq`.\n ///"}, {"sha": "9d505607a60c48abac8909ecae77a2690a8b29b8", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -407,16 +407,14 @@ impl CStr {\n     /// # fn main() {\n     /// use std::ffi::CStr;\n     /// use std::os::raw::c_char;\n-    /// use std::str;\n     ///\n     /// extern {\n     ///     fn my_string() -> *const c_char;\n     /// }\n     ///\n     /// unsafe {\n     ///     let slice = CStr::from_ptr(my_string());\n-    ///     println!(\"string returned: {}\",\n-    ///              str::from_utf8(slice.to_bytes()).unwrap());\n+    ///     println!(\"string returned: {}\", slice.to_str().unwrap());\n     /// }\n     /// # }\n     /// ```"}, {"sha": "187a1797dac045fb6a0d2bcbff597ebf1f7c5001", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -414,7 +414,7 @@ impl OpenOptions {\n     /// This option, when true, will indicate that the file should be\n     /// `write`-able if opened.\n     ///\n-    /// If a file already exist, any write calls on the file will overwrite its\n+    /// If the file already exists, any write calls on it will overwrite its\n     /// contents, without truncating it.\n     ///\n     /// # Examples\n@@ -487,8 +487,8 @@ impl OpenOptions {\n     /// This option indicates whether a new file will be created if the file\n     /// does not yet already exist.\n     ///\n-    /// The file must be opened with write or append access in order to create\n-    /// a new file.\n+    /// In order for the file to be created, `write` or `append` access must\n+    /// be used.\n     ///\n     /// # Examples\n     ///"}, {"sha": "ac5ce298c5c6f0b49899038042906817f586b6d7", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -13,7 +13,7 @@\n                       of resources is currently unclear\",\n             issue = \"27798\")]\n #![rustc_deprecated(since = \"1.7.0\",\n-                    reason = \"easily confused with system sempahores and not \\\n+                    reason = \"easily confused with system semaphores and not \\\n                               used enough to pull its weight\")]\n #![allow(deprecated)]\n "}, {"sha": "f60311a9400b3d0acbfc22d2026a4e4ad478b0da", "filename": "src/test/auxiliary/issue_30123_aux.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Ftest%2Fauxiliary%2Fissue_30123_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Ftest%2Fauxiliary%2Fissue_30123_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_30123_aux.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub struct Directed;\n+pub struct Undirected;\n+\n+pub struct Graph<N, E, Ty = Directed> {\n+    nodes: Vec<PhantomData<N>>,\n+    edges: Vec<PhantomData<E>>,\n+    ty: PhantomData<Ty>,\n+}\n+\n+\n+impl<N, E> Graph<N, E, Directed> {\n+    pub fn new() -> Self {\n+        Graph{nodes: Vec::new(), edges: Vec::new(), ty: PhantomData}\n+    }\n+}\n+\n+impl<N, E> Graph<N, E, Undirected> {\n+    pub fn new_undirected() -> Self {\n+        Graph{nodes: Vec::new(), edges: Vec::new(), ty: PhantomData}\n+    }\n+}"}, {"sha": "cfd3cd3af3ebc7935eb6169a7d323b478d274a34", "filename": "src/test/compile-fail/issue-30123.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Ftest%2Fcompile-fail%2Fissue-30123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0486e12ad0661adcfdbd926dea17d7edfda419c1/src%2Ftest%2Fcompile-fail%2Fissue-30123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30123.rs?ref=0486e12ad0661adcfdbd926dea17d7edfda419c1", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_30123_aux.rs\n+\n+extern crate issue_30123_aux;\n+use issue_30123_aux::*;\n+\n+fn main() {\n+    let ug = Graph::<i32, i32>::new_undirected();\n+    //~^ ERR no associated item named `new_undirected` found for type\n+}"}]}