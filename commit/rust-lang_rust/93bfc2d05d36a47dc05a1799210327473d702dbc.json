{"sha": "93bfc2d05d36a47dc05a1799210327473d702dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYmZjMmQwNWQzNmE0N2RjMDVhMTc5OTIxMDMyNzQ3M2Q3MDJkYmM=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-11T20:54:22Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-11T21:45:09Z"}, "message": "Improve autocompletion by looking on the type and name\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "dee25e78b24b5d1b23d73ae1009bddbd060927cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee25e78b24b5d1b23d73ae1009bddbd060927cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93bfc2d05d36a47dc05a1799210327473d702dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93bfc2d05d36a47dc05a1799210327473d702dbc", "html_url": "https://github.com/rust-lang/rust/commit/93bfc2d05d36a47dc05a1799210327473d702dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93bfc2d05d36a47dc05a1799210327473d702dbc/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42346fed61f706d68fe888631a41ea5f2752d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42346fed61f706d68fe888631a41ea5f2752d7f", "html_url": "https://github.com/rust-lang/rust/commit/d42346fed61f706d68fe888631a41ea5f2752d7f"}, {"sha": "fd06fe7b13045185ab4e630b0044aa9d8bbcdf8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd06fe7b13045185ab4e630b0044aa9d8bbcdf8a", "html_url": "https://github.com/rust-lang/rust/commit/fd06fe7b13045185ab4e630b0044aa9d8bbcdf8a"}], "stats": {"total": 9338, "additions": 3920, "deletions": 5418}, "files": [{"sha": "00f299ff182896bfda2bb492bd932042c4a54075", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -20,25 +20,14 @@ jobs:\n     name: Audit Rust vulnerabilities\n     runs-on: ubuntu-latest\n     steps:\n-    - name: Install Rust toolchain\n-      uses: actions-rs/toolchain@v1\n-      with:\n-        toolchain: stable\n-        profile: minimal\n-        override: true\n-\n     - name: Checkout repository\n       uses: actions/checkout@v2\n \n-    - run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/\n-\n-    - name: Cache cargo\n-      uses: actions/cache@v1\n+    - uses: actions-rs/install@v0.1\n       with:\n-        path: ~/.cargo/\n-        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n+        crate: cargo-audit\n+        use-tool-cache: true\n \n-    - run: cargo install cargo-audit\n     - run: cargo audit\n \n   rust:"}, {"sha": "975c1aef86835efa0d24274770146933addcfd35", "filename": "Cargo.lock", "status": "modified", "additions": 66, "deletions": 10, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -424,6 +424,17 @@ dependencies = [\n  \"regex\",\n ]\n \n+[[package]]\n+name = \"goblin\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ddd5e3132801a1ac34ac53b97acde50c4685414dd2f291b9ea52afa6f07468c8\"\n+dependencies = [\n+ \"log\",\n+ \"plain\",\n+ \"scroll\",\n+]\n+\n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n@@ -586,6 +597,15 @@ version = \"0.2.68\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"dea0c0405123bba743ee3f91f49b1c7cfb684eef0da0a50110f758ccf24cdff0\"\n \n+[[package]]\n+name = \"libloading\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2c979a19ffb457f0273965c333053f3d586bf759bf7b683fbebc37f9a9ebedc4\"\n+dependencies = [\n+ \"winapi 0.3.8\",\n+]\n+\n [[package]]\n name = \"linked-hash-map\"\n version = \"0.5.2\"\n@@ -594,9 +614,9 @@ checksum = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \n [[package]]\n name = \"lock_api\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"79b2de95ecb4691949fea4716ca53cdbcfccb2c612e19644a8bad05edcf9f47b\"\n+checksum = \"c4da24a77a3d8a6d4862d95f72e6fdb9c09a643ecdb402d754004a557f2bec75\"\n dependencies = [\n  \"scopeguard\",\n ]\n@@ -759,19 +779,19 @@ checksum = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n \n [[package]]\n name = \"parking_lot\"\n-version = \"0.10.0\"\n+version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"92e98c49ab0b7ce5b222f2cc9193fc4efe11c6d0bd4f648e374684a6857b1cfc\"\n+checksum = \"6fdfcb5f20930a79e326f7ec992a9fdb5b7bd809254b1e735bdd5a99f78bee0d\"\n dependencies = [\n  \"lock_api\",\n  \"parking_lot_core\",\n ]\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.7.0\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7582838484df45743c8434fbff785e8edf260c28748353d44bc0da32e0ceabf1\"\n+checksum = \"0e136c1904604defe99ce5fd71a28d473fa60a12255d511aa78a9ddf11237aeb\"\n dependencies = [\n  \"cfg-if\",\n  \"cloudabi\",\n@@ -825,6 +845,12 @@ version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3ad1f1b834a05d42dae330066e9699a173b28185b3bdc3dbf14ca239585de8cc\"\n \n+[[package]]\n+name = \"plain\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.6\"\n@@ -995,6 +1021,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"rustc-hash\",\n+ \"scoped-tls\",\n  \"smallvec\",\n  \"stdx\",\n  \"test_utils\",\n@@ -1081,10 +1108,13 @@ version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata\",\n  \"difference\",\n+ \"goblin\",\n+ \"libloading\",\n  \"ra_mbe\",\n  \"ra_proc_macro\",\n  \"ra_tt\",\n  \"serde_derive\",\n+ \"test_utils\",\n ]\n \n [[package]]\n@@ -1390,12 +1420,38 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"scoped-tls\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2\"\n+\n [[package]]\n name = \"scopeguard\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n+[[package]]\n+name = \"scroll\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"abb2332cb595d33f7edd5700f4cbf94892e680c7f0ae56adab58a35190b66cb1\"\n+dependencies = [\n+ \"scroll_derive\",\n+]\n+\n+[[package]]\n+name = \"scroll_derive\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8584eea9b9ff42825b46faf46a8c24d2cff13ec152fa2a50df788b87c07ee28\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"semver\"\n version = \"0.9.0\"\n@@ -1474,9 +1530,9 @@ checksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.2.0\"\n+version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n+checksum = \"05720e22615919e4734f6a99ceae50d00226c3c5aca406e102ebc33298214e0a\"\n \n [[package]]\n name = \"smol_str\"\n@@ -1524,9 +1580,9 @@ dependencies = [\n \n [[package]]\n name = \"termios\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n+checksum = \"6f0fcee7b24a25675de40d5bb4de6e41b0df07bc9856295e7e2b3a3600c400c2\"\n dependencies = [\n  \"libc\",\n ]"}, {"sha": "b63b4d81a2a47f835579287d1639d2bd2266ef5a", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -180,7 +180,7 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { unimplemented!() }\n+    fn foo(&self) -> u32 { todo!() }\n \n }\n \"#####,\n@@ -606,6 +606,21 @@ impl Walrus {\n     )\n }\n \n+#[test]\n+fn doctest_reorder_fields() {\n+    check(\n+        \"reorder_fields\",\n+        r#####\"\n+struct Foo {foo: i32, bar: i32};\n+const test: Foo = <|>Foo {bar: 0, foo: 1}\n+\"#####,\n+        r#####\"\n+struct Foo {foo: i32, bar: i32};\n+const test: Foo = Foo {foo: 1, bar: 0}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_if_let_with_match() {\n     check("}, {"sha": "6622eadb2da1fd9bf2275a57634306306cfbc35c", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, AstNode, AstToken, NameOwner, TypeParamsOwner},\n+    ast::{self, AstNode, NameOwner, TypeParamsOwner},\n     TextUnit,\n };\n use stdx::{format_to, SepBy};\n@@ -42,7 +42,7 @@ pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n         if let Some(type_params) = type_params {\n             let lifetime_params = type_params\n                 .lifetime_params()\n-                .filter_map(|it| it.lifetime())\n+                .filter_map(|it| it.lifetime_token())\n                 .map(|it| it.text().clone());\n             let type_params =\n                 type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());"}, {"sha": "2d6d44980e1816a9fe0bd88cdb42398719c6e011", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -40,7 +40,7 @@ enum AddMissingImplMembersMode {\n // }\n //\n // impl Trait<u32> for () {\n-//     fn foo(&self) -> u32 { unimplemented!() }\n+//     fn foo(&self) -> u32 { todo!() }\n //\n // }\n // ```\n@@ -165,7 +165,7 @@ fn add_missing_impl_members_inner(\n \n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     if fn_def.body().is_none() {\n-        fn_def.with_body(make::block_from_expr(make::expr_unimplemented()))\n+        fn_def.with_body(make::block_from_expr(make::expr_todo()))\n     } else {\n         fn_def\n     }\n@@ -215,8 +215,8 @@ impl Foo for S {\n     fn bar(&self) {}\n     <|>type Output;\n     const CONST: usize = 42;\n-    fn foo(&self) { unimplemented!() }\n-    fn baz(&self) { unimplemented!() }\n+    fn foo(&self) { todo!() }\n+    fn baz(&self) { todo!() }\n \n }\",\n         );\n@@ -250,7 +250,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>fn foo(&self) { todo!() }\n \n }\",\n         );\n@@ -268,7 +268,7 @@ impl Foo for S { <|> }\",\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>fn foo(&self) { todo!() }\n }\",\n         );\n     }\n@@ -285,7 +285,7 @@ impl Foo<u32> for S { <|> }\",\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl Foo<u32> for S {\n-    <|>fn foo(&self, t: u32) -> &u32 { unimplemented!() }\n+    <|>fn foo(&self, t: u32) -> &u32 { todo!() }\n }\",\n         );\n     }\n@@ -302,7 +302,7 @@ impl<U> Foo<U> for S { <|> }\",\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl<U> Foo<U> for S {\n-    <|>fn foo(&self, t: U) -> &U { unimplemented!() }\n+    <|>fn foo(&self, t: U) -> &U { todo!() }\n }\",\n         );\n     }\n@@ -319,7 +319,7 @@ impl Foo for S {}<|>\",\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>fn foo(&self) { todo!() }\n }\",\n         )\n     }\n@@ -342,7 +342,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar) { todo!() }\n }\",\n         );\n     }\n@@ -365,7 +365,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n }\",\n         );\n     }\n@@ -388,7 +388,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo<u32> for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n }\",\n         );\n     }\n@@ -414,7 +414,7 @@ mod foo {\n struct Param;\n struct S;\n impl foo::Foo<Param> for S {\n-    <|>fn foo(&self, bar: Param) { unimplemented!() }\n+    <|>fn foo(&self, bar: Param) { todo!() }\n }\",\n         );\n     }\n@@ -439,7 +439,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { todo!() }\n }\",\n         );\n     }\n@@ -464,7 +464,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { todo!() }\n }\",\n         );\n     }\n@@ -487,7 +487,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { unimplemented!() }\n+    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { todo!() }\n }\",\n         );\n     }\n@@ -544,7 +544,7 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>type Output;\n-    fn foo(&self) { unimplemented!() }\n+    fn foo(&self) { todo!() }\n }\"#,\n         )\n     }"}, {"sha": "240b19fa378c5432c4d2023ddf5e083072f1a863", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,8 +1,7 @@\n use hir::Adt;\n use ra_syntax::{\n     ast::{\n-        self, AstNode, AstToken, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner,\n-        VisibilityOwner,\n+        self, AstNode, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner, VisibilityOwner,\n     },\n     TextUnit, T,\n };\n@@ -106,7 +105,7 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params\n             .lifetime_params()\n-            .filter_map(|it| it.lifetime())\n+            .filter_map(|it| it.lifetime_token())\n             .map(|it| it.text().clone());\n         let type_params =\n             type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());"}, {"sha": "c4fb425b078e7b8da2de7ae1565aadd1318c8dc5", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         ast::Pat::BindPat(pat) => pat,\n         _ => return None,\n     };\n-    if bind_pat.is_mutable() {\n+    if bind_pat.mut_token().is_some() {\n         tested_by!(test_not_inline_mut_variable);\n         return None;\n     }"}, {"sha": "8d0f7e922a1d0e9b9a1d47846fa9e04af99630ec", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n         };\n         if is_full_stmt {\n             tested_by!(test_introduce_var_expr_stmt);\n-            if !full_stmt.unwrap().has_semi() {\n+            if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n             edit.replace(expr.syntax().text_range(), buf);"}, {"sha": "0958f52f1f7bafe7d5707beefdf354f6c8d1e9b6", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n use ra_syntax::{\n     algo::{neighbor, SyntaxRewriter},\n     ast::{self, edit::AstNodeEdit, make},\n-    AstNode, AstToken, Direction, InsertPosition, SyntaxElement, T,\n+    AstNode, Direction, InsertPosition, SyntaxElement, T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -82,7 +82,7 @@ fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTre\n             .filter(|it| it.kind() != T!['{'] && it.kind() != T!['}']),\n     );\n     let use_tree_list = lhs.use_tree_list()?;\n-    let pos = InsertPosition::Before(use_tree_list.r_curly()?.syntax().clone().into());\n+    let pos = InsertPosition::Before(use_tree_list.r_curly_token()?.into());\n     let use_tree_list = use_tree_list.insert_children(pos, to_insert);\n     Some(lhs.with_use_tree_list(use_tree_list))\n }"}, {"sha": "0f26884dc13e28e97b5c8190fc1cf83e4b043129", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -2,6 +2,7 @@ use ra_syntax::{\n     ast::{self, edit::AstNodeEdit, make, AstNode, NameOwner, TypeBoundsOwner},\n     match_ast,\n     SyntaxKind::*,\n+    T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -42,7 +43,7 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n             ast::EnumDef(it) => it.variant_list()?.syntax().clone().into(),\n             ast::StructDef(it) => {\n                 it.syntax().children_with_tokens()\n-                    .find(|it| it.kind() == RECORD_FIELD_DEF_LIST || it.kind() == SEMI)?\n+                    .find(|it| it.kind() == RECORD_FIELD_DEF_LIST || it.kind() == T![;])?\n             },\n             _ => return None\n         }"}, {"sha": "692dd1315e2806f2129ffcacd552e774611fa099", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,230 @@\n+use std::collections::HashMap;\n+\n+use itertools::Itertools;\n+\n+use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n+use ra_ide_db::RootDatabase;\n+use ra_syntax::{\n+    algo, ast,\n+    ast::{Name, Path, RecordLit, RecordPat},\n+    AstNode, SyntaxKind, SyntaxNode,\n+};\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n+use ra_syntax::ast::{Expr, NameRef};\n+\n+// Assist: reorder_fields\n+//\n+// Reorder the fields of record literals and record patterns in the same order as in\n+// the definition.\n+//\n+// ```\n+// struct Foo {foo: i32, bar: i32};\n+// const test: Foo = <|>Foo {bar: 0, foo: 1}\n+// ```\n+// ->\n+// ```\n+// struct Foo {foo: i32, bar: i32};\n+// const test: Foo = Foo {foo: 1, bar: 0}\n+// ```\n+//\n+pub(crate) fn reorder_fields(ctx: AssistCtx) -> Option<Assist> {\n+    reorder::<RecordLit>(ctx.clone()).or_else(|| reorder::<RecordPat>(ctx))\n+}\n+\n+fn reorder<R: AstNode>(ctx: AssistCtx) -> Option<Assist> {\n+    let record = ctx.find_node_at_offset::<R>()?;\n+    let path = record.syntax().children().find_map(Path::cast)?;\n+\n+    let ranks = compute_fields_ranks(&path, &ctx)?;\n+\n+    let fields = get_fields(&record.syntax());\n+    let sorted_fields = sorted_by_rank(&fields, |node| {\n+        *ranks.get(&get_field_name(node)).unwrap_or(&usize::max_value())\n+    });\n+\n+    if sorted_fields == fields {\n+        return None;\n+    }\n+\n+    ctx.add_assist(AssistId(\"reorder_fields\"), \"Reorder record fields\", |edit| {\n+        for (old, new) in fields.iter().zip(&sorted_fields) {\n+            algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n+        }\n+        edit.target(record.syntax().text_range())\n+    })\n+}\n+\n+fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n+    use SyntaxKind::*;\n+    match node.kind() {\n+        RECORD_LIT => vec![RECORD_FIELD],\n+        RECORD_PAT => vec![RECORD_FIELD_PAT, BIND_PAT],\n+        _ => vec![],\n+    }\n+}\n+\n+fn get_field_name(node: &SyntaxNode) -> String {\n+    use SyntaxKind::*;\n+    match node.kind() {\n+        RECORD_FIELD => {\n+            if let Some(name) = node.children().find_map(NameRef::cast) {\n+                return name.to_string();\n+            }\n+            node.children().find_map(Expr::cast).map(|expr| expr.to_string()).unwrap_or_default()\n+        }\n+        BIND_PAT | RECORD_FIELD_PAT => {\n+            node.children().find_map(Name::cast).map(|n| n.to_string()).unwrap_or_default()\n+        }\n+        _ => String::new(),\n+    }\n+}\n+\n+fn get_fields(record: &SyntaxNode) -> Vec<SyntaxNode> {\n+    let kinds = get_fields_kind(record);\n+    record.children().flat_map(|n| n.children()).filter(|n| kinds.contains(&n.kind())).collect()\n+}\n+\n+fn sorted_by_rank(\n+    fields: &[SyntaxNode],\n+    get_rank: impl Fn(&SyntaxNode) -> usize,\n+) -> Vec<SyntaxNode> {\n+    fields.iter().cloned().sorted_by_key(get_rank).collect()\n+}\n+\n+fn struct_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<Struct> {\n+    match sema.resolve_path(path) {\n+        Some(PathResolution::Def(ModuleDef::Adt(Adt::Struct(s)))) => Some(s),\n+        _ => None,\n+    }\n+}\n+\n+fn compute_fields_ranks(path: &Path, ctx: &AssistCtx) -> Option<HashMap<String, usize>> {\n+    Some(\n+        struct_definition(path, ctx.sema)?\n+            .fields(ctx.db)\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, field)| (field.name(ctx.db).to_string(), idx))\n+            .collect(),\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn not_applicable_if_sorted() {\n+        check_assist_not_applicable(\n+            reorder_fields,\n+            r#\"\n+        struct Foo {\n+            foo: i32,\n+            bar: i32,\n+        }\n+\n+        const test: Foo = <|>Foo { foo: 0, bar: 0 };\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn trivial_empty_fields() {\n+        check_assist_not_applicable(\n+            reorder_fields,\n+            r#\"\n+        struct Foo {};\n+        const test: Foo = <|>Foo {}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_struct_fields() {\n+        check_assist(\n+            reorder_fields,\n+            r#\"\n+        struct Foo {foo: i32, bar: i32};\n+        const test: Foo = <|>Foo {bar: 0, foo: 1}\n+        \"#,\n+            r#\"\n+        struct Foo {foo: i32, bar: i32};\n+        const test: Foo = <|>Foo {foo: 1, bar: 0}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_struct_pattern() {\n+        check_assist(\n+            reorder_fields,\n+            r#\"\n+        struct Foo { foo: i64, bar: i64, baz: i64 }\n+\n+        fn f(f: Foo) -> {\n+            match f {\n+                <|>Foo { baz: 0, ref mut bar, .. } => (),\n+                _ => ()\n+            }\n+        }\n+        \"#,\n+            r#\"\n+        struct Foo { foo: i64, bar: i64, baz: i64 }\n+\n+        fn f(f: Foo) -> {\n+            match f {\n+                <|>Foo { ref mut bar, baz: 0, .. } => (),\n+                _ => ()\n+            }\n+        }\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_with_extra_field() {\n+        check_assist(\n+            reorder_fields,\n+            r#\"\n+            struct Foo {\n+                foo: String,\n+                bar: String,\n+            }\n+\n+            impl Foo {\n+                fn new() -> Foo {\n+                    let foo = String::new();\n+                    <|>Foo {\n+                        bar: foo.clone(),\n+                        extra: \"Extra field\",\n+                        foo,\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            struct Foo {\n+                foo: String,\n+                bar: String,\n+            }\n+\n+            impl Foo {\n+                fn new() -> Foo {\n+                    let foo = String::new();\n+                    <|>Foo {\n+                        foo,\n+                        bar: foo.clone(),\n+                        extra: \"Extra field\",\n+                    }\n+                }\n+            }\n+            \"#,\n+        )\n+    }\n+}"}, {"sha": "a00136da1c14baa05ea9afd4a48460fffadb0c36", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -129,6 +129,7 @@ mod handlers {\n     mod replace_unwrap_with_match;\n     mod split_import;\n     mod add_from_impl_for_enum;\n+    mod reorder_fields;\n \n     pub(crate) fn all() -> &'static [AssistHandler] {\n         &[\n@@ -170,6 +171,7 @@ mod handlers {\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n+            reorder_fields::reorder_fields,\n         ]\n     }\n }"}, {"sha": "58ae6ce418546cd439fa1d56d0403ca47dfc245d", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -139,7 +139,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::FieldExpr,\n-    ) -> Option<crate::StructField> {\n+    ) -> Option<StructField> {\n         let expr_id = self.expr_id(db, &field.clone().into())?;\n         self.infer.as_ref()?.field_resolution(expr_id).map(|it| it.into())\n     }\n@@ -148,21 +148,19 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::RecordField,\n-    ) -> Option<(crate::StructField, Option<Local>)> {\n-        let (expr_id, local) = match field.expr() {\n-            Some(it) => (self.expr_id(db, &it)?, None),\n-            None => {\n-                let src = InFile { file_id: self.file_id, value: field };\n-                let expr_id = self.body_source_map.as_ref()?.field_init_shorthand_expr(src)?;\n-                let local_name = field.name_ref()?.as_name();\n-                let path = ModPath::from_segments(PathKind::Plain, once(local_name));\n-                let local = match self.resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n-                    Some(ValueNs::LocalBinding(pat_id)) => {\n-                        Some(Local { pat_id, parent: self.resolver.body_owner()? })\n-                    }\n-                    _ => None,\n-                };\n-                (expr_id, local)\n+    ) -> Option<(StructField, Option<Local>)> {\n+        let expr = field.expr()?;\n+        let expr_id = self.expr_id(db, &expr)?;\n+        let local = if field.name_ref().is_some() {\n+            None\n+        } else {\n+            let local_name = field.field_name()?.as_name();\n+            let path = ModPath::from_segments(PathKind::Plain, once(local_name));\n+            match self.resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n+                Some(ValueNs::LocalBinding(pat_id)) => {\n+                    Some(Local { pat_id, parent: self.resolver.body_owner()? })\n+                }\n+                _ => None,\n             }\n         };\n         let struct_field = self.infer.as_ref()?.record_field_resolution(expr_id)?;\n@@ -255,7 +253,7 @@ impl SourceAnalyzer {\n             _ => return None,\n         };\n \n-        let (variant, missing_fields) =\n+        let (variant, missing_fields, _exhaustive) =\n             record_pattern_missing_fields(db, infer, pat_id, &body[pat_id])?;\n         let res = self.missing_fields(db, krate, substs, variant, missing_fields);\n         Some(res)\n@@ -319,8 +317,7 @@ fn scope_for_offset(\n             if source.file_id != offset.file_id {\n                 return None;\n             }\n-            let syntax_node_ptr =\n-                source.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+            let syntax_node_ptr = source.value.syntax_node_ptr();\n             Some((syntax_node_ptr, scope))\n         })\n         // find containing scope\n@@ -399,8 +396,7 @@ fn adjust(\n             if source.file_id != file_id {\n                 return None;\n             }\n-            let syntax_node_ptr =\n-                source.value.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+            let syntax_node_ptr = source.value.syntax_node_ptr();\n             Some((syntax_node_ptr, scope))\n         })\n         .map(|(ptr, scope)| (ptr.range(), scope))"}, {"sha": "7c0d936910270c08ff02afab3c948592a4bc899a", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,7 +4,6 @@ use std::sync::Arc;\n \n use either::Either;\n use hir_expand::{\n-    hygiene::Hygiene,\n     name::{AsName, Name},\n     InFile,\n };\n@@ -13,7 +12,7 @@ use ra_prof::profile;\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n+    body::CfgExpander, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n     type_ref::TypeRef, visibility::RawVisibility, EnumId, HasModule, LocalEnumVariantId,\n     LocalStructFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n };\n@@ -125,8 +124,9 @@ fn lower_enum(\n \n impl VariantData {\n     fn new(db: &dyn DefDatabase, flavor: InFile<ast::StructKind>, module_id: ModuleId) -> Self {\n+        let mut expander = CfgExpander::new(db, flavor.file_id, module_id.krate);\n         let mut trace = Trace::new_for_arena();\n-        match lower_struct(db, &mut trace, &flavor, module_id) {\n+        match lower_struct(db, &mut expander, &mut trace, &flavor) {\n             StructKind::Tuple => VariantData::Tuple(trace.into_arena()),\n             StructKind::Record => VariantData::Record(trace.into_arena()),\n             StructKind::Unit => VariantData::Unit,\n@@ -178,8 +178,9 @@ impl HasChildSource for VariantId {\n                 it.lookup(db).container.module(db),\n             ),\n         };\n+        let mut expander = CfgExpander::new(db, src.file_id, module_id.krate);\n         let mut trace = Trace::new_for_map();\n-        lower_struct(db, &mut trace, &src, module_id);\n+        lower_struct(db, &mut expander, &mut trace, &src);\n         src.with_value(trace.into_map())\n     }\n }\n@@ -193,16 +194,15 @@ pub enum StructKind {\n \n fn lower_struct(\n     db: &dyn DefDatabase,\n+    expander: &mut CfgExpander,\n     trace: &mut Trace<StructFieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n     ast: &InFile<ast::StructKind>,\n-    module_id: ModuleId,\n ) -> StructKind {\n-    let crate_graph = db.crate_graph();\n     match &ast.value {\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n-                let attrs = Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id));\n-                if !attrs.is_cfg_enabled(&crate_graph[module_id.krate].cfg_options) {\n+                let attrs = expander.parse_attrs(&fd);\n+                if !expander.is_cfg_enabled(&attrs) {\n                     continue;\n                 }\n \n@@ -219,8 +219,8 @@ fn lower_struct(\n         }\n         ast::StructKind::Record(fl) => {\n             for fd in fl.fields() {\n-                let attrs = Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id));\n-                if !attrs.is_cfg_enabled(&crate_graph[module_id.krate].cfg_options) {\n+                let attrs = expander.parse_attrs(&fd);\n+                if !expander.is_cfg_enabled(&attrs) {\n                     continue;\n                 }\n "}, {"sha": "2f2e3e5ba2c0510c67ceeba22379595c4804c0a4", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -93,6 +93,7 @@ impl Attrs {\n     }\n \n     pub(crate) fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> bool {\n+        // FIXME: handle cfg_attr :-)\n         self.by_key(\"cfg\").tt_values().all(|tt| cfg_options.is_cfg_enabled(tt) != Some(false))\n     }\n }"}, {"sha": "eafaf48c17eea77cb01a84a8359ca677f2608caa", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -9,11 +9,14 @@ use drop_bomb::DropBomb;\n use either::Either;\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{map::ArenaMap, Arena};\n+use ra_cfg::CfgOptions;\n+use ra_db::CrateId;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n+    attr::Attrs,\n     db::DefDatabase,\n     expr::{Expr, ExprId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n@@ -24,25 +27,59 @@ use crate::{\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n+/// A subser of Exander that only deals with cfg attributes. We only need it to\n+/// avoid cyclic queries in crate def map during enum processing.\n+pub(crate) struct CfgExpander {\n+    cfg_options: CfgOptions,\n+    hygiene: Hygiene,\n+}\n+\n pub(crate) struct Expander {\n+    cfg_expander: CfgExpander,\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n-    hygiene: Hygiene,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n     recursive_limit: usize,\n }\n \n+impl CfgExpander {\n+    pub(crate) fn new(\n+        db: &dyn DefDatabase,\n+        current_file_id: HirFileId,\n+        krate: CrateId,\n+    ) -> CfgExpander {\n+        let hygiene = Hygiene::new(db.upcast(), current_file_id);\n+        let cfg_options = db.crate_graph()[krate].cfg_options.clone();\n+        CfgExpander { cfg_options, hygiene }\n+    }\n+\n+    pub(crate) fn parse_attrs(&self, owner: &dyn ast::AttrsOwner) -> Attrs {\n+        Attrs::new(owner, &self.hygiene)\n+    }\n+\n+    pub(crate) fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n+        attrs.is_cfg_enabled(&self.cfg_options)\n+    }\n+}\n+\n impl Expander {\n     pub(crate) fn new(\n         db: &dyn DefDatabase,\n         current_file_id: HirFileId,\n         module: ModuleId,\n     ) -> Expander {\n+        let cfg_expander = CfgExpander::new(db, current_file_id, module.krate);\n         let crate_def_map = db.crate_def_map(module.krate);\n-        let hygiene = Hygiene::new(db.upcast(), current_file_id);\n         let ast_id_map = db.ast_id_map(current_file_id);\n-        Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module, recursive_limit: 0 }\n+        Expander {\n+            cfg_expander,\n+            crate_def_map,\n+            current_file_id,\n+            ast_id_map,\n+            module,\n+            recursive_limit: 0,\n+        }\n     }\n \n     pub(crate) fn enter_expand<T: ast::AstNode>(\n@@ -75,7 +112,7 @@ impl Expander {\n                         ast_id_map: mem::take(&mut self.ast_id_map),\n                         bomb: DropBomb::new(\"expansion mark dropped\"),\n                     };\n-                    self.hygiene = Hygiene::new(db.upcast(), file_id);\n+                    self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n                     self.current_file_id = file_id;\n                     self.ast_id_map = db.ast_id_map(file_id);\n                     self.recursive_limit += 1;\n@@ -91,7 +128,7 @@ impl Expander {\n     }\n \n     pub(crate) fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {\n-        self.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n+        self.cfg_expander.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n         self.current_file_id = mark.file_id;\n         self.ast_id_map = mem::take(&mut mark.ast_id_map);\n         self.recursive_limit -= 1;\n@@ -102,8 +139,16 @@ impl Expander {\n         InFile { file_id: self.current_file_id, value }\n     }\n \n+    pub(crate) fn parse_attrs(&self, owner: &dyn ast::AttrsOwner) -> Attrs {\n+        self.cfg_expander.parse_attrs(owner)\n+    }\n+\n+    pub(crate) fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n+        self.cfg_expander.is_cfg_enabled(attrs)\n+    }\n+\n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        Path::from_src(path, &self.hygiene)\n+        Path::from_src(path, &self.cfg_expander.hygiene)\n     }\n \n     fn resolve_path_as_macro(&self, db: &dyn DefDatabase, path: &ModPath) -> Option<MacroDefId> {\n@@ -142,7 +187,7 @@ pub struct Body {\n     pub item_scope: ItemScope,\n }\n \n-pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;\n+pub type ExprPtr = AstPtr<ast::Expr>;\n pub type ExprSource = InFile<ExprPtr>;\n \n pub type PatPtr = Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>;\n@@ -236,11 +281,11 @@ impl Index<PatId> for Body {\n \n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n-        self.expr_map_back[expr]\n+        self.expr_map_back[expr].clone()\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n-        let src = node.map(|it| Either::Left(AstPtr::new(it)));\n+        let src = node.map(|it| AstPtr::new(it));\n         self.expr_map.get(&src).cloned()\n     }\n \n@@ -249,13 +294,8 @@ impl BodySourceMap {\n         self.expansions.get(&src).cloned()\n     }\n \n-    pub fn field_init_shorthand_expr(&self, node: InFile<&ast::RecordField>) -> Option<ExprId> {\n-        let src = node.map(|it| Either::Right(AstPtr::new(it)));\n-        self.expr_map.get(&src).cloned()\n-    }\n-\n     pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n-        self.pat_map_back[pat]\n+        self.pat_map_back[pat].clone()\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {\n@@ -264,6 +304,6 @@ impl BodySourceMap {\n     }\n \n     pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n-        self.field_map[&(expr, field)]\n+        self.field_map[&(expr, field)].clone()\n     }\n }"}, {"sha": "c057dc8f259a851f2c3c8b8a2f1714d95004eed2", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -2,9 +2,7 @@\n //! representation.\n \n use either::Either;\n-\n use hir_expand::{\n-    hygiene::Hygiene,\n     name::{name, AsName, Name},\n     MacroDefId, MacroDefKind,\n };\n@@ -18,10 +16,8 @@ use ra_syntax::{\n };\n use test_utils::tested_by;\n \n-use super::{ExprSource, PatSource};\n use crate::{\n     adt::StructKind,\n-    attr::Attrs,\n     body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n@@ -31,12 +27,13 @@ use crate::{\n     },\n     item_scope::BuiltinShadowMode,\n     path::GenericArgs,\n-    path::Path,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, HasModule, Intern,\n-    ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n+    StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n+use super::{ExprSource, PatSource};\n+\n pub(super) fn lower(\n     db: &dyn DefDatabase,\n     def: DefWithBodyId,\n@@ -104,9 +101,8 @@ impl ExprCollector<'_> {\n     }\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n-        let ptr = Either::Left(ptr);\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_expr(expr, Ok(src));\n+        let id = self.make_expr(expr, Ok(src.clone()));\n         self.source_map.expr_map.insert(src, id);\n         id\n     }\n@@ -115,13 +111,6 @@ impl ExprCollector<'_> {\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n         self.make_expr(expr, Err(SyntheticSyntax))\n     }\n-    fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n-        let ptr = Either::Right(ptr);\n-        let src = self.expander.to_source(ptr);\n-        let id = self.make_expr(expr, Ok(src));\n-        self.source_map.expr_map.insert(src, id);\n-        id\n-    }\n     fn empty_block(&mut self) -> ExprId {\n         self.alloc_expr_desugared(Expr::Block { statements: Vec::new(), tail: None })\n     }\n@@ -136,7 +125,7 @@ impl ExprCollector<'_> {\n \n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_pat(pat, Ok(src));\n+        let id = self.make_pat(pat, Ok(src.clone()));\n         self.source_map.pat_map.insert(src, id);\n         id\n     }\n@@ -291,7 +280,7 @@ impl ExprCollector<'_> {\n             ast::Expr::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                let src = self.expander.to_source(Either::Left(syntax_ptr));\n+                let src = self.expander.to_source(syntax_ptr);\n                 self.source_map.expr_map.insert(src, inner);\n                 inner\n             }\n@@ -300,39 +289,24 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n             ast::Expr::RecordLit(e) => {\n-                let crate_graph = self.db.crate_graph();\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();\n                 let record_lit = if let Some(nfl) = e.record_field_list() {\n                     let fields = nfl\n                         .fields()\n                         .inspect(|field| field_ptrs.push(AstPtr::new(field)))\n                         .filter_map(|field| {\n-                            let module_id = ContainerId::DefWithBodyId(self.def).module(self.db);\n-                            let attrs = Attrs::new(\n-                                &field,\n-                                &Hygiene::new(self.db.upcast(), self.expander.current_file_id),\n-                            );\n-\n-                            if !attrs.is_cfg_enabled(&crate_graph[module_id.krate].cfg_options) {\n+                            let attrs = self.expander.parse_attrs(&field);\n+                            if !self.expander.is_cfg_enabled(&attrs) {\n                                 return None;\n                             }\n+                            let name = field.field_name()?.as_name();\n \n                             Some(RecordLitField {\n-                                name: field\n-                                    .name_ref()\n-                                    .map(|nr| nr.as_name())\n-                                    .unwrap_or_else(Name::missing),\n-                                expr: if let Some(e) = field.expr() {\n-                                    self.collect_expr(e)\n-                                } else if let Some(nr) = field.name_ref() {\n-                                    // field shorthand\n-                                    self.alloc_expr_field_shorthand(\n-                                        Expr::Path(Path::from_name_ref(&nr)),\n-                                        AstPtr::new(&field),\n-                                    )\n-                                } else {\n-                                    self.missing_expr()\n+                                name,\n+                                expr: match field.expr() {\n+                                    Some(e) => self.collect_expr(e),\n+                                    None => self.missing_expr(),\n                                 },\n                             })\n                         })\n@@ -372,7 +346,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::RefExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let mutability = Mutability::from_mutable(e.is_mut());\n+                let mutability = Mutability::from_mutable(e.mut_token().is_some());\n                 self.alloc_expr(Expr::Ref { expr, mutability }, syntax_ptr)\n             }\n             ast::Expr::PrefixExpr(e) => {\n@@ -587,7 +561,8 @@ impl ExprCollector<'_> {\n         let pattern = match &pat {\n             ast::Pat::BindPat(bp) => {\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n-                let annotation = BindingAnnotation::new(bp.is_mutable(), bp.is_ref());\n+                let annotation =\n+                    BindingAnnotation::new(bp.mut_token().is_some(), bp.ref_token().is_some());\n                 let subpat = bp.pat().map(|subpat| self.collect_pat(subpat));\n                 if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n                     // This could also be a single-segment path pattern. To\n@@ -628,7 +603,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::RefPat(p) => {\n                 let pat = self.collect_pat_opt(p.pat());\n-                let mutability = Mutability::from_mutable(p.is_mut());\n+                let mutability = Mutability::from_mutable(p.mut_token().is_some());\n                 Pat::Ref { pat, mutability }\n             }\n             ast::Pat::PathPat(p) => {\n@@ -667,7 +642,9 @@ impl ExprCollector<'_> {\n                 });\n                 fields.extend(iter);\n \n-                Pat::Record { path, args: fields }\n+                let ellipsis = record_field_pat_list.dotdot_token().is_some();\n+\n+                Pat::Record { path, args: fields, ellipsis }\n             }\n             ast::Pat::SlicePat(p) => {\n                 let SlicePatComponents { prefix, slice, suffix } = p.components();\n@@ -688,7 +665,6 @@ impl ExprCollector<'_> {\n                     Pat::Missing\n                 }\n             }\n-\n             // FIXME: implement\n             ast::Pat::BoxPat(_) | ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n         };"}, {"sha": "56a20c5bd18fa3355841e7d9e69fc50b3daf8109", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, Expander, FunctionId, FunctionLoc, HasModule,\n-    ImplId, Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    ImplId, Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -74,7 +74,7 @@ impl FunctionData {\n             TypeRef::unit()\n         };\n \n-        let ret_type = if src.value.is_async() {\n+        let ret_type = if src.value.async_token().is_some() {\n             let future_impl = desugar_future_path(ret_type);\n             let ty_bound = TypeBound::Path(future_impl);\n             TypeRef::ImplTrait(vec![ty_bound])\n@@ -135,7 +135,7 @@ impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let src = tr.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let auto = src.value.is_auto();\n+        let auto = src.value.auto_token().is_some();\n         let ast_id_map = db.ast_id_map(src.file_id);\n \n         let container = AssocContainerId::TraitId(tr);\n@@ -212,16 +212,23 @@ impl ImplData {\n \n         let target_trait = src.value.target_trait().map(TypeRef::from_ast);\n         let target_type = TypeRef::from_ast_opt(src.value.target_type());\n-        let is_negative = src.value.is_negative();\n+        let is_negative = src.value.excl_token().is_some();\n         let module_id = impl_loc.container.module(db);\n \n         let mut items = Vec::new();\n \n         if let Some(item_list) = src.value.item_list() {\n-            items.extend(collect_impl_items(db, item_list.impl_items(), src.file_id, id));\n+            let mut expander = Expander::new(db, impl_loc.ast_id.file_id, module_id);\n+            items.extend(collect_impl_items(\n+                db,\n+                &mut expander,\n+                item_list.impl_items(),\n+                src.file_id,\n+                id,\n+            ));\n             items.extend(collect_impl_items_in_macros(\n                 db,\n-                module_id,\n+                &mut expander,\n                 &src.with_value(item_list),\n                 id,\n             ));\n@@ -268,18 +275,17 @@ impl ConstData {\n \n fn collect_impl_items_in_macros(\n     db: &dyn DefDatabase,\n-    module_id: ModuleId,\n+    expander: &mut Expander,\n     impl_def: &InFile<ast::ItemList>,\n     id: ImplId,\n ) -> Vec<AssocItemId> {\n-    let mut expander = Expander::new(db, impl_def.file_id, module_id);\n     let mut res = Vec::new();\n \n     // We set a limit to protect against infinite recursion\n     let limit = 100;\n \n     for m in impl_def.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-        res.extend(collect_impl_items_in_macro(db, &mut expander, m, id, limit))\n+        res.extend(collect_impl_items_in_macro(db, expander, m, id, limit))\n     }\n \n     res\n@@ -300,6 +306,7 @@ fn collect_impl_items_in_macro(\n         let items: InFile<ast::MacroItems> = expander.to_source(items);\n         let mut res = collect_impl_items(\n             db,\n+            expander,\n             items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n             items.file_id,\n             id,\n@@ -319,32 +326,26 @@ fn collect_impl_items_in_macro(\n \n fn collect_impl_items(\n     db: &dyn DefDatabase,\n+    expander: &mut Expander,\n     impl_items: impl Iterator<Item = ImplItem>,\n     file_id: crate::HirFileId,\n     id: ImplId,\n ) -> Vec<AssocItemId> {\n     let items = db.ast_id_map(file_id);\n-    let crate_graph = db.crate_graph();\n-    let module_id = id.lookup(db).container.module(db);\n \n     impl_items\n         .filter_map(|item_node| match item_node {\n             ast::ImplItem::FnDef(it) => {\n+                let attrs = expander.parse_attrs(&it);\n+                if !expander.is_cfg_enabled(&attrs) {\n+                    return None;\n+                }\n                 let def = FunctionLoc {\n                     container: AssocContainerId::ImplId(id),\n                     ast_id: AstId::new(file_id, items.ast_id(&it)),\n                 }\n                 .intern(db);\n-\n-                if !db\n-                    .function_data(def)\n-                    .attrs\n-                    .is_cfg_enabled(&crate_graph[module_id.krate].cfg_options)\n-                {\n-                    None\n-                } else {\n-                    Some(def.into())\n-                }\n+                Some(def.into())\n             }\n             ast::ImplItem::ConstDef(it) => {\n                 let def = ConstLoc {"}, {"sha": "cfa0f2f76f4cd563c4ab754bc3059fe428e8d7ed", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -20,7 +20,7 @@ impl Diagnostic for UnresolvedModule {\n         \"unresolved module\".to_string()\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.decl.into() }\n+        InFile { file_id: self.file, value: self.decl.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "e11bdf3ec21f7f6bad0260e6ebdc6bd551e9ffd7", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -376,35 +376,14 @@ pub enum Pat {\n     Wild,\n     Tuple(Vec<PatId>),\n     Or(Vec<PatId>),\n-    Record {\n-        path: Option<Path>,\n-        args: Vec<RecordFieldPat>,\n-        // FIXME: 'ellipsis' option\n-    },\n-    Range {\n-        start: ExprId,\n-        end: ExprId,\n-    },\n-    Slice {\n-        prefix: Vec<PatId>,\n-        slice: Option<PatId>,\n-        suffix: Vec<PatId>,\n-    },\n+    Record { path: Option<Path>, args: Vec<RecordFieldPat>, ellipsis: bool },\n+    Range { start: ExprId, end: ExprId },\n+    Slice { prefix: Vec<PatId>, slice: Option<PatId>, suffix: Vec<PatId> },\n     Path(Path),\n     Lit(ExprId),\n-    Bind {\n-        mode: BindingAnnotation,\n-        name: Name,\n-        subpat: Option<PatId>,\n-    },\n-    TupleStruct {\n-        path: Option<Path>,\n-        args: Vec<PatId>,\n-    },\n-    Ref {\n-        pat: PatId,\n-        mutability: Mutability,\n-    },\n+    Bind { mode: BindingAnnotation, name: Name, subpat: Option<PatId> },\n+    TupleStruct { path: Option<Path>, args: Vec<PatId> },\n+    Ref { pat: PatId, mutability: Mutability },\n }\n \n impl Pat {"}, {"sha": "d850244c4a1f512f3b4272bd6a1b9fad6680fc89", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -194,7 +194,7 @@ impl GenericParams {\n     }\n \n     fn add_where_predicate_from_bound(&mut self, bound: ast::TypeBound, type_ref: TypeRef) {\n-        if bound.has_question_mark() {\n+        if bound.question_token().is_some() {\n             // FIXME: remove this bound\n             return;\n         }"}, {"sha": "d96ac8c0ae1c4cda46f2174d859334f456cf1124", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,6 +4,7 @@\n //! features, such as Fn family of traits.\n use std::sync::Arc;\n \n+use ra_prof::profile;\n use ra_syntax::SmolStr;\n use rustc_hash::FxHashMap;\n \n@@ -78,6 +79,8 @@ impl LangItems {\n \n     /// Salsa query. This will look for lang items in a specific crate.\n     pub(crate) fn crate_lang_items_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<LangItems> {\n+        let _p = profile(\"crate_lang_items_query\");\n+\n         let mut lang_items = LangItems::default();\n \n         let crate_def_map = db.crate_def_map(krate);\n@@ -95,6 +98,7 @@ impl LangItems {\n         db: &dyn DefDatabase,\n         module: ModuleId,\n     ) -> Option<Arc<LangItems>> {\n+        let _p = profile(\"module_lang_items_query\");\n         let mut lang_items = LangItems::default();\n         lang_items.collect_lang_items(db, module);\n         if lang_items.items.is_empty() {\n@@ -111,6 +115,7 @@ impl LangItems {\n         start_crate: CrateId,\n         item: SmolStr,\n     ) -> Option<LangItemTarget> {\n+        let _p = profile(\"lang_item_query\");\n         let lang_items = db.crate_lang_items(start_crate);\n         let start_crate_target = lang_items.items.get(&item);\n         if let Some(target) = start_crate_target {"}, {"sha": "98c74fe257b4bab593adbd5e0def01663cd4e4ea", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -462,6 +462,14 @@ impl DefCollector<'_> {\n                 Some(ModuleDefId::AdtId(AdtId::EnumId(e))) => {\n                     tested_by!(glob_enum);\n                     // glob import from enum => just import all the variants\n+\n+                    // XXX: urgh, so this works by accident! Here, we look at\n+                    // the enum data, and, in theory, this might require us to\n+                    // look back at the crate_def_map, creating a cycle. For\n+                    // example, `enum E { crate::some_macro!(); }`. Luckely, the\n+                    // only kind of macro that is allowed inside enum is a\n+                    // `cfg_macro`, and we don't need to run name resolution for\n+                    // it, but this is sheer luck!\n                     let enum_data = self.db.enum_data(e);\n                     let resolutions = enum_data\n                         .variants\n@@ -977,11 +985,7 @@ impl ModCollector<'_, '_> {\n     }\n \n     fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n-        // FIXME: handle cfg_attr :-)\n-        attrs\n-            .by_key(\"cfg\")\n-            .tt_values()\n-            .all(|tt| self.def_collector.cfg_options.is_cfg_enabled(tt) != Some(false))\n+        attrs.is_cfg_enabled(self.def_collector.cfg_options)\n     }\n }\n "}, {"sha": "afd538e4acb513baab2c23086d95d10399580d46", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -287,7 +287,7 @@ impl RawItemsCollector {\n         let visibility = RawVisibility::from_ast_with_hygiene(module.visibility(), &self.hygiene);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n-        if module.has_semi() {\n+        if module.semicolon_token().is_some() {\n             let item =\n                 self.raw_items.modules.alloc(ModuleData::Declaration { name, visibility, ast_id });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));"}, {"sha": "87165ac33a60f028ff101849ed3c94e124c3c738", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,6 +32,9 @@ fn typing_inside_a_function_should_not_invalidate_def_map() {\n \n         use crate::foo::bar::Baz;\n \n+        enum E { A, B }\n+        use E::*;\n+\n         fn foo() -> i32 {\n             1 + 1\n         }\n@@ -46,6 +49,9 @@ fn typing_inside_a_function_should_not_invalidate_def_map() {\n \n         use crate::foo::bar::Baz;\n \n+        enum E { A, B }\n+        use E::*;\n+\n         fn foo() -> i32 { 92 }\n         \",\n     );"}, {"sha": "91c7b3e094191e6a476e83cb8a29096939c7939d", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -134,11 +134,6 @@ impl Path {\n         lower::lower_path(path, hygiene)\n     }\n \n-    /// Converts an `ast::NameRef` into a single-identifier `Path`.\n-    pub(crate) fn from_name_ref(name_ref: &ast::NameRef) -> Path {\n-        Path { type_anchor: None, mod_path: name_ref.as_name().into(), generic_args: vec![None] }\n-    }\n-\n     /// Converts a known mod path to `Path`.\n     pub(crate) fn from_known_path(\n         path: ModPath,"}, {"sha": "0f806d6fb500abf04546fc85387465555e7f572a", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -28,7 +28,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     loop {\n         let segment = path.segment()?;\n \n-        if segment.coloncolon().is_some() {\n+        if segment.coloncolon_token().is_some() {\n             kind = PathKind::Abs;\n         }\n "}, {"sha": "5b6854b0f0038de438ecfb8cd1d9d02ecf2de374", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn lower_use_tree(\n         let alias = tree.alias().map(|a| {\n             a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n         });\n-        let is_glob = tree.star().is_some();\n+        let is_glob = tree.star_token().is_some();\n         if let Some(ast_path) = tree.path() {\n             // Handle self in a path.\n             // E.g. `use something::{self, <...>}`"}, {"sha": "ea29c4176c1dd6091b99b5a8222b57969e5ee5f7", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -77,7 +77,7 @@ impl TypeRef {\n             }\n             ast::TypeRef::PointerType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n-                let mutability = Mutability::from_mutable(inner.is_mut());\n+                let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::ArrayType(inner) => {\n@@ -88,7 +88,7 @@ impl TypeRef {\n             }\n             ast::TypeRef::ReferenceType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n-                let mutability = Mutability::from_mutable(inner.is_mut());\n+                let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::PlaceholderType(_inner) => TypeRef::Placeholder,"}, {"sha": "a3ca302c2efa8feb195a32feb7108c900bef23e7", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -90,7 +90,7 @@ impl AstIdMap {\n     }\n \n     pub(crate) fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n-        self.arena[id.raw].cast::<N>().unwrap()\n+        self.arena[id.raw].clone().cast::<N>().unwrap()\n     }\n \n     fn alloc(&mut self, item: &SyntaxNode) -> ErasedFileAstId {"}, {"sha": "219bc20978e5c66c79c156bf3591c248beacc2ae", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -232,7 +232,7 @@ mod tests {\n         let quoted = quote!(#a);\n         assert_eq!(quoted.to_string(), \"hello\");\n         let t = format!(\"{:?}\", quoted);\n-        assert_eq!(t, \"Subtree { delimiter: None, token_trees: [Leaf(Ident(Ident { text: \\\"hello\\\", id: TokenId(4294967295) }))] }\");\n+        assert_eq!(t, \"SUBTREE $\\n  IDENT   hello 4294967295\");\n     }\n \n     #[test]"}, {"sha": "59efc1c31d8c33c10de7a6536d435a3de8d16536", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,6 +24,8 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n+scoped-tls = \"1\"\n+\n chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"039fc904a05f8cb3d0c682c9a57a63dda7a35356\" }\n chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"039fc904a05f8cb3d0c682c9a57a63dda7a35356\" }\n chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"039fc904a05f8cb3d0c682c9a57a63dda7a35356\" }"}, {"sha": "33da16b487a9dfdf0c9aa4d2698c68695c3c30dd", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -11,7 +11,7 @@ use ra_db::{impl_intern_key, salsa, CrateId, Upcast};\n use ra_prof::profile;\n \n use crate::{\n-    method_resolution::CrateImplDefs,\n+    method_resolution::{CrateImplDefs, TyFingerprint},\n     traits::{chalk, AssocTyValue, Impl},\n     Binders, CallableDef, GenericPredicate, InferenceResult, PolyFnSig, Substs, TraitRef, Ty,\n     TyDefId, TypeCtor, ValueTyDefId,\n@@ -65,7 +65,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplDefs>;\n \n     #[salsa::invoke(crate::traits::impls_for_trait_query)]\n-    fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplId]>;\n+    fn impls_for_trait(\n+        &self,\n+        krate: CrateId,\n+        trait_: TraitId,\n+        self_ty_fp: Option<TyFingerprint>,\n+    ) -> Arc<[ImplId]>;\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]"}, {"sha": "927896d6f7b83a090ef12dc4db88cf773713feea", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,7 +21,7 @@ impl Diagnostic for NoSuchField {\n     }\n \n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field.into() }\n+        InFile { file_id: self.file, value: self.field.clone().into() }\n     }\n \n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -45,7 +45,7 @@ impl Diagnostic for MissingFields {\n         buf\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field_list.into() }\n+        InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -62,6 +62,29 @@ impl AstDiagnostic for MissingFields {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct MissingPatFields {\n+    pub file: HirFileId,\n+    pub field_list: AstPtr<ast::RecordFieldPatList>,\n+    pub missed_fields: Vec<Name>,\n+}\n+\n+impl Diagnostic for MissingPatFields {\n+    fn message(&self) -> String {\n+        let mut buf = String::from(\"Missing structure fields:\\n\");\n+        for field in &self.missed_fields {\n+            format_to!(buf, \"- {}\", field);\n+        }\n+        buf\n+    }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.field_list.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct MissingMatchArms {\n     pub file: HirFileId,\n@@ -74,7 +97,7 @@ impl Diagnostic for MissingMatchArms {\n         String::from(\"Missing match arm\")\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.match_expr.into() }\n+        InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -92,7 +115,7 @@ impl Diagnostic for MissingOkInTailExpr {\n         \"wrap return expression in Ok\".to_string()\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.into() }\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "d03bbd5a7b5c72e8277d8b946a9e5cc422c0ea9d", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -247,19 +247,21 @@ impl HirDisplay for ApplicationTy {\n                 }\n             }\n             TypeCtor::Closure { .. } => {\n-                let sig = self.parameters[0]\n-                    .callable_sig(f.db)\n-                    .expect(\"first closure parameter should contain signature\");\n-                if sig.params().is_empty() {\n-                    write!(f, \"||\")?;\n-                } else if f.omit_verbose_types() {\n-                    write!(f, \"|{}|\", TYPE_HINT_TRUNCATION)?;\n+                let sig = self.parameters[0].callable_sig(f.db);\n+                if let Some(sig) = sig {\n+                    if sig.params().is_empty() {\n+                        write!(f, \"||\")?;\n+                    } else if f.omit_verbose_types() {\n+                        write!(f, \"|{}|\", TYPE_HINT_TRUNCATION)?;\n+                    } else {\n+                        write!(f, \"|\")?;\n+                        f.write_joined(sig.params(), \", \")?;\n+                        write!(f, \"|\")?;\n+                    };\n+                    write!(f, \" -> {}\", sig.ret().display(f.db))?;\n                 } else {\n-                    write!(f, \"|\")?;\n-                    f.write_joined(sig.params(), \", \")?;\n-                    write!(f, \"|\")?;\n-                };\n-                write!(f, \" -> {}\", sig.ret().display(f.db))?;\n+                    write!(f, \"{{closure}}\")?;\n+                }\n             }\n         }\n         Ok(())"}, {"sha": "69b527f74498267c6e924fd32281fa9303ba5119", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 95, "deletions": 42, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -9,7 +9,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n-    diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr},\n+    diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields},\n     utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n     _match::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n@@ -49,39 +49,95 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             if let Some((variant_def, missed_fields, true)) =\n                 record_literal_missing_fields(db, &self.infer, id, expr)\n             {\n-                // XXX: only look at source_map if we do have missing fields\n-                let (_, source_map) = db.body_with_source_map(self.func.into());\n-\n-                if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-                    if let Some(expr) = source_ptr.value.left() {\n-                        let root = source_ptr.file_syntax(db.upcast());\n-                        if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n-                            if let Some(field_list) = record_lit.record_field_list() {\n-                                let variant_data = variant_data(db.upcast(), variant_def);\n-                                let missed_fields = missed_fields\n-                                    .into_iter()\n-                                    .map(|idx| variant_data.fields()[idx].name.clone())\n-                                    .collect();\n-                                self.sink.push(MissingFields {\n-                                    file: source_ptr.file_id,\n-                                    field_list: AstPtr::new(&field_list),\n-                                    missed_fields,\n-                                })\n-                            }\n-                        }\n-                    }\n-                }\n+                self.create_record_literal_missing_fields_diagnostic(\n+                    id,\n+                    db,\n+                    variant_def,\n+                    missed_fields,\n+                );\n             }\n             if let Expr::Match { expr, arms } = expr {\n                 self.validate_match(id, *expr, arms, db, self.infer.clone());\n             }\n         }\n+        for (id, pat) in body.pats.iter() {\n+            if let Some((variant_def, missed_fields, true)) =\n+                record_pattern_missing_fields(db, &self.infer, id, pat)\n+            {\n+                self.create_record_pattern_missing_fields_diagnostic(\n+                    id,\n+                    db,\n+                    variant_def,\n+                    missed_fields,\n+                );\n+            }\n+        }\n         let body_expr = &body[body.body_expr];\n         if let Expr::Block { tail: Some(t), .. } = body_expr {\n             self.validate_results_in_tail_expr(body.body_expr, *t, db);\n         }\n     }\n \n+    fn create_record_literal_missing_fields_diagnostic(\n+        &mut self,\n+        id: ExprId,\n+        db: &dyn HirDatabase,\n+        variant_def: VariantId,\n+        missed_fields: Vec<LocalStructFieldId>,\n+    ) {\n+        // XXX: only look at source_map if we do have missing fields\n+        let (_, source_map) = db.body_with_source_map(self.func.into());\n+\n+        if let Ok(source_ptr) = source_map.expr_syntax(id) {\n+            let root = source_ptr.file_syntax(db.upcast());\n+            if let ast::Expr::RecordLit(record_lit) = &source_ptr.value.to_node(&root) {\n+                if let Some(field_list) = record_lit.record_field_list() {\n+                    let variant_data = variant_data(db.upcast(), variant_def);\n+                    let missed_fields = missed_fields\n+                        .into_iter()\n+                        .map(|idx| variant_data.fields()[idx].name.clone())\n+                        .collect();\n+                    self.sink.push(MissingFields {\n+                        file: source_ptr.file_id,\n+                        field_list: AstPtr::new(&field_list),\n+                        missed_fields,\n+                    })\n+                }\n+            }\n+        }\n+    }\n+\n+    fn create_record_pattern_missing_fields_diagnostic(\n+        &mut self,\n+        id: PatId,\n+        db: &dyn HirDatabase,\n+        variant_def: VariantId,\n+        missed_fields: Vec<LocalStructFieldId>,\n+    ) {\n+        // XXX: only look at source_map if we do have missing fields\n+        let (_, source_map) = db.body_with_source_map(self.func.into());\n+\n+        if let Ok(source_ptr) = source_map.pat_syntax(id) {\n+            if let Some(expr) = source_ptr.value.as_ref().left() {\n+                let root = source_ptr.file_syntax(db.upcast());\n+                if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n+                    if let Some(field_list) = record_pat.record_field_pat_list() {\n+                        let variant_data = variant_data(db.upcast(), variant_def);\n+                        let missed_fields = missed_fields\n+                            .into_iter()\n+                            .map(|idx| variant_data.fields()[idx].name.clone())\n+                            .collect();\n+                        self.sink.push(MissingPatFields {\n+                            file: source_ptr.file_id,\n+                            field_list: AstPtr::new(&field_list),\n+                            missed_fields,\n+                        })\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn validate_match(\n         &mut self,\n         id: ExprId,\n@@ -147,18 +203,16 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.value.left() {\n-                let root = source_ptr.file_syntax(db.upcast());\n-                if let ast::Expr::MatchExpr(match_expr) = expr.to_node(&root) {\n-                    if let (Some(match_expr), Some(arms)) =\n-                        (match_expr.expr(), match_expr.match_arm_list())\n-                    {\n-                        self.sink.push(MissingMatchArms {\n-                            file: source_ptr.file_id,\n-                            match_expr: AstPtr::new(&match_expr),\n-                            arms: AstPtr::new(&arms),\n-                        })\n-                    }\n+            let root = source_ptr.file_syntax(db.upcast());\n+            if let ast::Expr::MatchExpr(match_expr) = &source_ptr.value.to_node(&root) {\n+                if let (Some(match_expr), Some(arms)) =\n+                    (match_expr.expr(), match_expr.match_arm_list())\n+                {\n+                    self.sink.push(MissingMatchArms {\n+                        file: source_ptr.file_id,\n+                        match_expr: AstPtr::new(&match_expr),\n+                        arms: AstPtr::new(&arms),\n+                    })\n                 }\n             }\n         }\n@@ -189,9 +243,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-                if let Some(expr) = source_ptr.value.left() {\n-                    self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n-                }\n+                self.sink\n+                    .push(MissingOkInTailExpr { file: source_ptr.file_id, expr: source_ptr.value });\n             }\n         }\n     }\n@@ -232,9 +285,9 @@ pub fn record_pattern_missing_fields(\n     infer: &InferenceResult,\n     id: PatId,\n     pat: &Pat,\n-) -> Option<(VariantId, Vec<LocalStructFieldId>)> {\n-    let fields = match pat {\n-        Pat::Record { path: _, args } => args,\n+) -> Option<(VariantId, Vec<LocalStructFieldId>, /*exhaustive*/ bool)> {\n+    let (fields, exhaustive) = match pat {\n+        Pat::Record { path: _, args, ellipsis } => (args, !ellipsis),\n         _ => return None,\n     };\n \n@@ -254,5 +307,5 @@ pub fn record_pattern_missing_fields(\n     if missed_fields.is_empty() {\n         return None;\n     }\n-    Some((variant_def, missed_fields))\n+    Some((variant_def, missed_fields, exhaustive))\n }"}, {"sha": "078476f76a9cc5c5ec52d206ebc81567b17d5ded", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -158,7 +158,7 @@ impl<'a> InferenceContext<'a> {\n             Pat::TupleStruct { path: p, args: subpats } => {\n                 self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm, pat)\n             }\n-            Pat::Record { path: p, args: fields } => {\n+            Pat::Record { path: p, args: fields, ellipsis: _ } => {\n                 self.infer_record_pat(p.as_ref(), fields, expected, default_bm, pat)\n             }\n             Pat::Path(path) => {"}, {"sha": "657284fd018ae3da455f24dbe946b8ad55a7e964", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,7 +34,7 @@ impl TyFingerprint {\n     /// Creates a TyFingerprint for looking up an impl. Only certain types can\n     /// have impls: if we have some `struct S`, we can have an `impl S`, but not\n     /// `impl &S`. Hence, this will return `None` for reference types and such.\n-    fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n+    pub(crate) fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n         match ty {\n             Ty::Apply(a_ty) => Some(TyFingerprint::Apply(a_ty.ctor)),\n             _ => None,\n@@ -45,7 +45,7 @@ impl TyFingerprint {\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateImplDefs {\n     impls: FxHashMap<TyFingerprint, Vec<ImplId>>,\n-    impls_by_trait: FxHashMap<TraitId, Vec<ImplId>>,\n+    impls_by_trait: FxHashMap<TraitId, FxHashMap<Option<TyFingerprint>, Vec<ImplId>>>,\n }\n \n impl CrateImplDefs {\n@@ -59,7 +59,14 @@ impl CrateImplDefs {\n             for impl_id in module_data.scope.impls() {\n                 match db.impl_trait(impl_id) {\n                     Some(tr) => {\n-                        res.impls_by_trait.entry(tr.value.trait_).or_default().push(impl_id);\n+                        let self_ty = db.impl_self_ty(impl_id);\n+                        let self_ty_fp = TyFingerprint::for_impl(&self_ty.value);\n+                        res.impls_by_trait\n+                            .entry(tr.value.trait_)\n+                            .or_default()\n+                            .entry(self_ty_fp)\n+                            .or_default()\n+                            .push(impl_id);\n                     }\n                     None => {\n                         let self_ty = db.impl_self_ty(impl_id);\n@@ -79,11 +86,39 @@ impl CrateImplDefs {\n     }\n \n     pub fn lookup_impl_defs_for_trait(&self, tr: TraitId) -> impl Iterator<Item = ImplId> + '_ {\n-        self.impls_by_trait.get(&tr).into_iter().flatten().copied()\n+        self.impls_by_trait\n+            .get(&tr)\n+            .into_iter()\n+            .flat_map(|m| m.values().flat_map(|v| v.iter().copied()))\n+    }\n+\n+    pub fn lookup_impl_defs_for_trait_and_ty(\n+        &self,\n+        tr: TraitId,\n+        fp: TyFingerprint,\n+    ) -> impl Iterator<Item = ImplId> + '_ {\n+        self.impls_by_trait\n+            .get(&tr)\n+            .and_then(|m| m.get(&Some(fp)))\n+            .into_iter()\n+            .flatten()\n+            .copied()\n+            .chain(\n+                self.impls_by_trait\n+                    .get(&tr)\n+                    .and_then(|m| m.get(&None))\n+                    .into_iter()\n+                    .flatten()\n+                    .copied(),\n+            )\n     }\n \n     pub fn all_impls<'a>(&'a self) -> impl Iterator<Item = ImplId> + 'a {\n-        self.impls.values().chain(self.impls_by_trait.values()).flatten().copied()\n+        self.impls\n+            .values()\n+            .chain(self.impls_by_trait.values().flat_map(|m| m.values()))\n+            .flatten()\n+            .copied()\n     }\n }\n "}, {"sha": "81fc0f63a850717f8dfba207e6e267386b91e28c", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -23,7 +23,7 @@ use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, salsa::Database, FilePosition, SourceDatabase};\n use ra_syntax::{\n     algo,\n-    ast::{self, AstNode, AstToken},\n+    ast::{self, AstNode},\n };\n use stdx::format_to;\n \n@@ -82,12 +82,10 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n-                Ok(sp) => {\n-                    sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n-                }\n+                Ok(sp) => sp.map(|ast| ast.syntax_node_ptr()),\n                 Err(SyntheticSyntax) => continue,\n             };\n-            types.push((syntax_ptr, ty));\n+            types.push((syntax_ptr.clone(), ty));\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr) {\n                 mismatches.push((syntax_ptr, mismatch));\n             }\n@@ -101,7 +99,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             let node = src_ptr.value.to_node(&src_ptr.file_syntax(&db));\n \n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.clone()) {\n-                (self_param.self_kw().unwrap().syntax().text_range(), \"self\".to_string())\n+                (self_param.self_token().unwrap().text_range(), \"self\".to_string())\n             } else {\n                 (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };\n@@ -409,3 +407,43 @@ fn no_such_field_with_feature_flag_diagnostics_on_struct_fields() {\n \n     assert_snapshot!(diagnostics, @r###\"\"###);\n }\n+\n+#[test]\n+fn missing_record_pat_field_diagnostic() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+        //- /lib.rs\n+        struct S { foo: i32, bar: () }\n+        fn baz(s: S) {\n+            let S { foo: _ } = s;\n+        }\n+        \",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r###\"\n+    \"{ foo: _ }\": Missing structure fields:\n+    - bar\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn missing_record_pat_field_no_diagnostic_if_not_exhaustive() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+        //- /lib.rs\n+        struct S { foo: i32, bar: () }\n+        fn baz(s: S) -> i32 {\n+            match s {\n+                S { foo, .. } => foo,\n+            }\n+        }\n+        \",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}"}, {"sha": "f2a9b1c4087b12c60802e60f49c40f4fc430d7a9", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,10 +1,13 @@\n+use std::fs;\n+\n use insta::assert_snapshot;\n use ra_db::fixture::WithFixture;\n-\n-use super::{infer, type_at, type_at_pos};\n+use test_utils::project_dir;\n \n use crate::test_db::TestDB;\n \n+use super::{infer, type_at, type_at_pos};\n+\n #[test]\n fn cfg_impl_def() {\n     let (db, pos) = TestDB::with_position(\n@@ -481,6 +484,30 @@ fn bar() -> u32 {0}\n     assert_eq!(\"u32\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+#[ignore]\n+fn include_accidentally_quadratic() {\n+    let file = project_dir().join(\"crates/ra_syntax/test_data/accidentally_quadratic\");\n+    let big_file = fs::read_to_string(file).unwrap();\n+    let big_file = vec![big_file; 10].join(\"\\n\");\n+\n+    let fixture = r#\"\n+//- /main.rs\n+#[rustc_builtin_macro]\n+macro_rules! include {() => {}}\n+\n+include!(\"foo.rs\");\n+\n+fn main() {\n+    RegisterBlock { }<|>;\n+}\n+    \"#;\n+    let fixture = format!(\"{}\\n//- /foo.rs\\n{}\", fixture, big_file);\n+\n+    let (db, pos) = TestDB::with_position(&fixture);\n+    assert_eq!(\"RegisterBlock\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_builtin_macros_include_concat() {\n     let (db, pos) = TestDB::with_position("}, {"sha": "43d8d1e802e1fdf7b7c2cba0a3153fefc83cdf6e", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,7 +7,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, DebruijnIndex};\n+use crate::{db::HirDatabase, method_resolution::TyFingerprint, DebruijnIndex};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -40,18 +40,26 @@ pub(crate) fn impls_for_trait_query(\n     db: &dyn HirDatabase,\n     krate: CrateId,\n     trait_: TraitId,\n+    self_ty_fp: Option<TyFingerprint>,\n ) -> Arc<[ImplId]> {\n+    // FIXME: We could be a lot smarter here - because of the orphan rules and\n+    // the fact that the trait and the self type need to be in the dependency\n+    // tree of a crate somewhere for an impl to exist, we could skip looking in\n+    // a lot of crates completely\n     let mut impls = FxHashSet::default();\n     // We call the query recursively here. On the one hand, this means we can\n     // reuse results from queries for different crates; on the other hand, this\n     // will only ever get called for a few crates near the root of the tree (the\n     // ones the user is editing), so this may actually be a waste of memory. I'm\n     // doing it like this mainly for simplicity for now.\n     for dep in &db.crate_graph()[krate].dependencies {\n-        impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n+        impls.extend(db.impls_for_trait(dep.crate_id, trait_, self_ty_fp).iter());\n     }\n     let crate_impl_defs = db.impls_in_crate(krate);\n-    impls.extend(crate_impl_defs.lookup_impl_defs_for_trait(trait_));\n+    match self_ty_fp {\n+        Some(fp) => impls.extend(crate_impl_defs.lookup_impl_defs_for_trait_and_ty(trait_, fp)),\n+        None => impls.extend(crate_impl_defs.lookup_impl_defs_for_trait(trait_)),\n+    }\n     impls.into_iter().collect()\n }\n \n@@ -177,20 +185,29 @@ fn solve(\n \n     let fuel = std::cell::Cell::new(CHALK_SOLVER_FUEL);\n \n-    let solution = solver.solve_limited(&context, goal, || {\n+    let should_continue = || {\n         context.db.check_canceled();\n         let remaining = fuel.get();\n         fuel.set(remaining - 1);\n         if remaining == 0 {\n             log::debug!(\"fuel exhausted\");\n         }\n         remaining > 0\n-    });\n+    };\n+    let mut solve = || solver.solve_limited(&context, goal, should_continue);\n+    // don't set the TLS for Chalk unless Chalk debugging is active, to make\n+    // extra sure we only use it for debugging\n+    let solution =\n+        if is_chalk_debug() { chalk::tls::set_current_program(db, solve) } else { solve() };\n \n     log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n     solution\n }\n \n+fn is_chalk_debug() -> bool {\n+    std::env::var(\"CHALK_DEBUG\").is_ok()\n+}\n+\n fn solution_from_chalk(\n     db: &dyn HirDatabase,\n     solution: chalk_solve::Solution<Interner>,"}, {"sha": "e05fea8430f352ca19c21d1301b89896072b2573", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,10 +16,12 @@ use ra_db::{\n \n use super::{builtin, AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n-    db::HirDatabase, display::HirDisplay, utils::generics, ApplicationTy, GenericPredicate,\n-    ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n+    db::HirDatabase, display::HirDisplay, method_resolution::TyFingerprint, utils::generics,\n+    ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n \n+pub(super) mod tls;\n+\n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Interner;\n \n@@ -33,90 +35,85 @@ impl chalk_ir::interner::Interner for Interner {\n     type Identifier = TypeAliasId;\n     type DefId = InternId;\n \n-    // FIXME: implement these\n     fn debug_struct_id(\n-        _type_kind_id: chalk_ir::StructId<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        type_kind_id: StructId,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_trait_id(\n-        _type_kind_id: chalk_ir::TraitId<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n-    ) -> Option<fmt::Result> {\n-        None\n+    fn debug_trait_id(type_kind_id: TraitId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_trait_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_assoc_type_id(\n-        _id: chalk_ir::AssocTypeId<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n-    ) -> Option<fmt::Result> {\n-        None\n+    fn debug_assoc_type_id(id: AssocTypeId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_assoc_type_id(id, fmt)))\n     }\n \n     fn debug_alias(\n-        _projection: &chalk_ir::AliasTy<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        alias: &chalk_ir::AliasTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_alias(alias, fmt)))\n     }\n \n-    fn debug_ty(_ty: &chalk_ir::Ty<Self>, _fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n-        None\n+    fn debug_ty(ty: &chalk_ir::Ty<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_ty(ty, fmt)))\n     }\n \n     fn debug_lifetime(\n-        _lifetime: &chalk_ir::Lifetime<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        lifetime: &chalk_ir::Lifetime<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_lifetime(lifetime, fmt)))\n     }\n \n     fn debug_parameter(\n-        _parameter: &Parameter<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        parameter: &Parameter<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_parameter(parameter, fmt)))\n     }\n \n-    fn debug_goal(_goal: &Goal<Self>, _fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n-        None\n+    fn debug_goal(goal: &Goal<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_goal(goal, fmt)))\n     }\n \n     fn debug_goals(\n-        _goals: &chalk_ir::Goals<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        goals: &chalk_ir::Goals<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_goals(goals, fmt)))\n     }\n \n     fn debug_program_clause_implication(\n-        _pci: &chalk_ir::ProgramClauseImplication<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        pci: &chalk_ir::ProgramClauseImplication<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_program_clause_implication(pci, fmt)))\n     }\n \n     fn debug_application_ty(\n-        _application_ty: &chalk_ir::ApplicationTy<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        application_ty: &chalk_ir::ApplicationTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_application_ty(application_ty, fmt)))\n     }\n \n     fn debug_substitution(\n-        _substitution: &chalk_ir::Substitution<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        substitution: &chalk_ir::Substitution<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| Some(prog?.debug_substitution(substitution, fmt)))\n     }\n \n     fn debug_separator_trait_ref(\n-        _separator_trait_ref: &chalk_ir::SeparatorTraitRef<Self>,\n-        _fmt: &mut fmt::Formatter<'_>,\n+        separator_trait_ref: &chalk_ir::SeparatorTraitRef<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        None\n+        tls::with_current_program(|prog| {\n+            Some(prog?.debug_separator_trait_ref(separator_trait_ref, fmt))\n+        })\n     }\n \n     fn intern_ty(&self, ty: chalk_ir::TyData<Self>) -> Box<chalk_ir::TyData<Self>> {\n@@ -650,19 +647,22 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n \n+        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n+\n+        let self_ty_fp = TyFingerprint::for_impl(&ty);\n+\n         // Note: Since we're using impls_for_trait, only impls where the trait\n         // can be resolved should ever reach Chalk. `impl_datum` relies on that\n         // and will panic if the trait can't be resolved.\n         let mut result: Vec<_> = self\n             .db\n-            .impls_for_trait(self.krate, trait_)\n+            .impls_for_trait(self.krate, trait_, self_ty_fp)\n             .iter()\n             .copied()\n             .map(Impl::ImplDef)\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n-        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n         let arg: Option<Ty> =\n             parameters.get(1).map(|p| from_chalk(self.db, p.assert_ty_ref(&Interner).clone()));\n "}, {"sha": "d9bbb54a5bc5b1c8573968378a316ade61029d1b", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,231 @@\n+//! Implementation of Chalk debug helper functions using TLS.\n+use std::fmt;\n+\n+use chalk_ir::{AliasTy, Goal, Goals, Lifetime, Parameter, ProgramClauseImplication, TypeName};\n+\n+use super::{from_chalk, Interner};\n+use crate::{db::HirDatabase, CallableDef, TypeCtor};\n+use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n+\n+pub use unsafe_tls::{set_current_program, with_current_program};\n+\n+pub struct DebugContext<'a>(&'a (dyn HirDatabase + 'a));\n+\n+impl DebugContext<'_> {\n+    pub fn debug_struct_id(\n+        &self,\n+        id: super::StructId,\n+        f: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        let type_ctor: TypeCtor = from_chalk(self.0, TypeName::Struct(id));\n+        match type_ctor {\n+            TypeCtor::Bool => write!(f, \"bool\")?,\n+            TypeCtor::Char => write!(f, \"char\")?,\n+            TypeCtor::Int(t) => write!(f, \"{}\", t)?,\n+            TypeCtor::Float(t) => write!(f, \"{}\", t)?,\n+            TypeCtor::Str => write!(f, \"str\")?,\n+            TypeCtor::Slice => write!(f, \"slice\")?,\n+            TypeCtor::Array => write!(f, \"array\")?,\n+            TypeCtor::RawPtr(m) => write!(f, \"*{}\", m.as_keyword_for_ptr())?,\n+            TypeCtor::Ref(m) => write!(f, \"&{}\", m.as_keyword_for_ref())?,\n+            TypeCtor::Never => write!(f, \"!\")?,\n+            TypeCtor::Tuple { .. } => {\n+                write!(f, \"()\")?;\n+            }\n+            TypeCtor::FnPtr { .. } => {\n+                write!(f, \"fn\")?;\n+            }\n+            TypeCtor::FnDef(def) => {\n+                let name = match def {\n+                    CallableDef::FunctionId(ff) => self.0.function_data(ff).name.clone(),\n+                    CallableDef::StructId(s) => self.0.struct_data(s).name.clone(),\n+                    CallableDef::EnumVariantId(e) => {\n+                        let enum_data = self.0.enum_data(e.parent);\n+                        enum_data.variants[e.local_id].name.clone()\n+                    }\n+                };\n+                match def {\n+                    CallableDef::FunctionId(_) => write!(f, \"{{fn {}}}\", name)?,\n+                    CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {\n+                        write!(f, \"{{ctor {}}}\", name)?\n+                    }\n+                }\n+            }\n+            TypeCtor::Adt(def_id) => {\n+                let name = match def_id {\n+                    AdtId::StructId(it) => self.0.struct_data(it).name.clone(),\n+                    AdtId::UnionId(it) => self.0.union_data(it).name.clone(),\n+                    AdtId::EnumId(it) => self.0.enum_data(it).name.clone(),\n+                };\n+                write!(f, \"{}\", name)?;\n+            }\n+            TypeCtor::AssociatedType(type_alias) => {\n+                let trait_ = match type_alias.lookup(self.0.upcast()).container {\n+                    AssocContainerId::TraitId(it) => it,\n+                    _ => panic!(\"not an associated type\"),\n+                };\n+                let trait_name = self.0.trait_data(trait_).name.clone();\n+                let name = self.0.type_alias_data(type_alias).name.clone();\n+                write!(f, \"{}::{}\", trait_name, name)?;\n+            }\n+            TypeCtor::Closure { def, expr } => {\n+                write!(f, \"{{closure {:?} in {:?}}}\", expr.into_raw(), def)?;\n+            }\n+        }\n+        Ok(())\n+    }\n+\n+    pub fn debug_trait_id(\n+        &self,\n+        id: super::TraitId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        let trait_: hir_def::TraitId = from_chalk(self.0, id);\n+        let trait_data = self.0.trait_data(trait_);\n+        write!(fmt, \"{}\", trait_data.name)\n+    }\n+\n+    pub fn debug_assoc_type_id(\n+        &self,\n+        id: super::AssocTypeId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        let type_alias: TypeAliasId = from_chalk(self.0, id);\n+        let type_alias_data = self.0.type_alias_data(type_alias);\n+        let trait_ = match type_alias.lookup(self.0.upcast()).container {\n+            AssocContainerId::TraitId(t) => t,\n+            _ => panic!(\"associated type not in trait\"),\n+        };\n+        let trait_data = self.0.trait_data(trait_);\n+        write!(fmt, \"{}::{}\", trait_data.name, type_alias_data.name)\n+    }\n+\n+    pub fn debug_alias(\n+        &self,\n+        alias: &AliasTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        let type_alias: TypeAliasId = from_chalk(self.0, alias.associated_ty_id);\n+        let type_alias_data = self.0.type_alias_data(type_alias);\n+        let trait_ = match type_alias.lookup(self.0.upcast()).container {\n+            AssocContainerId::TraitId(t) => t,\n+            _ => panic!(\"associated type not in trait\"),\n+        };\n+        let trait_data = self.0.trait_data(trait_);\n+        let params = alias.substitution.parameters(&Interner);\n+        write!(\n+            fmt,\n+            \"<{:?} as {}<{:?}>>::{}\",\n+            &params[0],\n+            trait_data.name,\n+            &params[1..],\n+            type_alias_data.name\n+        )\n+    }\n+\n+    pub fn debug_ty(\n+        &self,\n+        ty: &chalk_ir::Ty<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", ty.data(&Interner))\n+    }\n+\n+    pub fn debug_lifetime(\n+        &self,\n+        lifetime: &Lifetime<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", lifetime.data(&Interner))\n+    }\n+\n+    pub fn debug_parameter(\n+        &self,\n+        parameter: &Parameter<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", parameter.data(&Interner).inner_debug())\n+    }\n+\n+    pub fn debug_goal(\n+        &self,\n+        goal: &Goal<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        let goal_data = goal.data(&Interner);\n+        write!(fmt, \"{:?}\", goal_data)\n+    }\n+\n+    pub fn debug_goals(\n+        &self,\n+        goals: &Goals<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", goals.debug(&Interner))\n+    }\n+\n+    pub fn debug_program_clause_implication(\n+        &self,\n+        pci: &ProgramClauseImplication<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", pci.debug(&Interner))\n+    }\n+\n+    pub fn debug_application_ty(\n+        &self,\n+        application_ty: &chalk_ir::ApplicationTy<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", application_ty.debug(&Interner))\n+    }\n+\n+    pub fn debug_substitution(\n+        &self,\n+        substitution: &chalk_ir::Substitution<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", substitution.debug(&Interner))\n+    }\n+\n+    pub fn debug_separator_trait_ref(\n+        &self,\n+        separator_trait_ref: &chalk_ir::SeparatorTraitRef<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"{:?}\", separator_trait_ref.debug(&Interner))\n+    }\n+}\n+\n+mod unsafe_tls {\n+    use super::DebugContext;\n+    use crate::db::HirDatabase;\n+    use scoped_tls::scoped_thread_local;\n+\n+    scoped_thread_local!(static PROGRAM: DebugContext);\n+\n+    pub fn with_current_program<R>(\n+        op: impl for<'a> FnOnce(Option<&'a DebugContext<'a>>) -> R,\n+    ) -> R {\n+        if PROGRAM.is_set() {\n+            PROGRAM.with(|prog| op(Some(prog)))\n+        } else {\n+            op(None)\n+        }\n+    }\n+\n+    pub fn set_current_program<OP, R>(p: &dyn HirDatabase, op: OP) -> R\n+    where\n+        OP: FnOnce() -> R,\n+    {\n+        let ctx = DebugContext(p);\n+        // we're transmuting the lifetime in the DebugContext to static. This is\n+        // fine because we only keep the reference for the lifetime of this\n+        // function, *and* the only way to access the context is through\n+        // `with_current_program`, which hides the lifetime through the `for`\n+        // type.\n+        let static_p: &DebugContext<'static> =\n+            unsafe { std::mem::transmute::<&DebugContext, &DebugContext<'static>>(&ctx) };\n+        PROGRAM.set(static_p, || op())\n+    }\n+}"}, {"sha": "b5448af5cdef95490bfcac1f7036aa26d36a7689", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -72,7 +72,6 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Ty\n         }\n         for (i, ty) in receiver.tuple_fields(ctx.db).into_iter().enumerate() {\n             // FIXME: Handle visibility\n-            // TODO: add the same behavior with type ?\n             acc.add_tuple_field(ctx, i, &ty);\n         }\n     }"}, {"sha": "f84b559fc126fef1b36e5ae4d7836110359a2182", "filename": "crates/ra_ide/src/completion/complete_fn_param.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,6 +1,9 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::{ast, match_ast, AstNode};\n+use ra_syntax::{\n+    ast::{self, ModuleItemOwner},\n+    match_ast, AstNode,\n+};\n use rustc_hash::FxHashMap;\n \n use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n@@ -16,11 +19,19 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n     let mut params = FxHashMap::default();\n     for node in ctx.token.parent().ancestors() {\n-        match_ast! {\n+        let items = match_ast! {\n             match node {\n-                ast::SourceFile(it) => process(it, &mut params),\n-                ast::ItemList(it) => process(it, &mut params),\n-                _ => (),\n+                ast::SourceFile(it) => it.items(),\n+                ast::ItemList(it) => it.items(),\n+                _ => continue,\n+            }\n+        };\n+        for item in items {\n+            if let ast::ModuleItem::FnDef(func) = item {\n+                func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n+                    let text = param.syntax().text().to_string();\n+                    params.entry(text).or_insert((0, param)).0 += 1;\n+                })\n             }\n         }\n     }\n@@ -39,15 +50,6 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n                 .lookup_by(lookup)\n                 .add_to(acc)\n         });\n-\n-    fn process<N: ast::FnDefOwner>(node: N, params: &mut FxHashMap<String, (u32, ast::Param)>) {\n-        node.functions().filter_map(|it| it.param_list()).flat_map(|it| it.params()).for_each(\n-            |param| {\n-                let text = param.syntax().text().to_string();\n-                params.entry(text).or_insert((0, param)).0 += 1;\n-            },\n-        )\n-    }\n }\n \n #[cfg(test)]"}, {"sha": "fab02945c5ba8ee171bf9d964d916622ac2ece98", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -35,7 +35,7 @@ use hir::{self, Docs, HasSource};\n use ra_assists::utils::get_missing_impl_items;\n use ra_syntax::{\n     ast::{self, edit, ImplDef},\n-    AstNode, SyntaxKind, SyntaxNode, TextRange,\n+    AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n };\n use ra_text_edit::TextEdit;\n \n@@ -204,7 +204,7 @@ fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n     let end = const_\n         .syntax()\n         .children_with_tokens()\n-        .find(|s| s.kind() == SyntaxKind::SEMI || s.kind() == SyntaxKind::EQ)\n+        .find(|s| s.kind() == T![;] || s.kind() == T![=])\n         .map_or(const_end, |f| f.text_range().start());\n \n     let len = end - start;"}, {"sha": "0b0da6ee495b40bb5bf9b14fb6a8bbed10da45b2", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -3,7 +3,7 @@\n use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_trivial_path && !ctx.is_pat_binding_or_const) {\n+    if !(ctx.is_trivial_path && !ctx.is_pat_binding_or_const && !ctx.record_lit_syntax.is_some()) {\n         return;\n     }\n "}, {"sha": "eb8016dd17d01a32d4cdd216d578fd9d524f5267", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,13 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::{db::HirDatabase, Semantics, SemanticsScope};\n+use hir::{Semantics, SemanticsScope};\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n-    ast,\n-    ast::ArgListOwner,\n-    AstNode,\n+    ast, AstNode,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextUnit,\n };\n@@ -196,7 +194,10 @@ impl<'a> CompletionContext<'a> {\n         if let Some(name) = find_node_at_offset::<ast::Name>(&file_with_fake_ident, offset) {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n                 self.is_pat_binding_or_const = true;\n-                if bind_pat.has_at() || bind_pat.is_ref() || bind_pat.is_mutable() {\n+                if bind_pat.at_token().is_some()\n+                    || bind_pat.ref_token().is_some()\n+                    || bind_pat.mut_token().is_some()\n+                {\n                     self.is_pat_binding_or_const = false;\n                 }\n                 if bind_pat.syntax().parent().and_then(ast::RecordFieldPatList::cast).is_some() {\n@@ -230,7 +231,7 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n-        if name_ref.syntax().parent().and_then(ast::RecordField::cast).is_some() {\n+        if ast::RecordField::for_field_name(&name_ref).is_some() {\n             self.record_lit_syntax =\n                 self.sema.find_node_at_offset_with_macros(&original_file, offset);\n         }"}, {"sha": "2d175882b0e0916792dd9542e98e6e6aa9485da1", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -69,7 +69,13 @@ impl FunctionSignature {\n         for field in st.fields(db).into_iter() {\n             let ty = field.signature_ty(db);\n             let raw_param = format!(\"{}\", ty.display(db));\n-            parameter_types.push(raw_param.split(':').nth(1).unwrap()[1..].to_string());\n+\n+            if let Some(param_type) = raw_param.split(':').nth(1) {\n+                parameter_types.push(param_type[1..].to_string());\n+            } else {\n+                // The unwrap_or_else is useful when you have tuple struct\n+                parameter_types.push(raw_param.clone());\n+            }\n             params.push(raw_param);\n         }\n \n@@ -107,8 +113,15 @@ impl FunctionSignature {\n         for field in variant.fields(db).into_iter() {\n             let ty = field.signature_ty(db);\n             let raw_param = format!(\"{}\", ty.display(db));\n-            parameter_types.push(raw_param.split(':').nth(1).unwrap()[1..].to_string());\n-            params.push(raw_param);\n+            if let Some(param_type) = raw_param.split(':').nth(1) {\n+                parameter_types.push(param_type[1..].to_string());\n+            } else {\n+                // The unwrap_or_else is useful when you have tuple\n+                parameter_types.push(raw_param);\n+            }\n+            let name = field.name(db);\n+\n+            params.push(format!(\"{}: {}\", name, ty.display(db)));\n         }\n \n         Some(\n@@ -164,7 +177,7 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                     has_self_param = true;\n                     let raw_param = self_param.syntax().text().to_string();\n \n-                    // TODO: better solution ?\n+                    // FIXME: better solution ?\n                     res_types.push(\n                         raw_param.split(':').nth(1).unwrap_or_else(|| \" Self\")[1..].to_string(),\n                     );"}, {"sha": "45b9f78023f2cc0b1a56471bb38bfba2e9cd6f18", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! This module defines multiple types of inlay hints and their visibility\n \n use hir::{Adt, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n@@ -235,8 +235,10 @@ fn should_show_param_hint(\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n-    let argument_string = argument.syntax().to_string();\n-    if param_name.is_empty() || argument_string.ends_with(param_name) {\n+    if param_name.is_empty()\n+        || is_argument_similar_to_param(argument, param_name)\n+        || Some(param_name) == fn_signature.name.as_ref().map(String::as_str)\n+    {\n         return false;\n     }\n \n@@ -245,12 +247,32 @@ fn should_show_param_hint(\n     } else {\n         fn_signature.parameters.len()\n     };\n+\n     // avoid displaying hints for common functions like map, filter, etc.\n-    if parameters_len == 1 && (param_name.len() == 1 || param_name == \"predicate\") {\n-        return false;\n+    // or other obvious words used in std\n+    parameters_len != 1 || !is_obvious_param(param_name)\n+}\n+\n+fn is_argument_similar_to_param(argument: &ast::Expr, param_name: &str) -> bool {\n+    let argument_string = remove_ref(argument.clone()).syntax().to_string();\n+    argument_string.starts_with(&param_name) || argument_string.ends_with(&param_name)\n+}\n+\n+fn remove_ref(expr: ast::Expr) -> ast::Expr {\n+    if let ast::Expr::RefExpr(ref_expr) = &expr {\n+        if let Some(inner) = ref_expr.expr() {\n+            return inner;\n+        }\n     }\n+    expr\n+}\n \n-    true\n+fn is_obvious_param(param_name: &str) -> bool {\n+    let is_obvious_param_name = match param_name {\n+        \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\" => true,\n+        _ => false,\n+    };\n+    param_name.len() == 1 || is_obvious_param_name\n }\n \n fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<FunctionSignature> {\n@@ -1059,21 +1081,46 @@ impl Test {\n         self\n     }\n \n+    fn field(self, value: i32) -> Self {\n+        self\n+    }\n+\n     fn no_hints_expected(&self, _: i32, test_var: i32) {}\n+\n+    fn frob(&self, frob: bool) {}\n }\n \n+struct Param {}\n+\n+fn different_order(param: &Param) {}\n+fn different_order_mut(param: &mut Param) {}\n+\n+fn twiddle(twiddle: bool) {}\n+\n fn main() {\n     let container: TestVarContainer = TestVarContainer { test_var: 42 };\n     let test: Test = Test {};\n \n     map(22);\n     filter(33);\n \n-    let test_processed: Test = test.map(1).filter(2);\n+    let test_processed: Test = test.map(1).filter(2).field(3);\n \n     let test_var: i32 = 55;\n     test_processed.no_hints_expected(22, test_var);\n     test_processed.no_hints_expected(33, container.test_var);\n+    test_processed.frob(false);\n+\n+    twiddle(true);\n+\n+    let param_begin: Param = Param {};\n+    different_order(&param_begin);\n+    different_order(&mut param_begin);\n+\n+    let a: f64 = 7.0;\n+    let b: f64 = 4.0;\n+    let _: f64 = a.div_euclid(b);\n+    let _: f64 = a.abs_sub(b);\n }\"#,\n         );\n "}, {"sha": "7d0544ff440c62a7e7a1e6ee7ee26e85ccec144d", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -152,7 +152,7 @@ fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Optio\n     if stmt.initializer().is_some() {\n         let pat = stmt.pat()?;\n         if let ast::Pat::BindPat(it) = pat {\n-            if it.is_mutable() {\n+            if it.mut_token().is_some() {\n                 return Some(ReferenceAccess::Write);\n             }\n         }"}, {"sha": "5842ae2e865925584960b5e84281d91a97d80733", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -165,15 +165,15 @@ SOURCE_FILE@[0; 60)\n               PATH_SEGMENT@[16; 22)\n                 NAME_REF@[16; 22)\n                   IDENT@[16; 22) \"assert\"\n-            EXCL@[22; 23) \"!\"\n+            BANG@[22; 23) \"!\"\n             TOKEN_TREE@[23; 57)\n               L_PAREN@[23; 24) \"(\"\n               STRING@[24; 52) \"\\\"\\n    fn foo() {\\n     ...\"\n               COMMA@[52; 53) \",\"\n               WHITESPACE@[53; 54) \" \"\n               STRING@[54; 56) \"\\\"\\\"\"\n               R_PAREN@[56; 57) \")\"\n-          SEMI@[57; 58) \";\"\n+          SEMICOLON@[57; 58) \";\"\n         WHITESPACE@[58; 59) \"\\n\"\n         R_CURLY@[59; 60) \"}\"\n \"#\n@@ -226,15 +226,15 @@ EXPR_STMT@[16; 58)\n       PATH_SEGMENT@[16; 22)\n         NAME_REF@[16; 22)\n           IDENT@[16; 22) \"assert\"\n-    EXCL@[22; 23) \"!\"\n+    BANG@[22; 23) \"!\"\n     TOKEN_TREE@[23; 57)\n       L_PAREN@[23; 24) \"(\"\n       STRING@[24; 52) \"\\\"\\n    fn foo() {\\n     ...\"\n       COMMA@[52; 53) \",\"\n       WHITESPACE@[53; 54) \" \"\n       STRING@[54; 56) \"\\\"\\\"\"\n       R_PAREN@[56; 57) \")\"\n-  SEMI@[57; 58) \";\"\n+  SEMICOLON@[57; 58) \";\"\n \"#\n             .trim()\n         );"}, {"sha": "f55cd3bf5345a54759e6e984f1cfb40ae7b31793", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -63,7 +63,7 @@ fn on_char_typed_inner(\n fn on_eq_typed(file: &SourceFile, offset: TextUnit) -> Option<SingleFileChange> {\n     assert_eq!(file.syntax().text().char_at(offset), Some('='));\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n-    if let_stmt.has_semi() {\n+    if let_stmt.semicolon_token().is_some() {\n         return None;\n     }\n     if let Some(expr) = let_stmt.initializer() {"}, {"sha": "49a8c74fba7b2c0b3438f9846232a69fbb39ced8", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -216,7 +216,7 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n+    if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n         tested_by!(goto_def_for_record_fields; force);\n         tested_by!(goto_def_for_field_init_shorthand; force);\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {"}, {"sha": "9fb5cb058370b09584f6fc6c3cd3e7c84ecd2b7c", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -137,21 +137,23 @@ impl TokenMap {\n         token_id: tt::TokenId,\n         open_relative_range: TextRange,\n         close_relative_range: TextRange,\n-    ) {\n+    ) -> usize {\n+        let res = self.entries.len();\n         self.entries\n             .push((token_id, TokenTextRange::Delimiter(open_relative_range, close_relative_range)));\n+        res\n     }\n \n-    fn update_close_delim(&mut self, token_id: tt::TokenId, close_relative_range: TextRange) {\n-        if let Some(entry) = self.entries.iter_mut().find(|(tid, _)| *tid == token_id) {\n-            if let TokenTextRange::Delimiter(dim, _) = entry.1 {\n-                entry.1 = TokenTextRange::Delimiter(dim, close_relative_range);\n-            }\n+    fn update_close_delim(&mut self, idx: usize, close_relative_range: TextRange) {\n+        let (_, token_text_range) = &mut self.entries[idx];\n+        if let TokenTextRange::Delimiter(dim, _) = token_text_range {\n+            *token_text_range = TokenTextRange::Delimiter(*dim, close_relative_range);\n         }\n     }\n \n-    fn remove_delim(&mut self, token_id: tt::TokenId) {\n-        self.entries.retain(|(tid, _)| *tid != token_id);\n+    fn remove_delim(&mut self, idx: usize) {\n+        // FIXME: This could be accidently quadratic\n+        self.entries.remove(idx);\n     }\n }\n \n@@ -238,24 +240,24 @@ impl TokenIdAlloc {\n         token_id\n     }\n \n-    fn open_delim(&mut self, open_abs_range: TextRange) -> tt::TokenId {\n+    fn open_delim(&mut self, open_abs_range: TextRange) -> (tt::TokenId, usize) {\n         let token_id = tt::TokenId(self.next_id);\n         self.next_id += 1;\n-        self.map.insert_delim(\n+        let idx = self.map.insert_delim(\n             token_id,\n             open_abs_range - self.global_offset,\n             open_abs_range - self.global_offset,\n         );\n-        token_id\n+        (token_id, idx)\n     }\n \n-    fn close_delim(&mut self, id: tt::TokenId, close_abs_range: Option<TextRange>) {\n+    fn close_delim(&mut self, idx: usize, close_abs_range: Option<TextRange>) {\n         match close_abs_range {\n             None => {\n-                self.map.remove_delim(id);\n+                self.map.remove_delim(idx);\n             }\n             Some(close) => {\n-                self.map.update_close_delim(id, close - self.global_offset);\n+                self.map.update_close_delim(idx, close - self.global_offset);\n             }\n         }\n     }\n@@ -322,7 +324,7 @@ trait TokenConvertor {\n \n             if let Some((kind, closed)) = delim {\n                 let mut subtree = tt::Subtree::default();\n-                let id = self.id_alloc().open_delim(range);\n+                let (id, idx) = self.id_alloc().open_delim(range);\n                 subtree.delimiter = Some(tt::Delimiter { kind, id });\n \n                 while self.peek().map(|it| it.kind() != closed).unwrap_or(false) {\n@@ -331,7 +333,7 @@ trait TokenConvertor {\n                 let last_range = match self.bump() {\n                     None => {\n                         // For error resilience, we insert an char punct for the opening delim here\n-                        self.id_alloc().close_delim(id, None);\n+                        self.id_alloc().close_delim(idx, None);\n                         let leaf: tt::Leaf = tt::Punct {\n                             id: self.id_alloc().alloc(range),\n                             char: token.to_char().unwrap(),\n@@ -344,7 +346,7 @@ trait TokenConvertor {\n                     }\n                     Some(it) => it.1,\n                 };\n-                self.id_alloc().close_delim(id, Some(last_range));\n+                self.id_alloc().close_delim(idx, Some(last_range));\n                 subtree.into()\n             } else {\n                 let spacing = match self.peek() {"}, {"sha": "5d1274d21faaa340a31d0a2cace94adf19539235", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 89, "deletions": 10, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -141,6 +141,79 @@ macro_rules! impl_froms {\n         );\n }\n \n+#[test]\n+fn test_convert_tt2() {\n+    parse_macro(\n+        r#\"\n+macro_rules! impl_froms {\n+    ($e:ident: $($v:ident),*) => {\n+        $(\n+            impl From<$v> for $e {\n+                fn from(it: $v) -> $e {\n+                    $e::$v(it)\n+                }\n+            }\n+        )*\n+    }\n+}\n+\"#,\n+    )\n+    .assert_expand(\n+        \"impl_froms!(TokenTree: Leaf, Subtree);\",\n+        r#\"\n+SUBTREE $\n+  IDENT   impl 20\n+  IDENT   From 21\n+  PUNCH   < [joint] 22\n+  IDENT   Leaf 53\n+  PUNCH   > [alone] 25\n+  IDENT   for 26\n+  IDENT   TokenTree 51\n+  SUBTREE {} 29\n+    IDENT   fn 30\n+    IDENT   from 31\n+    SUBTREE () 32\n+      IDENT   it 33\n+      PUNCH   : [alone] 34\n+      IDENT   Leaf 53\n+    PUNCH   - [joint] 37\n+    PUNCH   > [alone] 38\n+    IDENT   TokenTree 51\n+    SUBTREE {} 41\n+      IDENT   TokenTree 51\n+      PUNCH   : [joint] 44\n+      PUNCH   : [joint] 45\n+      IDENT   Leaf 53\n+      SUBTREE () 48\n+        IDENT   it 49\n+  IDENT   impl 20\n+  IDENT   From 21\n+  PUNCH   < [joint] 22\n+  IDENT   Subtree 55\n+  PUNCH   > [alone] 25\n+  IDENT   for 26\n+  IDENT   TokenTree 51\n+  SUBTREE {} 29\n+    IDENT   fn 30\n+    IDENT   from 31\n+    SUBTREE () 32\n+      IDENT   it 33\n+      PUNCH   : [alone] 34\n+      IDENT   Subtree 55\n+    PUNCH   - [joint] 37\n+    PUNCH   > [alone] 38\n+    IDENT   TokenTree 51\n+    SUBTREE {} 41\n+      IDENT   TokenTree 51\n+      PUNCH   : [joint] 44\n+      PUNCH   : [joint] 45\n+      IDENT   Subtree 55\n+      SUBTREE () 48\n+        IDENT   it 49\n+\"#,\n+    );\n+}\n+\n #[test]\n fn test_expr_order() {\n     let expanded = parse_macro(\n@@ -179,7 +252,7 @@ fn test_expr_order() {\n             STAR@[11; 12) \"*\"\n             LITERAL@[12; 13)\n               INT_NUMBER@[12; 13) \"2\"\n-          SEMI@[13; 14) \";\"\n+          SEMICOLON@[13; 14) \";\"\n         R_CURLY@[14; 15) \"}\"\"#,\n     );\n }\n@@ -532,7 +605,7 @@ fn test_tt_to_stmts() {\n     EQ@[4; 5) \"=\"\n     LITERAL@[5; 6)\n       INT_NUMBER@[5; 6) \"0\"\n-    SEMI@[6; 7) \";\"\n+    SEMICOLON@[6; 7) \";\"\n   EXPR_STMT@[7; 14)\n     BIN_EXPR@[7; 13)\n       PATH_EXPR@[7; 8)\n@@ -547,7 +620,7 @@ fn test_tt_to_stmts() {\n         PLUS@[11; 12) \"+\"\n         LITERAL@[12; 13)\n           INT_NUMBER@[12; 13) \"1\"\n-    SEMI@[13; 14) \";\"\n+    SEMICOLON@[13; 14) \";\"\n   EXPR_STMT@[14; 15)\n     PATH_EXPR@[14; 15)\n       PATH@[14; 15)\n@@ -880,7 +953,7 @@ fn test_tt_composite2() {\n       PATH_SEGMENT@[0; 3)\n         NAME_REF@[0; 3)\n           IDENT@[0; 3) \"abs\"\n-    EXCL@[3; 4) \"!\"\n+    BANG@[3; 4) \"!\"\n     TOKEN_TREE@[4; 10)\n       L_PAREN@[4; 5) \"(\"\n       EQ@[5; 6) \"=\"\n@@ -1000,14 +1073,14 @@ fn test_vec() {\n               PATH_SEGMENT@[9; 12)\n                 NAME_REF@[9; 12)\n                   IDENT@[9; 12) \"Vec\"\n-            COLONCOLON@[12; 14) \"::\"\n+            COLON2@[12; 14) \"::\"\n             PATH_SEGMENT@[14; 17)\n               NAME_REF@[14; 17)\n                 IDENT@[14; 17) \"new\"\n         ARG_LIST@[17; 19)\n           L_PAREN@[17; 18) \"(\"\n           R_PAREN@[18; 19) \")\"\n-      SEMI@[19; 20) \";\"\n+      SEMICOLON@[19; 20) \";\"\n     EXPR_STMT@[20; 33)\n       METHOD_CALL_EXPR@[20; 32)\n         PATH_EXPR@[20; 21)\n@@ -1023,7 +1096,7 @@ fn test_vec() {\n           LITERAL@[27; 31)\n             INT_NUMBER@[27; 31) \"1u32\"\n           R_PAREN@[31; 32) \")\"\n-      SEMI@[32; 33) \";\"\n+      SEMICOLON@[32; 33) \";\"\n     EXPR_STMT@[33; 43)\n       METHOD_CALL_EXPR@[33; 42)\n         PATH_EXPR@[33; 34)\n@@ -1039,7 +1112,7 @@ fn test_vec() {\n           LITERAL@[40; 41)\n             INT_NUMBER@[40; 41) \"2\"\n           R_PAREN@[41; 42) \")\"\n-      SEMI@[42; 43) \";\"\n+      SEMICOLON@[42; 43) \";\"\n     PATH_EXPR@[43; 44)\n       PATH@[43; 44)\n         PATH_SEGMENT@[43; 44)\n@@ -1479,6 +1552,12 @@ impl MacroFixture {\n         assert_eq!(expansion.to_string(), expected);\n     }\n \n+    fn assert_expand(&self, invocation: &str, expected: &str) {\n+        let expansion = self.expand_tt(invocation);\n+        let actual = format!(\"{:?}\", expansion);\n+        test_utils::assert_eq_text!(&actual.trim(), &expected.trim());\n+    }\n+\n     fn assert_expand_items(&self, invocation: &str, expected: &str) -> &MacroFixture {\n         self.assert_expansion(FragmentKind::Items, invocation, expected);\n         self\n@@ -1681,7 +1760,7 @@ fn test_no_space_after_semi_colon() {\n     MOD_KW@[21; 24) \"mod\"\n     NAME@[24; 25)\n       IDENT@[24; 25) \"m\"\n-    SEMI@[25; 26) \";\"\n+    SEMICOLON@[25; 26) \";\"\n   MODULE@[26; 52)\n     ATTR@[26; 47)\n       POUND@[26; 27) \"#\"\n@@ -1700,7 +1779,7 @@ fn test_no_space_after_semi_colon() {\n     MOD_KW@[47; 50) \"mod\"\n     NAME@[50; 51)\n       IDENT@[50; 51) \"f\"\n-    SEMI@[51; 52) \";\"\"###,\n+    SEMICOLON@[51; 52) \";\"\"###,\n     );\n }\n "}, {"sha": "cb30b25a890ea05b6db8b3743558c07a49370315", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -339,7 +339,8 @@ fn expr_bp(p: &mut Parser, mut r: Restrictions, bp: u8) -> (Option<CompletedMark\n     (Some(lhs), BlockLike::NotBlock)\n }\n \n-const LHS_FIRST: TokenSet = atom::ATOM_EXPR_FIRST.union(token_set![AMP, STAR, EXCL, DOT, MINUS]);\n+const LHS_FIRST: TokenSet =\n+    atom::ATOM_EXPR_FIRST.union(token_set![T![&], T![*], T![!], T![.], T![-]]);\n \n fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     let m;\n@@ -618,26 +619,39 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n     let m = p.start();\n     p.bump(T!['{']);\n     while !p.at(EOF) && !p.at(T!['}']) {\n+        let m = p.start();\n+        // test record_literal_field_with_attr\n+        // fn main() {\n+        //     S { #[cfg(test)] field: 1 }\n+        // }\n+        attributes::outer_attributes(p);\n+\n         match p.current() {\n-            // test record_literal_field_with_attr\n-            // fn main() {\n-            //     S { #[cfg(test)] field: 1 }\n-            // }\n-            IDENT | INT_NUMBER | T![#] => {\n-                let m = p.start();\n-                attributes::outer_attributes(p);\n-                name_ref_or_index(p);\n-                if p.eat(T![:]) {\n-                    expr(p);\n+            IDENT | INT_NUMBER => {\n+                // test_err record_literal_before_ellipsis_recovery\n+                // fn main() {\n+                //     S { field ..S::default() }\n+                // }\n+                if p.nth_at(1, T![:]) || p.nth_at(1, T![..]) {\n+                    name_ref_or_index(p);\n+                    p.expect(T![:]);\n                 }\n+                expr(p);\n                 m.complete(p, RECORD_FIELD);\n             }\n             T![.] if p.at(T![..]) => {\n+                m.abandon(p);\n                 p.bump(T![..]);\n                 expr(p);\n             }\n-            T!['{'] => error_block(p, \"expected a field\"),\n-            _ => p.err_and_bump(\"expected identifier\"),\n+            T!['{'] => {\n+                error_block(p, \"expected a field\");\n+                m.abandon(p);\n+            }\n+            _ => {\n+                p.err_and_bump(\"expected identifier\");\n+                m.abandon(p);\n+            }\n         }\n         if !p.at(T!['}']) {\n             p.expect(T![,]);"}, {"sha": "fe1a039cbf64384e9774432f99fd399cbfe8c485", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -3,8 +3,19 @@\n use super::*;\n \n pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(token_set![\n-    L_PAREN, EXCL, STAR, L_BRACK, AMP, UNDERSCORE, FN_KW, UNSAFE_KW, EXTERN_KW, FOR_KW, IMPL_KW,\n-    DYN_KW, L_ANGLE,\n+    T!['('],\n+    T!['['],\n+    T![<],\n+    T![!],\n+    T![*],\n+    T![&],\n+    T![_],\n+    T![fn],\n+    T![unsafe],\n+    T![extern],\n+    T![for],\n+    T![impl],\n+    T![dyn],\n ]);\n \n const TYPE_RECOVERY_SET: TokenSet = token_set![R_PAREN, COMMA, L_DOLLAR];"}, {"sha": "524e7d784e5be057537bbe56033875a15b0cec2f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 18, "deletions": 310, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -9,7 +9,7 @@ pub enum SyntaxKind {\n     TOMBSTONE,\n     #[doc(hidden)]\n     EOF,\n-    SEMI,\n+    SEMICOLON,\n     COMMA,\n     L_PAREN,\n     R_PAREN,\n@@ -33,15 +33,15 @@ pub enum SyntaxKind {\n     PERCENT,\n     UNDERSCORE,\n     DOT,\n-    DOTDOT,\n-    DOTDOTDOT,\n-    DOTDOTEQ,\n+    DOT2,\n+    DOT3,\n+    DOT2EQ,\n     COLON,\n-    COLONCOLON,\n+    COLON2,\n     EQ,\n-    EQEQ,\n+    EQ2,\n     FAT_ARROW,\n-    EXCL,\n+    BANG,\n     NEQ,\n     MINUS,\n     THIN_ARROW,\n@@ -55,8 +55,8 @@ pub enum SyntaxKind {\n     SLASHEQ,\n     STAREQ,\n     PERCENTEQ,\n-    AMPAMP,\n-    PIPEPIPE,\n+    AMP2,\n+    PIPE2,\n     SHL,\n     SHR,\n     SHLEQ,\n@@ -265,12 +265,12 @@ impl SyntaxKind {\n     }\n     pub fn is_punct(self) -> bool {\n         match self {\n-            SEMI | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK | L_ANGLE\n-            | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS | STAR\n-            | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ\n-            | COLON | COLONCOLON | EQ | EQEQ | FAT_ARROW | EXCL | NEQ | MINUS | THIN_ARROW\n-            | LTEQ | GTEQ | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ\n-            | PERCENTEQ | AMPAMP | PIPEPIPE | SHL | SHR | SHLEQ | SHREQ => true,\n+            SEMICOLON | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK\n+            | L_ANGLE | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS\n+            | STAR | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOT2 | DOT3 | DOT2EQ | COLON\n+            | COLON2 | EQ | EQ2 | FAT_ARROW | BANG | NEQ | MINUS | THIN_ARROW | LTEQ | GTEQ\n+            | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ | PERCENTEQ | AMP2\n+            | PIPE2 | SHL | SHR | SHLEQ | SHREQ => true,\n             _ => false,\n         }\n     }\n@@ -329,7 +329,7 @@ impl SyntaxKind {\n     }\n     pub fn from_char(c: char) -> Option<SyntaxKind> {\n         let tok = match c {\n-            ';' => SEMI,\n+            ';' => SEMICOLON,\n             ',' => COMMA,\n             '(' => L_PAREN,\n             ')' => R_PAREN,\n@@ -355,304 +355,12 @@ impl SyntaxKind {\n             '.' => DOT,\n             ':' => COLON,\n             '=' => EQ,\n-            '!' => EXCL,\n+            '!' => BANG,\n             '-' => MINUS,\n             _ => return None,\n         };\n         Some(tok)\n     }\n }\n #[macro_export]\n-macro_rules! T {\n-    ( ; ) => {\n-        $crate::SyntaxKind::SEMI\n-    };\n-    ( , ) => {\n-        $crate::SyntaxKind::COMMA\n-    };\n-    ( '(' ) => {\n-        $crate::SyntaxKind::L_PAREN\n-    };\n-    ( ')' ) => {\n-        $crate::SyntaxKind::R_PAREN\n-    };\n-    ( '{' ) => {\n-        $crate::SyntaxKind::L_CURLY\n-    };\n-    ( '}' ) => {\n-        $crate::SyntaxKind::R_CURLY\n-    };\n-    ( '[' ) => {\n-        $crate::SyntaxKind::L_BRACK\n-    };\n-    ( ']' ) => {\n-        $crate::SyntaxKind::R_BRACK\n-    };\n-    ( < ) => {\n-        $crate::SyntaxKind::L_ANGLE\n-    };\n-    ( > ) => {\n-        $crate::SyntaxKind::R_ANGLE\n-    };\n-    ( @ ) => {\n-        $crate::SyntaxKind::AT\n-    };\n-    ( # ) => {\n-        $crate::SyntaxKind::POUND\n-    };\n-    ( ~ ) => {\n-        $crate::SyntaxKind::TILDE\n-    };\n-    ( ? ) => {\n-        $crate::SyntaxKind::QUESTION\n-    };\n-    ( $ ) => {\n-        $crate::SyntaxKind::DOLLAR\n-    };\n-    ( & ) => {\n-        $crate::SyntaxKind::AMP\n-    };\n-    ( | ) => {\n-        $crate::SyntaxKind::PIPE\n-    };\n-    ( + ) => {\n-        $crate::SyntaxKind::PLUS\n-    };\n-    ( * ) => {\n-        $crate::SyntaxKind::STAR\n-    };\n-    ( / ) => {\n-        $crate::SyntaxKind::SLASH\n-    };\n-    ( ^ ) => {\n-        $crate::SyntaxKind::CARET\n-    };\n-    ( % ) => {\n-        $crate::SyntaxKind::PERCENT\n-    };\n-    ( _ ) => {\n-        $crate::SyntaxKind::UNDERSCORE\n-    };\n-    ( . ) => {\n-        $crate::SyntaxKind::DOT\n-    };\n-    ( .. ) => {\n-        $crate::SyntaxKind::DOTDOT\n-    };\n-    ( ... ) => {\n-        $crate::SyntaxKind::DOTDOTDOT\n-    };\n-    ( ..= ) => {\n-        $crate::SyntaxKind::DOTDOTEQ\n-    };\n-    ( : ) => {\n-        $crate::SyntaxKind::COLON\n-    };\n-    ( :: ) => {\n-        $crate::SyntaxKind::COLONCOLON\n-    };\n-    ( = ) => {\n-        $crate::SyntaxKind::EQ\n-    };\n-    ( == ) => {\n-        $crate::SyntaxKind::EQEQ\n-    };\n-    ( => ) => {\n-        $crate::SyntaxKind::FAT_ARROW\n-    };\n-    ( ! ) => {\n-        $crate::SyntaxKind::EXCL\n-    };\n-    ( != ) => {\n-        $crate::SyntaxKind::NEQ\n-    };\n-    ( - ) => {\n-        $crate::SyntaxKind::MINUS\n-    };\n-    ( -> ) => {\n-        $crate::SyntaxKind::THIN_ARROW\n-    };\n-    ( <= ) => {\n-        $crate::SyntaxKind::LTEQ\n-    };\n-    ( >= ) => {\n-        $crate::SyntaxKind::GTEQ\n-    };\n-    ( += ) => {\n-        $crate::SyntaxKind::PLUSEQ\n-    };\n-    ( -= ) => {\n-        $crate::SyntaxKind::MINUSEQ\n-    };\n-    ( |= ) => {\n-        $crate::SyntaxKind::PIPEEQ\n-    };\n-    ( &= ) => {\n-        $crate::SyntaxKind::AMPEQ\n-    };\n-    ( ^= ) => {\n-        $crate::SyntaxKind::CARETEQ\n-    };\n-    ( /= ) => {\n-        $crate::SyntaxKind::SLASHEQ\n-    };\n-    ( *= ) => {\n-        $crate::SyntaxKind::STAREQ\n-    };\n-    ( %= ) => {\n-        $crate::SyntaxKind::PERCENTEQ\n-    };\n-    ( && ) => {\n-        $crate::SyntaxKind::AMPAMP\n-    };\n-    ( || ) => {\n-        $crate::SyntaxKind::PIPEPIPE\n-    };\n-    ( << ) => {\n-        $crate::SyntaxKind::SHL\n-    };\n-    ( >> ) => {\n-        $crate::SyntaxKind::SHR\n-    };\n-    ( <<= ) => {\n-        $crate::SyntaxKind::SHLEQ\n-    };\n-    ( >>= ) => {\n-        $crate::SyntaxKind::SHREQ\n-    };\n-    ( as ) => {\n-        $crate::SyntaxKind::AS_KW\n-    };\n-    ( async ) => {\n-        $crate::SyntaxKind::ASYNC_KW\n-    };\n-    ( await ) => {\n-        $crate::SyntaxKind::AWAIT_KW\n-    };\n-    ( box ) => {\n-        $crate::SyntaxKind::BOX_KW\n-    };\n-    ( break ) => {\n-        $crate::SyntaxKind::BREAK_KW\n-    };\n-    ( const ) => {\n-        $crate::SyntaxKind::CONST_KW\n-    };\n-    ( continue ) => {\n-        $crate::SyntaxKind::CONTINUE_KW\n-    };\n-    ( crate ) => {\n-        $crate::SyntaxKind::CRATE_KW\n-    };\n-    ( dyn ) => {\n-        $crate::SyntaxKind::DYN_KW\n-    };\n-    ( else ) => {\n-        $crate::SyntaxKind::ELSE_KW\n-    };\n-    ( enum ) => {\n-        $crate::SyntaxKind::ENUM_KW\n-    };\n-    ( extern ) => {\n-        $crate::SyntaxKind::EXTERN_KW\n-    };\n-    ( false ) => {\n-        $crate::SyntaxKind::FALSE_KW\n-    };\n-    ( fn ) => {\n-        $crate::SyntaxKind::FN_KW\n-    };\n-    ( for ) => {\n-        $crate::SyntaxKind::FOR_KW\n-    };\n-    ( if ) => {\n-        $crate::SyntaxKind::IF_KW\n-    };\n-    ( impl ) => {\n-        $crate::SyntaxKind::IMPL_KW\n-    };\n-    ( in ) => {\n-        $crate::SyntaxKind::IN_KW\n-    };\n-    ( let ) => {\n-        $crate::SyntaxKind::LET_KW\n-    };\n-    ( loop ) => {\n-        $crate::SyntaxKind::LOOP_KW\n-    };\n-    ( macro ) => {\n-        $crate::SyntaxKind::MACRO_KW\n-    };\n-    ( match ) => {\n-        $crate::SyntaxKind::MATCH_KW\n-    };\n-    ( mod ) => {\n-        $crate::SyntaxKind::MOD_KW\n-    };\n-    ( move ) => {\n-        $crate::SyntaxKind::MOVE_KW\n-    };\n-    ( mut ) => {\n-        $crate::SyntaxKind::MUT_KW\n-    };\n-    ( pub ) => {\n-        $crate::SyntaxKind::PUB_KW\n-    };\n-    ( ref ) => {\n-        $crate::SyntaxKind::REF_KW\n-    };\n-    ( return ) => {\n-        $crate::SyntaxKind::RETURN_KW\n-    };\n-    ( self ) => {\n-        $crate::SyntaxKind::SELF_KW\n-    };\n-    ( static ) => {\n-        $crate::SyntaxKind::STATIC_KW\n-    };\n-    ( struct ) => {\n-        $crate::SyntaxKind::STRUCT_KW\n-    };\n-    ( super ) => {\n-        $crate::SyntaxKind::SUPER_KW\n-    };\n-    ( trait ) => {\n-        $crate::SyntaxKind::TRAIT_KW\n-    };\n-    ( true ) => {\n-        $crate::SyntaxKind::TRUE_KW\n-    };\n-    ( try ) => {\n-        $crate::SyntaxKind::TRY_KW\n-    };\n-    ( type ) => {\n-        $crate::SyntaxKind::TYPE_KW\n-    };\n-    ( unsafe ) => {\n-        $crate::SyntaxKind::UNSAFE_KW\n-    };\n-    ( use ) => {\n-        $crate::SyntaxKind::USE_KW\n-    };\n-    ( where ) => {\n-        $crate::SyntaxKind::WHERE_KW\n-    };\n-    ( while ) => {\n-        $crate::SyntaxKind::WHILE_KW\n-    };\n-    ( auto ) => {\n-        $crate::SyntaxKind::AUTO_KW\n-    };\n-    ( default ) => {\n-        $crate::SyntaxKind::DEFAULT_KW\n-    };\n-    ( existential ) => {\n-        $crate::SyntaxKind::EXISTENTIAL_KW\n-    };\n-    ( union ) => {\n-        $crate::SyntaxKind::UNION_KW\n-    };\n-    ( raw ) => {\n-        $crate::SyntaxKind::RAW_KW\n-    };\n-}\n+macro_rules ! T { [ ; ] => { $ crate :: SyntaxKind :: SEMICOLON } ; [ , ] => { $ crate :: SyntaxKind :: COMMA } ; [ '(' ] => { $ crate :: SyntaxKind :: L_PAREN } ; [ ')' ] => { $ crate :: SyntaxKind :: R_PAREN } ; [ '{' ] => { $ crate :: SyntaxKind :: L_CURLY } ; [ '}' ] => { $ crate :: SyntaxKind :: R_CURLY } ; [ '[' ] => { $ crate :: SyntaxKind :: L_BRACK } ; [ ']' ] => { $ crate :: SyntaxKind :: R_BRACK } ; [ < ] => { $ crate :: SyntaxKind :: L_ANGLE } ; [ > ] => { $ crate :: SyntaxKind :: R_ANGLE } ; [ @ ] => { $ crate :: SyntaxKind :: AT } ; [ # ] => { $ crate :: SyntaxKind :: POUND } ; [ ~ ] => { $ crate :: SyntaxKind :: TILDE } ; [ ? ] => { $ crate :: SyntaxKind :: QUESTION } ; [ $ ] => { $ crate :: SyntaxKind :: DOLLAR } ; [ & ] => { $ crate :: SyntaxKind :: AMP } ; [ | ] => { $ crate :: SyntaxKind :: PIPE } ; [ + ] => { $ crate :: SyntaxKind :: PLUS } ; [ * ] => { $ crate :: SyntaxKind :: STAR } ; [ / ] => { $ crate :: SyntaxKind :: SLASH } ; [ ^ ] => { $ crate :: SyntaxKind :: CARET } ; [ % ] => { $ crate :: SyntaxKind :: PERCENT } ; [ _ ] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [ . ] => { $ crate :: SyntaxKind :: DOT } ; [ .. ] => { $ crate :: SyntaxKind :: DOT2 } ; [ ... ] => { $ crate :: SyntaxKind :: DOT3 } ; [ ..= ] => { $ crate :: SyntaxKind :: DOT2EQ } ; [ : ] => { $ crate :: SyntaxKind :: COLON } ; [ :: ] => { $ crate :: SyntaxKind :: COLON2 } ; [ = ] => { $ crate :: SyntaxKind :: EQ } ; [ == ] => { $ crate :: SyntaxKind :: EQ2 } ; [ => ] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [ ! ] => { $ crate :: SyntaxKind :: BANG } ; [ != ] => { $ crate :: SyntaxKind :: NEQ } ; [ - ] => { $ crate :: SyntaxKind :: MINUS } ; [ -> ] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [ <= ] => { $ crate :: SyntaxKind :: LTEQ } ; [ >= ] => { $ crate :: SyntaxKind :: GTEQ } ; [ += ] => { $ crate :: SyntaxKind :: PLUSEQ } ; [ -= ] => { $ crate :: SyntaxKind :: MINUSEQ } ; [ |= ] => { $ crate :: SyntaxKind :: PIPEEQ } ; [ &= ] => { $ crate :: SyntaxKind :: AMPEQ } ; [ ^= ] => { $ crate :: SyntaxKind :: CARETEQ } ; [ /= ] => { $ crate :: SyntaxKind :: SLASHEQ } ; [ *= ] => { $ crate :: SyntaxKind :: STAREQ } ; [ %= ] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [ && ] => { $ crate :: SyntaxKind :: AMP2 } ; [ || ] => { $ crate :: SyntaxKind :: PIPE2 } ; [ << ] => { $ crate :: SyntaxKind :: SHL } ; [ >> ] => { $ crate :: SyntaxKind :: SHR } ; [ <<= ] => { $ crate :: SyntaxKind :: SHLEQ } ; [ >>= ] => { $ crate :: SyntaxKind :: SHREQ } ; [ as ] => { $ crate :: SyntaxKind :: AS_KW } ; [ async ] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [ await ] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [ box ] => { $ crate :: SyntaxKind :: BOX_KW } ; [ break ] => { $ crate :: SyntaxKind :: BREAK_KW } ; [ const ] => { $ crate :: SyntaxKind :: CONST_KW } ; [ continue ] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [ crate ] => { $ crate :: SyntaxKind :: CRATE_KW } ; [ dyn ] => { $ crate :: SyntaxKind :: DYN_KW } ; [ else ] => { $ crate :: SyntaxKind :: ELSE_KW } ; [ enum ] => { $ crate :: SyntaxKind :: ENUM_KW } ; [ extern ] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [ false ] => { $ crate :: SyntaxKind :: FALSE_KW } ; [ fn ] => { $ crate :: SyntaxKind :: FN_KW } ; [ for ] => { $ crate :: SyntaxKind :: FOR_KW } ; [ if ] => { $ crate :: SyntaxKind :: IF_KW } ; [ impl ] => { $ crate :: SyntaxKind :: IMPL_KW } ; [ in ] => { $ crate :: SyntaxKind :: IN_KW } ; [ let ] => { $ crate :: SyntaxKind :: LET_KW } ; [ loop ] => { $ crate :: SyntaxKind :: LOOP_KW } ; [ macro ] => { $ crate :: SyntaxKind :: MACRO_KW } ; [ match ] => { $ crate :: SyntaxKind :: MATCH_KW } ; [ mod ] => { $ crate :: SyntaxKind :: MOD_KW } ; [ move ] => { $ crate :: SyntaxKind :: MOVE_KW } ; [ mut ] => { $ crate :: SyntaxKind :: MUT_KW } ; [ pub ] => { $ crate :: SyntaxKind :: PUB_KW } ; [ ref ] => { $ crate :: SyntaxKind :: REF_KW } ; [ return ] => { $ crate :: SyntaxKind :: RETURN_KW } ; [ self ] => { $ crate :: SyntaxKind :: SELF_KW } ; [ static ] => { $ crate :: SyntaxKind :: STATIC_KW } ; [ struct ] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [ super ] => { $ crate :: SyntaxKind :: SUPER_KW } ; [ trait ] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [ true ] => { $ crate :: SyntaxKind :: TRUE_KW } ; [ try ] => { $ crate :: SyntaxKind :: TRY_KW } ; [ type ] => { $ crate :: SyntaxKind :: TYPE_KW } ; [ unsafe ] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [ use ] => { $ crate :: SyntaxKind :: USE_KW } ; [ where ] => { $ crate :: SyntaxKind :: WHERE_KW } ; [ while ] => { $ crate :: SyntaxKind :: WHILE_KW } ; [ auto ] => { $ crate :: SyntaxKind :: AUTO_KW } ; [ default ] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [ existential ] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [ union ] => { $ crate :: SyntaxKind :: UNION_KW } ; [ raw ] => { $ crate :: SyntaxKind :: RAW_KW } ; [ lifetime ] => { $ crate :: SyntaxKind :: LIFETIME } ; [ ident ] => { $ crate :: SyntaxKind :: IDENT } ; }"}, {"sha": "1e0f5033920ce9001e8a92207ac2814c8d0f6686", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,9 +12,12 @@ doctest = false\n ra_tt = { path = \"../ra_tt\" }\n ra_mbe = { path = \"../ra_mbe\" }\n ra_proc_macro = { path = \"../ra_proc_macro\" }\n+goblin = \"0.2.1\"\n+libloading = \"0.6.0\"\n+test_utils = { path = \"../test_utils\" }\n \n [dev-dependencies]\n cargo_metadata = \"0.9.1\"\n difference = \"2.0.0\"\n # used as proc macro test target\n-serde_derive = \"=1.0.104\"\n\\ No newline at end of file\n+serde_derive = \"=1.0.104\""}, {"sha": "ec63d587bb294e23ed1f795e86a9bcd1f2ca19ec", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,211 @@\n+//! Handles dynamic library loading for proc macro\n+\n+use crate::{proc_macro::bridge, rustc_server::TokenStream};\n+use std::path::Path;\n+\n+use goblin::{mach::Mach, Object};\n+use libloading::Library;\n+use ra_proc_macro::ProcMacroKind;\n+\n+use std::io::Error as IoError;\n+use std::io::ErrorKind as IoErrorKind;\n+\n+const NEW_REGISTRAR_SYMBOL: &str = \"_rustc_proc_macro_decls_\";\n+\n+fn invalid_data_err(e: impl Into<Box<dyn std::error::Error + Send + Sync>>) -> IoError {\n+    IoError::new(IoErrorKind::InvalidData, e)\n+}\n+\n+fn get_symbols_from_lib(file: &Path) -> Result<Vec<String>, IoError> {\n+    let buffer = std::fs::read(file)?;\n+    let object = Object::parse(&buffer).map_err(invalid_data_err)?;\n+\n+    match object {\n+        Object::Elf(elf) => {\n+            let symbols = elf.dynstrtab.to_vec().map_err(invalid_data_err)?;\n+            let names = symbols.iter().map(|s| s.to_string()).collect();\n+            Ok(names)\n+        }\n+        Object::PE(pe) => {\n+            let symbol_names =\n+                pe.exports.iter().flat_map(|s| s.name).map(|n| n.to_string()).collect();\n+            Ok(symbol_names)\n+        }\n+        Object::Mach(mach) => match mach {\n+            Mach::Binary(binary) => {\n+                let exports = binary.exports().map_err(invalid_data_err)?;\n+                let names = exports\n+                    .into_iter()\n+                    .map(|s| {\n+                        // In macos doc:\n+                        // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlsym.3.html\n+                        // Unlike other dyld API's, the symbol name passed to dlsym() must NOT be\n+                        // prepended with an underscore.\n+                        if s.name.starts_with(\"_\") {\n+                            s.name[1..].to_string()\n+                        } else {\n+                            s.name\n+                        }\n+                    })\n+                    .collect();\n+                Ok(names)\n+            }\n+            Mach::Fat(_) => Ok(vec![]),\n+        },\n+        Object::Archive(_) | Object::Unknown(_) => Ok(vec![]),\n+    }\n+}\n+\n+fn is_derive_registrar_symbol(symbol: &str) -> bool {\n+    symbol.contains(NEW_REGISTRAR_SYMBOL)\n+}\n+\n+fn find_registrar_symbol(file: &Path) -> Result<Option<String>, IoError> {\n+    let symbols = get_symbols_from_lib(file)?;\n+    Ok(symbols.into_iter().find(|s| is_derive_registrar_symbol(s)))\n+}\n+\n+/// Loads dynamic library in platform dependent manner.\n+///\n+/// For unix, you have to use RTLD_DEEPBIND flag to escape problems described\n+/// [here](https://github.com/fedochet/rust-proc-macro-panic-inside-panic-expample)\n+/// and [here](https://github.com/rust-lang/rust/issues/60593).\n+///\n+/// Usage of RTLD_DEEPBIND\n+/// [here](https://github.com/fedochet/rust-proc-macro-panic-inside-panic-expample/issues/1)\n+///\n+/// It seems that on Windows that behaviour is default, so we do nothing in that case.\n+#[cfg(windows)]\n+fn load_library(file: &Path) -> Result<Library, libloading::Error> {\n+    Library::new(file)\n+}\n+\n+#[cfg(unix)]\n+fn load_library(file: &Path) -> Result<Library, libloading::Error> {\n+    use libloading::os::unix::Library as UnixLibrary;\n+    use std::os::raw::c_int;\n+\n+    const RTLD_NOW: c_int = 0x00002;\n+    const RTLD_DEEPBIND: c_int = 0x00008;\n+\n+    UnixLibrary::open(Some(file), RTLD_NOW | RTLD_DEEPBIND).map(|lib| lib.into())\n+}\n+\n+struct ProcMacroLibraryLibloading {\n+    // Hold the dylib to prevent it for unloadeding\n+    _lib: Library,\n+    exported_macros: Vec<bridge::client::ProcMacro>,\n+}\n+\n+impl ProcMacroLibraryLibloading {\n+    fn open(file: &Path) -> Result<Self, IoError> {\n+        let symbol_name = find_registrar_symbol(file)?\n+            .ok_or(invalid_data_err(format!(\"Cannot find registrar symbol in file {:?}\", file)))?;\n+\n+        let lib = load_library(file).map_err(invalid_data_err)?;\n+        let exported_macros = {\n+            let macros: libloading::Symbol<&&[bridge::client::ProcMacro]> =\n+                unsafe { lib.get(symbol_name.as_bytes()) }.map_err(invalid_data_err)?;\n+            macros.to_vec()\n+        };\n+\n+        Ok(ProcMacroLibraryLibloading { _lib: lib, exported_macros })\n+    }\n+}\n+\n+type ProcMacroLibraryImpl = ProcMacroLibraryLibloading;\n+\n+pub struct Expander {\n+    libs: Vec<ProcMacroLibraryImpl>,\n+}\n+\n+impl Expander {\n+    pub fn new<P: AsRef<Path>>(lib: &P) -> Result<Expander, String> {\n+        let mut libs = vec![];\n+        /* Some libraries for dynamic loading require canonicalized path (even when it is\n+        already absolute\n+        */\n+        let lib =\n+            lib.as_ref().canonicalize().expect(&format!(\"Cannot canonicalize {:?}\", lib.as_ref()));\n+\n+        let library = ProcMacroLibraryImpl::open(&lib).map_err(|e| e.to_string())?;\n+        libs.push(library);\n+\n+        Ok(Expander { libs })\n+    }\n+\n+    pub fn expand(\n+        &self,\n+        macro_name: &str,\n+        macro_body: &ra_tt::Subtree,\n+        attributes: Option<&ra_tt::Subtree>,\n+    ) -> Result<ra_tt::Subtree, bridge::PanicMessage> {\n+        let parsed_body = TokenStream::with_subtree(macro_body.clone());\n+\n+        let parsed_attributes = attributes\n+            .map_or(crate::rustc_server::TokenStream::new(), |attr| {\n+                TokenStream::with_subtree(attr.clone())\n+            });\n+\n+        for lib in &self.libs {\n+            for proc_macro in &lib.exported_macros {\n+                match proc_macro {\n+                    bridge::client::ProcMacro::CustomDerive { trait_name, client, .. }\n+                        if *trait_name == macro_name =>\n+                    {\n+                        let res = client.run(\n+                            &crate::proc_macro::bridge::server::SameThread,\n+                            crate::rustc_server::Rustc::default(),\n+                            parsed_body,\n+                        );\n+                        return res.map(|it| it.subtree);\n+                    }\n+                    bridge::client::ProcMacro::Bang { name, client } if *name == macro_name => {\n+                        let res = client.run(\n+                            &crate::proc_macro::bridge::server::SameThread,\n+                            crate::rustc_server::Rustc::default(),\n+                            parsed_body,\n+                        );\n+                        return res.map(|it| it.subtree);\n+                    }\n+                    bridge::client::ProcMacro::Attr { name, client } if *name == macro_name => {\n+                        let res = client.run(\n+                            &crate::proc_macro::bridge::server::SameThread,\n+                            crate::rustc_server::Rustc::default(),\n+                            parsed_attributes,\n+                            parsed_body,\n+                        );\n+\n+                        return res.map(|it| it.subtree);\n+                    }\n+                    _ => continue,\n+                }\n+            }\n+        }\n+\n+        Err(bridge::PanicMessage::String(\"Nothing to expand\".to_string()))\n+    }\n+\n+    pub fn list_macros(&self) -> Result<Vec<(String, ProcMacroKind)>, bridge::PanicMessage> {\n+        let mut result = vec![];\n+\n+        for lib in &self.libs {\n+            for proc_macro in &lib.exported_macros {\n+                let res = match proc_macro {\n+                    bridge::client::ProcMacro::CustomDerive { trait_name, .. } => {\n+                        (trait_name.to_string(), ProcMacroKind::CustomDerive)\n+                    }\n+                    bridge::client::ProcMacro::Bang { name, .. } => {\n+                        (name.to_string(), ProcMacroKind::FuncLike)\n+                    }\n+                    bridge::client::ProcMacro::Attr { name, .. } => {\n+                        (name.to_string(), ProcMacroKind::Attr)\n+                    }\n+                };\n+                result.push(res);\n+            }\n+        }\n+\n+        Ok(result)\n+    }\n+}"}, {"sha": "59716cbb3b0323bb0d0a7cd44cb3bdb544c20dae", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -17,13 +17,41 @@ mod proc_macro;\n #[doc(hidden)]\n mod rustc_server;\n \n+mod dylib;\n+\n use proc_macro::bridge::client::TokenStream;\n use ra_proc_macro::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask};\n \n-pub fn expand_task(_task: &ExpansionTask) -> Result<ExpansionResult, String> {\n-    unimplemented!()\n+pub fn expand_task(task: &ExpansionTask) -> Result<ExpansionResult, String> {\n+    let expander = dylib::Expander::new(&task.lib)\n+        .expect(&format!(\"Cannot expand with provided libraries: ${:?}\", &task.lib));\n+\n+    match expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref()) {\n+        Ok(expansion) => Ok(ExpansionResult { expansion }),\n+        Err(msg) => {\n+            let reason = format!(\n+                \"Cannot perform expansion for {}: error {:?}!\",\n+                &task.macro_name,\n+                msg.as_str()\n+            );\n+            Err(reason)\n+        }\n+    }\n }\n \n-pub fn list_macros(_task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n-    unimplemented!()\n+pub fn list_macros(task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n+    let expander = dylib::Expander::new(&task.lib)\n+        .expect(&format!(\"Cannot expand with provided libraries: ${:?}\", &task.lib));\n+\n+    match expander.list_macros() {\n+        Ok(macros) => Ok(ListMacrosResult { macros }),\n+        Err(msg) => {\n+            let reason =\n+                format!(\"Cannot perform expansion for {:?}: error {:?}!\", &task.lib, msg.as_str());\n+            Err(reason)\n+        }\n+    }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "ec0d356922d0191cfbf436ea6e897a1f6248bc5f", "filename": "crates/ra_proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,6 +34,10 @@ impl TokenStream {\n         TokenStream { subtree: Default::default() }\n     }\n \n+    pub fn with_subtree(subtree: tt::Subtree) -> Self {\n+        TokenStream { subtree }\n+    }\n+\n     pub fn is_empty(&self) -> bool {\n         self.subtree.token_trees.is_empty()\n     }"}, {"sha": "24507d98d76f686b9372383c5bafec0eca2e4a32", "filename": "crates/ra_proc_macro_srv/src/tests/fixtures/test_serialize_proc_macro.txt", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,188 @@\n+SUBTREE $\n+  PUNCH   # [alone] 4294967295\n+  SUBTREE [] 4294967295\n+    IDENT   allow 4294967295\n+    SUBTREE () 4294967295\n+      IDENT   non_upper_case_globals 4294967295\n+      PUNCH   , [alone] 4294967295\n+      IDENT   unused_attributes 4294967295\n+      PUNCH   , [alone] 4294967295\n+      IDENT   unused_qualifications 4294967295\n+  IDENT   const 4294967295\n+  IDENT   _IMPL_SERIALIZE_FOR_Foo 4294967295\n+  PUNCH   : [alone] 4294967295\n+  SUBTREE () 4294967295\n+  PUNCH   = [alone] 4294967295\n+  SUBTREE {} 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   allow 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   unknown_lints 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   cfg_attr 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   feature 4294967295\n+        PUNCH   = [alone] 4294967295\n+        SUBTREE $\n+          LITERAL \"cargo-clippy\" 0\n+        PUNCH   , [alone] 4294967295\n+        IDENT   allow 4294967295\n+        SUBTREE () 4294967295\n+          IDENT   useless_attribute 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   allow 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   rust_2018_idioms 4294967295\n+    IDENT   extern 4294967295\n+    IDENT   crate 4294967295\n+    IDENT   serde 4294967295\n+    IDENT   as 4294967295\n+    IDENT   _serde 4294967295\n+    PUNCH   ; [alone] 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   allow 4294967295\n+      SUBTREE () 4294967295\n+        IDENT   unused_macros 4294967295\n+    IDENT   macro_rules 4294967295\n+    PUNCH   ! [alone] 4294967295\n+    IDENT   try 4294967295\n+    SUBTREE {} 4294967295\n+      SUBTREE () 4294967295\n+        PUNCH   $ [alone] 4294967295\n+        IDENT   __expr 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   expr 4294967295\n+      PUNCH   = [joint] 4294967295\n+      PUNCH   > [alone] 4294967295\n+      SUBTREE {} 4294967295\n+        IDENT   match 4294967295\n+        PUNCH   $ [alone] 4294967295\n+        IDENT   __expr 4294967295\n+        SUBTREE {} 4294967295\n+          IDENT   _serde 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   export 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   Ok 4294967295\n+          SUBTREE () 4294967295\n+            IDENT   __val 4294967295\n+          PUNCH   = [joint] 4294967295\n+          PUNCH   > [alone] 4294967295\n+          IDENT   __val 4294967295\n+          PUNCH   , [alone] 4294967295\n+          IDENT   _serde 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   export 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   Err 4294967295\n+          SUBTREE () 4294967295\n+            IDENT   __err 4294967295\n+          PUNCH   = [joint] 4294967295\n+          PUNCH   > [alone] 4294967295\n+          SUBTREE {} 4294967295\n+            IDENT   return 4294967295\n+            IDENT   _serde 4294967295\n+            PUNCH   : [joint] 4294967295\n+            PUNCH   : [alone] 4294967295\n+            IDENT   export 4294967295\n+            PUNCH   : [joint] 4294967295\n+            PUNCH   : [alone] 4294967295\n+            IDENT   Err 4294967295\n+            SUBTREE () 4294967295\n+              IDENT   __err 4294967295\n+            PUNCH   ; [alone] 4294967295\n+    PUNCH   # [alone] 4294967295\n+    SUBTREE [] 4294967295\n+      IDENT   automatically_derived 4294967295\n+    IDENT   impl 4294967295\n+    IDENT   _serde 4294967295\n+    PUNCH   : [joint] 4294967295\n+    PUNCH   : [alone] 4294967295\n+    IDENT   Serialize 4294967295\n+    IDENT   for 4294967295\n+    IDENT   Foo 1\n+    SUBTREE {} 4294967295\n+      IDENT   fn 4294967295\n+      IDENT   serialize 4294967295\n+      PUNCH   < [alone] 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   > [alone] 4294967295\n+      SUBTREE () 4294967295\n+        PUNCH   & [alone] 4294967295\n+        IDENT   self 4294967295\n+        PUNCH   , [alone] 4294967295\n+        IDENT   __serializer 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   __S 4294967295\n+      PUNCH   - [joint] 4294967295\n+      PUNCH   > [alone] 4294967295\n+      IDENT   _serde 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   export 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Result 4294967295\n+      PUNCH   < [alone] 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Ok 4294967295\n+      PUNCH   , [alone] 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Error 4294967295\n+      PUNCH   > [alone] 4294967295\n+      IDENT   where 4294967295\n+      IDENT   __S 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   _serde 4294967295\n+      PUNCH   : [joint] 4294967295\n+      PUNCH   : [alone] 4294967295\n+      IDENT   Serializer 4294967295\n+      PUNCH   , [alone] 4294967295\n+      SUBTREE {} 4294967295\n+        IDENT   let 4294967295\n+        IDENT   __serde_state 4294967295\n+        PUNCH   = [alone] 4294967295\n+        IDENT   try 4294967295\n+        PUNCH   ! [alone] 4294967295\n+        SUBTREE () 4294967295\n+          IDENT   _serde 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   Serializer 4294967295\n+          PUNCH   : [joint] 4294967295\n+          PUNCH   : [alone] 4294967295\n+          IDENT   serialize_struct 4294967295\n+          SUBTREE () 4294967295\n+            IDENT   __serializer 4294967295\n+            PUNCH   , [alone] 4294967295\n+            LITERAL \"Foo\" 4294967295\n+            PUNCH   , [alone] 4294967295\n+            IDENT   false 4294967295\n+            IDENT   as 4294967295\n+            IDENT   usize 4294967295\n+        PUNCH   ; [alone] 4294967295\n+        IDENT   _serde 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   ser 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   SerializeStruct 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   end 4294967295\n+        SUBTREE () 4294967295\n+          IDENT   __serde_state 4294967295\n+  PUNCH   ; [alone] 4294967295\n\\ No newline at end of file"}, {"sha": "03f79bc5d60f22b3177ea7e7cf46d69e6b171ad0", "filename": "crates/ra_proc_macro_srv/src/tests/mod.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,47 @@\n+//! proc-macro tests\n+\n+#[macro_use]\n+mod utils;\n+use test_utils::assert_eq_text;\n+use utils::*;\n+\n+#[test]\n+fn test_derive_serialize_proc_macro() {\n+    assert_expand(\n+        \"serde_derive\",\n+        \"Serialize\",\n+        \"1.0.104\",\n+        r##\"struct Foo {}\"##,\n+        include_str!(\"fixtures/test_serialize_proc_macro.txt\"),\n+    );\n+}\n+\n+#[test]\n+fn test_derive_serialize_proc_macro_failed() {\n+    assert_expand(\n+        \"serde_derive\",\n+        \"Serialize\",\n+        \"1.0.104\",\n+        r##\"\n+    struct {}\n+\"##,\n+        r##\"\n+SUBTREE $\n+  IDENT   compile_error 4294967295\n+  PUNCH   ! [alone] 4294967295\n+  SUBTREE {} 4294967295\n+    LITERAL \"expected identifier\" 4294967295\n+\"##,\n+    );\n+}\n+\n+#[test]\n+fn test_derive_proc_macro_list() {\n+    let res = list(\"serde_derive\", \"1.0.104\").join(\"\\n\");\n+\n+    assert_eq_text!(\n+        &res,\n+        r#\"Serialize [CustomDerive]\n+Deserialize [CustomDerive]\"#\n+    );\n+}"}, {"sha": "1ee409449222a2f59d0497c8e04b5307c4ec162b", "filename": "crates/ra_proc_macro_srv/src/tests/utils.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,65 @@\n+//! utils used in proc-macro tests\n+\n+use crate::dylib;\n+use crate::list_macros;\n+pub use difference::Changeset as __Changeset;\n+use ra_proc_macro::ListMacrosTask;\n+use std::str::FromStr;\n+use test_utils::assert_eq_text;\n+\n+mod fixtures {\n+    use cargo_metadata::{parse_messages, Message};\n+    use std::process::Command;\n+\n+    // Use current project metadata to get the proc-macro dylib path\n+    pub fn dylib_path(crate_name: &str, version: &str) -> std::path::PathBuf {\n+        let command = Command::new(\"cargo\")\n+            .args(&[\"check\", \"--message-format\", \"json\"])\n+            .output()\n+            .unwrap()\n+            .stdout;\n+\n+        for message in parse_messages(command.as_slice()) {\n+            match message.unwrap() {\n+                Message::CompilerArtifact(artifact) => {\n+                    if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n+                        let repr = format!(\"{} {}\", crate_name, version);\n+                        if artifact.package_id.repr.starts_with(&repr) {\n+                            return artifact.filenames[0].clone();\n+                        }\n+                    }\n+                }\n+                _ => (), // Unknown message\n+            }\n+        }\n+\n+        panic!(\"No proc-macro dylib for {} found!\", crate_name);\n+    }\n+}\n+\n+fn parse_string(code: &str) -> Option<crate::rustc_server::TokenStream> {\n+    Some(crate::rustc_server::TokenStream::from_str(code).unwrap())\n+}\n+\n+pub fn assert_expand(\n+    crate_name: &str,\n+    macro_name: &str,\n+    version: &str,\n+    fixture: &str,\n+    expect: &str,\n+) {\n+    let path = fixtures::dylib_path(crate_name, version);\n+    let expander = dylib::Expander::new(&path).unwrap();\n+    let fixture = parse_string(fixture).unwrap();\n+\n+    let res = expander.expand(macro_name, &fixture.subtree, None).unwrap();\n+    assert_eq_text!(&format!(\"{:?}\", res), &expect.trim());\n+}\n+\n+pub fn list(crate_name: &str, version: &str) -> Vec<String> {\n+    let path = fixtures::dylib_path(crate_name, version);\n+    let task = ListMacrosTask { lib: path };\n+\n+    let res = list_macros(&task).unwrap();\n+    res.macros.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()\n+}"}, {"sha": "2d4f68f5e07ec2f5e929370985be9897a8ccc463", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -113,21 +113,6 @@ pub fn profile(label: Label) -> Profiler {\n     })\n }\n \n-pub fn print_time(label: Label) -> impl Drop {\n-    struct Guard {\n-        label: Label,\n-        start: Instant,\n-    }\n-\n-    impl Drop for Guard {\n-        fn drop(&mut self) {\n-            eprintln!(\"{}: {:?}\", self.label, self.start.elapsed())\n-        }\n-    }\n-\n-    Guard { label, start: Instant::now() }\n-}\n-\n pub struct Profiler {\n     label: Option<Label>,\n     detail: Option<String>,"}, {"sha": "99c6b72197ca83ff4e7395be12bb5bd00f56835b", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -42,11 +42,6 @@ pub trait AstNode {\n     fn syntax(&self) -> &SyntaxNode;\n }\n \n-#[test]\n-fn assert_ast_is_object_safe() {\n-    fn _f(_: &dyn AstNode, _: &dyn NameOwner) {}\n-}\n-\n /// Like `AstNode`, but wraps tokens rather than interior nodes.\n pub trait AstToken {\n     fn can_cast(token: SyntaxKind) -> bool\n@@ -64,22 +59,6 @@ pub trait AstToken {\n     }\n }\n \n-mod support {\n-    use super::{AstChildren, AstNode, AstToken, SyntaxNode};\n-\n-    pub(super) fn child<N: AstNode>(parent: &SyntaxNode) -> Option<N> {\n-        parent.children().find_map(N::cast)\n-    }\n-\n-    pub(super) fn children<N: AstNode>(parent: &SyntaxNode) -> AstChildren<N> {\n-        AstChildren::new(parent)\n-    }\n-\n-    pub(super) fn token<T: AstToken>(parent: &SyntaxNode) -> Option<T> {\n-        parent.children_with_tokens().filter_map(|it| it.into_token()).find_map(T::cast)\n-    }\n-}\n-\n /// An iterator over `SyntaxNode` children of a particular AST type.\n #[derive(Debug, Clone)]\n pub struct AstChildren<N> {\n@@ -100,12 +79,25 @@ impl<N: AstNode> Iterator for AstChildren<N> {\n     }\n }\n \n-fn child_opt<P: AstNode + ?Sized, C: AstNode>(parent: &P) -> Option<C> {\n-    children(parent).next()\n+mod support {\n+    use super::{AstChildren, AstNode, SyntaxKind, SyntaxNode, SyntaxToken};\n+\n+    pub(super) fn child<N: AstNode>(parent: &SyntaxNode) -> Option<N> {\n+        parent.children().find_map(N::cast)\n+    }\n+\n+    pub(super) fn children<N: AstNode>(parent: &SyntaxNode) -> AstChildren<N> {\n+        AstChildren::new(parent)\n+    }\n+\n+    pub(super) fn token(parent: &SyntaxNode, kind: SyntaxKind) -> Option<SyntaxToken> {\n+        parent.children_with_tokens().filter_map(|it| it.into_token()).find(|it| it.kind() == kind)\n+    }\n }\n \n-fn children<P: AstNode + ?Sized, C: AstNode>(parent: &P) -> AstChildren<C> {\n-    AstChildren::new(parent.syntax())\n+#[test]\n+fn assert_ast_is_object_safe() {\n+    fn _f(_: &dyn AstNode, _: &dyn NameOwner) {}\n }\n \n #[test]\n@@ -287,7 +279,7 @@ where\n     let pred = predicates.next().unwrap();\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n-    assert_eq!(\"'a\", pred.lifetime().unwrap().text());\n+    assert_eq!(\"'a\", pred.lifetime_token().unwrap().text());\n \n     assert_bound(\"'b\", bounds.next());\n     assert_bound(\"'c\", bounds.next());"}, {"sha": "9e5411ee58a65643ca3f7970bc6fd518449f8ec1", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,7 +6,7 @@ use std::{iter, ops::RangeInclusive};\n use arrayvec::ArrayVec;\n \n use crate::{\n-    algo,\n+    algo::{self, neighbor, SyntaxRewriter},\n     ast::{\n         self,\n         make::{self, tokens},\n@@ -16,7 +16,6 @@ use crate::{\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken, T,\n };\n-use algo::{neighbor, SyntaxRewriter};\n \n impl ast::BinExpr {\n     #[must_use]\n@@ -96,10 +95,10 @@ impl ast::ItemList {\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),\n                 InsertPosition::After(it.syntax().clone().into()),\n             ),\n-            None => match self.l_curly() {\n+            None => match self.l_curly_token() {\n                 Some(it) => (\n                     \"    \".to_string() + &leading_indent(self.syntax()).unwrap_or_default(),\n-                    InsertPosition::After(it.syntax().clone().into()),\n+                    InsertPosition::After(it.into()),\n                 ),\n                 None => return self.clone(),\n             },\n@@ -142,8 +141,8 @@ impl ast::RecordFieldList {\n \n         macro_rules! after_l_curly {\n             () => {{\n-                let anchor = match self.l_curly() {\n-                    Some(it) => it.syntax().clone().into(),\n+                let anchor = match self.l_curly_token() {\n+                    Some(it) => it.into(),\n                     None => return self.clone(),\n                 };\n                 InsertPosition::After(anchor)\n@@ -190,15 +189,15 @@ impl ast::RecordFieldList {\n impl ast::TypeParam {\n     #[must_use]\n     pub fn remove_bounds(&self) -> ast::TypeParam {\n-        let colon = match self.colon() {\n+        let colon = match self.colon_token() {\n             Some(it) => it,\n             None => return self.clone(),\n         };\n         let end = match self.type_bound_list() {\n             Some(it) => it.syntax().clone().into(),\n-            None => colon.syntax().clone().into(),\n+            None => colon.clone().into(),\n         };\n-        self.replace_children(colon.syntax().clone().into()..=end, iter::empty())\n+        self.replace_children(colon.into()..=end, iter::empty())\n     }\n }\n \n@@ -301,7 +300,7 @@ impl ast::UseTree {\n             suffix.clone(),\n             self.use_tree_list(),\n             self.alias(),\n-            self.star().is_some(),\n+            self.star_token().is_some(),\n         );\n         let nested = make::use_tree_list(iter::once(use_tree));\n         return make::use_tree(prefix.clone(), Some(nested), None, false);"}, {"sha": "93aa3d45faf4f0bdd8b3834b11232d58e857a096", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,7 +1,7 @@\n //! Various extension methods to ast Expr Nodes, which are hard to code-generate.\n \n use crate::{\n-    ast::{self, child_opt, children, AstChildren, AstNode},\n+    ast::{self, support, AstChildren, AstNode},\n     SmolStr,\n     SyntaxKind::*,\n     SyntaxToken, T,\n@@ -36,25 +36,15 @@ impl ast::IfExpr {\n         let res = match self.blocks().nth(1) {\n             Some(block) => ElseBranch::Block(block),\n             None => {\n-                let elif: ast::IfExpr = child_opt(self)?;\n+                let elif: ast::IfExpr = support::child(self.syntax())?;\n                 ElseBranch::IfExpr(elif)\n             }\n         };\n         Some(res)\n     }\n \n     fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n-        children(self)\n-    }\n-}\n-\n-impl ast::RefExpr {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-\n-    pub fn raw_token(&self) -> Option<SyntaxToken> {\n-        None // FIXME: implement &raw\n+        support::children(self.syntax())\n     }\n }\n \n@@ -212,15 +202,15 @@ impl ast::BinExpr {\n     }\n \n     pub fn lhs(&self) -> Option<ast::Expr> {\n-        children(self).next()\n+        support::children(self.syntax()).next()\n     }\n \n     pub fn rhs(&self) -> Option<ast::Expr> {\n-        children(self).nth(1)\n+        support::children(self.syntax()).nth(1)\n     }\n \n     pub fn sub_exprs(&self) -> (Option<ast::Expr>, Option<ast::Expr>) {\n-        let mut children = children(self);\n+        let mut children = support::children(self.syntax());\n         let first = children.next();\n         let second = children.next();\n         (first, second)\n@@ -275,10 +265,10 @@ impl ast::RangeExpr {\n \n impl ast::IndexExpr {\n     pub fn base(&self) -> Option<ast::Expr> {\n-        children(self).next()\n+        support::children(self.syntax()).next()\n     }\n     pub fn index(&self) -> Option<ast::Expr> {\n-        children(self).nth(1)\n+        support::children(self.syntax()).nth(1)\n     }\n }\n \n@@ -291,11 +281,11 @@ impl ast::ArrayExpr {\n     pub fn kind(&self) -> ArrayExprKind {\n         if self.is_repeat() {\n             ArrayExprKind::Repeat {\n-                initializer: children(self).next(),\n-                repeat: children(self).nth(1),\n+                initializer: support::children(self.syntax()).next(),\n+                repeat: support::children(self.syntax()).nth(1),\n             }\n         } else {\n-            ArrayExprKind::ElementList(children(self))\n+            ArrayExprKind::ElementList(support::children(self.syntax()))\n         }\n     }\n "}, {"sha": "63e272fbfa53bd17ee66d630aa0ec76b99d52fed", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 68, "deletions": 161, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -2,16 +2,12 @@\n //! Extensions for various expressions live in a sibling `expr_extensions` module.\n \n use itertools::Itertools;\n+use ra_parser::SyntaxKind;\n \n use crate::{\n-    ast::{\n-        self, child_opt, children, support, AstNode, AstToken, AttrInput, NameOwner, SyntaxNode,\n-    },\n-    SmolStr, SyntaxElement,\n-    SyntaxKind::*,\n-    SyntaxToken, T,\n+    ast::{self, support, AstNode, AttrInput, NameOwner, SyntaxNode},\n+    SmolStr, SyntaxElement, SyntaxToken, T,\n };\n-use ra_parser::SyntaxKind;\n \n impl ast::Name {\n     pub fn text(&self) -> &SmolStr {\n@@ -25,13 +21,7 @@ impl ast::NameRef {\n     }\n \n     pub fn as_tuple_field(&self) -> Option<usize> {\n-        self.syntax().children_with_tokens().find_map(|c| {\n-            if c.kind() == SyntaxKind::INT_NUMBER {\n-                c.as_token().and_then(|tok| tok.text().as_str().parse().ok())\n-            } else {\n-                None\n-            }\n-        })\n+        self.text().parse().ok()\n     }\n }\n \n@@ -87,7 +77,7 @@ impl ast::Attr {\n             first_token.and_then(|token| token.next_token()).as_ref().map(SyntaxToken::kind);\n \n         match (first_token_kind, second_token_kind) {\n-            (Some(SyntaxKind::POUND), Some(SyntaxKind::EXCL)) => AttrKind::Inner,\n+            (Some(SyntaxKind::POUND), Some(T![!])) => AttrKind::Inner,\n             _ => AttrKind::Outer,\n         }\n     }\n@@ -140,15 +130,6 @@ impl ast::Path {\n     }\n }\n \n-impl ast::Module {\n-    pub fn has_semi(&self) -> bool {\n-        match self.syntax().last_child_or_token() {\n-            None => false,\n-            Some(node) => node.kind() == T![;],\n-        }\n-    }\n-}\n-\n impl ast::UseTreeList {\n     pub fn parent_use_tree(&self) -> ast::UseTree {\n         self.syntax()\n@@ -174,15 +155,11 @@ impl ast::ImplDef {\n     }\n \n     fn target(&self) -> (Option<ast::TypeRef>, Option<ast::TypeRef>) {\n-        let mut types = children(self);\n+        let mut types = support::children(self.syntax());\n         let first = types.next();\n         let second = types.next();\n         (first, second)\n     }\n-\n-    pub fn is_negative(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|t| t.kind() == T![!])\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -194,9 +171,9 @@ pub enum StructKind {\n \n impl StructKind {\n     fn from_node<N: AstNode>(node: &N) -> StructKind {\n-        if let Some(nfdl) = child_opt::<_, ast::RecordFieldDefList>(node) {\n+        if let Some(nfdl) = support::child::<ast::RecordFieldDefList>(node.syntax()) {\n             StructKind::Record(nfdl)\n-        } else if let Some(pfl) = child_opt::<_, ast::TupleFieldDefList>(node) {\n+        } else if let Some(pfl) = support::child::<ast::TupleFieldDefList>(node.syntax()) {\n             StructKind::Tuple(pfl)\n         } else {\n             StructKind::Unit\n@@ -210,6 +187,36 @@ impl ast::StructDef {\n     }\n }\n \n+impl ast::RecordField {\n+    pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordField> {\n+        let candidate =\n+            field_name.syntax().parent().and_then(ast::RecordField::cast).or_else(|| {\n+                field_name.syntax().ancestors().nth(4).and_then(ast::RecordField::cast)\n+            })?;\n+        if candidate.field_name().as_ref() == Some(field_name) {\n+            Some(candidate)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Deals with field init shorthand\n+    pub fn field_name(&self) -> Option<ast::NameRef> {\n+        if let Some(name_ref) = self.name_ref() {\n+            return Some(name_ref);\n+        }\n+        if let Some(ast::Expr::PathExpr(expr)) = self.expr() {\n+            let path = expr.path()?;\n+            let segment = path.segment()?;\n+            let name_ref = segment.name_ref()?;\n+            if path.qualifier().is_none() {\n+                return Some(name_ref);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n impl ast::EnumVariant {\n     pub fn parent_enum(&self) -> ast::EnumDef {\n         self.syntax()\n@@ -223,41 +230,6 @@ impl ast::EnumVariant {\n     }\n }\n \n-impl ast::FnDef {\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        self.syntax()\n-            .last_child_or_token()\n-            .and_then(|it| it.into_token())\n-            .filter(|it| it.kind() == T![;])\n-    }\n-\n-    pub fn is_async(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![async])\n-    }\n-}\n-\n-impl ast::LetStmt {\n-    pub fn has_semi(&self) -> bool {\n-        match self.syntax().last_child_or_token() {\n-            None => false,\n-            Some(node) => node.kind() == T![;],\n-        }\n-    }\n-\n-    pub fn eq_token(&self) -> Option<SyntaxToken> {\n-        self.syntax().children_with_tokens().find(|t| t.kind() == EQ).and_then(|it| it.into_token())\n-    }\n-}\n-\n-impl ast::ExprStmt {\n-    pub fn has_semi(&self) -> bool {\n-        match self.syntax().last_child_or_token() {\n-            None => false,\n-            Some(node) => node.kind() == T![;],\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum FieldKind {\n     Name(ast::NameRef),\n@@ -286,25 +258,6 @@ impl ast::FieldExpr {\n     }\n }\n \n-impl ast::RefPat {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-}\n-\n-impl ast::BindPat {\n-    pub fn is_mutable(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-\n-    pub fn is_ref(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![ref])\n-    }\n-    pub fn has_at(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![@])\n-    }\n-}\n-\n pub struct SlicePatComponents {\n     pub prefix: Vec<ast::Pat>,\n     pub slice: Option<ast::Pat>,\n@@ -339,18 +292,6 @@ impl ast::SlicePat {\n     }\n }\n \n-impl ast::PointerType {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-}\n-\n-impl ast::ReferenceType {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum SelfParamKind {\n     /// self\n@@ -363,8 +304,8 @@ pub enum SelfParamKind {\n \n impl ast::SelfParam {\n     pub fn kind(&self) -> SelfParamKind {\n-        if self.amp().is_some() {\n-            if self.amp_mut_kw().is_some() {\n+        if self.amp_token().is_some() {\n+            if self.mut_token().is_some() {\n                 SelfParamKind::MutRef\n             } else {\n                 SelfParamKind::Ref\n@@ -373,24 +314,6 @@ impl ast::SelfParam {\n             SelfParamKind::Owned\n         }\n     }\n-\n-    /// the \"mut\" in \"mut self\", not the one in \"&mut self\"\n-    pub fn mut_kw(&self) -> Option<ast::MutKw> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .take_while(|it| it.kind() != T![&])\n-            .find_map(ast::MutKw::cast)\n-    }\n-\n-    /// the \"mut\" in \"&mut self\", not the one in \"mut self\"\n-    pub fn amp_mut_kw(&self) -> Option<ast::MutKw> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .skip_while(|it| it.kind() != T![&])\n-            .find_map(ast::MutKw::cast)\n-    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n@@ -400,53 +323,43 @@ pub enum TypeBoundKind {\n     /// for<'a> ...\n     ForType(ast::ForType),\n     /// 'a\n-    Lifetime(ast::Lifetime),\n+    Lifetime(SyntaxToken),\n }\n \n impl ast::TypeBound {\n     pub fn kind(&self) -> TypeBoundKind {\n-        if let Some(path_type) = children(self).next() {\n+        if let Some(path_type) = support::children(self.syntax()).next() {\n             TypeBoundKind::PathType(path_type)\n-        } else if let Some(for_type) = children(self).next() {\n+        } else if let Some(for_type) = support::children(self.syntax()).next() {\n             TypeBoundKind::ForType(for_type)\n-        } else if let Some(lifetime) = self.lifetime() {\n+        } else if let Some(lifetime) = self.lifetime_token() {\n             TypeBoundKind::Lifetime(lifetime)\n         } else {\n             unreachable!()\n         }\n     }\n \n-    pub fn has_question_mark(&self) -> bool {\n-        self.question().is_some()\n-    }\n-\n-    pub fn const_question(&self) -> Option<ast::Question> {\n+    pub fn const_question_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n             .take_while(|it| it.kind() != T![const])\n-            .find_map(ast::Question::cast)\n+            .find(|it| it.kind() == T![?])\n     }\n \n-    pub fn question(&self) -> Option<ast::Question> {\n-        if self.const_kw().is_some() {\n+    pub fn question_token(&self) -> Option<SyntaxToken> {\n+        if self.const_token().is_some() {\n             self.syntax()\n                 .children_with_tokens()\n                 .filter_map(|it| it.into_token())\n                 .skip_while(|it| it.kind() != T![const])\n-                .find_map(ast::Question::cast)\n+                .find(|it| it.kind() == T![?])\n         } else {\n-            support::token(&self.syntax)\n+            support::token(&self.syntax, T![?])\n         }\n     }\n }\n \n-impl ast::TraitDef {\n-    pub fn is_auto(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|t| t.kind() == T![auto])\n-    }\n-}\n-\n pub enum VisibilityKind {\n     In(ast::Path),\n     PubCrate,\n@@ -457,30 +370,18 @@ pub enum VisibilityKind {\n \n impl ast::Visibility {\n     pub fn kind(&self) -> VisibilityKind {\n-        if let Some(path) = children(self).next() {\n+        if let Some(path) = support::children(self.syntax()).next() {\n             VisibilityKind::In(path)\n-        } else if self.is_pub_crate() {\n+        } else if self.crate_token().is_some() {\n             VisibilityKind::PubCrate\n-        } else if self.is_pub_super() {\n+        } else if self.super_token().is_some() {\n             VisibilityKind::PubSuper\n-        } else if self.is_pub_self() {\n+        } else if self.self_token().is_some() {\n             VisibilityKind::PubSuper\n         } else {\n             VisibilityKind::Pub\n         }\n     }\n-\n-    fn is_pub_crate(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![crate])\n-    }\n-\n-    fn is_pub_super(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![super])\n-    }\n-\n-    fn is_pub_self(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![self])\n-    }\n }\n \n impl ast::MacroCall {\n@@ -495,39 +396,45 @@ impl ast::MacroCall {\n }\n \n impl ast::LifetimeParam {\n-    pub fn lifetime_bounds(&self) -> impl Iterator<Item = ast::Lifetime> {\n+    pub fn lifetime_bounds(&self) -> impl Iterator<Item = SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n             .skip_while(|x| x.kind() != T![:])\n-            .filter_map(ast::Lifetime::cast)\n+            .filter(|it| it.kind() == T![lifetime])\n     }\n }\n \n impl ast::RangePat {\n     pub fn start(&self) -> Option<ast::Pat> {\n         self.syntax()\n             .children_with_tokens()\n-            .take_while(|it| !ast::RangeSeparator::can_cast(it.kind()))\n+            .take_while(|it| !(it.kind() == T![..] || it.kind() == T![..=]))\n             .filter_map(|it| it.into_node())\n             .find_map(ast::Pat::cast)\n     }\n \n     pub fn end(&self) -> Option<ast::Pat> {\n         self.syntax()\n             .children_with_tokens()\n-            .skip_while(|it| !ast::RangeSeparator::can_cast(it.kind()))\n+            .skip_while(|it| !(it.kind() == T![..] || it.kind() == T![..=]))\n             .filter_map(|it| it.into_node())\n             .find_map(ast::Pat::cast)\n     }\n }\n \n impl ast::TokenTree {\n-    pub fn left_delimiter(&self) -> Option<ast::LeftDelimiter> {\n-        self.syntax().first_child_or_token()?.into_token().and_then(ast::LeftDelimiter::cast)\n+    pub fn left_delimiter_token(&self) -> Option<SyntaxToken> {\n+        self.syntax().first_child_or_token()?.into_token().filter(|it| match it.kind() {\n+            T!['{'] | T!['('] | T!['['] => true,\n+            _ => false,\n+        })\n     }\n \n-    pub fn right_delimiter(&self) -> Option<ast::RightDelimiter> {\n-        self.syntax().last_child_or_token()?.into_token().and_then(ast::RightDelimiter::cast)\n+    pub fn right_delimiter_token(&self) -> Option<SyntaxToken> {\n+        self.syntax().last_child_or_token()?.into_token().filter(|it| match it.kind() {\n+            T!['{'] | T!['('] | T!['['] => true,\n+            _ => false,\n+        })\n     }\n }"}, {"sha": "f1098755b6e7c430c2c728b4ef3cddadca130d9a", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 350, "deletions": 206, "changes": 556, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,11 +1,11 @@\n //! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n-use super::tokens::*;\n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n     SyntaxKind::{self, *},\n-    SyntaxNode,\n+    SyntaxNode, SyntaxToken, T,\n };\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SourceFile {\n     pub(crate) syntax: SyntaxNode,\n@@ -22,11 +22,11 @@ impl AstNode for SourceFile {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ast::ModuleItemOwner for SourceFile {}\n-impl ast::FnDefOwner for SourceFile {}\n impl ast::AttrsOwner for SourceFile {}\n impl SourceFile {\n     pub fn modules(&self) -> AstChildren<Module> { support::children(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FnDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -49,16 +49,17 @@ impl ast::DocCommentsOwner for FnDef {}\n impl ast::AttrsOwner for FnDef {}\n impl FnDef {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n-    pub fn const_kw(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n-    pub fn default_kw(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn async_kw(&self) -> Option<AsyncKw> { support::token(&self.syntax) }\n-    pub fn unsafe_kw(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn fn_kw(&self) -> Option<FnKw> { support::token(&self.syntax) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn fn_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![fn]) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RetType {\n     pub(crate) syntax: SyntaxNode,\n@@ -75,9 +76,10 @@ impl AstNode for RetType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RetType {\n-    pub fn thin_arrow(&self) -> Option<ThinArrow> { support::token(&self.syntax) }\n+    pub fn thin_arrow_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![->]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StructDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -99,10 +101,11 @@ impl ast::TypeParamsOwner for StructDef {}\n impl ast::AttrsOwner for StructDef {}\n impl ast::DocCommentsOwner for StructDef {}\n impl StructDef {\n-    pub fn struct_kw(&self) -> Option<StructKw> { support::token(&self.syntax) }\n+    pub fn struct_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![struct]) }\n     pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnionDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -124,11 +127,12 @@ impl ast::TypeParamsOwner for UnionDef {}\n impl ast::AttrsOwner for UnionDef {}\n impl ast::DocCommentsOwner for UnionDef {}\n impl UnionDef {\n-    pub fn union_kw(&self) -> Option<UnionKw> { support::token(&self.syntax) }\n+    pub fn union_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![union]) }\n     pub fn record_field_def_list(&self) -> Option<RecordFieldDefList> {\n         support::child(&self.syntax)\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n@@ -145,10 +149,11 @@ impl AstNode for RecordFieldDefList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RecordFieldDefList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn fields(&self) -> AstChildren<RecordFieldDef> { support::children(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -170,6 +175,7 @@ impl ast::AttrsOwner for RecordFieldDef {}\n impl ast::DocCommentsOwner for RecordFieldDef {}\n impl ast::TypeAscriptionOwner for RecordFieldDef {}\n impl RecordFieldDef {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n@@ -186,10 +192,11 @@ impl AstNode for TupleFieldDefList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TupleFieldDefList {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn fields(&self) -> AstChildren<TupleFieldDef> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleFieldDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -210,6 +217,7 @@ impl ast::AttrsOwner for TupleFieldDef {}\n impl TupleFieldDef {\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -231,9 +239,10 @@ impl ast::TypeParamsOwner for EnumDef {}\n impl ast::AttrsOwner for EnumDef {}\n impl ast::DocCommentsOwner for EnumDef {}\n impl EnumDef {\n-    pub fn enum_kw(&self) -> Option<EnumKw> { support::token(&self.syntax) }\n+    pub fn enum_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![enum]) }\n     pub fn variant_list(&self) -> Option<EnumVariantList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumVariantList {\n     pub(crate) syntax: SyntaxNode,\n@@ -250,10 +259,11 @@ impl AstNode for EnumVariantList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl EnumVariantList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn variants(&self) -> AstChildren<EnumVariant> { support::children(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) syntax: SyntaxNode,\n@@ -275,9 +285,10 @@ impl ast::DocCommentsOwner for EnumVariant {}\n impl ast::AttrsOwner for EnumVariant {}\n impl EnumVariant {\n     pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TraitDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -300,11 +311,12 @@ impl ast::DocCommentsOwner for TraitDef {}\n impl ast::TypeParamsOwner for TraitDef {}\n impl ast::TypeBoundsOwner for TraitDef {}\n impl TraitDef {\n-    pub fn unsafe_kw(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn auto_kw(&self) -> Option<AutoKw> { support::token(&self.syntax) }\n-    pub fn trait_kw(&self) -> Option<TraitKw> { support::token(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n+    pub fn trait_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![trait]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n@@ -325,10 +337,11 @@ impl ast::NameOwner for Module {}\n impl ast::AttrsOwner for Module {}\n impl ast::DocCommentsOwner for Module {}\n impl Module {\n-    pub fn mod_kw(&self) -> Option<ModKw> { support::token(&self.syntax) }\n+    pub fn mod_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mod]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ItemList {\n     pub(crate) syntax: SyntaxNode,\n@@ -344,13 +357,13 @@ impl AstNode for ItemList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl ast::FnDefOwner for ItemList {}\n impl ast::ModuleItemOwner for ItemList {}\n impl ItemList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn impl_items(&self) -> AstChildren<ImplItem> { support::children(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -373,12 +386,13 @@ impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n impl ast::TypeAscriptionOwner for ConstDef {}\n impl ConstDef {\n-    pub fn default_kw(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn const_kw(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StaticDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -401,12 +415,13 @@ impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n impl ast::TypeAscriptionOwner for StaticDef {}\n impl StaticDef {\n-    pub fn static_kw(&self) -> Option<StaticKw> { support::token(&self.syntax) }\n-    pub fn mut_kw(&self) -> Option<MutKw> { support::token(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -429,12 +444,13 @@ impl ast::AttrsOwner for TypeAliasDef {}\n impl ast::DocCommentsOwner for TypeAliasDef {}\n impl ast::TypeBoundsOwner for TypeAliasDef {}\n impl TypeAliasDef {\n-    pub fn default_kw(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn type_kw(&self) -> Option<TypeKw> { support::token(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n+    pub fn type_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![type]) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ImplDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -453,14 +469,15 @@ impl AstNode for ImplDef {\n impl ast::TypeParamsOwner for ImplDef {}\n impl ast::AttrsOwner for ImplDef {}\n impl ImplDef {\n-    pub fn default_kw(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn const_kw(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n-    pub fn unsafe_kw(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn impl_kw(&self) -> Option<ImplKw> { support::token(&self.syntax) }\n-    pub fn excl(&self) -> Option<Excl> { support::token(&self.syntax) }\n-    pub fn for_kw(&self) -> Option<ForKw> { support::token(&self.syntax) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn impl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![impl]) }\n+    pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n@@ -477,10 +494,11 @@ impl AstNode for ParenType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ParenType {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleType {\n     pub(crate) syntax: SyntaxNode,\n@@ -497,10 +515,11 @@ impl AstNode for TupleType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TupleType {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn fields(&self) -> AstChildren<TypeRef> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NeverType {\n     pub(crate) syntax: SyntaxNode,\n@@ -517,8 +536,9 @@ impl AstNode for NeverType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl NeverType {\n-    pub fn excl(&self) -> Option<Excl> { support::token(&self.syntax) }\n+    pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathType {\n     pub(crate) syntax: SyntaxNode,\n@@ -537,6 +557,7 @@ impl AstNode for PathType {\n impl PathType {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PointerType {\n     pub(crate) syntax: SyntaxNode,\n@@ -553,10 +574,12 @@ impl AstNode for PointerType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl PointerType {\n-    pub fn star(&self) -> Option<Star> { support::token(&self.syntax) }\n-    pub fn const_kw(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n+    pub fn star_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![*]) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ArrayType {\n     pub(crate) syntax: SyntaxNode,\n@@ -573,12 +596,13 @@ impl AstNode for ArrayType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ArrayType {\n-    pub fn l_brack(&self) -> Option<LBrack> { support::token(&self.syntax) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_brack(&self) -> Option<RBrack> { support::token(&self.syntax) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SliceType {\n     pub(crate) syntax: SyntaxNode,\n@@ -595,10 +619,11 @@ impl AstNode for SliceType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl SliceType {\n-    pub fn l_brack(&self) -> Option<LBrack> { support::token(&self.syntax) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n-    pub fn r_brack(&self) -> Option<RBrack> { support::token(&self.syntax) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ReferenceType {\n     pub(crate) syntax: SyntaxNode,\n@@ -615,11 +640,14 @@ impl AstNode for ReferenceType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ReferenceType {\n-    pub fn amp(&self) -> Option<Amp> { support::token(&self.syntax) }\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n-    pub fn mut_kw(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PlaceholderType {\n     pub(crate) syntax: SyntaxNode,\n@@ -636,8 +664,9 @@ impl AstNode for PlaceholderType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl PlaceholderType {\n-    pub fn underscore(&self) -> Option<Underscore> { support::token(&self.syntax) }\n+    pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FnPointerType {\n     pub(crate) syntax: SyntaxNode,\n@@ -655,11 +684,12 @@ impl AstNode for FnPointerType {\n }\n impl FnPointerType {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n-    pub fn unsafe_kw(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn fn_kw(&self) -> Option<FnKw> { support::token(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn fn_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![fn]) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ForType {\n     pub(crate) syntax: SyntaxNode,\n@@ -676,10 +706,11 @@ impl AstNode for ForType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ForType {\n-    pub fn for_kw(&self) -> Option<ForKw> { support::token(&self.syntax) }\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn type_param_list(&self) -> Option<TypeParamList> { support::child(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ImplTraitType {\n     pub(crate) syntax: SyntaxNode,\n@@ -697,8 +728,9 @@ impl AstNode for ImplTraitType {\n }\n impl ast::TypeBoundsOwner for ImplTraitType {}\n impl ImplTraitType {\n-    pub fn impl_kw(&self) -> Option<ImplKw> { support::token(&self.syntax) }\n+    pub fn impl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![impl]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct DynTraitType {\n     pub(crate) syntax: SyntaxNode,\n@@ -716,8 +748,9 @@ impl AstNode for DynTraitType {\n }\n impl ast::TypeBoundsOwner for DynTraitType {}\n impl DynTraitType {\n-    pub fn dyn_kw(&self) -> Option<DynKw> { support::token(&self.syntax) }\n+    pub fn dyn_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![dyn]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -735,10 +768,11 @@ impl AstNode for TupleExpr {\n }\n impl ast::AttrsOwner for TupleExpr {}\n impl TupleExpr {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ArrayExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -756,11 +790,12 @@ impl AstNode for ArrayExpr {\n }\n impl ast::AttrsOwner for ArrayExpr {}\n impl ArrayExpr {\n-    pub fn l_brack(&self) -> Option<LBrack> { support::token(&self.syntax) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n-    pub fn r_brack(&self) -> Option<RBrack> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -778,10 +813,11 @@ impl AstNode for ParenExpr {\n }\n impl ast::AttrsOwner for ParenExpr {}\n impl ParenExpr {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -800,6 +836,7 @@ impl AstNode for PathExpr {\n impl PathExpr {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LambdaExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -817,13 +854,14 @@ impl AstNode for LambdaExpr {\n }\n impl ast::AttrsOwner for LambdaExpr {}\n impl LambdaExpr {\n-    pub fn static_kw(&self) -> Option<StaticKw> { support::token(&self.syntax) }\n-    pub fn async_kw(&self) -> Option<AsyncKw> { support::token(&self.syntax) }\n-    pub fn move_kw(&self) -> Option<MoveKw> { support::token(&self.syntax) }\n+    pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n+    pub fn move_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![move]) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IfExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -841,9 +879,10 @@ impl AstNode for IfExpr {\n }\n impl ast::AttrsOwner for IfExpr {}\n impl IfExpr {\n-    pub fn if_kw(&self) -> Option<IfKw> { support::token(&self.syntax) }\n+    pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -862,8 +901,9 @@ impl AstNode for LoopExpr {\n impl ast::AttrsOwner for LoopExpr {}\n impl ast::LoopBodyOwner for LoopExpr {}\n impl LoopExpr {\n-    pub fn loop_kw(&self) -> Option<LoopKw> { support::token(&self.syntax) }\n+    pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TryBlockExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -881,9 +921,10 @@ impl AstNode for TryBlockExpr {\n }\n impl ast::AttrsOwner for TryBlockExpr {}\n impl TryBlockExpr {\n-    pub fn try_kw(&self) -> Option<TryKw> { support::token(&self.syntax) }\n+    pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n     pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -902,11 +943,12 @@ impl AstNode for ForExpr {\n impl ast::AttrsOwner for ForExpr {}\n impl ast::LoopBodyOwner for ForExpr {}\n impl ForExpr {\n-    pub fn for_kw(&self) -> Option<ForKw> { support::token(&self.syntax) }\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn in_kw(&self) -> Option<InKw> { support::token(&self.syntax) }\n+    pub fn in_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![in]) }\n     pub fn iterable(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhileExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -925,9 +967,10 @@ impl AstNode for WhileExpr {\n impl ast::AttrsOwner for WhileExpr {}\n impl ast::LoopBodyOwner for WhileExpr {}\n impl WhileExpr {\n-    pub fn while_kw(&self) -> Option<WhileKw> { support::token(&self.syntax) }\n+    pub fn while_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![while]) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -945,9 +988,14 @@ impl AstNode for ContinueExpr {\n }\n impl ast::AttrsOwner for ContinueExpr {}\n impl ContinueExpr {\n-    pub fn continue_kw(&self) -> Option<ContinueKw> { support::token(&self.syntax) }\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n+    pub fn continue_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![continue])\n+    }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BreakExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -965,10 +1013,13 @@ impl AstNode for BreakExpr {\n }\n impl ast::AttrsOwner for BreakExpr {}\n impl BreakExpr {\n-    pub fn break_kw(&self) -> Option<BreakKw> { support::token(&self.syntax) }\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n+    pub fn break_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![break]) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n@@ -985,8 +1036,11 @@ impl AstNode for Label {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Label {\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1005,9 +1059,10 @@ impl AstNode for BlockExpr {\n impl ast::AttrsOwner for BlockExpr {}\n impl BlockExpr {\n     pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n-    pub fn unsafe_kw(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn block(&self) -> Option<Block> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ReturnExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1027,6 +1082,7 @@ impl ast::AttrsOwner for ReturnExpr {}\n impl ReturnExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CallExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1046,6 +1102,7 @@ impl ast::ArgListOwner for CallExpr {}\n impl CallExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MethodCallExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1065,10 +1122,11 @@ impl ast::AttrsOwner for MethodCallExpr {}\n impl ast::ArgListOwner for MethodCallExpr {}\n impl MethodCallExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn dot(&self) -> Option<Dot> { support::token(&self.syntax) }\n+    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IndexExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1086,9 +1144,10 @@ impl AstNode for IndexExpr {\n }\n impl ast::AttrsOwner for IndexExpr {}\n impl IndexExpr {\n-    pub fn l_brack(&self) -> Option<LBrack> { support::token(&self.syntax) }\n-    pub fn r_brack(&self) -> Option<RBrack> { support::token(&self.syntax) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FieldExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1107,9 +1166,10 @@ impl AstNode for FieldExpr {\n impl ast::AttrsOwner for FieldExpr {}\n impl FieldExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn dot(&self) -> Option<Dot> { support::token(&self.syntax) }\n+    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AwaitExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1128,9 +1188,10 @@ impl AstNode for AwaitExpr {\n impl ast::AttrsOwner for AwaitExpr {}\n impl AwaitExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn dot(&self) -> Option<Dot> { support::token(&self.syntax) }\n-    pub fn await_kw(&self) -> Option<AwaitKw> { support::token(&self.syntax) }\n+    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n+    pub fn await_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![await]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TryExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1148,9 +1209,10 @@ impl AstNode for TryExpr {\n }\n impl ast::AttrsOwner for TryExpr {}\n impl TryExpr {\n-    pub fn try_kw(&self) -> Option<TryKw> { support::token(&self.syntax) }\n+    pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CastExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1169,9 +1231,10 @@ impl AstNode for CastExpr {\n impl ast::AttrsOwner for CastExpr {}\n impl CastExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn as_kw(&self) -> Option<AsKw> { support::token(&self.syntax) }\n+    pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RefExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1189,11 +1252,12 @@ impl AstNode for RefExpr {\n }\n impl ast::AttrsOwner for RefExpr {}\n impl RefExpr {\n-    pub fn amp(&self) -> Option<Amp> { support::token(&self.syntax) }\n-    pub fn raw_kw(&self) -> Option<RawKw> { support::token(&self.syntax) }\n-    pub fn mut_kw(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n+    pub fn raw_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![raw]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PrefixExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1211,9 +1275,9 @@ impl AstNode for PrefixExpr {\n }\n impl ast::AttrsOwner for PrefixExpr {}\n impl PrefixExpr {\n-    pub fn prefix_op(&self) -> Option<PrefixOp> { support::token(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BoxExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1231,9 +1295,10 @@ impl AstNode for BoxExpr {\n }\n impl ast::AttrsOwner for BoxExpr {}\n impl BoxExpr {\n-    pub fn box_kw(&self) -> Option<BoxKw> { support::token(&self.syntax) }\n+    pub fn box_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![box]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1250,9 +1315,8 @@ impl AstNode for RangeExpr {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ast::AttrsOwner for RangeExpr {}\n-impl RangeExpr {\n-    pub fn range_op(&self) -> Option<RangeOp> { support::token(&self.syntax) }\n-}\n+impl RangeExpr {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BinExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1269,9 +1333,8 @@ impl AstNode for BinExpr {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ast::AttrsOwner for BinExpr {}\n-impl BinExpr {\n-    pub fn bin_op(&self) -> Option<BinOp> { support::token(&self.syntax) }\n-}\n+impl BinExpr {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n@@ -1287,9 +1350,8 @@ impl AstNode for Literal {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl Literal {\n-    pub fn literal_token(&self) -> Option<LiteralToken> { support::token(&self.syntax) }\n-}\n+impl Literal {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1307,10 +1369,11 @@ impl AstNode for MatchExpr {\n }\n impl ast::AttrsOwner for MatchExpr {}\n impl MatchExpr {\n-    pub fn match_kw(&self) -> Option<MatchKw> { support::token(&self.syntax) }\n+    pub fn match_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![match]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn match_arm_list(&self) -> Option<MatchArmList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchArmList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1328,10 +1391,11 @@ impl AstNode for MatchArmList {\n }\n impl ast::AttrsOwner for MatchArmList {}\n impl MatchArmList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn arms(&self) -> AstChildren<MatchArm> { support::children(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchArm {\n     pub(crate) syntax: SyntaxNode,\n@@ -1351,9 +1415,10 @@ impl ast::AttrsOwner for MatchArm {}\n impl MatchArm {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn guard(&self) -> Option<MatchGuard> { support::child(&self.syntax) }\n-    pub fn fat_arrow(&self) -> Option<FatArrow> { support::token(&self.syntax) }\n+    pub fn fat_arrow_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=>]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchGuard {\n     pub(crate) syntax: SyntaxNode,\n@@ -1370,9 +1435,10 @@ impl AstNode for MatchGuard {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl MatchGuard {\n-    pub fn if_kw(&self) -> Option<IfKw> { support::token(&self.syntax) }\n+    pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordLit {\n     pub(crate) syntax: SyntaxNode,\n@@ -1392,6 +1458,7 @@ impl RecordLit {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1408,12 +1475,13 @@ impl AstNode for RecordFieldList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RecordFieldList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn fields(&self) -> AstChildren<RecordField> { support::children(&self.syntax) }\n-    pub fn dotdot(&self) -> Option<Dotdot> { support::token(&self.syntax) }\n+    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n     pub fn spread(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordField {\n     pub(crate) syntax: SyntaxNode,\n@@ -1432,9 +1500,10 @@ impl AstNode for RecordField {\n impl ast::AttrsOwner for RecordField {}\n impl RecordField {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn colon(&self) -> Option<Colon> { support::token(&self.syntax) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct OrPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1453,6 +1522,7 @@ impl AstNode for OrPat {\n impl OrPat {\n     pub fn pats(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1469,10 +1539,11 @@ impl AstNode for ParenPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ParenPat {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RefPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1489,10 +1560,11 @@ impl AstNode for RefPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RefPat {\n-    pub fn amp(&self) -> Option<Amp> { support::token(&self.syntax) }\n-    pub fn mut_kw(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BoxPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1509,9 +1581,10 @@ impl AstNode for BoxPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl BoxPat {\n-    pub fn box_kw(&self) -> Option<BoxKw> { support::token(&self.syntax) }\n+    pub fn box_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![box]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BindPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1530,10 +1603,12 @@ impl AstNode for BindPat {\n impl ast::AttrsOwner for BindPat {}\n impl ast::NameOwner for BindPat {}\n impl BindPat {\n-    pub fn ref_kw(&self) -> Option<RefKw> { support::token(&self.syntax) }\n-    pub fn mut_kw(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn ref_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ref]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n+    pub fn at_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![@]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PlaceholderPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1550,8 +1625,9 @@ impl AstNode for PlaceholderPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl PlaceholderPat {\n-    pub fn underscore(&self) -> Option<Underscore> { support::token(&self.syntax) }\n+    pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct DotDotPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1568,8 +1644,9 @@ impl AstNode for DotDotPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl DotDotPat {\n-    pub fn dotdot(&self) -> Option<Dotdot> { support::token(&self.syntax) }\n+    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1588,6 +1665,7 @@ impl AstNode for PathPat {\n impl PathPat {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SlicePat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1604,10 +1682,11 @@ impl AstNode for SlicePat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl SlicePat {\n-    pub fn l_brack(&self) -> Option<LBrack> { support::token(&self.syntax) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n-    pub fn r_brack(&self) -> Option<RBrack> { support::token(&self.syntax) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RangePat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1623,9 +1702,8 @@ impl AstNode for RangePat {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl RangePat {\n-    pub fn range_separator(&self) -> Option<RangeSeparator> { support::token(&self.syntax) }\n-}\n+impl RangePat {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LiteralPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1644,6 +1722,7 @@ impl AstNode for LiteralPat {\n impl LiteralPat {\n     pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1662,6 +1741,7 @@ impl AstNode for MacroPat {\n impl MacroPat {\n     pub fn macro_call(&self) -> Option<MacroCall> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1683,6 +1763,7 @@ impl RecordPat {\n     }\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldPatList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1699,15 +1780,16 @@ impl AstNode for RecordFieldPatList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RecordFieldPatList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn pats(&self) -> AstChildren<RecordInnerPat> { support::children(&self.syntax) }\n     pub fn record_field_pats(&self) -> AstChildren<RecordFieldPat> {\n         support::children(&self.syntax)\n     }\n     pub fn bind_pats(&self) -> AstChildren<BindPat> { support::children(&self.syntax) }\n-    pub fn dotdot(&self) -> Option<Dotdot> { support::token(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1726,9 +1808,10 @@ impl AstNode for RecordFieldPat {\n impl ast::AttrsOwner for RecordFieldPat {}\n impl ast::NameOwner for RecordFieldPat {}\n impl RecordFieldPat {\n-    pub fn colon(&self) -> Option<Colon> { support::token(&self.syntax) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleStructPat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1746,10 +1829,11 @@ impl AstNode for TupleStructPat {\n }\n impl TupleStructPat {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TuplePat {\n     pub(crate) syntax: SyntaxNode,\n@@ -1766,10 +1850,11 @@ impl AstNode for TuplePat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TuplePat {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Visibility {\n     pub(crate) syntax: SyntaxNode,\n@@ -1786,11 +1871,12 @@ impl AstNode for Visibility {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Visibility {\n-    pub fn pub_kw(&self) -> Option<PubKw> { support::token(&self.syntax) }\n-    pub fn super_kw(&self) -> Option<SuperKw> { support::token(&self.syntax) }\n-    pub fn self_kw(&self) -> Option<SelfKw> { support::token(&self.syntax) }\n-    pub fn crate_kw(&self) -> Option<CrateKw> { support::token(&self.syntax) }\n+    pub fn pub_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![pub]) }\n+    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Name {\n     pub(crate) syntax: SyntaxNode,\n@@ -1807,8 +1893,9 @@ impl AstNode for Name {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Name {\n-    pub fn ident(&self) -> Option<Ident> { support::token(&self.syntax) }\n+    pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NameRef {\n     pub(crate) syntax: SyntaxNode,\n@@ -1824,9 +1911,8 @@ impl AstNode for NameRef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl NameRef {\n-    pub fn name_ref_token(&self) -> Option<NameRefToken> { support::token(&self.syntax) }\n-}\n+impl NameRef {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n@@ -1847,10 +1933,11 @@ impl ast::AttrsOwner for MacroCall {}\n impl ast::DocCommentsOwner for MacroCall {}\n impl MacroCall {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn excl(&self) -> Option<Excl> { support::token(&self.syntax) }\n+    pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n     pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Attr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1867,14 +1954,15 @@ impl AstNode for Attr {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Attr {\n-    pub fn pound(&self) -> Option<Pound> { support::token(&self.syntax) }\n-    pub fn excl(&self) -> Option<Excl> { support::token(&self.syntax) }\n-    pub fn l_brack(&self) -> Option<LBrack> { support::token(&self.syntax) }\n+    pub fn pound_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![#]) }\n+    pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn input(&self) -> Option<AttrInput> { support::child(&self.syntax) }\n-    pub fn r_brack(&self) -> Option<RBrack> { support::token(&self.syntax) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TokenTree {\n     pub(crate) syntax: SyntaxNode,\n@@ -1891,6 +1979,7 @@ impl AstNode for TokenTree {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TokenTree {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeParamList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1907,13 +1996,14 @@ impl AstNode for TypeParamList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TypeParamList {\n-    pub fn l_angle(&self) -> Option<LAngle> { support::token(&self.syntax) }\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n     pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n     pub fn type_params(&self) -> AstChildren<TypeParam> { support::children(&self.syntax) }\n     pub fn lifetime_params(&self) -> AstChildren<LifetimeParam> { support::children(&self.syntax) }\n     pub fn const_params(&self) -> AstChildren<ConstParam> { support::children(&self.syntax) }\n-    pub fn r_angle(&self) -> Option<RAngle> { support::token(&self.syntax) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeParam {\n     pub(crate) syntax: SyntaxNode,\n@@ -1933,9 +2023,10 @@ impl ast::NameOwner for TypeParam {}\n impl ast::AttrsOwner for TypeParam {}\n impl ast::TypeBoundsOwner for TypeParam {}\n impl TypeParam {\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn default_type(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstParam {\n     pub(crate) syntax: SyntaxNode,\n@@ -1955,9 +2046,10 @@ impl ast::NameOwner for ConstParam {}\n impl ast::AttrsOwner for ConstParam {}\n impl ast::TypeAscriptionOwner for ConstParam {}\n impl ConstParam {\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LifetimeParam {\n     pub(crate) syntax: SyntaxNode,\n@@ -1975,8 +2067,11 @@ impl AstNode for LifetimeParam {\n }\n impl ast::AttrsOwner for LifetimeParam {}\n impl LifetimeParam {\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBound {\n     pub(crate) syntax: SyntaxNode,\n@@ -1993,10 +2088,13 @@ impl AstNode for TypeBound {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TypeBound {\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n-    pub fn const_kw(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2015,6 +2113,7 @@ impl AstNode for TypeBoundList {\n impl TypeBoundList {\n     pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n@@ -2032,9 +2131,12 @@ impl AstNode for WherePred {\n }\n impl ast::TypeBoundsOwner for WherePred {}\n impl WherePred {\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n@@ -2051,9 +2153,10 @@ impl AstNode for WhereClause {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl WhereClause {\n-    pub fn where_kw(&self) -> Option<WhereKw> { support::token(&self.syntax) }\n+    pub fn where_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![where]) }\n     pub fn predicates(&self) -> AstChildren<WherePred> { support::children(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Abi {\n     pub(crate) syntax: SyntaxNode,\n@@ -2069,9 +2172,8 @@ impl AstNode for Abi {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl Abi {\n-    pub fn string(&self) -> Option<String> { support::token(&self.syntax) }\n-}\n+impl Abi {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExprStmt {\n     pub(crate) syntax: SyntaxNode,\n@@ -2090,8 +2192,9 @@ impl AstNode for ExprStmt {\n impl ast::AttrsOwner for ExprStmt {}\n impl ExprStmt {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn semi(&self) -> Option<Semi> { support::token(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LetStmt {\n     pub(crate) syntax: SyntaxNode,\n@@ -2110,11 +2213,13 @@ impl AstNode for LetStmt {\n impl ast::AttrsOwner for LetStmt {}\n impl ast::TypeAscriptionOwner for LetStmt {}\n impl LetStmt {\n-    pub fn let_kw(&self) -> Option<LetKw> { support::token(&self.syntax) }\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Condition {\n     pub(crate) syntax: SyntaxNode,\n@@ -2131,11 +2236,12 @@ impl AstNode for Condition {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Condition {\n-    pub fn let_kw(&self) -> Option<LetKw> { support::token(&self.syntax) }\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Block {\n     pub(crate) syntax: SyntaxNode,\n@@ -2154,11 +2260,12 @@ impl AstNode for Block {\n impl ast::AttrsOwner for Block {}\n impl ast::ModuleItemOwner for Block {}\n impl Block {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParamList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2175,11 +2282,12 @@ impl AstNode for ParamList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ParamList {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn self_param(&self) -> Option<SelfParam> { support::child(&self.syntax) }\n     pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n@@ -2198,10 +2306,14 @@ impl AstNode for SelfParam {\n impl ast::TypeAscriptionOwner for SelfParam {}\n impl ast::AttrsOwner for SelfParam {}\n impl SelfParam {\n-    pub fn amp(&self) -> Option<Amp> { support::token(&self.syntax) }\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n-    pub fn self_kw(&self) -> Option<SelfKw> { support::token(&self.syntax) }\n+    pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Param {\n     pub(crate) syntax: SyntaxNode,\n@@ -2221,8 +2333,9 @@ impl ast::TypeAscriptionOwner for Param {}\n impl ast::AttrsOwner for Param {}\n impl Param {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn dotdotdot(&self) -> Option<Dotdotdot> { support::token(&self.syntax) }\n+    pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseItem {\n     pub(crate) syntax: SyntaxNode,\n@@ -2241,9 +2354,10 @@ impl AstNode for UseItem {\n impl ast::AttrsOwner for UseItem {}\n impl ast::VisibilityOwner for UseItem {}\n impl UseItem {\n-    pub fn use_kw(&self) -> Option<UseKw> { support::token(&self.syntax) }\n+    pub fn use_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![use]) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseTree {\n     pub(crate) syntax: SyntaxNode,\n@@ -2261,10 +2375,11 @@ impl AstNode for UseTree {\n }\n impl UseTree {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn star(&self) -> Option<Star> { support::token(&self.syntax) }\n+    pub fn star_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![*]) }\n     pub fn use_tree_list(&self) -> Option<UseTreeList> { support::child(&self.syntax) }\n     pub fn alias(&self) -> Option<Alias> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Alias {\n     pub(crate) syntax: SyntaxNode,\n@@ -2282,8 +2397,9 @@ impl AstNode for Alias {\n }\n impl ast::NameOwner for Alias {}\n impl Alias {\n-    pub fn as_kw(&self) -> Option<AsKw> { support::token(&self.syntax) }\n+    pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseTreeList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2300,10 +2416,11 @@ impl AstNode for UseTreeList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl UseTreeList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn use_trees(&self) -> AstChildren<UseTree> { support::children(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternCrateItem {\n     pub(crate) syntax: SyntaxNode,\n@@ -2322,11 +2439,12 @@ impl AstNode for ExternCrateItem {\n impl ast::AttrsOwner for ExternCrateItem {}\n impl ast::VisibilityOwner for ExternCrateItem {}\n impl ExternCrateItem {\n-    pub fn extern_kw(&self) -> Option<ExternKw> { support::token(&self.syntax) }\n-    pub fn crate_kw(&self) -> Option<CrateKw> { support::token(&self.syntax) }\n+    pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn alias(&self) -> Option<Alias> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ArgList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2343,10 +2461,11 @@ impl AstNode for ArgList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ArgList {\n-    pub fn l_paren(&self) -> Option<LParen> { support::token(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n     pub fn args(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n-    pub fn r_paren(&self) -> Option<RParen> { support::token(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n     pub(crate) syntax: SyntaxNode,\n@@ -2366,6 +2485,7 @@ impl Path {\n     pub fn segment(&self) -> Option<PathSegment> { support::child(&self.syntax) }\n     pub fn qualifier(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n@@ -2382,15 +2502,16 @@ impl AstNode for PathSegment {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl PathSegment {\n-    pub fn coloncolon(&self) -> Option<Coloncolon> { support::token(&self.syntax) }\n-    pub fn l_angle(&self) -> Option<LAngle> { support::token(&self.syntax) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn path_type(&self) -> Option<PathType> { support::child(&self.syntax) }\n-    pub fn r_angle(&self) -> Option<RAngle> { support::token(&self.syntax) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeArgList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2407,15 +2528,16 @@ impl AstNode for TypeArgList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl TypeArgList {\n-    pub fn coloncolon(&self) -> Option<Coloncolon> { support::token(&self.syntax) }\n-    pub fn l_angle(&self) -> Option<LAngle> { support::token(&self.syntax) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n     pub fn generic_args(&self) -> AstChildren<GenericArg> { support::children(&self.syntax) }\n     pub fn type_args(&self) -> AstChildren<TypeArg> { support::children(&self.syntax) }\n     pub fn lifetime_args(&self) -> AstChildren<LifetimeArg> { support::children(&self.syntax) }\n     pub fn assoc_type_args(&self) -> AstChildren<AssocTypeArg> { support::children(&self.syntax) }\n     pub fn const_args(&self) -> AstChildren<ConstArg> { support::children(&self.syntax) }\n-    pub fn r_angle(&self) -> Option<RAngle> { support::token(&self.syntax) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeArg {\n     pub(crate) syntax: SyntaxNode,\n@@ -2434,6 +2556,7 @@ impl AstNode for TypeArg {\n impl TypeArg {\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AssocTypeArg {\n     pub(crate) syntax: SyntaxNode,\n@@ -2452,9 +2575,10 @@ impl AstNode for AssocTypeArg {\n impl ast::TypeBoundsOwner for AssocTypeArg {}\n impl AssocTypeArg {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LifetimeArg {\n     pub(crate) syntax: SyntaxNode,\n@@ -2471,8 +2595,11 @@ impl AstNode for LifetimeArg {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl LifetimeArg {\n-    pub fn lifetime(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstArg {\n     pub(crate) syntax: SyntaxNode,\n@@ -2490,9 +2617,10 @@ impl AstNode for ConstArg {\n }\n impl ConstArg {\n     pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroItems {\n     pub(crate) syntax: SyntaxNode,\n@@ -2509,8 +2637,8 @@ impl AstNode for MacroItems {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ast::ModuleItemOwner for MacroItems {}\n-impl ast::FnDefOwner for MacroItems {}\n impl MacroItems {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroStmts {\n     pub(crate) syntax: SyntaxNode,\n@@ -2530,6 +2658,7 @@ impl MacroStmts {\n     pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternItemList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2545,13 +2674,13 @@ impl AstNode for ExternItemList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl ast::FnDefOwner for ExternItemList {}\n impl ast::ModuleItemOwner for ExternItemList {}\n impl ExternItemList {\n-    pub fn l_curly(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn extern_items(&self) -> AstChildren<ExternItem> { support::children(&self.syntax) }\n-    pub fn r_curly(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternBlock {\n     pub(crate) syntax: SyntaxNode,\n@@ -2571,6 +2700,7 @@ impl ExternBlock {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n     pub fn extern_item_list(&self) -> Option<ExternItemList> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MetaItem {\n     pub(crate) syntax: SyntaxNode,\n@@ -2588,10 +2718,11 @@ impl AstNode for MetaItem {\n }\n impl MetaItem {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn eq(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn attr_input(&self) -> Option<AttrInput> { support::child(&self.syntax) }\n     pub fn nested_meta_items(&self) -> AstChildren<MetaItem> { support::children(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroDef {\n     pub(crate) syntax: SyntaxNode,\n@@ -2611,6 +2742,7 @@ impl MacroDef {\n     pub fn name(&self) -> Option<Name> { support::child(&self.syntax) }\n     pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum NominalDef {\n     StructDef(StructDef),\n@@ -2653,6 +2785,7 @@ impl AstNode for NominalDef {\n impl ast::NameOwner for NominalDef {}\n impl ast::TypeParamsOwner for NominalDef {}\n impl ast::AttrsOwner for NominalDef {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericParam {\n     LifetimeParam(LifetimeParam),\n@@ -2692,6 +2825,7 @@ impl AstNode for GenericParam {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericArg {\n     LifetimeArg(LifetimeArg),\n@@ -2737,6 +2871,7 @@ impl AstNode for GenericArg {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum TypeRef {\n     ParenType(ParenType),\n@@ -2838,6 +2973,7 @@ impl AstNode for TypeRef {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ModuleItem {\n     StructDef(StructDef),\n@@ -2948,6 +3084,7 @@ impl AstNode for ModuleItem {\n impl ast::NameOwner for ModuleItem {}\n impl ast::AttrsOwner for ModuleItem {}\n impl ast::VisibilityOwner for ModuleItem {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ImplItem {\n     FnDef(FnDef),\n@@ -2989,6 +3126,7 @@ impl AstNode for ImplItem {\n }\n impl ast::NameOwner for ImplItem {}\n impl ast::AttrsOwner for ImplItem {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n     FnDef(FnDef),\n@@ -3025,6 +3163,7 @@ impl AstNode for ExternItem {\n impl ast::NameOwner for ExternItem {}\n impl ast::AttrsOwner for ExternItem {}\n impl ast::VisibilityOwner for ExternItem {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Expr {\n     TupleExpr(TupleExpr),\n@@ -3238,6 +3377,7 @@ impl AstNode for Expr {\n     }\n }\n impl ast::AttrsOwner for Expr {}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Pat {\n     OrPat(OrPat),\n@@ -3351,6 +3491,7 @@ impl AstNode for Pat {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum RecordInnerPat {\n     RecordFieldPat(RecordFieldPat),\n@@ -3384,6 +3525,7 @@ impl AstNode for RecordInnerPat {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AttrInput {\n     Literal(Literal),\n@@ -3417,6 +3559,7 @@ impl AstNode for AttrInput {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     LetStmt(LetStmt),\n@@ -3450,6 +3593,7 @@ impl AstNode for Stmt {\n         }\n     }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum FieldDefList {\n     RecordFieldDefList(RecordFieldDefList),"}, {"sha": "f91befaac78a0bc4833d109333d974ef25be73d8", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 12, "deletions": 2729, "changes": 2741, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -5,2146 +5,7 @@ use crate::{\n     SyntaxKind::{self, *},\n     SyntaxToken,\n };\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Semi {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Semi {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Semi {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SEMI }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Comma {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Comma {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Comma {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == COMMA }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LParen {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LParen {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LParen {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == L_PAREN }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RParen {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RParen {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RParen {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == R_PAREN }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LCurly {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LCurly {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LCurly {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == L_CURLY }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RCurly {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RCurly {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RCurly {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == R_CURLY }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LBrack {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LBrack {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LBrack {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == L_BRACK }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RBrack {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RBrack {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RBrack {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == R_BRACK }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LAngle {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LAngle {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LAngle {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == L_ANGLE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RAngle {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RAngle {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RAngle {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == R_ANGLE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct At {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for At {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for At {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AT }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Pound {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Pound {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Pound {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == POUND }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Tilde {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Tilde {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Tilde {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TILDE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Question {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Question {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Question {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == QUESTION }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Dollar {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Dollar {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Dollar {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DOLLAR }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Amp {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Amp {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Amp {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AMP }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Pipe {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Pipe {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Pipe {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PIPE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Plus {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Plus {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Plus {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PLUS }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Star {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Star {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Star {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STAR }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Slash {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Slash {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Slash {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SLASH }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Caret {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Caret {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Caret {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CARET }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Percent {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Percent {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Percent {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PERCENT }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Underscore {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Underscore {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Underscore {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == UNDERSCORE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Dot {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Dot {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Dot {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DOT }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Dotdot {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Dotdot {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Dotdot {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DOTDOT }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Dotdotdot {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Dotdotdot {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Dotdotdot {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DOTDOTDOT }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Dotdoteq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Dotdoteq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Dotdoteq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DOTDOTEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Colon {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Colon {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Colon {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == COLON }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Coloncolon {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Coloncolon {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Coloncolon {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == COLONCOLON }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Eq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Eq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Eq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Eqeq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Eqeq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Eqeq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EQEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FatArrow {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for FatArrow {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for FatArrow {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FAT_ARROW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Excl {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Excl {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Excl {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXCL }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Neq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Neq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Neq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == NEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Minus {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Minus {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Minus {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MINUS }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ThinArrow {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ThinArrow {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ThinArrow {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == THIN_ARROW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Lteq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Lteq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Lteq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LTEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Gteq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Gteq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Gteq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == GTEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Pluseq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Pluseq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Pluseq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PLUSEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Minuseq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Minuseq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Minuseq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MINUSEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Pipeeq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Pipeeq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Pipeeq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PIPEEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Ampeq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Ampeq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Ampeq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AMPEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Careteq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Careteq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Careteq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CARETEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Slasheq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Slasheq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Slasheq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SLASHEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Stareq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Stareq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Stareq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STAREQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Percenteq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Percenteq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Percenteq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PERCENTEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Ampamp {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Ampamp {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Ampamp {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AMPAMP }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Pipepipe {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Pipepipe {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Pipepipe {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PIPEPIPE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Shl {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Shl {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Shl {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SHL }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Shr {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Shr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Shr {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SHR }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Shleq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Shleq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Shleq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SHLEQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Shreq {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Shreq {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Shreq {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SHREQ }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AsKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AsKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AsKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AS_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AsyncKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AsyncKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AsyncKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ASYNC_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AwaitKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AwaitKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AwaitKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AWAIT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct BoxKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for BoxKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for BoxKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct BreakKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for BreakKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for BreakKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BREAK_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ConstKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ConstKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ContinueKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ContinueKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ContinueKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONTINUE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct CrateKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for CrateKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for CrateKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CRATE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for DynKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for DynKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DYN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ElseKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ElseKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ElseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ELSE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for EnumKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for EnumKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExternKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ExternKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ExternKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FalseKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for FalseKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for FalseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FALSE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FnKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for FnKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for FnKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ForKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ForKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ForKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct IfKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for IfKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for IfKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IF_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ImplKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ImplKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ImplKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct InKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for InKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for InKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LetKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LetKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LetKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LoopKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LoopKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LoopKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MacroKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MacroKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MacroKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MatchKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MatchKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MatchKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ModKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ModKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ModKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MOD_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MoveKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MoveKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MoveKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MOVE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MutKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MutKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MutKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MUT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PubKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for PubKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for PubKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PUB_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RefKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RefKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RefKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == REF_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ReturnKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ReturnKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ReturnKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SelfKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for SelfKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for SelfKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StaticKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for StaticKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for StaticKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for StructKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for StructKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SuperKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for SuperKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for SuperKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SUPER_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TraitKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TraitKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TraitKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TrueKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TrueKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TrueKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRUE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TryKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TryKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TypeKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TypeKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnsafeKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for UnsafeKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for UnsafeKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == UNSAFE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UseKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for UseKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for UseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct WhereKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for WhereKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for WhereKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct WhileKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for WhileKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for WhileKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == WHILE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AutoKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AutoKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AutoKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AUTO_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DefaultKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for DefaultKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for DefaultKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DEFAULT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExistentialKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ExistentialKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ExistentialKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXISTENTIAL_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnionKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for UnionKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for UnionKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == UNION_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RawKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RawKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RawKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct IntNumber {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for IntNumber {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for IntNumber {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == INT_NUMBER }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FloatNumber {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for FloatNumber {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for FloatNumber {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_NUMBER }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Char {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Char {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Char {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CHAR }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Byte {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Byte {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Byte {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BYTE }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct String {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for String {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for String {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STRING }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RawString {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RawString {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RawString {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_STRING }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ByteString {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ByteString {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ByteString {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BYTE_STRING }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RawByteString {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RawByteString {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RawByteString {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_BYTE_STRING }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Error {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Error {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Error {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ERROR }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Ident {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Ident {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Ident {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IDENT }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Whitespace {\n     pub(crate) syntax: SyntaxToken,\n@@ -2165,26 +26,7 @@ impl AstToken for Whitespace {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Lifetime {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Lifetime {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Lifetime {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Comment {\n     pub(crate) syntax: SyntaxToken,\n@@ -2205,37 +47,18 @@ impl AstToken for Comment {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Shebang {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for Shebang {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for Shebang {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SHEBANG }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LDollar {\n+pub struct String {\n     pub(crate) syntax: SyntaxToken,\n }\n-impl std::fmt::Display for LDollar {\n+impl std::fmt::Display for String {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for LDollar {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == L_DOLLAR }\n+impl AstToken for String {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2245,17 +68,18 @@ impl AstToken for LDollar {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RDollar {\n+pub struct RawString {\n     pub(crate) syntax: SyntaxToken,\n }\n-impl std::fmt::Display for RDollar {\n+impl std::fmt::Display for RawString {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for RDollar {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == R_DOLLAR }\n+impl AstToken for RawString {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2265,544 +89,3 @@ impl AstToken for RDollar {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum LeftDelimiter {\n-    LParen(LParen),\n-    LBrack(LBrack),\n-    LCurly(LCurly),\n-}\n-impl From<LParen> for LeftDelimiter {\n-    fn from(node: LParen) -> LeftDelimiter { LeftDelimiter::LParen(node) }\n-}\n-impl From<LBrack> for LeftDelimiter {\n-    fn from(node: LBrack) -> LeftDelimiter { LeftDelimiter::LBrack(node) }\n-}\n-impl From<LCurly> for LeftDelimiter {\n-    fn from(node: LCurly) -> LeftDelimiter { LeftDelimiter::LCurly(node) }\n-}\n-impl std::fmt::Display for LeftDelimiter {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for LeftDelimiter {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_PAREN | L_BRACK | L_CURLY => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            L_PAREN => LeftDelimiter::LParen(LParen { syntax }),\n-            L_BRACK => LeftDelimiter::LBrack(LBrack { syntax }),\n-            L_CURLY => LeftDelimiter::LCurly(LCurly { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            LeftDelimiter::LParen(it) => &it.syntax,\n-            LeftDelimiter::LBrack(it) => &it.syntax,\n-            LeftDelimiter::LCurly(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum RightDelimiter {\n-    RParen(RParen),\n-    RBrack(RBrack),\n-    RCurly(RCurly),\n-}\n-impl From<RParen> for RightDelimiter {\n-    fn from(node: RParen) -> RightDelimiter { RightDelimiter::RParen(node) }\n-}\n-impl From<RBrack> for RightDelimiter {\n-    fn from(node: RBrack) -> RightDelimiter { RightDelimiter::RBrack(node) }\n-}\n-impl From<RCurly> for RightDelimiter {\n-    fn from(node: RCurly) -> RightDelimiter { RightDelimiter::RCurly(node) }\n-}\n-impl std::fmt::Display for RightDelimiter {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for RightDelimiter {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_PAREN | R_BRACK | R_CURLY => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            R_PAREN => RightDelimiter::RParen(RParen { syntax }),\n-            R_BRACK => RightDelimiter::RBrack(RBrack { syntax }),\n-            R_CURLY => RightDelimiter::RCurly(RCurly { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            RightDelimiter::RParen(it) => &it.syntax,\n-            RightDelimiter::RBrack(it) => &it.syntax,\n-            RightDelimiter::RCurly(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum RangeSeparator {\n-    Dotdot(Dotdot),\n-    Dotdotdot(Dotdotdot),\n-    Dotdoteq(Dotdoteq),\n-}\n-impl From<Dotdot> for RangeSeparator {\n-    fn from(node: Dotdot) -> RangeSeparator { RangeSeparator::Dotdot(node) }\n-}\n-impl From<Dotdotdot> for RangeSeparator {\n-    fn from(node: Dotdotdot) -> RangeSeparator { RangeSeparator::Dotdotdot(node) }\n-}\n-impl From<Dotdoteq> for RangeSeparator {\n-    fn from(node: Dotdoteq) -> RangeSeparator { RangeSeparator::Dotdoteq(node) }\n-}\n-impl std::fmt::Display for RangeSeparator {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for RangeSeparator {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOTDOT | DOTDOTDOT | DOTDOTEQ => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            DOTDOT => RangeSeparator::Dotdot(Dotdot { syntax }),\n-            DOTDOTDOT => RangeSeparator::Dotdotdot(Dotdotdot { syntax }),\n-            DOTDOTEQ => RangeSeparator::Dotdoteq(Dotdoteq { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            RangeSeparator::Dotdot(it) => &it.syntax,\n-            RangeSeparator::Dotdotdot(it) => &it.syntax,\n-            RangeSeparator::Dotdoteq(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum BinOp {\n-    Pipepipe(Pipepipe),\n-    Ampamp(Ampamp),\n-    Eqeq(Eqeq),\n-    Neq(Neq),\n-    Lteq(Lteq),\n-    Gteq(Gteq),\n-    LAngle(LAngle),\n-    RAngle(RAngle),\n-    Plus(Plus),\n-    Star(Star),\n-    Minus(Minus),\n-    Slash(Slash),\n-    Percent(Percent),\n-    Shl(Shl),\n-    Shr(Shr),\n-    Caret(Caret),\n-    Pipe(Pipe),\n-    Amp(Amp),\n-    Eq(Eq),\n-    Pluseq(Pluseq),\n-    Slasheq(Slasheq),\n-    Stareq(Stareq),\n-    Percenteq(Percenteq),\n-    Shreq(Shreq),\n-    Shleq(Shleq),\n-    Minuseq(Minuseq),\n-    Pipeeq(Pipeeq),\n-    Ampeq(Ampeq),\n-    Careteq(Careteq),\n-}\n-impl From<Pipepipe> for BinOp {\n-    fn from(node: Pipepipe) -> BinOp { BinOp::Pipepipe(node) }\n-}\n-impl From<Ampamp> for BinOp {\n-    fn from(node: Ampamp) -> BinOp { BinOp::Ampamp(node) }\n-}\n-impl From<Eqeq> for BinOp {\n-    fn from(node: Eqeq) -> BinOp { BinOp::Eqeq(node) }\n-}\n-impl From<Neq> for BinOp {\n-    fn from(node: Neq) -> BinOp { BinOp::Neq(node) }\n-}\n-impl From<Lteq> for BinOp {\n-    fn from(node: Lteq) -> BinOp { BinOp::Lteq(node) }\n-}\n-impl From<Gteq> for BinOp {\n-    fn from(node: Gteq) -> BinOp { BinOp::Gteq(node) }\n-}\n-impl From<LAngle> for BinOp {\n-    fn from(node: LAngle) -> BinOp { BinOp::LAngle(node) }\n-}\n-impl From<RAngle> for BinOp {\n-    fn from(node: RAngle) -> BinOp { BinOp::RAngle(node) }\n-}\n-impl From<Plus> for BinOp {\n-    fn from(node: Plus) -> BinOp { BinOp::Plus(node) }\n-}\n-impl From<Star> for BinOp {\n-    fn from(node: Star) -> BinOp { BinOp::Star(node) }\n-}\n-impl From<Minus> for BinOp {\n-    fn from(node: Minus) -> BinOp { BinOp::Minus(node) }\n-}\n-impl From<Slash> for BinOp {\n-    fn from(node: Slash) -> BinOp { BinOp::Slash(node) }\n-}\n-impl From<Percent> for BinOp {\n-    fn from(node: Percent) -> BinOp { BinOp::Percent(node) }\n-}\n-impl From<Shl> for BinOp {\n-    fn from(node: Shl) -> BinOp { BinOp::Shl(node) }\n-}\n-impl From<Shr> for BinOp {\n-    fn from(node: Shr) -> BinOp { BinOp::Shr(node) }\n-}\n-impl From<Caret> for BinOp {\n-    fn from(node: Caret) -> BinOp { BinOp::Caret(node) }\n-}\n-impl From<Pipe> for BinOp {\n-    fn from(node: Pipe) -> BinOp { BinOp::Pipe(node) }\n-}\n-impl From<Amp> for BinOp {\n-    fn from(node: Amp) -> BinOp { BinOp::Amp(node) }\n-}\n-impl From<Eq> for BinOp {\n-    fn from(node: Eq) -> BinOp { BinOp::Eq(node) }\n-}\n-impl From<Pluseq> for BinOp {\n-    fn from(node: Pluseq) -> BinOp { BinOp::Pluseq(node) }\n-}\n-impl From<Slasheq> for BinOp {\n-    fn from(node: Slasheq) -> BinOp { BinOp::Slasheq(node) }\n-}\n-impl From<Stareq> for BinOp {\n-    fn from(node: Stareq) -> BinOp { BinOp::Stareq(node) }\n-}\n-impl From<Percenteq> for BinOp {\n-    fn from(node: Percenteq) -> BinOp { BinOp::Percenteq(node) }\n-}\n-impl From<Shreq> for BinOp {\n-    fn from(node: Shreq) -> BinOp { BinOp::Shreq(node) }\n-}\n-impl From<Shleq> for BinOp {\n-    fn from(node: Shleq) -> BinOp { BinOp::Shleq(node) }\n-}\n-impl From<Minuseq> for BinOp {\n-    fn from(node: Minuseq) -> BinOp { BinOp::Minuseq(node) }\n-}\n-impl From<Pipeeq> for BinOp {\n-    fn from(node: Pipeeq) -> BinOp { BinOp::Pipeeq(node) }\n-}\n-impl From<Ampeq> for BinOp {\n-    fn from(node: Ampeq) -> BinOp { BinOp::Ampeq(node) }\n-}\n-impl From<Careteq> for BinOp {\n-    fn from(node: Careteq) -> BinOp { BinOp::Careteq(node) }\n-}\n-impl std::fmt::Display for BinOp {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for BinOp {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PIPEPIPE | AMPAMP | EQEQ | NEQ | LTEQ | GTEQ | L_ANGLE | R_ANGLE | PLUS | STAR\n-            | MINUS | SLASH | PERCENT | SHL | SHR | CARET | PIPE | AMP | EQ | PLUSEQ | SLASHEQ\n-            | STAREQ | PERCENTEQ | SHREQ | SHLEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            PIPEPIPE => BinOp::Pipepipe(Pipepipe { syntax }),\n-            AMPAMP => BinOp::Ampamp(Ampamp { syntax }),\n-            EQEQ => BinOp::Eqeq(Eqeq { syntax }),\n-            NEQ => BinOp::Neq(Neq { syntax }),\n-            LTEQ => BinOp::Lteq(Lteq { syntax }),\n-            GTEQ => BinOp::Gteq(Gteq { syntax }),\n-            L_ANGLE => BinOp::LAngle(LAngle { syntax }),\n-            R_ANGLE => BinOp::RAngle(RAngle { syntax }),\n-            PLUS => BinOp::Plus(Plus { syntax }),\n-            STAR => BinOp::Star(Star { syntax }),\n-            MINUS => BinOp::Minus(Minus { syntax }),\n-            SLASH => BinOp::Slash(Slash { syntax }),\n-            PERCENT => BinOp::Percent(Percent { syntax }),\n-            SHL => BinOp::Shl(Shl { syntax }),\n-            SHR => BinOp::Shr(Shr { syntax }),\n-            CARET => BinOp::Caret(Caret { syntax }),\n-            PIPE => BinOp::Pipe(Pipe { syntax }),\n-            AMP => BinOp::Amp(Amp { syntax }),\n-            EQ => BinOp::Eq(Eq { syntax }),\n-            PLUSEQ => BinOp::Pluseq(Pluseq { syntax }),\n-            SLASHEQ => BinOp::Slasheq(Slasheq { syntax }),\n-            STAREQ => BinOp::Stareq(Stareq { syntax }),\n-            PERCENTEQ => BinOp::Percenteq(Percenteq { syntax }),\n-            SHREQ => BinOp::Shreq(Shreq { syntax }),\n-            SHLEQ => BinOp::Shleq(Shleq { syntax }),\n-            MINUSEQ => BinOp::Minuseq(Minuseq { syntax }),\n-            PIPEEQ => BinOp::Pipeeq(Pipeeq { syntax }),\n-            AMPEQ => BinOp::Ampeq(Ampeq { syntax }),\n-            CARETEQ => BinOp::Careteq(Careteq { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            BinOp::Pipepipe(it) => &it.syntax,\n-            BinOp::Ampamp(it) => &it.syntax,\n-            BinOp::Eqeq(it) => &it.syntax,\n-            BinOp::Neq(it) => &it.syntax,\n-            BinOp::Lteq(it) => &it.syntax,\n-            BinOp::Gteq(it) => &it.syntax,\n-            BinOp::LAngle(it) => &it.syntax,\n-            BinOp::RAngle(it) => &it.syntax,\n-            BinOp::Plus(it) => &it.syntax,\n-            BinOp::Star(it) => &it.syntax,\n-            BinOp::Minus(it) => &it.syntax,\n-            BinOp::Slash(it) => &it.syntax,\n-            BinOp::Percent(it) => &it.syntax,\n-            BinOp::Shl(it) => &it.syntax,\n-            BinOp::Shr(it) => &it.syntax,\n-            BinOp::Caret(it) => &it.syntax,\n-            BinOp::Pipe(it) => &it.syntax,\n-            BinOp::Amp(it) => &it.syntax,\n-            BinOp::Eq(it) => &it.syntax,\n-            BinOp::Pluseq(it) => &it.syntax,\n-            BinOp::Slasheq(it) => &it.syntax,\n-            BinOp::Stareq(it) => &it.syntax,\n-            BinOp::Percenteq(it) => &it.syntax,\n-            BinOp::Shreq(it) => &it.syntax,\n-            BinOp::Shleq(it) => &it.syntax,\n-            BinOp::Minuseq(it) => &it.syntax,\n-            BinOp::Pipeeq(it) => &it.syntax,\n-            BinOp::Ampeq(it) => &it.syntax,\n-            BinOp::Careteq(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum PrefixOp {\n-    Minus(Minus),\n-    Excl(Excl),\n-    Star(Star),\n-}\n-impl From<Minus> for PrefixOp {\n-    fn from(node: Minus) -> PrefixOp { PrefixOp::Minus(node) }\n-}\n-impl From<Excl> for PrefixOp {\n-    fn from(node: Excl) -> PrefixOp { PrefixOp::Excl(node) }\n-}\n-impl From<Star> for PrefixOp {\n-    fn from(node: Star) -> PrefixOp { PrefixOp::Star(node) }\n-}\n-impl std::fmt::Display for PrefixOp {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for PrefixOp {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            MINUS | EXCL | STAR => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            MINUS => PrefixOp::Minus(Minus { syntax }),\n-            EXCL => PrefixOp::Excl(Excl { syntax }),\n-            STAR => PrefixOp::Star(Star { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            PrefixOp::Minus(it) => &it.syntax,\n-            PrefixOp::Excl(it) => &it.syntax,\n-            PrefixOp::Star(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum RangeOp {\n-    Dotdot(Dotdot),\n-    Dotdoteq(Dotdoteq),\n-}\n-impl From<Dotdot> for RangeOp {\n-    fn from(node: Dotdot) -> RangeOp { RangeOp::Dotdot(node) }\n-}\n-impl From<Dotdoteq> for RangeOp {\n-    fn from(node: Dotdoteq) -> RangeOp { RangeOp::Dotdoteq(node) }\n-}\n-impl std::fmt::Display for RangeOp {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for RangeOp {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            DOTDOT | DOTDOTEQ => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            DOTDOT => RangeOp::Dotdot(Dotdot { syntax }),\n-            DOTDOTEQ => RangeOp::Dotdoteq(Dotdoteq { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            RangeOp::Dotdot(it) => &it.syntax,\n-            RangeOp::Dotdoteq(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum LiteralToken {\n-    IntNumber(IntNumber),\n-    FloatNumber(FloatNumber),\n-    String(String),\n-    RawString(RawString),\n-    TrueKw(TrueKw),\n-    FalseKw(FalseKw),\n-    ByteString(ByteString),\n-    RawByteString(RawByteString),\n-    Char(Char),\n-    Byte(Byte),\n-}\n-impl From<IntNumber> for LiteralToken {\n-    fn from(node: IntNumber) -> LiteralToken { LiteralToken::IntNumber(node) }\n-}\n-impl From<FloatNumber> for LiteralToken {\n-    fn from(node: FloatNumber) -> LiteralToken { LiteralToken::FloatNumber(node) }\n-}\n-impl From<String> for LiteralToken {\n-    fn from(node: String) -> LiteralToken { LiteralToken::String(node) }\n-}\n-impl From<RawString> for LiteralToken {\n-    fn from(node: RawString) -> LiteralToken { LiteralToken::RawString(node) }\n-}\n-impl From<TrueKw> for LiteralToken {\n-    fn from(node: TrueKw) -> LiteralToken { LiteralToken::TrueKw(node) }\n-}\n-impl From<FalseKw> for LiteralToken {\n-    fn from(node: FalseKw) -> LiteralToken { LiteralToken::FalseKw(node) }\n-}\n-impl From<ByteString> for LiteralToken {\n-    fn from(node: ByteString) -> LiteralToken { LiteralToken::ByteString(node) }\n-}\n-impl From<RawByteString> for LiteralToken {\n-    fn from(node: RawByteString) -> LiteralToken { LiteralToken::RawByteString(node) }\n-}\n-impl From<Char> for LiteralToken {\n-    fn from(node: Char) -> LiteralToken { LiteralToken::Char(node) }\n-}\n-impl From<Byte> for LiteralToken {\n-    fn from(node: Byte) -> LiteralToken { LiteralToken::Byte(node) }\n-}\n-impl std::fmt::Display for LiteralToken {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for LiteralToken {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            INT_NUMBER | FLOAT_NUMBER | STRING | RAW_STRING | TRUE_KW | FALSE_KW | BYTE_STRING\n-            | RAW_BYTE_STRING | CHAR | BYTE => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            INT_NUMBER => LiteralToken::IntNumber(IntNumber { syntax }),\n-            FLOAT_NUMBER => LiteralToken::FloatNumber(FloatNumber { syntax }),\n-            STRING => LiteralToken::String(String { syntax }),\n-            RAW_STRING => LiteralToken::RawString(RawString { syntax }),\n-            TRUE_KW => LiteralToken::TrueKw(TrueKw { syntax }),\n-            FALSE_KW => LiteralToken::FalseKw(FalseKw { syntax }),\n-            BYTE_STRING => LiteralToken::ByteString(ByteString { syntax }),\n-            RAW_BYTE_STRING => LiteralToken::RawByteString(RawByteString { syntax }),\n-            CHAR => LiteralToken::Char(Char { syntax }),\n-            BYTE => LiteralToken::Byte(Byte { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            LiteralToken::IntNumber(it) => &it.syntax,\n-            LiteralToken::FloatNumber(it) => &it.syntax,\n-            LiteralToken::String(it) => &it.syntax,\n-            LiteralToken::RawString(it) => &it.syntax,\n-            LiteralToken::TrueKw(it) => &it.syntax,\n-            LiteralToken::FalseKw(it) => &it.syntax,\n-            LiteralToken::ByteString(it) => &it.syntax,\n-            LiteralToken::RawByteString(it) => &it.syntax,\n-            LiteralToken::Char(it) => &it.syntax,\n-            LiteralToken::Byte(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum NameRefToken {\n-    Ident(Ident),\n-    IntNumber(IntNumber),\n-}\n-impl From<Ident> for NameRefToken {\n-    fn from(node: Ident) -> NameRefToken { NameRefToken::Ident(node) }\n-}\n-impl From<IntNumber> for NameRefToken {\n-    fn from(node: IntNumber) -> NameRefToken { NameRefToken::IntNumber(node) }\n-}\n-impl std::fmt::Display for NameRefToken {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for NameRefToken {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            IDENT | INT_NUMBER => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            IDENT => NameRefToken::Ident(Ident { syntax }),\n-            INT_NUMBER => NameRefToken::IntNumber(IntNumber { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            NameRefToken::Ident(it) => &it.syntax,\n-            NameRefToken::IntNumber(it) => &it.syntax,\n-        }\n-    }\n-}"}, {"sha": "0f4a50be4764ce219453fcbccb21725bffddf4fa", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -100,6 +100,9 @@ pub fn expr_empty_block() -> ast::Expr {\n pub fn expr_unimplemented() -> ast::Expr {\n     expr_from_text(\"unimplemented!()\")\n }\n+pub fn expr_todo() -> ast::Expr {\n+    expr_from_text(\"todo!()\")\n+}\n pub fn expr_path(path: ast::Path) -> ast::Expr {\n     expr_from_text(&path.to_string())\n }"}, {"sha": "bfc05e08bf2438f37e08573c9de7767099f4108a", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,83 +1,77 @@\n //! Various traits that are implemented by ast nodes.\n //!\n //! The implementations are usually trivial, and live in generated.rs\n-\n-use itertools::Itertools;\n+use stdx::SepBy;\n \n use crate::{\n-    ast::{self, child_opt, children, support, AstChildren, AstNode, AstToken},\n+    ast::{self, support, AstChildren, AstNode, AstToken},\n     syntax_node::SyntaxElementChildren,\n+    SyntaxToken, T,\n };\n \n pub trait TypeAscriptionOwner: AstNode {\n     fn ascribed_type(&self) -> Option<ast::TypeRef> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait NameOwner: AstNode {\n     fn name(&self) -> Option<ast::Name> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait VisibilityOwner: AstNode {\n     fn visibility(&self) -> Option<ast::Visibility> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait LoopBodyOwner: AstNode {\n     fn loop_body(&self) -> Option<ast::BlockExpr> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n \n     fn label(&self) -> Option<ast::Label> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait ArgListOwner: AstNode {\n     fn arg_list(&self) -> Option<ast::ArgList> {\n-        child_opt(self)\n-    }\n-}\n-\n-pub trait FnDefOwner: AstNode {\n-    fn functions(&self) -> AstChildren<ast::FnDef> {\n-        children(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait ModuleItemOwner: AstNode {\n     fn items(&self) -> AstChildren<ast::ModuleItem> {\n-        children(self)\n+        support::children(self.syntax())\n     }\n }\n \n pub trait TypeParamsOwner: AstNode {\n     fn type_param_list(&self) -> Option<ast::TypeParamList> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n \n     fn where_clause(&self) -> Option<ast::WhereClause> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n }\n \n pub trait TypeBoundsOwner: AstNode {\n     fn type_bound_list(&self) -> Option<ast::TypeBoundList> {\n-        child_opt(self)\n+        support::child(self.syntax())\n     }\n \n-    fn colon(&self) -> Option<ast::Colon> {\n-        support::token(self.syntax())\n+    fn colon_token(&self) -> Option<SyntaxToken> {\n+        support::token(self.syntax(), T![:])\n     }\n }\n \n pub trait AttrsOwner: AstNode {\n     fn attrs(&self) -> AstChildren<ast::Attr> {\n-        children(self)\n+        support::children(self.syntax())\n     }\n     fn has_atom_attr(&self, atom: &str) -> bool {\n         self.attrs().filter_map(|x| x.as_simple_atom()).any(|x| x == atom)\n@@ -122,7 +116,8 @@ pub trait DocCommentsOwner: AstNode {\n                 // of a line in markdown.\n                 line[pos..end].to_owned()\n             })\n-            .join(\"\\n\");\n+            .sep_by(\"\\n\")\n+            .to_string();\n \n         if has_comments {\n             Some(docs)"}, {"sha": "a796e78b1251cebbc2136400be2804471e494dd2", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -19,6 +19,11 @@\n //! [RFC]: <https://github.com/rust-lang/rfcs/pull/2256>\n //! [Swift]: <https://github.com/apple/swift/blob/13d593df6f359d0cb2fc81cfaac273297c539455/lib/Syntax/README.md>\n \n+#[allow(unused)]\n+macro_rules! eprintln {\n+    ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n+}\n+\n mod syntax_node;\n mod syntax_error;\n mod parsing;"}, {"sha": "67c1f1b48db5ec831de5b592bcb09b52514d4ac6", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,7 +4,7 @@\n use crate::{\n     SyntaxError,\n     SyntaxKind::{self, *},\n-    TextRange, TextUnit,\n+    TextRange, TextUnit, T,\n };\n \n /// A token of Rust source.\n@@ -115,64 +115,63 @@ fn rustc_token_kind_to_syntax_kind(\n     // being `u16` that come from `rowan::SyntaxKind`.\n \n     let syntax_kind = {\n-        use rustc_lexer::TokenKind as TK;\n         match rustc_token_kind {\n-            TK::LineComment => COMMENT,\n+            rustc_lexer::TokenKind::LineComment => COMMENT,\n \n-            TK::BlockComment { terminated: true } => COMMENT,\n-            TK::BlockComment { terminated: false } => {\n+            rustc_lexer::TokenKind::BlockComment { terminated: true } => COMMENT,\n+            rustc_lexer::TokenKind::BlockComment { terminated: false } => {\n                 return (\n                     COMMENT,\n                     Some(\"Missing trailing `*/` symbols to terminate the block comment\"),\n                 );\n             }\n \n-            TK::Whitespace => WHITESPACE,\n+            rustc_lexer::TokenKind::Whitespace => WHITESPACE,\n \n-            TK::Ident => {\n+            rustc_lexer::TokenKind::Ident => {\n                 if token_text == \"_\" {\n                     UNDERSCORE\n                 } else {\n                     SyntaxKind::from_keyword(token_text).unwrap_or(IDENT)\n                 }\n             }\n \n-            TK::RawIdent => IDENT,\n-            TK::Literal { kind, .. } => return match_literal_kind(&kind),\n+            rustc_lexer::TokenKind::RawIdent => IDENT,\n+            rustc_lexer::TokenKind::Literal { kind, .. } => return match_literal_kind(&kind),\n \n-            TK::Lifetime { starts_with_number: false } => LIFETIME,\n-            TK::Lifetime { starts_with_number: true } => {\n+            rustc_lexer::TokenKind::Lifetime { starts_with_number: false } => LIFETIME,\n+            rustc_lexer::TokenKind::Lifetime { starts_with_number: true } => {\n                 return (LIFETIME, Some(\"Lifetime name cannot start with a number\"))\n             }\n \n-            TK::Semi => SEMI,\n-            TK::Comma => COMMA,\n-            TK::Dot => DOT,\n-            TK::OpenParen => L_PAREN,\n-            TK::CloseParen => R_PAREN,\n-            TK::OpenBrace => L_CURLY,\n-            TK::CloseBrace => R_CURLY,\n-            TK::OpenBracket => L_BRACK,\n-            TK::CloseBracket => R_BRACK,\n-            TK::At => AT,\n-            TK::Pound => POUND,\n-            TK::Tilde => TILDE,\n-            TK::Question => QUESTION,\n-            TK::Colon => COLON,\n-            TK::Dollar => DOLLAR,\n-            TK::Eq => EQ,\n-            TK::Not => EXCL,\n-            TK::Lt => L_ANGLE,\n-            TK::Gt => R_ANGLE,\n-            TK::Minus => MINUS,\n-            TK::And => AMP,\n-            TK::Or => PIPE,\n-            TK::Plus => PLUS,\n-            TK::Star => STAR,\n-            TK::Slash => SLASH,\n-            TK::Caret => CARET,\n-            TK::Percent => PERCENT,\n-            TK::Unknown => ERROR,\n+            rustc_lexer::TokenKind::Semi => T![;],\n+            rustc_lexer::TokenKind::Comma => T![,],\n+            rustc_lexer::TokenKind::Dot => T![.],\n+            rustc_lexer::TokenKind::OpenParen => T!['('],\n+            rustc_lexer::TokenKind::CloseParen => T![')'],\n+            rustc_lexer::TokenKind::OpenBrace => T!['{'],\n+            rustc_lexer::TokenKind::CloseBrace => T!['}'],\n+            rustc_lexer::TokenKind::OpenBracket => T!['['],\n+            rustc_lexer::TokenKind::CloseBracket => T![']'],\n+            rustc_lexer::TokenKind::At => T![@],\n+            rustc_lexer::TokenKind::Pound => T![#],\n+            rustc_lexer::TokenKind::Tilde => T![~],\n+            rustc_lexer::TokenKind::Question => T![?],\n+            rustc_lexer::TokenKind::Colon => T![:],\n+            rustc_lexer::TokenKind::Dollar => T![$],\n+            rustc_lexer::TokenKind::Eq => T![=],\n+            rustc_lexer::TokenKind::Not => T![!],\n+            rustc_lexer::TokenKind::Lt => T![<],\n+            rustc_lexer::TokenKind::Gt => T![>],\n+            rustc_lexer::TokenKind::Minus => T![-],\n+            rustc_lexer::TokenKind::And => T![&],\n+            rustc_lexer::TokenKind::Or => T![|],\n+            rustc_lexer::TokenKind::Plus => T![+],\n+            rustc_lexer::TokenKind::Star => T![*],\n+            rustc_lexer::TokenKind::Slash => T![/],\n+            rustc_lexer::TokenKind::Caret => T![^],\n+            rustc_lexer::TokenKind::Percent => T![%],\n+            rustc_lexer::TokenKind::Unknown => ERROR,\n         }\n     };\n "}, {"sha": "bc48a2e71434b220c96417b58d12d306b0e6ac12", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -10,7 +10,7 @@ use crate::{AstNode, SyntaxKind, SyntaxNode, TextRange};\n \n /// A pointer to a syntax node inside a file. It can be used to remember a\n /// specific node across reparses of the same file.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SyntaxNodePtr {\n     pub(crate) range: TextRange,\n     kind: SyntaxKind,\n@@ -21,7 +21,7 @@ impl SyntaxNodePtr {\n         SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n     }\n \n-    pub fn to_node(self, root: &SyntaxNode) -> SyntaxNode {\n+    pub fn to_node(&self, root: &SyntaxNode) -> SyntaxNode {\n         assert!(root.parent().is_none());\n         successors(Some(root.clone()), |node| {\n             node.children().find(|it| self.range.is_subrange(&it.text_range()))\n@@ -30,11 +30,11 @@ impl SyntaxNodePtr {\n         .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))\n     }\n \n-    pub fn range(self) -> TextRange {\n+    pub fn range(&self) -> TextRange {\n         self.range\n     }\n \n-    pub fn kind(self) -> SyntaxKind {\n+    pub fn kind(&self) -> SyntaxKind {\n         self.kind\n     }\n \n@@ -53,10 +53,9 @@ pub struct AstPtr<N: AstNode> {\n     _ty: PhantomData<fn() -> N>,\n }\n \n-impl<N: AstNode> Copy for AstPtr<N> {}\n impl<N: AstNode> Clone for AstPtr<N> {\n     fn clone(&self) -> AstPtr<N> {\n-        *self\n+        AstPtr { raw: self.raw.clone(), _ty: PhantomData }\n     }\n }\n \n@@ -79,13 +78,13 @@ impl<N: AstNode> AstPtr<N> {\n         AstPtr { raw: SyntaxNodePtr::new(node.syntax()), _ty: PhantomData }\n     }\n \n-    pub fn to_node(self, root: &SyntaxNode) -> N {\n+    pub fn to_node(&self, root: &SyntaxNode) -> N {\n         let syntax_node = self.raw.to_node(root);\n         N::cast(syntax_node).unwrap()\n     }\n \n-    pub fn syntax_node_ptr(self) -> SyntaxNodePtr {\n-        self.raw\n+    pub fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n+        self.raw.clone()\n     }\n \n     pub fn cast<U: AstNode>(self) -> Option<AstPtr<U>> {"}, {"sha": "290e0bd7c55917517259e066efe99c8e196ea874", "filename": "crates/ra_syntax/test_data/lexer/err/0049_unstarted_raw_string_with_ascii.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,5 +6,5 @@ WHITESPACE 1 \" \"\n IDENT 1 \"a\"\n WHITESPACE 1 \" \"\n IDENT 5 \"quote\"\n-EXCL 1 \"!\"\n+BANG 1 \"!\"\n > error[0; 4) token(\"r## \") msg(Missing `\"` symbol after `#` symbols to begin the raw string literal)"}, {"sha": "5c492906d4be279917f53797c1c7b87158dbebd5", "filename": "crates/ra_syntax/test_data/lexer/err/0050_unstarted_raw_byte_string_with_ascii.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,5 +6,5 @@ WHITESPACE 1 \" \"\n IDENT 1 \"a\"\n WHITESPACE 1 \" \"\n IDENT 5 \"quote\"\n-EXCL 1 \"!\"\n+BANG 1 \"!\"\n > error[0; 5) token(\"br## \") msg(Missing `\"` symbol after `#` symbols to begin the raw byte string literal)"}, {"sha": "2049c2f1d664981fc287c4bd759401fc8d1a8176", "filename": "crates/ra_syntax/test_data/lexer/ok/0005_symbols.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.txt", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.txt?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,4 +1,4 @@\n-SEMI 1 \";\"\n+SEMICOLON 1 \";\"\n WHITESPACE 1 \" \"\n COMMA 1 \",\"\n WHITESPACE 1 \" \"\n@@ -65,9 +65,9 @@ WHITESPACE 1 \" \"\n EQ 1 \"=\"\n R_ANGLE 1 \">\"\n WHITESPACE 1 \"\\n\"\n-EXCL 1 \"!\"\n+BANG 1 \"!\"\n WHITESPACE 1 \" \"\n-EXCL 1 \"!\"\n+BANG 1 \"!\"\n EQ 1 \"=\"\n WHITESPACE 1 \"\\n\"\n MINUS 1 \"-\""}, {"sha": "831bbf83fd1e0019d324461fca955f0996cade64", "filename": "crates/ra_syntax/test_data/parser/err/0002_duplicate_shebang.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -3,7 +3,7 @@ SOURCE_FILE@[0; 42)\n   WHITESPACE@[20; 21) \"\\n\"\n   ATTR@[21; 23)\n     POUND@[21; 22) \"#\"\n-    EXCL@[22; 23) \"!\"\n+    BANG@[22; 23) \"!\"\n   ERROR@[23; 24)\n     SLASH@[23; 24) \"/\"\n   USE_ITEM@[24; 28)\n@@ -29,11 +29,11 @@ SOURCE_FILE@[0; 42)\n error [23; 23): expected `[`\n error [23; 23): expected an item\n error [27; 27): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error [28; 28): expected SEMI\n-error [31; 31): expected EXCL\n+error [28; 28): expected SEMICOLON\n+error [31; 31): expected BANG\n error [31; 31): expected `{`, `[`, `(`\n-error [31; 31): expected SEMI\n+error [31; 31): expected SEMICOLON\n error [31; 31): expected an item\n-error [35; 35): expected EXCL\n+error [35; 35): expected BANG\n error [41; 41): expected `{`, `[`, `(`\n-error [41; 41): expected SEMI\n+error [41; 41): expected SEMICOLON"}, {"sha": "6b89e7572e1f5e7e3b01f9002e72b1553d3dfdb4", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,6 +34,6 @@ SOURCE_FILE@[0; 40)\n       WHITESPACE@[37; 38) \"\\n\"\n       R_CURLY@[38; 39) \"}\"\n   ERROR@[39; 40)\n-    SEMI@[39; 40) \";\"\n+    SEMICOLON@[39; 40) \";\"\n error [39; 39): expected item, found `;`\n consider removing this semicolon"}, {"sha": "1d27d4cd6fd7851ad67f379dfa35ba1d7fce7542", "filename": "crates/ra_syntax/test_data/parser/err/0004_use_path_bad_segment.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -8,9 +8,9 @@ SOURCE_FILE@[0; 12)\n           PATH_SEGMENT@[4; 7)\n             NAME_REF@[4; 7)\n               IDENT@[4; 7) \"foo\"\n-        COLONCOLON@[7; 9) \"::\"\n+        COLON2@[7; 9) \"::\"\n         PATH_SEGMENT@[9; 11)\n           ERROR@[9; 11)\n             INT_NUMBER@[9; 11) \"92\"\n-    SEMI@[11; 12) \";\"\n+    SEMICOLON@[11; 12) \";\"\n error [9; 9): expected identifier"}, {"sha": "c24e478f3d2706d12dc79fb4da1a5b0fb433ed45", "filename": "crates/ra_syntax/test_data/parser/err/0007_stray_curly_in_file.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,7 +7,7 @@ SOURCE_FILE@[0; 31)\n     WHITESPACE@[9; 10) \" \"\n     NAME@[10; 11)\n       IDENT@[10; 11) \"S\"\n-    SEMI@[11; 12) \";\"\n+    SEMICOLON@[11; 12) \";\"\n   WHITESPACE@[12; 14) \"\\n\\n\"\n   ERROR@[14; 15)\n     R_CURLY@[14; 15) \"}\""}, {"sha": "9f5041ae4c1404cc1e4ffbe0e58eb7f82948f58e", "filename": "crates/ra_syntax/test_data/parser/err/0008_item_block_recovery.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -76,6 +76,6 @@ SOURCE_FILE@[0; 95)\n         WHITESPACE@[92; 93) \"\\n\"\n         R_CURLY@[93; 94) \"}\"\n   WHITESPACE@[94; 95) \"\\n\"\n-error [17; 17): expected EXCL\n-error [19; 19): expected SEMI\n+error [17; 17): expected BANG\n+error [19; 19): expected SEMICOLON\n error [20; 20): expected an item"}, {"sha": "7ed80477d5606aa4c994b8064f6ea27850d3bdd7", "filename": "crates/ra_syntax/test_data/parser/err/0009_broken_struct_type_parameter.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -43,7 +43,7 @@ SOURCE_FILE@[0; 43)\n     WHITESPACE@[39; 40) \" \"\n     NAME@[40; 41)\n       IDENT@[40; 41) \"T\"\n-    SEMI@[41; 42) \";\"\n+    SEMICOLON@[41; 42) \";\"\n   WHITESPACE@[42; 43) \"\\n\"\n error [9; 9): expected type parameter\n error [11; 11): expected COMMA\n@@ -53,6 +53,6 @@ error [12; 12): expected an item\n error [14; 14): expected an item\n error [15; 15): expected an item\n error [17; 17): expected an item\n-error [24; 24): expected SEMI\n+error [24; 24): expected SEMICOLON\n error [24; 24): expected expression\n-error [25; 25): expected SEMI\n+error [25; 25): expected SEMICOLON"}, {"sha": "5559c3297a53ffd63456e95c58daf8f571d3ac39", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -37,9 +37,9 @@ SOURCE_FILE@[0; 42)\n                 R_PAREN@[35; 36) \")\"\n               WHITESPACE@[36; 37) \" \"\n               R_CURLY@[37; 38) \"}\"\n-          SEMI@[38; 39) \";\"\n+          SEMICOLON@[38; 39) \";\"\n         WHITESPACE@[39; 40) \"\\n\"\n         R_CURLY@[40; 41) \"}\"\n   WHITESPACE@[41; 42) \"\\n\"\n error [24; 24): expected `{`\n-error [24; 24): expected SEMI\n+error [24; 24): expected SEMICOLON"}, {"sha": "99c212fd66d50d4cadd301c9699e21bfce283657", "filename": "crates/ra_syntax/test_data/parser/err/0011_extern_struct.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -8,6 +8,6 @@ SOURCE_FILE@[0; 19)\n     WHITESPACE@[13; 14) \" \"\n     NAME@[14; 17)\n       IDENT@[14; 17) \"Foo\"\n-    SEMI@[17; 18) \";\"\n+    SEMICOLON@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n error [6; 6): expected existential, fn, trait or impl"}, {"sha": "0a3c0313d16b10286f555e46f86f42456ce022c2", "filename": "crates/ra_syntax/test_data/parser/err/0012_broken_lambda.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -106,7 +106,7 @@ SOURCE_FILE@[0; 389)\n         WHITESPACE@[122; 123)\n         LITERAL@[123; 124)\n           INT_NUMBER@[123; 124) \"0\"\n-        SEMI@[124; 125)\n+        SEMICOLON@[124; 125)\n       WHITESPACE@[125; 130)\n       LET_STMT@[130; 389)\n         LET_KW@[130; 133)\n@@ -226,7 +226,7 @@ SOURCE_FILE@[0; 389)\n             err: `expected pattern`\n             PARAM@[236; 237)\n               ERROR@[236; 237)\n-                EXCL@[236; 237)\n+                BANG@[236; 237)\n                 err: `expected COMMA`\n             PARAM@[237; 242)\n               BIND_PAT@[237; 242)\n@@ -272,7 +272,7 @@ SOURCE_FILE@[0; 389)\n                   err: `expected pattern`\n             PARAM@[283; 284)\n               ERROR@[283; 284)\n-                SEMI@[283; 284)\n+                SEMICOLON@[283; 284)\n                 err: `expected COMMA`\n             WHITESPACE@[284; 297)\n             err: `expected pattern`\n@@ -327,7 +327,7 @@ SOURCE_FILE@[0; 389)\n                 err: `expected pattern`\n             PARAM@[346; 347)\n               ERROR@[346; 347)\n-                SEMI@[346; 347)\n+                SEMICOLON@[346; 347)\n                 err: `expected COMMA`\n             WHITESPACE@[347; 360)\n             err: `expected pattern`\n@@ -371,7 +371,7 @@ SOURCE_FILE@[0; 389)\n                 err: `expected pattern`\n             PARAM@[385; 386)\n               ERROR@[385; 386)\n-                SEMI@[385; 386)\n+                SEMICOLON@[385; 386)\n                 err: `expected COMMA`\n             WHITESPACE@[386; 387)\n             err: `expected pattern`"}, {"sha": "cb570dc1c7c359d21f2f8ee843681e3395cdf666", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -67,7 +67,7 @@ SOURCE_FILE@[0; 86)\n   ERROR@[82; 83)\n     R_PAREN@[82; 83) \")\"\n   ERROR@[83; 84)\n-    SEMI@[83; 84) \";\"\n+    SEMICOLON@[83; 84) \";\"\n   WHITESPACE@[84; 86) \"\\n\\n\"\n error [67; 67): expected type\n error [68; 68): expected COMMA\n@@ -80,7 +80,7 @@ error [68; 68): expected COMMA\n error [72; 72): expected COMMA\n error [72; 72): expected a type\n error [72; 72): expected R_PAREN\n-error [72; 72): expected SEMI\n+error [72; 72): expected SEMICOLON\n error [72; 72): expected an item\n error [73; 73): expected an item\n error [79; 79): expected an item"}, {"sha": "aca5a3ada59ba4651157c2ec7910667e0de40c83", "filename": "crates/ra_syntax/test_data/parser/err/0016_missing_semi.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -37,8 +37,8 @@ SOURCE_FILE@[0; 56)\n             WHITESPACE@[49; 50) \" \"\n             LITERAL@[50; 52)\n               INT_NUMBER@[50; 52) \"92\"\n-          SEMI@[52; 53) \";\"\n+          SEMICOLON@[52; 53) \";\"\n         WHITESPACE@[53; 54) \"\\n\"\n         R_CURLY@[54; 55) \"}\"\n   WHITESPACE@[55; 56) \"\\n\"\n-error [38; 38): expected SEMI\n+error [38; 38): expected SEMICOLON"}, {"sha": "f9f4b9bc28a6a9914e92b78cefa36c1c8b006640", "filename": "crates/ra_syntax/test_data/parser/err/0017_incomplete_binexpr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 47)\n           WHITESPACE@[32; 33) \" \"\n           LITERAL@[33; 35)\n             INT_NUMBER@[33; 35) \"92\"\n-          SEMI@[35; 36) \";\"\n+          SEMICOLON@[35; 36) \";\"\n         WHITESPACE@[36; 41) \"\\n    \"\n         BIN_EXPR@[41; 44)\n           LITERAL@[41; 42)"}, {"sha": "9a8f766739a621c03d8b3b0d292fd30ea1c682d9", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -60,7 +60,7 @@ SOURCE_FILE@[0; 183)\n                 ARG_LIST@[82; 84)\n                   L_PAREN@[82; 83) \"(\"\n                   R_PAREN@[83; 84) \")\"\n-              SEMI@[84; 85) \";\"\n+              SEMICOLON@[84; 85) \";\"\n             WHITESPACE@[85; 94) \"\\n        \"\n             METHOD_CALL_EXPR@[94; 155)\n               FIELD_EXPR@[94; 105)\n@@ -107,7 +107,7 @@ SOURCE_FILE@[0; 183)\n                           PATH_SEGMENT@[146; 149)\n                             NAME_REF@[146; 149)\n                               IDENT@[146; 149) \"vec\"\n-                        EXCL@[149; 150) \"!\"\n+                        BANG@[149; 150) \"!\"\n                         TOKEN_TREE@[150; 152)\n                           L_BRACK@[150; 151) \"[\"\n                           R_BRACK@[151; 152) \"]\""}, {"sha": "e283091e13f20922fa7173f7e17b59bf958029b9", "filename": "crates/ra_syntax/test_data/parser/err/0019_let_recover.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 139)\n           WHITESPACE@[38; 39) \" \"\n           LITERAL@[39; 40)\n             INT_NUMBER@[39; 40) \"1\"\n-          SEMI@[40; 41) \";\"\n+          SEMICOLON@[40; 41) \";\"\n         WHITESPACE@[41; 46) \"\\n    \"\n         LET_STMT@[46; 49)\n           LET_KW@[46; 49) \"let\"\n@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 139)\n           WHITESPACE@[63; 64) \" \"\n           LITERAL@[64; 66)\n             INT_NUMBER@[64; 66) \"92\"\n-          SEMI@[66; 67) \";\"\n+          SEMICOLON@[66; 67) \";\"\n         WHITESPACE@[67; 72) \"\\n    \"\n         LET_STMT@[72; 75)\n           LET_KW@[72; 75) \"let\"\n@@ -96,12 +96,12 @@ SOURCE_FILE@[0; 139)\n         R_CURLY@[137; 138) \"}\"\n   WHITESPACE@[138; 139) \"\\n\"\n error [24; 24): expected expression\n-error [24; 24): expected SEMI\n+error [24; 24): expected SEMICOLON\n error [49; 49): expected pattern\n-error [49; 49): expected SEMI\n+error [49; 49): expected SEMICOLON\n error [75; 75): expected pattern\n-error [75; 75): expected SEMI\n+error [75; 75): expected SEMICOLON\n error [98; 98): expected pattern\n-error [98; 98): expected SEMI\n+error [98; 98): expected SEMICOLON\n error [124; 124): expected pattern\n-error [124; 124): expected SEMI\n+error [124; 124): expected SEMICOLON"}, {"sha": "465749f95254aee78f626a2f488b2806e96c12e1", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -150,34 +150,34 @@ SOURCE_FILE@[0; 112)\n   WHITESPACE@[111; 112) \"\\n\"\n error [16; 16): expected expression\n error [17; 17): expected R_BRACK\n-error [17; 17): expected SEMI\n+error [17; 17): expected SEMICOLON\n error [17; 17): expected expression\n-error [18; 18): expected SEMI\n+error [18; 18): expected SEMICOLON\n error [25; 25): expected a name\n error [26; 26): expected `;`, `{`, or `(`\n error [30; 30): expected pattern\n-error [31; 31): expected SEMI\n+error [31; 31): expected SEMICOLON\n error [53; 53): expected expression\n-error [54; 54): expected SEMI\n+error [54; 54): expected SEMICOLON\n error [54; 54): expected expression\n-error [55; 55): expected SEMI\n+error [55; 55): expected SEMICOLON\n error [60; 60): expected type\n error [60; 60): expected `{`\n error [60; 60): expected expression\n-error [61; 61): expected SEMI\n+error [61; 61): expected SEMICOLON\n error [65; 65): expected pattern\n-error [65; 65): expected SEMI\n+error [65; 65): expected SEMICOLON\n error [65; 65): expected expression\n error [92; 92): expected expression\n-error [93; 93): expected SEMI\n+error [93; 93): expected SEMICOLON\n error [93; 93): expected expression\n-error [94; 94): expected SEMI\n+error [94; 94): expected SEMICOLON\n error [95; 95): expected expression\n-error [96; 96): expected SEMI\n+error [96; 96): expected SEMICOLON\n error [96; 96): expected expression\n-error [97; 97): expected SEMI\n+error [97; 97): expected SEMICOLON\n error [103; 103): expected a name\n error [104; 104): expected `{`\n error [108; 108): expected pattern\n-error [108; 108): expected SEMI\n+error [108; 108): expected SEMICOLON\n error [108; 108): expected expression"}, {"sha": "97abe95102852c11b17b5ccf9c96d6c64cceebde", "filename": "crates/ra_syntax/test_data/parser/err/0023_mismatched_paren.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -17,7 +17,7 @@ SOURCE_FILE@[0; 94)\n             PATH_SEGMENT@[16; 19)\n               NAME_REF@[16; 19)\n                 IDENT@[16; 19) \"foo\"\n-          EXCL@[19; 20) \"!\"\n+          BANG@[19; 20) \"!\"\n           WHITESPACE@[20; 21) \" \"\n           TOKEN_TREE@[21; 49)\n             L_PAREN@[21; 22) \"(\""}, {"sha": "a3cf3e60a0f8884abbf203b6507f8922dfcce05c", "filename": "crates/ra_syntax/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -144,7 +144,7 @@ SOURCE_FILE@[0; 240)\n         EXPR_STMT@[121; 123)\n           ERROR@[121; 122)\n             R_ANGLE@[121; 122) \">\"\n-          SEMI@[122; 123) \";\"\n+          SEMICOLON@[122; 123) \";\"\n         WHITESPACE@[123; 128) \"\\n    \"\n         LET_STMT@[128; 141)\n           LET_KW@[128; 131) \"let\"\n@@ -219,7 +219,7 @@ SOURCE_FILE@[0; 240)\n                   R_PAREN@[177; 178) \")\"\n               R_ANGLE@[178; 179) \">\"\n               ERROR@[179; 180)\n-                SEMI@[179; 180) \";\"\n+                SEMICOLON@[179; 180) \";\"\n         WHITESPACE@[180; 185) \"\\n    \"\n         LET_STMT@[185; 235)\n           LET_KW@[185; 188) \"let\"\n@@ -286,24 +286,24 @@ SOURCE_FILE@[0; 240)\n         EXPR_STMT@[235; 237)\n           ERROR@[235; 236)\n             R_ANGLE@[235; 236) \">\"\n-          SEMI@[236; 237) \";\"\n+          SEMICOLON@[236; 237) \";\"\n         WHITESPACE@[237; 238) \"\\n\"\n         R_CURLY@[238; 239) \"}\"\n   WHITESPACE@[239; 240) \"\\n\"\n error [88; 88): expected COMMA\n error [88; 88): expected R_ANGLE\n-error [121; 121): expected SEMI\n+error [121; 121): expected SEMICOLON\n error [121; 121): expected expression\n error [140; 140): expected type\n error [141; 141): expected R_PAREN\n error [141; 141): expected COMMA\n error [141; 141): expected R_ANGLE\n-error [141; 141): expected SEMI\n-error [146; 146): expected SEMI\n+error [141; 141): expected SEMICOLON\n+error [146; 146): expected SEMICOLON\n error [146; 146): expected expression\n-error [147; 147): expected SEMI\n+error [147; 147): expected SEMICOLON\n error [148; 148): expected expression\n-error [149; 149): expected SEMI\n+error [149; 149): expected SEMICOLON\n error [154; 154): expected pattern\n error [155; 155): expected IN_KW\n error [155; 155): expected expression\n@@ -314,8 +314,8 @@ error [179; 179): expected expression\n error [180; 180): expected COMMA\n error [180; 180): expected expression\n error [180; 180): expected R_PAREN\n-error [180; 180): expected SEMI\n+error [180; 180): expected SEMICOLON\n error [215; 215): expected COMMA\n error [215; 215): expected R_ANGLE\n-error [235; 235): expected SEMI\n+error [235; 235): expected SEMICOLON\n error [235; 235): expected expression"}, {"sha": "2b37ce94df0fb2ace6027f5ed43339804f60cd0e", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -78,7 +78,7 @@ SOURCE_FILE@[0; 575)\n           WHITESPACE@[183; 184) \" \"\n           LITERAL@[184; 185)\n             INT_NUMBER@[184; 185) \"1\"\n-          SEMI@[185; 186) \";\"\n+          SEMICOLON@[185; 186) \";\"\n         WHITESPACE@[186; 191) \"\\n    \"\n         ENUM_DEF@[191; 223)\n           ENUM_KW@[191; 195) \"enum\"\n@@ -185,7 +185,7 @@ SOURCE_FILE@[0; 575)\n           WHITESPACE@[507; 508) \" \"\n           ERROR@[508; 509)\n             UNDERSCORE@[508; 509) \"_\"\n-          SEMI@[509; 510) \";\"\n+          SEMICOLON@[509; 510) \";\"\n         WHITESPACE@[510; 511) \" \"\n         COMMENT@[511; 572) \"//~ ERROR: expected e ...\"\n         WHITESPACE@[572; 573) \"\\n\""}, {"sha": "00d9fd51140a8db810215be52771b66f071e416c", "filename": "crates/ra_syntax/test_data/parser/err/0031_block_inner_attrs.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0031_block_inner_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 350)\n               WHITESPACE@[30; 39) \"\\n        \"\n               ATTR@[39; 83)\n                 POUND@[39; 40) \"#\"\n-                EXCL@[40; 41) \"!\"\n+                BANG@[40; 41) \"!\"\n                 L_BRACK@[41; 42) \"[\"\n                 PATH@[42; 45)\n                   PATH_SEGMENT@[42; 45)\n@@ -42,7 +42,7 @@ SOURCE_FILE@[0; 350)\n               COMMENT@[92; 122) \"//! Nor are ModuleDoc ...\"\n               WHITESPACE@[122; 127) \"\\n    \"\n               R_CURLY@[127; 128) \"}\"\n-          SEMI@[128; 129) \";\"\n+          SEMICOLON@[128; 129) \";\"\n         WHITESPACE@[129; 134) \"\\n    \"\n         EXPR_STMT@[134; 257)\n           IF_EXPR@[134; 257)\n@@ -58,7 +58,7 @@ SOURCE_FILE@[0; 350)\n                 WHITESPACE@[143; 152) \"\\n        \"\n                 ATTR@[152; 171)\n                   POUND@[152; 153) \"#\"\n-                  EXCL@[153; 154) \"!\"\n+                  BANG@[153; 154) \"!\"\n                   L_BRACK@[154; 155) \"[\"\n                   PATH@[155; 158)\n                     PATH_SEGMENT@[155; 158)\n@@ -72,7 +72,7 @@ SOURCE_FILE@[0; 350)\n                 WHITESPACE@[171; 180) \"\\n        \"\n                 ATTR@[180; 212)\n                   POUND@[180; 181) \"#\"\n-                  EXCL@[181; 182) \"!\"\n+                  BANG@[181; 182) \"!\"\n                   L_BRACK@[182; 183) \"[\"\n                   PATH@[183; 186)\n                     PATH_SEGMENT@[183; 186)\n@@ -101,7 +101,7 @@ SOURCE_FILE@[0; 350)\n               WHITESPACE@[274; 283) \"\\n        \"\n               ATTR@[283; 302)\n                 POUND@[283; 284) \"#\"\n-                EXCL@[284; 285) \"!\"\n+                BANG@[284; 285) \"!\"\n                 L_BRACK@[285; 286) \"[\"\n                 PATH@[286; 289)\n                   PATH_SEGMENT@[286; 289)"}, {"sha": "b80101e60fe1d0bc108654de1af10219443c1f1b", "filename": "crates/ra_syntax/test_data/parser/err/0032_match_arms_inner_attrs.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 293)\n                 ATTR@[51; 52)\n                   POUND@[51; 52) \"#\"\n                 ERROR@[52; 53)\n-                  EXCL@[52; 53) \"!\"\n+                  BANG@[52; 53) \"!\"\n                 ARRAY_EXPR@[53; 78)\n                   L_BRACK@[53; 54) \"[\"\n                   CALL_EXPR@[54; 77)\n@@ -104,7 +104,7 @@ SOURCE_FILE@[0; 293)\n                 ATTR@[160; 161)\n                   POUND@[160; 161) \"#\"\n                 ERROR@[161; 162)\n-                  EXCL@[161; 162) \"!\"\n+                  BANG@[161; 162) \"!\"\n                 ARRAY_EXPR@[162; 179)\n                   L_BRACK@[162; 163) \"[\"\n                   CALL_EXPR@[163; 178)\n@@ -149,7 +149,7 @@ SOURCE_FILE@[0; 293)\n               ATTR@[231; 232)\n                 POUND@[231; 232) \"#\"\n               ERROR@[232; 233)\n-                EXCL@[232; 233) \"!\"\n+                BANG@[232; 233) \"!\"\n               ARRAY_EXPR@[233; 250)\n                 L_BRACK@[233; 234) \"[\"\n                 CALL_EXPR@[234; 249)"}, {"sha": "2ab9ee56f10270ae9e311f2b51714728d0631d82", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 91)\n             TUPLE_EXPR@[32; 34)\n               L_PAREN@[32; 33) \"(\"\n               R_PAREN@[33; 34) \")\"\n-          SEMI@[34; 35) \";\"\n+          SEMICOLON@[34; 35) \";\"\n         WHITESPACE@[35; 40) \"\\n    \"\n         LET_STMT@[40; 51)\n           LET_KW@[40; 43) \"let\"\n@@ -58,7 +58,7 @@ SOURCE_FILE@[0; 91)\n             TUPLE_EXPR@[56; 58)\n               L_PAREN@[56; 57) \"(\"\n               R_PAREN@[57; 58) \")\"\n-          SEMI@[58; 59) \";\"\n+          SEMICOLON@[58; 59) \";\"\n         WHITESPACE@[59; 64) \"\\n    \"\n         LET_STMT@[64; 79)\n           LET_KW@[64; 67) \"let\"\n@@ -84,13 +84,13 @@ SOURCE_FILE@[0; 91)\n             TUPLE_EXPR@[84; 86)\n               L_PAREN@[84; 85) \"(\"\n               R_PAREN@[85; 86) \")\"\n-          SEMI@[86; 87) \";\"\n+          SEMICOLON@[86; 87) \";\"\n         WHITESPACE@[87; 88) \"\\n\"\n         R_CURLY@[88; 89) \"}\"\n   WHITESPACE@[89; 91) \"\\n\\n\"\n error [24; 24): expected a name\n-error [27; 27): expected SEMI\n+error [27; 27): expected SEMICOLON\n error [48; 48): expected a name\n-error [51; 51): expected SEMI\n+error [51; 51): expected SEMICOLON\n error [76; 76): expected a name\n-error [79; 79): expected SEMI\n+error [79; 79): expected SEMICOLON"}, {"sha": "f255b0a6be138e85a00fe0ee7f8f0f74e9bbe729", "filename": "crates/ra_syntax/test_data/parser/err/0035_use_recover.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -8,11 +8,11 @@ SOURCE_FILE@[0; 48)\n           PATH_SEGMENT@[4; 7)\n             NAME_REF@[4; 7)\n               IDENT@[4; 7) \"foo\"\n-        COLONCOLON@[7; 9) \"::\"\n+        COLON2@[7; 9) \"::\"\n         PATH_SEGMENT@[9; 12)\n           NAME_REF@[9; 12)\n             IDENT@[9; 12) \"bar\"\n-    SEMI@[12; 13) \";\"\n+    SEMICOLON@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n   USE_ITEM@[14; 17)\n     USE_KW@[14; 17) \"use\"\n@@ -25,11 +25,11 @@ SOURCE_FILE@[0; 48)\n         PATH@[22; 27)\n           PATH_SEGMENT@[22; 27)\n             CRATE_KW@[22; 27) \"crate\"\n-        COLONCOLON@[27; 29) \"::\"\n+        COLON2@[27; 29) \"::\"\n         PATH_SEGMENT@[29; 32)\n           NAME_REF@[29; 32)\n             IDENT@[29; 32) \"baz\"\n-    SEMI@[32; 33) \";\"\n+    SEMICOLON@[32; 33) \";\"\n   WHITESPACE@[33; 34) \"\\n\"\n   USE_ITEM@[34; 37)\n     USE_KW@[34; 37) \"use\"\n@@ -49,6 +49,6 @@ SOURCE_FILE@[0; 48)\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\"\n error [17; 17): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error [17; 17): expected SEMI\n+error [17; 17): expected SEMICOLON\n error [37; 37): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error [37; 37): expected SEMI\n+error [37; 37): expected SEMICOLON"}, {"sha": "1f2b4f6d93ef233d93af2d58065d0c41c0355a61", "filename": "crates/ra_syntax/test_data/parser/err/0036_partial_use.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,7 +7,7 @@ SOURCE_FILE@[0; 37)\n         PATH_SEGMENT@[4; 7)\n           NAME_REF@[4; 7)\n             IDENT@[4; 7) \"std\"\n-      COLONCOLON@[7; 9) \"::\"\n+      COLON2@[7; 9) \"::\"\n       USE_TREE_LIST@[9; 36)\n         L_CURLY@[9; 10) \"{\"\n         USE_TREE@[10; 22)\n@@ -16,12 +16,12 @@ SOURCE_FILE@[0; 37)\n               PATH_SEGMENT@[10; 15)\n                 NAME_REF@[10; 15)\n                   IDENT@[10; 15) \"error\"\n-            COLONCOLON@[15; 17) \"::\"\n+            COLON2@[15; 17) \"::\"\n             PATH_SEGMENT@[17; 22)\n               NAME_REF@[17; 22)\n                 IDENT@[17; 22) \"Error\"\n         ERROR@[22; 23)\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 24) \"\\n\"\n         ERROR@[24; 27)\n           USE_KW@[24; 27) \"use\"\n@@ -32,12 +32,12 @@ SOURCE_FILE@[0; 37)\n               PATH_SEGMENT@[28; 31)\n                 NAME_REF@[28; 31)\n                   IDENT@[28; 31) \"std\"\n-            COLONCOLON@[31; 33) \"::\"\n+            COLON2@[31; 33) \"::\"\n             PATH_SEGMENT@[33; 35)\n               NAME_REF@[33; 35)\n                 IDENT@[33; 35) \"io\"\n         ERROR@[35; 36)\n-          SEMI@[35; 36) \";\"\n+          SEMICOLON@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\"\n error [22; 22): expected COMMA\n error [22; 22): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n@@ -48,4 +48,4 @@ error [35; 35): expected COMMA\n error [35; 35): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n error [36; 36): expected COMMA\n error [36; 36): expected R_CURLY\n-error [36; 36): expected SEMI\n+error [36; 36): expected SEMICOLON"}, {"sha": "5319bf936c7dddfa31208a4851fbca25adecb8b3", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -65,7 +65,7 @@ SOURCE_FILE@[0; 118)\n         TUPLE_TYPE@[78; 80)\n           L_PAREN@[78; 79) \"(\"\n           R_PAREN@[79; 80) \")\"\n-        SEMI@[80; 81) \";\"\n+        SEMICOLON@[80; 81) \";\"\n       WHITESPACE@[81; 86) \"\\n    \"\n       CONST_DEF@[86; 115)\n         VISIBILITY@[86; 96)\n@@ -90,7 +90,7 @@ SOURCE_FILE@[0; 118)\n         WHITESPACE@[111; 112) \" \"\n         LITERAL@[112; 114)\n           INT_NUMBER@[112; 114) \"92\"\n-        SEMI@[114; 115) \";\"\n+        SEMICOLON@[114; 115) \";\"\n       WHITESPACE@[115; 116) \"\\n\"\n       R_CURLY@[116; 117) \"}\"\n   WHITESPACE@[117; 118) \"\\n\""}, {"sha": "9efdf7ef40b0677ae5cdf1fb9d14b11345f0d388", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,13 +16,13 @@ SOURCE_FILE@[0; 33)\n           RANGE_EXPR@[16; 20)\n             LITERAL@[16; 17)\n               INT_NUMBER@[16; 17) \"0\"\n-            DOTDOTEQ@[17; 20) \"..=\"\n-          SEMI@[20; 21) \";\"\n+            DOT2EQ@[17; 20) \"..=\"\n+          SEMICOLON@[20; 21) \";\"\n         WHITESPACE@[21; 26) \"\\n    \"\n         EXPR_STMT@[26; 30)\n           RANGE_EXPR@[26; 29)\n-            DOTDOTEQ@[26; 29) \"..=\"\n-          SEMI@[29; 30) \";\"\n+            DOT2EQ@[26; 29) \"..=\"\n+          SEMICOLON@[29; 30) \";\"\n         WHITESPACE@[30; 31) \"\\n\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\""}, {"sha": "edf9c3247832d463f2cda98b6f68e072d5d44407", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 83)\n             NAME_REF@[67; 70)\n               IDENT@[67; 70) \"max\"\n             TYPE_ARG_LIST@[70; 77)\n-              COLONCOLON@[70; 72) \"::\"\n+              COLON2@[70; 72) \"::\"\n               L_ANGLE@[72; 73) \"<\"\n               TYPE_ARG@[73; 76)\n                 PATH_TYPE@[73; 76)\n@@ -76,7 +76,7 @@ SOURCE_FILE@[0; 83)\n             ARG_LIST@[77; 79)\n               L_PAREN@[77; 78) \"(\"\n               R_PAREN@[78; 79) \")\"\n-          SEMI@[79; 80) \";\"\n+          SEMICOLON@[79; 80) \";\"\n         WHITESPACE@[80; 81) \"\\n\"\n         R_CURLY@[81; 82) \"}\"\n   WHITESPACE@[82; 83) \"\\n\""}, {"sha": "9d807c84f33fffbfd71598f1d43bcf2f6f4ab6da", "filename": "crates/ra_syntax/test_data/parser/inline/err/0001_array_type_missing_semi.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -18,10 +18,10 @@ SOURCE_FILE@[0; 18)\n   ERROR@[15; 16)\n     R_BRACK@[15; 16) \"]\"\n   ERROR@[16; 17)\n-    SEMI@[16; 17) \";\"\n+    SEMICOLON@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n error [12; 12): expected `;` or `]`\n-error [12; 12): expected SEMI\n+error [12; 12): expected SEMICOLON\n error [13; 13): expected an item\n error [15; 15): expected an item\n error [16; 16): expected an item"}, {"sha": "a85855f8c4df847278112ef1dcb211f1bf363f98", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,6 +24,6 @@ SOURCE_FILE@[0; 30)\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n error [22; 22): expected a loop\n-error [22; 22): expected SEMI\n+error [22; 22): expected SEMICOLON\n error [27; 27): expected type\n error [27; 27): expected `{`"}, {"sha": "e9efad674a5b6c108be66baa46aa95169fd4ac75", "filename": "crates/ra_syntax/test_data/parser/inline/err/0003_pointer_type_no_mutability.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,6 +12,6 @@ SOURCE_FILE@[0; 14)\n       TUPLE_TYPE@[10; 12)\n         L_PAREN@[10; 11) \"(\"\n         R_PAREN@[11; 12) \")\"\n-    SEMI@[12; 13) \";\"\n+    SEMICOLON@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n error [10; 10): expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)"}, {"sha": "b8a494085bc90c4fdcfd8fc44117e765d9948cf1", "filename": "crates/ra_syntax/test_data/parser/inline/err/0005_fn_pointer_type_missing_fn.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -14,10 +14,10 @@ SOURCE_FILE@[0; 20)\n   ERROR@[17; 18)\n     R_PAREN@[17; 18) \")\"\n   ERROR@[18; 19)\n-    SEMI@[18; 19) \";\"\n+    SEMICOLON@[18; 19) \";\"\n   WHITESPACE@[19; 20) \"\\n\"\n error [15; 15): expected `fn`\n-error [15; 15): expected SEMI\n+error [15; 15): expected SEMICOLON\n error [16; 16): expected an item\n error [17; 17): expected an item\n error [18; 18): expected an item"}, {"sha": "c3f7eb4778c49a29705fc60f81322d0aae7ad351", "filename": "crates/ra_syntax/test_data/parser/inline/err/0007_async_without_semicolon.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -29,4 +29,4 @@ SOURCE_FILE@[0; 30)\n         WHITESPACE@[27; 28) \" \"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error [27; 27): expected SEMI\n+error [27; 27): expected SEMICOLON"}, {"sha": "a345f848841cd1ebdb3788ded1079f70d5cc6611", "filename": "crates/ra_syntax/test_data/parser/inline/err/0008_pub_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -19,7 +19,7 @@ SOURCE_FILE@[0; 21)\n         EXPR_STMT@[15; 18)\n           LITERAL@[15; 17)\n             INT_NUMBER@[15; 17) \"92\"\n-          SEMI@[17; 18) \";\"\n+          SEMICOLON@[17; 18) \";\"\n         WHITESPACE@[18; 19) \" \"\n         R_CURLY@[19; 20) \"}\"\n   WHITESPACE@[20; 21) \"\\n\""}, {"sha": "c3a70147a5f9690da93c318593755ca7366643f1", "filename": "crates/ra_syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -30,7 +30,7 @@ SOURCE_FILE@[0; 48)\n             WHITESPACE@[22; 23) \" \"\n             LITERAL@[23; 24)\n               INT_NUMBER@[23; 24) \"2\"\n-          SEMI@[24; 25) \";\"\n+          SEMICOLON@[24; 25) \";\"\n         WHITESPACE@[25; 29) \"\\n   \"\n         EXPR_STMT@[29; 45)\n           ATTR@[29; 33)\n@@ -53,7 +53,7 @@ SOURCE_FILE@[0; 48)\n               BLOCK@[42; 44)\n                 L_CURLY@[42; 43) \"{\"\n                 R_CURLY@[43; 44) \"}\"\n-          SEMI@[44; 45) \";\"\n+          SEMICOLON@[44; 45) \";\"\n         WHITESPACE@[45; 46) \"\\n\"\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\""}, {"sha": "61d737abe93e44cb1c80d471c23b1cdfc0418e7d", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_bad_tuple_index_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 47)\n                     IDENT@[15; 16) \"x\"\n             DOT@[16; 17) \".\"\n             FLOAT_NUMBER@[17; 19) \"0.\"\n-          SEMI@[19; 20) \";\"\n+          SEMICOLON@[19; 20) \";\"\n         WHITESPACE@[20; 25) \"\\n    \"\n         EXPR_STMT@[25; 32)\n           FIELD_EXPR@[25; 31)\n@@ -33,7 +33,7 @@ SOURCE_FILE@[0; 47)\n             DOT@[26; 27) \".\"\n             NAME_REF@[27; 31)\n               INT_NUMBER@[27; 31) \"1i32\"\n-          SEMI@[31; 32) \";\"\n+          SEMICOLON@[31; 32) \";\"\n         WHITESPACE@[32; 37) \"\\n    \"\n         EXPR_STMT@[37; 44)\n           FIELD_EXPR@[37; 43)\n@@ -45,7 +45,7 @@ SOURCE_FILE@[0; 47)\n             DOT@[38; 39) \".\"\n             NAME_REF@[39; 43)\n               INT_NUMBER@[39; 43) \"0x01\"\n-          SEMI@[43; 44) \";\"\n+          SEMICOLON@[43; 44) \";\"\n         WHITESPACE@[44; 45) \"\\n\"\n         R_CURLY@[45; 46) \"}\"\n   WHITESPACE@[46; 47) \"\\n\""}, {"sha": "62fca0a391ee9d455fd37286d976571abc8105b9", "filename": "crates/ra_syntax/test_data/parser/inline/err/0013_static_underscore.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,6 +16,6 @@ SOURCE_FILE@[0; 19)\n     WHITESPACE@[15; 16) \" \"\n     LITERAL@[16; 17)\n       INT_NUMBER@[16; 17) \"5\"\n-    SEMI@[17; 18) \";\"\n+    SEMICOLON@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n error [7; 7): expected a name"}, {"sha": "aa960d3ef2a1c994cc4f7fef624992395a624700", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 62)\n             PATH_SEGMENT@[31; 34)\n               NAME_REF@[31; 34)\n                 IDENT@[31; 34) \"Bar\"\n-        SEMI@[34; 35) \";\"\n+        SEMICOLON@[34; 35) \";\"\n       WHITESPACE@[35; 40) \"\\n    \"\n       MACRO_CALL@[40; 47)\n         PATH@[40; 47)\n@@ -51,9 +51,9 @@ SOURCE_FILE@[0; 62)\n       WHITESPACE@[59; 60) \"\\n\"\n       R_CURLY@[60; 61) \"}\"\n   WHITESPACE@[61; 62) \"\\n\"\n-error [21; 21): expected EXCL\n+error [21; 21): expected BANG\n error [21; 21): expected `{`, `[`, `(`\n-error [21; 21): expected SEMI\n-error [47; 47): expected EXCL\n+error [21; 21): expected SEMICOLON\n+error [47; 47): expected BANG\n error [47; 47): expected `{`, `[`, `(`\n-error [47; 47): expected SEMI\n+error [47; 47): expected SEMICOLON"}, {"sha": "75043c9c048784d27379666026c1f30ca29d3d00", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rast", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,49 @@\n+SOURCE_FILE@[0; 45)\n+  FN_DEF@[0; 44)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 44)\n+      BLOCK@[10; 44)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        RECORD_LIT@[16; 42)\n+          PATH@[16; 17)\n+            PATH_SEGMENT@[16; 17)\n+              NAME_REF@[16; 17)\n+                IDENT@[16; 17) \"S\"\n+          WHITESPACE@[17; 18) \" \"\n+          RECORD_FIELD_LIST@[18; 42)\n+            L_CURLY@[18; 19) \"{\"\n+            WHITESPACE@[19; 20) \" \"\n+            RECORD_FIELD@[20; 40)\n+              NAME_REF@[20; 25)\n+                IDENT@[20; 25) \"field\"\n+              WHITESPACE@[25; 26) \" \"\n+              RANGE_EXPR@[26; 40)\n+                DOT2@[26; 28) \"..\"\n+                CALL_EXPR@[28; 40)\n+                  PATH_EXPR@[28; 38)\n+                    PATH@[28; 38)\n+                      PATH@[28; 29)\n+                        PATH_SEGMENT@[28; 29)\n+                          NAME_REF@[28; 29)\n+                            IDENT@[28; 29) \"S\"\n+                      COLON2@[29; 31) \"::\"\n+                      PATH_SEGMENT@[31; 38)\n+                        NAME_REF@[31; 38)\n+                          IDENT@[31; 38) \"default\"\n+                  ARG_LIST@[38; 40)\n+                    L_PAREN@[38; 39) \"(\"\n+                    R_PAREN@[39; 40) \")\"\n+            WHITESPACE@[40; 41) \" \"\n+            R_CURLY@[41; 42) \"}\"\n+        WHITESPACE@[42; 43) \"\\n\"\n+        R_CURLY@[43; 44) \"}\"\n+  WHITESPACE@[44; 45) \"\\n\"\n+error [25; 25): expected COLON"}, {"sha": "a4e5b2f69336f67002441eb47ddbe64744ca694c", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    S { field ..S::default() }\n+}"}, {"sha": "25c6ef7e32c58df19ebce1f07173f9c80a2fc77e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 83)\n                 PATH_SEGMENT@[21; 26)\n                   NAME_REF@[21; 26)\n                     IDENT@[21; 26) \"Clone\"\n-        SEMI@[26; 27) \";\"\n+        SEMICOLON@[26; 27) \";\"\n       WHITESPACE@[27; 32) \"\\n    \"\n       CONST_DEF@[32; 45)\n         CONST_KW@[32; 37) \"const\"\n@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 83)\n             PATH_SEGMENT@[41; 44)\n               NAME_REF@[41; 44)\n                 IDENT@[41; 44) \"i32\"\n-        SEMI@[44; 45) \";\"\n+        SEMICOLON@[44; 45) \";\"\n       WHITESPACE@[45; 50) \"\\n    \"\n       FN_DEF@[50; 61)\n         FN_KW@[50; 52) \"fn\"\n@@ -66,7 +66,7 @@ SOURCE_FILE@[0; 83)\n             AMP@[73; 74) \"&\"\n             SELF_KW@[74; 78) \"self\"\n           R_PAREN@[78; 79) \")\"\n-        SEMI@[79; 80) \";\"\n+        SEMICOLON@[79; 80) \";\"\n       WHITESPACE@[80; 81) \"\\n\"\n       R_CURLY@[81; 82) \"}\"\n   WHITESPACE@[82; 83) \"\\n\""}, {"sha": "69c459daf4fbec824f4bbfca2a1eb42428a03123", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,15 +12,15 @@ SOURCE_FILE@[0; 250)\n                 PATH@[5; 10)\n                   PATH_SEGMENT@[5; 10)\n                     CRATE_KW@[5; 10) \"crate\"\n-                COLONCOLON@[10; 12) \"::\"\n+                COLON2@[10; 12) \"::\"\n                 PATH_SEGMENT@[12; 16)\n                   NAME_REF@[12; 16)\n                     IDENT@[12; 16) \"path\"\n-              COLONCOLON@[16; 18) \"::\"\n+              COLON2@[16; 18) \"::\"\n               PATH_SEGMENT@[18; 22)\n                 NAME_REF@[18; 22)\n                   IDENT@[18; 22) \"from\"\n-            COLONCOLON@[22; 24) \"::\"\n+            COLON2@[22; 24) \"::\"\n             PATH_SEGMENT@[24; 28)\n               NAME_REF@[24; 28)\n                 IDENT@[24; 28) \"root\"\n@@ -34,20 +34,20 @@ SOURCE_FILE@[0; 250)\n                   PATH_SEGMENT@[30; 32)\n                     NAME_REF@[30; 32)\n                       IDENT@[30; 32) \"or\"\n-                COLONCOLON@[32; 34) \"::\"\n+                COLON2@[32; 34) \"::\"\n                 PATH_SEGMENT@[34; 38)\n                   NAME_REF@[34; 38)\n                     IDENT@[34; 38) \"path\"\n-              COLONCOLON@[38; 40) \"::\"\n+              COLON2@[38; 40) \"::\"\n               PATH_SEGMENT@[40; 44)\n                 NAME_REF@[40; 44)\n                   IDENT@[40; 44) \"from\"\n-            COLONCOLON@[44; 46) \"::\"\n+            COLON2@[44; 46) \"::\"\n             PATH_SEGMENT@[46; 56)\n               NAME_REF@[46; 56)\n                 IDENT@[46; 56) \"crate_name\"\n         R_CURLY@[56; 57) \"}\"\n-    SEMI@[57; 58) \";\"\n+    SEMICOLON@[57; 58) \";\"\n   WHITESPACE@[58; 59) \" \"\n   COMMENT@[59; 97) \"// Rust 2018 (with a  ...\"\n   WHITESPACE@[97; 98) \"\\n\"\n@@ -64,24 +64,24 @@ SOURCE_FILE@[0; 250)\n                 PATH_SEGMENT@[103; 107)\n                   NAME_REF@[103; 107)\n                     IDENT@[103; 107) \"path\"\n-              COLONCOLON@[107; 109) \"::\"\n+              COLON2@[107; 109) \"::\"\n               PATH_SEGMENT@[109; 113)\n                 NAME_REF@[109; 113)\n                   IDENT@[109; 113) \"from\"\n-            COLONCOLON@[113; 115) \"::\"\n+            COLON2@[113; 115) \"::\"\n             PATH_SEGMENT@[115; 119)\n               NAME_REF@[115; 119)\n                 IDENT@[115; 119) \"root\"\n         R_CURLY@[119; 120) \"}\"\n-    SEMI@[120; 121) \";\"\n+    SEMICOLON@[120; 121) \";\"\n   WHITESPACE@[121; 122) \" \"\n   COMMENT@[122; 134) \"// Rust 2015\"\n   WHITESPACE@[134; 135) \"\\n\"\n   USE_ITEM@[135; 166)\n     USE_KW@[135; 138) \"use\"\n     WHITESPACE@[138; 139) \" \"\n     USE_TREE@[139; 165)\n-      COLONCOLON@[139; 141) \"::\"\n+      COLON2@[139; 141) \"::\"\n       USE_TREE_LIST@[141; 165)\n         L_CURLY@[141; 142) \"{\"\n         USE_TREE@[142; 164)\n@@ -91,24 +91,24 @@ SOURCE_FILE@[0; 250)\n                 PATH_SEGMENT@[142; 146)\n                   NAME_REF@[142; 146)\n                     IDENT@[142; 146) \"some\"\n-              COLONCOLON@[146; 148) \"::\"\n+              COLON2@[146; 148) \"::\"\n               PATH_SEGMENT@[148; 158)\n                 NAME_REF@[148; 158)\n                   IDENT@[148; 158) \"arbritrary\"\n-            COLONCOLON@[158; 160) \"::\"\n+            COLON2@[158; 160) \"::\"\n             PATH_SEGMENT@[160; 164)\n               NAME_REF@[160; 164)\n                 IDENT@[160; 164) \"path\"\n         R_CURLY@[164; 165) \"}\"\n-    SEMI@[165; 166) \";\"\n+    SEMICOLON@[165; 166) \";\"\n   WHITESPACE@[166; 167) \" \"\n   COMMENT@[167; 179) \"// Rust 2015\"\n   WHITESPACE@[179; 180) \"\\n\"\n   USE_ITEM@[180; 206)\n     USE_KW@[180; 183) \"use\"\n     WHITESPACE@[183; 184) \" \"\n     USE_TREE@[184; 205)\n-      COLONCOLON@[184; 186) \"::\"\n+      COLON2@[184; 186) \"::\"\n       USE_TREE_LIST@[186; 205)\n         L_CURLY@[186; 187) \"{\"\n         USE_TREE@[187; 204)\n@@ -122,14 +122,14 @@ SOURCE_FILE@[0; 250)\n                     PATH@[189; 194)\n                       PATH_SEGMENT@[189; 194)\n                         CRATE_KW@[189; 194) \"crate\"\n-                    COLONCOLON@[194; 196) \"::\"\n+                    COLON2@[194; 196) \"::\"\n                     PATH_SEGMENT@[196; 202)\n                       NAME_REF@[196; 202)\n                         IDENT@[196; 202) \"export\"\n                 R_CURLY@[202; 203) \"}\"\n             R_CURLY@[203; 204) \"}\"\n         R_CURLY@[204; 205) \"}\"\n-    SEMI@[205; 206) \";\"\n+    SEMICOLON@[205; 206) \";\"\n   WHITESPACE@[206; 207) \" \"\n   COMMENT@[207; 249) \"// Nonsensical but pe ...\"\n   WHITESPACE@[249; 250) \"\\n\""}, {"sha": "a0cf1e4f6fd29231da192f029393aa737b7fc4ab", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0004_value_parameters_no_patterns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -56,5 +56,5 @@ SOURCE_FILE@[0; 39)\n                           R_PAREN@[34; 35) \")\"\n                       R_PAREN@[35; 36) \")\"\n             R_ANGLE@[36; 37) \">\"\n-    SEMI@[37; 38) \";\"\n+    SEMICOLON@[37; 38) \";\"\n   WHITESPACE@[38; 39) \"\\n\""}, {"sha": "027abf179f75018a58c7b6d68c6c65545d75c02d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0007_type_param_bounds.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -36,5 +36,5 @@ SOURCE_FILE@[0; 35)\n                     IDENT@[27; 31) \"Copy\"\n             R_PAREN@[31; 32) \")\"\n       R_ANGLE@[32; 33) \">\"\n-    SEMI@[33; 34) \";\"\n+    SEMICOLON@[33; 34) \";\"\n   WHITESPACE@[34; 35) \"\\n\""}, {"sha": "f4697fed6a202d08dae4cca3dcf755db79bf1d3c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0008_path_part.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 103)\n                 PATH_SEGMENT@[19; 22)\n                   NAME_REF@[19; 22)\n                     IDENT@[19; 22) \"foo\"\n-              COLONCOLON@[22; 24) \"::\"\n+              COLON2@[22; 24) \"::\"\n               PATH_SEGMENT@[24; 27)\n                 NAME_REF@[24; 27)\n                   IDENT@[24; 27) \"Bar\"\n@@ -31,15 +31,15 @@ SOURCE_FILE@[0; 103)\n           TUPLE_EXPR@[30; 32)\n             L_PAREN@[30; 31) \"(\"\n             R_PAREN@[31; 32) \")\"\n-          SEMI@[32; 33) \";\"\n+          SEMICOLON@[32; 33) \";\"\n         WHITESPACE@[33; 38) \"\\n    \"\n         LET_STMT@[38; 53)\n           LET_KW@[38; 41) \"let\"\n           WHITESPACE@[41; 42) \" \"\n           PATH_PAT@[42; 47)\n             PATH@[42; 47)\n               PATH_SEGMENT@[42; 47)\n-                COLONCOLON@[42; 44) \"::\"\n+                COLON2@[42; 44) \"::\"\n                 NAME_REF@[44; 47)\n                   IDENT@[44; 47) \"Bar\"\n           WHITESPACE@[47; 48) \" \"\n@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 103)\n           TUPLE_EXPR@[50; 52)\n             L_PAREN@[50; 51) \"(\"\n             R_PAREN@[51; 52) \")\"\n-          SEMI@[52; 53) \";\"\n+          SEMICOLON@[52; 53) \";\"\n         WHITESPACE@[53; 58) \"\\n    \"\n         LET_STMT@[58; 78)\n           LET_KW@[58; 61) \"let\"\n@@ -62,7 +62,7 @@ SOURCE_FILE@[0; 103)\n             RECORD_FIELD_PAT_LIST@[66; 72)\n               L_CURLY@[66; 67) \"{\"\n               WHITESPACE@[67; 68) \" \"\n-              DOTDOT@[68; 70) \"..\"\n+              DOT2@[68; 70) \"..\"\n               WHITESPACE@[70; 71) \" \"\n               R_CURLY@[71; 72) \"}\"\n           WHITESPACE@[72; 73) \" \"\n@@ -71,7 +71,7 @@ SOURCE_FILE@[0; 103)\n           TUPLE_EXPR@[75; 77)\n             L_PAREN@[75; 76) \"(\"\n             R_PAREN@[76; 77) \")\"\n-          SEMI@[77; 78) \";\"\n+          SEMICOLON@[77; 78) \";\"\n         WHITESPACE@[78; 83) \"\\n    \"\n         LET_STMT@[83; 100)\n           LET_KW@[83; 86) \"let\"\n@@ -83,15 +83,15 @@ SOURCE_FILE@[0; 103)\n                   IDENT@[87; 90) \"Bar\"\n             L_PAREN@[90; 91) \"(\"\n             DOT_DOT_PAT@[91; 93)\n-              DOTDOT@[91; 93) \"..\"\n+              DOT2@[91; 93) \"..\"\n             R_PAREN@[93; 94) \")\"\n           WHITESPACE@[94; 95) \" \"\n           EQ@[95; 96) \"=\"\n           WHITESPACE@[96; 97) \" \"\n           TUPLE_EXPR@[97; 99)\n             L_PAREN@[97; 98) \"(\"\n             R_PAREN@[98; 99) \")\"\n-          SEMI@[99; 100) \";\"\n+          SEMICOLON@[99; 100) \";\"\n         WHITESPACE@[100; 101) \"\\n\"\n         R_CURLY@[101; 102) \"}\"\n   WHITESPACE@[102; 103) \"\\n\""}, {"sha": "cc759310a165d8bbc2b169735ac25d5593606cc8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0009_loop_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0009_loop_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -20,7 +20,7 @@ SOURCE_FILE@[0; 26)\n               BLOCK@[20; 22)\n                 L_CURLY@[20; 21) \"{\"\n                 R_CURLY@[21; 22) \"}\"\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 24) \"\\n\"\n         R_CURLY@[24; 25) \"}\"\n   WHITESPACE@[25; 26) \"\\n\""}, {"sha": "c2fafe472742040629a56c2bd436a8afb800a872", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0011_field_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,7 +22,7 @@ SOURCE_FILE@[0; 48)\n             DOT@[16; 17) \".\"\n             NAME_REF@[17; 20)\n               IDENT@[17; 20) \"foo\"\n-          SEMI@[20; 21) \";\"\n+          SEMICOLON@[20; 21) \";\"\n         WHITESPACE@[21; 26) \"\\n    \"\n         EXPR_STMT@[26; 34)\n           FIELD_EXPR@[26; 33)\n@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 48)\n             DOT@[29; 30) \".\"\n             NAME_REF@[30; 33)\n               IDENT@[30; 33) \"bar\"\n-          SEMI@[33; 34) \";\"\n+          SEMICOLON@[33; 34) \";\"\n         WHITESPACE@[34; 39) \"\\n    \"\n         EXPR_STMT@[39; 45)\n           CALL_EXPR@[39; 44)\n@@ -54,7 +54,7 @@ SOURCE_FILE@[0; 48)\n             ARG_LIST@[42; 44)\n               L_PAREN@[42; 43) \"(\"\n               R_PAREN@[43; 44) \")\"\n-          SEMI@[44; 45) \";\"\n+          SEMICOLON@[44; 45) \";\"\n         WHITESPACE@[45; 46) \"\\n\"\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\""}, {"sha": "15d8c736df28e2a1fd1c0a4329379421225510a8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0012_type_item_where_clause.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0012_type_item_where_clause.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -29,5 +29,5 @@ SOURCE_FILE@[0; 31)\n     TUPLE_TYPE@[27; 29)\n       L_PAREN@[27; 28) \"(\"\n       R_PAREN@[28; 29) \")\"\n-    SEMI@[29; 30) \";\"\n+    SEMICOLON@[29; 30) \";\"\n   WHITESPACE@[30; 31) \"\\n\""}, {"sha": "a72d564954cd7040b5c353aa90cb7901dcda6487", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0013_pointer_type_mut.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0013_pointer_type_mut.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -14,7 +14,7 @@ SOURCE_FILE@[0; 36)\n       TUPLE_TYPE@[14; 16)\n         L_PAREN@[14; 15) \"(\"\n         R_PAREN@[15; 16) \")\"\n-    SEMI@[16; 17) \";\"\n+    SEMICOLON@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n   TYPE_ALIAS_DEF@[18; 35)\n     TYPE_KW@[18; 22) \"type\"\n@@ -31,5 +31,5 @@ SOURCE_FILE@[0; 36)\n       TUPLE_TYPE@[32; 34)\n         L_PAREN@[32; 33) \"(\"\n         R_PAREN@[33; 34) \")\"\n-    SEMI@[34; 35) \";\"\n+    SEMICOLON@[34; 35) \";\"\n   WHITESPACE@[35; 36) \"\\n\""}, {"sha": "3c98467c7ff534be2e9baf2ac6e206b06ae2cc51", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0014_never_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0014_never_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -8,6 +8,6 @@ SOURCE_FILE@[0; 16)\n     EQ@[11; 12) \"=\"\n     WHITESPACE@[12; 13) \" \"\n     NEVER_TYPE@[13; 14)\n-      EXCL@[13; 14) \"!\"\n-    SEMI@[14; 15) \";\"\n+      BANG@[13; 14) \"!\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\""}, {"sha": "adaece1191f3b04bad70d0eaa7b1934f34328f44", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0015_continue_expr.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,14 +22,14 @@ SOURCE_FILE@[0; 69)\n               EXPR_STMT@[30; 39)\n                 CONTINUE_EXPR@[30; 38)\n                   CONTINUE_KW@[30; 38) \"continue\"\n-                SEMI@[38; 39) \";\"\n+                SEMICOLON@[38; 39) \";\"\n               WHITESPACE@[39; 48) \"\\n        \"\n               EXPR_STMT@[48; 60)\n                 CONTINUE_EXPR@[48; 59)\n                   CONTINUE_KW@[48; 56) \"continue\"\n                   WHITESPACE@[56; 57) \" \"\n                   LIFETIME@[57; 59) \"\\'l\"\n-                SEMI@[59; 60) \";\"\n+                SEMICOLON@[59; 60) \";\"\n               WHITESPACE@[60; 65) \"\\n    \"\n               R_CURLY@[65; 66) \"}\"\n         WHITESPACE@[66; 67) \"\\n\""}, {"sha": "f4c86a05f526040d2e63785ef6e77ba0b5ef56cd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0017_array_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0017_array_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,10 +12,10 @@ SOURCE_FILE@[0; 19)\n       TUPLE_TYPE@[10; 12)\n         L_PAREN@[10; 11) \"(\"\n         R_PAREN@[11; 12) \")\"\n-      SEMI@[12; 13) \";\"\n+      SEMICOLON@[12; 13) \";\"\n       WHITESPACE@[13; 14) \" \"\n       LITERAL@[14; 16)\n         INT_NUMBER@[14; 16) \"92\"\n       R_BRACK@[16; 17) \"]\"\n-    SEMI@[17; 18) \";\"\n+    SEMICOLON@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\""}, {"sha": "5a42f360cf332c9cc4c333f12967ec07a16f5ecf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0019_unary_expr.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0019_unary_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,16 +21,16 @@ SOURCE_FILE@[0; 44)\n                 AMP@[17; 18) \"&\"\n                 LITERAL@[18; 19)\n                   INT_NUMBER@[18; 19) \"1\"\n-          SEMI@[19; 20) \";\"\n+          SEMICOLON@[19; 20) \";\"\n         WHITESPACE@[20; 25) \"\\n    \"\n         EXPR_STMT@[25; 32)\n           PREFIX_EXPR@[25; 31)\n-            EXCL@[25; 26) \"!\"\n+            BANG@[25; 26) \"!\"\n             PREFIX_EXPR@[26; 31)\n-              EXCL@[26; 27) \"!\"\n+              BANG@[26; 27) \"!\"\n               LITERAL@[27; 31)\n                 TRUE_KW@[27; 31) \"true\"\n-          SEMI@[31; 32) \";\"\n+          SEMICOLON@[31; 32) \";\"\n         WHITESPACE@[32; 37) \"\\n    \"\n         EXPR_STMT@[37; 41)\n           PREFIX_EXPR@[37; 40)\n@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 44)\n               MINUS@[38; 39) \"-\"\n               LITERAL@[39; 40)\n                 INT_NUMBER@[39; 40) \"1\"\n-          SEMI@[40; 41) \";\"\n+          SEMICOLON@[40; 41) \";\"\n         WHITESPACE@[41; 42) \"\\n\"\n         R_CURLY@[42; 43) \"}\"\n   WHITESPACE@[43; 44) \"\\n\""}, {"sha": "c1bedb37c50bcea4dae9f7481811bd0a8329fba0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0020_use_star.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0020_use_star.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,15 +4,15 @@ SOURCE_FILE@[0; 60)\n     WHITESPACE@[3; 4) \" \"\n     USE_TREE@[4; 5)\n       STAR@[4; 5) \"*\"\n-    SEMI@[5; 6) \";\"\n+    SEMICOLON@[5; 6) \";\"\n   WHITESPACE@[6; 7) \"\\n\"\n   USE_ITEM@[7; 15)\n     USE_KW@[7; 10) \"use\"\n     WHITESPACE@[10; 11) \" \"\n     USE_TREE@[11; 14)\n-      COLONCOLON@[11; 13) \"::\"\n+      COLON2@[11; 13) \"::\"\n       STAR@[13; 14) \"*\"\n-    SEMI@[14; 15) \";\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\"\n   USE_ITEM@[16; 36)\n     USE_KW@[16; 19) \"use\"\n@@ -23,17 +23,17 @@ SOURCE_FILE@[0; 60)\n           PATH_SEGMENT@[20; 24)\n             NAME_REF@[20; 24)\n               IDENT@[20; 24) \"some\"\n-        COLONCOLON@[24; 26) \"::\"\n+        COLON2@[24; 26) \"::\"\n         PATH_SEGMENT@[26; 30)\n           NAME_REF@[26; 30)\n             IDENT@[26; 30) \"path\"\n-      COLONCOLON@[30; 32) \"::\"\n+      COLON2@[30; 32) \"::\"\n       USE_TREE_LIST@[32; 35)\n         L_CURLY@[32; 33) \"{\"\n         USE_TREE@[33; 34)\n           STAR@[33; 34) \"*\"\n         R_CURLY@[34; 35) \"}\"\n-    SEMI@[35; 36) \";\"\n+    SEMICOLON@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\"\n   USE_ITEM@[37; 59)\n     USE_KW@[37; 40) \"use\"\n@@ -44,16 +44,16 @@ SOURCE_FILE@[0; 60)\n           PATH_SEGMENT@[41; 45)\n             NAME_REF@[41; 45)\n               IDENT@[41; 45) \"some\"\n-        COLONCOLON@[45; 47) \"::\"\n+        COLON2@[45; 47) \"::\"\n         PATH_SEGMENT@[47; 51)\n           NAME_REF@[47; 51)\n             IDENT@[47; 51) \"path\"\n-      COLONCOLON@[51; 53) \"::\"\n+      COLON2@[51; 53) \"::\"\n       USE_TREE_LIST@[53; 58)\n         L_CURLY@[53; 54) \"{\"\n         USE_TREE@[54; 57)\n-          COLONCOLON@[54; 56) \"::\"\n+          COLON2@[54; 56) \"::\"\n           STAR@[56; 57) \"*\"\n         R_CURLY@[57; 58) \"}\"\n-    SEMI@[58; 59) \";\"\n+    SEMICOLON@[58; 59) \";\"\n   WHITESPACE@[59; 60) \"\\n\""}, {"sha": "767a49ce6a56e66f39758adf1864f8b7c236f96e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 89)\n             PATH_SEGMENT@[22; 25)\n               NAME_REF@[22; 25)\n                 IDENT@[22; 25) \"i32\"\n-        SEMI@[25; 26) \";\"\n+        SEMICOLON@[25; 26) \";\"\n       WHITESPACE@[26; 31) \"\\n    \"\n       CONST_DEF@[31; 49)\n         CONST_KW@[31; 36) \"const\"\n@@ -43,7 +43,7 @@ SOURCE_FILE@[0; 89)\n         WHITESPACE@[45; 46) \" \"\n         LITERAL@[46; 48)\n           INT_NUMBER@[46; 48) \"92\"\n-        SEMI@[48; 49) \";\"\n+        SEMICOLON@[48; 49) \";\"\n       WHITESPACE@[49; 54) \"\\n    \"\n       FN_DEF@[54; 65)\n         FN_KW@[54; 56) \"fn\""}, {"sha": "e0fc96d336a10e30f7ca76b252bea369f73eb8d2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0022_crate_visibility.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -10,7 +10,7 @@ SOURCE_FILE@[0; 81)\n     WHITESPACE@[17; 18) \" \"\n     NAME@[18; 19)\n       IDENT@[18; 19) \"S\"\n-    SEMI@[19; 20) \";\"\n+    SEMICOLON@[19; 20) \";\"\n   WHITESPACE@[20; 21) \"\\n\"\n   STRUCT_DEF@[21; 40)\n     VISIBILITY@[21; 30)\n@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 81)\n     WHITESPACE@[37; 38) \" \"\n     NAME@[38; 39)\n       IDENT@[38; 39) \"S\"\n-    SEMI@[39; 40) \";\"\n+    SEMICOLON@[39; 40) \";\"\n   WHITESPACE@[40; 41) \"\\n\"\n   STRUCT_DEF@[41; 60)\n     VISIBILITY@[41; 50)\n@@ -36,7 +36,7 @@ SOURCE_FILE@[0; 81)\n     WHITESPACE@[57; 58) \" \"\n     NAME@[58; 59)\n       IDENT@[58; 59) \"S\"\n-    SEMI@[59; 60) \";\"\n+    SEMICOLON@[59; 60) \";\"\n   WHITESPACE@[60; 61) \"\\n\"\n   STRUCT_DEF@[61; 80)\n     VISIBILITY@[61; 70)\n@@ -49,5 +49,5 @@ SOURCE_FILE@[0; 81)\n     WHITESPACE@[77; 78) \" \"\n     NAME@[78; 79)\n       IDENT@[78; 79) \"S\"\n-    SEMI@[79; 80) \";\"\n+    SEMICOLON@[79; 80) \";\"\n   WHITESPACE@[80; 81) \"\\n\""}, {"sha": "b7acc3f0762bf5531537e34d5571ae0eba2ab88b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0023_placeholder_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -9,5 +9,5 @@ SOURCE_FILE@[0; 22)\n     WHITESPACE@[18; 19) \" \"\n     PLACEHOLDER_TYPE@[19; 20)\n       UNDERSCORE@[19; 20) \"_\"\n-    SEMI@[20; 21) \";\"\n+    SEMICOLON@[20; 21) \";\"\n   WHITESPACE@[21; 22) \"\\n\""}, {"sha": "430e4a999e9f0d160a2e4931033ef2c37f817918", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0024_slice_pat.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0024_slice_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -28,15 +28,15 @@ SOURCE_FILE@[0; 39)\n             COMMA@[25; 26) \",\"\n             WHITESPACE@[26; 27) \" \"\n             DOT_DOT_PAT@[27; 29)\n-              DOTDOT@[27; 29) \"..\"\n+              DOT2@[27; 29) \"..\"\n             R_BRACK@[29; 30) \"]\"\n           WHITESPACE@[30; 31) \" \"\n           EQ@[31; 32) \"=\"\n           WHITESPACE@[32; 33) \" \"\n           ARRAY_EXPR@[33; 35)\n             L_BRACK@[33; 34) \"[\"\n             R_BRACK@[34; 35) \"]\"\n-          SEMI@[35; 36) \";\"\n+          SEMICOLON@[35; 36) \";\"\n         WHITESPACE@[36; 37) \"\\n\"\n         R_CURLY@[37; 38) \"}\"\n   WHITESPACE@[38; 39) \"\\n\""}, {"sha": "4eee1e7f1dd669743460e1f973bf7de87c103add", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0025_slice_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0025_slice_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -13,5 +13,5 @@ SOURCE_FILE@[0; 15)\n         L_PAREN@[10; 11) \"(\"\n         R_PAREN@[11; 12) \")\"\n       R_BRACK@[12; 13) \"]\"\n-    SEMI@[13; 14) \";\"\n+    SEMICOLON@[13; 14) \";\"\n   WHITESPACE@[14; 15) \"\\n\""}, {"sha": "d8d82dacc52ca26d4dd338006f7ef01806f810f2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0026_tuple_pat_fields.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0026_tuple_pat_fields.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -28,7 +28,7 @@ SOURCE_FILE@[0; 97)\n           TUPLE_EXPR@[25; 27)\n             L_PAREN@[25; 26) \"(\"\n             R_PAREN@[26; 27) \")\"\n-          SEMI@[27; 28) \";\"\n+          SEMICOLON@[27; 28) \";\"\n         WHITESPACE@[28; 33) \"\\n    \"\n         LET_STMT@[33; 47)\n           LET_KW@[33; 36) \"let\"\n@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 97)\n           TUPLE_EXPR@[44; 46)\n             L_PAREN@[44; 45) \"(\"\n             R_PAREN@[45; 46) \")\"\n-          SEMI@[46; 47) \";\"\n+          SEMICOLON@[46; 47) \";\"\n         WHITESPACE@[47; 52) \"\\n    \"\n         LET_STMT@[52; 67)\n           LET_KW@[52; 55) \"let\"\n@@ -69,7 +69,7 @@ SOURCE_FILE@[0; 97)\n           TUPLE_EXPR@[64; 66)\n             L_PAREN@[64; 65) \"(\"\n             R_PAREN@[65; 66) \")\"\n-          SEMI@[66; 67) \";\"\n+          SEMICOLON@[66; 67) \";\"\n         WHITESPACE@[67; 72) \"\\n    \"\n         LET_STMT@[72; 94)\n           LET_KW@[72; 75) \"let\"\n@@ -85,7 +85,7 @@ SOURCE_FILE@[0; 97)\n             COMMA@[79; 80) \",\"\n             WHITESPACE@[80; 81) \" \"\n             DOT_DOT_PAT@[81; 83)\n-              DOTDOT@[81; 83) \"..\"\n+              DOT2@[81; 83) \"..\"\n             WHITESPACE@[83; 84) \" \"\n             COMMA@[84; 85) \",\"\n             WHITESPACE@[85; 86) \" \"\n@@ -99,7 +99,7 @@ SOURCE_FILE@[0; 97)\n           TUPLE_EXPR@[91; 93)\n             L_PAREN@[91; 92) \"(\"\n             R_PAREN@[92; 93) \")\"\n-          SEMI@[93; 94) \";\"\n+          SEMICOLON@[93; 94) \";\"\n         WHITESPACE@[94; 95) \"\\n\"\n         R_CURLY@[95; 96) \"}\"\n   WHITESPACE@[96; 97) \"\\n\""}, {"sha": "ac6ab31f285b78169d5cbf15916549aeee93c4e6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0027_ref_pat.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0027_ref_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -26,7 +26,7 @@ SOURCE_FILE@[0; 52)\n           TUPLE_EXPR@[25; 27)\n             L_PAREN@[25; 26) \"(\"\n             R_PAREN@[26; 27) \")\"\n-          SEMI@[27; 28) \";\"\n+          SEMICOLON@[27; 28) \";\"\n         WHITESPACE@[28; 33) \"\\n    \"\n         LET_STMT@[33; 49)\n           LET_KW@[33; 36) \"let\"\n@@ -44,7 +44,7 @@ SOURCE_FILE@[0; 52)\n           TUPLE_EXPR@[46; 48)\n             L_PAREN@[46; 47) \"(\"\n             R_PAREN@[47; 48) \")\"\n-          SEMI@[48; 49) \";\"\n+          SEMICOLON@[48; 49) \";\"\n         WHITESPACE@[49; 50) \"\\n\"\n         R_CURLY@[50; 51) \"}\"\n   WHITESPACE@[51; 52) \"\\n\""}, {"sha": "3371cab8292d307ece8c1dfbc23c29bf6ad5b5a0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0028_impl_trait_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -39,5 +39,5 @@ SOURCE_FILE@[0; 43)\n         WHITESPACE@[38; 39) \" \"\n         TYPE_BOUND@[39; 41)\n           LIFETIME@[39; 41) \"\\'a\"\n-    SEMI@[41; 42) \";\"\n+    SEMICOLON@[41; 42) \";\"\n   WHITESPACE@[42; 43) \"\\n\""}, {"sha": "e9ca214bb826d7119175539c72ff546733d72c7d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0029_cast_expr.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0029_cast_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 89)\n                 PATH_SEGMENT@[21; 24)\n                   NAME_REF@[21; 24)\n                     IDENT@[21; 24) \"i32\"\n-          SEMI@[24; 25) \";\"\n+          SEMICOLON@[24; 25) \";\"\n         WHITESPACE@[25; 30) \"\\n    \"\n         EXPR_STMT@[30; 43)\n           BIN_EXPR@[30; 42)\n@@ -44,7 +44,7 @@ SOURCE_FILE@[0; 89)\n             WHITESPACE@[40; 41) \" \"\n             LITERAL@[41; 42)\n               INT_NUMBER@[41; 42) \"1\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 48) \"\\n    \"\n         EXPR_STMT@[48; 62)\n           BIN_EXPR@[48; 61)\n@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 89)\n             WHITESPACE@[59; 60) \" \"\n             LITERAL@[60; 61)\n               INT_NUMBER@[60; 61) \"1\"\n-          SEMI@[61; 62) \";\"\n+          SEMICOLON@[61; 62) \";\"\n         WHITESPACE@[62; 67) \"\\n    \"\n         EXPR_STMT@[67; 86)\n           BIN_EXPR@[67; 85)\n@@ -84,7 +84,7 @@ SOURCE_FILE@[0; 89)\n             WHITESPACE@[80; 81) \" \"\n             LITERAL@[81; 85)\n               INT_NUMBER@[81; 85) \"0x37\"\n-          SEMI@[85; 86) \";\"\n+          SEMICOLON@[85; 86) \";\"\n         WHITESPACE@[86; 87) \"\\n\"\n         R_CURLY@[87; 88) \"}\"\n   WHITESPACE@[88; 89) \"\\n\""}, {"sha": "aaef408cc662f23666c450e41c2f200de5f60c38", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0031_while_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 93)\n               BLOCK@[26; 28)\n                 L_CURLY@[26; 27) \"{\"\n                 R_CURLY@[27; 28) \"}\"\n-          SEMI@[28; 29) \";\"\n+          SEMICOLON@[28; 29) \";\"\n         WHITESPACE@[29; 34) \"\\n    \"\n         EXPR_STMT@[34; 67)\n           WHILE_EXPR@[34; 66)\n@@ -63,7 +63,7 @@ SOURCE_FILE@[0; 93)\n               BLOCK@[64; 66)\n                 L_CURLY@[64; 65) \"{\"\n                 R_CURLY@[65; 66) \"}\"\n-          SEMI@[66; 67) \";\"\n+          SEMICOLON@[66; 67) \";\"\n         WHITESPACE@[67; 72) \"\\n    \"\n         EXPR_STMT@[72; 90)\n           WHILE_EXPR@[72; 89)\n@@ -83,7 +83,7 @@ SOURCE_FILE@[0; 93)\n               BLOCK@[87; 89)\n                 L_CURLY@[87; 88) \"{\"\n                 R_CURLY@[88; 89) \"}\"\n-          SEMI@[89; 90) \";\"\n+          SEMICOLON@[89; 90) \";\"\n         WHITESPACE@[90; 91) \"\\n\"\n         R_CURLY@[91; 92) \"}\"\n   WHITESPACE@[92; 93) \"\\n\""}, {"sha": "bad7698500214345e4c33a21570db35a1805b345", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0032_fn_pointer_type.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0032_fn_pointer_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 113)\n       PARAM_LIST@[11; 13)\n         L_PAREN@[11; 12) \"(\"\n         R_PAREN@[12; 13) \")\"\n-    SEMI@[13; 14) \";\"\n+    SEMICOLON@[13; 14) \";\"\n   WHITESPACE@[14; 15) \"\\n\"\n   TYPE_ALIAS_DEF@[15; 36)\n     TYPE_KW@[15; 19) \"type\"\n@@ -29,7 +29,7 @@ SOURCE_FILE@[0; 113)\n       PARAM_LIST@[33; 35)\n         L_PAREN@[33; 34) \"(\"\n         R_PAREN@[34; 35) \")\"\n-    SEMI@[35; 36) \";\"\n+    SEMICOLON@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\"\n   TYPE_ALIAS_DEF@[37; 69)\n     TYPE_KW@[37; 41) \"type\"\n@@ -51,7 +51,7 @@ SOURCE_FILE@[0; 113)\n       PARAM_LIST@[66; 68)\n         L_PAREN@[66; 67) \"(\"\n         R_PAREN@[67; 68) \")\"\n-    SEMI@[68; 69) \";\"\n+    SEMICOLON@[68; 69) \";\"\n   WHITESPACE@[69; 70) \"\\n\"\n   TYPE_ALIAS_DEF@[70; 112)\n     TYPE_KW@[70; 74) \"type\"\n@@ -82,7 +82,7 @@ SOURCE_FILE@[0; 113)\n         COMMA@[98; 99) \",\"\n         WHITESPACE@[99; 100) \" \"\n         PARAM@[100; 103)\n-          DOTDOTDOT@[100; 103) \"...\"\n+          DOT3@[100; 103) \"...\"\n         WHITESPACE@[103; 104) \" \"\n         R_PAREN@[104; 105) \")\"\n       WHITESPACE@[105; 106) \" \"\n@@ -94,5 +94,5 @@ SOURCE_FILE@[0; 113)\n             PATH_SEGMENT@[109; 111)\n               NAME_REF@[109; 111)\n                 IDENT@[109; 111) \"u8\"\n-    SEMI@[111; 112) \";\"\n+    SEMICOLON@[111; 112) \";\"\n   WHITESPACE@[112; 113) \"\\n\""}, {"sha": "e6ee20b9a6cfb334bb6fad32001e9be4194a9318", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0033_reference_type;.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 54)\n       TUPLE_TYPE@[10; 12)\n         L_PAREN@[10; 11) \"(\"\n         R_PAREN@[11; 12) \")\"\n-    SEMI@[12; 13) \";\"\n+    SEMICOLON@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n   TYPE_ALIAS_DEF@[14; 35)\n     TYPE_KW@[14; 18) \"type\"\n@@ -29,7 +29,7 @@ SOURCE_FILE@[0; 54)\n       TUPLE_TYPE@[32; 34)\n         L_PAREN@[32; 33) \"(\"\n         R_PAREN@[33; 34) \")\"\n-    SEMI@[34; 35) \";\"\n+    SEMICOLON@[34; 35) \";\"\n   WHITESPACE@[35; 36) \"\\n\"\n   TYPE_ALIAS_DEF@[36; 53)\n     TYPE_KW@[36; 40) \"type\"\n@@ -46,5 +46,5 @@ SOURCE_FILE@[0; 54)\n       TUPLE_TYPE@[50; 52)\n         L_PAREN@[50; 51) \"(\"\n         R_PAREN@[51; 52) \")\"\n-    SEMI@[52; 53) \";\"\n+    SEMICOLON@[52; 53) \";\"\n   WHITESPACE@[53; 54) \"\\n\""}, {"sha": "4bb95314f6708d07f61a47e3f8015505dde346ca", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0034_break_expr.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,22 +22,22 @@ SOURCE_FILE@[0; 102)\n               EXPR_STMT@[30; 36)\n                 BREAK_EXPR@[30; 35)\n                   BREAK_KW@[30; 35) \"break\"\n-                SEMI@[35; 36) \";\"\n+                SEMICOLON@[35; 36) \";\"\n               WHITESPACE@[36; 45) \"\\n        \"\n               EXPR_STMT@[45; 54)\n                 BREAK_EXPR@[45; 53)\n                   BREAK_KW@[45; 50) \"break\"\n                   WHITESPACE@[50; 51) \" \"\n                   LIFETIME@[51; 53) \"\\'l\"\n-                SEMI@[53; 54) \";\"\n+                SEMICOLON@[53; 54) \";\"\n               WHITESPACE@[54; 63) \"\\n        \"\n               EXPR_STMT@[63; 72)\n                 BREAK_EXPR@[63; 71)\n                   BREAK_KW@[63; 68) \"break\"\n                   WHITESPACE@[68; 69) \" \"\n                   LITERAL@[69; 71)\n                     INT_NUMBER@[69; 71) \"92\"\n-                SEMI@[71; 72) \";\"\n+                SEMICOLON@[71; 72) \";\"\n               WHITESPACE@[72; 81) \"\\n        \"\n               EXPR_STMT@[81; 93)\n                 BREAK_EXPR@[81; 92)\n@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 102)\n                   WHITESPACE@[89; 90) \" \"\n                   LITERAL@[90; 92)\n                     INT_NUMBER@[90; 92) \"92\"\n-                SEMI@[92; 93) \";\"\n+                SEMICOLON@[92; 93) \";\"\n               WHITESPACE@[93; 98) \"\\n    \"\n               R_CURLY@[98; 99) \"}\"\n         WHITESPACE@[99; 100) \"\\n\""}, {"sha": "1cd7a443f517106922a0874b01c667ce0e52980b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0037_qual_paths.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0037_qual_paths.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -26,11 +26,11 @@ SOURCE_FILE@[0; 71)\n                   NAME_REF@[15; 16)\n                     IDENT@[15; 16) \"B\"\n             R_ANGLE@[16; 17) \">\"\n-        COLONCOLON@[17; 19) \"::\"\n+        COLON2@[17; 19) \"::\"\n         PATH_SEGMENT@[19; 25)\n           NAME_REF@[19; 25)\n             IDENT@[19; 25) \"Output\"\n-    SEMI@[25; 26) \";\"\n+    SEMICOLON@[25; 26) \";\"\n   WHITESPACE@[26; 27) \"\\n\"\n   FN_DEF@[27; 70)\n     FN_KW@[27; 29) \"fn\"\n@@ -66,14 +66,14 @@ SOURCE_FILE@[0; 71)\n                           NAME_REF@[48; 55)\n                             IDENT@[48; 55) \"Default\"\n                     R_ANGLE@[55; 56) \">\"\n-                COLONCOLON@[56; 58) \"::\"\n+                COLON2@[56; 58) \"::\"\n                 PATH_SEGMENT@[58; 65)\n                   NAME_REF@[58; 65)\n                     IDENT@[58; 65) \"default\"\n             ARG_LIST@[65; 67)\n               L_PAREN@[65; 66) \"(\"\n               R_PAREN@[66; 67) \")\"\n-          SEMI@[67; 68) \";\"\n+          SEMICOLON@[67; 68) \";\"\n         WHITESPACE@[68; 69) \" \"\n         R_CURLY@[69; 70) \"}\"\n   WHITESPACE@[70; 71) \"\\n\""}, {"sha": "f5db5a9e600c4d10ef2ae4aae0c555d7a8fbf36d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0038_full_range_expr.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0038_full_range_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,9 +21,9 @@ SOURCE_FILE@[0; 21)\n                     IDENT@[11; 13) \"xs\"\n             L_BRACK@[13; 14) \"[\"\n             RANGE_EXPR@[14; 16)\n-              DOTDOT@[14; 16) \"..\"\n+              DOT2@[14; 16) \"..\"\n             R_BRACK@[16; 17) \"]\"\n-          SEMI@[17; 18) \";\"\n+          SEMICOLON@[17; 18) \";\"\n         WHITESPACE@[18; 19) \" \"\n         R_CURLY@[19; 20) \"}\"\n   WHITESPACE@[20; 21) \"\\n\""}, {"sha": "2d9db61b30f9b0ea5f5954894a76b75db483916c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -51,5 +51,5 @@ SOURCE_FILE@[0; 46)\n                     NAME_REF@[40; 43)\n                       IDENT@[40; 43) \"u64\"\n             R_ANGLE@[43; 44) \">\"\n-    SEMI@[44; 45) \";\"\n+    SEMICOLON@[44; 45) \";\"\n   WHITESPACE@[45; 46) \"\\n\""}, {"sha": "4c175e21085da73548fda5716d87a9a20f8b32e4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0040_crate_keyword_vis.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -59,5 +59,5 @@ SOURCE_FILE@[0; 71)\n               NAME_REF@[65; 68)\n                 IDENT@[65; 68) \"u32\"\n       R_PAREN@[68; 69) \")\"\n-    SEMI@[69; 70) \";\"\n+    SEMICOLON@[69; 70) \";\"\n   WHITESPACE@[70; 71) \"\\n\""}, {"sha": "f9e677a031ae18be9337e950f756f2a17115c880", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0042_call_expr.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0042_call_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -29,7 +29,7 @@ SOURCE_FILE@[0; 118)\n             ARG_LIST@[24; 26)\n               L_PAREN@[24; 25) \"(\"\n               R_PAREN@[25; 26) \")\"\n-          SEMI@[26; 27) \";\"\n+          SEMICOLON@[26; 27) \";\"\n         WHITESPACE@[27; 32) \"\\n    \"\n         LET_STMT@[32; 54)\n           LET_KW@[32; 35) \"let\"\n@@ -65,7 +65,7 @@ SOURCE_FILE@[0; 118)\n                 INT_NUMBER@[50; 51) \"2\"\n               COMMA@[51; 52) \",\"\n               R_PAREN@[52; 53) \")\"\n-          SEMI@[53; 54) \";\"\n+          SEMICOLON@[53; 54) \";\"\n         WHITESPACE@[54; 59) \"\\n    \"\n         LET_STMT@[59; 84)\n           LET_KW@[59; 62) \"let\"\n@@ -95,15 +95,15 @@ SOURCE_FILE@[0; 118)\n                               NAME_REF@[70; 73)\n                                 IDENT@[70; 73) \"Foo\"\n                         R_ANGLE@[73; 74) \">\"\n-                    COLONCOLON@[74; 76) \"::\"\n+                    COLON2@[74; 76) \"::\"\n                     PATH_SEGMENT@[76; 80)\n                       NAME_REF@[76; 80)\n                         IDENT@[76; 80) \"func\"\n                 ARG_LIST@[80; 82)\n                   L_PAREN@[80; 81) \"(\"\n                   R_PAREN@[81; 82) \")\"\n               R_PAREN@[82; 83) \")\"\n-          SEMI@[83; 84) \";\"\n+          SEMICOLON@[83; 84) \";\"\n         WHITESPACE@[84; 89) \"\\n    \"\n         EXPR_STMT@[89; 115)\n           CALL_EXPR@[89; 114)\n@@ -134,15 +134,15 @@ SOURCE_FILE@[0; 118)\n                               NAME_REF@[99; 104)\n                                 IDENT@[99; 104) \"Trait\"\n                         R_ANGLE@[104; 105) \">\"\n-                    COLONCOLON@[105; 107) \"::\"\n+                    COLON2@[105; 107) \"::\"\n                     PATH_SEGMENT@[107; 111)\n                       NAME_REF@[107; 111)\n                         IDENT@[107; 111) \"func\"\n                 ARG_LIST@[111; 113)\n                   L_PAREN@[111; 112) \"(\"\n                   R_PAREN@[112; 113) \")\"\n               R_PAREN@[113; 114) \")\"\n-          SEMI@[114; 115) \";\"\n+          SEMICOLON@[114; 115) \";\"\n         WHITESPACE@[115; 116) \"\\n\"\n         R_CURLY@[116; 117) \"}\"\n   WHITESPACE@[117; 118) \"\\n\""}, {"sha": "580f29cfb025bcec05ab90323ffd12f1f2c3e24d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0043_use_alias.rast", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0043_use_alias.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 198)\n           PATH_SEGMENT@[4; 8)\n             NAME_REF@[4; 8)\n               IDENT@[4; 8) \"some\"\n-        COLONCOLON@[8; 10) \"::\"\n+        COLON2@[8; 10) \"::\"\n         PATH_SEGMENT@[10; 14)\n           NAME_REF@[10; 14)\n             IDENT@[10; 14) \"path\"\n@@ -18,7 +18,7 @@ SOURCE_FILE@[0; 198)\n         WHITESPACE@[17; 18) \" \"\n         NAME@[18; 27)\n           IDENT@[18; 27) \"some_name\"\n-    SEMI@[27; 28) \";\"\n+    SEMICOLON@[27; 28) \";\"\n   WHITESPACE@[28; 29) \"\\n\"\n   USE_ITEM@[29; 181)\n     USE_KW@[29; 32) \"use\"\n@@ -28,7 +28,7 @@ SOURCE_FILE@[0; 198)\n         PATH_SEGMENT@[33; 37)\n           NAME_REF@[33; 37)\n             IDENT@[33; 37) \"some\"\n-      COLONCOLON@[37; 39) \"::\"\n+      COLON2@[37; 39) \"::\"\n       USE_TREE_LIST@[39; 180)\n         L_CURLY@[39; 40) \"{\"\n         WHITESPACE@[40; 42) \"\\n \"\n@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 198)\n               PATH_SEGMENT@[42; 47)\n                 NAME_REF@[42; 47)\n                   IDENT@[42; 47) \"other\"\n-            COLONCOLON@[47; 49) \"::\"\n+            COLON2@[47; 49) \"::\"\n             PATH_SEGMENT@[49; 53)\n               NAME_REF@[49; 53)\n                 IDENT@[49; 53) \"path\"\n@@ -56,7 +56,7 @@ SOURCE_FILE@[0; 198)\n               PATH_SEGMENT@[75; 84)\n                 NAME_REF@[75; 84)\n                   IDENT@[75; 84) \"different\"\n-            COLONCOLON@[84; 86) \"::\"\n+            COLON2@[84; 86) \"::\"\n             PATH_SEGMENT@[86; 90)\n               NAME_REF@[86; 90)\n                 IDENT@[86; 90) \"path\"\n@@ -75,11 +75,11 @@ SOURCE_FILE@[0; 198)\n                 PATH_SEGMENT@[111; 114)\n                   NAME_REF@[111; 114)\n                     IDENT@[111; 114) \"yet\"\n-              COLONCOLON@[114; 116) \"::\"\n+              COLON2@[114; 116) \"::\"\n               PATH_SEGMENT@[116; 123)\n                 NAME_REF@[116; 123)\n                   IDENT@[116; 123) \"another\"\n-            COLONCOLON@[123; 125) \"::\"\n+            COLON2@[123; 125) \"::\"\n             PATH_SEGMENT@[125; 129)\n               NAME_REF@[125; 129)\n                 IDENT@[125; 129) \"path\"\n@@ -95,31 +95,31 @@ SOURCE_FILE@[0; 198)\n                       PATH_SEGMENT@[132; 139)\n                         NAME_REF@[132; 139)\n                           IDENT@[132; 139) \"running\"\n-                    COLONCOLON@[139; 141) \"::\"\n+                    COLON2@[139; 141) \"::\"\n                     PATH_SEGMENT@[141; 144)\n                       NAME_REF@[141; 144)\n                         IDENT@[141; 144) \"out\"\n-                  COLONCOLON@[144; 146) \"::\"\n+                  COLON2@[144; 146) \"::\"\n                   PATH_SEGMENT@[146; 148)\n                     NAME_REF@[146; 148)\n                       IDENT@[146; 148) \"of\"\n-                COLONCOLON@[148; 150) \"::\"\n+                COLON2@[148; 150) \"::\"\n                 PATH_SEGMENT@[150; 158)\n                   NAME_REF@[150; 158)\n                     IDENT@[150; 158) \"synonyms\"\n-              COLONCOLON@[158; 160) \"::\"\n+              COLON2@[158; 160) \"::\"\n               PATH_SEGMENT@[160; 164)\n                 NAME_REF@[160; 164)\n                   IDENT@[160; 164) \"for_\"\n-            COLONCOLON@[164; 166) \"::\"\n+            COLON2@[164; 166) \"::\"\n             PATH_SEGMENT@[166; 175)\n               NAME_REF@[166; 175)\n                 IDENT@[166; 175) \"different\"\n-          COLONCOLON@[175; 177) \"::\"\n+          COLON2@[175; 177) \"::\"\n           STAR@[177; 178) \"*\"\n         WHITESPACE@[178; 179) \"\\n\"\n         R_CURLY@[179; 180) \"}\"\n-    SEMI@[180; 181) \";\"\n+    SEMICOLON@[180; 181) \";\"\n   WHITESPACE@[181; 182) \"\\n\"\n   USE_ITEM@[182; 197)\n     USE_KW@[182; 185) \"use\"\n@@ -134,5 +134,5 @@ SOURCE_FILE@[0; 198)\n         AS_KW@[192; 194) \"as\"\n         WHITESPACE@[194; 195) \" \"\n         UNDERSCORE@[195; 196) \"_\"\n-    SEMI@[196; 197) \";\"\n+    SEMICOLON@[196; 197) \";\"\n   WHITESPACE@[197; 198) \"\\n\""}, {"sha": "988b58d8267965b4c712c83319f9192c6a257edf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0046_singleton_tuple_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0046_singleton_tuple_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,5 +16,5 @@ SOURCE_FILE@[0; 17)\n               IDENT@[10; 13) \"i32\"\n       COMMA@[13; 14) \",\"\n       R_PAREN@[14; 15) \")\"\n-    SEMI@[15; 16) \";\"\n+    SEMICOLON@[15; 16) \";\"\n   WHITESPACE@[16; 17) \"\\n\""}, {"sha": "036035f6c370c8709b14839c99eebb16307dd917", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0050_fn_decl.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0050_fn_decl.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@[0; 22)\n         PARAM_LIST@[16; 18)\n           L_PAREN@[16; 17) \"(\"\n           R_PAREN@[17; 18) \")\"\n-        SEMI@[18; 19) \";\"\n+        SEMICOLON@[18; 19) \";\"\n       WHITESPACE@[19; 20) \" \"\n       R_CURLY@[20; 21) \"}\"\n   WHITESPACE@[21; 22) \"\\n\""}, {"sha": "d9fc5eb8ac24288bec94d204a7187fe3d98a7624", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0051_unit_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0051_unit_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -10,5 +10,5 @@ SOURCE_FILE@[0; 13)\n     TUPLE_TYPE@[9; 11)\n       L_PAREN@[9; 10) \"(\"\n       R_PAREN@[10; 11) \")\"\n-    SEMI@[11; 12) \";\"\n+    SEMICOLON@[11; 12) \";\"\n   WHITESPACE@[12; 13) \"\\n\""}, {"sha": "8647c23bfe68f2f1638fb499a37f8dcd6a68dcd9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0052_path_type.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0052_path_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 71)\n         PATH_SEGMENT@[9; 12)\n           NAME_REF@[9; 12)\n             IDENT@[9; 12) \"Foo\"\n-    SEMI@[12; 13) \";\"\n+    SEMICOLON@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n   TYPE_ALIAS_DEF@[14; 29)\n     TYPE_KW@[14; 18) \"type\"\n@@ -25,10 +25,10 @@ SOURCE_FILE@[0; 71)\n     PATH_TYPE@[23; 28)\n       PATH@[23; 28)\n         PATH_SEGMENT@[23; 28)\n-          COLONCOLON@[23; 25) \"::\"\n+          COLON2@[23; 25) \"::\"\n           NAME_REF@[25; 28)\n             IDENT@[25; 28) \"Foo\"\n-    SEMI@[28; 29) \";\"\n+    SEMICOLON@[28; 29) \";\"\n   WHITESPACE@[29; 30) \"\\n\"\n   TYPE_ALIAS_DEF@[30; 49)\n     TYPE_KW@[30; 34) \"type\"\n@@ -43,11 +43,11 @@ SOURCE_FILE@[0; 71)\n         PATH@[39; 43)\n           PATH_SEGMENT@[39; 43)\n             SELF_KW@[39; 43) \"self\"\n-        COLONCOLON@[43; 45) \"::\"\n+        COLON2@[43; 45) \"::\"\n         PATH_SEGMENT@[45; 48)\n           NAME_REF@[45; 48)\n             IDENT@[45; 48) \"Foo\"\n-    SEMI@[48; 49) \";\"\n+    SEMICOLON@[48; 49) \";\"\n   WHITESPACE@[49; 50) \"\\n\"\n   TYPE_ALIAS_DEF@[50; 70)\n     TYPE_KW@[50; 54) \"type\"\n@@ -62,9 +62,9 @@ SOURCE_FILE@[0; 71)\n         PATH@[59; 64)\n           PATH_SEGMENT@[59; 64)\n             SUPER_KW@[59; 64) \"super\"\n-        COLONCOLON@[64; 66) \"::\"\n+        COLON2@[64; 66) \"::\"\n         PATH_SEGMENT@[66; 69)\n           NAME_REF@[66; 69)\n             IDENT@[66; 69) \"Foo\"\n-    SEMI@[69; 70) \";\"\n+    SEMICOLON@[69; 70) \";\"\n   WHITESPACE@[70; 71) \"\\n\""}, {"sha": "690d8504ea7a81405732e83f43ce7875feffd046", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0053_path_expr.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 91)\n               PATH_SEGMENT@[23; 24)\n                 NAME_REF@[23; 24)\n                   IDENT@[23; 24) \"a\"\n-          SEMI@[24; 25) \";\"\n+          SEMICOLON@[24; 25) \";\"\n         WHITESPACE@[25; 30) \"\\n    \"\n         LET_STMT@[30; 43)\n           LET_KW@[30; 33) \"let\"\n@@ -41,11 +41,11 @@ SOURCE_FILE@[0; 91)\n                 PATH_SEGMENT@[38; 39)\n                   NAME_REF@[38; 39)\n                     IDENT@[38; 39) \"a\"\n-              COLONCOLON@[39; 41) \"::\"\n+              COLON2@[39; 41) \"::\"\n               PATH_SEGMENT@[41; 42)\n                 NAME_REF@[41; 42)\n                   IDENT@[41; 42) \"b\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 48) \"\\n    \"\n         LET_STMT@[48; 65)\n           LET_KW@[48; 51) \"let\"\n@@ -58,11 +58,11 @@ SOURCE_FILE@[0; 91)\n           PATH_EXPR@[56; 64)\n             PATH@[56; 64)\n               PATH_SEGMENT@[56; 64)\n-                COLONCOLON@[56; 58) \"::\"\n+                COLON2@[56; 58) \"::\"\n                 NAME_REF@[58; 59)\n                   IDENT@[58; 59) \"a\"\n                 TYPE_ARG_LIST@[59; 64)\n-                  COLONCOLON@[59; 61) \"::\"\n+                  COLON2@[59; 61) \"::\"\n                   L_ANGLE@[61; 62) \"<\"\n                   TYPE_ARG@[62; 63)\n                     PATH_TYPE@[62; 63)\n@@ -71,7 +71,7 @@ SOURCE_FILE@[0; 91)\n                           NAME_REF@[62; 63)\n                             IDENT@[62; 63) \"b\"\n                   R_ANGLE@[63; 64) \">\"\n-          SEMI@[64; 65) \";\"\n+          SEMICOLON@[64; 65) \";\"\n         WHITESPACE@[65; 70) \"\\n    \"\n         LET_STMT@[70; 88)\n           LET_KW@[70; 73) \"let\"\n@@ -86,11 +86,11 @@ SOURCE_FILE@[0; 91)\n               PATH_SEGMENT@[78; 84)\n                 NAME_REF@[78; 84)\n                   IDENT@[78; 84) \"format\"\n-            EXCL@[84; 85) \"!\"\n+            BANG@[84; 85) \"!\"\n             TOKEN_TREE@[85; 87)\n               L_PAREN@[85; 86) \"(\"\n               R_PAREN@[86; 87) \")\"\n-          SEMI@[87; 88) \";\"\n+          SEMICOLON@[87; 88) \";\"\n         WHITESPACE@[88; 89) \"\\n\"\n         R_CURLY@[89; 90) \"}\"\n   WHITESPACE@[90; 91) \"\\n\""}, {"sha": "c6082791a052b209f27dd70908a393fde45ac540", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0056_where_clause.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -63,7 +63,7 @@ SOURCE_FILE@[0; 116)\n               PATH_SEGMENT@[64; 72)\n                 NAME_REF@[64; 72)\n                   IDENT@[64; 72) \"Iterator\"\n-            COLONCOLON@[72; 74) \"::\"\n+            COLON2@[72; 74) \"::\"\n             PATH_SEGMENT@[74; 78)\n               NAME_REF@[74; 78)\n                 IDENT@[74; 78) \"Item\"\n@@ -94,7 +94,7 @@ SOURCE_FILE@[0; 116)\n                       NAME_REF@[93; 101)\n                         IDENT@[93; 101) \"Iterator\"\n                 R_ANGLE@[101; 102) \">\"\n-            COLONCOLON@[102; 104) \"::\"\n+            COLON2@[102; 104) \"::\"\n             PATH_SEGMENT@[104; 108)\n               NAME_REF@[104; 108)\n                 IDENT@[104; 108) \"Item\""}, {"sha": "8d7083e971742c07dbd1af413e738f9f06c510ed", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0058_range_pat.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 112)\n                   LITERAL@[35; 36)\n                     INT_NUMBER@[35; 36) \"0\"\n                 WHITESPACE@[36; 37) \" \"\n-                DOTDOTDOT@[37; 40) \"...\"\n+                DOT3@[37; 40) \"...\"\n                 WHITESPACE@[40; 41) \" \"\n                 LITERAL_PAT@[41; 44)\n                   LITERAL@[41; 44)\n@@ -46,7 +46,7 @@ SOURCE_FILE@[0; 112)\n                   LITERAL@[60; 63)\n                     INT_NUMBER@[60; 63) \"101\"\n                 WHITESPACE@[63; 64) \" \"\n-                DOTDOTEQ@[64; 67) \"..=\"\n+                DOT2EQ@[64; 67) \"..=\"\n                 WHITESPACE@[67; 68) \" \"\n                 LITERAL_PAT@[68; 71)\n                   LITERAL@[68; 71)\n@@ -65,7 +65,7 @@ SOURCE_FILE@[0; 112)\n                   LITERAL@[87; 90)\n                     INT_NUMBER@[87; 90) \"200\"\n                 WHITESPACE@[90; 91) \" \"\n-                DOTDOT@[91; 93) \"..\"\n+                DOT2@[91; 93) \"..\"\n                 WHITESPACE@[93; 94) \" \"\n                 LITERAL_PAT@[94; 97)\n                   LITERAL@[94; 97)"}, {"sha": "c6e4ee532fbea3bce23152d62e6cd76f429a889b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0060_extern_crate.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0060_extern_crate.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,5 +6,5 @@ SOURCE_FILE@[0; 18)\n     WHITESPACE@[12; 13) \" \"\n     NAME_REF@[13; 16)\n       IDENT@[13; 16) \"foo\"\n-    SEMI@[16; 17) \";\"\n+    SEMICOLON@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\""}, {"sha": "89a61179967d3f80cf4facaf22b6bf6b02abf2fb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.rast", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,7 +22,7 @@ SOURCE_FILE@[0; 112)\n             RECORD_FIELD_LIST@[17; 19)\n               L_CURLY@[17; 18) \"{\"\n               R_CURLY@[18; 19) \"}\"\n-          SEMI@[19; 20) \";\"\n+          SEMICOLON@[19; 20) \";\"\n         WHITESPACE@[20; 25) \"\\n    \"\n         EXPR_STMT@[25; 41)\n           RECORD_LIT@[25; 40)\n@@ -35,8 +35,11 @@ SOURCE_FILE@[0; 112)\n               L_CURLY@[27; 28) \"{\"\n               WHITESPACE@[28; 29) \" \"\n               RECORD_FIELD@[29; 30)\n-                NAME_REF@[29; 30)\n-                  IDENT@[29; 30) \"x\"\n+                PATH_EXPR@[29; 30)\n+                  PATH@[29; 30)\n+                    PATH_SEGMENT@[29; 30)\n+                      NAME_REF@[29; 30)\n+                        IDENT@[29; 30) \"x\"\n               COMMA@[30; 31) \",\"\n               WHITESPACE@[31; 32) \" \"\n               RECORD_FIELD@[32; 37)\n@@ -49,7 +52,7 @@ SOURCE_FILE@[0; 112)\n               COMMA@[37; 38) \",\"\n               WHITESPACE@[38; 39) \" \"\n               R_CURLY@[39; 40) \"}\"\n-          SEMI@[40; 41) \";\"\n+          SEMICOLON@[40; 41) \";\"\n         WHITESPACE@[41; 46) \"\\n    \"\n         EXPR_STMT@[46; 83)\n           RECORD_LIT@[46; 82)\n@@ -62,8 +65,11 @@ SOURCE_FILE@[0; 112)\n               L_CURLY@[48; 49) \"{\"\n               WHITESPACE@[49; 50) \" \"\n               RECORD_FIELD@[50; 51)\n-                NAME_REF@[50; 51)\n-                  IDENT@[50; 51) \"x\"\n+                PATH_EXPR@[50; 51)\n+                  PATH@[50; 51)\n+                    PATH_SEGMENT@[50; 51)\n+                      NAME_REF@[50; 51)\n+                        IDENT@[50; 51) \"x\"\n               COMMA@[51; 52) \",\"\n               WHITESPACE@[52; 53) \" \"\n               RECORD_FIELD@[53; 58)\n@@ -75,15 +81,15 @@ SOURCE_FILE@[0; 112)\n                   INT_NUMBER@[56; 58) \"32\"\n               COMMA@[58; 59) \",\"\n               WHITESPACE@[59; 60) \" \"\n-              DOTDOT@[60; 62) \"..\"\n+              DOT2@[60; 62) \"..\"\n               CALL_EXPR@[62; 80)\n                 PATH_EXPR@[62; 78)\n                   PATH@[62; 78)\n                     PATH@[62; 69)\n                       PATH_SEGMENT@[62; 69)\n                         NAME_REF@[62; 69)\n                           IDENT@[62; 69) \"Default\"\n-                    COLONCOLON@[69; 71) \"::\"\n+                    COLON2@[69; 71) \"::\"\n                     PATH_SEGMENT@[71; 78)\n                       NAME_REF@[71; 78)\n                         IDENT@[71; 78) \"default\"\n@@ -92,7 +98,7 @@ SOURCE_FILE@[0; 112)\n                   R_PAREN@[79; 80) \")\"\n               WHITESPACE@[80; 81) \" \"\n               R_CURLY@[81; 82) \"}\"\n-          SEMI@[82; 83) \";\"\n+          SEMICOLON@[82; 83) \";\"\n         WHITESPACE@[83; 88) \"\\n    \"\n         EXPR_STMT@[88; 109)\n           RECORD_LIT@[88; 108)\n@@ -113,7 +119,7 @@ SOURCE_FILE@[0; 112)\n                   INT_NUMBER@[105; 106) \"1\"\n               WHITESPACE@[106; 107) \" \"\n               R_CURLY@[107; 108) \"}\"\n-          SEMI@[108; 109) \";\"\n+          SEMICOLON@[108; 109) \";\"\n         WHITESPACE@[109; 110) \"\\n\"\n         R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\""}, {"sha": "99e0a0bece8ad15a4e0353b5ae7cd5df2fade4c9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0062_mod_contents.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -18,7 +18,7 @@ SOURCE_FILE@[0; 70)\n       PATH_SEGMENT@[12; 23)\n         NAME_REF@[12; 23)\n           IDENT@[12; 23) \"macro_rules\"\n-    EXCL@[23; 24) \"!\"\n+    BANG@[23; 24) \"!\"\n     WHITESPACE@[24; 25) \" \"\n     NAME@[25; 28)\n       IDENT@[25; 28) \"foo\"\n@@ -33,26 +33,26 @@ SOURCE_FILE@[0; 70)\n         PATH_SEGMENT@[32; 35)\n           NAME_REF@[32; 35)\n             IDENT@[32; 35) \"foo\"\n-      COLONCOLON@[35; 37) \"::\"\n+      COLON2@[35; 37) \"::\"\n       PATH_SEGMENT@[37; 40)\n         NAME_REF@[37; 40)\n           IDENT@[37; 40) \"bar\"\n-    EXCL@[40; 41) \"!\"\n+    BANG@[40; 41) \"!\"\n     TOKEN_TREE@[41; 43)\n       L_PAREN@[41; 42) \"(\"\n       R_PAREN@[42; 43) \")\"\n-    SEMI@[43; 44) \";\"\n+    SEMICOLON@[43; 44) \";\"\n   WHITESPACE@[44; 45) \"\\n\"\n   MACRO_CALL@[45; 59)\n     PATH@[45; 55)\n       PATH@[45; 50)\n         PATH_SEGMENT@[45; 50)\n           SUPER_KW@[45; 50) \"super\"\n-      COLONCOLON@[50; 52) \"::\"\n+      COLON2@[50; 52) \"::\"\n       PATH_SEGMENT@[52; 55)\n         NAME_REF@[52; 55)\n           IDENT@[52; 55) \"baz\"\n-    EXCL@[55; 56) \"!\"\n+    BANG@[55; 56) \"!\"\n     WHITESPACE@[56; 57) \" \"\n     TOKEN_TREE@[57; 59)\n       L_CURLY@[57; 58) \"{\"\n@@ -63,5 +63,5 @@ SOURCE_FILE@[0; 70)\n     WHITESPACE@[66; 67) \" \"\n     NAME@[67; 68)\n       IDENT@[67; 68) \"S\"\n-    SEMI@[68; 69) \";\"\n+    SEMICOLON@[68; 69) \";\"\n   WHITESPACE@[69; 70) \"\\n\""}, {"sha": "278549a46f7403cff75c578e319851c9313ba927", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_def_neg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -2,7 +2,7 @@ SOURCE_FILE@[0; 20)\n   IMPL_DEF@[0; 19)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n-    EXCL@[5; 6) \"!\"\n+    BANG@[5; 6) \"!\"\n     PATH_TYPE@[6; 10)\n       PATH@[6; 10)\n         PATH_SEGMENT@[6; 10)"}, {"sha": "df24ae1890f0ca1ff003715cd52a1af20e13edf5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0064_if_expr.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 137)\n               BLOCK@[23; 25)\n                 L_CURLY@[23; 24) \"{\"\n                 R_CURLY@[24; 25) \"}\"\n-          SEMI@[25; 26) \";\"\n+          SEMICOLON@[25; 26) \";\"\n         WHITESPACE@[26; 31) \"\\n    \"\n         EXPR_STMT@[31; 50)\n           IF_EXPR@[31; 49)\n@@ -45,7 +45,7 @@ SOURCE_FILE@[0; 137)\n               BLOCK@[47; 49)\n                 L_CURLY@[47; 48) \"{\"\n                 R_CURLY@[48; 49) \"}\"\n-          SEMI@[49; 50) \";\"\n+          SEMICOLON@[49; 50) \";\"\n         WHITESPACE@[50; 55) \"\\n    \"\n         EXPR_STMT@[55; 91)\n           IF_EXPR@[55; 90)\n@@ -80,7 +80,7 @@ SOURCE_FILE@[0; 137)\n                 BLOCK@[88; 90)\n                   L_CURLY@[88; 89) \"{\"\n                   R_CURLY@[89; 90) \"}\"\n-          SEMI@[90; 91) \";\"\n+          SEMICOLON@[90; 91) \";\"\n         WHITESPACE@[91; 96) \"\\n    \"\n         EXPR_STMT@[96; 104)\n           IF_EXPR@[96; 103)\n@@ -97,7 +97,7 @@ SOURCE_FILE@[0; 137)\n               BLOCK@[101; 103)\n                 L_CURLY@[101; 102) \"{\"\n                 R_CURLY@[102; 103) \"}\"\n-          SEMI@[103; 104) \";\"\n+          SEMICOLON@[103; 104) \";\"\n         WHITESPACE@[104; 109) \"\\n    \"\n         EXPR_STMT@[109; 134)\n           IF_EXPR@[109; 133)\n@@ -126,7 +126,7 @@ SOURCE_FILE@[0; 137)\n                 L_CURLY@[130; 131) \"{\"\n                 WHITESPACE@[131; 132) \" \"\n                 R_CURLY@[132; 133) \"}\"\n-          SEMI@[133; 134) \";\"\n+          SEMICOLON@[133; 134) \";\"\n         WHITESPACE@[134; 135) \"\\n\"\n         R_CURLY@[135; 136) \"}\"\n   WHITESPACE@[136; 137) \"\\n\""}, {"sha": "bbf34758095b65a5dcc28b5b7ecf44852578ddee", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0065_dyn_trait_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -39,5 +39,5 @@ SOURCE_FILE@[0; 42)\n         WHITESPACE@[37; 38) \" \"\n         TYPE_BOUND@[38; 40)\n           LIFETIME@[38; 40) \"\\'a\"\n-    SEMI@[40; 41) \";\"\n+    SEMICOLON@[40; 41) \";\"\n   WHITESPACE@[41; 42) \"\\n\""}, {"sha": "85edd084509f6bbe8a43d6c97fdc886777f46ef0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -146,7 +146,7 @@ SOURCE_FILE@[0; 167)\n               COMMA@[156; 157) \",\"\n               WHITESPACE@[157; 162) \"\\n    \"\n               R_CURLY@[162; 163) \"}\"\n-          SEMI@[163; 164) \";\"\n+          SEMICOLON@[163; 164) \";\"\n         WHITESPACE@[164; 165) \"\\n\"\n         R_CURLY@[165; 166) \"}\"\n   WHITESPACE@[166; 167) \"\\n\""}, {"sha": "35994e3fdd5df01ebfdd7767d35f6e401ef6e104", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0067_crate_path.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0067_crate_path.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,9 +7,9 @@ SOURCE_FILE@[0; 16)\n         PATH@[4; 9)\n           PATH_SEGMENT@[4; 9)\n             CRATE_KW@[4; 9) \"crate\"\n-        COLONCOLON@[9; 11) \"::\"\n+        COLON2@[9; 11) \"::\"\n         PATH_SEGMENT@[11; 14)\n           NAME_REF@[11; 14)\n             IDENT@[11; 14) \"foo\"\n-    SEMI@[14; 15) \";\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\""}, {"sha": "e24247890993f9ca8719aa773141f45143889fb3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0069_use_tree_list_after_path.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0069_use_tree_list_after_path.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,7 +6,7 @@ SOURCE_FILE@[0; 37)\n       PATH@[4; 9)\n         PATH_SEGMENT@[4; 9)\n           CRATE_KW@[4; 9) \"crate\"\n-      COLONCOLON@[9; 11) \"::\"\n+      COLON2@[9; 11) \"::\"\n       USE_TREE_LIST@[11; 17)\n         L_CURLY@[11; 12) \"{\"\n         USE_TREE@[12; 16)\n@@ -15,7 +15,7 @@ SOURCE_FILE@[0; 37)\n               NAME_REF@[12; 16)\n                 IDENT@[12; 16) \"Item\"\n         R_CURLY@[16; 17) \"}\"\n-    SEMI@[17; 18) \";\"\n+    SEMICOLON@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n   USE_ITEM@[19; 36)\n     USE_KW@[19; 22) \"use\"\n@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 37)\n       PATH@[23; 27)\n         PATH_SEGMENT@[23; 27)\n           SELF_KW@[23; 27) \"self\"\n-      COLONCOLON@[27; 29) \"::\"\n+      COLON2@[27; 29) \"::\"\n       USE_TREE_LIST@[29; 35)\n         L_CURLY@[29; 30) \"{\"\n         USE_TREE@[30; 34)\n@@ -33,5 +33,5 @@ SOURCE_FILE@[0; 37)\n               NAME_REF@[30; 34)\n                 IDENT@[30; 34) \"Item\"\n         R_CURLY@[34; 35) \"}\"\n-    SEMI@[35; 36) \";\"\n+    SEMICOLON@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\""}, {"sha": "4b075569ad4d6836984fcd0a5a0c4df59a974b45", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0070_stmt_bin_expr_ambiguity.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0070_stmt_bin_expr_ambiguity.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 46)\n             WHITESPACE@[28; 29) \" \"\n             LITERAL@[29; 30)\n               INT_NUMBER@[29; 30) \"2\"\n-          SEMI@[30; 31) \";\"\n+          SEMICOLON@[30; 31) \";\"\n         WHITESPACE@[31; 36) \"\\n    \"\n         EXPR_STMT@[36; 39)\n           BLOCK_EXPR@[36; 39)\n@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 46)\n             AMP@[40; 41) \"&\"\n             LITERAL@[41; 42)\n               INT_NUMBER@[41; 42) \"2\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 44) \"\\n\"\n         R_CURLY@[44; 45) \"}\"\n   WHITESPACE@[45; 46) \"\\n\""}, {"sha": "559ffb578b7d51d141602c17b82b7656a3e8bf24", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0071_match_expr.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 97)\n               L_CURLY@[24; 25) \"{\"\n               WHITESPACE@[25; 26) \" \"\n               R_CURLY@[26; 27) \"}\"\n-          SEMI@[27; 28) \";\"\n+          SEMICOLON@[27; 28) \";\"\n         WHITESPACE@[28; 33) \"\\n    \"\n         EXPR_STMT@[33; 44)\n           MATCH_EXPR@[33; 43)\n@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 97)\n             MATCH_ARM_LIST@[41; 43)\n               L_CURLY@[41; 42) \"{\"\n               R_CURLY@[42; 43) \"}\"\n-          SEMI@[43; 44) \";\"\n+          SEMICOLON@[43; 44) \";\"\n         WHITESPACE@[44; 49) \"\\n    \"\n         EXPR_STMT@[49; 71)\n           MATCH_EXPR@[49; 70)\n@@ -65,7 +65,7 @@ SOURCE_FILE@[0; 97)\n                   R_PAREN@[67; 68) \")\"\n               WHITESPACE@[68; 69) \" \"\n               R_CURLY@[69; 70) \"}\"\n-          SEMI@[70; 71) \";\"\n+          SEMICOLON@[70; 71) \";\"\n         WHITESPACE@[71; 76) \"\\n    \"\n         EXPR_STMT@[76; 94)\n           MATCH_EXPR@[76; 93)\n@@ -90,7 +90,7 @@ SOURCE_FILE@[0; 97)\n             MATCH_ARM_LIST@[91; 93)\n               L_CURLY@[91; 92) \"{\"\n               R_CURLY@[92; 93) \"}\"\n-          SEMI@[93; 94) \";\"\n+          SEMICOLON@[93; 94) \";\"\n         WHITESPACE@[94; 95) \"\\n\"\n         R_CURLY@[95; 96) \"}\"\n   WHITESPACE@[96; 97) \"\\n\""}, {"sha": "084efaee251062eaf28b419e58cab6f497273955", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0072_return_expr.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0072_return_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -15,15 +15,15 @@ SOURCE_FILE@[0; 40)\n         EXPR_STMT@[15; 22)\n           RETURN_EXPR@[15; 21)\n             RETURN_KW@[15; 21) \"return\"\n-          SEMI@[21; 22) \";\"\n+          SEMICOLON@[21; 22) \";\"\n         WHITESPACE@[22; 27) \"\\n    \"\n         EXPR_STMT@[27; 37)\n           RETURN_EXPR@[27; 36)\n             RETURN_KW@[27; 33) \"return\"\n             WHITESPACE@[33; 34) \" \"\n             LITERAL@[34; 36)\n               INT_NUMBER@[34; 36) \"92\"\n-          SEMI@[36; 37) \";\"\n+          SEMICOLON@[36; 37) \";\"\n         WHITESPACE@[37; 38) \"\\n\"\n         R_CURLY@[38; 39) \"}\"\n   WHITESPACE@[39; 40) \"\\n\""}, {"sha": "64150b774908d9b16366927b43c4a9bbec81822d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0073_type_item_type_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0073_type_item_type_params.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,5 +16,5 @@ SOURCE_FILE@[0; 21)\n     TUPLE_TYPE@[17; 19)\n       L_PAREN@[17; 18) \"(\"\n       R_PAREN@[18; 19) \")\"\n-    SEMI@[19; 20) \";\"\n+    SEMICOLON@[19; 20) \";\"\n   WHITESPACE@[20; 21) \"\\n\""}, {"sha": "5c7cb4a88aeac6a4f0c1986519e6ce654a819efa", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0075_block.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0075_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -36,7 +36,7 @@ SOURCE_FILE@[0; 65)\n           WHITESPACE@[26; 27) \" \"\n           LITERAL@[27; 28)\n             INT_NUMBER@[27; 28) \"1\"\n-          SEMI@[28; 29) \";\"\n+          SEMICOLON@[28; 29) \";\"\n         WHITESPACE@[29; 30) \" \"\n         R_CURLY@[30; 31) \"}\"\n   WHITESPACE@[31; 32) \"\\n\"\n@@ -56,12 +56,12 @@ SOURCE_FILE@[0; 65)\n         EXPR_STMT@[41; 43)\n           LITERAL@[41; 42)\n             INT_NUMBER@[41; 42) \"1\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 44) \" \"\n         EXPR_STMT@[44; 46)\n           LITERAL@[44; 45)\n             INT_NUMBER@[44; 45) \"2\"\n-          SEMI@[45; 46) \";\"\n+          SEMICOLON@[45; 46) \";\"\n         WHITESPACE@[46; 47) \" \"\n         R_CURLY@[47; 48) \"}\"\n   WHITESPACE@[48; 49) \"\\n\"\n@@ -81,7 +81,7 @@ SOURCE_FILE@[0; 65)\n         EXPR_STMT@[58; 60)\n           LITERAL@[58; 59)\n             INT_NUMBER@[58; 59) \"1\"\n-          SEMI@[59; 60) \";\"\n+          SEMICOLON@[59; 60) \";\"\n         WHITESPACE@[60; 61) \" \"\n         LITERAL@[61; 62)\n           INT_NUMBER@[61; 62) \"2\""}, {"sha": "bb9f674e148d6cf6c50eec4cd8de57f2d13ceb5e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0077_try_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0077_try_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -20,7 +20,7 @@ SOURCE_FILE@[0; 21)\n                   NAME_REF@[15; 16)\n                     IDENT@[15; 16) \"x\"\n             QUESTION@[16; 17) \"?\"\n-          SEMI@[17; 18) \";\"\n+          SEMICOLON@[17; 18) \";\"\n         WHITESPACE@[18; 19) \"\\n\"\n         R_CURLY@[19; 20) \"}\"\n   WHITESPACE@[20; 21) \"\\n\""}, {"sha": "9a38192d949e849206f2ea2c2a133135bf58fdf8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0078_type_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_item.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,5 +12,5 @@ SOURCE_FILE@[0; 16)\n         PATH_SEGMENT@[11; 14)\n           NAME_REF@[11; 14)\n             IDENT@[11; 14) \"Bar\"\n-    SEMI@[14; 15) \";\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\""}, {"sha": "b8bafc2201a5a0dfcb0f4a734c533e3caad186db", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0080_postfix_range.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,8 +24,8 @@ SOURCE_FILE@[0; 89)\n           RANGE_EXPR@[23; 26)\n             LITERAL@[23; 24)\n               INT_NUMBER@[23; 24) \"1\"\n-            DOTDOT@[24; 26) \"..\"\n-          SEMI@[26; 27) \";\"\n+            DOT2@[24; 26) \"..\"\n+          SEMICOLON@[26; 27) \";\"\n         WHITESPACE@[27; 32) \"\\n    \"\n         EXPR_STMT@[32; 54)\n           MATCH_EXPR@[32; 53)\n@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 89)\n             RANGE_EXPR@[38; 41)\n               LITERAL@[38; 39)\n                 INT_NUMBER@[38; 39) \"1\"\n-              DOTDOT@[39; 41) \"..\"\n+              DOT2@[39; 41) \"..\"\n             WHITESPACE@[41; 42) \" \"\n             MATCH_ARM_LIST@[42; 53)\n               L_CURLY@[42; 43) \"{\"\n@@ -50,7 +50,7 @@ SOURCE_FILE@[0; 89)\n                   R_PAREN@[50; 51) \")\"\n               WHITESPACE@[51; 52) \" \"\n               R_CURLY@[52; 53) \"}\"\n-          SEMI@[53; 54) \";\"\n+          SEMICOLON@[53; 54) \";\"\n         WHITESPACE@[54; 59) \"\\n    \"\n         EXPR_STMT@[59; 86)\n           MATCH_EXPR@[59; 85)\n@@ -69,7 +69,7 @@ SOURCE_FILE@[0; 89)\n                 ARG_LIST@[68; 70)\n                   L_PAREN@[68; 69) \"(\"\n                   R_PAREN@[69; 70) \")\"\n-              DOTDOT@[70; 72) \"..\"\n+              DOT2@[70; 72) \"..\"\n               PATH_EXPR@[72; 73)\n                 PATH@[72; 73)\n                   PATH_SEGMENT@[72; 73)\n@@ -90,7 +90,7 @@ SOURCE_FILE@[0; 89)\n                   R_PAREN@[82; 83) \")\"\n               WHITESPACE@[83; 84) \" \"\n               R_CURLY@[84; 85) \"}\"\n-          SEMI@[85; 86) \";\"\n+          SEMICOLON@[85; 86) \";\"\n         WHITESPACE@[86; 87) \"\\n\"\n         R_CURLY@[87; 88) \"}\"\n   WHITESPACE@[88; 89) \"\\n\""}, {"sha": "00c4e4220400caef2a686ef5e665604ce109121c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 200)\n           TUPLE_TYPE@[25; 27)\n             L_PAREN@[25; 26) \"(\"\n             R_PAREN@[26; 27) \")\"\n-    SEMI@[27; 28) \";\"\n+    SEMICOLON@[27; 28) \";\"\n   WHITESPACE@[28; 29) \"\\n\"\n   FN_DEF@[29; 79)\n     FN_KW@[29; 31) \"fn\"\n@@ -222,7 +222,7 @@ SOURCE_FILE@[0; 200)\n                         NAME_REF@[177; 180)\n                           IDENT@[177; 180) \"Baz\"\n                   R_ANGLE@[180; 181) \">\"\n-              COLONCOLON@[181; 183) \"::\"\n+              COLON2@[181; 183) \"::\"\n               PATH_SEGMENT@[183; 186)\n                 NAME_REF@[183; 186)\n                   IDENT@[183; 186) \"Foo\""}, {"sha": "2999977fc9662ca4162b4424ab5390570917ba1a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0082_ref_expr.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 52)\n             AMP@[23; 24) \"&\"\n             LITERAL@[24; 25)\n               INT_NUMBER@[24; 25) \"1\"\n-          SEMI@[25; 26) \";\"\n+          SEMICOLON@[25; 26) \";\"\n         WHITESPACE@[26; 31) \"\\n    \"\n         LET_STMT@[31; 49)\n           LET_KW@[31; 34) \"let\"\n@@ -49,7 +49,7 @@ SOURCE_FILE@[0; 52)\n                 ARG_LIST@[46; 48)\n                   L_PAREN@[46; 47) \"(\"\n                   R_PAREN@[47; 48) \")\"\n-          SEMI@[48; 49) \";\"\n+          SEMICOLON@[48; 49) \";\"\n         WHITESPACE@[49; 50) \"\\n\"\n         R_CURLY@[50; 51) \"}\"\n   WHITESPACE@[51; 52) \"\\n\""}, {"sha": "13393e4b82cbaf2a45e7118c5b8f29611d5c1c0d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0083_struct_items.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,7 +4,7 @@ SOURCE_FILE@[0; 106)\n     WHITESPACE@[6; 7) \" \"\n     NAME@[7; 10)\n       IDENT@[7; 10) \"Foo\"\n-    SEMI@[10; 11) \";\"\n+    SEMICOLON@[10; 11) \";\"\n   WHITESPACE@[11; 12) \"\\n\"\n   STRUCT_DEF@[12; 25)\n     STRUCT_KW@[12; 18) \"struct\"\n@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 106)\n     TUPLE_FIELD_DEF_LIST@[36; 38)\n       L_PAREN@[36; 37) \"(\"\n       R_PAREN@[37; 38) \")\"\n-    SEMI@[38; 39) \";\"\n+    SEMICOLON@[38; 39) \";\"\n   WHITESPACE@[39; 40) \"\\n\"\n   STRUCT_DEF@[40; 66)\n     STRUCT_KW@[40; 46) \"struct\"\n@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 106)\n               NAME_REF@[59; 64)\n                 IDENT@[59; 64) \"usize\"\n       R_PAREN@[64; 65) \")\"\n-    SEMI@[65; 66) \";\"\n+    SEMICOLON@[65; 66) \";\"\n   WHITESPACE@[66; 67) \"\\n\"\n   STRUCT_DEF@[67; 105)\n     STRUCT_KW@[67; 73) \"struct\""}, {"sha": "79d193616d7209f048fb2b7dae258cc86643ff5c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0084_paren_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0084_paren_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0084_paren_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0084_paren_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -15,5 +15,5 @@ SOURCE_FILE@[0; 16)\n             NAME_REF@[10; 13)\n               IDENT@[10; 13) \"i32\"\n       R_PAREN@[13; 14) \")\"\n-    SEMI@[14; 15) \";\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\""}, {"sha": "c2cec89b40fa4cbb1be7fef58f82adafd9dffb18", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,7 +22,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[22; 23) \" \"\n           LITERAL@[23; 27)\n             TRUE_KW@[23; 27) \"true\"\n-          SEMI@[27; 28) \";\"\n+          SEMICOLON@[27; 28) \";\"\n         WHITESPACE@[28; 33) \"\\n    \"\n         LET_STMT@[33; 47)\n           LET_KW@[33; 36) \"let\"\n@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[40; 41) \" \"\n           LITERAL@[41; 46)\n             FALSE_KW@[41; 46) \"false\"\n-          SEMI@[46; 47) \";\"\n+          SEMICOLON@[46; 47) \";\"\n         WHITESPACE@[47; 52) \"\\n    \"\n         LET_STMT@[52; 62)\n           LET_KW@[52; 55) \"let\"\n@@ -46,7 +46,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[59; 60) \" \"\n           LITERAL@[60; 61)\n             INT_NUMBER@[60; 61) \"1\"\n-          SEMI@[61; 62) \";\"\n+          SEMICOLON@[61; 62) \";\"\n         WHITESPACE@[62; 67) \"\\n    \"\n         LET_STMT@[67; 79)\n           LET_KW@[67; 70) \"let\"\n@@ -58,7 +58,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[74; 75) \" \"\n           LITERAL@[75; 78)\n             FLOAT_NUMBER@[75; 78) \"2.0\"\n-          SEMI@[78; 79) \";\"\n+          SEMICOLON@[78; 79) \";\"\n         WHITESPACE@[79; 84) \"\\n    \"\n         LET_STMT@[84; 97)\n           LET_KW@[84; 87) \"let\"\n@@ -70,7 +70,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[91; 92) \" \"\n           LITERAL@[92; 96)\n             BYTE@[92; 96) \"b\\'a\\'\"\n-          SEMI@[96; 97) \";\"\n+          SEMICOLON@[96; 97) \";\"\n         WHITESPACE@[97; 102) \"\\n    \"\n         LET_STMT@[102; 114)\n           LET_KW@[102; 105) \"let\"\n@@ -82,7 +82,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[109; 110) \" \"\n           LITERAL@[110; 113)\n             CHAR@[110; 113) \"\\'b\\'\"\n-          SEMI@[113; 114) \";\"\n+          SEMICOLON@[113; 114) \";\"\n         WHITESPACE@[114; 119) \"\\n    \"\n         LET_STMT@[119; 131)\n           LET_KW@[119; 122) \"let\"\n@@ -94,7 +94,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[126; 127) \" \"\n           LITERAL@[127; 130)\n             STRING@[127; 130) \"\\\"c\\\"\"\n-          SEMI@[130; 131) \";\"\n+          SEMICOLON@[130; 131) \";\"\n         WHITESPACE@[131; 136) \"\\n    \"\n         LET_STMT@[136; 149)\n           LET_KW@[136; 139) \"let\"\n@@ -106,7 +106,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[143; 144) \" \"\n           LITERAL@[144; 148)\n             RAW_STRING@[144; 148) \"r\\\"d\\\"\"\n-          SEMI@[148; 149) \";\"\n+          SEMICOLON@[148; 149) \";\"\n         WHITESPACE@[149; 154) \"\\n    \"\n         LET_STMT@[154; 167)\n           LET_KW@[154; 157) \"let\"\n@@ -118,7 +118,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[161; 162) \" \"\n           LITERAL@[162; 166)\n             BYTE_STRING@[162; 166) \"b\\\"e\\\"\"\n-          SEMI@[166; 167) \";\"\n+          SEMICOLON@[166; 167) \";\"\n         WHITESPACE@[167; 172) \"\\n    \"\n         LET_STMT@[172; 186)\n           LET_KW@[172; 175) \"let\"\n@@ -130,7 +130,7 @@ SOURCE_FILE@[0; 189)\n           WHITESPACE@[179; 180) \" \"\n           LITERAL@[180; 185)\n             RAW_BYTE_STRING@[180; 185) \"br\\\"f\\\"\"\n-          SEMI@[185; 186) \";\"\n+          SEMICOLON@[185; 186) \";\"\n         WHITESPACE@[186; 187) \"\\n\"\n         R_CURLY@[187; 188) \"}\"\n   WHITESPACE@[188; 189) \"\\n\""}, {"sha": "1d779644964129b415d41046a5b8d01b90853a1d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0090_type_param_default.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0090_type_param_default.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0090_type_param_default.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0090_type_param_default.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -18,5 +18,5 @@ SOURCE_FILE@[0; 19)\n               NAME_REF@[13; 16)\n                 IDENT@[13; 16) \"i32\"\n       R_ANGLE@[16; 17) \">\"\n-    SEMI@[17; 18) \";\"\n+    SEMICOLON@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\""}, {"sha": "db6013c6f2829310bd3d338bd66aeb582ad97cc4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0092_fn_pointer_type_with_ret.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0092_fn_pointer_type_with_ret.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0092_fn_pointer_type_with_ret.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0092_fn_pointer_type_with_ret.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -19,5 +19,5 @@ SOURCE_FILE@[0; 21)\n         TUPLE_TYPE@[17; 19)\n           L_PAREN@[17; 18) \"(\"\n           R_PAREN@[18; 19) \")\"\n-    SEMI@[19; 20) \";\"\n+    SEMICOLON@[19; 20) \";\"\n   WHITESPACE@[20; 21) \"\\n\""}, {"sha": "118cfc096a7487c09c3d5dec622f4867df1c7ffa", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0093_index_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0093_index_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0093_index_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0093_index_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -28,7 +28,7 @@ SOURCE_FILE@[0; 26)\n             LITERAL@[20; 21)\n               INT_NUMBER@[20; 21) \"2\"\n             R_BRACK@[21; 22) \"]\"\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 24) \"\\n\"\n         R_CURLY@[24; 25) \"}\"\n   WHITESPACE@[25; 26) \"\\n\""}, {"sha": "ebe7816a4f40f68b7061c864871ac010f6e93f49", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0095_placeholder_pat.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0095_placeholder_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0095_placeholder_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0095_placeholder_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 26)\n           TUPLE_EXPR@[20; 22)\n             L_PAREN@[20; 21) \"(\"\n             R_PAREN@[21; 22) \")\"\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 24) \" \"\n         R_CURLY@[24; 25) \"}\"\n   WHITESPACE@[25; 26) \"\\n\""}, {"sha": "6bd6f5a6b2afc6ca95f90290e6c5778f5bd98a66", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0096_no_semi_after_block.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -95,7 +95,7 @@ SOURCE_FILE@[0; 167)\n               PATH_SEGMENT@[109; 120)\n                 NAME_REF@[109; 120)\n                   IDENT@[109; 120) \"macro_rules\"\n-            EXCL@[120; 121) \"!\"\n+            BANG@[120; 121) \"!\"\n             WHITESPACE@[121; 122) \" \"\n             NAME@[122; 126)\n               IDENT@[122; 126) \"test\"\n@@ -121,7 +121,7 @@ SOURCE_FILE@[0; 167)\n             PATH_SEGMENT@[157; 161)\n               NAME_REF@[157; 161)\n                 IDENT@[157; 161) \"test\"\n-          EXCL@[161; 162) \"!\"\n+          BANG@[161; 162) \"!\"\n           TOKEN_TREE@[162; 164)\n             L_CURLY@[162; 163) \"{\"\n             R_CURLY@[163; 164) \"}\""}, {"sha": "d25f087a525580de3e851cbe28cad09e5a87b8fc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0100_for_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0100_for_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0100_for_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0100_for_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -30,7 +30,7 @@ SOURCE_FILE@[0; 33)\n               BLOCK@[27; 29)\n                 L_CURLY@[27; 28) \"{\"\n                 R_CURLY@[28; 29) \"}\"\n-          SEMI@[29; 30) \";\"\n+          SEMICOLON@[29; 30) \";\"\n         WHITESPACE@[30; 31) \"\\n\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\""}, {"sha": "c2614543ca58af1136cd12d53833ec2354593ca3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -30,7 +30,7 @@ SOURCE_FILE@[0; 119)\n           TUPLE_EXPR@[26; 28)\n             L_PAREN@[26; 27) \"(\"\n             R_PAREN@[27; 28) \")\"\n-          SEMI@[28; 29) \";\"\n+          SEMICOLON@[28; 29) \";\"\n         WHITESPACE@[29; 34) \"\\n    \"\n         LET_STMT@[34; 62)\n           LET_KW@[34; 37) \"let\"\n@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 119)\n           TUPLE_EXPR@[59; 61)\n             L_PAREN@[59; 60) \"(\"\n             R_PAREN@[60; 61) \")\"\n-          SEMI@[61; 62) \";\"\n+          SEMICOLON@[61; 62) \";\"\n         WHITESPACE@[62; 67) \"\\n    \"\n         LET_STMT@[67; 90)\n           LET_KW@[67; 70) \"let\"\n@@ -87,15 +87,15 @@ SOURCE_FILE@[0; 119)\n                   UNDERSCORE@[78; 79) \"_\"\n               COMMA@[79; 80) \",\"\n               WHITESPACE@[80; 81) \" \"\n-              DOTDOT@[81; 83) \"..\"\n+              DOT2@[81; 83) \"..\"\n               R_CURLY@[83; 84) \"}\"\n           WHITESPACE@[84; 85) \" \"\n           EQ@[85; 86) \"=\"\n           WHITESPACE@[86; 87) \" \"\n           TUPLE_EXPR@[87; 89)\n             L_PAREN@[87; 88) \"(\"\n             R_PAREN@[88; 89) \")\"\n-          SEMI@[89; 90) \";\"\n+          SEMICOLON@[89; 90) \";\"\n         WHITESPACE@[90; 95) \"\\n    \"\n         LET_STMT@[95; 116)\n           LET_KW@[95; 98) \"let\"\n@@ -125,7 +125,7 @@ SOURCE_FILE@[0; 119)\n           TUPLE_EXPR@[113; 115)\n             L_PAREN@[113; 114) \"(\"\n             R_PAREN@[114; 115) \")\"\n-          SEMI@[115; 116) \";\"\n+          SEMICOLON@[115; 116) \";\"\n         WHITESPACE@[116; 117) \"\\n\"\n         R_CURLY@[117; 118) \"}\"\n   WHITESPACE@[118; 119) \"\\n\""}, {"sha": "60fbf277133eb07d7299c5b90bf7ef1d8c969325", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0103_array_expr.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0103_array_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0103_array_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0103_array_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,15 +16,15 @@ SOURCE_FILE@[0; 55)\n           ARRAY_EXPR@[15; 17)\n             L_BRACK@[15; 16) \"[\"\n             R_BRACK@[16; 17) \"]\"\n-          SEMI@[17; 18) \";\"\n+          SEMICOLON@[17; 18) \";\"\n         WHITESPACE@[18; 23) \"\\n    \"\n         EXPR_STMT@[23; 27)\n           ARRAY_EXPR@[23; 26)\n             L_BRACK@[23; 24) \"[\"\n             LITERAL@[24; 25)\n               INT_NUMBER@[24; 25) \"1\"\n             R_BRACK@[25; 26) \"]\"\n-          SEMI@[26; 27) \";\"\n+          SEMICOLON@[26; 27) \";\"\n         WHITESPACE@[27; 32) \"\\n    \"\n         EXPR_STMT@[32; 40)\n           ARRAY_EXPR@[32; 39)\n@@ -37,19 +37,19 @@ SOURCE_FILE@[0; 55)\n               INT_NUMBER@[36; 37) \"2\"\n             COMMA@[37; 38) \",\"\n             R_BRACK@[38; 39) \"]\"\n-          SEMI@[39; 40) \";\"\n+          SEMICOLON@[39; 40) \";\"\n         WHITESPACE@[40; 45) \"\\n    \"\n         EXPR_STMT@[45; 52)\n           ARRAY_EXPR@[45; 51)\n             L_BRACK@[45; 46) \"[\"\n             LITERAL@[46; 47)\n               INT_NUMBER@[46; 47) \"1\"\n-            SEMI@[47; 48) \";\"\n+            SEMICOLON@[47; 48) \";\"\n             WHITESPACE@[48; 49) \" \"\n             LITERAL@[49; 50)\n               INT_NUMBER@[49; 50) \"2\"\n             R_BRACK@[50; 51) \"]\"\n-          SEMI@[51; 52) \";\"\n+          SEMICOLON@[51; 52) \";\"\n         WHITESPACE@[52; 53) \"\\n\"\n         R_CURLY@[53; 54) \"}\"\n   WHITESPACE@[54; 55) \"\\n\""}, {"sha": "d65c75c65a9b1b46787aa73b987ae5355228c847", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0104_path_fn_trait_args.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -37,5 +37,5 @@ SOURCE_FILE@[0; 29)\n                         L_PAREN@[24; 25) \"(\"\n                         R_PAREN@[25; 26) \")\"\n             R_ANGLE@[26; 27) \">\"\n-    SEMI@[27; 28) \";\"\n+    SEMICOLON@[27; 28) \";\"\n   WHITESPACE@[28; 29) \"\\n\""}, {"sha": "5635cba9bcb70723ed091b56d11c2f979decfc35", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0105_block_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -17,7 +17,7 @@ SOURCE_FILE@[0; 52)\n             BLOCK@[15; 17)\n               L_CURLY@[15; 16) \"{\"\n               R_CURLY@[16; 17) \"}\"\n-          SEMI@[17; 18) \";\"\n+          SEMICOLON@[17; 18) \";\"\n         WHITESPACE@[18; 23) \"\\n    \"\n         EXPR_STMT@[23; 33)\n           BLOCK_EXPR@[23; 32)\n@@ -26,7 +26,7 @@ SOURCE_FILE@[0; 52)\n             BLOCK@[30; 32)\n               L_CURLY@[30; 31) \"{\"\n               R_CURLY@[31; 32) \"}\"\n-          SEMI@[32; 33) \";\"\n+          SEMICOLON@[32; 33) \";\"\n         WHITESPACE@[33; 38) \"\\n    \"\n         EXPR_STMT@[38; 49)\n           BLOCK_EXPR@[38; 48)\n@@ -37,7 +37,7 @@ SOURCE_FILE@[0; 52)\n             BLOCK@[46; 48)\n               L_CURLY@[46; 47) \"{\"\n               R_CURLY@[47; 48) \"}\"\n-          SEMI@[48; 49) \";\"\n+          SEMICOLON@[48; 49) \";\"\n         WHITESPACE@[49; 50) \"\\n\"\n         R_CURLY@[50; 51) \"}\"\n   WHITESPACE@[51; 52) \"\\n\""}, {"sha": "157dfcdb83b62dcfde92bf03e1ce57b14cc42077", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0106_lambda_expr.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 134)\n             TUPLE_EXPR@[18; 20)\n               L_PAREN@[18; 19) \"(\"\n               R_PAREN@[19; 20) \")\"\n-          SEMI@[20; 21) \";\"\n+          SEMICOLON@[20; 21) \";\"\n         WHITESPACE@[21; 26) \"\\n    \"\n         EXPR_STMT@[26; 43)\n           LAMBDA_EXPR@[26; 42)\n@@ -46,7 +46,7 @@ SOURCE_FILE@[0; 134)\n                   INT_NUMBER@[38; 40) \"92\"\n                 WHITESPACE@[40; 41) \" \"\n                 R_CURLY@[41; 42) \"}\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 48) \"\\n    \"\n         EXPR_STMT@[48; 54)\n           LAMBDA_EXPR@[48; 53)\n@@ -63,7 +63,7 @@ SOURCE_FILE@[0; 134)\n                 PATH_SEGMENT@[52; 53)\n                   NAME_REF@[52; 53)\n                     IDENT@[52; 53) \"x\"\n-          SEMI@[53; 54) \";\"\n+          SEMICOLON@[53; 54) \";\"\n         WHITESPACE@[54; 59) \"\\n    \"\n         EXPR_STMT@[59; 76)\n           LAMBDA_EXPR@[59; 75)\n@@ -90,7 +90,7 @@ SOURCE_FILE@[0; 134)\n                 PATH_SEGMENT@[74; 75)\n                   NAME_REF@[74; 75)\n                     IDENT@[74; 75) \"x\"\n-          SEMI@[75; 76) \";\"\n+          SEMICOLON@[75; 76) \";\"\n         WHITESPACE@[76; 81) \"\\n    \"\n         EXPR_STMT@[81; 93)\n           LAMBDA_EXPR@[81; 92)\n@@ -104,7 +104,7 @@ SOURCE_FILE@[0; 134)\n               BLOCK@[90; 92)\n                 L_CURLY@[90; 91) \"{\"\n                 R_CURLY@[91; 92) \"}\"\n-          SEMI@[92; 93) \";\"\n+          SEMICOLON@[92; 93) \";\"\n         WHITESPACE@[93; 98) \"\\n    \"\n         EXPR_STMT@[98; 109)\n           LAMBDA_EXPR@[98; 108)\n@@ -118,7 +118,7 @@ SOURCE_FILE@[0; 134)\n               BLOCK@[106; 108)\n                 L_CURLY@[106; 107) \"{\"\n                 R_CURLY@[107; 108) \"}\"\n-          SEMI@[108; 109) \";\"\n+          SEMICOLON@[108; 109) \";\"\n         WHITESPACE@[109; 114) \"\\n    \"\n         EXPR_STMT@[114; 131)\n           LAMBDA_EXPR@[114; 130)\n@@ -134,7 +134,7 @@ SOURCE_FILE@[0; 134)\n               BLOCK@[128; 130)\n                 L_CURLY@[128; 129) \"{\"\n                 R_CURLY@[129; 130) \"}\"\n-          SEMI@[130; 131) \";\"\n+          SEMICOLON@[130; 131) \";\"\n         WHITESPACE@[131; 132) \"\\n\"\n         R_CURLY@[132; 133) \"}\"\n   WHITESPACE@[133; 134) \"\\n\""}, {"sha": "cc813038c245b3f7cf0af1b7068f768f1a71ef2e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 49)\n             ARG_LIST@[20; 22)\n               L_PAREN@[20; 21) \"(\"\n               R_PAREN@[21; 22) \")\"\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 28) \"\\n    \"\n         EXPR_STMT@[28; 46)\n           METHOD_CALL_EXPR@[28; 45)\n@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 49)\n             NAME_REF@[30; 33)\n               IDENT@[30; 33) \"bar\"\n             TYPE_ARG_LIST@[33; 38)\n-              COLONCOLON@[33; 35) \"::\"\n+              COLON2@[33; 35) \"::\"\n               L_ANGLE@[35; 36) \"<\"\n               TYPE_ARG@[36; 37)\n                 PATH_TYPE@[36; 37)\n@@ -57,7 +57,7 @@ SOURCE_FILE@[0; 49)\n                 INT_NUMBER@[42; 43) \"2\"\n               COMMA@[43; 44) \",\"\n               R_PAREN@[44; 45) \")\"\n-          SEMI@[45; 46) \";\"\n+          SEMICOLON@[45; 46) \";\"\n         WHITESPACE@[46; 47) \"\\n\"\n         R_CURLY@[47; 48) \"}\"\n   WHITESPACE@[48; 49) \"\\n\""}, {"sha": "27c3f398efd198cc7b4eb19c6aa830bbec32d545", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0108_tuple_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0108_tuple_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0108_tuple_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0108_tuple_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,15 +16,15 @@ SOURCE_FILE@[0; 40)\n           TUPLE_EXPR@[15; 17)\n             L_PAREN@[15; 16) \"(\"\n             R_PAREN@[16; 17) \")\"\n-          SEMI@[17; 18) \";\"\n+          SEMICOLON@[17; 18) \";\"\n         WHITESPACE@[18; 23) \"\\n    \"\n         EXPR_STMT@[23; 27)\n           PAREN_EXPR@[23; 26)\n             L_PAREN@[23; 24) \"(\"\n             LITERAL@[24; 25)\n               INT_NUMBER@[24; 25) \"1\"\n             R_PAREN@[25; 26) \")\"\n-          SEMI@[26; 27) \";\"\n+          SEMICOLON@[26; 27) \";\"\n         WHITESPACE@[27; 32) \"\\n    \"\n         EXPR_STMT@[32; 37)\n           TUPLE_EXPR@[32; 36)\n@@ -33,7 +33,7 @@ SOURCE_FILE@[0; 40)\n               INT_NUMBER@[33; 34) \"1\"\n             COMMA@[34; 35) \",\"\n             R_PAREN@[35; 36) \")\"\n-          SEMI@[36; 37) \";\"\n+          SEMICOLON@[36; 37) \";\"\n         WHITESPACE@[37; 38) \"\\n\"\n         R_CURLY@[38; 39) \"}\"\n   WHITESPACE@[39; 40) \"\\n\""}, {"sha": "d4f5737d5aef80fdbda77c87c4e2dce29e9d37e2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0110_use_path.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0110_use_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0110_use_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0110_use_path.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@[0; 154)\n     USE_TREE@[4; 16)\n       PATH@[4; 16)\n         PATH_SEGMENT@[4; 16)\n-          COLONCOLON@[4; 6) \"::\"\n+          COLON2@[4; 6) \"::\"\n           NAME_REF@[6; 16)\n             IDENT@[6; 16) \"crate_name\"\n-    SEMI@[16; 17) \";\"\n+    SEMICOLON@[16; 17) \";\"\n   WHITESPACE@[17; 18) \" \"\n   COMMENT@[18; 45) \"// Rust 2018 - All fl ...\"\n   WHITESPACE@[45; 46) \"\\n\"\n@@ -20,7 +20,7 @@ SOURCE_FILE@[0; 154)\n         PATH_SEGMENT@[50; 60)\n           NAME_REF@[50; 60)\n             IDENT@[50; 60) \"crate_name\"\n-    SEMI@[60; 61) \";\"\n+    SEMICOLON@[60; 61) \";\"\n   WHITESPACE@[61; 62) \" \"\n   COMMENT@[62; 91) \"// Rust 2018 - Anchor ...\"\n   WHITESPACE@[91; 92) \"\\n\"\n@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 154)\n         PATH_SEGMENT@[96; 123)\n           NAME_REF@[96; 123)\n             IDENT@[96; 123) \"item_in_scope_or_crat ...\"\n-    SEMI@[123; 124) \";\"\n+    SEMICOLON@[123; 124) \";\"\n   WHITESPACE@[124; 125) \" \"\n   COMMENT@[125; 153) \"// Rust 2018 - Unifor ...\"\n   WHITESPACE@[153; 154) \"\\n\""}, {"sha": "88e72d057155aa4b398d4fb9e6ccc3df1e15030b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0111_tuple_pat.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -28,15 +28,15 @@ SOURCE_FILE@[0; 94)\n             COMMA@[25; 26) \",\"\n             WHITESPACE@[26; 27) \" \"\n             DOT_DOT_PAT@[27; 29)\n-              DOTDOT@[27; 29) \"..\"\n+              DOT2@[27; 29) \"..\"\n             R_PAREN@[29; 30) \")\"\n           WHITESPACE@[30; 31) \" \"\n           EQ@[31; 32) \"=\"\n           WHITESPACE@[32; 33) \" \"\n           TUPLE_EXPR@[33; 35)\n             L_PAREN@[33; 34) \"(\"\n             R_PAREN@[34; 35) \")\"\n-          SEMI@[35; 36) \";\"\n+          SEMICOLON@[35; 36) \";\"\n         WHITESPACE@[36; 41) \"\\n    \"\n         LET_STMT@[41; 55)\n           LET_KW@[41; 44) \"let\"\n@@ -54,23 +54,23 @@ SOURCE_FILE@[0; 94)\n           TUPLE_EXPR@[52; 54)\n             L_PAREN@[52; 53) \"(\"\n             R_PAREN@[53; 54) \")\"\n-          SEMI@[54; 55) \";\"\n+          SEMICOLON@[54; 55) \";\"\n         WHITESPACE@[55; 60) \"\\n    \"\n         LET_STMT@[60; 74)\n           LET_KW@[60; 63) \"let\"\n           WHITESPACE@[63; 64) \" \"\n           TUPLE_PAT@[64; 68)\n             L_PAREN@[64; 65) \"(\"\n             DOT_DOT_PAT@[65; 67)\n-              DOTDOT@[65; 67) \"..\"\n+              DOT2@[65; 67) \"..\"\n             R_PAREN@[67; 68) \")\"\n           WHITESPACE@[68; 69) \" \"\n           EQ@[69; 70) \"=\"\n           WHITESPACE@[70; 71) \" \"\n           TUPLE_EXPR@[71; 73)\n             L_PAREN@[71; 72) \"(\"\n             R_PAREN@[72; 73) \")\"\n-          SEMI@[73; 74) \";\"\n+          SEMICOLON@[73; 74) \";\"\n         WHITESPACE@[74; 79) \"\\n    \"\n         LET_STMT@[79; 91)\n           LET_KW@[79; 82) \"let\"\n@@ -84,7 +84,7 @@ SOURCE_FILE@[0; 94)\n           TUPLE_EXPR@[88; 90)\n             L_PAREN@[88; 89) \"(\"\n             R_PAREN@[89; 90) \")\"\n-          SEMI@[90; 91) \";\"\n+          SEMICOLON@[90; 91) \";\"\n         WHITESPACE@[91; 92) \"\\n\"\n         R_CURLY@[92; 93) \"}\"\n   WHITESPACE@[93; 94) \"\\n\""}, {"sha": "5e8f625dcfcc1a0cded63c0959c0810b7450b123", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0112_bind_pat.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0112_bind_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 146)\n           TUPLE_EXPR@[24; 26)\n             L_PAREN@[24; 25) \"(\"\n             R_PAREN@[25; 26) \")\"\n-          SEMI@[26; 27) \";\"\n+          SEMICOLON@[26; 27) \";\"\n         WHITESPACE@[27; 32) \"\\n    \"\n         LET_STMT@[32; 47)\n           LET_KW@[32; 35) \"let\"\n@@ -40,7 +40,7 @@ SOURCE_FILE@[0; 146)\n           TUPLE_EXPR@[44; 46)\n             L_PAREN@[44; 45) \"(\"\n             R_PAREN@[45; 46) \")\"\n-          SEMI@[46; 47) \";\"\n+          SEMICOLON@[46; 47) \";\"\n         WHITESPACE@[47; 52) \"\\n    \"\n         LET_STMT@[52; 67)\n           LET_KW@[52; 55) \"let\"\n@@ -56,7 +56,7 @@ SOURCE_FILE@[0; 146)\n           TUPLE_EXPR@[64; 66)\n             L_PAREN@[64; 65) \"(\"\n             R_PAREN@[65; 66) \")\"\n-          SEMI@[66; 67) \";\"\n+          SEMICOLON@[66; 67) \";\"\n         WHITESPACE@[67; 72) \"\\n    \"\n         LET_STMT@[72; 91)\n           LET_KW@[72; 75) \"let\"\n@@ -74,7 +74,7 @@ SOURCE_FILE@[0; 146)\n           TUPLE_EXPR@[88; 90)\n             L_PAREN@[88; 89) \"(\"\n             R_PAREN@[89; 90) \")\"\n-          SEMI@[90; 91) \";\"\n+          SEMICOLON@[90; 91) \";\"\n         WHITESPACE@[91; 96) \"\\n    \"\n         LET_STMT@[96; 111)\n           LET_KW@[96; 99) \"let\"\n@@ -93,7 +93,7 @@ SOURCE_FILE@[0; 146)\n           TUPLE_EXPR@[108; 110)\n             L_PAREN@[108; 109) \"(\"\n             R_PAREN@[109; 110) \")\"\n-          SEMI@[110; 111) \";\"\n+          SEMICOLON@[110; 111) \";\"\n         WHITESPACE@[111; 116) \"\\n    \"\n         LET_STMT@[116; 143)\n           LET_KW@[116; 119) \"let\"\n@@ -122,7 +122,7 @@ SOURCE_FILE@[0; 146)\n           TUPLE_EXPR@[140; 142)\n             L_PAREN@[140; 141) \"(\"\n             R_PAREN@[141; 142) \")\"\n-          SEMI@[142; 143) \";\"\n+          SEMICOLON@[142; 143) \";\"\n         WHITESPACE@[143; 144) \"\\n\"\n         R_CURLY@[144; 145) \"}\"\n   WHITESPACE@[145; 146) \"\\n\""}, {"sha": "f2f649410f8153207d918c13022df42d7e72c302", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0113_nocontentexpr.rast", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0113_nocontentexpr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0113_nocontentexpr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0113_nocontentexpr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -11,9 +11,9 @@ SOURCE_FILE@[0; 50)\n       BLOCK@[8; 49)\n         L_CURLY@[8; 9) \"{\"\n         WHITESPACE@[9; 14) \"\\n    \"\n-        SEMI@[14; 15) \";\"\n-        SEMI@[15; 16) \";\"\n-        SEMI@[16; 17) \";\"\n+        SEMICOLON@[14; 15) \";\"\n+        SEMICOLON@[15; 16) \";\"\n+        SEMICOLON@[16; 17) \";\"\n         EXPR_STMT@[17; 29)\n           CALL_EXPR@[17; 28)\n             PATH_EXPR@[17; 26)\n@@ -24,22 +24,22 @@ SOURCE_FILE@[0; 50)\n             ARG_LIST@[26; 28)\n               L_PAREN@[26; 27) \"(\"\n               R_PAREN@[27; 28) \")\"\n-          SEMI@[28; 29) \";\"\n-        SEMI@[29; 30) \";\"\n-        SEMI@[30; 31) \";\"\n-        SEMI@[31; 32) \";\"\n+          SEMICOLON@[28; 29) \";\"\n+        SEMICOLON@[29; 30) \";\"\n+        SEMICOLON@[30; 31) \";\"\n+        SEMICOLON@[31; 32) \";\"\n         EXPR_STMT@[32; 38)\n           BLOCK_EXPR@[32; 37)\n             BLOCK@[32; 37)\n               L_CURLY@[32; 33) \"{\"\n-              SEMI@[33; 34) \";\"\n-              SEMI@[34; 35) \";\"\n-              SEMI@[35; 36) \";\"\n+              SEMICOLON@[33; 34) \";\"\n+              SEMICOLON@[34; 35) \";\"\n+              SEMICOLON@[35; 36) \";\"\n               R_CURLY@[36; 37) \"}\"\n-          SEMI@[37; 38) \";\"\n-        SEMI@[38; 39) \";\"\n-        SEMI@[39; 40) \";\"\n-        SEMI@[40; 41) \";\"\n+          SEMICOLON@[37; 38) \";\"\n+        SEMICOLON@[38; 39) \";\"\n+        SEMICOLON@[39; 40) \";\"\n+        SEMICOLON@[40; 41) \";\"\n         CALL_EXPR@[41; 47)\n           PATH_EXPR@[41; 43)\n             PATH@[41; 43)"}, {"sha": "457c82e74315f0003e5ce195e5a226c5cd255c01", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 53)\n                 PATH_SEGMENT@[27; 32)\n                   NAME_REF@[27; 32)\n                     IDENT@[27; 32) \"Clone\"\n-    SEMI@[32; 33) \";\"\n+    SEMICOLON@[32; 33) \";\"\n   WHITESPACE@[33; 34) \"\\n\"\n   STRUCT_DEF@[34; 52)\n     STRUCT_KW@[34; 40) \"struct\"\n@@ -60,5 +60,5 @@ SOURCE_FILE@[0; 53)\n               NAME_REF@[49; 50)\n                 IDENT@[49; 50) \"T\"\n       R_PAREN@[50; 51) \")\"\n-    SEMI@[51; 52) \";\"\n+    SEMICOLON@[51; 52) \";\"\n   WHITESPACE@[52; 53) \"\\n\""}, {"sha": "0b1552a9d8c1305ee478a4b2468675e840304d54", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -37,5 +37,5 @@ SOURCE_FILE@[0; 60)\n       COMMA@[55; 56) \",\"\n       WHITESPACE@[56; 57) \"\\n\"\n       R_PAREN@[57; 58) \")\"\n-    SEMI@[58; 59) \";\"\n+    SEMICOLON@[58; 59) \";\"\n   WHITESPACE@[59; 60) \"\\n\""}, {"sha": "4f9e80e2eb87ebefd02d588c6dcb8e2c3979875e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0117_macro_call_type.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0117_macro_call_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,11 +12,11 @@ SOURCE_FILE@[0; 41)\n         PATH_SEGMENT@[9; 12)\n           NAME_REF@[9; 12)\n             IDENT@[9; 12) \"foo\"\n-      EXCL@[12; 13) \"!\"\n+      BANG@[12; 13) \"!\"\n       TOKEN_TREE@[13; 15)\n         L_PAREN@[13; 14) \"(\"\n         R_PAREN@[14; 15) \")\"\n-    SEMI@[15; 16) \";\"\n+    SEMICOLON@[15; 16) \";\"\n   WHITESPACE@[16; 17) \"\\n\"\n   TYPE_ALIAS_DEF@[17; 40)\n     TYPE_KW@[17; 21) \"type\"\n@@ -31,13 +31,13 @@ SOURCE_FILE@[0; 41)\n         PATH@[26; 31)\n           PATH_SEGMENT@[26; 31)\n             CRATE_KW@[26; 31) \"crate\"\n-        COLONCOLON@[31; 33) \"::\"\n+        COLON2@[31; 33) \"::\"\n         PATH_SEGMENT@[33; 36)\n           NAME_REF@[33; 36)\n             IDENT@[33; 36) \"foo\"\n-      EXCL@[36; 37) \"!\"\n+      BANG@[36; 37) \"!\"\n       TOKEN_TREE@[37; 39)\n         L_PAREN@[37; 38) \"(\"\n         R_PAREN@[38; 39) \")\"\n-    SEMI@[39; 40) \";\"\n+    SEMICOLON@[39; 40) \";\"\n   WHITESPACE@[40; 41) \"\\n\""}, {"sha": "f9a4bc81b914662729de9e304898da3151b92230", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0118_impl_inner_attributes.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 94)\n       WHITESPACE@[48; 54) \"\\n     \"\n       ATTR@[54; 91)\n         POUND@[54; 55) \"#\"\n-        EXCL@[55; 56) \"!\"\n+        BANG@[55; 56) \"!\"\n         L_BRACK@[56; 57) \"[\"\n         PATH@[57; 60)\n           PATH_SEGMENT@[57; 60)"}, {"sha": "7eec92e1bdd86e63583e3c5191748ec93be94971", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0120_match_arms_inner_attribute.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0120_match_arms_inner_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0120_match_arms_inner_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0120_match_arms_inner_attribute.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 139)\n             WHITESPACE@[25; 34) \"\\n        \"\n             ATTR@[34; 60)\n               POUND@[34; 35) \"#\"\n-              EXCL@[35; 36) \"!\"\n+              BANG@[35; 36) \"!\"\n               L_BRACK@[36; 37) \"[\"\n               PATH@[37; 40)\n                 PATH_SEGMENT@[37; 40)\n@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 139)\n             WHITESPACE@[60; 69) \"\\n        \"\n             ATTR@[69; 86)\n               POUND@[69; 70) \"#\"\n-              EXCL@[70; 71) \"!\"\n+              BANG@[70; 71) \"!\"\n               L_BRACK@[71; 72) \"[\"\n               PATH@[72; 75)\n                 PATH_SEGMENT@[72; 75)\n@@ -52,7 +52,7 @@ SOURCE_FILE@[0; 139)\n             WHITESPACE@[86; 95) \"\\n        \"\n             ATTR@[95; 113)\n               POUND@[95; 96) \"#\"\n-              EXCL@[96; 97) \"!\"\n+              BANG@[96; 97) \"!\"\n               L_BRACK@[97; 98) \"[\"\n               PATH@[98; 101)\n                 PATH_SEGMENT@[98; 101)"}, {"sha": "af8067b128b67b249376b8ff376fddbe78cd4c13", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0123_param_list_vararg.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0123_param_list_vararg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0123_param_list_vararg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0123_param_list_vararg.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -33,7 +33,7 @@ SOURCE_FILE@[0; 57)\n           COMMA@[40; 41) \",\"\n           WHITESPACE@[41; 42) \" \"\n           PARAM@[42; 45)\n-            DOTDOTDOT@[42; 45) \"...\"\n+            DOT3@[42; 45) \"...\"\n           R_PAREN@[45; 46) \")\"\n         WHITESPACE@[46; 47) \" \"\n         RET_TYPE@[47; 53)\n@@ -44,7 +44,7 @@ SOURCE_FILE@[0; 57)\n               PATH_SEGMENT@[50; 53)\n                 NAME_REF@[50; 53)\n                   IDENT@[50; 53) \"i32\"\n-        SEMI@[53; 54) \";\"\n+        SEMICOLON@[53; 54) \";\"\n       WHITESPACE@[54; 55) \" \"\n       R_CURLY@[55; 56) \"}\"\n   WHITESPACE@[56; 57) \"\\n\""}, {"sha": "f1f4de976f54108999d7a191c55172b0853385b2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_crate_keyword_path.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_crate_keyword_path.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -19,14 +19,14 @@ SOURCE_FILE@[0; 27)\n                 PATH@[11; 16)\n                   PATH_SEGMENT@[11; 16)\n                     CRATE_KW@[11; 16) \"crate\"\n-                COLONCOLON@[16; 18) \"::\"\n+                COLON2@[16; 18) \"::\"\n                 PATH_SEGMENT@[18; 21)\n                   NAME_REF@[18; 21)\n                     IDENT@[18; 21) \"foo\"\n             ARG_LIST@[21; 23)\n               L_PAREN@[21; 22) \"(\"\n               R_PAREN@[22; 23) \")\"\n-          SEMI@[23; 24) \";\"\n+          SEMICOLON@[23; 24) \";\"\n         WHITESPACE@[24; 25) \" \"\n         R_CURLY@[25; 26) \"}\"\n   WHITESPACE@[26; 27) \"\\n\""}, {"sha": "3b462871ab3675f29a56df7d92f896a9cfabbece", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0126_attr_on_expr_stmt.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -31,7 +31,7 @@ SOURCE_FILE@[0; 82)\n             ARG_LIST@[23; 25)\n               L_PAREN@[23; 24) \"(\"\n               R_PAREN@[24; 25) \")\"\n-          SEMI@[25; 26) \";\"\n+          SEMICOLON@[25; 26) \";\"\n         WHITESPACE@[26; 31) \"\\n    \"\n         EXPR_STMT@[31; 42)\n           ATTR@[31; 35)\n@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 82)\n               PATH_SEGMENT@[36; 39)\n                 NAME_REF@[36; 39)\n                   IDENT@[36; 39) \"bar\"\n-            EXCL@[39; 40) \"!\"\n+            BANG@[39; 40) \"!\"\n             TOKEN_TREE@[40; 42)\n               L_CURLY@[40; 41) \"{\"\n               R_CURLY@[41; 42) \"}\"\n@@ -93,7 +93,7 @@ SOURCE_FILE@[0; 82)\n             TUPLE_EXPR@[76; 78)\n               L_PAREN@[76; 77) \"(\"\n               R_PAREN@[77; 78) \")\"\n-          SEMI@[78; 79) \";\"\n+          SEMICOLON@[78; 79) \";\"\n         WHITESPACE@[79; 80) \"\\n\"\n         R_CURLY@[80; 81) \"}\"\n   WHITESPACE@[81; 82) \"\\n\""}, {"sha": "9bc6be62df4e00b6d42cc90fe149a4e5e957cdb9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0127_attr_on_last_expr_in_block.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 47)\n                     PATH_SEGMENT@[22; 25)\n                       NAME_REF@[22; 25)\n                         IDENT@[22; 25) \"bar\"\n-                  EXCL@[25; 26) \"!\"\n+                  BANG@[25; 26) \"!\"\n                   TOKEN_TREE@[26; 28)\n                     L_PAREN@[26; 27) \"(\"\n                     R_PAREN@[27; 28) \")\""}, {"sha": "31481d2f9ed13e034d717c89b4c8e1ceb37b8a1b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0129_marco_pat.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0129_marco_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 33)\n                 PATH_SEGMENT@[20; 21)\n                   NAME_REF@[20; 21)\n                     IDENT@[20; 21) \"m\"\n-              EXCL@[21; 22) \"!\"\n+              BANG@[21; 22) \"!\"\n               TOKEN_TREE@[22; 25)\n                 L_PAREN@[22; 23) \"(\"\n                 IDENT@[23; 24) \"x\"\n@@ -31,7 +31,7 @@ SOURCE_FILE@[0; 33)\n           WHITESPACE@[27; 28) \" \"\n           LITERAL@[28; 29)\n             INT_NUMBER@[28; 29) \"0\"\n-          SEMI@[29; 30) \";\"\n+          SEMICOLON@[29; 30) \";\"\n         WHITESPACE@[30; 31) \"\\n\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\""}, {"sha": "1f2690c00193b275caf8b99f955401b29ea828aa", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0130_let_stmt.rast", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_let_stmt.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -18,7 +18,7 @@ SOURCE_FILE@[0; 135)\n           BIND_PAT@[19; 20)\n             NAME@[19; 20)\n               IDENT@[19; 20) \"a\"\n-          SEMI@[20; 21) \";\"\n+          SEMICOLON@[20; 21) \";\"\n         WHITESPACE@[21; 26) \"\\n    \"\n         LET_STMT@[26; 37)\n           LET_KW@[26; 29) \"let\"\n@@ -33,7 +33,7 @@ SOURCE_FILE@[0; 135)\n               PATH_SEGMENT@[33; 36)\n                 NAME_REF@[33; 36)\n                   IDENT@[33; 36) \"i32\"\n-          SEMI@[36; 37) \";\"\n+          SEMICOLON@[36; 37) \";\"\n         WHITESPACE@[37; 42) \"\\n    \"\n         LET_STMT@[42; 53)\n           LET_KW@[42; 45) \"let\"\n@@ -46,7 +46,7 @@ SOURCE_FILE@[0; 135)\n           WHITESPACE@[49; 50) \" \"\n           LITERAL@[50; 52)\n             INT_NUMBER@[50; 52) \"92\"\n-          SEMI@[52; 53) \";\"\n+          SEMICOLON@[52; 53) \";\"\n         WHITESPACE@[53; 58) \"\\n    \"\n         LET_STMT@[58; 74)\n           LET_KW@[58; 61) \"let\"\n@@ -66,7 +66,7 @@ SOURCE_FILE@[0; 135)\n           WHITESPACE@[70; 71) \" \"\n           LITERAL@[71; 73)\n             INT_NUMBER@[71; 73) \"92\"\n-          SEMI@[73; 74) \";\"\n+          SEMICOLON@[73; 74) \";\"\n         WHITESPACE@[74; 79) \"\\n    \"\n         LET_STMT@[79; 88)\n           LET_KW@[79; 82) \"let\"\n@@ -77,8 +77,8 @@ SOURCE_FILE@[0; 135)\n           COLON@[84; 85) \":\"\n           WHITESPACE@[85; 86) \" \"\n           NEVER_TYPE@[86; 87)\n-            EXCL@[86; 87) \"!\"\n-          SEMI@[87; 88) \";\"\n+            BANG@[86; 87) \"!\"\n+          SEMICOLON@[87; 88) \";\"\n         WHITESPACE@[88; 93) \"\\n    \"\n         LET_STMT@[93; 107)\n           LET_KW@[93; 96) \"let\"\n@@ -88,15 +88,15 @@ SOURCE_FILE@[0; 135)\n           COLON@[98; 99) \":\"\n           WHITESPACE@[99; 100) \" \"\n           NEVER_TYPE@[100; 101)\n-            EXCL@[100; 101) \"!\"\n+            BANG@[100; 101) \"!\"\n           WHITESPACE@[101; 102) \" \"\n           EQ@[102; 103) \"=\"\n           WHITESPACE@[103; 104) \" \"\n           BLOCK_EXPR@[104; 106)\n             BLOCK@[104; 106)\n               L_CURLY@[104; 105) \"{\"\n               R_CURLY@[105; 106) \"}\"\n-          SEMI@[106; 107) \";\"\n+          SEMICOLON@[106; 107) \";\"\n         WHITESPACE@[107; 112) \"\\n    \"\n         LET_STMT@[112; 132)\n           LET_KW@[112; 115) \"let\"\n@@ -123,7 +123,7 @@ SOURCE_FILE@[0; 135)\n               BLOCK@[129; 131)\n                 L_CURLY@[129; 130) \"{\"\n                 R_CURLY@[130; 131) \"}\"\n-          SEMI@[131; 132) \";\"\n+          SEMICOLON@[131; 132) \";\"\n         WHITESPACE@[132; 133) \"\\n\"\n         R_CURLY@[133; 134) \"}\"\n   WHITESPACE@[134; 135) \"\\n\""}, {"sha": "b96991035c7d78c2aad5293eef58a22d7f3a61e4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0130_try_block_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0130_try_block_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 33)\n               BLOCK@[27; 29)\n                 L_CURLY@[27; 28) \"{\"\n                 R_CURLY@[28; 29) \"}\"\n-          SEMI@[29; 30) \";\"\n+          SEMICOLON@[29; 30) \";\"\n         WHITESPACE@[30; 31) \"\\n\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\""}, {"sha": "ed3d8fb0b12516b9bc0669af4499faa176aab785", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0131_existential_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0131_existential_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0131_existential_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0131_existential_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,5 +27,5 @@ SOURCE_FILE@[0; 37)\n                     PATH_SEGMENT@[30; 35)\n                       NAME_REF@[30; 35)\n                         IDENT@[30; 35) \"usize\"\n-    SEMI@[35; 36) \";\"\n+    SEMICOLON@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\""}, {"sha": "c392a7d84f3930a930720b71dd8dad6780bd21ee", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_box_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_box_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_box_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_box_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -26,7 +26,7 @@ SOURCE_FILE@[0; 106)\n             WHITESPACE@[26; 27) \" \"\n             LITERAL@[27; 31)\n               INT_NUMBER@[27; 31) \"1i32\"\n-          SEMI@[31; 32) \";\"\n+          SEMICOLON@[31; 32) \";\"\n         WHITESPACE@[32; 37) \"\\n    \"\n         LET_STMT@[37; 66)\n           LET_KW@[37; 40) \"let\"\n@@ -52,7 +52,7 @@ SOURCE_FILE@[0; 106)\n               LITERAL@[60; 64)\n                 INT_NUMBER@[60; 64) \"2i32\"\n             R_PAREN@[64; 65) \")\"\n-          SEMI@[65; 66) \";\"\n+          SEMICOLON@[65; 66) \";\"\n         WHITESPACE@[66; 71) \"\\n    \"\n         LET_STMT@[71; 103)\n           LET_KW@[71; 74) \"let\"\n@@ -84,7 +84,7 @@ SOURCE_FILE@[0; 106)\n                 LITERAL@[97; 101)\n                   INT_NUMBER@[97; 101) \"2i32\"\n               R_PAREN@[101; 102) \")\"\n-          SEMI@[102; 103) \";\"\n+          SEMICOLON@[102; 103) \";\"\n         WHITESPACE@[103; 104) \"\\n\"\n         R_CURLY@[104; 105) \"}\"\n   WHITESPACE@[105; 106) \"\\n\""}, {"sha": "cff03fcf37c1fb7397c29585bfdc46f4019019aa", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 69)\n             PATH_SEGMENT@[38; 41)\n               NAME_REF@[38; 41)\n                 IDENT@[38; 41) \"Bar\"\n-        SEMI@[41; 42) \";\"\n+        SEMICOLON@[41; 42) \";\"\n       WHITESPACE@[42; 47) \"\\n    \"\n       FN_DEF@[47; 66)\n         DEFAULT_KW@[47; 54) \"default\""}, {"sha": "f66f32370be8df760ebd401a9899b94273044058", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 111)\n             COMMA@[68; 69) \",\"\n             WHITESPACE@[69; 74) \"\\n    \"\n             R_CURLY@[74; 75) \"}\"\n-        SEMI@[75; 76) \";\"\n+        SEMICOLON@[75; 76) \";\"\n         WHITESPACE@[76; 81) \"\\n    \"\n         FN_DEF@[81; 90)\n           FN_KW@[81; 83) \"fn\"\n@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 111)\n             BLOCK@[88; 90)\n               L_CURLY@[88; 89) \"{\"\n               R_CURLY@[89; 90) \"}\"\n-        SEMI@[90; 91) \";\"\n+        SEMICOLON@[90; 91) \";\"\n         WHITESPACE@[91; 96) \"\\n    \"\n         STRUCT_DEF@[96; 107)\n           STRUCT_KW@[96; 102) \"struct\"\n@@ -58,7 +58,7 @@ SOURCE_FILE@[0; 111)\n           RECORD_FIELD_DEF_LIST@[105; 107)\n             L_CURLY@[105; 106) \"{\"\n             R_CURLY@[106; 107) \"}\"\n-        SEMI@[107; 108) \";\"\n+        SEMICOLON@[107; 108) \";\"\n         WHITESPACE@[108; 109) \"\\n\"\n         R_CURLY@[109; 110) \"}\"\n   WHITESPACE@[110; 111) \"\\n\""}, {"sha": "4946e6325fa0b13a94fa168c5c1b55cc73579e25", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0137_await_expr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 67)\n                     IDENT@[15; 16) \"x\"\n             DOT@[16; 17) \".\"\n             AWAIT_KW@[17; 22) \"await\"\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 28) \"\\n    \"\n         EXPR_STMT@[28; 38)\n           AWAIT_EXPR@[28; 37)\n@@ -36,7 +36,7 @@ SOURCE_FILE@[0; 67)\n                 INT_NUMBER@[30; 31) \"0\"\n             DOT@[31; 32) \".\"\n             AWAIT_KW@[32; 37) \"await\"\n-          SEMI@[37; 38) \";\"\n+          SEMICOLON@[37; 38) \";\"\n         WHITESPACE@[38; 43) \"\\n    \"\n         EXPR_STMT@[43; 64)\n           METHOD_CALL_EXPR@[43; 63)\n@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 67)\n             ARG_LIST@[61; 63)\n               L_PAREN@[61; 62) \"(\"\n               R_PAREN@[62; 63) \")\"\n-          SEMI@[63; 64) \";\"\n+          SEMICOLON@[63; 64) \";\"\n         WHITESPACE@[64; 65) \"\\n\"\n         R_CURLY@[65; 66) \"}\"\n   WHITESPACE@[66; 67) \"\\n\""}, {"sha": "ca1d69f64726e8647bb2d2ba319d354cb561fe08", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_expression_after_block.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -38,7 +38,7 @@ SOURCE_FILE@[0; 52)\n                 LITERAL@[31; 32)\n                   INT_NUMBER@[31; 32) \"5\"\n               R_CURLY@[32; 33) \"}\"\n-          SEMI@[33; 34) \";\"\n+          SEMICOLON@[33; 34) \";\"\n         WHITESPACE@[34; 38) \"\\n   \"\n         EXPR_STMT@[38; 49)\n           BIN_EXPR@[38; 48)\n@@ -60,7 +60,7 @@ SOURCE_FILE@[0; 52)\n             WHITESPACE@[45; 46) \" \"\n             LITERAL@[46; 48)\n               INT_NUMBER@[46; 48) \"10\"\n-          SEMI@[48; 49) \";\"\n+          SEMICOLON@[48; 49) \";\"\n         WHITESPACE@[49; 50) \"\\n\"\n         R_CURLY@[50; 51) \"}\"\n   WHITESPACE@[51; 52) \"\\n\""}, {"sha": "6d01140d23883579558d456a611557666a1b90a6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0142_for_range_from.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0142_for_range_from.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0142_for_range_from.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0142_for_range_from.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 51)\n             LITERAL@[23; 24)\n               INT_NUMBER@[23; 24) \"0\"\n             WHITESPACE@[24; 25) \" \"\n-            DOTDOT@[25; 27) \"..\"\n+            DOT2@[25; 27) \"..\"\n           WHITESPACE@[27; 28) \" \"\n           BLOCK_EXPR@[28; 48)\n             BLOCK@[28; 48)\n@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 51)\n               EXPR_STMT@[37; 43)\n                 BREAK_EXPR@[37; 42)\n                   BREAK_KW@[37; 42) \"break\"\n-                SEMI@[42; 43) \";\"\n+                SEMICOLON@[42; 43) \";\"\n               WHITESPACE@[43; 47) \"\\n   \"\n               R_CURLY@[47; 48) \"}\"\n         WHITESPACE@[48; 49) \"\\n\""}, {"sha": "f756730704b5aa4127e7adc4070a64b418b9364f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0143_box_pat.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 118)\n           TUPLE_EXPR@[28; 30)\n             L_PAREN@[28; 29) \"(\"\n             R_PAREN@[29; 30) \")\"\n-          SEMI@[30; 31) \";\"\n+          SEMICOLON@[30; 31) \";\"\n         WHITESPACE@[31; 36) \"\\n    \"\n         LET_STMT@[36; 87)\n           LET_KW@[36; 39) \"let\"\n@@ -83,7 +83,7 @@ SOURCE_FILE@[0; 118)\n           TUPLE_EXPR@[84; 86)\n             L_PAREN@[84; 85) \"(\"\n             R_PAREN@[85; 86) \")\"\n-          SEMI@[86; 87) \";\"\n+          SEMICOLON@[86; 87) \";\"\n         WHITESPACE@[87; 92) \"\\n    \"\n         LET_STMT@[92; 115)\n           LET_KW@[92; 95) \"let\"\n@@ -104,7 +104,7 @@ SOURCE_FILE@[0; 118)\n           TUPLE_EXPR@[112; 114)\n             L_PAREN@[112; 113) \"(\"\n             R_PAREN@[113; 114) \")\"\n-          SEMI@[114; 115) \";\"\n+          SEMICOLON@[114; 115) \";\"\n         WHITESPACE@[115; 116) \"\\n\"\n         R_CURLY@[116; 117) \"}\"\n   WHITESPACE@[117; 118) \"\\n\""}, {"sha": "60186a992b773dde0710cdb5dcea7aa51374d628", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0144_dot_dot_pat.rast", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0144_dot_dot_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0144_dot_dot_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0144_dot_dot_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,14 +16,14 @@ SOURCE_FILE@[0; 555)\n           LET_KW@[16; 19) \"let\"\n           WHITESPACE@[19; 20) \" \"\n           DOT_DOT_PAT@[20; 22)\n-            DOTDOT@[20; 22) \"..\"\n+            DOT2@[20; 22) \"..\"\n           WHITESPACE@[22; 23) \" \"\n           EQ@[23; 24) \"=\"\n           WHITESPACE@[24; 25) \" \"\n           TUPLE_EXPR@[25; 27)\n             L_PAREN@[25; 26) \"(\"\n             R_PAREN@[26; 27) \")\"\n-          SEMI@[27; 28) \";\"\n+          SEMICOLON@[27; 28) \";\"\n         WHITESPACE@[28; 33) \"\\n    \"\n         COMMENT@[33; 35) \"//\"\n         WHITESPACE@[35; 40) \"\\n    \"\n@@ -42,15 +42,15 @@ SOURCE_FILE@[0; 555)\n             COMMA@[67; 68) \",\"\n             WHITESPACE@[68; 69) \" \"\n             DOT_DOT_PAT@[69; 71)\n-              DOTDOT@[69; 71) \"..\"\n+              DOT2@[69; 71) \"..\"\n             R_PAREN@[71; 72) \")\"\n           WHITESPACE@[72; 73) \" \"\n           EQ@[73; 74) \"=\"\n           WHITESPACE@[74; 75) \" \"\n           TUPLE_EXPR@[75; 77)\n             L_PAREN@[75; 76) \"(\"\n             R_PAREN@[76; 77) \")\"\n-          SEMI@[77; 78) \";\"\n+          SEMICOLON@[77; 78) \";\"\n         WHITESPACE@[78; 83) \"\\n    \"\n         LET_STMT@[83; 101)\n           LET_KW@[83; 86) \"let\"\n@@ -63,7 +63,7 @@ SOURCE_FILE@[0; 555)\n             COMMA@[89; 90) \",\"\n             WHITESPACE@[90; 91) \" \"\n             DOT_DOT_PAT@[91; 93)\n-              DOTDOT@[91; 93) \"..\"\n+              DOT2@[91; 93) \"..\"\n             COMMA@[93; 94) \",\"\n             R_PAREN@[94; 95) \")\"\n           WHITESPACE@[95; 96) \" \"\n@@ -72,7 +72,7 @@ SOURCE_FILE@[0; 555)\n           TUPLE_EXPR@[98; 100)\n             L_PAREN@[98; 99) \"(\"\n             R_PAREN@[99; 100) \")\"\n-          SEMI@[100; 101) \";\"\n+          SEMICOLON@[100; 101) \";\"\n         WHITESPACE@[101; 106) \"\\n    \"\n         LET_STMT@[106; 128)\n           LET_KW@[106; 109) \"let\"\n@@ -89,15 +89,15 @@ SOURCE_FILE@[0; 555)\n             COMMA@[117; 118) \",\"\n             WHITESPACE@[118; 119) \" \"\n             DOT_DOT_PAT@[119; 121)\n-              DOTDOT@[119; 121) \"..\"\n+              DOT2@[119; 121) \"..\"\n             R_PAREN@[121; 122) \")\"\n           WHITESPACE@[122; 123) \" \"\n           EQ@[123; 124) \"=\"\n           WHITESPACE@[124; 125) \" \"\n           TUPLE_EXPR@[125; 127)\n             L_PAREN@[125; 126) \"(\"\n             R_PAREN@[126; 127) \")\"\n-          SEMI@[127; 128) \";\"\n+          SEMICOLON@[127; 128) \";\"\n         WHITESPACE@[128; 133) \"\\n    \"\n         LET_STMT@[133; 156)\n           LET_KW@[133; 136) \"let\"\n@@ -114,7 +114,7 @@ SOURCE_FILE@[0; 555)\n             COMMA@[144; 145) \",\"\n             WHITESPACE@[145; 146) \" \"\n             DOT_DOT_PAT@[146; 148)\n-              DOTDOT@[146; 148) \"..\"\n+              DOT2@[146; 148) \"..\"\n             COMMA@[148; 149) \",\"\n             R_PAREN@[149; 150) \")\"\n           WHITESPACE@[150; 151) \" \"\n@@ -123,27 +123,27 @@ SOURCE_FILE@[0; 555)\n           TUPLE_EXPR@[153; 155)\n             L_PAREN@[153; 154) \"(\"\n             R_PAREN@[154; 155) \")\"\n-          SEMI@[155; 156) \";\"\n+          SEMICOLON@[155; 156) \";\"\n         WHITESPACE@[156; 161) \"\\n    \"\n         LET_STMT@[161; 179)\n           LET_KW@[161; 164) \"let\"\n           WHITESPACE@[164; 165) \" \"\n           TUPLE_PAT@[165; 173)\n             L_PAREN@[165; 166) \"(\"\n             DOT_DOT_PAT@[166; 168)\n-              DOTDOT@[166; 168) \"..\"\n+              DOT2@[166; 168) \"..\"\n             COMMA@[168; 169) \",\"\n             WHITESPACE@[169; 170) \" \"\n             DOT_DOT_PAT@[170; 172)\n-              DOTDOT@[170; 172) \"..\"\n+              DOT2@[170; 172) \"..\"\n             R_PAREN@[172; 173) \")\"\n           WHITESPACE@[173; 174) \" \"\n           EQ@[174; 175) \"=\"\n           WHITESPACE@[175; 176) \" \"\n           TUPLE_EXPR@[176; 178)\n             L_PAREN@[176; 177) \"(\"\n             R_PAREN@[177; 178) \")\"\n-          SEMI@[178; 179) \";\"\n+          SEMICOLON@[178; 179) \";\"\n         WHITESPACE@[179; 184) \"\\n    \"\n         LET_STMT@[184; 207)\n           LET_KW@[184; 187) \"let\"\n@@ -155,27 +155,27 @@ SOURCE_FILE@[0; 555)\n                   IDENT@[188; 193) \"Tuple\"\n             L_PAREN@[193; 194) \"(\"\n             DOT_DOT_PAT@[194; 196)\n-              DOTDOT@[194; 196) \"..\"\n+              DOT2@[194; 196) \"..\"\n             COMMA@[196; 197) \",\"\n             WHITESPACE@[197; 198) \" \"\n             DOT_DOT_PAT@[198; 200)\n-              DOTDOT@[198; 200) \"..\"\n+              DOT2@[198; 200) \"..\"\n             R_PAREN@[200; 201) \")\"\n           WHITESPACE@[201; 202) \" \"\n           EQ@[202; 203) \"=\"\n           WHITESPACE@[203; 204) \" \"\n           TUPLE_EXPR@[204; 206)\n             L_PAREN@[204; 205) \"(\"\n             R_PAREN@[205; 206) \")\"\n-          SEMI@[206; 207) \";\"\n+          SEMICOLON@[206; 207) \";\"\n         WHITESPACE@[207; 212) \"\\n    \"\n         LET_STMT@[212; 233)\n           LET_KW@[212; 215) \"let\"\n           WHITESPACE@[215; 216) \" \"\n           TUPLE_PAT@[216; 227)\n             L_PAREN@[216; 217) \"(\"\n             DOT_DOT_PAT@[217; 219)\n-              DOTDOT@[217; 219) \"..\"\n+              DOT2@[217; 219) \"..\"\n             COMMA@[219; 220) \",\"\n             WHITESPACE@[220; 221) \" \"\n             BIND_PAT@[221; 222)\n@@ -184,15 +184,15 @@ SOURCE_FILE@[0; 555)\n             COMMA@[222; 223) \",\"\n             WHITESPACE@[223; 224) \" \"\n             DOT_DOT_PAT@[224; 226)\n-              DOTDOT@[224; 226) \"..\"\n+              DOT2@[224; 226) \"..\"\n             R_PAREN@[226; 227) \")\"\n           WHITESPACE@[227; 228) \" \"\n           EQ@[228; 229) \"=\"\n           WHITESPACE@[229; 230) \" \"\n           TUPLE_EXPR@[230; 232)\n             L_PAREN@[230; 231) \"(\"\n             R_PAREN@[231; 232) \")\"\n-          SEMI@[232; 233) \";\"\n+          SEMICOLON@[232; 233) \";\"\n         WHITESPACE@[233; 238) \"\\n    \"\n         LET_STMT@[238; 264)\n           LET_KW@[238; 241) \"let\"\n@@ -204,7 +204,7 @@ SOURCE_FILE@[0; 555)\n                   IDENT@[242; 247) \"Tuple\"\n             L_PAREN@[247; 248) \"(\"\n             DOT_DOT_PAT@[248; 250)\n-              DOTDOT@[248; 250) \"..\"\n+              DOT2@[248; 250) \"..\"\n             COMMA@[250; 251) \",\"\n             WHITESPACE@[251; 252) \" \"\n             BIND_PAT@[252; 253)\n@@ -213,15 +213,15 @@ SOURCE_FILE@[0; 555)\n             COMMA@[253; 254) \",\"\n             WHITESPACE@[254; 255) \" \"\n             DOT_DOT_PAT@[255; 257)\n-              DOTDOT@[255; 257) \"..\"\n+              DOT2@[255; 257) \"..\"\n             R_PAREN@[257; 258) \")\"\n           WHITESPACE@[258; 259) \" \"\n           EQ@[259; 260) \"=\"\n           WHITESPACE@[260; 261) \" \"\n           TUPLE_EXPR@[261; 263)\n             L_PAREN@[261; 262) \"(\"\n             R_PAREN@[262; 263) \")\"\n-          SEMI@[263; 264) \";\"\n+          SEMICOLON@[263; 264) \";\"\n         WHITESPACE@[264; 269) \"\\n    \"\n         COMMENT@[269; 271) \"//\"\n         WHITESPACE@[271; 276) \"\\n    \"\n@@ -235,15 +235,15 @@ SOURCE_FILE@[0; 555)\n           SLICE_PAT@[301; 305)\n             L_BRACK@[301; 302) \"[\"\n             DOT_DOT_PAT@[302; 304)\n-              DOTDOT@[302; 304) \"..\"\n+              DOT2@[302; 304) \"..\"\n             R_BRACK@[304; 305) \"]\"\n           WHITESPACE@[305; 306) \" \"\n           EQ@[306; 307) \"=\"\n           WHITESPACE@[307; 308) \" \"\n           TUPLE_EXPR@[308; 310)\n             L_PAREN@[308; 309) \"(\"\n             R_PAREN@[309; 310) \")\"\n-          SEMI@[310; 311) \";\"\n+          SEMICOLON@[310; 311) \";\"\n         WHITESPACE@[311; 316) \"\\n    \"\n         LET_STMT@[316; 336)\n           LET_KW@[316; 319) \"let\"\n@@ -256,15 +256,15 @@ SOURCE_FILE@[0; 555)\n             COMMA@[325; 326) \",\"\n             WHITESPACE@[326; 327) \" \"\n             DOT_DOT_PAT@[327; 329)\n-              DOTDOT@[327; 329) \"..\"\n+              DOT2@[327; 329) \"..\"\n             R_BRACK@[329; 330) \"]\"\n           WHITESPACE@[330; 331) \" \"\n           EQ@[331; 332) \"=\"\n           WHITESPACE@[332; 333) \" \"\n           TUPLE_EXPR@[333; 335)\n             L_PAREN@[333; 334) \"(\"\n             R_PAREN@[334; 335) \")\"\n-          SEMI@[335; 336) \";\"\n+          SEMICOLON@[335; 336) \";\"\n         WHITESPACE@[336; 341) \"\\n    \"\n         LET_STMT@[341; 368)\n           LET_KW@[341; 344) \"let\"\n@@ -283,15 +283,15 @@ SOURCE_FILE@[0; 555)\n               AT@[357; 358) \"@\"\n               WHITESPACE@[358; 359) \" \"\n               DOT_DOT_PAT@[359; 361)\n-                DOTDOT@[359; 361) \"..\"\n+                DOT2@[359; 361) \"..\"\n             R_BRACK@[361; 362) \"]\"\n           WHITESPACE@[362; 363) \" \"\n           EQ@[363; 364) \"=\"\n           WHITESPACE@[364; 365) \" \"\n           TUPLE_EXPR@[365; 367)\n             L_PAREN@[365; 366) \"(\"\n             R_PAREN@[366; 367) \")\"\n-          SEMI@[367; 368) \";\"\n+          SEMICOLON@[367; 368) \";\"\n         WHITESPACE@[368; 373) \"\\n    \"\n         LET_STMT@[373; 399)\n           LET_KW@[373; 376) \"let\"\n@@ -304,7 +304,7 @@ SOURCE_FILE@[0; 555)\n             COMMA@[382; 383) \",\"\n             WHITESPACE@[383; 384) \" \"\n             DOT_DOT_PAT@[384; 386)\n-              DOTDOT@[384; 386) \"..\"\n+              DOT2@[384; 386) \"..\"\n             COMMA@[386; 387) \",\"\n             WHITESPACE@[387; 388) \" \"\n             BIND_PAT@[388; 392)\n@@ -317,7 +317,7 @@ SOURCE_FILE@[0; 555)\n           TUPLE_EXPR@[396; 398)\n             L_PAREN@[396; 397) \"(\"\n             R_PAREN@[397; 398) \")\"\n-          SEMI@[398; 399) \";\"\n+          SEMICOLON@[398; 399) \";\"\n         WHITESPACE@[399; 404) \"\\n    \"\n         LET_STMT@[404; 436)\n           LET_KW@[404; 407) \"let\"\n@@ -336,7 +336,7 @@ SOURCE_FILE@[0; 555)\n               AT@[419; 420) \"@\"\n               WHITESPACE@[420; 421) \" \"\n               DOT_DOT_PAT@[421; 423)\n-                DOTDOT@[421; 423) \"..\"\n+                DOT2@[421; 423) \"..\"\n             COMMA@[423; 424) \",\"\n             WHITESPACE@[424; 425) \" \"\n             BIND_PAT@[425; 429)\n@@ -349,7 +349,7 @@ SOURCE_FILE@[0; 555)\n           TUPLE_EXPR@[433; 435)\n             L_PAREN@[433; 434) \"(\"\n             R_PAREN@[434; 435) \")\"\n-          SEMI@[435; 436) \";\"\n+          SEMICOLON@[435; 436) \";\"\n         WHITESPACE@[436; 441) \"\\n    \"\n         LET_STMT@[441; 471)\n           LET_KW@[441; 444) \"let\"\n@@ -362,11 +362,11 @@ SOURCE_FILE@[0; 555)\n             COMMA@[450; 451) \",\"\n             WHITESPACE@[451; 452) \" \"\n             DOT_DOT_PAT@[452; 454)\n-              DOTDOT@[452; 454) \"..\"\n+              DOT2@[452; 454) \"..\"\n             COMMA@[454; 455) \",\"\n             WHITESPACE@[455; 456) \" \"\n             DOT_DOT_PAT@[456; 458)\n-              DOTDOT@[456; 458) \"..\"\n+              DOT2@[456; 458) \"..\"\n             COMMA@[458; 459) \",\"\n             WHITESPACE@[459; 460) \" \"\n             BIND_PAT@[460; 464)\n@@ -379,7 +379,7 @@ SOURCE_FILE@[0; 555)\n           TUPLE_EXPR@[468; 470)\n             L_PAREN@[468; 469) \"(\"\n             R_PAREN@[469; 470) \")\"\n-          SEMI@[470; 471) \";\"\n+          SEMICOLON@[470; 471) \";\"\n         WHITESPACE@[471; 476) \"\\n    \"\n         LET_STMT@[476; 512)\n           LET_KW@[476; 479) \"let\"\n@@ -392,7 +392,7 @@ SOURCE_FILE@[0; 555)\n             COMMA@[485; 486) \",\"\n             WHITESPACE@[486; 487) \" \"\n             DOT_DOT_PAT@[487; 489)\n-              DOTDOT@[487; 489) \"..\"\n+              DOT2@[487; 489) \"..\"\n             COMMA@[489; 490) \",\"\n             WHITESPACE@[490; 491) \" \"\n             BIND_PAT@[491; 494)\n@@ -407,15 +407,15 @@ SOURCE_FILE@[0; 555)\n               AT@[501; 502) \"@\"\n               WHITESPACE@[502; 503) \" \"\n               DOT_DOT_PAT@[503; 505)\n-                DOTDOT@[503; 505) \"..\"\n+                DOT2@[503; 505) \"..\"\n             R_BRACK@[505; 506) \"]\"\n           WHITESPACE@[506; 507) \" \"\n           EQ@[507; 508) \"=\"\n           WHITESPACE@[508; 509) \" \"\n           TUPLE_EXPR@[509; 511)\n             L_PAREN@[509; 510) \"(\"\n             R_PAREN@[510; 511) \")\"\n-          SEMI@[511; 512) \";\"\n+          SEMICOLON@[511; 512) \";\"\n         WHITESPACE@[512; 517) \"\\n    \"\n         LET_STMT@[517; 552)\n           LET_KW@[517; 520) \"let\"\n@@ -428,7 +428,7 @@ SOURCE_FILE@[0; 555)\n             COMMA@[526; 527) \",\"\n             WHITESPACE@[527; 528) \" \"\n             DOT_DOT_PAT@[528; 530)\n-              DOTDOT@[528; 530) \"..\"\n+              DOT2@[528; 530) \"..\"\n             COMMA@[530; 531) \",\"\n             WHITESPACE@[531; 532) \" \"\n             BIND_PAT@[532; 535)\n@@ -437,7 +437,7 @@ SOURCE_FILE@[0; 555)\n             COMMA@[535; 536) \",\"\n             WHITESPACE@[536; 537) \" \"\n             DOT_DOT_PAT@[537; 539)\n-              DOTDOT@[537; 539) \"..\"\n+              DOT2@[537; 539) \"..\"\n             COMMA@[539; 540) \",\"\n             WHITESPACE@[540; 541) \" \"\n             BIND_PAT@[541; 545)\n@@ -450,7 +450,7 @@ SOURCE_FILE@[0; 555)\n           TUPLE_EXPR@[549; 551)\n             L_PAREN@[549; 550) \"(\"\n             R_PAREN@[550; 551) \")\"\n-          SEMI@[551; 552) \";\"\n+          SEMICOLON@[551; 552) \";\"\n         WHITESPACE@[552; 553) \"\\n\"\n         R_CURLY@[553; 554) \"}\"\n   WHITESPACE@[554; 555) \"\\n\""}, {"sha": "0d786f597c9f3af462ed7b206c44d49eed2cce45", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0145_record_field_pat.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 63)\n           TUPLE_EXPR@[32; 34)\n             L_PAREN@[32; 33) \"(\"\n             R_PAREN@[33; 34) \")\"\n-          SEMI@[34; 35) \";\"\n+          SEMICOLON@[34; 35) \";\"\n         WHITESPACE@[35; 40) \"\\n    \"\n         LET_STMT@[40; 60)\n           LET_KW@[40; 43) \"let\"\n@@ -69,7 +69,7 @@ SOURCE_FILE@[0; 63)\n           TUPLE_EXPR@[57; 59)\n             L_PAREN@[57; 58) \"(\"\n             R_PAREN@[58; 59) \")\"\n-          SEMI@[59; 60) \";\"\n+          SEMICOLON@[59; 60) \";\"\n         WHITESPACE@[60; 61) \"\\n\"\n         R_CURLY@[61; 62) \"}\"\n   WHITESPACE@[62; 63) \"\\n\""}, {"sha": "d2f6d8fde6041eb0ab4b9b3261036cf22f960b0c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0146_as_precedence.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0146_as_precedence.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0146_as_precedence.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0146_as_precedence.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -37,7 +37,7 @@ SOURCE_FILE@[0; 43)\n                   PATH_SEGMENT@[36; 39)\n                     NAME_REF@[36; 39)\n                       IDENT@[36; 39) \"i32\"\n-          SEMI@[39; 40) \";\"\n+          SEMICOLON@[39; 40) \";\"\n         WHITESPACE@[40; 41) \"\\n\"\n         R_CURLY@[41; 42) \"}\"\n   WHITESPACE@[42; 43) \"\\n\""}, {"sha": "21161f7bf78f6fed387f72d008821dba30551b37", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0147_const_param.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -19,5 +19,5 @@ SOURCE_FILE@[0; 24)\n               NAME_REF@[18; 21)\n                 IDENT@[18; 21) \"u32\"\n       R_ANGLE@[21; 22) \">\"\n-    SEMI@[22; 23) \";\"\n+    SEMICOLON@[22; 23) \";\"\n   WHITESPACE@[23; 24) \"\\n\""}, {"sha": "1f297e47911abdba205c8c76c7caa25f0b219074", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_array_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_array_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_array_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_array_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -43,5 +43,5 @@ SOURCE_FILE@[0; 40)\n           WHITESPACE@[35; 36) \" \"\n           INT_NUMBER@[36; 37) \"2\"\n         R_BRACK@[37; 38) \"]\"\n-    SEMI@[38; 39) \";\"\n+    SEMICOLON@[38; 39) \";\"\n   WHITESPACE@[39; 40) \"\\n\""}, {"sha": "167c0fffab93e571aefaecfac5a7dc0f6d0464d2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0151_trait_alias.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -29,7 +29,7 @@ SOURCE_FILE@[0; 83)\n                         NAME_REF@[15; 16)\n                           IDENT@[15; 16) \"U\"\n                 R_ANGLE@[16; 17) \">\"\n-    SEMI@[17; 18) \";\"\n+    SEMICOLON@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n   TRAIT_DEF@[19; 51)\n     TRAIT_KW@[19; 24) \"trait\"\n@@ -80,7 +80,7 @@ SOURCE_FILE@[0; 83)\n                 PATH_SEGMENT@[46; 50)\n                   NAME_REF@[46; 50)\n                     IDENT@[46; 50) \"Copy\"\n-    SEMI@[50; 51) \";\"\n+    SEMICOLON@[50; 51) \";\"\n   WHITESPACE@[51; 52) \"\\n\"\n   TRAIT_DEF@[52; 82)\n     TRAIT_KW@[52; 57) \"trait\"\n@@ -124,5 +124,5 @@ SOURCE_FILE@[0; 83)\n                             NAME_REF@[79; 80)\n                               IDENT@[79; 80) \"U\"\n                     R_ANGLE@[80; 81) \">\"\n-    SEMI@[81; 82) \";\"\n+    SEMICOLON@[81; 82) \";\"\n   WHITESPACE@[82; 83) \"\\n\""}, {"sha": "ee1bd361ddb6eec7687fc725e779c7bf5d0aa806", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0154_fn_pointer_param_ident_path.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0154_fn_pointer_param_ident_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0154_fn_pointer_param_ident_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0154_fn_pointer_param_ident_path.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -18,12 +18,12 @@ SOURCE_FILE@[0; 55)\n                 PATH_SEGMENT@[14; 17)\n                   NAME_REF@[14; 17)\n                     IDENT@[14; 17) \"Bar\"\n-              COLONCOLON@[17; 19) \"::\"\n+              COLON2@[17; 19) \"::\"\n               PATH_SEGMENT@[19; 22)\n                 NAME_REF@[19; 22)\n                   IDENT@[19; 22) \"Baz\"\n         R_PAREN@[22; 23) \")\"\n-    SEMI@[23; 24) \";\"\n+    SEMICOLON@[23; 24) \";\"\n   WHITESPACE@[24; 25) \"\\n\"\n   TYPE_ALIAS_DEF@[25; 54)\n     TYPE_KW@[25; 29) \"type\"\n@@ -49,10 +49,10 @@ SOURCE_FILE@[0; 55)\n                 PATH_SEGMENT@[44; 47)\n                   NAME_REF@[44; 47)\n                     IDENT@[44; 47) \"Bar\"\n-              COLONCOLON@[47; 49) \"::\"\n+              COLON2@[47; 49) \"::\"\n               PATH_SEGMENT@[49; 52)\n                 NAME_REF@[49; 52)\n                   IDENT@[49; 52) \"Baz\"\n         R_PAREN@[52; 53) \")\"\n-    SEMI@[53; 54) \";\"\n+    SEMICOLON@[53; 54) \";\"\n   WHITESPACE@[54; 55) \"\\n\""}, {"sha": "a5f8b64802622795fdeec74a2b0f166001c9b210", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0155_closure_params.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0155_closure_params.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -55,7 +55,7 @@ SOURCE_FILE@[0; 63)\n                       PATH_SEGMENT@[46; 49)\n                         NAME_REF@[46; 49)\n                           IDENT@[46; 49) \"Qux\"\n-                    COLONCOLON@[49; 51) \"::\"\n+                    COLON2@[49; 51) \"::\"\n                     PATH_SEGMENT@[51; 55)\n                       NAME_REF@[51; 55)\n                         IDENT@[51; 55) \"Quux\"\n@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 63)\n             TUPLE_EXPR@[57; 59)\n               L_PAREN@[57; 58) \"(\"\n               R_PAREN@[58; 59) \")\"\n-          SEMI@[59; 60) \";\"\n+          SEMICOLON@[59; 60) \";\"\n         WHITESPACE@[60; 61) \"\\n\"\n         R_CURLY@[61; 62) \"}\"\n   WHITESPACE@[62; 63) \"\\n\""}, {"sha": "e0081a9f24fe84930b901bdabb2428b19365ae32", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0157_fn_pointer_unnamed_arg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_fn_pointer_unnamed_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_fn_pointer_unnamed_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_fn_pointer_unnamed_arg.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,5 +22,5 @@ SOURCE_FILE@[0; 23)\n                 NAME_REF@[17; 20)\n                   IDENT@[17; 20) \"bar\"\n         R_PAREN@[20; 21) \")\"\n-    SEMI@[21; 22) \";\"\n+    SEMICOLON@[21; 22) \";\"\n   WHITESPACE@[22; 23) \"\\n\""}, {"sha": "548be269884da84adc478c7ceac389255f929a52", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0158_binop_resets_statementness.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_binop_resets_statementness.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_binop_resets_statementness.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_binop_resets_statementness.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 28)\n               AMP@[22; 23) \"&\"\n               LITERAL@[23; 24)\n                 INT_NUMBER@[23; 24) \"2\"\n-          SEMI@[24; 25) \";\"\n+          SEMICOLON@[24; 25) \";\"\n         WHITESPACE@[25; 26) \"\\n\"\n         R_CURLY@[26; 27) \"}\"\n   WHITESPACE@[27; 28) \"\\n\""}, {"sha": "a7a547fceee36d62067480572fc0594c757ab2b3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0158_lambda_ret_block.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0158_lambda_ret_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 34)\n             ARG_LIST@[28; 30)\n               L_PAREN@[28; 29) \"(\"\n               R_PAREN@[29; 30) \")\"\n-          SEMI@[30; 31) \";\"\n+          SEMICOLON@[30; 31) \";\"\n         WHITESPACE@[31; 32) \" \"\n         R_CURLY@[32; 33) \"}\"\n   WHITESPACE@[33; 34) \"\\n\""}, {"sha": "308b5680f85ee3738c0b484816cec4381501a3b8", "filename": "crates/ra_syntax/test_data/parser/ok/0006_inner_attributes.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0006_inner_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0006_inner_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0006_inner_attributes.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,7 +1,7 @@\n SOURCE_FILE@[0; 236)\n   ATTR@[0; 8)\n     POUND@[0; 1) \"#\"\n-    EXCL@[1; 2) \"!\"\n+    BANG@[1; 2) \"!\"\n     L_BRACK@[2; 3) \"[\"\n     PATH@[3; 7)\n       PATH_SEGMENT@[3; 7)\n@@ -11,7 +11,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[8; 9) \"\\n\"\n   ATTR@[9; 23)\n     POUND@[9; 10) \"#\"\n-    EXCL@[10; 11) \"!\"\n+    BANG@[10; 11) \"!\"\n     L_BRACK@[11; 12) \"[\"\n     PATH@[12; 16)\n       PATH_SEGMENT@[12; 16)\n@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[23; 24) \"\\n\"\n   ATTR@[24; 39)\n     POUND@[24; 25) \"#\"\n-    EXCL@[25; 26) \"!\"\n+    BANG@[25; 26) \"!\"\n     L_BRACK@[26; 27) \"[\"\n     PATH@[27; 31)\n       PATH_SEGMENT@[27; 31)\n@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[39; 40) \"\\n\"\n   ATTR@[40; 116)\n     POUND@[40; 41) \"#\"\n-    EXCL@[41; 42) \"!\"\n+    BANG@[41; 42) \"!\"\n     L_BRACK@[42; 43) \"[\"\n     PATH@[43; 47)\n       PATH_SEGMENT@[43; 47)\n@@ -83,7 +83,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[116; 117) \"\\n\"\n   ATTR@[117; 130)\n     POUND@[117; 118) \"#\"\n-    EXCL@[118; 119) \"!\"\n+    BANG@[118; 119) \"!\"\n     L_BRACK@[119; 120) \"[\"\n     PATH@[120; 124)\n       PATH_SEGMENT@[120; 124)\n@@ -97,7 +97,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[130; 131) \"\\n\"\n   ATTR@[131; 155)\n     POUND@[131; 132) \"#\"\n-    EXCL@[132; 133) \"!\"\n+    BANG@[132; 133) \"!\"\n     L_BRACK@[133; 134) \"[\"\n     PATH@[134; 138)\n       PATH_SEGMENT@[134; 138)\n@@ -115,7 +115,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[155; 156) \"\\n\"\n   ATTR@[156; 173)\n     POUND@[156; 157) \"#\"\n-    EXCL@[157; 158) \"!\"\n+    BANG@[157; 158) \"!\"\n     L_BRACK@[158; 159) \"[\"\n     PATH@[159; 166)\n       PATH_SEGMENT@[159; 166)\n@@ -129,7 +129,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[173; 174) \"\\n\"\n   ATTR@[174; 191)\n     POUND@[174; 175) \"#\"\n-    EXCL@[175; 176) \"!\"\n+    BANG@[175; 176) \"!\"\n     L_BRACK@[176; 177) \"[\"\n     PATH@[177; 181)\n       PATH_SEGMENT@[177; 181)\n@@ -143,7 +143,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[191; 192) \"\\n\"\n   ATTR@[192; 214)\n     POUND@[192; 193) \"#\"\n-    EXCL@[193; 194) \"!\"\n+    BANG@[193; 194) \"!\"\n     L_BRACK@[194; 195) \"[\"\n     PATH@[195; 199)\n       PATH_SEGMENT@[195; 199)\n@@ -164,7 +164,7 @@ SOURCE_FILE@[0; 236)\n   WHITESPACE@[214; 215) \"\\n\"\n   ATTR@[215; 236)\n     POUND@[215; 216) \"#\"\n-    EXCL@[216; 217) \"!\"\n+    BANG@[216; 217) \"!\"\n     L_BRACK@[217; 218) \"[\"\n     PATH@[218; 222)\n       PATH_SEGMENT@[218; 222)"}, {"sha": "4856b4f8148efdbbe89c33e42ee58724df6a2189", "filename": "crates/ra_syntax/test_data/parser/ok/0007_extern_crate.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0007_extern_crate.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,7 +6,7 @@ SOURCE_FILE@[0; 69)\n     WHITESPACE@[12; 13) \" \"\n     NAME_REF@[13; 16)\n       IDENT@[13; 16) \"foo\"\n-    SEMI@[16; 17) \";\"\n+    SEMICOLON@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n   EXTERN_CRATE_ITEM@[18; 42)\n     EXTERN_KW@[18; 24) \"extern\"\n@@ -21,7 +21,7 @@ SOURCE_FILE@[0; 69)\n       WHITESPACE@[37; 38) \" \"\n       NAME@[38; 41)\n         IDENT@[38; 41) \"bar\"\n-    SEMI@[41; 42) \";\"\n+    SEMICOLON@[41; 42) \";\"\n   WHITESPACE@[42; 43) \"\\n\"\n   EXTERN_CRATE_ITEM@[43; 68)\n     EXTERN_KW@[43; 49) \"extern\"\n@@ -36,5 +36,5 @@ SOURCE_FILE@[0; 69)\n       WHITESPACE@[63; 64) \" \"\n       NAME@[64; 67)\n         IDENT@[64; 67) \"baz\"\n-    SEMI@[67; 68) \";\"\n+    SEMICOLON@[67; 68) \";\"\n   WHITESPACE@[68; 69) \"\\n\""}, {"sha": "1c18edd4e8bedc409fd102d4a3824e820f15526d", "filename": "crates/ra_syntax/test_data/parser/ok/0008_mod_item.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,7 +4,7 @@ SOURCE_FILE@[0; 118)\n     WHITESPACE@[3; 4) \" \"\n     NAME@[4; 5)\n       IDENT@[4; 5) \"a\"\n-    SEMI@[5; 6) \";\"\n+    SEMICOLON@[5; 6) \";\"\n   WHITESPACE@[6; 8) \"\\n\\n\"\n   MODULE@[8; 17)\n     MOD_KW@[8; 11) \"mod\"\n@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 118)\n       WHITESPACE@[74; 79) \"\\n    \"\n       ATTR@[79; 87)\n         POUND@[79; 80) \"#\"\n-        EXCL@[80; 81) \"!\"\n+        BANG@[80; 81) \"!\"\n         L_BRACK@[81; 82) \"[\"\n         PATH@[82; 86)\n           PATH_SEGMENT@[82; 86)\n@@ -77,7 +77,7 @@ SOURCE_FILE@[0; 118)\n         WHITESPACE@[95; 96) \" \"\n         NAME@[96; 97)\n           IDENT@[96; 97) \"e\"\n-        SEMI@[97; 98) \";\"\n+        SEMICOLON@[97; 98) \";\"\n       WHITESPACE@[98; 103) \"\\n    \"\n       MODULE@[103; 116)\n         MOD_KW@[103; 106) \"mod\""}, {"sha": "62a8ae433237c39b8bc01926ab7e582055f7fb87", "filename": "crates/ra_syntax/test_data/parser/ok/0009_use_item.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0009_use_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0009_use_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0009_use_item.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,15 +7,15 @@ SOURCE_FILE@[0; 19)\n         PATH_SEGMENT@[4; 7)\n           NAME_REF@[4; 7)\n             IDENT@[4; 7) \"foo\"\n-    SEMI@[7; 8) \";\"\n+    SEMICOLON@[7; 8) \";\"\n   WHITESPACE@[8; 9) \"\\n\"\n   USE_ITEM@[9; 19)\n     USE_KW@[9; 12) \"use\"\n     WHITESPACE@[12; 13) \" \"\n     USE_TREE@[13; 18)\n       PATH@[13; 18)\n         PATH_SEGMENT@[13; 18)\n-          COLONCOLON@[13; 15) \"::\"\n+          COLON2@[13; 15) \"::\"\n           NAME_REF@[15; 18)\n             IDENT@[15; 18) \"bar\"\n-    SEMI@[18; 19) \";\"\n+    SEMICOLON@[18; 19) \";\""}, {"sha": "f2689e1ed6c66fa56ffc95c5db53acb573623c0e", "filename": "crates/ra_syntax/test_data/parser/ok/0010_use_path_segments.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0010_use_path_segments.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0010_use_path_segments.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0010_use_path_segments.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,18 +7,18 @@ SOURCE_FILE@[0; 40)\n         PATH@[4; 14)\n           PATH@[4; 9)\n             PATH_SEGMENT@[4; 9)\n-              COLONCOLON@[4; 6) \"::\"\n+              COLON2@[4; 6) \"::\"\n               NAME_REF@[6; 9)\n                 IDENT@[6; 9) \"foo\"\n-          COLONCOLON@[9; 11) \"::\"\n+          COLON2@[9; 11) \"::\"\n           PATH_SEGMENT@[11; 14)\n             NAME_REF@[11; 14)\n               IDENT@[11; 14) \"bar\"\n-        COLONCOLON@[14; 16) \"::\"\n+        COLON2@[14; 16) \"::\"\n         PATH_SEGMENT@[16; 19)\n           NAME_REF@[16; 19)\n             IDENT@[16; 19) \"baz\"\n-    SEMI@[19; 20) \";\"\n+    SEMICOLON@[19; 20) \";\"\n   WHITESPACE@[20; 21) \"\\n\"\n   USE_ITEM@[21; 39)\n     USE_KW@[21; 24) \"use\"\n@@ -30,13 +30,13 @@ SOURCE_FILE@[0; 40)\n             PATH_SEGMENT@[25; 28)\n               NAME_REF@[25; 28)\n                 IDENT@[25; 28) \"foo\"\n-          COLONCOLON@[28; 30) \"::\"\n+          COLON2@[28; 30) \"::\"\n           PATH_SEGMENT@[30; 33)\n             NAME_REF@[30; 33)\n               IDENT@[30; 33) \"bar\"\n-        COLONCOLON@[33; 35) \"::\"\n+        COLON2@[33; 35) \"::\"\n         PATH_SEGMENT@[35; 38)\n           NAME_REF@[35; 38)\n             IDENT@[35; 38) \"baz\"\n-    SEMI@[38; 39) \";\"\n+    SEMICOLON@[38; 39) \";\"\n   WHITESPACE@[39; 40) \"\\n\""}, {"sha": "4426d586ad0fc50811733cf862fbc0dfae1c517d", "filename": "crates/ra_syntax/test_data/parser/ok/0011_outer_attribute.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -54,5 +54,5 @@ SOURCE_FILE@[0; 60)\n     WHITESPACE@[56; 57) \" \"\n     NAME@[57; 58)\n       IDENT@[57; 58) \"b\"\n-    SEMI@[58; 59) \";\"\n+    SEMICOLON@[58; 59) \";\"\n   WHITESPACE@[59; 60) \"\\n\""}, {"sha": "c76cf9fe935bdaf73db3e13d6950dfa8412bbd38", "filename": "crates/ra_syntax/test_data/parser/ok/0012_visibility.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0012_visibility.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -82,11 +82,11 @@ SOURCE_FILE@[0; 98)\n             PATH_SEGMENT@[73; 76)\n               NAME_REF@[73; 76)\n                 IDENT@[73; 76) \"foo\"\n-          COLONCOLON@[76; 78) \"::\"\n+          COLON2@[76; 78) \"::\"\n           PATH_SEGMENT@[78; 81)\n             NAME_REF@[78; 81)\n               IDENT@[78; 81) \"bar\"\n-        COLONCOLON@[81; 83) \"::\"\n+        COLON2@[81; 83) \"::\"\n         PATH_SEGMENT@[83; 86)\n           NAME_REF@[83; 86)\n             IDENT@[83; 86) \"baz\""}, {"sha": "552cb3daf1183a9ecaedd27cd98c0a4d64033b16", "filename": "crates/ra_syntax/test_data/parser/ok/0013_use_path_self_super.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -7,11 +7,11 @@ SOURCE_FILE@[0; 65)\n         PATH@[4; 8)\n           PATH_SEGMENT@[4; 8)\n             SELF_KW@[4; 8) \"self\"\n-        COLONCOLON@[8; 10) \"::\"\n+        COLON2@[8; 10) \"::\"\n         PATH_SEGMENT@[10; 13)\n           NAME_REF@[10; 13)\n             IDENT@[10; 13) \"foo\"\n-    SEMI@[13; 14) \";\"\n+    SEMICOLON@[13; 14) \";\"\n   WHITESPACE@[14; 15) \"\\n\"\n   USE_ITEM@[15; 37)\n     USE_KW@[15; 18) \"use\"\n@@ -22,14 +22,14 @@ SOURCE_FILE@[0; 65)\n           PATH@[19; 24)\n             PATH_SEGMENT@[19; 24)\n               SUPER_KW@[19; 24) \"super\"\n-          COLONCOLON@[24; 26) \"::\"\n+          COLON2@[24; 26) \"::\"\n           PATH_SEGMENT@[26; 31)\n             SUPER_KW@[26; 31) \"super\"\n-        COLONCOLON@[31; 33) \"::\"\n+        COLON2@[31; 33) \"::\"\n         PATH_SEGMENT@[33; 36)\n           NAME_REF@[33; 36)\n             IDENT@[33; 36) \"bar\"\n-    SEMI@[36; 37) \";\"\n+    SEMICOLON@[36; 37) \";\"\n   WHITESPACE@[37; 38) \"\\n\"\n   USE_ITEM@[38; 64)\n     USE_KW@[38; 41) \"use\"\n@@ -40,18 +40,18 @@ SOURCE_FILE@[0; 65)\n           PATH@[42; 51)\n             PATH@[42; 48)\n               PATH_SEGMENT@[42; 48)\n-                COLONCOLON@[42; 44) \"::\"\n+                COLON2@[42; 44) \"::\"\n                 SELF_KW@[44; 48) \"self\"\n-            COLONCOLON@[48; 50) \"::\"\n+            COLON2@[48; 50) \"::\"\n             PATH_SEGMENT@[50; 51)\n               NAME_REF@[50; 51)\n                 IDENT@[50; 51) \"a\"\n-          COLONCOLON@[51; 53) \"::\"\n+          COLON2@[51; 53) \"::\"\n           PATH_SEGMENT@[53; 58)\n             SUPER_KW@[53; 58) \"super\"\n-        COLONCOLON@[58; 60) \"::\"\n+        COLON2@[58; 60) \"::\"\n         PATH_SEGMENT@[60; 63)\n           NAME_REF@[60; 63)\n             IDENT@[60; 63) \"bar\"\n-    SEMI@[63; 64) \";\"\n+    SEMICOLON@[63; 64) \";\"\n   WHITESPACE@[64; 65) \"\\n\""}, {"sha": "49a68e8811e6a7e1c9f213b0ac3c73aff6634f74", "filename": "crates/ra_syntax/test_data/parser/ok/0014_use_tree.rast", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0014_use_tree.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0014_use_tree.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0014_use_tree.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,25 +4,25 @@ SOURCE_FILE@[0; 81)\n     WHITESPACE@[3; 4) \" \"\n     USE_TREE@[4; 5)\n       STAR@[4; 5) \"*\"\n-    SEMI@[5; 6) \";\"\n+    SEMICOLON@[5; 6) \";\"\n   WHITESPACE@[6; 7) \"\\n\"\n   USE_ITEM@[7; 15)\n     USE_KW@[7; 10) \"use\"\n     WHITESPACE@[10; 11) \" \"\n     USE_TREE@[11; 14)\n-      COLONCOLON@[11; 13) \"::\"\n+      COLON2@[11; 13) \"::\"\n       STAR@[13; 14) \"*\"\n-    SEMI@[14; 15) \";\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\"\n   USE_ITEM@[16; 25)\n     USE_KW@[16; 19) \"use\"\n     WHITESPACE@[19; 20) \" \"\n     USE_TREE@[20; 24)\n-      COLONCOLON@[20; 22) \"::\"\n+      COLON2@[20; 22) \"::\"\n       USE_TREE_LIST@[22; 24)\n         L_CURLY@[22; 23) \"{\"\n         R_CURLY@[23; 24) \"}\"\n-    SEMI@[24; 25) \";\"\n+    SEMICOLON@[24; 25) \";\"\n   WHITESPACE@[25; 26) \"\\n\"\n   USE_ITEM@[26; 33)\n     USE_KW@[26; 29) \"use\"\n@@ -31,7 +31,7 @@ SOURCE_FILE@[0; 81)\n       USE_TREE_LIST@[30; 32)\n         L_CURLY@[30; 31) \"{\"\n         R_CURLY@[31; 32) \"}\"\n-    SEMI@[32; 33) \";\"\n+    SEMICOLON@[32; 33) \";\"\n   WHITESPACE@[33; 34) \"\\n\"\n   USE_ITEM@[34; 45)\n     USE_KW@[34; 37) \"use\"\n@@ -41,9 +41,9 @@ SOURCE_FILE@[0; 81)\n         PATH_SEGMENT@[38; 41)\n           NAME_REF@[38; 41)\n             IDENT@[38; 41) \"foo\"\n-      COLONCOLON@[41; 43) \"::\"\n+      COLON2@[41; 43) \"::\"\n       STAR@[43; 44) \"*\"\n-    SEMI@[44; 45) \";\"\n+    SEMICOLON@[44; 45) \";\"\n   WHITESPACE@[45; 46) \"\\n\"\n   USE_ITEM@[46; 58)\n     USE_KW@[46; 49) \"use\"\n@@ -53,22 +53,22 @@ SOURCE_FILE@[0; 81)\n         PATH_SEGMENT@[50; 53)\n           NAME_REF@[50; 53)\n             IDENT@[50; 53) \"foo\"\n-      COLONCOLON@[53; 55) \"::\"\n+      COLON2@[53; 55) \"::\"\n       USE_TREE_LIST@[55; 57)\n         L_CURLY@[55; 56) \"{\"\n         R_CURLY@[56; 57) \"}\"\n-    SEMI@[57; 58) \";\"\n+    SEMICOLON@[57; 58) \";\"\n   WHITESPACE@[58; 59) \"\\n\"\n   USE_ITEM@[59; 80)\n     USE_KW@[59; 62) \"use\"\n     WHITESPACE@[62; 63) \" \"\n     USE_TREE@[63; 79)\n       PATH@[63; 68)\n         PATH_SEGMENT@[63; 68)\n-          COLONCOLON@[63; 65) \"::\"\n+          COLON2@[63; 65) \"::\"\n           NAME_REF@[65; 68)\n             IDENT@[65; 68) \"foo\"\n-      COLONCOLON@[68; 70) \"::\"\n+      COLON2@[68; 70) \"::\"\n       USE_TREE_LIST@[70; 79)\n         L_CURLY@[70; 71) \"{\"\n         USE_TREE@[71; 72)\n@@ -91,5 +91,5 @@ SOURCE_FILE@[0; 81)\n               NAME_REF@[77; 78)\n                 IDENT@[77; 78) \"c\"\n         R_CURLY@[78; 79) \"}\"\n-    SEMI@[79; 80) \";\"\n+    SEMICOLON@[79; 80) \";\"\n   WHITESPACE@[80; 81) \"\\n\""}, {"sha": "719ac98ef9bcd4888fe9f4d9e85eb7f5fc0dd273", "filename": "crates/ra_syntax/test_data/parser/ok/0015_use_tree.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0015_use_tree.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0015_use_tree.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0015_use_tree.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -13,7 +13,7 @@ SOURCE_FILE@[0; 55)\n         WHITESPACE@[10; 11) \" \"\n         NAME@[11; 14)\n           IDENT@[11; 14) \"bar\"\n-    SEMI@[14; 15) \";\"\n+    SEMICOLON@[14; 15) \";\"\n   WHITESPACE@[15; 16) \"\\n\"\n   USE_ITEM@[16; 54)\n     USE_KW@[16; 19) \"use\"\n@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 55)\n         PATH_SEGMENT@[20; 23)\n           NAME_REF@[20; 23)\n             IDENT@[20; 23) \"foo\"\n-      COLONCOLON@[23; 25) \"::\"\n+      COLON2@[23; 25) \"::\"\n       USE_TREE_LIST@[25; 53)\n         L_CURLY@[25; 26) \"{\"\n         USE_TREE@[26; 32)\n@@ -44,14 +44,14 @@ SOURCE_FILE@[0; 55)\n         COMMA@[35; 36) \",\"\n         WHITESPACE@[36; 37) \" \"\n         USE_TREE@[37; 40)\n-          COLONCOLON@[37; 39) \"::\"\n+          COLON2@[37; 39) \"::\"\n           STAR@[39; 40) \"*\"\n         COMMA@[40; 41) \",\"\n         WHITESPACE@[41; 42) \" \"\n         USE_TREE@[42; 52)\n           PATH@[42; 47)\n             PATH_SEGMENT@[42; 47)\n-              COLONCOLON@[42; 44) \"::\"\n+              COLON2@[42; 44) \"::\"\n               NAME_REF@[44; 47)\n                 IDENT@[44; 47) \"foo\"\n           WHITESPACE@[47; 48) \" \"\n@@ -61,5 +61,5 @@ SOURCE_FILE@[0; 55)\n             NAME@[51; 52)\n               IDENT@[51; 52) \"x\"\n         R_CURLY@[52; 53) \"}\"\n-    SEMI@[53; 54) \";\"\n+    SEMICOLON@[53; 54) \";\"\n   WHITESPACE@[54; 55) \"\\n\""}, {"sha": "f4739451e588556dc6c32af41fa71a216ce1de06", "filename": "crates/ra_syntax/test_data/parser/ok/0016_struct_flavors.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -4,7 +4,7 @@ SOURCE_FILE@[0; 97)\n     WHITESPACE@[6; 7) \" \"\n     NAME@[7; 8)\n       IDENT@[7; 8) \"A\"\n-    SEMI@[8; 9) \";\"\n+    SEMICOLON@[8; 9) \";\"\n   WHITESPACE@[9; 10) \"\\n\"\n   STRUCT_DEF@[10; 21)\n     STRUCT_KW@[10; 16) \"struct\"\n@@ -24,7 +24,7 @@ SOURCE_FILE@[0; 97)\n     TUPLE_FIELD_DEF_LIST@[30; 32)\n       L_PAREN@[30; 31) \"(\"\n       R_PAREN@[31; 32) \")\"\n-    SEMI@[32; 33) \";\"\n+    SEMICOLON@[32; 33) \";\"\n   WHITESPACE@[33; 35) \"\\n\\n\"\n   STRUCT_DEF@[35; 74)\n     STRUCT_KW@[35; 41) \"struct\"\n@@ -89,5 +89,5 @@ SOURCE_FILE@[0; 97)\n                 IDENT@[92; 93) \"y\"\n       COMMA@[93; 94) \",\"\n       R_PAREN@[94; 95) \")\"\n-    SEMI@[95; 96) \";\"\n+    SEMICOLON@[95; 96) \";\"\n   WHITESPACE@[96; 97) \"\\n\""}, {"sha": "5e859ef296d06ce0e6635e50fc013c302c989b11", "filename": "crates/ra_syntax/test_data/parser/ok/0018_struct_type_params.rast", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -10,7 +10,7 @@ SOURCE_FILE@[0; 290)\n         NAME@[10; 11)\n           IDENT@[10; 11) \"T\"\n       R_ANGLE@[11; 12) \">\"\n-    SEMI@[12; 13) \";\"\n+    SEMICOLON@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n   STRUCT_DEF@[14; 32)\n     STRUCT_KW@[14; 20) \"struct\"\n@@ -32,7 +32,7 @@ SOURCE_FILE@[0; 290)\n               NAME_REF@[27; 30)\n                 IDENT@[27; 30) \"u32\"\n       R_PAREN@[30; 31) \")\"\n-    SEMI@[31; 32) \";\"\n+    SEMICOLON@[31; 32) \";\"\n   WHITESPACE@[32; 33) \"\\n\"\n   STRUCT_DEF@[33; 56)\n     STRUCT_KW@[33; 39) \"struct\"\n@@ -70,7 +70,7 @@ SOURCE_FILE@[0; 290)\n     TYPE_PARAM_LIST@[67; 69)\n       L_ANGLE@[67; 68) \"<\"\n       R_ANGLE@[68; 69) \">\"\n-    SEMI@[69; 70) \";\"\n+    SEMICOLON@[69; 70) \";\"\n   WHITESPACE@[70; 71) \"\\n\"\n   STRUCT_DEF@[71; 85)\n     STRUCT_KW@[71; 77) \"struct\"\n@@ -82,7 +82,7 @@ SOURCE_FILE@[0; 290)\n       LIFETIME_PARAM@[81; 83)\n         LIFETIME@[81; 83) \"\\'a\"\n       R_ANGLE@[83; 84) \">\"\n-    SEMI@[84; 85) \";\"\n+    SEMICOLON@[84; 85) \";\"\n   WHITESPACE@[85; 86) \"\\n\"\n   STRUCT_DEF@[86; 101)\n     STRUCT_KW@[86; 92) \"struct\"\n@@ -95,7 +95,7 @@ SOURCE_FILE@[0; 290)\n         LIFETIME@[96; 98) \"\\'a\"\n         COLON@[98; 99) \":\"\n       R_ANGLE@[99; 100) \">\"\n-    SEMI@[100; 101) \";\"\n+    SEMICOLON@[100; 101) \";\"\n   WHITESPACE@[101; 102) \"\\n\"\n   STRUCT_DEF@[102; 120)\n     STRUCT_KW@[102; 108) \"struct\"\n@@ -110,7 +110,7 @@ SOURCE_FILE@[0; 290)\n         WHITESPACE@[115; 116) \" \"\n         LIFETIME@[116; 118) \"\\'b\"\n       R_ANGLE@[118; 119) \">\"\n-    SEMI@[119; 120) \";\"\n+    SEMICOLON@[119; 120) \";\"\n   WHITESPACE@[120; 121) \"\\n\"\n   STRUCT_DEF@[121; 142)\n     STRUCT_KW@[121; 127) \"struct\"\n@@ -128,7 +128,7 @@ SOURCE_FILE@[0; 290)\n         PLUS@[138; 139) \"+\"\n       WHITESPACE@[139; 140) \" \"\n       R_ANGLE@[140; 141) \">\"\n-    SEMI@[141; 142) \";\"\n+    SEMICOLON@[141; 142) \";\"\n   WHITESPACE@[142; 143) \"\\n\"\n   STRUCT_DEF@[143; 166)\n     STRUCT_KW@[143; 149) \"struct\"\n@@ -147,7 +147,7 @@ SOURCE_FILE@[0; 290)\n         WHITESPACE@[161; 162) \" \"\n         LIFETIME@[162; 164) \"\\'c\"\n       R_ANGLE@[164; 165) \">\"\n-    SEMI@[165; 166) \";\"\n+    SEMICOLON@[165; 166) \";\"\n   WHITESPACE@[166; 167) \"\\n\"\n   STRUCT_DEF@[167; 183)\n     STRUCT_KW@[167; 173) \"struct\"\n@@ -160,7 +160,7 @@ SOURCE_FILE@[0; 290)\n         LIFETIME@[178; 180) \"\\'a\"\n       COMMA@[180; 181) \",\"\n       R_ANGLE@[181; 182) \">\"\n-    SEMI@[182; 183) \";\"\n+    SEMICOLON@[182; 183) \";\"\n   WHITESPACE@[183; 184) \"\\n\"\n   STRUCT_DEF@[184; 203)\n     STRUCT_KW@[184; 190) \"struct\"\n@@ -176,7 +176,7 @@ SOURCE_FILE@[0; 290)\n       LIFETIME_PARAM@[199; 201)\n         LIFETIME@[199; 201) \"\\'b\"\n       R_ANGLE@[201; 202) \">\"\n-    SEMI@[202; 203) \";\"\n+    SEMICOLON@[202; 203) \";\"\n   WHITESPACE@[203; 204) \"\\n\"\n   STRUCT_DEF@[204; 233)\n     STRUCT_KW@[204; 210) \"struct\"\n@@ -200,7 +200,7 @@ SOURCE_FILE@[0; 290)\n         LIFETIME@[228; 230) \"\\'c\"\n       COMMA@[230; 231) \",\"\n       R_ANGLE@[231; 232) \">\"\n-    SEMI@[232; 233) \";\"\n+    SEMICOLON@[232; 233) \";\"\n   WHITESPACE@[233; 235) \"\\n\\n\"\n   STRUCT_DEF@[235; 249)\n     STRUCT_KW@[235; 241) \"struct\"\n@@ -213,7 +213,7 @@ SOURCE_FILE@[0; 290)\n         NAME@[246; 247)\n           IDENT@[246; 247) \"T\"\n       R_ANGLE@[247; 248) \">\"\n-    SEMI@[248; 249) \";\"\n+    SEMICOLON@[248; 249) \";\"\n   WHITESPACE@[249; 250) \"\\n\"\n   STRUCT_DEF@[250; 267)\n     STRUCT_KW@[250; 256) \"struct\"\n@@ -231,7 +231,7 @@ SOURCE_FILE@[0; 290)\n         NAME@[264; 265)\n           IDENT@[264; 265) \"U\"\n       R_ANGLE@[265; 266) \">\"\n-    SEMI@[266; 267) \";\"\n+    SEMICOLON@[266; 267) \";\"\n   WHITESPACE@[267; 268) \"\\n\"\n   STRUCT_DEF@[268; 289)\n     STRUCT_KW@[268; 274) \"struct\"\n@@ -253,5 +253,5 @@ SOURCE_FILE@[0; 290)\n         NAME@[286; 287)\n           IDENT@[286; 287) \"U\"\n       R_ANGLE@[287; 288) \">\"\n-    SEMI@[288; 289) \";\"\n+    SEMICOLON@[288; 289) \";\"\n   WHITESPACE@[289; 290) \"\\n\""}, {"sha": "edacc4bd980ba94e5e98b154fc018076e27db300", "filename": "crates/ra_syntax/test_data/parser/ok/0020_type_param_bounds.rast", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -10,7 +10,7 @@ SOURCE_FILE@[0; 250)\n         NAME@[9; 10)\n           IDENT@[9; 10) \"T\"\n       R_ANGLE@[10; 11) \">\"\n-    SEMI@[11; 12) \";\"\n+    SEMICOLON@[11; 12) \";\"\n   WHITESPACE@[12; 13) \"\\n\"\n   STRUCT_DEF@[13; 26)\n     STRUCT_KW@[13; 19) \"struct\"\n@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 250)\n         COLON@[23; 24) \":\"\n         TYPE_BOUND_LIST@[24; 24)\n       R_ANGLE@[24; 25) \">\"\n-    SEMI@[25; 26) \";\"\n+    SEMICOLON@[25; 26) \";\"\n   WHITESPACE@[26; 27) \"\\n\"\n   STRUCT_DEF@[27; 43)\n     STRUCT_KW@[27; 33) \"struct\"\n@@ -43,7 +43,7 @@ SOURCE_FILE@[0; 250)\n           TYPE_BOUND@[39; 41)\n             LIFETIME@[39; 41) \"\\'a\"\n       R_ANGLE@[41; 42) \">\"\n-    SEMI@[42; 43) \";\"\n+    SEMICOLON@[42; 43) \";\"\n   WHITESPACE@[43; 44) \"\\n\"\n   STRUCT_DEF@[44; 63)\n     STRUCT_KW@[44; 50) \"struct\"\n@@ -64,7 +64,7 @@ SOURCE_FILE@[0; 250)\n           PLUS@[59; 60) \"+\"\n       WHITESPACE@[60; 61) \" \"\n       R_ANGLE@[61; 62) \">\"\n-    SEMI@[62; 63) \";\"\n+    SEMICOLON@[62; 63) \";\"\n   WHITESPACE@[63; 64) \"\\n\"\n   STRUCT_DEF@[64; 86)\n     STRUCT_KW@[64; 70) \"struct\"\n@@ -88,7 +88,7 @@ SOURCE_FILE@[0; 250)\n             LIFETIME@[81; 83) \"\\'d\"\n       WHITESPACE@[83; 84) \" \"\n       R_ANGLE@[84; 85) \">\"\n-    SEMI@[85; 86) \";\"\n+    SEMICOLON@[85; 86) \";\"\n   WHITESPACE@[86; 87) \"\\n\"\n   STRUCT_DEF@[87; 116)\n     STRUCT_KW@[87; 93) \"struct\"\n@@ -120,7 +120,7 @@ SOURCE_FILE@[0; 250)\n                   NAME_REF@[109; 114)\n                     IDENT@[109; 114) \"Clone\"\n       R_ANGLE@[114; 115) \">\"\n-    SEMI@[115; 116) \";\"\n+    SEMICOLON@[115; 116) \";\"\n   WHITESPACE@[116; 117) \"\\n\"\n   STRUCT_DEF@[117; 143)\n     STRUCT_KW@[117; 123) \"struct\"\n@@ -151,7 +151,7 @@ SOURCE_FILE@[0; 250)\n                   NAME_REF@[137; 141)\n                     IDENT@[137; 141) \"Copy\"\n       R_ANGLE@[141; 142) \">\"\n-    SEMI@[142; 143) \";\"\n+    SEMICOLON@[142; 143) \";\"\n   WHITESPACE@[143; 144) \"\\n\"\n   STRUCT_DEF@[144; 180)\n     STRUCT_KW@[144; 150) \"struct\"\n@@ -170,7 +170,7 @@ SOURCE_FILE@[0; 250)\n             PATH_TYPE@[156; 161)\n               PATH@[156; 161)\n                 PATH_SEGMENT@[156; 161)\n-                  COLONCOLON@[156; 158) \"::\"\n+                  COLON2@[156; 158) \"::\"\n                   NAME_REF@[158; 161)\n                     IDENT@[158; 161) \"Foo\"\n           WHITESPACE@[161; 162) \" \"\n@@ -182,7 +182,7 @@ SOURCE_FILE@[0; 250)\n                 PATH@[164; 168)\n                   PATH_SEGMENT@[164; 168)\n                     SELF_KW@[164; 168) \"self\"\n-                COLONCOLON@[168; 170) \"::\"\n+                COLON2@[168; 170) \"::\"\n                 PATH_SEGMENT@[170; 173)\n                   NAME_REF@[170; 173)\n                     IDENT@[170; 173) \"Bar\"\n@@ -192,7 +192,7 @@ SOURCE_FILE@[0; 250)\n           TYPE_BOUND@[176; 178)\n             LIFETIME@[176; 178) \"\\'a\"\n       R_ANGLE@[178; 179) \">\"\n-    SEMI@[179; 180) \";\"\n+    SEMICOLON@[179; 180) \";\"\n   WHITESPACE@[180; 181) \"\\n\"\n   STRUCT_DEF@[181; 199)\n     STRUCT_KW@[181; 187) \"struct\"\n@@ -215,7 +215,7 @@ SOURCE_FILE@[0; 250)\n         TYPE_BOUND_LIST@[196; 196)\n       COMMA@[196; 197) \",\"\n       R_ANGLE@[197; 198) \">\"\n-    SEMI@[198; 199) \";\"\n+    SEMICOLON@[198; 199) \";\"\n   WHITESPACE@[199; 200) \"\\n\"\n   STRUCT_DEF@[200; 250)\n     STRUCT_KW@[200; 206) \"struct\"\n@@ -265,4 +265,4 @@ SOURCE_FILE@[0; 250)\n                   NAME_REF@[243; 248)\n                     IDENT@[243; 248) \"Clone\"\n       R_ANGLE@[248; 249) \">\"\n-    SEMI@[249; 250) \";\"\n+    SEMICOLON@[249; 250) \";\""}, {"sha": "dadf24fa682d3d3fa1279bd81232905ff5edb736", "filename": "crates/ra_syntax/test_data/parser/ok/0023_static_items.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0023_static_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0023_static_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0023_static_items.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@[0; 47)\n     WHITESPACE@[17; 18) \" \"\n     LITERAL@[18; 19)\n       INT_NUMBER@[18; 19) \"1\"\n-    SEMI@[19; 20) \";\"\n+    SEMICOLON@[19; 20) \";\"\n   WHITESPACE@[20; 21) \"\\n\"\n   STATIC_DEF@[21; 46)\n     STATIC_KW@[21; 27) \"static\"\n@@ -37,5 +37,5 @@ SOURCE_FILE@[0; 47)\n     WHITESPACE@[42; 43) \" \"\n     LITERAL@[43; 45)\n       INT_NUMBER@[43; 45) \"92\"\n-    SEMI@[45; 46) \";\"\n+    SEMICOLON@[45; 46) \";\"\n   WHITESPACE@[46; 47) \"\\n\""}, {"sha": "262e31f7f7d4ad44e8b90d41f5bed4bcaff6da78", "filename": "crates/ra_syntax/test_data/parser/ok/0024_const_item.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0024_const_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0024_const_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0024_const_item.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -15,7 +15,7 @@ SOURCE_FILE@[0; 64)\n     WHITESPACE@[14; 15) \" \"\n     LITERAL@[15; 16)\n       INT_NUMBER@[15; 16) \"0\"\n-    SEMI@[16; 17) \";\"\n+    SEMICOLON@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n   CONST_DEF@[18; 38)\n     CONST_KW@[18; 23) \"const\"\n@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 64)\n     WHITESPACE@[34; 35) \" \"\n     LITERAL@[35; 37)\n       INT_NUMBER@[35; 37) \"92\"\n-    SEMI@[37; 38) \";\"\n+    SEMICOLON@[37; 38) \";\"\n   WHITESPACE@[38; 39) \"\\n\"\n   CONST_DEF@[39; 63)\n     CONST_KW@[39; 44) \"const\"\n@@ -55,5 +55,5 @@ SOURCE_FILE@[0; 64)\n     WHITESPACE@[59; 60) \" \"\n     LITERAL@[60; 62)\n       INT_NUMBER@[60; 62) \"62\"\n-    SEMI@[62; 63) \";\"\n+    SEMICOLON@[62; 63) \";\"\n   WHITESPACE@[63; 64) \"\\n\""}, {"sha": "5542f7701be5b82e3b09818132cbec251b8c0f9b", "filename": "crates/ra_syntax/test_data/parser/ok/0028_operator_binding_power.rast", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -53,7 +53,7 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[52; 53) \" \"\n               LITERAL@[53; 54)\n                 INT_NUMBER@[53; 54) \"6\"\n-          SEMI@[54; 55) \";\"\n+          SEMICOLON@[54; 55) \";\"\n         WHITESPACE@[55; 60) \"\\n    \"\n         EXPR_STMT@[60; 70)\n           BIN_EXPR@[60; 69)\n@@ -70,7 +70,7 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[67; 68) \" \"\n               LITERAL@[68; 69)\n                 INT_NUMBER@[68; 69) \"3\"\n-          SEMI@[69; 70) \";\"\n+          SEMICOLON@[69; 70) \";\"\n         WHITESPACE@[70; 75) \"\\n    \"\n         EXPR_STMT@[75; 86)\n           BIN_EXPR@[75; 85)\n@@ -87,7 +87,7 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[83; 84) \" \"\n               LITERAL@[84; 85)\n                 INT_NUMBER@[84; 85) \"3\"\n-          SEMI@[85; 86) \";\"\n+          SEMICOLON@[85; 86) \";\"\n         WHITESPACE@[86; 91) \"\\n    \"\n         EXPR_STMT@[91; 102)\n           BIN_EXPR@[91; 101)\n@@ -104,7 +104,7 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[99; 100) \" \"\n               LITERAL@[100; 101)\n                 INT_NUMBER@[100; 101) \"3\"\n-          SEMI@[101; 102) \";\"\n+          SEMICOLON@[101; 102) \";\"\n         WHITESPACE@[102; 107) \"\\n    \"\n         EXPR_STMT@[107; 117)\n           BIN_EXPR@[107; 116)\n@@ -121,7 +121,7 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[114; 115) \" \"\n               LITERAL@[115; 116)\n                 INT_NUMBER@[115; 116) \"3\"\n-          SEMI@[116; 117) \";\"\n+          SEMICOLON@[116; 117) \";\"\n         WHITESPACE@[117; 122) \"\\n    \"\n         EXPR_STMT@[122; 132)\n           BIN_EXPR@[122; 131)\n@@ -138,14 +138,14 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[129; 130) \" \"\n               LITERAL@[130; 131)\n                 INT_NUMBER@[130; 131) \"3\"\n-          SEMI@[131; 132) \";\"\n+          SEMICOLON@[131; 132) \";\"\n         WHITESPACE@[132; 137) \"\\n    \"\n         EXPR_STMT@[137; 148)\n           BIN_EXPR@[137; 147)\n             LITERAL@[137; 138)\n               INT_NUMBER@[137; 138) \"1\"\n             WHITESPACE@[138; 139) \" \"\n-            EQEQ@[139; 141) \"==\"\n+            EQ2@[139; 141) \"==\"\n             WHITESPACE@[141; 142) \" \"\n             BIN_EXPR@[142; 147)\n               LITERAL@[142; 143)\n@@ -155,24 +155,24 @@ SOURCE_FILE@[0; 248)\n               WHITESPACE@[145; 146) \" \"\n               LITERAL@[146; 147)\n                 INT_NUMBER@[146; 147) \"3\"\n-          SEMI@[147; 148) \";\"\n+          SEMICOLON@[147; 148) \";\"\n         WHITESPACE@[148; 153) \"\\n    \"\n         EXPR_STMT@[153; 165)\n           BIN_EXPR@[153; 164)\n             LITERAL@[153; 154)\n               INT_NUMBER@[153; 154) \"1\"\n             WHITESPACE@[154; 155) \" \"\n-            AMPAMP@[155; 157) \"&&\"\n+            AMP2@[155; 157) \"&&\"\n             WHITESPACE@[157; 158) \" \"\n             BIN_EXPR@[158; 164)\n               LITERAL@[158; 159)\n                 INT_NUMBER@[158; 159) \"2\"\n               WHITESPACE@[159; 160) \" \"\n-              EQEQ@[160; 162) \"==\"\n+              EQ2@[160; 162) \"==\"\n               WHITESPACE@[162; 163) \" \"\n               LITERAL@[163; 164)\n                 INT_NUMBER@[163; 164) \"3\"\n-          SEMI@[164; 165) \";\"\n+          SEMICOLON@[164; 165) \";\"\n         WHITESPACE@[165; 170) \"\\n    \"\n         COMMENT@[170; 184) \"//1 || 2 && 2;\"\n         WHITESPACE@[184; 189) \"\\n    \""}, {"sha": "78056aa953ea18aed7c9e235ac409535b75912d0", "filename": "crates/ra_syntax/test_data/parser/ok/0029_range_forms.rast", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0029_range_forms.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0029_range_forms.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0029_range_forms.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -14,7 +14,7 @@ SOURCE_FILE@[0; 153)\n         WHITESPACE@[10; 15) \"\\n    \"\n         EXPR_STMT@[15; 23)\n           RANGE_EXPR@[15; 22)\n-            DOTDOT@[15; 17) \"..\"\n+            DOT2@[15; 17) \"..\"\n             BIN_EXPR@[17; 22)\n               LITERAL@[17; 18)\n                 INT_NUMBER@[17; 18) \"1\"\n@@ -23,12 +23,12 @@ SOURCE_FILE@[0; 153)\n               WHITESPACE@[20; 21) \" \"\n               LITERAL@[21; 22)\n                 INT_NUMBER@[21; 22) \"1\"\n-          SEMI@[22; 23) \";\"\n+          SEMICOLON@[22; 23) \";\"\n         WHITESPACE@[23; 28) \"\\n    \"\n         EXPR_STMT@[28; 36)\n           BIN_EXPR@[28; 35)\n             RANGE_EXPR@[28; 31)\n-              DOTDOT@[28; 30) \"..\"\n+              DOT2@[28; 30) \"..\"\n               PATH_EXPR@[30; 31)\n                 PATH@[30; 31)\n                   PATH_SEGMENT@[30; 31)\n@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 153)\n             WHITESPACE@[33; 34) \" \"\n             LITERAL@[34; 35)\n               INT_NUMBER@[34; 35) \"2\"\n-          SEMI@[35; 36) \";\"\n+          SEMICOLON@[35; 36) \";\"\n         WHITESPACE@[36; 41) \"\\n    \"\n         EXPR_STMT@[41; 59)\n           BIN_EXPR@[41; 58)\n@@ -54,16 +54,16 @@ SOURCE_FILE@[0; 153)\n             RANGE_EXPR@[45; 58)\n               LITERAL@[45; 50)\n                 FALSE_KW@[45; 50) \"false\"\n-              DOTDOT@[50; 52) \"..\"\n+              DOT2@[50; 52) \"..\"\n               BIN_EXPR@[52; 58)\n                 LITERAL@[52; 53)\n                   INT_NUMBER@[52; 53) \"1\"\n                 WHITESPACE@[53; 54) \" \"\n-                EQEQ@[54; 56) \"==\"\n+                EQ2@[54; 56) \"==\"\n                 WHITESPACE@[56; 57) \" \"\n                 LITERAL@[57; 58)\n                   INT_NUMBER@[57; 58) \"1\"\n-          SEMI@[58; 59) \";\"\n+          SEMICOLON@[58; 59) \";\"\n         WHITESPACE@[59; 64) \"\\n    \"\n         LET_STMT@[64; 76)\n           LET_KW@[64; 67) \"let\"\n@@ -77,12 +77,12 @@ SOURCE_FILE@[0; 153)\n           RANGE_EXPR@[72; 75)\n             LITERAL@[72; 73)\n               INT_NUMBER@[72; 73) \"1\"\n-            DOTDOT@[73; 75) \"..\"\n-          SEMI@[75; 76) \";\"\n+            DOT2@[73; 75) \"..\"\n+          SEMICOLON@[75; 76) \";\"\n         WHITESPACE@[76; 86) \"\\n    \\n    \"\n         EXPR_STMT@[86; 95)\n           RANGE_EXPR@[86; 94)\n-            DOTDOTEQ@[86; 89) \"..=\"\n+            DOT2EQ@[86; 89) \"..=\"\n             BIN_EXPR@[89; 94)\n               LITERAL@[89; 90)\n                 INT_NUMBER@[89; 90) \"1\"\n@@ -91,12 +91,12 @@ SOURCE_FILE@[0; 153)\n               WHITESPACE@[92; 93) \" \"\n               LITERAL@[93; 94)\n                 INT_NUMBER@[93; 94) \"1\"\n-          SEMI@[94; 95) \";\"\n+          SEMICOLON@[94; 95) \";\"\n         WHITESPACE@[95; 100) \"\\n    \"\n         EXPR_STMT@[100; 109)\n           BIN_EXPR@[100; 108)\n             RANGE_EXPR@[100; 104)\n-              DOTDOTEQ@[100; 103) \"..=\"\n+              DOT2EQ@[100; 103) \"..=\"\n               PATH_EXPR@[103; 104)\n                 PATH@[103; 104)\n                   PATH_SEGMENT@[103; 104)\n@@ -107,7 +107,7 @@ SOURCE_FILE@[0; 153)\n             WHITESPACE@[106; 107) \" \"\n             LITERAL@[107; 108)\n               INT_NUMBER@[107; 108) \"2\"\n-          SEMI@[108; 109) \";\"\n+          SEMICOLON@[108; 109) \";\"\n         WHITESPACE@[109; 114) \"\\n    \"\n         EXPR_STMT@[114; 133)\n           BIN_EXPR@[114; 132)\n@@ -122,16 +122,16 @@ SOURCE_FILE@[0; 153)\n             RANGE_EXPR@[118; 132)\n               LITERAL@[118; 123)\n                 FALSE_KW@[118; 123) \"false\"\n-              DOTDOTEQ@[123; 126) \"..=\"\n+              DOT2EQ@[123; 126) \"..=\"\n               BIN_EXPR@[126; 132)\n                 LITERAL@[126; 127)\n                   INT_NUMBER@[126; 127) \"1\"\n                 WHITESPACE@[127; 128) \" \"\n-                EQEQ@[128; 130) \"==\"\n+                EQ2@[128; 130) \"==\"\n                 WHITESPACE@[130; 131) \" \"\n                 LITERAL@[131; 132)\n                   INT_NUMBER@[131; 132) \"1\"\n-          SEMI@[132; 133) \";\"\n+          SEMICOLON@[132; 133) \";\"\n         WHITESPACE@[133; 138) \"\\n    \"\n         LET_STMT@[138; 150)\n           LET_KW@[138; 141) \"let\"\n@@ -145,8 +145,8 @@ SOURCE_FILE@[0; 153)\n           RANGE_EXPR@[146; 149)\n             LITERAL@[146; 147)\n               INT_NUMBER@[146; 147) \"1\"\n-            DOTDOT@[147; 149) \"..\"\n-          SEMI@[149; 150) \";\"\n+            DOT2@[147; 149) \"..\"\n+          SEMICOLON@[149; 150) \";\"\n         WHITESPACE@[150; 151) \"\\n\"\n         R_CURLY@[151; 152) \"}\"\n   WHITESPACE@[152; 153) \"\\n\""}, {"sha": "4e583c6e8ffc6909081fb575a5d0306c3919355d", "filename": "crates/ra_syntax/test_data/parser/ok/0030_string_suffixes.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_string_suffixes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_string_suffixes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_string_suffixes.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,7 +22,7 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[23; 24) \" \"\n           LITERAL@[24; 30)\n             CHAR@[24; 30) \"\\'c\\'u32\"\n-          SEMI@[30; 31) \";\"\n+          SEMICOLON@[30; 31) \";\"\n         WHITESPACE@[31; 36) \"\\n    \"\n         LET_STMT@[36; 60)\n           LET_KW@[36; 39) \"let\"\n@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[43; 44) \" \"\n           LITERAL@[44; 59)\n             STRING@[44; 59) \"\\\"string\\\"invalid\"\n-          SEMI@[59; 60) \";\"\n+          SEMICOLON@[59; 60) \";\"\n         WHITESPACE@[60; 65) \"\\n    \"\n         LET_STMT@[65; 83)\n           LET_KW@[65; 68) \"let\"\n@@ -46,7 +46,7 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[72; 73) \" \"\n           LITERAL@[73; 82)\n             BYTE@[73; 82) \"b\\'b\\'_suff\"\n-          SEMI@[82; 83) \";\"\n+          SEMICOLON@[82; 83) \";\"\n         WHITESPACE@[83; 88) \"\\n    \"\n         LET_STMT@[88; 109)\n           LET_KW@[88; 91) \"let\"\n@@ -58,7 +58,7 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[95; 96) \" \"\n           LITERAL@[96; 108)\n             BYTE_STRING@[96; 108) \"b\\\"bs\\\"invalid\"\n-          SEMI@[108; 109) \";\"\n+          SEMICOLON@[108; 109) \";\"\n         WHITESPACE@[109; 110) \"\\n\"\n         R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\""}, {"sha": "4131cd81a85663f9a3379797066e0a39c4242b7d", "filename": "crates/ra_syntax/test_data/parser/ok/0030_traits.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0030_traits.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@[0; 96)\n         PARAM_LIST@[31; 33)\n           L_PAREN@[31; 32) \"(\"\n           R_PAREN@[32; 33) \")\"\n-        SEMI@[33; 34) \";\"\n+        SEMICOLON@[33; 34) \";\"\n       WHITESPACE@[34; 35) \"\\n\"\n       R_CURLY@[35; 36) \"}\"\n   WHITESPACE@[36; 38) \"\\n\\n\"\n@@ -49,13 +49,13 @@ SOURCE_FILE@[0; 96)\n                   PATH_SEGMENT@[84; 87)\n                     NAME_REF@[84; 87)\n                       IDENT@[84; 87) \"i32\"\n-              SEMI@[87; 88) \";\"\n+              SEMICOLON@[87; 88) \";\"\n               WHITESPACE@[88; 89) \" \"\n               LITERAL@[89; 90)\n                 INT_NUMBER@[89; 90) \"1\"\n               R_BRACK@[90; 91) \"]\"\n           R_PAREN@[91; 92) \")\"\n-        SEMI@[92; 93) \";\"\n+        SEMICOLON@[92; 93) \";\"\n       WHITESPACE@[93; 94) \"\\n\"\n       R_CURLY@[94; 95) \"}\"\n   WHITESPACE@[95; 96) \"\\n\""}, {"sha": "23757df52b4f1d6f91284b94965ce7009f6b147d", "filename": "crates/ra_syntax/test_data/parser/ok/0031_extern.rast", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0031_extern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0031_extern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0031_extern.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[35; 42)\n               PATH@[35; 42)\n                 PATH_SEGMENT@[35; 42)\n-                  COLONCOLON@[35; 37) \"::\"\n+                  COLON2@[35; 37) \"::\"\n                   NAME_REF@[37; 42)\n                     IDENT@[37; 42) \"c_int\"\n           COMMA@[42; 43) \",\"\n@@ -39,7 +39,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[48; 55)\n               PATH@[48; 55)\n                 PATH_SEGMENT@[48; 55)\n-                  COLONCOLON@[48; 50) \"::\"\n+                  COLON2@[48; 50) \"::\"\n                   NAME_REF@[50; 55)\n                     IDENT@[50; 55) \"c_int\"\n           COMMA@[55; 56) \",\"\n@@ -53,7 +53,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[67; 74)\n               PATH@[67; 74)\n                 PATH_SEGMENT@[67; 74)\n-                  COLONCOLON@[67; 69) \"::\"\n+                  COLON2@[67; 69) \"::\"\n                   NAME_REF@[69; 74)\n                     IDENT@[69; 74) \"c_int\"\n           R_PAREN@[74; 75) \")\"\n@@ -64,10 +64,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[79; 86)\n             PATH@[79; 86)\n               PATH_SEGMENT@[79; 86)\n-                COLONCOLON@[79; 81) \"::\"\n+                COLON2@[79; 81) \"::\"\n                 NAME_REF@[81; 86)\n                   IDENT@[81; 86) \"c_int\"\n-        SEMI@[86; 87) \";\"\n+        SEMICOLON@[86; 87) \";\"\n       WHITESPACE@[87; 92) \"\\n    \"\n       FN_DEF@[92; 167)\n         VISIBILITY@[92; 95)\n@@ -88,7 +88,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[108; 115)\n               PATH@[108; 115)\n                 PATH_SEGMENT@[108; 115)\n-                  COLONCOLON@[108; 110) \"::\"\n+                  COLON2@[108; 110) \"::\"\n                   NAME_REF@[110; 115)\n                     IDENT@[110; 115) \"c_int\"\n           COMMA@[115; 116) \",\"\n@@ -129,10 +129,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[159; 166)\n             PATH@[159; 166)\n               PATH_SEGMENT@[159; 166)\n-                COLONCOLON@[159; 161) \"::\"\n+                COLON2@[159; 161) \"::\"\n                 NAME_REF@[161; 166)\n                   IDENT@[161; 166) \"c_int\"\n-        SEMI@[166; 167) \";\"\n+        SEMICOLON@[166; 167) \";\"\n       WHITESPACE@[167; 172) \"\\n    \"\n       FN_DEF@[172; 276)\n         VISIBILITY@[172; 175)\n@@ -153,7 +153,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[195; 202)\n               PATH@[195; 202)\n                 PATH_SEGMENT@[195; 202)\n-                  COLONCOLON@[195; 197) \"::\"\n+                  COLON2@[195; 197) \"::\"\n                   NAME_REF@[197; 202)\n                     IDENT@[197; 202) \"c_int\"\n           COMMA@[202; 203) \",\"\n@@ -194,10 +194,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[268; 275)\n             PATH@[268; 275)\n               PATH_SEGMENT@[268; 275)\n-                COLONCOLON@[268; 270) \"::\"\n+                COLON2@[268; 270) \"::\"\n                 NAME_REF@[270; 275)\n                   IDENT@[270; 275) \"c_int\"\n-        SEMI@[275; 276) \";\"\n+        SEMICOLON@[275; 276) \";\"\n       WHITESPACE@[276; 281) \"\\n    \"\n       FN_DEF@[281; 341)\n         VISIBILITY@[281; 284)\n@@ -218,7 +218,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[303; 310)\n               PATH@[303; 310)\n                 PATH_SEGMENT@[303; 310)\n-                  COLONCOLON@[303; 305) \"::\"\n+                  COLON2@[303; 305) \"::\"\n                   NAME_REF@[305; 310)\n                     IDENT@[305; 310) \"c_int\"\n           COMMA@[310; 311) \",\"\n@@ -232,7 +232,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[321; 328)\n               PATH@[321; 328)\n                 PATH_SEGMENT@[321; 328)\n-                  COLONCOLON@[321; 323) \"::\"\n+                  COLON2@[321; 323) \"::\"\n                   NAME_REF@[323; 328)\n                     IDENT@[323; 328) \"c_int\"\n           R_PAREN@[328; 329) \")\"\n@@ -243,10 +243,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[333; 340)\n             PATH@[333; 340)\n               PATH_SEGMENT@[333; 340)\n-                COLONCOLON@[333; 335) \"::\"\n+                COLON2@[333; 335) \"::\"\n                 NAME_REF@[335; 340)\n                   IDENT@[335; 340) \"c_int\"\n-        SEMI@[340; 341) \";\"\n+        SEMICOLON@[340; 341) \";\"\n       WHITESPACE@[341; 346) \"\\n    \"\n       FN_DEF@[346; 469)\n         VISIBILITY@[346; 349)\n@@ -267,7 +267,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[373; 380)\n               PATH@[373; 380)\n                 PATH_SEGMENT@[373; 380)\n-                  COLONCOLON@[373; 375) \"::\"\n+                  COLON2@[373; 375) \"::\"\n                   NAME_REF@[375; 380)\n                     IDENT@[375; 380) \"c_int\"\n           COMMA@[380; 381) \",\"\n@@ -312,10 +312,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[461; 468)\n             PATH@[461; 468)\n               PATH_SEGMENT@[461; 468)\n-                COLONCOLON@[461; 463) \"::\"\n+                COLON2@[461; 463) \"::\"\n                 NAME_REF@[463; 468)\n                   IDENT@[463; 468) \"c_int\"\n-        SEMI@[468; 469) \";\"\n+        SEMICOLON@[468; 469) \";\"\n       WHITESPACE@[469; 474) \"\\n    \"\n       FN_DEF@[474; 691)\n         VISIBILITY@[474; 477)\n@@ -336,7 +336,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[500; 507)\n               PATH@[500; 507)\n                 PATH_SEGMENT@[500; 507)\n-                  COLONCOLON@[500; 502) \"::\"\n+                  COLON2@[500; 502) \"::\"\n                   NAME_REF@[502; 507)\n                     IDENT@[502; 507) \"c_int\"\n           COMMA@[507; 508) \",\"\n@@ -350,7 +350,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[538; 545)\n               PATH@[538; 545)\n                 PATH_SEGMENT@[538; 545)\n-                  COLONCOLON@[538; 540) \"::\"\n+                  COLON2@[538; 540) \"::\"\n                   NAME_REF@[540; 545)\n                     IDENT@[540; 545) \"c_int\"\n           COMMA@[545; 546) \",\"\n@@ -364,7 +364,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[578; 585)\n               PATH@[578; 585)\n                 PATH_SEGMENT@[578; 585)\n-                  COLONCOLON@[578; 580) \"::\"\n+                  COLON2@[578; 580) \"::\"\n                   NAME_REF@[580; 585)\n                     IDENT@[580; 585) \"c_int\"\n           COMMA@[585; 586) \",\"\n@@ -382,7 +382,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[622; 630)\n                 PATH@[622; 630)\n                   PATH_SEGMENT@[622; 630)\n-                    COLONCOLON@[622; 624) \"::\"\n+                    COLON2@[622; 624) \"::\"\n                     NAME_REF@[624; 630)\n                       IDENT@[624; 630) \"c_void\"\n           COMMA@[630; 631) \",\"\n@@ -400,7 +400,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[667; 678)\n                 PATH@[667; 678)\n                   PATH_SEGMENT@[667; 678)\n-                    COLONCOLON@[667; 669) \"::\"\n+                    COLON2@[667; 669) \"::\"\n                     NAME_REF@[669; 678)\n                       IDENT@[669; 678) \"socklen_t\"\n           R_PAREN@[678; 679) \")\"\n@@ -411,10 +411,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[683; 690)\n             PATH@[683; 690)\n               PATH_SEGMENT@[683; 690)\n-                COLONCOLON@[683; 685) \"::\"\n+                COLON2@[683; 685) \"::\"\n                 NAME_REF@[685; 690)\n                   IDENT@[685; 690) \"c_int\"\n-        SEMI@[690; 691) \";\"\n+        SEMICOLON@[690; 691) \";\"\n       WHITESPACE@[691; 696) \"\\n    \"\n       FN_DEF@[696; 864)\n         VISIBILITY@[696; 699)\n@@ -435,7 +435,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[722; 729)\n               PATH@[722; 729)\n                 PATH_SEGMENT@[722; 729)\n-                  COLONCOLON@[722; 724) \"::\"\n+                  COLON2@[722; 724) \"::\"\n                   NAME_REF@[724; 729)\n                     IDENT@[724; 729) \"c_int\"\n           COMMA@[729; 730) \",\"\n@@ -449,7 +449,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[738; 745)\n               PATH@[738; 745)\n                 PATH_SEGMENT@[738; 745)\n-                  COLONCOLON@[738; 740) \"::\"\n+                  COLON2@[738; 740) \"::\"\n                   NAME_REF@[740; 745)\n                     IDENT@[740; 745) \"c_int\"\n           COMMA@[745; 746) \",\"\n@@ -463,7 +463,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[753; 760)\n               PATH@[753; 760)\n                 PATH_SEGMENT@[753; 760)\n-                  COLONCOLON@[753; 755) \"::\"\n+                  COLON2@[753; 755) \"::\"\n                   NAME_REF@[755; 760)\n                     IDENT@[755; 760) \"c_int\"\n           COMMA@[760; 761) \",\"\n@@ -481,7 +481,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[798; 806)\n                 PATH@[798; 806)\n                   PATH_SEGMENT@[798; 806)\n-                    COLONCOLON@[798; 800) \"::\"\n+                    COLON2@[798; 800) \"::\"\n                     NAME_REF@[800; 806)\n                       IDENT@[800; 806) \"c_void\"\n           COMMA@[806; 807) \",\"\n@@ -505,10 +505,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[856; 863)\n             PATH@[856; 863)\n               PATH_SEGMENT@[856; 863)\n-                COLONCOLON@[856; 858) \"::\"\n+                COLON2@[856; 858) \"::\"\n                 NAME_REF@[858; 863)\n                   IDENT@[858; 863) \"c_int\"\n-        SEMI@[863; 864) \";\"\n+        SEMICOLON@[863; 864) \";\"\n       WHITESPACE@[864; 869) \"\\n    \"\n       FN_DEF@[869; 992)\n         VISIBILITY@[869; 872)\n@@ -529,7 +529,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[896; 903)\n               PATH@[896; 903)\n                 PATH_SEGMENT@[896; 903)\n-                  COLONCOLON@[896; 898) \"::\"\n+                  COLON2@[896; 898) \"::\"\n                   NAME_REF@[898; 903)\n                     IDENT@[898; 903) \"c_int\"\n           COMMA@[903; 904) \",\"\n@@ -574,10 +574,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[984; 991)\n             PATH@[984; 991)\n               PATH_SEGMENT@[984; 991)\n-                COLONCOLON@[984; 986) \"::\"\n+                COLON2@[984; 986) \"::\"\n                 NAME_REF@[986; 991)\n                   IDENT@[986; 991) \"c_int\"\n-        SEMI@[991; 992) \";\"\n+        SEMICOLON@[991; 992) \";\"\n       WHITESPACE@[992; 997) \"\\n    \"\n       FN_DEF@[997; 1173)\n         VISIBILITY@[997; 1000)\n@@ -598,7 +598,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1019; 1026)\n               PATH@[1019; 1026)\n                 PATH_SEGMENT@[1019; 1026)\n-                  COLONCOLON@[1019; 1021) \"::\"\n+                  COLON2@[1019; 1021) \"::\"\n                   NAME_REF@[1021; 1026)\n                     IDENT@[1021; 1026) \"c_int\"\n           COMMA@[1026; 1027) \",\"\n@@ -616,7 +616,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[1040; 1048)\n                 PATH@[1040; 1048)\n                   PATH_SEGMENT@[1040; 1048)\n-                    COLONCOLON@[1040; 1042) \"::\"\n+                    COLON2@[1040; 1042) \"::\"\n                     NAME_REF@[1042; 1048)\n                       IDENT@[1042; 1048) \"c_void\"\n           COMMA@[1048; 1049) \",\"\n@@ -630,7 +630,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1055; 1063)\n               PATH@[1055; 1063)\n                 PATH_SEGMENT@[1055; 1063)\n-                  COLONCOLON@[1055; 1057) \"::\"\n+                  COLON2@[1055; 1057) \"::\"\n                   NAME_REF@[1057; 1063)\n                     IDENT@[1057; 1063) \"size_t\"\n           COMMA@[1063; 1064) \",\"\n@@ -644,7 +644,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1090; 1097)\n               PATH@[1090; 1097)\n                 PATH_SEGMENT@[1090; 1097)\n-                  COLONCOLON@[1090; 1092) \"::\"\n+                  COLON2@[1090; 1092) \"::\"\n                   NAME_REF@[1092; 1097)\n                     IDENT@[1092; 1097) \"c_int\"\n           COMMA@[1097; 1098) \",\"\n@@ -685,10 +685,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[1163; 1172)\n             PATH@[1163; 1172)\n               PATH_SEGMENT@[1163; 1172)\n-                COLONCOLON@[1163; 1165) \"::\"\n+                COLON2@[1163; 1165) \"::\"\n                 NAME_REF@[1165; 1172)\n                   IDENT@[1165; 1172) \"ssize_t\"\n-        SEMI@[1172; 1173) \";\"\n+        SEMICOLON@[1172; 1173) \";\"\n       WHITESPACE@[1173; 1178) \"\\n    \"\n       FN_DEF@[1178; 1289)\n         VISIBILITY@[1178; 1181)\n@@ -709,7 +709,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1198; 1205)\n               PATH@[1198; 1205)\n                 PATH_SEGMENT@[1198; 1205)\n-                  COLONCOLON@[1198; 1200) \"::\"\n+                  COLON2@[1198; 1200) \"::\"\n                   NAME_REF@[1200; 1205)\n                     IDENT@[1200; 1205) \"c_int\"\n           COMMA@[1205; 1206) \",\"\n@@ -727,7 +727,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[1219; 1227)\n                 PATH@[1219; 1227)\n                   PATH_SEGMENT@[1219; 1227)\n-                    COLONCOLON@[1219; 1221) \"::\"\n+                    COLON2@[1219; 1221) \"::\"\n                     NAME_REF@[1221; 1227)\n                       IDENT@[1221; 1227) \"c_void\"\n           COMMA@[1227; 1228) \",\"\n@@ -741,7 +741,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1234; 1242)\n               PATH@[1234; 1242)\n                 PATH_SEGMENT@[1234; 1242)\n-                  COLONCOLON@[1234; 1236) \"::\"\n+                  COLON2@[1234; 1236) \"::\"\n                   NAME_REF@[1236; 1242)\n                     IDENT@[1236; 1242) \"size_t\"\n           COMMA@[1242; 1243) \",\"\n@@ -755,7 +755,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1267; 1274)\n               PATH@[1267; 1274)\n                 PATH_SEGMENT@[1267; 1274)\n-                  COLONCOLON@[1267; 1269) \"::\"\n+                  COLON2@[1267; 1269) \"::\"\n                   NAME_REF@[1269; 1274)\n                     IDENT@[1269; 1274) \"c_int\"\n           R_PAREN@[1274; 1275) \")\"\n@@ -766,10 +766,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[1279; 1288)\n             PATH@[1279; 1288)\n               PATH_SEGMENT@[1279; 1288)\n-                COLONCOLON@[1279; 1281) \"::\"\n+                COLON2@[1279; 1281) \"::\"\n                 NAME_REF@[1281; 1288)\n                   IDENT@[1281; 1288) \"ssize_t\"\n-        SEMI@[1288; 1289) \";\"\n+        SEMICOLON@[1288; 1289) \";\"\n       WHITESPACE@[1289; 1294) \"\\n    \"\n       FN_DEF@[1294; 1481)\n         VISIBILITY@[1294; 1297)\n@@ -790,7 +790,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1318; 1325)\n               PATH@[1318; 1325)\n                 PATH_SEGMENT@[1318; 1325)\n-                  COLONCOLON@[1318; 1320) \"::\"\n+                  COLON2@[1318; 1320) \"::\"\n                   NAME_REF@[1320; 1325)\n                     IDENT@[1320; 1325) \"c_int\"\n           COMMA@[1325; 1326) \",\"\n@@ -808,7 +808,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[1337; 1345)\n                 PATH@[1337; 1345)\n                   PATH_SEGMENT@[1337; 1345)\n-                    COLONCOLON@[1337; 1339) \"::\"\n+                    COLON2@[1337; 1339) \"::\"\n                     NAME_REF@[1339; 1345)\n                       IDENT@[1339; 1345) \"c_void\"\n           COMMA@[1345; 1346) \",\"\n@@ -822,7 +822,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1352; 1360)\n               PATH@[1352; 1360)\n                 PATH_SEGMENT@[1352; 1360)\n-                  COLONCOLON@[1352; 1354) \"::\"\n+                  COLON2@[1352; 1354) \"::\"\n                   NAME_REF@[1354; 1360)\n                     IDENT@[1354; 1360) \"size_t\"\n           COMMA@[1360; 1361) \",\"\n@@ -836,7 +836,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1389; 1396)\n               PATH@[1389; 1396)\n                 PATH_SEGMENT@[1389; 1396)\n-                  COLONCOLON@[1389; 1391) \"::\"\n+                  COLON2@[1389; 1391) \"::\"\n                   NAME_REF@[1391; 1396)\n                     IDENT@[1391; 1396) \"c_int\"\n           COMMA@[1396; 1397) \",\"\n@@ -854,7 +854,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[1409; 1419)\n                 PATH@[1409; 1419)\n                   PATH_SEGMENT@[1409; 1419)\n-                    COLONCOLON@[1409; 1411) \"::\"\n+                    COLON2@[1409; 1411) \"::\"\n                     NAME_REF@[1411; 1419)\n                       IDENT@[1411; 1419) \"sockaddr\"\n           COMMA@[1419; 1420) \",\"\n@@ -872,7 +872,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[1455; 1466)\n                 PATH@[1455; 1466)\n                   PATH_SEGMENT@[1455; 1466)\n-                    COLONCOLON@[1455; 1457) \"::\"\n+                    COLON2@[1455; 1457) \"::\"\n                     NAME_REF@[1457; 1466)\n                       IDENT@[1457; 1466) \"socklen_t\"\n           R_PAREN@[1466; 1467) \")\"\n@@ -883,10 +883,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[1471; 1480)\n             PATH@[1471; 1480)\n               PATH_SEGMENT@[1471; 1480)\n-                COLONCOLON@[1471; 1473) \"::\"\n+                COLON2@[1471; 1473) \"::\"\n                 NAME_REF@[1473; 1480)\n                   IDENT@[1473; 1480) \"ssize_t\"\n-        SEMI@[1480; 1481) \";\"\n+        SEMICOLON@[1480; 1481) \";\"\n       WHITESPACE@[1481; 1486) \"\\n    \"\n       FN_DEF@[1486; 1595)\n         VISIBILITY@[1486; 1489)\n@@ -907,7 +907,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1506; 1513)\n               PATH@[1506; 1513)\n                 PATH_SEGMENT@[1506; 1513)\n-                  COLONCOLON@[1506; 1508) \"::\"\n+                  COLON2@[1506; 1508) \"::\"\n                   NAME_REF@[1508; 1513)\n                     IDENT@[1508; 1513) \"c_int\"\n           COMMA@[1513; 1514) \",\"\n@@ -925,7 +925,7 @@ SOURCE_FILE@[0; 1598)\n               PATH_TYPE@[1525; 1533)\n                 PATH@[1525; 1533)\n                   PATH_SEGMENT@[1525; 1533)\n-                    COLONCOLON@[1525; 1527) \"::\"\n+                    COLON2@[1525; 1527) \"::\"\n                     NAME_REF@[1527; 1533)\n                       IDENT@[1527; 1533) \"c_void\"\n           COMMA@[1533; 1534) \",\"\n@@ -939,7 +939,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1540; 1548)\n               PATH@[1540; 1548)\n                 PATH_SEGMENT@[1540; 1548)\n-                  COLONCOLON@[1540; 1542) \"::\"\n+                  COLON2@[1540; 1542) \"::\"\n                   NAME_REF@[1542; 1548)\n                     IDENT@[1542; 1548) \"size_t\"\n           COMMA@[1548; 1549) \",\"\n@@ -953,7 +953,7 @@ SOURCE_FILE@[0; 1598)\n             PATH_TYPE@[1573; 1580)\n               PATH@[1573; 1580)\n                 PATH_SEGMENT@[1573; 1580)\n-                  COLONCOLON@[1573; 1575) \"::\"\n+                  COLON2@[1573; 1575) \"::\"\n                   NAME_REF@[1575; 1580)\n                     IDENT@[1575; 1580) \"c_int\"\n           R_PAREN@[1580; 1581) \")\"\n@@ -964,10 +964,10 @@ SOURCE_FILE@[0; 1598)\n           PATH_TYPE@[1585; 1594)\n             PATH@[1585; 1594)\n               PATH_SEGMENT@[1585; 1594)\n-                COLONCOLON@[1585; 1587) \"::\"\n+                COLON2@[1585; 1587) \"::\"\n                 NAME_REF@[1587; 1594)\n                   IDENT@[1587; 1594) \"ssize_t\"\n-        SEMI@[1594; 1595) \";\"\n+        SEMICOLON@[1594; 1595) \";\"\n       WHITESPACE@[1595; 1596) \"\\n\"\n       R_CURLY@[1596; 1597) \"}\"\n   WHITESPACE@[1597; 1598) \"\\n\""}, {"sha": "f71cf5b6c36f7add638d4d7f7b27e40161c35ba4", "filename": "crates/ra_syntax/test_data/parser/ok/0032_where_for.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -74,11 +74,11 @@ SOURCE_FILE@[0; 116)\n                     PATH_SEGMENT@[96; 99)\n                       NAME_REF@[96; 99)\n                         IDENT@[96; 99) \"std\"\n-                  COLONCOLON@[99; 101) \"::\"\n+                  COLON2@[99; 101) \"::\"\n                   PATH_SEGMENT@[101; 104)\n                     NAME_REF@[101; 104)\n                       IDENT@[101; 104) \"fmt\"\n-                COLONCOLON@[104; 106) \"::\"\n+                COLON2@[104; 106) \"::\"\n                 PATH_SEGMENT@[106; 111)\n                   NAME_REF@[106; 111)\n                     IDENT@[106; 111) \"Debug\""}, {"sha": "8af41caa0f93ab53089ba2103cf91e6e1c50a439", "filename": "crates/ra_syntax/test_data/parser/ok/0033_label_break.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -43,7 +43,7 @@ SOURCE_FILE@[0; 506)\n                   ARG_LIST@[98; 100)\n                     L_PAREN@[98; 99) \"(\"\n                     R_PAREN@[99; 100) \")\"\n-                SEMI@[100; 101) \";\"\n+                SEMICOLON@[100; 101) \";\"\n               WHITESPACE@[101; 110) \"\\n        \"\n               EXPR_STMT@[110; 170)\n                 IF_EXPR@[110; 170)\n@@ -69,7 +69,7 @@ SOURCE_FILE@[0; 506)\n                           BREAK_KW@[147; 152) \"break\"\n                           WHITESPACE@[152; 153) \" \"\n                           LIFETIME@[153; 159) \"\\'block\"\n-                        SEMI@[159; 160) \";\"\n+                        SEMICOLON@[159; 160) \";\"\n                       WHITESPACE@[160; 169) \"\\n        \"\n                       R_CURLY@[169; 170) \"}\"\n               WHITESPACE@[170; 179) \"\\n        \"\n@@ -83,7 +83,7 @@ SOURCE_FILE@[0; 506)\n                   ARG_LIST@[192; 194)\n                     L_PAREN@[192; 193) \"(\"\n                     R_PAREN@[193; 194) \")\"\n-                SEMI@[194; 195) \";\"\n+                SEMICOLON@[194; 195) \";\"\n               WHITESPACE@[195; 204) \"\\n        \"\n               EXPR_STMT@[204; 264)\n                 IF_EXPR@[204; 264)\n@@ -109,7 +109,7 @@ SOURCE_FILE@[0; 506)\n                           BREAK_KW@[241; 246) \"break\"\n                           WHITESPACE@[246; 247) \" \"\n                           LIFETIME@[247; 253) \"\\'block\"\n-                        SEMI@[253; 254) \";\"\n+                        SEMICOLON@[253; 254) \";\"\n                       WHITESPACE@[254; 263) \"\\n        \"\n                       R_CURLY@[263; 264) \"}\"\n               WHITESPACE@[264; 273) \"\\n        \"\n@@ -123,7 +123,7 @@ SOURCE_FILE@[0; 506)\n                   ARG_LIST@[286; 288)\n                     L_PAREN@[286; 287) \"(\"\n                     R_PAREN@[287; 288) \")\"\n-                SEMI@[288; 289) \";\"\n+                SEMICOLON@[288; 289) \";\"\n               WHITESPACE@[289; 294) \"\\n    \"\n               R_CURLY@[294; 295) \"}\"\n         WHITESPACE@[295; 301) \"\\n\\n    \"\n@@ -173,7 +173,7 @@ SOURCE_FILE@[0; 506)\n                           WHITESPACE@[390; 391) \" \"\n                           LITERAL@[391; 392)\n                             INT_NUMBER@[391; 392) \"1\"\n-                        SEMI@[392; 393) \";\"\n+                        SEMICOLON@[392; 393) \";\"\n                       WHITESPACE@[393; 402) \"\\n        \"\n                       R_CURLY@[402; 403) \"}\"\n               WHITESPACE@[403; 412) \"\\n        \"\n@@ -206,15 +206,15 @@ SOURCE_FILE@[0; 506)\n                           WHITESPACE@[473; 474) \" \"\n                           LITERAL@[474; 475)\n                             INT_NUMBER@[474; 475) \"2\"\n-                        SEMI@[475; 476) \";\"\n+                        SEMICOLON@[475; 476) \";\"\n                       WHITESPACE@[476; 485) \"\\n        \"\n                       R_CURLY@[485; 486) \"}\"\n               WHITESPACE@[486; 495) \"\\n        \"\n               LITERAL@[495; 496)\n                 INT_NUMBER@[495; 496) \"3\"\n               WHITESPACE@[496; 501) \"\\n    \"\n               R_CURLY@[501; 502) \"}\"\n-          SEMI@[502; 503) \";\"\n+          SEMICOLON@[502; 503) \";\"\n         WHITESPACE@[503; 504) \"\\n\"\n         R_CURLY@[504; 505) \"}\"\n   WHITESPACE@[505; 506) \"\\n\""}, {"sha": "beaa96388366e5d91fda589666dba62cdcc80096", "filename": "crates/ra_syntax/test_data/parser/ok/0034_crate_path_in_call.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0034_crate_path_in_call.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,16 +27,16 @@ SOURCE_FILE@[0; 62)\n                     PATH@[27; 32)\n                       PATH_SEGMENT@[27; 32)\n                         CRATE_KW@[27; 32) \"crate\"\n-                    COLONCOLON@[32; 34) \"::\"\n+                    COLON2@[32; 34) \"::\"\n                     PATH_SEGMENT@[34; 44)\n                       NAME_REF@[34; 44)\n                         IDENT@[34; 44) \"module_map\"\n-                  COLONCOLON@[44; 46) \"::\"\n+                  COLON2@[44; 46) \"::\"\n                   PATH_SEGMENT@[46; 57)\n                     NAME_REF@[46; 57)\n                       IDENT@[46; 57) \"module_tree\"\n               R_PAREN@[57; 58) \")\"\n-          SEMI@[58; 59) \";\"\n+          SEMICOLON@[58; 59) \";\"\n         WHITESPACE@[59; 60) \"\\n\"\n         R_CURLY@[60; 61) \"}\"\n   WHITESPACE@[61; 62) \"\\n\""}, {"sha": "7143a31a5cced7e21803ba7db2812f815d8f2e47", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 216, "deletions": 216, "changes": 432, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -9,7 +9,7 @@ SOURCE_FILE@[0; 3813)\n   WHITESPACE@[269; 271) \"\\n\\n\"\n   ATTR@[271; 302)\n     POUND@[271; 272) \"#\"\n-    EXCL@[272; 273) \"!\"\n+    BANG@[272; 273) \"!\"\n     L_BRACK@[273; 274) \"[\"\n     PATH@[274; 279)\n       PATH_SEGMENT@[274; 279)\n@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 3813)\n   WHITESPACE@[302; 303) \"\\n\"\n   ATTR@[303; 323)\n     POUND@[303; 304) \"#\"\n-    EXCL@[304; 305) \"!\"\n+    BANG@[304; 305) \"!\"\n     L_BRACK@[305; 306) \"[\"\n     PATH@[306; 311)\n       PATH_SEGMENT@[306; 311)\n@@ -37,7 +37,7 @@ SOURCE_FILE@[0; 3813)\n   WHITESPACE@[323; 324) \"\\n\"\n   ATTR@[324; 351)\n     POUND@[324; 325) \"#\"\n-    EXCL@[325; 326) \"!\"\n+    BANG@[325; 326) \"!\"\n     L_BRACK@[326; 327) \"[\"\n     PATH@[327; 332)\n       PATH_SEGMENT@[327; 332)\n@@ -51,7 +51,7 @@ SOURCE_FILE@[0; 3813)\n   WHITESPACE@[351; 352) \"\\n\"\n   ATTR@[352; 376)\n     POUND@[352; 353) \"#\"\n-    EXCL@[353; 354) \"!\"\n+    BANG@[353; 354) \"!\"\n     L_BRACK@[354; 355) \"[\"\n     PATH@[355; 360)\n       PATH_SEGMENT@[355; 360)\n@@ -65,7 +65,7 @@ SOURCE_FILE@[0; 3813)\n   WHITESPACE@[376; 378) \"\\n\\n\"\n   ATTR@[378; 405)\n     POUND@[378; 379) \"#\"\n-    EXCL@[379; 380) \"!\"\n+    BANG@[379; 380) \"!\"\n     L_BRACK@[380; 381) \"[\"\n     PATH@[381; 396)\n       PATH_SEGMENT@[381; 396)\n@@ -88,15 +88,15 @@ SOURCE_FILE@[0; 3813)\n             PATH_SEGMENT@[411; 414)\n               NAME_REF@[411; 414)\n                 IDENT@[411; 414) \"std\"\n-          COLONCOLON@[414; 416) \"::\"\n+          COLON2@[414; 416) \"::\"\n           PATH_SEGMENT@[416; 420)\n             NAME_REF@[416; 420)\n               IDENT@[416; 420) \"cell\"\n-        COLONCOLON@[420; 422) \"::\"\n+        COLON2@[420; 422) \"::\"\n         PATH_SEGMENT@[422; 426)\n           NAME_REF@[422; 426)\n             IDENT@[422; 426) \"Cell\"\n-    SEMI@[426; 427) \";\"\n+    SEMICOLON@[426; 427) \";\"\n   WHITESPACE@[427; 428) \"\\n\"\n   USE_ITEM@[428; 447)\n     USE_KW@[428; 431) \"use\"\n@@ -108,15 +108,15 @@ SOURCE_FILE@[0; 3813)\n             PATH_SEGMENT@[432; 435)\n               NAME_REF@[432; 435)\n                 IDENT@[432; 435) \"std\"\n-          COLONCOLON@[435; 437) \"::\"\n+          COLON2@[435; 437) \"::\"\n           PATH_SEGMENT@[437; 440)\n             NAME_REF@[437; 440)\n               IDENT@[437; 440) \"mem\"\n-        COLONCOLON@[440; 442) \"::\"\n+        COLON2@[440; 442) \"::\"\n         PATH_SEGMENT@[442; 446)\n           NAME_REF@[442; 446)\n             IDENT@[442; 446) \"swap\"\n-    SEMI@[446; 447) \";\"\n+    SEMICOLON@[446; 447) \";\"\n   WHITESPACE@[447; 449) \"\\n\\n\"\n   COMMENT@[449; 518) \"// Just a grab bag of ...\"\n   WHITESPACE@[518; 520) \"\\n\\n\"\n@@ -163,7 +163,7 @@ SOURCE_FILE@[0; 3813)\n             WHITESPACE@[564; 565) \" \"\n             LITERAL@[565; 569)\n               TRUE_KW@[565; 569) \"true\"\n-          SEMI@[569; 570) \";\"\n+          SEMICOLON@[569; 570) \";\"\n         WHITESPACE@[570; 571) \" \"\n         R_CURLY@[571; 572) \"}\"\n   WHITESPACE@[572; 574) \"\\n\\n\"\n@@ -216,7 +216,7 @@ SOURCE_FILE@[0; 3813)\n               RETURN_EXPR@[614; 620)\n                 RETURN_KW@[614; 620) \"return\"\n               R_PAREN@[620; 621) \")\"\n-          SEMI@[621; 622) \";\"\n+          SEMICOLON@[621; 622) \";\"\n         WHITESPACE@[622; 623) \"\\n\"\n         R_CURLY@[623; 624) \"}\"\n   WHITESPACE@[624; 626) \"\\n\\n\"\n@@ -277,7 +277,7 @@ SOURCE_FILE@[0; 3813)\n                     WHITESPACE@[687; 688) \" \"\n                     CONDITION@[688; 696)\n                       PREFIX_EXPR@[688; 696)\n-                        EXCL@[688; 689) \"!\"\n+                        BANG@[688; 689) \"!\"\n                         METHOD_CALL_EXPR@[689; 696)\n                           PATH_EXPR@[689; 690)\n                             PATH@[689; 690)\n@@ -310,10 +310,10 @@ SOURCE_FILE@[0; 3813)\n                               LITERAL@[705; 709)\n                                 TRUE_KW@[705; 709) \"true\"\n                               R_PAREN@[709; 710) \")\"\n-                          SEMI@[710; 711) \";\"\n+                          SEMICOLON@[710; 711) \";\"\n                         WHITESPACE@[711; 712) \" \"\n                         R_CURLY@[712; 713) \"}\"\n-                SEMI@[713; 714) \";\"\n+                SEMICOLON@[713; 714) \";\"\n               WHITESPACE@[714; 719) \"\\n    \"\n               R_CURLY@[719; 720) \"}\"\n         WHITESPACE@[720; 725) \"\\n    \"\n@@ -335,7 +335,7 @@ SOURCE_FILE@[0; 3813)\n                     PATH_SEGMENT@[734; 738)\n                       NAME_REF@[734; 738)\n                         IDENT@[734; 738) \"Cell\"\n-                  COLONCOLON@[738; 740) \"::\"\n+                  COLON2@[738; 740) \"::\"\n                   PATH_SEGMENT@[740; 743)\n                     NAME_REF@[740; 743)\n                       IDENT@[740; 743) \"new\"\n@@ -344,7 +344,7 @@ SOURCE_FILE@[0; 3813)\n                 LITERAL@[744; 749)\n                   FALSE_KW@[744; 749) \"false\"\n                 R_PAREN@[749; 750) \")\"\n-          SEMI@[750; 751) \";\"\n+          SEMICOLON@[750; 751) \";\"\n         WHITESPACE@[751; 756) \"\\n    \"\n         LET_STMT@[756; 778)\n           LET_KW@[756; 759) \"let\"\n@@ -377,7 +377,7 @@ SOURCE_FILE@[0; 3813)\n                             IDENT@[774; 775) \"i\"\n                     R_PAREN@[775; 776) \")\"\n               R_CURLY@[776; 777) \"}\"\n-          SEMI@[777; 778) \";\"\n+          SEMICOLON@[777; 778) \";\"\n         WHITESPACE@[778; 783) \"\\n    \"\n         EXPR_STMT@[783; 790)\n           CALL_EXPR@[783; 789)\n@@ -389,15 +389,15 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[787; 789)\n               L_PAREN@[787; 788) \"(\"\n               R_PAREN@[788; 789) \")\"\n-          SEMI@[789; 790) \";\"\n+          SEMICOLON@[789; 790) \";\"\n         WHITESPACE@[790; 795) \"\\n    \"\n         EXPR_STMT@[795; 814)\n           MACRO_CALL@[795; 813)\n             PATH@[795; 801)\n               PATH_SEGMENT@[795; 801)\n                 NAME_REF@[795; 801)\n                   IDENT@[795; 801) \"assert\"\n-            EXCL@[801; 802) \"!\"\n+            BANG@[801; 802) \"!\"\n             TOKEN_TREE@[802; 813)\n               L_PAREN@[802; 803) \"(\"\n               TOKEN_TREE@[803; 812)\n@@ -410,7 +410,7 @@ SOURCE_FILE@[0; 3813)\n                   R_PAREN@[810; 811) \")\"\n                 R_PAREN@[811; 812) \")\"\n               R_PAREN@[812; 813) \")\"\n-          SEMI@[813; 814) \";\"\n+          SEMICOLON@[813; 814) \";\"\n         WHITESPACE@[814; 815) \"\\n\"\n         R_CURLY@[815; 816) \"}\"\n   WHITESPACE@[816; 818) \"\\n\\n\"\n@@ -535,7 +535,7 @@ SOURCE_FILE@[0; 3813)\n                                         R_CURLY@[1182; 1183) \"}\"\n                                   WHITESPACE@[1183; 1200) \"\\n                \"\n                                   R_CURLY@[1200; 1201) \"}\"\n-                              SEMI@[1201; 1202) \";\"\n+                              SEMICOLON@[1201; 1202) \";\"\n                             WHITESPACE@[1202; 1215) \"\\n            \"\n                             R_CURLY@[1215; 1216) \"}\"\n                         WHITESPACE@[1216; 1217) \" \"\n@@ -558,7 +558,7 @@ SOURCE_FILE@[0; 3813)\n                               EXPR_STMT@[1252; 1259)\n                                 RETURN_EXPR@[1252; 1258)\n                                   RETURN_KW@[1252; 1258) \"return\"\n-                                SEMI@[1258; 1259) \";\"\n+                                SEMICOLON@[1258; 1259) \";\"\n                               WHITESPACE@[1259; 1272) \"\\n            \"\n                               R_CURLY@[1272; 1273) \"}\"\n                       WHITESPACE@[1273; 1282) \"\\n        \"\n@@ -581,7 +581,7 @@ SOURCE_FILE@[0; 3813)\n                     EXPR_STMT@[1306; 1312)\n                       BREAK_EXPR@[1306; 1311)\n                         BREAK_KW@[1306; 1311) \"break\"\n-                      SEMI@[1311; 1312) \";\"\n+                      SEMICOLON@[1311; 1312) \";\"\n                     WHITESPACE@[1312; 1313) \" \"\n                     R_CURLY@[1313; 1314) \"}\"\n               WHITESPACE@[1314; 1319) \"\\n    \"\n@@ -617,7 +617,7 @@ SOURCE_FILE@[0; 3813)\n               PATH_SEGMENT@[1355; 1360)\n                 NAME_REF@[1355; 1360)\n                   IDENT@[1355; 1360) \"isize\"\n-          SEMI@[1360; 1361) \";\"\n+          SEMICOLON@[1360; 1361) \";\"\n         WHITESPACE@[1361; 1366) \"\\n    \"\n         LET_STMT@[1366; 1400)\n           LET_KW@[1366; 1369) \"let\"\n@@ -646,7 +646,7 @@ SOURCE_FILE@[0; 3813)\n                   INT_NUMBER@[1385; 1386) \"0\"\n               R_PAREN@[1386; 1387) \")\"\n             WHITESPACE@[1387; 1388) \" \"\n-            EQEQ@[1388; 1390) \"==\"\n+            EQ2@[1388; 1390) \"==\"\n             WHITESPACE@[1390; 1391) \" \"\n             PAREN_EXPR@[1391; 1399)\n               L_PAREN@[1391; 1392) \"(\"\n@@ -662,7 +662,7 @@ SOURCE_FILE@[0; 3813)\n                 LITERAL@[1397; 1398)\n                   INT_NUMBER@[1397; 1398) \"0\"\n               R_PAREN@[1398; 1399) \")\"\n-          SEMI@[1399; 1400) \";\"\n+          SEMICOLON@[1399; 1400) \";\"\n         WHITESPACE@[1400; 1405) \"\\n    \"\n         LET_STMT@[1405; 1438)\n           LET_KW@[1405; 1408) \"let\"\n@@ -707,7 +707,7 @@ SOURCE_FILE@[0; 3813)\n                 LITERAL@[1435; 1436)\n                   INT_NUMBER@[1435; 1436) \"0\"\n               R_PAREN@[1436; 1437) \")\"\n-          SEMI@[1437; 1438) \";\"\n+          SEMICOLON@[1437; 1438) \";\"\n         WHITESPACE@[1438; 1443) \"\\n    \"\n         LET_STMT@[1443; 1474)\n           LET_KW@[1443; 1446) \"let\"\n@@ -734,7 +734,7 @@ SOURCE_FILE@[0; 3813)\n                   INT_NUMBER@[1459; 1460) \"0\"\n               R_PAREN@[1460; 1461) \")\"\n             WHITESPACE@[1461; 1462) \" \"\n-            EQEQ@[1462; 1464) \"==\"\n+            EQ2@[1462; 1464) \"==\"\n             WHITESPACE@[1464; 1465) \" \"\n             PAREN_EXPR@[1465; 1473)\n               L_PAREN@[1465; 1466) \"(\"\n@@ -750,7 +750,7 @@ SOURCE_FILE@[0; 3813)\n                 LITERAL@[1471; 1472)\n                   INT_NUMBER@[1471; 1472) \"0\"\n               R_PAREN@[1472; 1473) \")\"\n-          SEMI@[1473; 1474) \";\"\n+          SEMICOLON@[1473; 1474) \";\"\n         WHITESPACE@[1474; 1479) \"\\n    \"\n         LET_STMT@[1479; 1537)\n           LET_KW@[1479; 1482) \"let\"\n@@ -792,7 +792,7 @@ SOURCE_FILE@[0; 3813)\n                           IDENT@[1507; 1509) \"_z\"\n                 R_PAREN@[1509; 1510) \")\"\n             WHITESPACE@[1510; 1511) \" \"\n-            EQEQ@[1511; 1513) \"==\"\n+            EQ2@[1511; 1513) \"==\"\n             WHITESPACE@[1513; 1514) \" \"\n             CALL_EXPR@[1514; 1536)\n               PATH_EXPR@[1514; 1518)\n@@ -823,7 +823,7 @@ SOURCE_FILE@[0; 3813)\n                         NAME_REF@[1533; 1535)\n                           IDENT@[1533; 1535) \"_z\"\n                 R_PAREN@[1535; 1536) \")\"\n-          SEMI@[1536; 1537) \";\"\n+          SEMICOLON@[1536; 1537) \";\"\n         WHITESPACE@[1537; 1538) \"\\n\"\n         R_CURLY@[1538; 1539) \"}\"\n   WHITESPACE@[1539; 1541) \"\\n\\n\"\n@@ -893,7 +893,7 @@ SOURCE_FILE@[0; 3813)\n                   PATH_SEGMENT@[1613; 1619)\n                     NAME_REF@[1613; 1619)\n                       IDENT@[1613; 1619) \"assert\"\n-                EXCL@[1619; 1620) \"!\"\n+                BANG@[1619; 1620) \"!\"\n                 TOKEN_TREE@[1620; 1628)\n                   L_PAREN@[1620; 1621) \"(\"\n                   TOKEN_TREE@[1621; 1627)\n@@ -902,7 +902,7 @@ SOURCE_FILE@[0; 3813)\n                     R_PAREN@[1626; 1627) \")\"\n                   R_PAREN@[1627; 1628) \")\"\n               WHITESPACE@[1628; 1629) \" \"\n-              EQEQ@[1629; 1631) \"==\"\n+              EQ2@[1629; 1631) \"==\"\n               WHITESPACE@[1631; 1632) \" \"\n               PAREN_EXPR@[1632; 1646)\n                 L_PAREN@[1632; 1633) \"(\"\n@@ -911,7 +911,7 @@ SOURCE_FILE@[0; 3813)\n                     PATH_SEGMENT@[1633; 1639)\n                       NAME_REF@[1633; 1639)\n                         IDENT@[1633; 1639) \"assert\"\n-                  EXCL@[1639; 1640) \"!\"\n+                  BANG@[1639; 1640) \"!\"\n                   TOKEN_TREE@[1640; 1645)\n                     L_PAREN@[1640; 1641) \"(\"\n                     IDENT@[1641; 1642) \"p\"\n@@ -921,7 +921,7 @@ SOURCE_FILE@[0; 3813)\n                     R_PAREN@[1644; 1645) \")\"\n                 R_PAREN@[1645; 1646) \")\"\n             R_PAREN@[1646; 1647) \")\"\n-          SEMI@[1647; 1648) \";\"\n+          SEMICOLON@[1647; 1648) \";\"\n         WHITESPACE@[1648; 1653) \"\\n    \"\n         LET_STMT@[1653; 1685)\n           LET_KW@[1653; 1656) \"let\"\n@@ -940,7 +940,7 @@ SOURCE_FILE@[0; 3813)\n                   PATH_SEGMENT@[1663; 1669)\n                     NAME_REF@[1663; 1669)\n                       IDENT@[1663; 1669) \"assert\"\n-                EXCL@[1669; 1670) \"!\"\n+                BANG@[1669; 1670) \"!\"\n                 TOKEN_TREE@[1670; 1677)\n                   L_PAREN@[1670; 1671) \"(\"\n                   TOKEN_TREE@[1671; 1676)\n@@ -952,13 +952,13 @@ SOURCE_FILE@[0; 3813)\n                     R_PAREN@[1675; 1676) \")\"\n                   R_PAREN@[1676; 1677) \")\"\n               WHITESPACE@[1677; 1678) \" \"\n-              EQEQ@[1678; 1680) \"==\"\n+              EQ2@[1678; 1680) \"==\"\n               WHITESPACE@[1680; 1681) \" \"\n               TUPLE_EXPR@[1681; 1683)\n                 L_PAREN@[1681; 1682) \"(\"\n                 R_PAREN@[1682; 1683) \")\"\n             R_PAREN@[1683; 1684) \")\"\n-          SEMI@[1684; 1685) \";\"\n+          SEMICOLON@[1684; 1685) \";\"\n         WHITESPACE@[1685; 1690) \"\\n    \"\n         LET_STMT@[1690; 1739)\n           LET_KW@[1690; 1693) \"let\"\n@@ -984,7 +984,7 @@ SOURCE_FILE@[0; 3813)\n                   PATH_SEGMENT@[1706; 1713)\n                     NAME_REF@[1706; 1713)\n                       IDENT@[1706; 1713) \"println\"\n-                EXCL@[1713; 1714) \"!\"\n+                BANG@[1713; 1714) \"!\"\n                 TOKEN_TREE@[1714; 1723)\n                   L_PAREN@[1714; 1715) \"(\"\n                   STRING@[1715; 1719) \"\\\"{}\\\"\"\n@@ -993,7 +993,7 @@ SOURCE_FILE@[0; 3813)\n                   INT_NUMBER@[1721; 1722) \"0\"\n                   R_PAREN@[1722; 1723) \")\"\n               WHITESPACE@[1723; 1724) \" \"\n-              EQEQ@[1724; 1726) \"==\"\n+              EQ2@[1724; 1726) \"==\"\n               WHITESPACE@[1726; 1727) \" \"\n               PAREN_EXPR@[1727; 1737)\n                 L_PAREN@[1727; 1728) \"(\"\n@@ -1004,7 +1004,7 @@ SOURCE_FILE@[0; 3813)\n                     INT_NUMBER@[1735; 1736) \"0\"\n                 R_PAREN@[1736; 1737) \")\"\n             R_PAREN@[1737; 1738) \")\"\n-          SEMI@[1738; 1739) \";\"\n+          SEMICOLON@[1738; 1739) \";\"\n         WHITESPACE@[1739; 1740) \"\\n\"\n         R_CURLY@[1740; 1741) \"}\"\n   WHITESPACE@[1741; 1743) \"\\n\\n\"\n@@ -1057,7 +1057,7 @@ SOURCE_FILE@[0; 3813)\n           WHITESPACE@[1801; 1802) \" \"\n           LITERAL@[1802; 1803)\n             INT_NUMBER@[1802; 1803) \"0\"\n-          SEMI@[1803; 1804) \";\"\n+          SEMICOLON@[1803; 1804) \";\"\n         WHITESPACE@[1804; 1809) \"\\n    \"\n         LOOP_EXPR@[1809; 1902)\n           LOOP_KW@[1809; 1813) \"loop\"\n@@ -1078,7 +1078,7 @@ SOURCE_FILE@[0; 3813)\n                   WHITESPACE@[1820; 1821) \" \"\n                   LITERAL@[1821; 1822)\n                     INT_NUMBER@[1821; 1822) \"1\"\n-                SEMI@[1822; 1823) \";\"\n+                SEMICOLON@[1822; 1823) \";\"\n               WHITESPACE@[1823; 1824) \" \"\n               EXPR_STMT@[1824; 1887)\n                 IF_EXPR@[1824; 1887)\n@@ -1092,7 +1092,7 @@ SOURCE_FILE@[0; 3813)\n                             NAME_REF@[1827; 1828)\n                               IDENT@[1827; 1828) \"i\"\n                       WHITESPACE@[1828; 1829) \" \"\n-                      EQEQ@[1829; 1831) \"==\"\n+                      EQ2@[1829; 1831) \"==\"\n                       WHITESPACE@[1831; 1832) \" \"\n                       LITERAL@[1832; 1833)\n                         INT_NUMBER@[1832; 1833) \"1\"\n@@ -1138,7 +1138,7 @@ SOURCE_FILE@[0; 3813)\n                                 PATH_SEGMENT@[1870; 1875)\n                                   NAME_REF@[1870; 1875)\n                                     IDENT@[1870; 1875) \"panic\"\n-                              EXCL@[1875; 1876) \"!\"\n+                              BANG@[1875; 1876) \"!\"\n                               TOKEN_TREE@[1876; 1883)\n                                 L_PAREN@[1876; 1877) \"(\"\n                                 STRING@[1877; 1882) \"\\\"wat\\\"\"\n@@ -1151,7 +1151,7 @@ SOURCE_FILE@[0; 3813)\n               EXPR_STMT@[1894; 1900)\n                 BREAK_EXPR@[1894; 1899)\n                   BREAK_KW@[1894; 1899) \"break\"\n-                SEMI@[1899; 1900) \";\"\n+                SEMICOLON@[1899; 1900) \";\"\n               WHITESPACE@[1900; 1901) \" \"\n               R_CURLY@[1901; 1902) \"}\"\n         WHITESPACE@[1902; 1903) \"\\n\"\n@@ -1184,12 +1184,12 @@ SOURCE_FILE@[0; 3813)\n               PATH_SEGMENT@[1938; 1945)\n                 NAME_REF@[1938; 1945)\n                   IDENT@[1938; 1945) \"println\"\n-            EXCL@[1945; 1946) \"!\"\n+            BANG@[1945; 1946) \"!\"\n             TOKEN_TREE@[1946; 1957)\n               L_PAREN@[1946; 1947) \"(\"\n               STRING@[1947; 1956) \"\\\"lincoln\\\"\"\n               R_PAREN@[1956; 1957) \")\"\n-          SEMI@[1957; 1958) \";\"\n+          SEMICOLON@[1957; 1958) \";\"\n         WHITESPACE@[1958; 1959) \" \"\n         R_CURLY@[1959; 1960) \"}\"\n   WHITESPACE@[1960; 1962) \"\\n\\n\"\n@@ -1212,7 +1212,7 @@ SOURCE_FILE@[0; 3813)\n               PATH_SEGMENT@[1978; 1987)\n                 NAME_REF@[1978; 1987)\n                   IDENT@[1978; 1987) \"assert_eq\"\n-            EXCL@[1987; 1988) \"!\"\n+            BANG@[1987; 1988) \"!\"\n             TOKEN_TREE@[1988; 2195)\n               L_PAREN@[1988; 1989) \"(\"\n               IDENT@[1989; 1995) \"String\"\n@@ -1226,7 +1226,7 @@ SOURCE_FILE@[0; 3813)\n               COMMA@[2055; 2056) \",\"\n               WHITESPACE@[2056; 2072) \"\\n               \"\n               IDENT@[2072; 2078) \"format\"\n-              EXCL@[2078; 2079) \"!\"\n+              BANG@[2078; 2079) \"!\"\n               TOKEN_TREE@[2079; 2194)\n                 L_PAREN@[2079; 2080) \"(\"\n                 STRING@[2080; 2086) \"\\\"{:?}\\\"\"\n@@ -1308,7 +1308,7 @@ SOURCE_FILE@[0; 3813)\n                 DOT@[2192; 2193) \".\"\n                 R_PAREN@[2193; 2194) \")\"\n               R_PAREN@[2194; 2195) \")\"\n-          SEMI@[2195; 2196) \";\"\n+          SEMICOLON@[2195; 2196) \";\"\n         WHITESPACE@[2196; 2197) \"\\n\"\n         R_CURLY@[2197; 2198) \"}\"\n   WHITESPACE@[2198; 2200) \"\\n\\n\"\n@@ -1362,7 +1362,7 @@ SOURCE_FILE@[0; 3813)\n                     PATH_SEGMENT@[2243; 2252)\n                       NAME_REF@[2243; 2252)\n                         IDENT@[2243; 2252) \"assert_eq\"\n-                  EXCL@[2252; 2253) \"!\"\n+                  BANG@[2252; 2253) \"!\"\n                   TOKEN_TREE@[2253; 2684)\n                     L_PAREN@[2253; 2254) \"(\"\n                     INT_NUMBER@[2254; 2257) \"8u8\"\n@@ -1372,7 +1372,7 @@ SOURCE_FILE@[0; 3813)\n                       L_CURLY@[2259; 2260) \"{\"\n                       WHITESPACE@[2260; 2273) \"\\n            \"\n                       IDENT@[2273; 2284) \"macro_rules\"\n-                      EXCL@[2284; 2285) \"!\"\n+                      BANG@[2284; 2285) \"!\"\n                       WHITESPACE@[2285; 2286) \" \"\n                       IDENT@[2286; 2288) \"u8\"\n                       WHITESPACE@[2288; 2289) \" \"\n@@ -1435,7 +1435,7 @@ SOURCE_FILE@[0; 3813)\n                               L_CURLY@[2420; 2421) \"{\"\n                               WHITESPACE@[2421; 2450) \"\\n                     ...\"\n                               STRING@[2450; 2454) \"\\\"u8\\\"\"\n-                              SEMI@[2454; 2455) \";\"\n+                              SEMICOLON@[2454; 2455) \";\"\n                               WHITESPACE@[2455; 2484) \"\\n                     ...\"\n                               IDENT@[2484; 2486) \"u8\"\n                               WHITESPACE@[2486; 2511) \"\\n                     ...\"\n@@ -1444,17 +1444,17 @@ SOURCE_FILE@[0; 3813)\n                             R_CURLY@[2533; 2534) \"}\"\n                           WHITESPACE@[2534; 2551) \"\\n                \"\n                           R_CURLY@[2551; 2552) \"}\"\n-                        SEMI@[2552; 2553) \";\"\n+                        SEMICOLON@[2552; 2553) \";\"\n                         WHITESPACE@[2553; 2566) \"\\n            \"\n                         R_CURLY@[2566; 2567) \"}\"\n                       WHITESPACE@[2567; 2581) \"\\n\\n            \"\n                       IDENT@[2581; 2583) \"u8\"\n-                      EXCL@[2583; 2584) \"!\"\n+                      BANG@[2583; 2584) \"!\"\n                       TOKEN_TREE@[2584; 2588)\n                         L_PAREN@[2584; 2585) \"(\"\n                         IDENT@[2585; 2587) \"u8\"\n                         R_PAREN@[2587; 2588) \")\"\n-                      SEMI@[2588; 2589) \";\"\n+                      SEMICOLON@[2588; 2589) \";\"\n                       WHITESPACE@[2589; 2602) \"\\n            \"\n                       LET_KW@[2602; 2605) \"let\"\n                       WHITESPACE@[2605; 2606) \" \"\n@@ -1476,7 +1476,7 @@ SOURCE_FILE@[0; 3813)\n                         AMP@[2624; 2625) \"&\"\n                         INT_NUMBER@[2625; 2628) \"8u8\"\n                         R_PAREN@[2628; 2629) \")\"\n-                      SEMI@[2629; 2630) \";\"\n+                      SEMICOLON@[2629; 2630) \";\"\n                       WHITESPACE@[2630; 2643) \"\\n            \"\n                       CRATE_KW@[2643; 2648) \"crate\"\n                       COLON@[2648; 2649) \":\"\n@@ -1486,13 +1486,13 @@ SOURCE_FILE@[0; 3813)\n                         L_PAREN@[2652; 2653) \"(\"\n                         INT_NUMBER@[2653; 2656) \"0u8\"\n                         R_PAREN@[2656; 2657) \")\"\n-                      SEMI@[2657; 2658) \";\"\n+                      SEMICOLON@[2657; 2658) \";\"\n                       WHITESPACE@[2658; 2671) \"\\n            \"\n                       IDENT@[2671; 2673) \"u8\"\n                       WHITESPACE@[2673; 2682) \"\\n        \"\n                       R_CURLY@[2682; 2683) \"}\"\n                     R_PAREN@[2683; 2684) \")\"\n-                SEMI@[2684; 2685) \";\"\n+                SEMICOLON@[2684; 2685) \";\"\n               WHITESPACE@[2685; 2690) \"\\n    \"\n               R_CURLY@[2690; 2691) \"}\"\n         WHITESPACE@[2691; 2692) \"\\n\"\n@@ -1517,7 +1517,7 @@ SOURCE_FILE@[0; 3813)\n               PATH_SEGMENT@[2712; 2721)\n                 NAME_REF@[2712; 2721)\n                   IDENT@[2712; 2721) \"assert_eq\"\n-            EXCL@[2721; 2722) \"!\"\n+            BANG@[2721; 2722) \"!\"\n             TOKEN_TREE@[2722; 2829)\n               L_PAREN@[2722; 2723) \"(\"\n               IDENT@[2723; 2729) \"String\"\n@@ -1575,7 +1575,7 @@ SOURCE_FILE@[0; 3813)\n                 L_PAREN@[2826; 2827) \"(\"\n                 R_PAREN@[2827; 2828) \")\"\n               R_PAREN@[2828; 2829) \")\"\n-          SEMI@[2829; 2830) \";\"\n+          SEMICOLON@[2829; 2830) \";\"\n         WHITESPACE@[2830; 2831) \"\\n\"\n         R_CURLY@[2831; 2832) \"}\"\n   WHITESPACE@[2832; 2834) \"\\n\\n\"\n@@ -1654,7 +1654,7 @@ SOURCE_FILE@[0; 3813)\n           EQ@[2946; 2947) \"=\"\n           WHITESPACE@[2947; 2948) \" \"\n           PREFIX_EXPR@[2948; 3013)\n-            EXCL@[2948; 2949) \"!\"\n+            BANG@[2948; 2949) \"!\"\n             PAREN_EXPR@[2949; 3013)\n               L_PAREN@[2949; 2950) \"(\"\n               BIN_EXPR@[2950; 3012)\n@@ -1668,7 +1668,7 @@ SOURCE_FILE@[0; 3813)\n                           TUPLE_PAT@[2952; 2956)\n                             L_PAREN@[2952; 2953) \"(\"\n                             DOT_DOT_PAT@[2953; 2955)\n-                              DOTDOT@[2953; 2955) \"..\"\n+                              DOT2@[2953; 2955) \"..\"\n                             R_PAREN@[2955; 2956) \")\"\n                           COLON@[2956; 2957) \":\"\n                           TUPLE_TYPE@[2957; 2962)\n@@ -1715,7 +1715,7 @@ SOURCE_FILE@[0; 3813)\n                         L_CURLY@[2992; 2993) \"{\"\n                         R_CURLY@[2993; 2994) \"}\"\n                     R_PAREN@[2994; 2995) \")\"\n-                EQEQ@[2995; 2997) \"==\"\n+                EQ2@[2995; 2997) \"==\"\n                 BLOCK_EXPR@[2997; 3012)\n                   BLOCK@[2997; 3012)\n                     L_CURLY@[2997; 2998) \"{\"\n@@ -1726,34 +1726,34 @@ SOURCE_FILE@[0; 3813)\n                           ARRAY_EXPR@[2999; 3006)\n                             L_BRACK@[2999; 3000) \"[\"\n                             RANGE_EXPR@[3000; 3005)\n-                              DOTDOTEQ@[3000; 3003) \"..=\"\n+                              DOT2EQ@[3000; 3003) \"..=\"\n                               RANGE_EXPR@[3003; 3005)\n-                                DOTDOT@[3003; 3005) \"..\"\n+                                DOT2@[3003; 3005) \"..\"\n                             R_BRACK@[3005; 3006) \"]\"\n                           L_BRACK@[3006; 3007) \"[\"\n                           RANGE_EXPR@[3007; 3009)\n-                            DOTDOT@[3007; 3009) \"..\"\n+                            DOT2@[3007; 3009) \"..\"\n                           R_BRACK@[3009; 3010) \"]\"\n-                      SEMI@[3010; 3011) \";\"\n+                      SEMICOLON@[3010; 3011) \";\"\n                     R_CURLY@[3011; 3012) \"}\"\n               R_PAREN@[3012; 3013) \")\"\n           COMMENT@[3013; 3015) \"//\"\n           WHITESPACE@[3015; 3020) \"\\n    \"\n-          SEMI@[3020; 3021) \";\"\n+          SEMICOLON@[3020; 3021) \";\"\n         WHITESPACE@[3021; 3026) \"\\n    \"\n         EXPR_STMT@[3026; 3040)\n           MACRO_CALL@[3026; 3039)\n             PATH@[3026; 3032)\n               PATH_SEGMENT@[3026; 3032)\n                 NAME_REF@[3026; 3032)\n                   IDENT@[3026; 3032) \"assert\"\n-            EXCL@[3032; 3033) \"!\"\n+            BANG@[3032; 3033) \"!\"\n             TOKEN_TREE@[3033; 3039)\n               L_PAREN@[3033; 3034) \"(\"\n-              EXCL@[3034; 3035) \"!\"\n+              BANG@[3034; 3035) \"!\"\n               IDENT@[3035; 3038) \"val\"\n               R_PAREN@[3038; 3039) \")\"\n-          SEMI@[3039; 3040) \";\"\n+          SEMICOLON@[3039; 3040) \";\"\n         WHITESPACE@[3040; 3041) \"\\n\"\n         R_CURLY@[3041; 3042) \"}\"\n   WHITESPACE@[3042; 3044) \"\\n\\n\"\n@@ -1781,11 +1781,11 @@ SOURCE_FILE@[0; 3813)\n                     PATH_SEGMENT@[3068; 3071)\n                       NAME_REF@[3068; 3071)\n                         IDENT@[3068; 3071) \"std\"\n-                  COLONCOLON@[3071; 3073) \"::\"\n+                  COLON2@[3071; 3073) \"::\"\n                   PATH_SEGMENT@[3073; 3076)\n                     NAME_REF@[3073; 3076)\n                       IDENT@[3073; 3076) \"fmt\"\n-                COLONCOLON@[3076; 3078) \"::\"\n+                COLON2@[3076; 3078) \"::\"\n                 PATH_SEGMENT@[3078; 3083)\n                   NAME_REF@[3078; 3083)\n                     IDENT@[3078; 3083) \"Debug\"\n@@ -1795,300 +1795,300 @@ SOURCE_FILE@[0; 3813)\n         L_CURLY@[3084; 3085) \"{\"\n         WHITESPACE@[3085; 3090) \"\\n    \"\n         RANGE_EXPR@[3090; 3512)\n-          DOTDOTEQ@[3090; 3093) \"..=\"\n+          DOT2EQ@[3090; 3093) \"..=\"\n           RANGE_EXPR@[3093; 3512)\n-            DOTDOTEQ@[3093; 3096) \"..=\"\n+            DOT2EQ@[3093; 3096) \"..=\"\n             RANGE_EXPR@[3096; 3512)\n-              DOTDOT@[3096; 3098) \"..\"\n+              DOT2@[3096; 3098) \"..\"\n               WHITESPACE@[3098; 3099) \" \"\n               RANGE_EXPR@[3099; 3512)\n-                DOTDOT@[3099; 3101) \"..\"\n+                DOT2@[3099; 3101) \"..\"\n                 WHITESPACE@[3101; 3105) \"    \"\n                 RANGE_EXPR@[3105; 3512)\n-                  DOTDOT@[3105; 3107) \"..\"\n+                  DOT2@[3105; 3107) \"..\"\n                   WHITESPACE@[3107; 3108) \" \"\n                   RANGE_EXPR@[3108; 3512)\n-                    DOTDOT@[3108; 3110) \"..\"\n+                    DOT2@[3108; 3110) \"..\"\n                     WHITESPACE@[3110; 3111) \" \"\n                     RANGE_EXPR@[3111; 3512)\n-                      DOTDOT@[3111; 3113) \"..\"\n+                      DOT2@[3111; 3113) \"..\"\n                       WHITESPACE@[3113; 3114) \" \"\n                       RANGE_EXPR@[3114; 3512)\n-                        DOTDOT@[3114; 3116) \"..\"\n+                        DOT2@[3114; 3116) \"..\"\n                         WHITESPACE@[3116; 3120) \"    \"\n                         RANGE_EXPR@[3120; 3512)\n-                          DOTDOT@[3120; 3122) \"..\"\n+                          DOT2@[3120; 3122) \"..\"\n                           WHITESPACE@[3122; 3123) \" \"\n                           RANGE_EXPR@[3123; 3512)\n-                            DOTDOT@[3123; 3125) \"..\"\n+                            DOT2@[3123; 3125) \"..\"\n                             WHITESPACE@[3125; 3126) \" \"\n                             RANGE_EXPR@[3126; 3512)\n-                              DOTDOT@[3126; 3128) \"..\"\n+                              DOT2@[3126; 3128) \"..\"\n                               WHITESPACE@[3128; 3129) \" \"\n                               RANGE_EXPR@[3129; 3512)\n-                                DOTDOT@[3129; 3131) \"..\"\n+                                DOT2@[3129; 3131) \"..\"\n                                 WHITESPACE@[3131; 3135) \"    \"\n                                 RANGE_EXPR@[3135; 3512)\n-                                  DOTDOT@[3135; 3137) \"..\"\n+                                  DOT2@[3135; 3137) \"..\"\n                                   WHITESPACE@[3137; 3138) \" \"\n                                   RANGE_EXPR@[3138; 3512)\n-                                    DOTDOTEQ@[3138; 3141) \"..=\"\n+                                    DOT2EQ@[3138; 3141) \"..=\"\n                                     RANGE_EXPR@[3141; 3512)\n-                                      DOTDOT@[3141; 3143) \"..\"\n+                                      DOT2@[3141; 3143) \"..\"\n                                       WHITESPACE@[3143; 3144) \" \"\n                                       RANGE_EXPR@[3144; 3512)\n-                                        DOTDOT@[3144; 3146) \"..\"\n+                                        DOT2@[3144; 3146) \"..\"\n                                         WHITESPACE@[3146; 3151) \"\\n    \"\n                                         RANGE_EXPR@[3151; 3512)\n-                                          DOTDOTEQ@[3151; 3154) \"..=\"\n+                                          DOT2EQ@[3151; 3154) \"..=\"\n                                           RANGE_EXPR@[3154; 3512)\n-                                            DOTDOT@[3154; 3156) \"..\"\n+                                            DOT2@[3154; 3156) \"..\"\n                                             WHITESPACE@[3156; 3157) \" \"\n                                             RANGE_EXPR@[3157; 3512)\n-                                              DOTDOTEQ@[3157; 3160) \"..=\"\n+                                              DOT2EQ@[3157; 3160) \"..=\"\n                                               RANGE_EXPR@[3160; 3512)\n-                                                DOTDOT@[3160; 3162) \"..\"\n+                                                DOT2@[3160; 3162) \"..\"\n                                                 WHITESPACE@[3162; 3166) \"    \"\n                                                 RANGE_EXPR@[3166; 3512)\n-                                                  DOTDOT@[3166; 3168) \"..\"\n+                                                  DOT2@[3166; 3168) \"..\"\n                                                   WHITESPACE@[3168; 3169) \" \"\n                                                   RANGE_EXPR@[3169; 3512)\n-                                                    DOTDOT@[3169; 3171) \"..\"\n+                                                    DOT2@[3169; 3171) \"..\"\n                                                     WHITESPACE@[3171; 3172) \" \"\n                                                     RANGE_EXPR@[3172; 3512)\n-                                                      DOTDOT@[3172; 3174) \"..\"\n+                                                      DOT2@[3172; 3174) \"..\"\n                                                       WHITESPACE@[3174; 3175) \" \"\n                                                       RANGE_EXPR@[3175; 3512)\n-                                                        DOTDOT@[3175; 3177) \"..\"\n+                                                        DOT2@[3175; 3177) \"..\"\n                                                         WHITESPACE@[3177; 3181) \"    \"\n                                                         RANGE_EXPR@[3181; 3512)\n-                                                          DOTDOT@[3181; 3183) \"..\"\n+                                                          DOT2@[3181; 3183) \"..\"\n                                                           WHITESPACE@[3183; 3184) \" \"\n                                                           RANGE_EXPR@[3184; 3512)\n-                                                            DOTDOT@[3184; 3186) \"..\"\n+                                                            DOT2@[3184; 3186) \"..\"\n                                                             WHITESPACE@[3186; 3187) \" \"\n                                                             RANGE_EXPR@[3187; 3512)\n-                                                              DOTDOT@[3187; 3189) \"..\"\n+                                                              DOT2@[3187; 3189) \"..\"\n                                                               WHITESPACE@[3189; 3190) \" \"\n                                                               RANGE_EXPR@[3190; 3512)\n-                                                                DOTDOT@[3190; 3192) \"..\"\n+                                                                DOT2@[3190; 3192) \"..\"\n                                                                 WHITESPACE@[3192; 3196) \"    \"\n                                                                 RANGE_EXPR@[3196; 3512)\n-                                                                  DOTDOTEQ@[3196; 3199) \"..=\"\n+                                                                  DOT2EQ@[3196; 3199) \"..=\"\n                                                                   RANGE_EXPR@[3199; 3512)\n-                                                                    DOTDOTEQ@[3199; 3202) \"..=\"\n+                                                                    DOT2EQ@[3199; 3202) \"..=\"\n                                                                     RANGE_EXPR@[3202; 3512)\n-                                                                      DOTDOTEQ@[3202; 3205) \"..=\"\n+                                                                      DOT2EQ@[3202; 3205) \"..=\"\n                                                                       RANGE_EXPR@[3205; 3512)\n-                                                                        DOTDOT@[3205; 3207) \"..\"\n+                                                                        DOT2@[3205; 3207) \"..\"\n                                                                         WHITESPACE@[3207; 3212) \"\\n    \"\n                                                                         RANGE_EXPR@[3212; 3512)\n-                                                                          DOTDOTEQ@[3212; 3215) \"..=\"\n+                                                                          DOT2EQ@[3212; 3215) \"..=\"\n                                                                           RANGE_EXPR@[3215; 3512)\n-                                                                            DOTDOT@[3215; 3217) \"..\"\n+                                                                            DOT2@[3215; 3217) \"..\"\n                                                                             WHITESPACE@[3217; 3218) \" \"\n                                                                             RANGE_EXPR@[3218; 3512)\n-                                                                              DOTDOTEQ@[3218; 3221) \"..=\"\n+                                                                              DOT2EQ@[3218; 3221) \"..=\"\n                                                                               RANGE_EXPR@[3221; 3512)\n-                                                                                DOTDOT@[3221; 3223) \"..\"\n+                                                                                DOT2@[3221; 3223) \"..\"\n                                                                                 WHITESPACE@[3223; 3227) \"    \"\n                                                                                 RANGE_EXPR@[3227; 3512)\n-                                                                                  DOTDOTEQ@[3227; 3230) \"..=\"\n+                                                                                  DOT2EQ@[3227; 3230) \"..=\"\n                                                                                   RANGE_EXPR@[3230; 3512)\n-                                                                                    DOTDOT@[3230; 3232) \"..\"\n+                                                                                    DOT2@[3230; 3232) \"..\"\n                                                                                     WHITESPACE@[3232; 3233) \" \"\n                                                                                     RANGE_EXPR@[3233; 3512)\n-                                                                                      DOTDOTEQ@[3233; 3236) \"..=\"\n+                                                                                      DOT2EQ@[3233; 3236) \"..=\"\n                                                                                       RANGE_EXPR@[3236; 3512)\n-                                                                                        DOTDOT@[3236; 3238) \"..\"\n+                                                                                        DOT2@[3236; 3238) \"..\"\n                                                                                         WHITESPACE@[3238; 3242) \"    \"\n                                                                                         RANGE_EXPR@[3242; 3512)\n-                                                                                          DOTDOT@[3242; 3244) \"..\"\n+                                                                                          DOT2@[3242; 3244) \"..\"\n                                                                                           WHITESPACE@[3244; 3245) \" \"\n                                                                                           RANGE_EXPR@[3245; 3512)\n-                                                                                            DOTDOTEQ@[3245; 3248) \"..=\"\n+                                                                                            DOT2EQ@[3245; 3248) \"..=\"\n                                                                                             RANGE_EXPR@[3248; 3512)\n-                                                                                              DOTDOTEQ@[3248; 3251) \"..=\"\n+                                                                                              DOT2EQ@[3248; 3251) \"..=\"\n                                                                                               RANGE_EXPR@[3251; 3512)\n-                                                                                                DOTDOT@[3251; 3253) \"..\"\n+                                                                                                DOT2@[3251; 3253) \"..\"\n                                                                                                 WHITESPACE@[3253; 3257) \"    \"\n                                                                                                 RANGE_EXPR@[3257; 3512)\n-                                                                                                  DOTDOT@[3257; 3259) \"..\"\n+                                                                                                  DOT2@[3257; 3259) \"..\"\n                                                                                                   WHITESPACE@[3259; 3260) \" \"\n                                                                                                   RANGE_EXPR@[3260; 3512)\n-                                                                                                    DOTDOTEQ@[3260; 3263) \"..=\"\n+                                                                                                    DOT2EQ@[3260; 3263) \"..=\"\n                                                                                                     RANGE_EXPR@[3263; 3512)\n-                                                                                                      DOTDOT@[3263; 3265) \"..\"\n+                                                                                                      DOT2@[3263; 3265) \"..\"\n                                                                                                       WHITESPACE@[3265; 3266) \" \"\n                                                                                                       RANGE_EXPR@[3266; 3512)\n-                                                                                                        DOTDOT@[3266; 3268) \"..\"\n+                                                                                                        DOT2@[3266; 3268) \"..\"\n                                                                                                         WHITESPACE@[3268; 3273) \"\\n    \"\n                                                                                                         RANGE_EXPR@[3273; 3512)\n-                                                                                                          DOTDOTEQ@[3273; 3276) \"..=\"\n+                                                                                                          DOT2EQ@[3273; 3276) \"..=\"\n                                                                                                           RANGE_EXPR@[3276; 3512)\n-                                                                                                            DOTDOTEQ@[3276; 3279) \"..=\"\n+                                                                                                            DOT2EQ@[3276; 3279) \"..=\"\n                                                                                                             RANGE_EXPR@[3279; 3512)\n-                                                                                                              DOTDOT@[3279; 3281) \"..\"\n+                                                                                                              DOT2@[3279; 3281) \"..\"\n                                                                                                               WHITESPACE@[3281; 3282) \" \"\n                                                                                                               RANGE_EXPR@[3282; 3512)\n-                                                                                                                DOTDOT@[3282; 3284) \"..\"\n+                                                                                                                DOT2@[3282; 3284) \"..\"\n                                                                                                                 WHITESPACE@[3284; 3288) \"    \"\n                                                                                                                 RANGE_EXPR@[3288; 3512)\n-                                                                                                                  DOTDOTEQ@[3288; 3291) \"..=\"\n+                                                                                                                  DOT2EQ@[3288; 3291) \"..=\"\n                                                                                                                   RANGE_EXPR@[3291; 3512)\n-                                                                                                                    DOTDOT@[3291; 3293) \"..\"\n+                                                                                                                    DOT2@[3291; 3293) \"..\"\n                                                                                                                     WHITESPACE@[3293; 3294) \" \"\n                                                                                                                     RANGE_EXPR@[3294; 3512)\n-                                                                                                                      DOTDOTEQ@[3294; 3297) \"..=\"\n+                                                                                                                      DOT2EQ@[3294; 3297) \"..=\"\n                                                                                                                       RANGE_EXPR@[3297; 3512)\n-                                                                                                                        DOTDOT@[3297; 3299) \"..\"\n+                                                                                                                        DOT2@[3297; 3299) \"..\"\n                                                                                                                         WHITESPACE@[3299; 3303) \"    \"\n                                                                                                                         RANGE_EXPR@[3303; 3512)\n-                                                                                                                          DOTDOTEQ@[3303; 3306) \"..=\"\n+                                                                                                                          DOT2EQ@[3303; 3306) \"..=\"\n                                                                                                                           RANGE_EXPR@[3306; 3512)\n-                                                                                                                            DOTDOT@[3306; 3308) \"..\"\n+                                                                                                                            DOT2@[3306; 3308) \"..\"\n                                                                                                                             WHITESPACE@[3308; 3309) \" \"\n                                                                                                                             RANGE_EXPR@[3309; 3512)\n-                                                                                                                              DOTDOT@[3309; 3311) \"..\"\n+                                                                                                                              DOT2@[3309; 3311) \"..\"\n                                                                                                                               WHITESPACE@[3311; 3312) \" \"\n                                                                                                                               RANGE_EXPR@[3312; 3512)\n-                                                                                                                                DOTDOT@[3312; 3314) \"..\"\n+                                                                                                                                DOT2@[3312; 3314) \"..\"\n                                                                                                                                 WHITESPACE@[3314; 3318) \"    \"\n                                                                                                                                 RANGE_EXPR@[3318; 3512)\n-                                                                                                                                  DOTDOT@[3318; 3320) \"..\"\n+                                                                                                                                  DOT2@[3318; 3320) \"..\"\n                                                                                                                                   WHITESPACE@[3320; 3321) \" \"\n                                                                                                                                   RANGE_EXPR@[3321; 3512)\n-                                                                                                                                    DOTDOTEQ@[3321; 3324) \"..=\"\n+                                                                                                                                    DOT2EQ@[3321; 3324) \"..=\"\n                                                                                                                                     RANGE_EXPR@[3324; 3512)\n-                                                                                                                                      DOTDOT@[3324; 3326) \"..\"\n+                                                                                                                                      DOT2@[3324; 3326) \"..\"\n                                                                                                                                       WHITESPACE@[3326; 3327) \" \"\n                                                                                                                                       RANGE_EXPR@[3327; 3512)\n-                                                                                                                                        DOTDOT@[3327; 3329) \"..\"\n+                                                                                                                                        DOT2@[3327; 3329) \"..\"\n                                                                                                                                         WHITESPACE@[3329; 3334) \"\\n    \"\n                                                                                                                                         RANGE_EXPR@[3334; 3512)\n-                                                                                                                                          DOTDOTEQ@[3334; 3337) \"..=\"\n+                                                                                                                                          DOT2EQ@[3334; 3337) \"..=\"\n                                                                                                                                           RANGE_EXPR@[3337; 3512)\n-                                                                                                                                            DOTDOT@[3337; 3339) \"..\"\n+                                                                                                                                            DOT2@[3337; 3339) \"..\"\n                                                                                                                                             WHITESPACE@[3339; 3340) \" \"\n                                                                                                                                             RANGE_EXPR@[3340; 3512)\n-                                                                                                                                              DOTDOTEQ@[3340; 3343) \"..=\"\n+                                                                                                                                              DOT2EQ@[3340; 3343) \"..=\"\n                                                                                                                                               RANGE_EXPR@[3343; 3512)\n-                                                                                                                                                DOTDOT@[3343; 3345) \"..\"\n+                                                                                                                                                DOT2@[3343; 3345) \"..\"\n                                                                                                                                                 WHITESPACE@[3345; 3349) \"    \"\n                                                                                                                                                 RANGE_EXPR@[3349; 3512)\n-                                                                                                                                                  DOTDOTEQ@[3349; 3352) \"..=\"\n+                                                                                                                                                  DOT2EQ@[3349; 3352) \"..=\"\n                                                                                                                                                   RANGE_EXPR@[3352; 3512)\n-                                                                                                                                                    DOTDOT@[3352; 3354) \"..\"\n+                                                                                                                                                    DOT2@[3352; 3354) \"..\"\n                                                                                                                                                     WHITESPACE@[3354; 3355) \" \"\n                                                                                                                                                     RANGE_EXPR@[3355; 3512)\n-                                                                                                                                                      DOTDOTEQ@[3355; 3358) \"..=\"\n+                                                                                                                                                      DOT2EQ@[3355; 3358) \"..=\"\n                                                                                                                                                       RANGE_EXPR@[3358; 3512)\n-                                                                                                                                                        DOTDOT@[3358; 3360) \"..\"\n+                                                                                                                                                        DOT2@[3358; 3360) \"..\"\n                                                                                                                                                         WHITESPACE@[3360; 3364) \"    \"\n                                                                                                                                                         RANGE_EXPR@[3364; 3512)\n-                                                                                                                                                          DOTDOT@[3364; 3366) \"..\"\n+                                                                                                                                                          DOT2@[3364; 3366) \"..\"\n                                                                                                                                                           WHITESPACE@[3366; 3367) \" \"\n                                                                                                                                                           RANGE_EXPR@[3367; 3512)\n-                                                                                                                                                            DOTDOTEQ@[3367; 3370) \"..=\"\n+                                                                                                                                                            DOT2EQ@[3367; 3370) \"..=\"\n                                                                                                                                                             RANGE_EXPR@[3370; 3512)\n-                                                                                                                                                              DOTDOT@[3370; 3372) \"..\"\n+                                                                                                                                                              DOT2@[3370; 3372) \"..\"\n                                                                                                                                                               WHITESPACE@[3372; 3373) \" \"\n                                                                                                                                                               RANGE_EXPR@[3373; 3512)\n-                                                                                                                                                                DOTDOT@[3373; 3375) \"..\"\n+                                                                                                                                                                DOT2@[3373; 3375) \"..\"\n                                                                                                                                                                 WHITESPACE@[3375; 3379) \"    \"\n                                                                                                                                                                 RANGE_EXPR@[3379; 3512)\n-                                                                                                                                                                  DOTDOT@[3379; 3381) \"..\"\n+                                                                                                                                                                  DOT2@[3379; 3381) \"..\"\n                                                                                                                                                                   WHITESPACE@[3381; 3382) \" \"\n                                                                                                                                                                   RANGE_EXPR@[3382; 3512)\n-                                                                                                                                                                    DOTDOTEQ@[3382; 3385) \"..=\"\n+                                                                                                                                                                    DOT2EQ@[3382; 3385) \"..=\"\n                                                                                                                                                                     RANGE_EXPR@[3385; 3512)\n-                                                                                                                                                                      DOTDOT@[3385; 3387) \"..\"\n+                                                                                                                                                                      DOT2@[3385; 3387) \"..\"\n                                                                                                                                                                       WHITESPACE@[3387; 3388) \" \"\n                                                                                                                                                                       RANGE_EXPR@[3388; 3512)\n-                                                                                                                                                                        DOTDOT@[3388; 3390) \"..\"\n+                                                                                                                                                                        DOT2@[3388; 3390) \"..\"\n                                                                                                                                                                         WHITESPACE@[3390; 3395) \"\\n    \"\n                                                                                                                                                                         RANGE_EXPR@[3395; 3512)\n-                                                                                                                                                                          DOTDOTEQ@[3395; 3398) \"..=\"\n+                                                                                                                                                                          DOT2EQ@[3395; 3398) \"..=\"\n                                                                                                                                                                           RANGE_EXPR@[3398; 3512)\n-                                                                                                                                                                            DOTDOT@[3398; 3400) \"..\"\n+                                                                                                                                                                            DOT2@[3398; 3400) \"..\"\n                                                                                                                                                                             WHITESPACE@[3400; 3401) \" \"\n                                                                                                                                                                             RANGE_EXPR@[3401; 3512)\n-                                                                                                                                                                              DOTDOTEQ@[3401; 3404) \"..=\"\n+                                                                                                                                                                              DOT2EQ@[3401; 3404) \"..=\"\n                                                                                                                                                                               RANGE_EXPR@[3404; 3512)\n-                                                                                                                                                                                DOTDOT@[3404; 3406) \"..\"\n+                                                                                                                                                                                DOT2@[3404; 3406) \"..\"\n                                                                                                                                                                                 WHITESPACE@[3406; 3410) \"    \"\n                                                                                                                                                                                 RANGE_EXPR@[3410; 3512)\n-                                                                                                                                                                                  DOTDOTEQ@[3410; 3413) \"..=\"\n+                                                                                                                                                                                  DOT2EQ@[3410; 3413) \"..=\"\n                                                                                                                                                                                   RANGE_EXPR@[3413; 3512)\n-                                                                                                                                                                                    DOTDOT@[3413; 3415) \"..\"\n+                                                                                                                                                                                    DOT2@[3413; 3415) \"..\"\n                                                                                                                                                                                     WHITESPACE@[3415; 3416) \" \"\n                                                                                                                                                                                     RANGE_EXPR@[3416; 3512)\n-                                                                                                                                                                                      DOTDOTEQ@[3416; 3419) \"..=\"\n+                                                                                                                                                                                      DOT2EQ@[3416; 3419) \"..=\"\n                                                                                                                                                                                       RANGE_EXPR@[3419; 3512)\n-                                                                                                                                                                                        DOTDOT@[3419; 3421) \"..\"\n+                                                                                                                                                                                        DOT2@[3419; 3421) \"..\"\n                                                                                                                                                                                         WHITESPACE@[3421; 3425) \"    \"\n                                                                                                                                                                                         RANGE_EXPR@[3425; 3512)\n-                                                                                                                                                                                          DOTDOT@[3425; 3427) \"..\"\n+                                                                                                                                                                                          DOT2@[3425; 3427) \"..\"\n                                                                                                                                                                                           WHITESPACE@[3427; 3428) \" \"\n                                                                                                                                                                                           RANGE_EXPR@[3428; 3512)\n-                                                                                                                                                                                            DOTDOT@[3428; 3430) \"..\"\n+                                                                                                                                                                                            DOT2@[3428; 3430) \"..\"\n                                                                                                                                                                                             WHITESPACE@[3430; 3431) \" \"\n                                                                                                                                                                                             RANGE_EXPR@[3431; 3512)\n-                                                                                                                                                                                              DOTDOTEQ@[3431; 3434) \"..=\"\n+                                                                                                                                                                                              DOT2EQ@[3431; 3434) \"..=\"\n                                                                                                                                                                                               RANGE_EXPR@[3434; 3512)\n-                                                                                                                                                                                                DOTDOT@[3434; 3436) \"..\"\n+                                                                                                                                                                                                DOT2@[3434; 3436) \"..\"\n                                                                                                                                                                                                 WHITESPACE@[3436; 3440) \"    \"\n                                                                                                                                                                                                 RANGE_EXPR@[3440; 3512)\n-                                                                                                                                                                                                  DOTDOT@[3440; 3442) \"..\"\n+                                                                                                                                                                                                  DOT2@[3440; 3442) \"..\"\n                                                                                                                                                                                                   WHITESPACE@[3442; 3443) \" \"\n                                                                                                                                                                                                   RANGE_EXPR@[3443; 3512)\n-                                                                                                                                                                                                    DOTDOTEQ@[3443; 3446) \"..=\"\n+                                                                                                                                                                                                    DOT2EQ@[3443; 3446) \"..=\"\n                                                                                                                                                                                                     RANGE_EXPR@[3446; 3512)\n-                                                                                                                                                                                                      DOTDOT@[3446; 3448) \"..\"\n+                                                                                                                                                                                                      DOT2@[3446; 3448) \"..\"\n                                                                                                                                                                                                       WHITESPACE@[3448; 3449) \" \"\n                                                                                                                                                                                                       RANGE_EXPR@[3449; 3512)\n-                                                                                                                                                                                                        DOTDOT@[3449; 3451) \"..\"\n+                                                                                                                                                                                                        DOT2@[3449; 3451) \"..\"\n                                                                                                                                                                                                         WHITESPACE@[3451; 3456) \"\\n    \"\n                                                                                                                                                                                                         RANGE_EXPR@[3456; 3512)\n-                                                                                                                                                                                                          DOTDOTEQ@[3456; 3459) \"..=\"\n+                                                                                                                                                                                                          DOT2EQ@[3456; 3459) \"..=\"\n                                                                                                                                                                                                           RANGE_EXPR@[3459; 3512)\n-                                                                                                                                                                                                            DOTDOT@[3459; 3461) \"..\"\n+                                                                                                                                                                                                            DOT2@[3459; 3461) \"..\"\n                                                                                                                                                                                                             WHITESPACE@[3461; 3462) \" \"\n                                                                                                                                                                                                             RANGE_EXPR@[3462; 3512)\n-                                                                                                                                                                                                              DOTDOTEQ@[3462; 3465) \"..=\"\n+                                                                                                                                                                                                              DOT2EQ@[3462; 3465) \"..=\"\n                                                                                                                                                                                                               RANGE_EXPR@[3465; 3512)\n-                                                                                                                                                                                                                DOTDOT@[3465; 3467) \"..\"\n+                                                                                                                                                                                                                DOT2@[3465; 3467) \"..\"\n                                                                                                                                                                                                                 WHITESPACE@[3467; 3471) \"    \"\n                                                                                                                                                                                                                 RANGE_EXPR@[3471; 3512)\n-                                                                                                                                                                                                                  DOTDOT@[3471; 3473) \"..\"\n+                                                                                                                                                                                                                  DOT2@[3471; 3473) \"..\"\n                                                                                                                                                                                                                   WHITESPACE@[3473; 3474) \" \"\n                                                                                                                                                                                                                   RANGE_EXPR@[3474; 3512)\n-                                                                                                                                                                                                                    DOTDOTEQ@[3474; 3477) \"..=\"\n+                                                                                                                                                                                                                    DOT2EQ@[3474; 3477) \"..=\"\n                                                                                                                                                                                                                     RANGE_EXPR@[3477; 3512)\n-                                                                                                                                                                                                                      DOTDOTEQ@[3477; 3480) \"..=\"\n+                                                                                                                                                                                                                      DOT2EQ@[3477; 3480) \"..=\"\n                                                                                                                                                                                                                       RANGE_EXPR@[3480; 3512)\n-                                                                                                                                                                                                                        DOTDOT@[3480; 3482) \"..\"\n+                                                                                                                                                                                                                        DOT2@[3480; 3482) \"..\"\n                                                                                                                                                                                                                         WHITESPACE@[3482; 3486) \"    \"\n                                                                                                                                                                                                                         RANGE_EXPR@[3486; 3512)\n-                                                                                                                                                                                                                          DOTDOTEQ@[3486; 3489) \"..=\"\n+                                                                                                                                                                                                                          DOT2EQ@[3486; 3489) \"..=\"\n                                                                                                                                                                                                                           RANGE_EXPR@[3489; 3512)\n-                                                                                                                                                                                                                            DOTDOTEQ@[3489; 3492) \"..=\"\n+                                                                                                                                                                                                                            DOT2EQ@[3489; 3492) \"..=\"\n                                                                                                                                                                                                                             RANGE_EXPR@[3492; 3512)\n-                                                                                                                                                                                                                              DOTDOT@[3492; 3494) \"..\"\n+                                                                                                                                                                                                                              DOT2@[3492; 3494) \"..\"\n                                                                                                                                                                                                                               WHITESPACE@[3494; 3495) \" \"\n                                                                                                                                                                                                                               RANGE_EXPR@[3495; 3512)\n-                                                                                                                                                                                                                                DOTDOT@[3495; 3497) \"..\"\n+                                                                                                                                                                                                                                DOT2@[3495; 3497) \"..\"\n                                                                                                                                                                                                                                 WHITESPACE@[3497; 3501) \"    \"\n                                                                                                                                                                                                                                 RANGE_EXPR@[3501; 3512)\n-                                                                                                                                                                                                                                  DOTDOT@[3501; 3503) \"..\"\n+                                                                                                                                                                                                                                  DOT2@[3501; 3503) \"..\"\n                                                                                                                                                                                                                                   WHITESPACE@[3503; 3504) \" \"\n                                                                                                                                                                                                                                   RANGE_EXPR@[3504; 3512)\n-                                                                                                                                                                                                                                    DOTDOTEQ@[3504; 3507) \"..=\"\n+                                                                                                                                                                                                                                    DOT2EQ@[3504; 3507) \"..=\"\n                                                                                                                                                                                                                                     RANGE_EXPR@[3507; 3512)\n-                                                                                                                                                                                                                                      DOTDOT@[3507; 3509) \"..\"\n+                                                                                                                                                                                                                                      DOT2@[3507; 3509) \"..\"\n                                                                                                                                                                                                                                       WHITESPACE@[3509; 3510) \" \"\n                                                                                                                                                                                                                                       RANGE_EXPR@[3510; 3512)\n-                                                                                                                                                                                                                                        DOTDOT@[3510; 3512) \"..\"\n+                                                                                                                                                                                                                                        DOT2@[3510; 3512) \"..\"\n         WHITESPACE@[3512; 3513) \"\\n\"\n         R_CURLY@[3513; 3514) \"}\"\n   WHITESPACE@[3514; 3516) \"\\n\\n\"\n@@ -2105,22 +2105,22 @@ SOURCE_FILE@[0; 3813)\n       BLOCK@[3528; 3552)\n         L_CURLY@[3528; 3529) \"{\"\n         WHITESPACE@[3529; 3534) \"\\n    \"\n-        SEMI@[3534; 3535) \";\"\n-        SEMI@[3535; 3536) \";\"\n-        SEMI@[3536; 3537) \";\"\n+        SEMICOLON@[3534; 3535) \";\"\n+        SEMICOLON@[3535; 3536) \";\"\n+        SEMICOLON@[3536; 3537) \";\"\n         EXPR_STMT@[3537; 3540)\n           TUPLE_EXPR@[3537; 3539)\n             L_PAREN@[3537; 3538) \"(\"\n             R_PAREN@[3538; 3539) \")\"\n-          SEMI@[3539; 3540) \";\"\n-        SEMI@[3540; 3541) \";\"\n-        SEMI@[3541; 3542) \";\"\n-        SEMI@[3542; 3543) \";\"\n-        SEMI@[3543; 3544) \";\"\n-        SEMI@[3544; 3545) \";\"\n-        SEMI@[3545; 3546) \";\"\n-        SEMI@[3546; 3547) \";\"\n-        SEMI@[3547; 3548) \";\"\n+          SEMICOLON@[3539; 3540) \";\"\n+        SEMICOLON@[3540; 3541) \";\"\n+        SEMICOLON@[3541; 3542) \";\"\n+        SEMICOLON@[3542; 3543) \";\"\n+        SEMICOLON@[3543; 3544) \";\"\n+        SEMICOLON@[3544; 3545) \";\"\n+        SEMICOLON@[3545; 3546) \";\"\n+        SEMICOLON@[3546; 3547) \";\"\n+        SEMICOLON@[3547; 3548) \";\"\n         TUPLE_EXPR@[3548; 3550)\n           L_PAREN@[3548; 3549) \"(\"\n           R_PAREN@[3549; 3550) \")\"\n@@ -2153,7 +2153,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3581; 3583)\n               L_PAREN@[3581; 3582) \"(\"\n               R_PAREN@[3582; 3583) \")\"\n-          SEMI@[3583; 3584) \";\"\n+          SEMICOLON@[3583; 3584) \";\"\n         WHITESPACE@[3584; 3589) \"\\n    \"\n         EXPR_STMT@[3589; 3597)\n           CALL_EXPR@[3589; 3596)\n@@ -2165,7 +2165,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3594; 3596)\n               L_PAREN@[3594; 3595) \"(\"\n               R_PAREN@[3595; 3596) \")\"\n-          SEMI@[3596; 3597) \";\"\n+          SEMICOLON@[3596; 3597) \";\"\n         WHITESPACE@[3597; 3602) \"\\n    \"\n         EXPR_STMT@[3602; 3609)\n           CALL_EXPR@[3602; 3608)\n@@ -2177,7 +2177,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3606; 3608)\n               L_PAREN@[3606; 3607) \"(\"\n               R_PAREN@[3607; 3608) \")\"\n-          SEMI@[3608; 3609) \";\"\n+          SEMICOLON@[3608; 3609) \";\"\n         WHITESPACE@[3609; 3614) \"\\n    \"\n         EXPR_STMT@[3614; 3628)\n           CALL_EXPR@[3614; 3627)\n@@ -2189,7 +2189,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3625; 3627)\n               L_PAREN@[3625; 3626) \"(\"\n               R_PAREN@[3626; 3627) \")\"\n-          SEMI@[3627; 3628) \";\"\n+          SEMICOLON@[3627; 3628) \";\"\n         WHITESPACE@[3628; 3633) \"\\n    \"\n         EXPR_STMT@[3633; 3643)\n           CALL_EXPR@[3633; 3642)\n@@ -2201,7 +2201,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3640; 3642)\n               L_PAREN@[3640; 3641) \"(\"\n               R_PAREN@[3641; 3642) \")\"\n-          SEMI@[3642; 3643) \";\"\n+          SEMICOLON@[3642; 3643) \";\"\n         WHITESPACE@[3643; 3648) \"\\n    \"\n         EXPR_STMT@[3648; 3664)\n           CALL_EXPR@[3648; 3663)\n@@ -2213,7 +2213,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3661; 3663)\n               L_PAREN@[3661; 3662) \"(\"\n               R_PAREN@[3662; 3663) \")\"\n-          SEMI@[3663; 3664) \";\"\n+          SEMICOLON@[3663; 3664) \";\"\n         WHITESPACE@[3664; 3669) \"\\n    \"\n         EXPR_STMT@[3669; 3681)\n           CALL_EXPR@[3669; 3680)\n@@ -2225,7 +2225,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3678; 3680)\n               L_PAREN@[3678; 3679) \"(\"\n               R_PAREN@[3679; 3680) \")\"\n-          SEMI@[3680; 3681) \";\"\n+          SEMICOLON@[3680; 3681) \";\"\n         WHITESPACE@[3681; 3686) \"\\n    \"\n         EXPR_STMT@[3686; 3701)\n           CALL_EXPR@[3686; 3700)\n@@ -2237,7 +2237,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3698; 3700)\n               L_PAREN@[3698; 3699) \"(\"\n               R_PAREN@[3699; 3700) \")\"\n-          SEMI@[3700; 3701) \";\"\n+          SEMICOLON@[3700; 3701) \";\"\n         WHITESPACE@[3701; 3706) \"\\n    \"\n         EXPR_STMT@[3706; 3713)\n           CALL_EXPR@[3706; 3712)\n@@ -2249,7 +2249,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3710; 3712)\n               L_PAREN@[3710; 3711) \"(\"\n               R_PAREN@[3711; 3712) \")\"\n-          SEMI@[3712; 3713) \";\"\n+          SEMICOLON@[3712; 3713) \";\"\n         WHITESPACE@[3713; 3718) \"\\n    \"\n         EXPR_STMT@[3718; 3726)\n           CALL_EXPR@[3718; 3725)\n@@ -2263,7 +2263,7 @@ SOURCE_FILE@[0; 3813)\n               LITERAL@[3721; 3724)\n                 INT_NUMBER@[3721; 3724) \"8u8\"\n               R_PAREN@[3724; 3725) \")\"\n-          SEMI@[3725; 3726) \";\"\n+          SEMICOLON@[3725; 3726) \";\"\n         WHITESPACE@[3726; 3731) \"\\n    \"\n         EXPR_STMT@[3731; 3739)\n           CALL_EXPR@[3731; 3738)\n@@ -2275,7 +2275,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3736; 3738)\n               L_PAREN@[3736; 3737) \"(\"\n               R_PAREN@[3737; 3738) \")\"\n-          SEMI@[3738; 3739) \";\"\n+          SEMICOLON@[3738; 3739) \";\"\n         WHITESPACE@[3739; 3744) \"\\n    \"\n         EXPR_STMT@[3744; 3752)\n           CALL_EXPR@[3744; 3751)\n@@ -2287,7 +2287,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3749; 3751)\n               L_PAREN@[3749; 3750) \"(\"\n               R_PAREN@[3750; 3751) \")\"\n-          SEMI@[3751; 3752) \";\"\n+          SEMICOLON@[3751; 3752) \";\"\n         WHITESPACE@[3752; 3757) \"\\n    \"\n         EXPR_STMT@[3757; 3778)\n           CALL_EXPR@[3757; 3777)\n@@ -2299,7 +2299,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3775; 3777)\n               L_PAREN@[3775; 3776) \"(\"\n               R_PAREN@[3776; 3777) \")\"\n-          SEMI@[3777; 3778) \";\"\n+          SEMICOLON@[3777; 3778) \";\"\n         WHITESPACE@[3778; 3783) \"\\n    \"\n         EXPR_STMT@[3783; 3796)\n           CALL_EXPR@[3783; 3795)\n@@ -2311,7 +2311,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3793; 3795)\n               L_PAREN@[3793; 3794) \"(\"\n               R_PAREN@[3794; 3795) \")\"\n-          SEMI@[3795; 3796) \";\"\n+          SEMICOLON@[3795; 3796) \";\"\n         WHITESPACE@[3796; 3801) \"\\n    \"\n         EXPR_STMT@[3801; 3810)\n           CALL_EXPR@[3801; 3809)\n@@ -2323,7 +2323,7 @@ SOURCE_FILE@[0; 3813)\n             ARG_LIST@[3807; 3809)\n               L_PAREN@[3807; 3808) \"(\"\n               R_PAREN@[3808; 3809) \")\"\n-          SEMI@[3809; 3810) \";\"\n+          SEMICOLON@[3809; 3810) \";\"\n         WHITESPACE@[3810; 3811) \"\\n\"\n         R_CURLY@[3811; 3812) \"}\"\n   WHITESPACE@[3812; 3813) \"\\n\""}, {"sha": "4df6703f4011a143b7a7fda1750227c59b4b8826", "filename": "crates/ra_syntax/test_data/parser/ok/0036_fully_qualified.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0036_fully_qualified.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -60,7 +60,7 @@ SOURCE_FILE@[0; 157)\n                       NAME_REF@[114; 122)\n                         IDENT@[114; 122) \"Iterator\"\n                 R_ANGLE@[122; 123) \">\"\n-            COLONCOLON@[123; 125) \"::\"\n+            COLON2@[123; 125) \"::\"\n             PATH_SEGMENT@[125; 129)\n               NAME_REF@[125; 129)\n                 IDENT@[125; 129) \"Item\""}, {"sha": "825518eda29f6c5964a98424b7be17d00bde3e48", "filename": "crates/ra_syntax/test_data/parser/ok/0041_raw_keywords.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0041_raw_keywords.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0041_raw_keywords.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0041_raw_keywords.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 59)\n           WHITESPACE@[25; 26) \" \"\n           LITERAL@[26; 28)\n             INT_NUMBER@[26; 28) \"92\"\n-          SEMI@[28; 29) \";\"\n+          SEMICOLON@[28; 29) \";\"\n         WHITESPACE@[29; 30) \" \"\n         LET_STMT@[30; 57)\n           LET_KW@[30; 33) \"let\"\n@@ -45,6 +45,6 @@ SOURCE_FILE@[0; 59)\n             WHITESPACE@[54; 55) \" \"\n             LITERAL@[55; 56)\n               INT_NUMBER@[55; 56) \"2\"\n-          SEMI@[56; 57) \";\"\n+          SEMICOLON@[56; 57) \";\"\n         WHITESPACE@[57; 58) \" \"\n         R_CURLY@[58; 59) \"}\""}, {"sha": "420a62639eeabd7e9baf80d0cdfe20bc30100ba3", "filename": "crates/ra_syntax/test_data/parser/ok/0042_ufcs_call_list.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -6,7 +6,7 @@ SOURCE_FILE@[0; 199)\n     WHITESPACE@[68; 69) \" \"\n     NAME@[69; 72)\n       IDENT@[69; 72) \"Foo\"\n-    SEMI@[72; 73) \";\"\n+    SEMICOLON@[72; 73) \";\"\n   WHITESPACE@[73; 75) \"\\n\\n\"\n   IMPL_DEF@[75; 141)\n     IMPL_KW@[75; 79) \"impl\"\n@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 199)\n                 PATH_SEGMENT@[117; 130)\n                   NAME_REF@[117; 130)\n                     IDENT@[117; 130) \"unimplemented\"\n-              EXCL@[130; 131) \"!\"\n+              BANG@[130; 131) \"!\"\n               TOKEN_TREE@[131; 133)\n                 L_PAREN@[131; 132) \"(\"\n                 R_PAREN@[132; 133) \")\"\n@@ -113,7 +113,7 @@ SOURCE_FILE@[0; 199)\n                             NAME_REF@[184; 187)\n                               IDENT@[184; 187) \"Foo\"\n                       R_ANGLE@[187; 188) \">\"\n-                  COLONCOLON@[188; 190) \"::\"\n+                  COLON2@[188; 190) \"::\"\n                   PATH_SEGMENT@[190; 193)\n                     NAME_REF@[190; 193)\n                       IDENT@[190; 193) \"bar\""}, {"sha": "3bc0ddbde6aaad577c35f666acbdc2ba738508bd", "filename": "crates/ra_syntax/test_data/parser/ok/0043_complex_assignment.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -22,7 +22,7 @@ SOURCE_FILE@[0; 160)\n               PATH_SEGMENT@[82; 84)\n                 NAME_REF@[82; 84)\n                   IDENT@[82; 84) \"u8\"\n-          SEMI@[84; 85) \";\"\n+          SEMICOLON@[84; 85) \";\"\n           WHITESPACE@[85; 86) \" \"\n           LITERAL@[86; 87)\n             INT_NUMBER@[86; 87) \"1\"\n@@ -80,7 +80,7 @@ SOURCE_FILE@[0; 160)\n             WHITESPACE@[133; 134) \" \"\n             LITERAL@[134; 135)\n               INT_NUMBER@[134; 135) \"0\"\n-          SEMI@[135; 136) \";\"\n+          SEMICOLON@[135; 136) \";\"\n         WHITESPACE@[136; 141) \"\\n    \"\n         EXPR_STMT@[141; 157)\n           CALL_EXPR@[141; 156)\n@@ -104,7 +104,7 @@ SOURCE_FILE@[0; 160)\n             ARG_LIST@[154; 156)\n               L_PAREN@[154; 155) \"(\"\n               R_PAREN@[155; 156) \")\"\n-          SEMI@[156; 157) \";\"\n+          SEMICOLON@[156; 157) \";\"\n         WHITESPACE@[157; 158) \"\\n\"\n         R_CURLY@[158; 159) \"}\"\n   WHITESPACE@[159; 160) \"\\n\""}, {"sha": "4b2593147697ec583293222e9f5007a48ac31d74", "filename": "crates/ra_syntax/test_data/parser/ok/0044_let_attrs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0044_let_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 166)\n                   PATH_SEGMENT@[127; 132)\n                     NAME_REF@[127; 132)\n                       IDENT@[127; 132) \"panic\"\n-                COLONCOLON@[132; 134) \"::\"\n+                COLON2@[132; 134) \"::\"\n                 PATH_SEGMENT@[134; 146)\n                   NAME_REF@[134; 146)\n                     IDENT@[134; 146) \"catch_unwind\"\n@@ -70,7 +70,7 @@ SOURCE_FILE@[0; 166)\n                     L_PAREN@[159; 160) \"(\"\n                     R_PAREN@[160; 161) \")\"\n               R_PAREN@[161; 162) \")\"\n-          SEMI@[162; 163) \";\"\n+          SEMICOLON@[162; 163) \";\"\n         WHITESPACE@[163; 164) \"\\n\"\n         R_CURLY@[164; 165) \"}\"\n   WHITESPACE@[165; 166) \"\\n\""}, {"sha": "954b3bc2a69fa89a29469fbf5cd38da7cdda5813", "filename": "crates/ra_syntax/test_data/parser/ok/0045_block_inner_attrs.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -14,7 +14,7 @@ SOURCE_FILE@[0; 686)\n         WHITESPACE@[12; 17) \"\\n    \"\n         ATTR@[17; 57)\n           POUND@[17; 18) \"#\"\n-          EXCL@[18; 19) \"!\"\n+          BANG@[18; 19) \"!\"\n           L_BRACK@[19; 20) \"[\"\n           PATH@[20; 23)\n             PATH_SEGMENT@[20; 23)\n@@ -35,7 +35,7 @@ SOURCE_FILE@[0; 686)\n               WHITESPACE@[103; 112) \"\\n        \"\n               ATTR@[112; 180)\n                 POUND@[112; 113) \"#\"\n-                EXCL@[113; 114) \"!\"\n+                BANG@[113; 114) \"!\"\n                 L_BRACK@[114; 115) \"[\"\n                 PATH@[115; 118)\n                   PATH_SEGMENT@[115; 118)\n@@ -49,7 +49,7 @@ SOURCE_FILE@[0; 686)\n               WHITESPACE@[180; 189) \"\\n        \"\n               ATTR@[189; 244)\n                 POUND@[189; 190) \"#\"\n-                EXCL@[190; 191) \"!\"\n+                BANG@[190; 191) \"!\"\n                 L_BRACK@[191; 192) \"[\"\n                 PATH@[192; 195)\n                   PATH_SEGMENT@[192; 195)\n@@ -64,15 +64,15 @@ SOURCE_FILE@[0; 686)\n               COMMENT@[253; 288) \"//! As are ModuleDoc  ...\"\n               WHITESPACE@[288; 293) \"\\n    \"\n               R_CURLY@[293; 294) \"}\"\n-          SEMI@[294; 295) \";\"\n+          SEMICOLON@[294; 295) \";\"\n         WHITESPACE@[295; 300) \"\\n    \"\n         BLOCK_EXPR@[300; 459)\n           BLOCK@[300; 459)\n             L_CURLY@[300; 301) \"{\"\n             WHITESPACE@[301; 310) \"\\n        \"\n             ATTR@[310; 409)\n               POUND@[310; 311) \"#\"\n-              EXCL@[311; 312) \"!\"\n+              BANG@[311; 312) \"!\"\n               L_BRACK@[312; 313) \"[\"\n               PATH@[313; 316)\n                 PATH_SEGMENT@[313; 316)\n@@ -161,7 +161,7 @@ SOURCE_FILE@[0; 686)\n             WHITESPACE@[603; 612) \"\\n        \"\n             ATTR@[612; 639)\n               POUND@[612; 613) \"#\"\n-              EXCL@[613; 614) \"!\"\n+              BANG@[613; 614) \"!\"\n               L_BRACK@[614; 615) \"[\"\n               PATH@[615; 620)\n                 PATH_SEGMENT@[615; 620)"}, {"sha": "92c8df2d67ed4d337c87f7a1680ddd2f82c12f90", "filename": "crates/ra_syntax/test_data/parser/ok/0046_extern_inner_attributes.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0046_extern_inner_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0046_extern_inner_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0046_extern_inner_attributes.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 87)\n       WHITESPACE@[42; 47) \"\\n    \"\n       ATTR@[47; 84)\n         POUND@[47; 48) \"#\"\n-        EXCL@[48; 49) \"!\"\n+        BANG@[48; 49) \"!\"\n         L_BRACK@[49; 50) \"[\"\n         PATH@[50; 53)\n           PATH_SEGMENT@[50; 53)"}, {"sha": "de703328af34fc5c3ce11c85f1524b132975d99d", "filename": "crates/ra_syntax/test_data/parser/ok/0047_minus_in_inner_pattern.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -151,7 +151,7 @@ SOURCE_FILE@[0; 395)\n                     PATH_SEGMENT@[234; 235)\n                       NAME_REF@[234; 235)\n                         IDENT@[234; 235) \"A\"\n-                  COLONCOLON@[235; 237) \"::\"\n+                  COLON2@[235; 237) \"::\"\n                   PATH_SEGMENT@[237; 238)\n                     NAME_REF@[237; 238)\n                       IDENT@[237; 238) \"B\"\n@@ -179,7 +179,7 @@ SOURCE_FILE@[0; 395)\n                       PATH_SEGMENT@[257; 258)\n                         NAME_REF@[257; 258)\n                           IDENT@[257; 258) \"A\"\n-                    COLONCOLON@[258; 260) \"::\"\n+                    COLON2@[258; 260) \"::\"\n                     PATH_SEGMENT@[260; 261)\n                       NAME_REF@[260; 261)\n                         IDENT@[260; 261) \"B\"\n@@ -303,7 +303,7 @@ SOURCE_FILE@[0; 395)\n             MINUS@[376; 377) \"-\"\n             LITERAL@[377; 380)\n               INT_NUMBER@[377; 380) \"128\"\n-          DOTDOTEQ@[380; 383) \"..=\"\n+          DOT2EQ@[380; 383) \"..=\"\n           LITERAL_PAT@[383; 386)\n             LITERAL@[383; 386)\n               INT_NUMBER@[383; 386) \"127\""}, {"sha": "849d8a445c74026919c944186fc8008513f02cb7", "filename": "crates/ra_syntax/test_data/parser/ok/0048_compound_assignment.rast", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0048_compound_assignment.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@[0; 257)\n           WHITESPACE@[102; 103) \" \"\n           LITERAL@[103; 104)\n             INT_NUMBER@[103; 104) \"0\"\n-          SEMI@[104; 105) \";\"\n+          SEMICOLON@[104; 105) \";\"\n         WHITESPACE@[105; 110) \"\\n    \"\n         EXPR_STMT@[110; 117)\n           BIN_EXPR@[110; 116)\n@@ -41,7 +41,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[114; 115) \" \"\n             LITERAL@[115; 116)\n               INT_NUMBER@[115; 116) \"1\"\n-          SEMI@[116; 117) \";\"\n+          SEMICOLON@[116; 117) \";\"\n         WHITESPACE@[117; 122) \"\\n    \"\n         EXPR_STMT@[122; 129)\n           BIN_EXPR@[122; 128)\n@@ -55,7 +55,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[126; 127) \" \"\n             LITERAL@[127; 128)\n               INT_NUMBER@[127; 128) \"2\"\n-          SEMI@[128; 129) \";\"\n+          SEMICOLON@[128; 129) \";\"\n         WHITESPACE@[129; 134) \"\\n    \"\n         EXPR_STMT@[134; 141)\n           BIN_EXPR@[134; 140)\n@@ -69,7 +69,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[138; 139) \" \"\n             LITERAL@[139; 140)\n               INT_NUMBER@[139; 140) \"3\"\n-          SEMI@[140; 141) \";\"\n+          SEMICOLON@[140; 141) \";\"\n         WHITESPACE@[141; 146) \"\\n    \"\n         EXPR_STMT@[146; 153)\n           BIN_EXPR@[146; 152)\n@@ -83,7 +83,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[150; 151) \" \"\n             LITERAL@[151; 152)\n               INT_NUMBER@[151; 152) \"4\"\n-          SEMI@[152; 153) \";\"\n+          SEMICOLON@[152; 153) \";\"\n         WHITESPACE@[153; 158) \"\\n    \"\n         EXPR_STMT@[158; 165)\n           BIN_EXPR@[158; 164)\n@@ -97,7 +97,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[162; 163) \" \"\n             LITERAL@[163; 164)\n               INT_NUMBER@[163; 164) \"5\"\n-          SEMI@[164; 165) \";\"\n+          SEMICOLON@[164; 165) \";\"\n         WHITESPACE@[165; 170) \"\\n    \"\n         EXPR_STMT@[170; 177)\n           BIN_EXPR@[170; 176)\n@@ -111,7 +111,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[174; 175) \" \"\n             LITERAL@[175; 176)\n               INT_NUMBER@[175; 176) \"6\"\n-          SEMI@[176; 177) \";\"\n+          SEMICOLON@[176; 177) \";\"\n         WHITESPACE@[177; 182) \"\\n    \"\n         EXPR_STMT@[182; 189)\n           BIN_EXPR@[182; 188)\n@@ -125,7 +125,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[186; 187) \" \"\n             LITERAL@[187; 188)\n               INT_NUMBER@[187; 188) \"7\"\n-          SEMI@[188; 189) \";\"\n+          SEMICOLON@[188; 189) \";\"\n         WHITESPACE@[189; 194) \"\\n    \"\n         EXPR_STMT@[194; 201)\n           BIN_EXPR@[194; 200)\n@@ -139,7 +139,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[198; 199) \" \"\n             LITERAL@[199; 200)\n               INT_NUMBER@[199; 200) \"8\"\n-          SEMI@[200; 201) \";\"\n+          SEMICOLON@[200; 201) \";\"\n         WHITESPACE@[201; 206) \"\\n    \"\n         EXPR_STMT@[206; 213)\n           BIN_EXPR@[206; 212)\n@@ -153,7 +153,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[210; 211) \" \"\n             LITERAL@[211; 212)\n               INT_NUMBER@[211; 212) \"9\"\n-          SEMI@[212; 213) \";\"\n+          SEMICOLON@[212; 213) \";\"\n         WHITESPACE@[213; 218) \"\\n    \"\n         EXPR_STMT@[218; 226)\n           BIN_EXPR@[218; 225)\n@@ -167,7 +167,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[222; 223) \" \"\n             LITERAL@[223; 225)\n               INT_NUMBER@[223; 225) \"10\"\n-          SEMI@[225; 226) \";\"\n+          SEMICOLON@[225; 226) \";\"\n         WHITESPACE@[226; 231) \"\\n    \"\n         EXPR_STMT@[231; 240)\n           BIN_EXPR@[231; 239)\n@@ -181,7 +181,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[236; 237) \" \"\n             LITERAL@[237; 239)\n               INT_NUMBER@[237; 239) \"11\"\n-          SEMI@[239; 240) \";\"\n+          SEMICOLON@[239; 240) \";\"\n         WHITESPACE@[240; 245) \"\\n    \"\n         EXPR_STMT@[245; 254)\n           BIN_EXPR@[245; 253)\n@@ -195,7 +195,7 @@ SOURCE_FILE@[0; 257)\n             WHITESPACE@[250; 251) \" \"\n             LITERAL@[251; 253)\n               INT_NUMBER@[251; 253) \"12\"\n-          SEMI@[253; 254) \";\"\n+          SEMICOLON@[253; 254) \";\"\n         WHITESPACE@[254; 255) \"\\n\"\n         R_CURLY@[255; 256) \"}\"\n   WHITESPACE@[256; 257) \"\\n\""}, {"sha": "0d32f0115b1e3964ab4328cef01a40058751537a", "filename": "crates/ra_syntax/test_data/parser/ok/0049_async_block.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0049_async_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0049_async_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0049_async_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -19,7 +19,7 @@ SOURCE_FILE@[0; 47)\n             BLOCK@[21; 23)\n               L_CURLY@[21; 22) \"{\"\n               R_CURLY@[22; 23) \"}\"\n-          SEMI@[23; 24) \";\"\n+          SEMICOLON@[23; 24) \";\"\n         WHITESPACE@[24; 29) \"\\n    \"\n         EXPR_STMT@[29; 43)\n           BLOCK_EXPR@[29; 42)\n@@ -30,7 +30,7 @@ SOURCE_FILE@[0; 47)\n             BLOCK@[40; 42)\n               L_CURLY@[40; 41) \"{\"\n               R_CURLY@[41; 42) \"}\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 44) \"\\n\"\n         R_CURLY@[44; 45) \"}\"\n   WHITESPACE@[45; 47) \"\\n\\n\""}, {"sha": "17591d99fa15dcdd7c00883960f0102320974776", "filename": "crates/ra_syntax/test_data/parser/ok/0050_async_block_as_argument.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -24,11 +24,11 @@ SOURCE_FILE@[0; 95)\n                       PATH_SEGMENT@[15; 18)\n                         NAME_REF@[15; 18)\n                           IDENT@[15; 18) \"std\"\n-                    COLONCOLON@[18; 20) \"::\"\n+                    COLON2@[18; 20) \"::\"\n                     PATH_SEGMENT@[20; 26)\n                       NAME_REF@[20; 26)\n                         IDENT@[20; 26) \"future\"\n-                  COLONCOLON@[26; 28) \"::\"\n+                  COLON2@[26; 28) \"::\"\n                   PATH_SEGMENT@[28; 48)\n                     NAME_REF@[28; 34)\n                       IDENT@[28; 34) \"Future\""}, {"sha": "8fd28427c64563942f0d5a36932f7154a08e8432", "filename": "crates/ra_syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -119,7 +119,7 @@ SOURCE_FILE@[0; 519)\n             R_BRACK@[112; 113) \"]\"\n           WHITESPACE@[113; 114) \" \"\n           PARAM@[114; 117)\n-            DOTDOTDOT@[114; 117) \"...\"\n+            DOT3@[114; 117) \"...\"\n           R_PAREN@[117; 118) \")\"\n         WHITESPACE@[118; 119) \" \"\n         RET_TYPE@[119; 125)\n@@ -130,7 +130,7 @@ SOURCE_FILE@[0; 519)\n               PATH_SEGMENT@[122; 125)\n                 NAME_REF@[122; 125)\n                   IDENT@[122; 125) \"i32\"\n-        SEMI@[125; 126) \";\"\n+        SEMICOLON@[125; 126) \";\"\n       WHITESPACE@[126; 127) \" \"\n       R_CURLY@[127; 128) \"}\"\n   WHITESPACE@[128; 130) \"\\n\\n\"\n@@ -250,7 +250,7 @@ SOURCE_FILE@[0; 519)\n                   NAME_REF@[229; 232)\n                     IDENT@[229; 232) \"i32\"\n           R_PAREN@[232; 233) \")\"\n-        SEMI@[233; 234) \";\"\n+        SEMICOLON@[233; 234) \";\"\n       WHITESPACE@[234; 235) \"\\n\"\n       R_CURLY@[235; 236) \"}\"\n   WHITESPACE@[236; 238) \"\\n\\n\""}, {"sha": "473966cd40e0a0c8a3efc9d24dc3f3f3d502e336", "filename": "crates/ra_syntax/test_data/parser/ok/0052_for_range_block.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 80)\n             LITERAL@[24; 25)\n               INT_NUMBER@[24; 25) \"0\"\n             WHITESPACE@[25; 26) \" \"\n-            DOTDOT@[26; 28) \"..\"\n+            DOT2@[26; 28) \"..\"\n             WHITESPACE@[28; 29) \" \"\n             METHOD_CALL_EXPR@[29; 56)\n               PAREN_EXPR@[29; 43)\n@@ -34,7 +34,7 @@ SOURCE_FILE@[0; 80)\n                   LITERAL@[30; 31)\n                     INT_NUMBER@[30; 31) \"0\"\n                   WHITESPACE@[31; 32) \" \"\n-                  DOTDOT@[32; 34) \"..\"\n+                  DOT2@[32; 34) \"..\"\n                   WHITESPACE@[34; 35) \" \"\n                   BLOCK_EXPR@[35; 42)\n                     BLOCK@[35; 42)\n@@ -53,7 +53,7 @@ SOURCE_FILE@[0; 80)\n               NAME_REF@[44; 47)\n                 IDENT@[44; 47) \"sum\"\n               TYPE_ARG_LIST@[47; 54)\n-                COLONCOLON@[47; 49) \"::\"\n+                COLON2@[47; 49) \"::\"\n                 L_ANGLE@[49; 50) \"<\"\n                 TYPE_ARG@[50; 53)\n                   PATH_TYPE@[50; 53)\n@@ -73,7 +73,7 @@ SOURCE_FILE@[0; 80)\n               EXPR_STMT@[66; 72)\n                 BREAK_EXPR@[66; 71)\n                   BREAK_KW@[66; 71) \"break\"\n-                SEMI@[71; 72) \";\"\n+                SEMICOLON@[71; 72) \";\"\n               WHITESPACE@[72; 76) \"\\n   \"\n               R_CURLY@[76; 77) \"}\"\n         WHITESPACE@[77; 78) \"\\n\""}, {"sha": "60a49185311dff7df4b482776b1a13da64e29ad9", "filename": "crates/ra_syntax/test_data/parser/ok/0053_outer_attribute_on_macro_rules.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0053_outer_attribute_on_macro_rules.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0053_outer_attribute_on_macro_rules.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0053_outer_attribute_on_macro_rules.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -15,7 +15,7 @@ SOURCE_FILE@[0; 65)\n       PATH_SEGMENT@[30; 41)\n         NAME_REF@[30; 41)\n           IDENT@[30; 41) \"macro_rules\"\n-    EXCL@[41; 42) \"!\"\n+    BANG@[41; 42) \"!\"\n     WHITESPACE@[42; 43) \" \"\n     NAME@[43; 46)\n       IDENT@[43; 46) \"foo\"\n@@ -33,7 +33,7 @@ SOURCE_FILE@[0; 65)\n       TOKEN_TREE@[59; 61)\n         L_CURLY@[59; 60) \"{\"\n         R_CURLY@[60; 61) \"}\"\n-      SEMI@[61; 62) \";\"\n+      SEMICOLON@[61; 62) \";\"\n       WHITESPACE@[62; 63) \"\\n\"\n       R_CURLY@[63; 64) \"}\"\n   WHITESPACE@[64; 65) \"\\n\""}, {"sha": "fabf88e8f261d06f3810d249e4f96b61e858605d", "filename": "crates/ra_syntax/test_data/parser/ok/0054_qual_path_in_type_arg.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@[0; 88)\n                       PATH_SEGMENT@[14; 17)\n                         NAME_REF@[14; 17)\n                           IDENT@[14; 17) \"bar\"\n-                    COLONCOLON@[17; 19) \"::\"\n+                    COLON2@[17; 19) \"::\"\n                     PATH_SEGMENT@[19; 22)\n                       NAME_REF@[19; 22)\n                         IDENT@[19; 22) \"Baz\"\n@@ -67,7 +67,7 @@ SOURCE_FILE@[0; 88)\n                               PATH_SEGMENT@[47; 48)\n                                 NAME_REF@[47; 48)\n                                   IDENT@[47; 48) \"x\"\n-                            COLONCOLON@[48; 50) \"::\"\n+                            COLON2@[48; 50) \"::\"\n                             PATH_SEGMENT@[50; 51)\n                               NAME_REF@[50; 51)\n                                 IDENT@[50; 51) \"Y\"\n@@ -112,7 +112,7 @@ SOURCE_FILE@[0; 88)\n                                 PATH_SEGMENT@[78; 79)\n                                   NAME_REF@[78; 79)\n                                     IDENT@[78; 79) \"x\"\n-                              COLONCOLON@[79; 81) \"::\"\n+                              COLON2@[79; 81) \"::\"\n                               PATH_SEGMENT@[81; 82)\n                                 NAME_REF@[81; 82)\n                                   IDENT@[81; 82) \"Y\""}, {"sha": "6ac3f14587cdc02ec2a0b6c5cb260e0d4924299e", "filename": "crates/ra_syntax/test_data/parser/ok/0055_dot_dot_dot.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0055_dot_dot_dot.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -10,7 +10,7 @@ SOURCE_FILE@[0; 49)\n     TUPLE_TYPE@[9; 11)\n       L_PAREN@[9; 10) \"(\"\n       R_PAREN@[10; 11) \")\"\n-    SEMI@[11; 12) \";\"\n+    SEMICOLON@[11; 12) \";\"\n   WHITESPACE@[12; 14) \"\\n\\n\"\n   FN_DEF@[14; 48)\n     FN_KW@[14; 16) \"fn\"\n@@ -35,7 +35,7 @@ SOURCE_FILE@[0; 49)\n           PATH_TYPE@[37; 40)\n             PATH@[37; 40)\n               PATH_SEGMENT@[37; 40)\n-                COLONCOLON@[37; 39) \"::\"\n+                COLON2@[37; 39) \"::\"\n                 NAME_REF@[39; 40)\n                   IDENT@[39; 40) \"X\"\n           WHITESPACE@[40; 41) \" \"\n@@ -44,7 +44,7 @@ SOURCE_FILE@[0; 49)\n           TUPLE_EXPR@[43; 45)\n             L_PAREN@[43; 44) \"(\"\n             R_PAREN@[44; 45) \")\"\n-          SEMI@[45; 46) \";\"\n+          SEMICOLON@[45; 46) \";\"\n         WHITESPACE@[46; 47) \"\\n\"\n         R_CURLY@[47; 48) \"}\"\n   WHITESPACE@[48; 49) \"\\n\""}, {"sha": "2c07bde43636aaa59d3fe1de7410db3153a4cf2e", "filename": "crates/ra_syntax/test_data/parser/ok/0057_loop_in_call.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0057_loop_in_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0057_loop_in_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0057_loop_in_call.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -54,6 +54,6 @@ SOURCE_FILE@[0; 50)\n                     L_CURLY@[44; 45) \"{\"\n                     R_CURLY@[45; 46) \"}\"\n               R_PAREN@[46; 47) \")\"\n-          SEMI@[47; 48) \";\"\n+          SEMICOLON@[47; 48) \";\"\n         WHITESPACE@[48; 49) \"\\n\"\n         R_CURLY@[49; 50) \"}\""}, {"sha": "9de9efbade6daaa5d4eb334b47c98f7d2fbedc3d", "filename": "crates/ra_syntax/test_data/parser/ok/0058_unary_expr_precedence.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0058_unary_expr_precedence.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0058_unary_expr_precedence.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0058_unary_expr_precedence.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -31,7 +31,7 @@ SOURCE_FILE@[0; 79)\n             WHITESPACE@[24; 25) \" \"\n             LITERAL@[25; 26)\n               INT_NUMBER@[25; 26) \"3\"\n-          SEMI@[26; 27) \";\"\n+          SEMICOLON@[26; 27) \";\"\n         WHITESPACE@[27; 32) \"\\n    \"\n         EXPR_STMT@[32; 43)\n           CAST_EXPR@[32; 42)\n@@ -49,7 +49,7 @@ SOURCE_FILE@[0; 79)\n                 PATH_SEGMENT@[39; 42)\n                   NAME_REF@[39; 42)\n                     IDENT@[39; 42) \"u64\"\n-          SEMI@[42; 43) \";\"\n+          SEMICOLON@[42; 43) \";\"\n         WHITESPACE@[43; 48) \"\\n    \"\n         EXPR_STMT@[48; 54)\n           PREFIX_EXPR@[48; 53)\n@@ -65,7 +65,7 @@ SOURCE_FILE@[0; 79)\n                 LITERAL@[51; 52)\n                   INT_NUMBER@[51; 52) \"1\"\n                 R_PAREN@[52; 53) \")\"\n-          SEMI@[53; 54) \";\"\n+          SEMICOLON@[53; 54) \";\"\n         WHITESPACE@[54; 59) \"\\n    \"\n         EXPR_STMT@[59; 65)\n           REF_EXPR@[59; 64)\n@@ -80,18 +80,18 @@ SOURCE_FILE@[0; 79)\n               LITERAL@[62; 63)\n                 INT_NUMBER@[62; 63) \"1\"\n               R_BRACK@[63; 64) \"]\"\n-          SEMI@[64; 65) \";\"\n+          SEMICOLON@[64; 65) \";\"\n         WHITESPACE@[65; 70) \"\\n    \"\n         EXPR_STMT@[70; 76)\n           RANGE_EXPR@[70; 75)\n             PREFIX_EXPR@[70; 72)\n               MINUS@[70; 71) \"-\"\n               LITERAL@[71; 72)\n                 INT_NUMBER@[71; 72) \"1\"\n-            DOTDOT@[72; 74) \"..\"\n+            DOT2@[72; 74) \"..\"\n             LITERAL@[74; 75)\n               INT_NUMBER@[74; 75) \"2\"\n-          SEMI@[75; 76) \";\"\n+          SEMICOLON@[75; 76) \";\"\n         WHITESPACE@[76; 77) \"\\n\"\n         R_CURLY@[77; 78) \"}\"\n   WHITESPACE@[78; 79) \"\\n\""}, {"sha": "101478ce125a76f5671781e7d1bb2abc62ce2e9b", "filename": "crates/ra_syntax/test_data/parser/ok/0059_loops_in_parens.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0059_loops_in_parens.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -47,7 +47,7 @@ SOURCE_FILE@[0; 105)\n                     L_CURLY@[46; 47) \"{\"\n                     R_CURLY@[47; 48) \"}\"\n               R_PAREN@[48; 49) \")\"\n-          SEMI@[49; 50) \";\"\n+          SEMICOLON@[49; 50) \";\"\n         WHITESPACE@[50; 55) \"\\n    \"\n         EXPR_STMT@[55; 77)\n           CALL_EXPR@[55; 76)\n@@ -68,11 +68,11 @@ SOURCE_FILE@[0; 105)\n                     EXPR_STMT@[67; 73)\n                       BREAK_EXPR@[67; 72)\n                         BREAK_KW@[67; 72) \"break\"\n-                      SEMI@[72; 73) \";\"\n+                      SEMICOLON@[72; 73) \";\"\n                     WHITESPACE@[73; 74) \" \"\n                     R_CURLY@[74; 75) \"}\"\n               R_PAREN@[75; 76) \")\"\n-          SEMI@[76; 77) \";\"\n+          SEMICOLON@[76; 77) \";\"\n         WHITESPACE@[77; 82) \"\\n    \"\n         EXPR_STMT@[82; 102)\n           CALL_EXPR@[82; 101)\n@@ -95,7 +95,7 @@ SOURCE_FILE@[0; 105)\n                     L_CURLY@[98; 99) \"{\"\n                     R_CURLY@[99; 100) \"}\"\n               R_PAREN@[100; 101) \")\"\n-          SEMI@[101; 102) \";\"\n+          SEMICOLON@[101; 102) \";\"\n         WHITESPACE@[102; 103) \"\\n\"\n         R_CURLY@[103; 104) \"}\"\n   WHITESPACE@[104; 105) \"\\n\""}, {"sha": "6bff5750512c6e2d141510ea0286c157f3415fb0", "filename": "crates/ra_syntax/test_data/parser/ok/0060_as_range.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -26,8 +26,8 @@ SOURCE_FILE@[0; 56)\n                     NAME_REF@[21; 26)\n                       IDENT@[21; 26) \"usize\"\n             WHITESPACE@[26; 27) \" \"\n-            DOTDOT@[27; 29) \"..\"\n-          SEMI@[29; 30) \";\"\n+            DOT2@[27; 29) \"..\"\n+          SEMICOLON@[29; 30) \";\"\n         WHITESPACE@[30; 35) \"\\n    \"\n         EXPR_STMT@[35; 53)\n           RANGE_EXPR@[35; 52)\n@@ -49,8 +49,8 @@ SOURCE_FILE@[0; 56)\n                       NAME_REF@[44; 49)\n                         IDENT@[44; 49) \"usize\"\n             WHITESPACE@[49; 50) \" \"\n-            DOTDOT@[50; 52) \"..\"\n-          SEMI@[52; 53) \";\"\n+            DOT2@[50; 52) \"..\"\n+          SEMICOLON@[52; 53) \";\"\n         WHITESPACE@[53; 54) \"\\n\"\n         R_CURLY@[54; 55) \"}\"\n   WHITESPACE@[55; 56) \"\\n\""}, {"sha": "be6774199f1f6dca312e8bc607ec93b25aec443b", "filename": "crates/ra_syntax/test_data/parser/ok/0061_match_full_range.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@[0; 35)\n           MATCH_KW@[16; 21) \"match\"\n           WHITESPACE@[21; 22) \" \"\n           RANGE_EXPR@[22; 24)\n-            DOTDOT@[22; 24) \"..\"\n+            DOT2@[22; 24) \"..\"\n           WHITESPACE@[24; 25) \" \"\n           MATCH_ARM_LIST@[25; 32)\n             L_CURLY@[25; 26) \"{\""}, {"sha": "f89d7c0d9c6836fb8040584884a4917317644db2", "filename": "crates/ra_syntax/test_data/parser/ok/0062_macro_2.0.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0062_macro_2.0.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0062_macro_2.0.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0062_macro_2.0.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -30,7 +30,7 @@ SOURCE_FILE@[0; 349)\n         L_CURLY@[42; 43) \"{\"\n         WHITESPACE@[43; 48) \"\\n    \"\n         IDENT@[48; 51) \"vec\"\n-        EXCL@[51; 52) \"!\"\n+        BANG@[51; 52) \"!\"\n         TOKEN_TREE@[52; 91)\n           L_BRACK@[52; 53) \"[\"\n           WHITESPACE@[53; 62) \"\\n        \"\n@@ -129,15 +129,15 @@ SOURCE_FILE@[0; 349)\n               L_CURLY@[204; 205) \"{\"\n               WHITESPACE@[205; 214) \"\\n        \"\n               IDENT@[214; 223) \"assert_eq\"\n-              EXCL@[223; 224) \"!\"\n+              BANG@[223; 224) \"!\"\n               TOKEN_TREE@[224; 339)\n                 L_PAREN@[224; 225) \"(\"\n                 WHITESPACE@[225; 238) \"\\n            \"\n                 IDENT@[238; 253) \"merge_use_trees\"\n                 TOKEN_TREE@[253; 284)\n                   L_PAREN@[253; 254) \"(\"\n                   IDENT@[254; 269) \"parse_use_trees\"\n-                  EXCL@[269; 270) \"!\"\n+                  BANG@[269; 270) \"!\"\n                   TOKEN_TREE@[270; 283)\n                     L_PAREN@[270; 271) \"(\"\n                     DOLLAR@[271; 272) \"$\"\n@@ -153,7 +153,7 @@ SOURCE_FILE@[0; 349)\n                 COMMA@[284; 285) \",\"\n                 WHITESPACE@[285; 298) \"\\n            \"\n                 IDENT@[298; 313) \"parse_use_trees\"\n-                EXCL@[313; 314) \"!\"\n+                BANG@[313; 314) \"!\"\n                 TOKEN_TREE@[314; 328)\n                   L_PAREN@[314; 315) \"(\"\n                   DOLLAR@[315; 316) \"$\"\n@@ -168,7 +168,7 @@ SOURCE_FILE@[0; 349)\n                 COMMA@[328; 329) \",\"\n                 WHITESPACE@[329; 338) \"\\n        \"\n                 R_PAREN@[338; 339) \")\"\n-              SEMI@[339; 340) \";\"\n+              SEMICOLON@[339; 340) \";\"\n               WHITESPACE@[340; 345) \"\\n    \"\n               R_CURLY@[345; 346) \"}\"\n         WHITESPACE@[346; 347) \"\\n\""}, {"sha": "9b5954ebd27273bbbc39e873a376edc8a36b4a55", "filename": "crates/ra_syntax/test_data/parser/ok/0063_trait_fn_patterns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -190,7 +190,7 @@ SOURCE_FILE@[0; 170)\n                   NAME_REF@[162; 165)\n                     IDENT@[162; 165) \"i32\"\n           R_PAREN@[165; 166) \")\"\n-        SEMI@[166; 167) \";\"\n+        SEMICOLON@[166; 167) \";\"\n       WHITESPACE@[167; 168) \"\\n\"\n       R_CURLY@[168; 169) \"}\"\n   WHITESPACE@[169; 170) \"\\n\""}, {"sha": "17b08197b602b0c3c0b0c79847713268595deb9e", "filename": "crates/ra_syntax/test_data/parser/ok/0063_variadic_fun.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_variadic_fun.rast", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_variadic_fun.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_variadic_fun.rast?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -32,10 +32,10 @@ SOURCE_FILE@[0; 126)\n           COMMA@[32; 33) \",\"\n           WHITESPACE@[33; 34) \" \"\n           PARAM@[34; 37)\n-            DOTDOTDOT@[34; 37) \"...\"\n+            DOT3@[34; 37) \"...\"\n           COMMA@[37; 38) \",\"\n           R_PAREN@[38; 39) \")\"\n-        SEMI@[39; 40) \";\"\n+        SEMICOLON@[39; 40) \";\"\n       WHITESPACE@[40; 45) \"\\n    \"\n       FN_DEF@[45; 70)\n         FN_KW@[45; 47) \"fn\"\n@@ -65,9 +65,9 @@ SOURCE_FILE@[0; 126)\n               UNDERSCORE@[62; 63) \"_\"\n             COLON@[63; 64) \":\"\n             WHITESPACE@[64; 65) \" \"\n-            DOTDOTDOT@[65; 68) \"...\"\n+            DOT3@[65; 68) \"...\"\n           R_PAREN@[68; 69) \")\"\n-        SEMI@[69; 70) \";\"\n+        SEMICOLON@[69; 70) \";\"\n       WHITESPACE@[70; 75) \"\\n    \"\n       FN_DEF@[75; 123)\n         FN_KW@[75; 77) \"fn\"\n@@ -124,10 +124,10 @@ SOURCE_FILE@[0; 126)\n               R_BRACK@[114; 115) \"]\"\n             COLON@[115; 116) \":\"\n             WHITESPACE@[116; 117) \" \"\n-            DOTDOTDOT@[117; 120) \"...\"\n+            DOT3@[117; 120) \"...\"\n           COMMA@[120; 121) \",\"\n           R_PAREN@[121; 122) \")\"\n-        SEMI@[122; 123) \";\"\n+        SEMICOLON@[122; 123) \";\"\n       WHITESPACE@[123; 124) \"\\n\"\n       R_CURLY@[124; 125) \"}\"\n   WHITESPACE@[125; 126) \"\\n\""}, {"sha": "5248e026c5200e4613de3d5affaffff7c228d678", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -57,7 +57,7 @@ pub enum Leaf {\n }\n impl_froms!(Leaf: Literal, Punct, Ident);\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]\n+#[derive(Clone, PartialEq, Eq, Hash, Default)]\n pub struct Subtree {\n     pub delimiter: Option<Delimiter>,\n     pub token_trees: Vec<TokenTree>,\n@@ -101,6 +101,61 @@ pub struct Ident {\n     pub id: TokenId,\n }\n \n+fn print_debug_subtree(f: &mut fmt::Formatter<'_>, subtree: &Subtree, level: usize) -> fmt::Result {\n+    let align = std::iter::repeat(\"  \").take(level).collect::<String>();\n+\n+    let aux = match subtree.delimiter.map(|it| (it.kind, it.id.0)) {\n+        None => \"$\".to_string(),\n+        Some((DelimiterKind::Parenthesis, id)) => format!(\"() {}\", id),\n+        Some((DelimiterKind::Brace, id)) => format!(\"{{}} {}\", id),\n+        Some((DelimiterKind::Bracket, id)) => format!(\"[] {}\", id),\n+    };\n+\n+    if subtree.token_trees.is_empty() {\n+        write!(f, \"{}SUBTREE {}\", align, aux)?;\n+    } else {\n+        writeln!(f, \"{}SUBTREE {}\", align, aux)?;\n+        for (idx, child) in subtree.token_trees.iter().enumerate() {\n+            print_debug_token(f, child, level + 1)?;\n+            if idx != subtree.token_trees.len() - 1 {\n+                writeln!(f, \"\")?;\n+            }\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+fn print_debug_token(f: &mut fmt::Formatter<'_>, tkn: &TokenTree, level: usize) -> fmt::Result {\n+    let align = std::iter::repeat(\"  \").take(level).collect::<String>();\n+\n+    match tkn {\n+        TokenTree::Leaf(leaf) => match leaf {\n+            Leaf::Literal(lit) => write!(f, \"{}LITERAL {} {}\", align, lit.text, lit.id.0)?,\n+            Leaf::Punct(punct) => write!(\n+                f,\n+                \"{}PUNCH   {} [{}] {}\",\n+                align,\n+                punct.char,\n+                if punct.spacing == Spacing::Alone { \"alone\" } else { \"joint\" },\n+                punct.id.0\n+            )?,\n+            Leaf::Ident(ident) => write!(f, \"{}IDENT   {} {}\", align, ident.text, ident.id.0)?,\n+        },\n+        TokenTree::Subtree(subtree) => {\n+            print_debug_subtree(f, subtree, level)?;\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+impl Debug for Subtree {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        print_debug_subtree(f, self, 0)\n+    }\n+}\n+\n impl fmt::Display for TokenTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {"}, {"sha": "e9ee0b888f45cff0a01e42b2418d9c878de1ec70", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -163,10 +163,7 @@ pub fn analysis_stats(\n                 if let Ok(src) = src {\n                     let original_file = src.file_id.original_file(db);\n                     let line_index = host.analysis().file_line_index(original_file).unwrap();\n-                    let text_range = src.value.either(\n-                        |it| it.syntax_node_ptr().range(),\n-                        |it| it.syntax_node_ptr().range(),\n-                    );\n+                    let text_range = src.value.syntax_node_ptr().range();\n                     let (start, end) = (\n                         line_index.line_col(text_range.start()),\n                         line_index.line_col(text_range.end()),\n@@ -192,12 +189,7 @@ pub fn analysis_stats(\n                         // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n                         // But also, we should just turn the type mismatches into diagnostics and provide these\n                         let root = db.parse_or_expand(src.file_id).unwrap();\n-                        let node = src.map(|e| {\n-                            e.either(\n-                                |p| p.to_node(&root).syntax().clone(),\n-                                |p| p.to_node(&root).syntax().clone(),\n-                            )\n-                        });\n+                        let node = src.map(|e| e.to_node(&root).syntax().clone());\n                         let original_range = original_range(db, node.as_ref());\n                         let path = db.file_relative_path(original_range.file_id);\n                         let line_index ="}, {"sha": "43062ea105b01740501c70bed28704d78fd50b3d", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -152,7 +152,9 @@ pub(crate) fn load(\n         &extern_source_roots,\n         proc_macro_client,\n         &mut |path: &Path| {\n-            let vfs_file = vfs.load(path);\n+            // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n+            let path = path.canonicalize().ok()?;\n+            let vfs_file = vfs.load(&path);\n             log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n             vfs_file.map(vfs_file_to_id)\n         },"}, {"sha": "6c42e1d760df4ce35d99ff01f4b6a59fd2ce0639", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -139,7 +139,9 @@ impl WorldState {\n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n         let mut load = |path: &std::path::Path| {\n-            let vfs_file = vfs.load(path);\n+            // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n+            let path = path.canonicalize().ok()?;\n+            let vfs_file = vfs.load(&path);\n             vfs_file.map(|f| FileId(f.0))\n         };\n "}, {"sha": "01cdf452c22bf1cb0d9433a459fae060a835a8a7", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -1,6 +1,6 @@\n //! Missing batteries for standard libraries.\n \n-use std::{cell::Cell, fmt};\n+use std::{cell::Cell, fmt, time::Instant};\n \n #[inline(always)]\n pub fn is_ci() -> bool {\n@@ -88,3 +88,17 @@ where\n         Ok(())\n     }\n }\n+pub fn timeit(label: &'static str) -> impl Drop {\n+    struct Guard {\n+        label: &'static str,\n+        start: Instant,\n+    }\n+\n+    impl Drop for Guard {\n+        fn drop(&mut self) {\n+            eprintln!(\"{}: {:?}\", self.label, self.start.elapsed())\n+        }\n+    }\n+\n+    Guard { label, start: Instant::now() }\n+}"}, {"sha": "1d95104237244d2dbfcc763605a241e95ef1fe2f", "filename": "docs/user/assists.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -175,7 +175,7 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { unimplemented!() }\n+    fn foo(&self) -> u32 { todo!() }\n \n }\n ```\n@@ -582,6 +582,21 @@ impl Walrus {\n }\n ```\n \n+## `reorder_fields`\n+\n+Reorder the fields of record literals and record patterns in the same order as in\n+the definition.\n+\n+```rust\n+// BEFORE\n+struct Foo {foo: i32, bar: i32};\n+const test: Foo = \u2503Foo {bar: 0, foo: 1}\n+\n+// AFTER\n+struct Foo {foo: i32, bar: i32};\n+const test: Foo = Foo {foo: 1, bar: 0}\n+```\n+\n ## `replace_if_let_with_match`\n \n Replaces `if let` with an else branch with a `match` expression."}, {"sha": "35a05131c88773050f97bf91f1f4d75ffcf8492c", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -66,23 +66,44 @@ export class Config {\n         return vscode.workspace.getConfiguration(this.rootSection);\n     }\n \n-    get serverPath() { return this.cfg.get<null | string>(\"serverPath\")!; }\n-    get channel() { return this.cfg.get<UpdatesChannel>(\"updates.channel\")!; }\n-    get askBeforeDownload() { return this.cfg.get<boolean>(\"updates.askBeforeDownload\")!; }\n-    get traceExtension() { return this.cfg.get<boolean>(\"trace.extension\")!; }\n+    /**\n+     * Beware that postfix `!` operator erases both `null` and `undefined`.\n+     * This is why the following doesn't work as expected:\n+     *\n+     * ```ts\n+     * const nullableNum = vscode\n+     *  .workspace\n+     *  .getConfiguration\n+     *  .getConfiguration(\"rust-analyer\")\n+     *  .get<number | null>(path)!;\n+     *\n+     * // What happens is that type of `nullableNum` is `number` but not `null | number`:\n+     * const fullFledgedNum: number = nullableNum;\n+     * ```\n+     * So this getter handles this quirk by not requiring the caller to use postfix `!`\n+     */\n+    private get<T>(path: string): T {\n+        return this.cfg.get<T>(path)!;\n+    }\n+\n+    get serverPath() { return this.get<null | string>(\"serverPath\"); }\n+    get channel() { return this.get<UpdatesChannel>(\"updates.channel\"); }\n+    get askBeforeDownload() { return this.get<boolean>(\"updates.askBeforeDownload\"); }\n+    get traceExtension() { return this.get<boolean>(\"trace.extension\"); }\n+\n \n     get inlayHints() {\n         return {\n-            typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n-            parameterHints: this.cfg.get<boolean>(\"inlayHints.parameterHints\")!,\n-            chainingHints: this.cfg.get<boolean>(\"inlayHints.chainingHints\")!,\n-            maxLength: this.cfg.get<null | number>(\"inlayHints.maxLength\")!,\n+            typeHints: this.get<boolean>(\"inlayHints.typeHints\"),\n+            parameterHints: this.get<boolean>(\"inlayHints.parameterHints\"),\n+            chainingHints: this.get<boolean>(\"inlayHints.chainingHints\"),\n+            maxLength: this.get<null | number>(\"inlayHints.maxLength\"),\n         };\n     }\n \n     get checkOnSave() {\n         return {\n-            command: this.cfg.get<string>(\"checkOnSave.command\")!,\n+            command: this.get<string>(\"checkOnSave.command\"),\n         };\n     }\n }"}, {"sha": "da74f03d2d75eae48112747d7fc3c609da90f873", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -229,13 +229,13 @@ interface InlaysDecorations {\n }\n \n interface RustSourceFile {\n-    /*\n-    * Source of the token to cancel in-flight inlay hints request if any.\n-    */\n+    /**\n+     * Source of the token to cancel in-flight inlay hints request if any.\n+     */\n     inlaysRequest: null | vscode.CancellationTokenSource;\n     /**\n-    * Last applied decorations.\n-    */\n+     * Last applied decorations.\n+     */\n     cachedDecorations: null | InlaysDecorations;\n \n     document: RustDocument;"}, {"sha": "69cba91684418bae877b227ea6fe4dc472da2076", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 183, "deletions": 241, "changes": 424, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -11,7 +11,7 @@ pub(crate) struct KindsSrc<'a> {\n \n pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n     punct: &[\n-        (\";\", \"SEMI\"),\n+        (\";\", \"SEMICOLON\"),\n         (\",\", \"COMMA\"),\n         (\"(\", \"L_PAREN\"),\n         (\")\", \"R_PAREN\"),\n@@ -35,15 +35,15 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         (\"%\", \"PERCENT\"),\n         (\"_\", \"UNDERSCORE\"),\n         (\".\", \"DOT\"),\n-        (\"..\", \"DOTDOT\"),\n-        (\"...\", \"DOTDOTDOT\"),\n-        (\"..=\", \"DOTDOTEQ\"),\n+        (\"..\", \"DOT2\"),\n+        (\"...\", \"DOT3\"),\n+        (\"..=\", \"DOT2EQ\"),\n         (\":\", \"COLON\"),\n-        (\"::\", \"COLONCOLON\"),\n+        (\"::\", \"COLON2\"),\n         (\"=\", \"EQ\"),\n-        (\"==\", \"EQEQ\"),\n+        (\"==\", \"EQ2\"),\n         (\"=>\", \"FAT_ARROW\"),\n-        (\"!\", \"EXCL\"),\n+        (\"!\", \"BANG\"),\n         (\"!=\", \"NEQ\"),\n         (\"-\", \"MINUS\"),\n         (\"->\", \"THIN_ARROW\"),\n@@ -57,8 +57,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         (\"/=\", \"SLASHEQ\"),\n         (\"*=\", \"STAREQ\"),\n         (\"%=\", \"PERCENTEQ\"),\n-        (\"&&\", \"AMPAMP\"),\n-        (\"||\", \"PIPEPIPE\"),\n+        (\"&&\", \"AMP2\"),\n+        (\"||\", \"PIPE2\"),\n         (\"<<\", \"SHL\"),\n         (\">>\", \"SHR\"),\n         (\"<<=\", \"SHLEQ\"),\n@@ -225,21 +225,26 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n };\n \n pub(crate) struct AstSrc<'a> {\n+    pub(crate) tokens: &'a [&'a str],\n     pub(crate) nodes: &'a [AstNodeSrc<'a>],\n     pub(crate) enums: &'a [AstEnumSrc<'a>],\n-    pub(crate) token_enums: &'a [AstEnumSrc<'a>],\n }\n \n pub(crate) struct AstNodeSrc<'a> {\n     pub(crate) name: &'a str,\n     pub(crate) traits: &'a [&'a str],\n-    pub(crate) fields: &'a [(&'a str, FieldSrc<&'a str>)],\n+    pub(crate) fields: &'a [Field<'a>],\n+}\n+\n+pub(crate) enum Field<'a> {\n+    Token(&'a str),\n+    Node { name: &'a str, src: FieldSrc<'a> },\n }\n \n-pub(crate) enum FieldSrc<T> {\n+pub(crate) enum FieldSrc<'a> {\n     Shorthand,\n-    Optional(T),\n-    Many(T),\n+    Optional(&'a str),\n+    Many(&'a str),\n }\n \n pub(crate) struct AstEnumSrc<'a> {\n@@ -251,31 +256,34 @@ pub(crate) struct AstEnumSrc<'a> {\n macro_rules! ast_nodes {\n     ($(\n         struct $name:ident$(: $($trait:ident),*)? {\n-            $($field_name:ident $(: $ty:tt)?),*$(,)?\n+            $($field_name:ident $(![$token:tt])? $(: $ty:tt)?),*$(,)?\n         }\n     )*) => {\n         [$(\n             AstNodeSrc {\n                 name: stringify!($name),\n                 traits: &[$($(stringify!($trait)),*)?],\n-                fields: &[$(\n-                    (stringify!($field_name), field_ty!($field_name $($ty)?))\n-                ),*],\n+                fields: &[\n+                    $(field!($(T![$token])? $field_name $($ty)?)),*\n+                ],\n \n             }\n         ),*]\n     };\n }\n \n-macro_rules! field_ty {\n+macro_rules! field {\n+    (T![$token:tt] T) => {\n+        Field::Token(stringify!($token))\n+    };\n     ($field_name:ident) => {\n-        FieldSrc::Shorthand\n+        Field::Node { name: stringify!($field_name), src: FieldSrc::Shorthand }\n     };\n     ($field_name:ident [$ty:ident]) => {\n-        FieldSrc::Many(stringify!($ty))\n+        Field::Node { name: stringify!($field_name), src: FieldSrc::Many(stringify!($ty)) }\n     };\n     ($field_name:ident $ty:ident) => {\n-        FieldSrc::Optional(stringify!($ty))\n+        Field::Node { name: stringify!($field_name), src: FieldSrc::Optional(stringify!($ty)) }\n     };\n }\n \n@@ -290,330 +298,331 @@ macro_rules! ast_enums {\n                 name: stringify!($name),\n                 traits: &[$($(stringify!($trait)),*)?],\n                 variants: &[$(stringify!($variant)),*],\n-\n             }\n         ),*]\n     };\n }\n \n pub(crate) const AST_SRC: AstSrc = AstSrc {\n+    tokens: &[\"Whitespace\", \"Comment\", \"String\", \"RawString\"],\n     nodes: &ast_nodes! {\n-        struct SourceFile: ModuleItemOwner, FnDefOwner, AttrsOwner {\n+        struct SourceFile: ModuleItemOwner, AttrsOwner {\n             modules: [Module],\n         }\n \n         struct FnDef: VisibilityOwner, NameOwner, TypeParamsOwner, DocCommentsOwner, AttrsOwner {\n             Abi,\n-            ConstKw,\n-            DefaultKw,\n-            AsyncKw,\n-            UnsafeKw,\n-            FnKw,\n+            T![const],\n+            T![default],\n+            T![async],\n+            T![unsafe],\n+            T![fn],\n             ParamList,\n             RetType,\n             body: BlockExpr,\n-            Semi\n+            T![;]\n         }\n \n-        struct RetType { ThinArrow, TypeRef }\n+        struct RetType { T![->], TypeRef }\n \n         struct StructDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner {\n-            StructKw,\n+            T![struct],\n             FieldDefList,\n-            Semi\n+            T![;]\n         }\n \n         struct UnionDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner {\n-            UnionKw,\n+            T![union],\n             RecordFieldDefList,\n         }\n \n-        struct RecordFieldDefList { LCurly, fields: [RecordFieldDef], RCurly }\n+        struct RecordFieldDefList { T!['{'], fields: [RecordFieldDef], T!['}'] }\n         struct RecordFieldDef: VisibilityOwner, NameOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner { }\n \n-        struct TupleFieldDefList { LParen, fields: [TupleFieldDef], RParen }\n+        struct TupleFieldDefList { T!['('], fields: [TupleFieldDef], T![')'] }\n         struct TupleFieldDef: VisibilityOwner, AttrsOwner {\n             TypeRef,\n         }\n \n         struct EnumDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner {\n-            EnumKw,\n+            T![enum],\n             variant_list: EnumVariantList,\n         }\n         struct EnumVariantList {\n-            LCurly,\n+            T!['{'],\n             variants: [EnumVariant],\n-            RCurly\n+            T!['}']\n         }\n         struct EnumVariant: VisibilityOwner, NameOwner, DocCommentsOwner, AttrsOwner {\n             FieldDefList,\n-            Eq,\n+            T![=],\n             Expr\n         }\n \n         struct TraitDef: VisibilityOwner, NameOwner, AttrsOwner, DocCommentsOwner, TypeParamsOwner, TypeBoundsOwner {\n-            UnsafeKw,\n-            AutoKw,\n-            TraitKw,\n+            T![unsafe],\n+            T![auto],\n+            T![trait],\n             ItemList,\n         }\n \n         struct Module: VisibilityOwner, NameOwner, AttrsOwner, DocCommentsOwner {\n-            ModKw,\n+            T![mod],\n             ItemList,\n-            Semi\n+            T![;]\n         }\n \n-        struct ItemList: FnDefOwner, ModuleItemOwner {\n-            LCurly,\n+        struct ItemList: ModuleItemOwner {\n+            T!['{'],\n             impl_items: [ImplItem],\n-            RCurly\n+            T!['}']\n         }\n \n         struct ConstDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner {\n-            DefaultKw,\n-            ConstKw,\n-            Eq,\n+            T![default],\n+            T![const],\n+            T![=],\n             body: Expr,\n-            Semi\n+            T![;]\n         }\n \n         struct StaticDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner {\n-            StaticKw,\n-            MutKw,\n-            Eq,\n+            T![static],\n+            T![mut],\n+            T![=],\n             body: Expr,\n-            Semi\n+            T![;]\n         }\n \n         struct TypeAliasDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeBoundsOwner {\n-            DefaultKw,\n-            TypeKw,\n-            Eq,\n+            T![default],\n+            T![type],\n+            T![=],\n             TypeRef,\n-            Semi\n+            T![;]\n         }\n \n         struct ImplDef: TypeParamsOwner, AttrsOwner {\n-            DefaultKw,\n-            ConstKw,\n-            UnsafeKw,\n-            ImplKw,\n-            Excl,\n-            ForKw,\n+            T![default],\n+            T![const],\n+            T![unsafe],\n+            T![impl],\n+            T![!],\n+            T![for],\n             ItemList,\n         }\n \n-        struct ParenType { LParen, TypeRef, RParen }\n-        struct TupleType { LParen, fields: [TypeRef], RParen }\n-        struct NeverType { Excl }\n+        struct ParenType { T!['('], TypeRef, T![')'] }\n+        struct TupleType { T!['('], fields: [TypeRef], T![')'] }\n+        struct NeverType { T![!] }\n         struct PathType { Path }\n-        struct PointerType { Star, ConstKw, TypeRef }\n-        struct ArrayType { LBrack, TypeRef, Semi, Expr, RBrack }\n-        struct SliceType { LBrack, TypeRef, RBrack }\n-        struct ReferenceType { Amp, Lifetime, MutKw, TypeRef }\n-        struct PlaceholderType { Underscore }\n-        struct FnPointerType { Abi, UnsafeKw, FnKw, ParamList, RetType }\n-        struct ForType { ForKw, TypeParamList, TypeRef }\n-        struct ImplTraitType: TypeBoundsOwner { ImplKw }\n-        struct DynTraitType: TypeBoundsOwner { DynKw }\n-\n-        struct TupleExpr: AttrsOwner { LParen, exprs: [Expr], RParen }\n-        struct ArrayExpr: AttrsOwner { LBrack, exprs: [Expr], Semi, RBrack }\n-        struct ParenExpr: AttrsOwner { LParen, Expr, RParen }\n+        struct PointerType { T![*], T![const], T![mut], TypeRef }\n+        struct ArrayType { T!['['], TypeRef, T![;], Expr, T![']'] }\n+        struct SliceType { T!['['], TypeRef, T![']'] }\n+        struct ReferenceType { T![&], T![lifetime], T![mut], TypeRef }\n+        struct PlaceholderType { T![_] }\n+        struct FnPointerType { Abi, T![unsafe], T![fn], ParamList, RetType }\n+        struct ForType { T![for], TypeParamList, TypeRef }\n+        struct ImplTraitType: TypeBoundsOwner { T![impl] }\n+        struct DynTraitType: TypeBoundsOwner { T![dyn] }\n+\n+        struct TupleExpr: AttrsOwner { T!['('], exprs: [Expr], T![')'] }\n+        struct ArrayExpr: AttrsOwner { T!['['], exprs: [Expr], T![;], T![']'] }\n+        struct ParenExpr: AttrsOwner { T!['('], Expr, T![')'] }\n         struct PathExpr  { Path }\n         struct LambdaExpr: AttrsOwner {\n-            StaticKw,\n-            AsyncKw,\n-            MoveKw,\n+            T![static],\n+            T![async],\n+            T![move],\n             ParamList,\n             RetType,\n             body: Expr,\n         }\n-        struct IfExpr: AttrsOwner { IfKw, Condition }\n-        struct LoopExpr: AttrsOwner, LoopBodyOwner { LoopKw }\n-        struct TryBlockExpr: AttrsOwner { TryKw, body: BlockExpr }\n+        struct IfExpr: AttrsOwner { T![if], Condition }\n+        struct LoopExpr: AttrsOwner, LoopBodyOwner { T![loop] }\n+        struct TryBlockExpr: AttrsOwner { T![try], body: BlockExpr }\n         struct ForExpr: AttrsOwner, LoopBodyOwner {\n-            ForKw,\n+            T![for],\n             Pat,\n-            InKw,\n+            T![in],\n             iterable: Expr,\n         }\n-        struct WhileExpr: AttrsOwner, LoopBodyOwner { WhileKw, Condition }\n-        struct ContinueExpr: AttrsOwner { ContinueKw, Lifetime }\n-        struct BreakExpr: AttrsOwner { BreakKw, Lifetime, Expr }\n-        struct Label { Lifetime }\n-        struct BlockExpr: AttrsOwner { Label, UnsafeKw, Block  }\n+        struct WhileExpr: AttrsOwner, LoopBodyOwner { T![while], Condition }\n+        struct ContinueExpr: AttrsOwner { T![continue], T![lifetime] }\n+        struct BreakExpr: AttrsOwner { T![break], T![lifetime], Expr }\n+        struct Label { T![lifetime] }\n+        struct BlockExpr: AttrsOwner { Label, T![unsafe], Block  }\n         struct ReturnExpr: AttrsOwner { Expr }\n         struct CallExpr: ArgListOwner { Expr }\n         struct MethodCallExpr: AttrsOwner, ArgListOwner {\n-            Expr, Dot, NameRef, TypeArgList,\n-        }\n-        struct IndexExpr: AttrsOwner { LBrack, RBrack }\n-        struct FieldExpr: AttrsOwner { Expr, Dot, NameRef }\n-        struct AwaitExpr: AttrsOwner { Expr, Dot, AwaitKw }\n-        struct TryExpr: AttrsOwner { TryKw, Expr }\n-        struct CastExpr: AttrsOwner { Expr, AsKw, TypeRef }\n-        struct RefExpr: AttrsOwner { Amp, RawKw, MutKw, Expr }\n-        struct PrefixExpr: AttrsOwner { PrefixOp, Expr }\n-        struct BoxExpr: AttrsOwner { BoxKw, Expr }\n-        struct RangeExpr: AttrsOwner { RangeOp }\n-        struct BinExpr: AttrsOwner { BinOp }\n-        struct Literal { LiteralToken }\n-\n-        struct MatchExpr: AttrsOwner { MatchKw, Expr, MatchArmList }\n-        struct MatchArmList: AttrsOwner { LCurly, arms: [MatchArm], RCurly }\n+            Expr, T![.], NameRef, TypeArgList,\n+        }\n+        struct IndexExpr: AttrsOwner { T!['['], T![']'] }\n+        struct FieldExpr: AttrsOwner { Expr, T![.], NameRef }\n+        struct AwaitExpr: AttrsOwner { Expr, T![.], T![await] }\n+        struct TryExpr: AttrsOwner { T![try], Expr }\n+        struct CastExpr: AttrsOwner { Expr, T![as], TypeRef }\n+        struct RefExpr: AttrsOwner { T![&], T![raw], T![mut], Expr }\n+        struct PrefixExpr: AttrsOwner { /*PrefixOp,*/ Expr }\n+        struct BoxExpr: AttrsOwner { T![box], Expr }\n+        struct RangeExpr: AttrsOwner { /*RangeOp*/ }\n+        struct BinExpr: AttrsOwner { /*BinOp*/ }\n+        struct Literal { /*LiteralToken*/ }\n+\n+        struct MatchExpr: AttrsOwner { T![match], Expr, MatchArmList }\n+        struct MatchArmList: AttrsOwner { T!['{'], arms: [MatchArm], T!['}'] }\n         struct MatchArm: AttrsOwner {\n             pat: Pat,\n             guard: MatchGuard,\n-            FatArrow,\n+            T![=>],\n             Expr,\n         }\n-        struct MatchGuard { IfKw, Expr }\n+        struct MatchGuard { T![if], Expr }\n \n         struct RecordLit { Path, RecordFieldList}\n         struct RecordFieldList {\n-            LCurly,\n+            T!['{'],\n             fields: [RecordField],\n-            Dotdot,\n+            T![..],\n             spread: Expr,\n-            RCurly\n+            T!['}']\n         }\n-        struct RecordField: AttrsOwner { NameRef, Colon, Expr }\n+        struct RecordField: AttrsOwner { NameRef, T![:], Expr }\n \n         struct OrPat { pats: [Pat] }\n-        struct ParenPat { LParen, Pat, RParen }\n-        struct RefPat { Amp, MutKw, Pat }\n-        struct BoxPat { BoxKw, Pat }\n-        struct BindPat: AttrsOwner, NameOwner { RefKw, MutKw, Pat }\n-        struct PlaceholderPat { Underscore }\n-        struct DotDotPat { Dotdot }\n+        struct ParenPat { T!['('], Pat, T![')'] }\n+        struct RefPat { T![&], T![mut], Pat }\n+        struct BoxPat { T![box], Pat }\n+        struct BindPat: AttrsOwner, NameOwner { T![ref], T![mut], T![@], Pat }\n+        struct PlaceholderPat { T![_] }\n+        struct DotDotPat { T![..] }\n         struct PathPat { Path }\n-        struct SlicePat { LBrack, args: [Pat], RBrack }\n-        struct RangePat { RangeSeparator }\n+        struct SlicePat { T!['['], args: [Pat], T![']'] }\n+        struct RangePat { /*RangeSeparator*/ }\n         struct LiteralPat { Literal }\n         struct MacroPat { MacroCall }\n \n         struct RecordPat { RecordFieldPatList, Path }\n         struct RecordFieldPatList {\n-            LCurly,\n+            T!['{'],\n             pats: [RecordInnerPat],\n             record_field_pats: [RecordFieldPat],\n             bind_pats: [BindPat],\n-            Dotdot,\n-            RCurly\n+            T![..],\n+            T!['}']\n         }\n-        struct RecordFieldPat: AttrsOwner, NameOwner { Colon, Pat }\n+        struct RecordFieldPat: AttrsOwner, NameOwner { T![:], Pat }\n \n-        struct TupleStructPat { Path, LParen, args: [Pat], RParen }\n-        struct TuplePat { LParen, args: [Pat], RParen }\n+        struct TupleStructPat { Path, T!['('], args: [Pat], T![')'] }\n+        struct TuplePat { T!['('], args: [Pat], T![')'] }\n \n-        struct Visibility { PubKw, SuperKw, SelfKw, CrateKw }\n-        struct Name { Ident }\n-        struct NameRef { NameRefToken }\n+        struct Visibility { T![pub], T![super], T![self], T![crate] }\n+        struct Name { T![ident] }\n+        struct NameRef { /*NameRefToken*/ }\n \n         struct MacroCall: NameOwner, AttrsOwner,DocCommentsOwner {\n-            Path, Excl, TokenTree, Semi\n+            Path, T![!], TokenTree, T![;]\n         }\n-        struct Attr { Pound, Excl, LBrack, Path, Eq, input: AttrInput, RBrack }\n+        struct Attr { T![#], T![!], T!['['], Path, T![=], input: AttrInput, T![']'] }\n         struct TokenTree {}\n         struct TypeParamList {\n-            LAngle,\n+            T![<],\n             generic_params: [GenericParam],\n             type_params: [TypeParam],\n             lifetime_params: [LifetimeParam],\n             const_params: [ConstParam],\n-            RAngle\n+            T![>]\n         }\n         struct TypeParam: NameOwner, AttrsOwner, TypeBoundsOwner {\n-            Eq,\n+            T![=],\n             default_type: TypeRef,\n         }\n         struct ConstParam: NameOwner, AttrsOwner, TypeAscriptionOwner {\n-            Eq,\n+            T![=],\n             default_val: Expr,\n         }\n-        struct LifetimeParam: AttrsOwner { Lifetime}\n-        struct TypeBound { Lifetime, /* Question,  */ ConstKw, /* Question,  */ TypeRef}\n+        struct LifetimeParam: AttrsOwner { T![lifetime] }\n+        struct TypeBound { T![lifetime], /* Question,  */ T![const], /* Question,  */ TypeRef}\n         struct TypeBoundList { bounds: [TypeBound] }\n-        struct WherePred: TypeBoundsOwner { Lifetime, TypeRef }\n-        struct WhereClause { WhereKw, predicates: [WherePred] }\n-        struct Abi { String }\n-        struct ExprStmt: AttrsOwner { Expr, Semi }\n+        struct WherePred: TypeBoundsOwner { T![lifetime], TypeRef }\n+        struct WhereClause { T![where], predicates: [WherePred] }\n+        struct Abi { /*String*/ }\n+        struct ExprStmt: AttrsOwner { Expr, T![;] }\n         struct LetStmt: AttrsOwner, TypeAscriptionOwner {\n-            LetKw,\n+            T![let],\n             Pat,\n-            Eq,\n+            T![=],\n             initializer: Expr,\n+            T![;],\n         }\n-        struct Condition { LetKw, Pat, Eq, Expr }\n+        struct Condition { T![let], Pat, T![=], Expr }\n         struct Block: AttrsOwner, ModuleItemOwner {\n-            LCurly,\n+            T!['{'],\n             statements: [Stmt],\n             Expr,\n-            RCurly,\n+            T!['}'],\n         }\n         struct ParamList {\n-            LParen,\n+            T!['('],\n             SelfParam,\n             params: [Param],\n-            RParen\n+            T![')']\n         }\n-        struct SelfParam: TypeAscriptionOwner, AttrsOwner { Amp, Lifetime, SelfKw }\n+        struct SelfParam: TypeAscriptionOwner, AttrsOwner { T![&], T![mut], T![lifetime], T![self] }\n         struct Param: TypeAscriptionOwner, AttrsOwner {\n             Pat,\n-            Dotdotdot\n+            T![...]\n         }\n         struct UseItem: AttrsOwner, VisibilityOwner {\n-            UseKw,\n+            T![use],\n             UseTree,\n         }\n         struct UseTree {\n-            Path, Star, UseTreeList, Alias\n+            Path, T![*], UseTreeList, Alias\n         }\n-        struct Alias: NameOwner { AsKw }\n-        struct UseTreeList { LCurly, use_trees: [UseTree], RCurly }\n+        struct Alias: NameOwner { T![as] }\n+        struct UseTreeList { T!['{'], use_trees: [UseTree], T!['}'] }\n         struct ExternCrateItem: AttrsOwner, VisibilityOwner {\n-            ExternKw, CrateKw, NameRef, Alias,\n+            T![extern], T![crate], NameRef, Alias,\n         }\n         struct ArgList {\n-            LParen,\n+            T!['('],\n             args: [Expr],\n-            RParen\n+            T![')']\n         }\n         struct Path {\n             segment: PathSegment,\n             qualifier: Path,\n         }\n         struct PathSegment {\n-            Coloncolon, LAngle, NameRef, TypeArgList, ParamList, RetType, PathType, RAngle\n+            T![::], T![<], NameRef, TypeArgList, ParamList, RetType, PathType, T![>]\n         }\n         struct TypeArgList {\n-            Coloncolon,\n-            LAngle,\n+            T![::],\n+            T![<],\n             generic_args: [GenericArg],\n             type_args: [TypeArg],\n             lifetime_args: [LifetimeArg],\n             assoc_type_args: [AssocTypeArg],\n             const_args: [ConstArg],\n-            RAngle\n+            T![>]\n         }\n         struct TypeArg { TypeRef }\n-        struct AssocTypeArg : TypeBoundsOwner { NameRef, Eq, TypeRef }\n-        struct LifetimeArg { Lifetime }\n-        struct ConstArg { Literal, Eq, BlockExpr }\n+        struct AssocTypeArg : TypeBoundsOwner { NameRef, T![=], TypeRef }\n+        struct LifetimeArg { T![lifetime] }\n+        struct ConstArg { Literal, T![=], BlockExpr }\n \n-        struct MacroItems: ModuleItemOwner, FnDefOwner { }\n+        struct MacroItems: ModuleItemOwner{ }\n \n         struct MacroStmts {\n             statements: [Stmt],\n             Expr,\n         }\n \n-        struct ExternItemList: FnDefOwner, ModuleItemOwner {\n-            LCurly,\n+        struct ExternItemList: ModuleItemOwner {\n+            T!['{'],\n             extern_items: [ExternItem],\n-            RCurly\n+            T!['}']\n         }\n \n         struct ExternBlock {\n@@ -622,7 +631,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         struct MetaItem {\n-            Path, Eq, AttrInput, nested_meta_items: [MetaItem]\n+            Path, T![=], AttrInput, nested_meta_items: [MetaItem]\n         }\n \n         struct MacroDef {\n@@ -759,71 +768,4 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             TupleFieldDefList,\n         }\n     },\n-\n-    token_enums: &ast_enums! {\n-        enum LeftDelimiter { LParen, LBrack, LCurly }\n-        enum RightDelimiter { RParen, RBrack, RCurly }\n-        enum RangeSeparator { Dotdot, Dotdotdot, Dotdoteq}\n-\n-        enum BinOp {\n-            Pipepipe,\n-            Ampamp,\n-            Eqeq,\n-            Neq,\n-            Lteq,\n-            Gteq,\n-            LAngle,\n-            RAngle,\n-            Plus,\n-            Star,\n-            Minus,\n-            Slash,\n-            Percent,\n-            Shl,\n-            Shr,\n-            Caret,\n-            Pipe,\n-            Amp,\n-            Eq,\n-            Pluseq,\n-            Slasheq,\n-            Stareq,\n-            Percenteq,\n-            Shreq,\n-            Shleq,\n-            Minuseq,\n-            Pipeeq,\n-            Ampeq,\n-            Careteq,\n-        }\n-\n-        enum PrefixOp {\n-            Minus,\n-            Excl,\n-            Star\n-        }\n-\n-        enum RangeOp {\n-            Dotdot,\n-            Dotdoteq\n-        }\n-\n-        enum LiteralToken {\n-            IntNumber,\n-            FloatNumber,\n-            String,\n-            RawString,\n-            TrueKw,\n-            FalseKw,\n-            ByteString,\n-            RawByteString,\n-            Char,\n-            Byte\n-        }\n-\n-        enum NameRefToken {\n-            Ident,\n-            IntNumber\n-        }\n-    },\n };"}, {"sha": "ec1f6ad8a126d7ba3c5b95f76de55f33fe5b6c3b", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 105, "deletions": 164, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -3,16 +3,13 @@\n //! Specifically, it generates the `SyntaxKind` enum and a number of newtype\n //! wrappers around `SyntaxNode` which implement `ra_syntax::AstNode`.\n \n-use std::{\n-    borrow::Cow,\n-    collections::{BTreeSet, HashSet},\n-};\n+use std::collections::HashSet;\n \n use proc_macro2::{Punct, Spacing};\n use quote::{format_ident, quote};\n \n use crate::{\n-    ast_src::{AstSrc, FieldSrc, KindsSrc, AST_SRC, KINDS_SRC},\n+    ast_src::{AstSrc, Field, FieldSrc, KindsSrc, AST_SRC, KINDS_SRC},\n     codegen::{self, update, Mode},\n     project_root, Result,\n };\n@@ -22,58 +19,31 @@ pub fn generate_syntax(mode: Mode) -> Result<()> {\n     let syntax_kinds = generate_syntax_kinds(KINDS_SRC)?;\n     update(syntax_kinds_file.as_path(), &syntax_kinds, mode)?;\n \n+    let ast_tokens_file = project_root().join(codegen::AST_TOKENS);\n+    let contents = generate_tokens(AST_SRC)?;\n+    update(ast_tokens_file.as_path(), &contents, mode)?;\n+\n     let ast_nodes_file = project_root().join(codegen::AST_NODES);\n     let contents = generate_nodes(KINDS_SRC, AST_SRC)?;\n     update(ast_nodes_file.as_path(), &contents, mode)?;\n \n-    let ast_tokens_file = project_root().join(codegen::AST_TOKENS);\n-    let contents = generate_tokens(KINDS_SRC, AST_SRC)?;\n-    update(ast_tokens_file.as_path(), &contents, mode)?;\n-\n     Ok(())\n }\n \n-#[derive(Debug, Default, Clone)]\n-struct ElementKinds {\n-    kinds: BTreeSet<proc_macro2::Ident>,\n-    has_nodes: bool,\n-    has_tokens: bool,\n-}\n-\n-fn generate_tokens(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n-    let all_token_kinds: Vec<_> = kinds\n-        .punct\n-        .into_iter()\n-        .map(|(_, kind)| kind)\n-        .copied()\n-        .map(|x| x.into())\n-        .chain(\n-            kinds\n-                .keywords\n-                .into_iter()\n-                .chain(kinds.contextual_keywords.into_iter())\n-                .map(|name| Cow::Owned(format!(\"{}_KW\", to_upper_snake_case(&name)))),\n-        )\n-        .chain(kinds.literals.into_iter().copied().map(|x| x.into()))\n-        .chain(kinds.tokens.into_iter().copied().map(|x| x.into()))\n-        .collect();\n-\n-    let tokens = all_token_kinds.iter().map(|kind_str| {\n-        let kind_str = &**kind_str;\n-        let kind = format_ident!(\"{}\", kind_str);\n-        let name = format_ident!(\"{}\", to_pascal_case(kind_str));\n+fn generate_tokens(grammar: AstSrc<'_>) -> Result<String> {\n+    let tokens = grammar.tokens.iter().map(|token| {\n+        let name = format_ident!(\"{}\", token);\n+        let kind = format_ident!(\"{}\", to_upper_snake_case(token));\n         quote! {\n             #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n             pub struct #name {\n                 pub(crate) syntax: SyntaxToken,\n             }\n-\n             impl std::fmt::Display for #name {\n                 fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n                     std::fmt::Display::fmt(&self.syntax, f)\n                 }\n             }\n-\n             impl AstToken for #name {\n                 fn can_cast(kind: SyntaxKind) -> bool { kind == #kind }\n                 fn cast(syntax: SyntaxToken) -> Option<Self> {\n@@ -84,99 +54,15 @@ fn generate_tokens(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         }\n     });\n \n-    let enums = grammar.token_enums.iter().map(|en| {\n-        let variants = en.variants.iter().map(|var| format_ident!(\"{}\", var)).collect::<Vec<_>>();\n-        let name = format_ident!(\"{}\", en.name);\n-        let kinds = variants\n-            .iter()\n-            .map(|name| format_ident!(\"{}\", to_upper_snake_case(&name.to_string())))\n-            .collect::<Vec<_>>();\n-        assert!(en.traits.is_empty());\n-\n-        quote! {\n-                #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-                pub enum #name {\n-                    #(#variants(#variants),)*\n-                }\n-\n-                #(\n-                impl From<#variants> for #name {\n-                    fn from(node: #variants) -> #name {\n-                        #name::#variants(node)\n-                    }\n-                }\n-                )*\n-\n-                impl std::fmt::Display for #name {\n-                    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-                        std::fmt::Display::fmt(self.syntax(), f)\n-                    }\n-                }\n-\n-                impl AstToken for #name {\n-                    fn can_cast(kind: SyntaxKind) -> bool {\n-                        match kind {\n-                            #(#kinds)|* => true,\n-                            _ => false,\n-                        }\n-                    }\n-                    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-                        let res = match syntax.kind() {\n-                            #(\n-                            #kinds => #name::#variants(#variants { syntax }),\n-                            )*\n-                            _ => return None,\n-                        };\n-                        Some(res)\n-                    }\n-                    fn syntax(&self) -> &SyntaxToken {\n-                        match self {\n-                            #(\n-                            #name::#variants(it) => &it.syntax,\n-                            )*\n-                        }\n-                    }\n-                }\n-        }\n-    });\n-\n-    crate::reformat(quote! {\n-        use crate::{SyntaxToken, SyntaxKind::{self, *}, ast::AstToken};\n-\n+    let pretty = crate::reformat(quote! {\n+        use crate::{SyntaxKind::{self, *}, SyntaxToken, ast::AstToken};\n         #(#tokens)*\n-        #(#enums)*\n-    })\n+    })?\n+    .replace(\"#[derive\", \"\\n#[derive\");\n+    Ok(pretty)\n }\n \n fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n-    let all_token_kinds: Vec<_> = kinds\n-        .punct\n-        .into_iter()\n-        .map(|(_, kind)| kind)\n-        .copied()\n-        .map(|x| x.into())\n-        .chain(\n-            kinds\n-                .keywords\n-                .into_iter()\n-                .chain(kinds.contextual_keywords.into_iter())\n-                .map(|name| Cow::Owned(format!(\"{}_KW\", to_upper_snake_case(&name)))),\n-        )\n-        .chain(kinds.literals.into_iter().copied().map(|x| x.into()))\n-        .chain(kinds.tokens.into_iter().copied().map(|x| x.into()))\n-        .collect();\n-\n-    let mut token_kinds = HashSet::new();\n-    for kind in &all_token_kinds {\n-        let kind = &**kind;\n-        let name = to_pascal_case(kind);\n-        token_kinds.insert(name);\n-    }\n-\n-    for en in grammar.token_enums {\n-        token_kinds.insert(en.name.to_string());\n-    }\n-\n     let nodes = grammar.nodes.iter().map(|node| {\n         let name = format_ident!(\"{}\", node.name);\n         let kind = format_ident!(\"{}\", to_upper_snake_case(&name.to_string()));\n@@ -185,39 +71,27 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n             quote!(impl ast::#trait_name for #name {})\n         });\n \n-        let methods = node.fields.iter().map(|(name, field)| {\n-            let method_name = match field {\n-                FieldSrc::Shorthand => format_ident!(\"{}\", to_lower_snake_case(&name)),\n-                _ => format_ident!(\"{}\", name),\n-            };\n-            let ty = match field {\n-                FieldSrc::Optional(ty) | FieldSrc::Many(ty) => ty,\n-                FieldSrc::Shorthand => name,\n-            };\n+        let methods = node.fields.iter().map(|field| {\n+            let method_name = field.method_name();\n+            let ty = field.ty();\n \n-            let ty = format_ident!(\"{}\", ty);\n-\n-            match field {\n-                FieldSrc::Many(_) => {\n-                    quote! {\n-                        pub fn #method_name(&self) -> AstChildren<#ty> {\n-                            support::children(&self.syntax)\n-                        }\n+            if field.is_many() {\n+                quote! {\n+                    pub fn #method_name(&self) -> AstChildren<#ty> {\n+                        support::children(&self.syntax)\n                     }\n                 }\n-                FieldSrc::Optional(_) | FieldSrc::Shorthand => {\n-                    let is_token = token_kinds.contains(&ty.to_string());\n-                    if is_token {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::token(&self.syntax)\n-                            }\n+            } else {\n+                if let Some(token_kind) = field.token_kind() {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::token(&self.syntax, #token_kind)\n                         }\n-                    } else {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::child(&self.syntax)\n-                            }\n+                    }\n+                } else {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::child(&self.syntax)\n                         }\n                     }\n                 }\n@@ -331,18 +205,18 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n \n     let ast = quote! {\n         use crate::{\n-            SyntaxNode, SyntaxKind::{self, *},\n+            SyntaxNode, SyntaxToken, SyntaxKind::{self, *},\n             ast::{self, AstNode, AstChildren, support},\n+            T,\n         };\n \n-        use super::tokens::*;\n-\n         #(#nodes)*\n         #(#enums)*\n         #(#displays)*\n     };\n \n-    let pretty = crate::reformat(ast)?;\n+    let ast = ast.to_string().replace(\"T ! [ \", \"T![\").replace(\" ] )\", \"])\");\n+    let pretty = crate::reformat(ast)?.replace(\"#[derive\", \"\\n#[derive\");\n     Ok(pretty)\n }\n \n@@ -450,8 +324,10 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> Result<String> {\n \n         #[macro_export]\n         macro_rules! T {\n-            #((#punctuation_values) => { $crate::SyntaxKind::#punctuation };)*\n-            #((#all_keywords_idents) => { $crate::SyntaxKind::#all_keywords };)*\n+            #([#punctuation_values] => { $crate::SyntaxKind::#punctuation };)*\n+            #([#all_keywords_idents] => { $crate::SyntaxKind::#all_keywords };)*\n+            [lifetime] => { $crate::SyntaxKind::LIFETIME };\n+            [ident] => { $crate::SyntaxKind::IDENT };\n         }\n     };\n \n@@ -501,3 +377,68 @@ fn to_pascal_case(s: &str) -> String {\n     }\n     buf\n }\n+\n+impl Field<'_> {\n+    fn is_many(&self) -> bool {\n+        match self {\n+            Field::Node { src: FieldSrc::Many(_), .. } => true,\n+            _ => false,\n+        }\n+    }\n+    fn token_kind(&self) -> Option<proc_macro2::TokenStream> {\n+        let res = match self {\n+            Field::Token(token) => {\n+                let token: proc_macro2::TokenStream = token.parse().unwrap();\n+                quote! { T![#token] }\n+            }\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn method_name(&self) -> proc_macro2::Ident {\n+        match self {\n+            Field::Token(name) => {\n+                let name = match *name {\n+                    \";\" => \"semicolon\",\n+                    \"->\" => \"thin_arrow\",\n+                    \"'{'\" => \"l_curly\",\n+                    \"'}'\" => \"r_curly\",\n+                    \"'('\" => \"l_paren\",\n+                    \"')'\" => \"r_paren\",\n+                    \"'['\" => \"l_brack\",\n+                    \"']'\" => \"r_brack\",\n+                    \"<\" => \"l_angle\",\n+                    \">\" => \"r_angle\",\n+                    \"=\" => \"eq\",\n+                    \"!\" => \"excl\",\n+                    \"*\" => \"star\",\n+                    \"&\" => \"amp\",\n+                    \"_\" => \"underscore\",\n+                    \".\" => \"dot\",\n+                    \"..\" => \"dotdot\",\n+                    \"...\" => \"dotdotdot\",\n+                    \"=>\" => \"fat_arrow\",\n+                    \"@\" => \"at\",\n+                    \":\" => \"colon\",\n+                    \"::\" => \"coloncolon\",\n+                    \"#\" => \"pound\",\n+                    _ => name,\n+                };\n+                format_ident!(\"{}_token\", name)\n+            }\n+            Field::Node { name, src } => match src {\n+                FieldSrc::Shorthand => format_ident!(\"{}\", to_lower_snake_case(name)),\n+                _ => format_ident!(\"{}\", name),\n+            },\n+        }\n+    }\n+    fn ty(&self) -> proc_macro2::Ident {\n+        match self {\n+            Field::Token(_) => format_ident!(\"SyntaxToken\"),\n+            Field::Node { name, src } => match src {\n+                FieldSrc::Optional(ty) | FieldSrc::Many(ty) => format_ident!(\"{}\", ty),\n+                FieldSrc::Shorthand => format_ident!(\"{}\", name),\n+            },\n+        }\n+    }\n+}"}, {"sha": "e5247854a2c0757ffcb54e8814c950738ac42cfc", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93bfc2d05d36a47dc05a1799210327473d702dbc/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bfc2d05d36a47dc05a1799210327473d702dbc/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=93bfc2d05d36a47dc05a1799210327473d702dbc", "patch": "@@ -20,7 +20,16 @@ fn rust_files_are_tidy() {\n }\n \n fn check_todo(path: &Path, text: &str) {\n-    if path.ends_with(\"tests/cli.rs\") {\n+    let whitelist = &[\n+        // This file itself is whitelisted since this test itself contains matches.\n+        \"tests/cli.rs\",\n+        // Some of our assists generate `todo!()` so those files are whitelisted.\n+        \"doc_tests/generated.rs\",\n+        \"handlers/add_missing_impl_members.rs\",\n+        // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make.\n+        \"ast/make.rs\",\n+    ];\n+    if whitelist.iter().any(|p| path.ends_with(p)) {\n         return;\n     }\n     if text.contains(\"TODO\") || text.contains(\"TOOD\") || text.contains(\"todo!\") {\n@@ -37,9 +46,9 @@ fn check_trailing_ws(path: &Path, text: &str) {\n     if is_exclude_dir(path, &[\"test_data\"]) {\n         return;\n     }\n-    for line in text.lines() {\n+    for (line_number, line) in text.lines().enumerate() {\n         if line.chars().last().map(char::is_whitespace) == Some(true) {\n-            panic!(\"Trailing whitespace in {}\", path.display())\n+            panic!(\"Trailing whitespace in {} at line {}\", path.display(), line_number)\n         }\n     }\n }"}]}