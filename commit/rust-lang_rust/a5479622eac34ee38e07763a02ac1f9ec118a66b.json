{"sha": "a5479622eac34ee38e07763a02ac1f9ec118a66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDc5NjIyZWFjMzRlZTM4ZTA3NzYzYTAyYWMxZjllYzExOGE2NmI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-24T01:52:55Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-31T23:40:54Z"}, "message": "Pretty print ids for assoc items", "tree": {"sha": "b5641347670d0d83415dc648e062bec1a7bd407e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5641347670d0d83415dc648e062bec1a7bd407e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5479622eac34ee38e07763a02ac1f9ec118a66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5479622eac34ee38e07763a02ac1f9ec118a66b", "html_url": "https://github.com/rust-lang/rust/commit/a5479622eac34ee38e07763a02ac1f9ec118a66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5479622eac34ee38e07763a02ac1f9ec118a66b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d754722a04b99fdcae0fd97fa2a4395521145ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d754722a04b99fdcae0fd97fa2a4395521145ef2", "html_url": "https://github.com/rust-lang/rust/commit/d754722a04b99fdcae0fd97fa2a4395521145ef2"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "7e436d95192f5da4b12c9965d3513cac86e5872e", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5479622eac34ee38e07763a02ac1f9ec118a66b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5479622eac34ee38e07763a02ac1f9ec118a66b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=a5479622eac34ee38e07763a02ac1f9ec118a66b", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n             pprust::NodeIdent(_) | pprust::NodeName(_) => 0,\n             pprust::NodeExpr(expr) => expr.id,\n             pprust::NodeBlock(blk) => blk.id,\n-            pprust::NodeItem(_) => 0,\n+            pprust::NodeItem(_) | pprust::NodeSubItem(_) => 0,\n             pprust::NodePat(pat) => pat.id\n         };\n "}, {"sha": "827310e04dd416e70c761ec71acde2a728518b7a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5479622eac34ee38e07763a02ac1f9ec118a66b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5479622eac34ee38e07763a02ac1f9ec118a66b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=a5479622eac34ee38e07763a02ac1f9ec118a66b", "patch": "@@ -226,6 +226,10 @@ impl<'ast> pprust::PpAnn for IdentifiedAnnotation<'ast> {\n                 try!(pp::space(&mut s.s));\n                 s.synth_comment(item.id.to_string())\n             }\n+            pprust::NodeSubItem(id) => {\n+                try!(pp::space(&mut s.s));\n+                s.synth_comment(id.to_string())\n+            }\n             pprust::NodeBlock(blk) => {\n                 try!(pp::space(&mut s.s));\n                 s.synth_comment(format!(\"block {}\", blk.id))"}, {"sha": "c2f323f98afc56d5a3808ac1db1bdf3ff1b0482d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a5479622eac34ee38e07763a02ac1f9ec118a66b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5479622eac34ee38e07763a02ac1f9ec118a66b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a5479622eac34ee38e07763a02ac1f9ec118a66b", "patch": "@@ -37,6 +37,7 @@ pub enum AnnNode<'a> {\n     NodeName(&'a ast::Name),\n     NodeBlock(&'a ast::Block),\n     NodeItem(&'a ast::Item),\n+    NodeSubItem(ast::NodeId),\n     NodeExpr(&'a ast::Expr),\n     NodePat(&'a ast::Pat),\n }\n@@ -1264,6 +1265,7 @@ impl<'a> State<'a> {\n \n     pub fn print_trait_item(&mut self, ti: &ast::TraitItem)\n                             -> io::Result<()> {\n+        try!(self.ann.pre(self, NodeSubItem(ti.id)));\n         try!(self.hardbreak_if_not_bol());\n         try!(self.maybe_print_comment(ti.span.lo));\n         try!(self.print_outer_attributes(&ti.attrs));\n@@ -1275,19 +1277,21 @@ impl<'a> State<'a> {\n                 try!(self.print_method_sig(ti.ident, sig, ast::Inherited));\n                 if let Some(ref body) = *body {\n                     try!(self.nbsp());\n-                    self.print_block_with_attrs(body, &ti.attrs)\n+                    try!(self.print_block_with_attrs(body, &ti.attrs));\n                 } else {\n-                    word(&mut self.s, \";\")\n+                    try!(word(&mut self.s, \";\"));\n                 }\n             }\n             ast::TypeTraitItem(ref bounds, ref default) => {\n-                self.print_associated_type(ti.ident, Some(bounds),\n-                                           default.as_ref().map(|ty| &**ty))\n+                try!(self.print_associated_type(ti.ident, Some(bounds),\n+                                                default.as_ref().map(|ty| &**ty)));\n             }\n         }\n+        self.ann.post(self, NodeSubItem(ti.id))\n     }\n \n     pub fn print_impl_item(&mut self, ii: &ast::ImplItem) -> io::Result<()> {\n+        try!(self.ann.pre(self, NodeSubItem(ii.id)));\n         try!(self.hardbreak_if_not_bol());\n         try!(self.maybe_print_comment(ii.span.lo));\n         try!(self.print_outer_attributes(&ii.attrs));\n@@ -1296,10 +1300,10 @@ impl<'a> State<'a> {\n                 try!(self.head(\"\"));\n                 try!(self.print_method_sig(ii.ident, sig, ii.vis));\n                 try!(self.nbsp());\n-                self.print_block_with_attrs(body, &ii.attrs)\n+                try!(self.print_block_with_attrs(body, &ii.attrs));\n             }\n             ast::TypeImplItem(ref ty) => {\n-                self.print_associated_type(ii.ident, None, Some(ty))\n+                try!(self.print_associated_type(ii.ident, None, Some(ty)));\n             }\n             ast::MacImplItem(codemap::Spanned { node: ast::MacInvocTT(ref pth, ref tts, _),\n                                                 ..}) => {\n@@ -1311,9 +1315,10 @@ impl<'a> State<'a> {\n                 try!(self.print_tts(&tts[..]));\n                 try!(self.pclose());\n                 try!(word(&mut self.s, \";\"));\n-                self.end()\n+                try!(self.end())\n             }\n         }\n+        self.ann.post(self, NodeSubItem(ii.id))\n     }\n \n     pub fn print_outer_attributes(&mut self,"}]}