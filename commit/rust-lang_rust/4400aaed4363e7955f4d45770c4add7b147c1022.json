{"sha": "4400aaed4363e7955f4d45770c4add7b147c1022", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MDBhYWVkNDM2M2U3OTU1ZjRkNDU3NzBjNGFkZDdiMTQ3YzEwMjI=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T19:11:32Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T04:32:24Z"}, "message": "if_let_chain: allow mixing in normal ifs as well", "tree": {"sha": "dcdee0ab5edc758a87c0b8e9094fa344f303eb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcdee0ab5edc758a87c0b8e9094fa344f303eb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4400aaed4363e7955f4d45770c4add7b147c1022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4400aaed4363e7955f4d45770c4add7b147c1022", "html_url": "https://github.com/rust-lang/rust/commit/4400aaed4363e7955f4d45770c4add7b147c1022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4400aaed4363e7955f4d45770c4add7b147c1022/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd396db9179d99a219726e4dcfb7875c6749390", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd396db9179d99a219726e4dcfb7875c6749390", "html_url": "https://github.com/rust-lang/rust/commit/dbd396db9179d99a219726e4dcfb7875c6749390"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "be28e14001c95d113274cffca9e6c22fc96b4e11", "filename": "src/returns.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4400aaed4363e7955f4d45770c4add7b147c1022/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400aaed4363e7955f4d45770c4add7b147c1022/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=4400aaed4363e7955f4d45770c4add7b147c1022", "patch": "@@ -69,17 +69,16 @@ impl ReturnPass {\n         // we need both a let-binding stmt and an expr\n         if_let_chain! {\n             [\n-                Some(stmt) = block.stmts.last(),\n-                StmtDecl(ref decl, _) = stmt.node,\n-                DeclLocal(ref local) = decl.node,\n-                Some(ref initexpr) = local.init,\n-                PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node,\n-                Some(ref retexpr) = block.expr,\n-                ExprPath(_, ref path) = retexpr.node\n+                let Some(stmt) = block.stmts.last(),\n+                let StmtDecl(ref decl, _) = stmt.node,\n+                let DeclLocal(ref local) = decl.node,\n+                let Some(ref initexpr) = local.init,\n+                let PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node,\n+                let Some(ref retexpr) = block.expr,\n+                let ExprPath(_, ref path) = retexpr.node,\n+                match_path(path, &[&*id.name.as_str()])\n             ], {\n-                if match_path(path, &[&*id.name.as_str()]) {\n-                    self.emit_let_lint(cx, retexpr.span, initexpr.span);\n-                }\n+                self.emit_let_lint(cx, retexpr.span, initexpr.span);\n             }\n         }\n     }"}, {"sha": "220dc6215fdbb17f1466559fc4bbe59c469eaa4f", "filename": "src/utils.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4400aaed4363e7955f4d45770c4add7b147c1022/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400aaed4363e7955f4d45770c4add7b147c1022/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=4400aaed4363e7955f4d45770c4add7b147c1022", "patch": "@@ -93,9 +93,14 @@ pub fn walk_ptrs_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n     }\n }\n \n-/// Produce a nested chain of if-lets from the patterns:\n+/// Produce a nested chain of if-lets and ifs from the patterns:\n ///\n-///     if_let_chain! {[Some(y) = x, Some(z) = y],\n+///     if_let_chain! {\n+///         [\n+///             Some(y) = x,\n+///             y.len() == 2,\n+///             Some(z) = y,\n+///         ],\n ///         {\n ///             block\n ///         }\n@@ -104,20 +109,32 @@ pub fn walk_ptrs_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n /// becomes\n ///\n ///     if let Some(y) = x {\n-///         if let Some(z) = y {\n-///             block\n+///         if y.len() == 2 {\n+///             if let Some(z) = y {\n+///                 block\n+///             }\n ///         }\n ///     }\n #[macro_export]\n macro_rules! if_let_chain {\n-    ([$pat:pat = $expr:expr, $($p2:pat = $e2:expr),+], $block:block) => {\n+    ([let $pat:pat = $expr:expr, $($tt:tt)+], $block:block) => {\n         if let $pat = $expr {\n-           if_let_chain!{ [$($p2 = $e2),+], $block }\n+           if_let_chain!{ [$($tt)+], $block }\n         }\n     };\n-    ([$pat:pat = $expr:expr], $block:block) => {\n+    ([let $pat:pat = $expr:expr], $block:block) => {\n         if let $pat = $expr {\n            $block\n         }\n     };\n+    ([$expr:expr, $($tt:tt)+], $block:block) => {\n+        if $expr {\n+           if_let_chain!{ [$($tt)+], $block }\n+        }\n+    };\n+    ([$expr:expr], $block:block) => {\n+        if $expr {\n+           $block\n+        }\n+    };\n }"}]}