{"sha": "53bb46fa853bee99f673a0ed0a53798c46847d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYmI0NmZhODUzYmVlOTlmNjczYTBlZDBhNTM3OThjNDY4NDdkOTk=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-07T00:56:07Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-12T21:36:13Z"}, "message": "show function params in completion detail", "tree": {"sha": "d692b9f6255109c88e3805408be3bf6dd5c8ec76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d692b9f6255109c88e3805408be3bf6dd5c8ec76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53bb46fa853bee99f673a0ed0a53798c46847d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53bb46fa853bee99f673a0ed0a53798c46847d99", "html_url": "https://github.com/rust-lang/rust/commit/53bb46fa853bee99f673a0ed0a53798c46847d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53bb46fa853bee99f673a0ed0a53798c46847d99/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437527b22612a17024751c78f69715e625bf6a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/437527b22612a17024751c78f69715e625bf6a96", "html_url": "https://github.com/rust-lang/rust/commit/437527b22612a17024751c78f69715e625bf6a96"}], "stats": {"total": 237, "additions": 155, "deletions": 82}, "files": [{"sha": "8d082994a6d7a0ea804df45a0f044298cd071d43", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -921,6 +921,14 @@ impl SelfParam {\n             })\n             .unwrap_or(Access::Owned)\n     }\n+\n+    pub fn display(self, db: &dyn HirDatabase) -> &'static str {\n+        match self.access(db) {\n+            Access::Shared => \"&self\",\n+            Access::Exclusive => \"&mut self\",\n+            Access::Owned => \"self\",\n+        }\n+    }\n }\n \n impl HasVisibility for Function {"}, {"sha": "cec2d0c3a37e794fe441c20ef3a3b30ba51100b2", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -81,7 +81,7 @@ fn foo(s: S) { s.$0 }\n \"#,\n             expect![[r#\"\n                 fd foo   u32\n-                me bar() -> ()\n+                me bar() fn(&self)\n             \"#]],\n         );\n     }\n@@ -97,7 +97,7 @@ impl S {\n \"#,\n             expect![[r#\"\n                 fd the_field (u32,)\n-                me foo()     -> ()\n+                me foo()     fn(self)\n             \"#]],\n         )\n     }\n@@ -113,7 +113,7 @@ impl A {\n \"#,\n             expect![[r#\"\n                 fd the_field (u32, i32)\n-                me foo()     -> ()\n+                me foo()     fn(&self)\n             \"#]],\n         )\n     }\n@@ -163,7 +163,7 @@ mod m {\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() -> ()\n+                me the_method() fn(&self)\n             \"#]],\n         );\n     }\n@@ -196,7 +196,7 @@ impl A<i32> {\n fn foo(a: A<u32>) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() -> ()\n+                me the_method() fn(&self)\n             \"#]],\n         )\n     }\n@@ -211,7 +211,7 @@ impl Trait for A {}\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() -> ()\n+                me the_method() fn(&self)\n             \"#]],\n         );\n     }\n@@ -226,7 +226,7 @@ impl<T> Trait for T {}\n fn foo(a: &A) { a.$0 }\n \",\n             expect![[r#\"\n-                me the_method() -> ()\n+                me the_method() fn(&self)\n             \"#]],\n         );\n     }\n@@ -244,7 +244,7 @@ impl Trait for A {}\n fn foo(a: A) { a.$0 }\n \",\n             expect![[r#\"\n-                me the_method() -> ()\n+                me the_method() fn(&self)\n             \"#]],\n         );\n     }\n@@ -298,7 +298,7 @@ impl T {\n }\n \"#,\n             expect![[r#\"\n-                me blah() -> ()\n+                me blah() fn(&self)\n             \"#]],\n         );\n     }\n@@ -407,7 +407,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                me the_method() -> ()\n+                me the_method() fn(&self)\n             \"#]],\n         );\n     }\n@@ -422,7 +422,7 @@ macro_rules! make_s { () => { S }; }\n fn main() { make_s!().f$0; }\n \"#,\n             expect![[r#\"\n-                me foo() -> ()\n+                me foo() fn(&self)\n             \"#]],\n         )\n     }\n@@ -450,7 +450,7 @@ mod foo {\n }\n         \"#,\n             expect![[r#\"\n-                me private() -> ()\n+                me private() fn(&self)\n             \"#]],\n         );\n     }"}, {"sha": "08df2df3f680b0907cf89a3cbec39a5da5dc94e6", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -402,7 +402,7 @@ fn main() {\n         check(\n             fixture,\n             expect![[r#\"\n-                fn weird_function() (dep::test_mod::TestTrait) -> ()\n+                fn weird_function() (dep::test_mod::TestTrait) fn()\n             \"#]],\n         );\n \n@@ -495,7 +495,7 @@ fn main() {\n         check(\n             fixture,\n             expect![[r#\"\n-                me random_method() (dep::test_mod::TestTrait) -> ()\n+                me random_method() (dep::test_mod::TestTrait) fn(&self)\n             \"#]],\n         );\n \n@@ -665,7 +665,7 @@ fn main() {\n }\n         \"#,\n             expect![[r#\"\n-                me random_method() (dep::test_mod::TestTrait) -> () DEPRECATED\n+                me random_method() (dep::test_mod::TestTrait) fn(&self) DEPRECATED\n             \"#]],\n         );\n \n@@ -696,7 +696,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 ct SPECIAL_CONST (dep::test_mod::TestTrait) DEPRECATED\n-                fn weird_function() (dep::test_mod::TestTrait) -> () DEPRECATED\n+                fn weird_function() (dep::test_mod::TestTrait) fn() DEPRECATED\n             \"#]],\n         );\n     }"}, {"sha": "105ff60131dd9dd58b12757f4777ee4a66b8677c", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -359,8 +359,8 @@ impl S {\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn a()  -> ()\n-                me b(\u2026) -> ()\n+                fn a()  fn()\n+                me b(\u2026) fn(&self)\n                 ct C    const C: i32 = 42;\n                 ta T    type T = i32;\n             \"#]],\n@@ -387,7 +387,7 @@ mod m {\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn public_method() -> ()\n+                fn public_method() fn()\n                 ct PUBLIC_CONST    pub(crate) const PUBLIC_CONST: u32 = 1;\n                 ta PublicType      pub(crate) type PublicType = u32;\n             \"#]],\n@@ -404,7 +404,7 @@ impl E { fn m() { } }\n fn foo() { let _ = E::$0 }\n         \"#,\n             expect![[r#\"\n-                fn m() -> ()\n+                fn m() fn()\n             \"#]],\n         );\n     }\n@@ -419,7 +419,7 @@ impl U { fn m() { } }\n fn foo() { let _ = U::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() -> ()\n+                fn m() fn()\n             \"#]],\n         );\n     }\n@@ -449,7 +449,7 @@ trait Trait { fn m(); }\n fn foo() { let _ = Trait::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() -> ()\n+                fn m() fn()\n             \"#]],\n         );\n     }\n@@ -466,7 +466,7 @@ impl Trait for S {}\n fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() -> ()\n+                fn m() fn()\n             \"#]],\n         );\n     }\n@@ -483,7 +483,7 @@ impl Trait for S {}\n fn foo() { let _ = <S as Trait>::$0 }\n \"#,\n             expect![[r#\"\n-                fn m() -> ()\n+                fn m() fn()\n             \"#]],\n         );\n     }\n@@ -512,11 +512,11 @@ fn foo<T: Sub>() { T::$0 }\n                 ta SubTy        type SubTy;\n                 ta Ty           type Ty;\n                 ct C2           const C2: ();\n-                fn subfunc()    -> ()\n-                me submethod(\u2026) -> ()\n+                fn subfunc()    fn()\n+                me submethod(\u2026) fn(&self)\n                 ct CONST        const CONST: u8;\n-                fn func()       -> ()\n-                me method(\u2026)    -> ()\n+                fn func()       fn()\n+                me method(\u2026)    fn(&self)\n             \"#]],\n         );\n     }\n@@ -552,11 +552,11 @@ impl<T> Sub for Wrap<T> {\n                 ta SubTy        type SubTy;\n                 ta Ty           type Ty;\n                 ct CONST        const CONST: u8 = 0;\n-                fn func()       -> ()\n-                me method(\u2026)    -> ()\n+                fn func()       fn()\n+                me method(\u2026)    fn(&self)\n                 ct C2           const C2: () = ();\n-                fn subfunc()    -> ()\n-                me submethod(\u2026) -> ()\n+                fn subfunc()    fn()\n+                me submethod(\u2026) fn(&self)\n             \"#]],\n         );\n     }\n@@ -573,8 +573,8 @@ impl T { fn bar() {} }\n fn main() { T::$0; }\n \"#,\n             expect![[r#\"\n-                fn foo() -> ()\n-                fn bar() -> ()\n+                fn foo() fn()\n+                fn bar() fn()\n             \"#]],\n         );\n     }\n@@ -589,7 +589,7 @@ macro_rules! foo { () => {} }\n fn main() { let _ = crate::$0 }\n         \"#,\n             expect![[r##\"\n-                fn main()  -> ()\n+                fn main()  fn()\n                 ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"##]],\n         );\n@@ -633,7 +633,7 @@ mod p {\n \"#,\n             expect![[r#\"\n                 ct RIGHT_CONST\n-                fn right_fn()  -> ()\n+                fn right_fn()  fn()\n                 st RightType\n             \"#]],\n         );\n@@ -680,8 +680,8 @@ fn main() { m!(self::f$0); }\n fn foo() {}\n \"#,\n             expect![[r#\"\n-                fn main() -> ()\n-                fn foo()  -> ()\n+                fn main() fn()\n+                fn foo()  fn()\n             \"#]],\n         );\n     }\n@@ -699,7 +699,7 @@ mod m {\n \"#,\n             expect![[r#\"\n                 md z\n-                fn z() -> ()\n+                fn z() fn()\n             \"#]],\n         );\n     }\n@@ -719,7 +719,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                fn new() -> HashMap<K, V, RandomState>\n+                fn new() fn() -> HashMap<K, V, RandomState>\n             \"#]],\n         );\n     }\n@@ -752,8 +752,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                fn main() -> ()\n-                fn foo(\u2026) -> ()\n+                fn main() fn()\n+                fn foo(\u2026) fn(i32, i32)\n             \"#]],\n         );\n     }\n@@ -776,7 +776,7 @@ impl Foo {\n             expect![[r#\"\n                 ev Bar    ()\n                 ev Baz    ()\n-                me foo(\u2026) -> ()\n+                me foo(\u2026) fn(self)\n             \"#]],\n         );\n     }\n@@ -800,7 +800,7 @@ impl u8 {\n \"#,\n             expect![[r#\"\n                 ct MAX     pub const MAX: Self = 255;\n-                me func(\u2026) -> ()\n+                me func(\u2026) fn(self)\n             \"#]],\n         );\n     }"}, {"sha": "e4bf4a043e166667c688b1f6ee263f801143bb16", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -139,7 +139,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) -> ()\n+                fn quux(\u2026) fn(i32)\n             \"#]],\n         );\n     }\n@@ -161,7 +161,7 @@ fn quux() {\n             expect![[r#\"\n                 lc b      i32\n                 lc a\n-                fn quux() -> ()\n+                fn quux() fn()\n             \"#]],\n         );\n     }\n@@ -176,7 +176,7 @@ fn quux() {\n \"#,\n             expect![[r#\"\n                 lc x\n-                fn quux() -> ()\n+                fn quux() fn()\n             \"#]],\n         );\n     }\n@@ -207,14 +207,14 @@ fn main() {\n             r#\"fn quux<T>() { $0 }\"#,\n             expect![[r#\"\n                 tp T\n-                fn quux() -> ()\n+                fn quux() fn()\n             \"#]],\n         );\n         check(\n             r#\"fn quux<const C: usize>() { $0 }\"#,\n             expect![[r#\"\n                 cp C\n-                fn quux() -> ()\n+                fn quux() fn()\n             \"#]],\n         );\n     }\n@@ -225,7 +225,7 @@ fn main() {\n         check(\n             r#\"fn quux<'a>() { $0 }\"#,\n             expect![[r#\"\n-                fn quux() -> ()\n+                fn quux() fn()\n             \"#]],\n         );\n     }\n@@ -263,7 +263,7 @@ fn quux() { $0 }\n \"#,\n             expect![[r#\"\n                 st S\n-                fn quux() -> ()\n+                fn quux() fn()\n                 en E\n             \"#]],\n         );\n@@ -316,7 +316,7 @@ mod m {\n }\n \"#,\n             expect![[r#\"\n-                fn quux() -> ()\n+                fn quux() fn()\n                 st Bar\n             \"#]],\n         );\n@@ -331,7 +331,7 @@ fn x() -> $0\n \"#,\n             expect![[r#\"\n                 st Foo\n-                fn x() -> ()\n+                fn x() fn()\n             \"#]],\n         );\n     }\n@@ -352,7 +352,7 @@ fn foo() {\n             expect![[r#\"\n                 lc bar   i32\n                 lc bar   i32\n-                fn foo() -> ()\n+                fn foo() fn()\n             \"#]],\n         );\n     }\n@@ -382,7 +382,7 @@ use prelude::*;\n mod prelude { struct Option; }\n \"#,\n             expect![[r#\"\n-                fn foo()  -> ()\n+                fn foo()  fn()\n                 md std\n                 st Option\n             \"#]],\n@@ -412,7 +412,7 @@ mod macros {\n }\n \"#,\n             expect![[r##\"\n-                fn f()        -> ()\n+                fn f()        fn()\n                 ma concat!(\u2026) #[macro_export] macro_rules! concat\n                 md std\n             \"##]],\n@@ -439,7 +439,7 @@ use prelude::*;\n mod prelude { struct String; }\n \"#,\n             expect![[r#\"\n-                fn foo()  -> ()\n+                fn foo()  fn()\n                 md std\n                 md core\n                 st String\n@@ -470,7 +470,7 @@ fn main() { let v = $0 }\n             expect![[r##\"\n                 md m1\n                 ma baz!(\u2026) #[macro_export] macro_rules! baz\n-                fn main()  -> ()\n+                fn main()  fn()\n                 md m2\n                 ma bar!(\u2026) macro_rules! bar\n                 ma foo!(\u2026) macro_rules! foo\n@@ -486,7 +486,7 @@ macro_rules! foo { () => {} }\n fn foo() { $0 }\n \"#,\n             expect![[r#\"\n-                fn foo()   -> ()\n+                fn foo()   fn()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n@@ -500,7 +500,7 @@ macro_rules! foo { () => {} }\n fn main() { let x: $0 }\n \"#,\n             expect![[r#\"\n-                fn main()  -> ()\n+                fn main()  fn()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n@@ -514,7 +514,7 @@ macro_rules! foo { () => {} }\n fn main() { $0 }\n \"#,\n             expect![[r#\"\n-                fn main()  -> ()\n+                fn main()  fn()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );\n@@ -530,8 +530,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                fn frobnicate() -> ()\n-                fn main()       -> ()\n+                fn frobnicate() fn()\n+                fn main()       fn()\n             \"#]],\n         );\n     }\n@@ -549,7 +549,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) -> ()\n+                fn quux(\u2026) fn(i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n@@ -568,7 +568,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) -> ()\n+                fn quux(\u2026) fn(i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n@@ -587,7 +587,7 @@ fn quux(x: i32) {\n             expect![[r#\"\n                 lc y       i32\n                 lc x       i32\n-                fn quux(\u2026) -> ()\n+                fn quux(\u2026) fn(i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n         );\n@@ -602,7 +602,7 @@ use spam::Quux;\n fn main() { $0 }\n \"#,\n             expect![[r#\"\n-                fn main() -> ()\n+                fn main() fn()\n                 ?? Quux\n             \"#]],\n         );\n@@ -680,7 +680,7 @@ fn main() { let foo: Foo = Q$0 }\n                 ev Foo::Baz  ()\n                 ev Foo::Quux ()\n                 en Foo\n-                fn main()    -> ()\n+                fn main()    fn()\n             \"#]],\n         )\n     }\n@@ -695,7 +695,7 @@ fn f() -> m::E { V$0 }\n             expect![[r#\"\n                 ev m::E::V ()\n                 md m\n-                fn f()     -> E\n+                fn f()     fn() -> E\n             \"#]],\n         )\n     }"}, {"sha": "5b7ad38d5f98ea1cab60926b9c7973f1dc5ee4dd", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -230,7 +230,7 @@ fn foo() {\n     bar.fo$0;\n }\n \"#,\n-            DetailAndDocumentation { detail: \"-> ()\", documentation: \"Do the foo\" },\n+            DetailAndDocumentation { detail: \"fn(&self)\", documentation: \"Do the foo\" },\n         );\n     }\n \n@@ -255,7 +255,7 @@ fn foo() {\n     bar.fo$0;\n }\n \"#,\n-            DetailAndDocumentation { detail: \"-> ()\", documentation: \" Do the foo\" },\n+            DetailAndDocumentation { detail: \"fn(&self)\", documentation: \" Do the foo\" },\n         );\n     }\n \n@@ -273,7 +273,7 @@ fn bar() {\n     for c in fo$0\n }\n \"#,\n-            DetailAndDocumentation { detail: \"-> &str\", documentation: \"Do the foo\" },\n+            DetailAndDocumentation { detail: \"fn() -> &str\", documentation: \"Do the foo\" },\n         );\n     }\n }"}, {"sha": "d9bf5258204221eda3002044cc3de5c7d922243c", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -424,6 +424,44 @@ fn main() { Foo::Fo$0 }\n         );\n     }\n \n+    #[test]\n+    fn fn_detail_includes_args_and_return_type() {\n+        check(\n+            r#\"\n+fn foo<T>(a: u32, b: u32, t: T) -> (u32, T) { (a, t) }\n+\n+fn main() { fo$0 }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"foo(\u2026)\",\n+                        source_range: 68..70,\n+                        delete: 68..70,\n+                        insert: \"foo(${1:a}, ${2:b}, ${3:t})$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"foo\",\n+                        detail: \"fn(u32, u32, T) -> (u32, T)\",\n+                        trigger_call_info: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 68..70,\n+                        delete: 68..70,\n+                        insert: \"main()$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"main\",\n+                        detail: \"fn()\",\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn enum_detail_just_parentheses_for_unit() {\n         check(\n@@ -501,7 +539,7 @@ fn main() { let _: m::Spam = S$0 }\n                             Function,\n                         ),\n                         lookup: \"main\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn()\",\n                     },\n                 ]\n             \"#]],\n@@ -530,7 +568,7 @@ fn main() { som$0 }\n                             Function,\n                         ),\n                         lookup: \"main\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn()\",\n                     },\n                     CompletionItem {\n                         label: \"something_deprecated()\",\n@@ -541,7 +579,7 @@ fn main() { som$0 }\n                             Function,\n                         ),\n                         lookup: \"something_deprecated\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn()\",\n                         deprecated: true,\n                     },\n                     CompletionItem {\n@@ -553,7 +591,7 @@ fn main() { som$0 }\n                             Function,\n                         ),\n                         lookup: \"something_else_deprecated\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn()\",\n                         deprecated: true,\n                     },\n                 ]\n@@ -604,7 +642,7 @@ impl S {\n                         insert: \"bar()$0\",\n                         kind: Method,\n                         lookup: \"bar\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn(self)\",\n                         documentation: Documentation(\n                             \"Method docs\",\n                         ),\n@@ -704,7 +742,7 @@ fn foo(s: S) { s.$0 }\n                         insert: \"the_method()$0\",\n                         kind: Method,\n                         lookup: \"the_method\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn(&self)\",\n                     },\n                 ]\n             \"#]],\n@@ -954,7 +992,7 @@ fn main() {\n                             Function,\n                         ),\n                         lookup: \"foo\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn(&mut S)\",\n                         trigger_call_info: true,\n                     },\n                     CompletionItem {\n@@ -966,7 +1004,7 @@ fn main() {\n                             Function,\n                         ),\n                         lookup: \"main\",\n-                        detail: \"-> ()\",\n+                        detail: \"fn()\",\n                     },\n                     CompletionItem {\n                         label: \"s\","}, {"sha": "e154d63029fd5da579c5c15acf5f57c4ca27f3dc", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bb46fa853bee99f673a0ed0a53798c46847d99/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=53bb46fa853bee99f673a0ed0a53798c46847d99", "patch": "@@ -2,6 +2,7 @@\n \n use hir::{HasSource, HirDisplay, Type};\n use ide_db::SymbolKind;\n+use itertools::Itertools;\n use syntax::ast::Fn;\n \n use crate::{\n@@ -59,8 +60,34 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn detail(&self) -> String {\n-        let ty = self.func.ret_type(self.ctx.db());\n-        format!(\"-> {}\", ty.display(self.ctx.db()))\n+        let params = if let Some(self_param) = self.func.self_param(self.ctx.db()) {\n+            let params = self\n+                .func\n+                .assoc_fn_params(self.ctx.db())\n+                .into_iter()\n+                .skip(1) // skip the self param because we are manually handling that\n+                .map(|p| p.ty().display(self.ctx.db()).to_string());\n+\n+            std::iter::once(self_param.display(self.ctx.db()).to_owned()).chain(params).join(\", \")\n+        } else {\n+            let params = self\n+                .func\n+                .assoc_fn_params(self.ctx.db())\n+                .into_iter()\n+                .map(|p| p.ty().display(self.ctx.db()).to_string())\n+                .join(\", \");\n+            params\n+        };\n+\n+        let ret_ty = self.func.ret_type(self.ctx.db());\n+        let ret = if ret_ty.is_unit() {\n+            // Omit the `-> ()` for unit return types\n+            String::new()\n+        } else {\n+            format!(\" -> {}\", ret_ty.display(self.ctx.db()))\n+        };\n+\n+        format!(\"fn({}){}\", params, ret)\n     }\n \n     fn add_arg(&self, arg: &str, ty: &Type) -> String {"}]}