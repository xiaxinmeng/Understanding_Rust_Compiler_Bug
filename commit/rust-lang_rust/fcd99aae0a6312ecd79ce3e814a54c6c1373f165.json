{"sha": "fcd99aae0a6312ecd79ce3e814a54c6c1373f165", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZDk5YWFlMGE2MzEyZWNkNzljZTNlODE0YTU0YzZjMTM3M2YxNjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-18T00:38:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-18T00:38:03Z"}, "message": "rustc_driver: Frob the global PATH less\n\nEnvironment variables are global state so this can lead to surprising results if\nthe driver is called in a multithreaded environment (e.g. doctests). There\nshouldn't be any memory corruption that's possible, but a lot of the bots have\nbeen failing because they can't find `cc` or `gcc` in the path during doctests,\nand I highly suspect that it is due to the compiler modifying `PATH` in a\nmultithreaded fashion.\n\nThis commit moves the logic for appending to `PATH` to only affect the child\nprocess instead of also affecting the parent, at least for the linking stage.\nWhen loading dynamic libraries the compiler still modifies `PATH` on Windows,\nbut this may be more difficult to fix than spawning off a new process.", "tree": {"sha": "b2b761274cd7954838a0ecf87ff146ba0aa7926b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b761274cd7954838a0ecf87ff146ba0aa7926b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd99aae0a6312ecd79ce3e814a54c6c1373f165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd99aae0a6312ecd79ce3e814a54c6c1373f165", "html_url": "https://github.com/rust-lang/rust/commit/fcd99aae0a6312ecd79ce3e814a54c6c1373f165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd99aae0a6312ecd79ce3e814a54c6c1373f165/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af39cebc547a946b4ae861854c46c9c9a70a923", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af39cebc547a946b4ae861854c46c9c9a70a923", "html_url": "https://github.com/rust-lang/rust/commit/8af39cebc547a946b4ae861854c46c9c9a70a923"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "bda46bfe03c9860dbe1e09c123473dcae97a27bf", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fcd99aae0a6312ecd79ce3e814a54c6c1373f165/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd99aae0a6312ecd79ce3e814a54c6c1373f165/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fcd99aae0a6312ecd79ce3e814a54c6c1373f165", "patch": "@@ -762,18 +762,11 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n pub fn phase_6_link_output(sess: &Session,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n-    let old_path = env::var_os(\"PATH\").unwrap_or(OsString::new());\n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths();\n-    new_path.extend(env::split_paths(&old_path));\n-    env::set_var(\"PATH\", &env::join_paths(&new_path).unwrap());\n-\n     time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            trans,\n                            outputs,\n                            &trans.link.crate_name));\n-\n-    env::set_var(\"PATH\", &old_path);\n }\n \n fn escape_dep_filename(filename: &str) -> String {"}, {"sha": "82ba8b6df6f251c1db9506714a3637f97686231b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcd99aae0a6312ecd79ce3e814a54c6c1373f165/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd99aae0a6312ecd79ce3e814a54c6c1373f165/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=fcd99aae0a6312ecd79ce3e814a54c6c1373f165", "patch": "@@ -30,6 +30,7 @@ use util::sha2::{Digest, Sha256};\n use util::fs::fix_windows_verbatim_for_gcc;\n use rustc_back::tempdir::TempDir;\n \n+use std::env;\n use std::fs::{self, PathExt};\n use std::io::{self, Read, Write};\n use std::mem;\n@@ -796,7 +797,16 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n \n     // The invocations of cc share some flags across platforms\n     let pname = get_cc_prog(sess);\n-    let mut cmd = Command::new(&pname[..]);\n+    let mut cmd = Command::new(&pname);\n+\n+    // The compiler's sysroot often has some bundled tools, so add it to the\n+    // PATH for the child.\n+    let mut new_path = sess.host_filesearch(PathKind::All)\n+                           .get_tools_search_paths();\n+    if let Some(path) = env::var_os(\"PATH\") {\n+        new_path.extend(env::split_paths(&path));\n+    }\n+    cmd.env(\"PATH\", env::join_paths(new_path).unwrap());\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     cmd.args(&sess.target.target.options.pre_link_args);"}]}