{"sha": "b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MWVlMGIzNzBlYmMxYTllMTVhNWM2YTY4YjIyMDFkZGJkYWEzNmY=", "commit": {"author": {"name": "Markus Wein", "email": "markus.wein@nuclearsquid.com", "date": "2018-07-11T11:32:03Z"}, "committer": {"name": "Markus Wein", "email": "markus.wein@nuclearsquid.com", "date": "2018-07-16T18:37:28Z"}, "message": "Document From conversions for CString and CStr", "tree": {"sha": "b53c2cbefb15c9b95b2c52658f7f319862ff272e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b53c2cbefb15c9b95b2c52658f7f319862ff272e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQ8MKkRpyVqocFY36vBHMFyRe2poFAltM5egACgkQvBHMFyRe\n2ppNjBAAoSR41DrKqbZc+GG0ITeeRrPAmSaJugYyxB5brQbr2LVL6OCXt+alJYww\nfMNuQV7jvnkN0o7WLYllv/Fk7D5yjkq+3ANrp4sne6qusNlunsXXVcgc/xpaXI4d\n3BZ+3BH+yQbAqVI0tV4LcgyctgEj7+gWAFSE5r5FYzlXQ6e8IQfrQm671uF4aqOx\nBQ6jX/Dzs5HpnoElR+wh6NvndR5CqzdKiS6ZdrgAe5T8TaoWsV+8F5/qTCTtujy5\nB0+Fj4dI+/Bf1dmX4lxE1tgsVGQJKqfKpRkceTP7PGl5s0VjR4hBFtc9G6Cwabsj\n6wVy0OxV7Zbi2tnDDwjgXKaABq9206QNod4nn48L8RiIuuzMYv3UYD4OrI0ThTNS\nNvnQ3jrffA/6HLpYfIHEblR75foP/zkAlE5+kPXhZMRM6CyR5sgLAZ6A8cYY1vao\nQwaaY33SdL3fPMJsIU5taQ1z7HQ8EU+GI2KNrCy3MEPqCe6fbT5dHBQ+SqJIKqi9\nNONiS7WNDBnut8STPlPa9MzZTr1fyG1iWPkYFTnoCQ6a8HJOrx/XdbLCBSVp3jnN\nbSTUpLXLvQPpKwr+jSxbL/ditaRruCU8eJVghrNBOiNX2jJOWz5+djdelMN8voGZ\nP4uCr04GiJ0MAkRSAd4/0NOzJHWDTG4t+ywCBYmSTuQ60p1j5Bw=\n=TB7k\n-----END PGP SIGNATURE-----", "payload": "tree b53c2cbefb15c9b95b2c52658f7f319862ff272e\nparent acdafa0fb13a8d1e1e76ce4bf4725104a0b749cb\nauthor Markus Wein <markus.wein@nuclearsquid.com> 1531308723 +0200\ncommitter Markus Wein <markus.wein@nuclearsquid.com> 1531766248 +0200\n\nDocument From conversions for CString and CStr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f", "html_url": "https://github.com/rust-lang/rust/commit/b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f/comments", "author": {"login": "cypher", "id": 978, "node_id": "MDQ6VXNlcjk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypher", "html_url": "https://github.com/cypher", "followers_url": "https://api.github.com/users/cypher/followers", "following_url": "https://api.github.com/users/cypher/following{/other_user}", "gists_url": "https://api.github.com/users/cypher/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypher/subscriptions", "organizations_url": "https://api.github.com/users/cypher/orgs", "repos_url": "https://api.github.com/users/cypher/repos", "events_url": "https://api.github.com/users/cypher/events{/privacy}", "received_events_url": "https://api.github.com/users/cypher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cypher", "id": 978, "node_id": "MDQ6VXNlcjk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypher", "html_url": "https://github.com/cypher", "followers_url": "https://api.github.com/users/cypher/followers", "following_url": "https://api.github.com/users/cypher/following{/other_user}", "gists_url": "https://api.github.com/users/cypher/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypher/subscriptions", "organizations_url": "https://api.github.com/users/cypher/orgs", "repos_url": "https://api.github.com/users/cypher/repos", "events_url": "https://api.github.com/users/cypher/events{/privacy}", "received_events_url": "https://api.github.com/users/cypher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acdafa0fb13a8d1e1e76ce4bf4725104a0b749cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/acdafa0fb13a8d1e1e76ce4bf4725104a0b749cb", "html_url": "https://github.com/rust-lang/rust/commit/acdafa0fb13a8d1e1e76ce4bf4725104a0b749cb"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "14ace795819248929dffc167c1625aaebcf096c4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b81ee0b370ebc1a9e15a5c6a68b2201ddbdaa36f", "patch": "@@ -642,6 +642,11 @@ impl fmt::Debug for CString {\n \n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl From<CString> for Vec<u8> {\n+    /// Converts a [`CString`] into a [`Vec`]`<u8>`.\n+    /// The conversion consumes the [`CString`], and removes the terminating NUL byte.\n+    ///\n+    /// [`Vec`]: ../vec/struct.Vec.html\n+    /// [`CString`]: ../ffi/struct.CString.html\n     #[inline]\n     fn from(s: CString) -> Vec<u8> {\n         s.into_bytes()\n@@ -700,6 +705,10 @@ impl<'a> From<&'a CStr> for Box<CStr> {\n \n #[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]\n impl From<Box<CStr>> for CString {\n+    /// Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.\n+    ///\n+    /// [`Box`]: ../boxed/struct.Box.html\n+    /// [`CString`]: ../ffi/struct.CString.html\n     #[inline]\n     fn from(s: Box<CStr>) -> CString {\n         s.into_c_string()\n@@ -716,6 +725,10 @@ impl Clone for Box<CStr> {\n \n #[stable(feature = \"box_from_c_string\", since = \"1.20.0\")]\n impl From<CString> for Box<CStr> {\n+    /// Converts a [`CString`] into a [`Box`]`<CStr>` without copying or allocating.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`Box`]: ../boxed/struct.Box.html\n     #[inline]\n     fn from(s: CString) -> Box<CStr> {\n         s.into_boxed_c_str()\n@@ -748,6 +761,10 @@ impl<'a> From<&'a CString> for Cow<'a, CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n+    /// Converts a [`CString`] into a [`Arc`]`<CStr>` without copying or allocating.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`Arc`]: ../sync/struct.Arc.html\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.into_inner());\n@@ -766,6 +783,10 @@ impl<'a> From<&'a CStr> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n+    /// Converts a [`CString`] into a [`Rc`]`<CStr>` without copying or allocating.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`Rc`]: ../rc/struct.Rc.html\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.into_inner());\n@@ -839,6 +860,10 @@ impl fmt::Display for NulError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<NulError> for io::Error {\n+    /// Converts a [`NulError`] into a [`io::Error`].\n+    ///\n+    /// [`NulError`]: ../ffi/struct.NulError.html\n+    /// [`io::Error`]: ../io/struct.Error.html\n     fn from(_: NulError) -> io::Error {\n         io::Error::new(io::ErrorKind::InvalidInput,\n                        \"data provided contains a nul byte\")"}]}