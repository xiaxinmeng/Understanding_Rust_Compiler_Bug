{"sha": "9b26895346029c817079033fe95727060b73f655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjY4OTUzNDYwMjljODE3MDc5MDMzZmU5NTcyNzA2MGI3M2Y2NTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-10T23:34:25Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:39Z"}, "message": "Generalise SIMD casting to unequal bitwidths.", "tree": {"sha": "18d348d3d518ee866128a4992dc10a60c1cf098b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d348d3d518ee866128a4992dc10a60c1cf098b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b26895346029c817079033fe95727060b73f655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b26895346029c817079033fe95727060b73f655", "html_url": "https://github.com/rust-lang/rust/commit/9b26895346029c817079033fe95727060b73f655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b26895346029c817079033fe95727060b73f655/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe138cac07bff2cc4185a9a5a71c677f88f0562", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe138cac07bff2cc4185a9a5a71c677f88f0562", "html_url": "https://github.com/rust-lang/rust/commit/4fe138cac07bff2cc4185a9a5a71c677f88f0562"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "735d5d224845efb09f531b6e876871323941d426", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 87, "deletions": 10, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9b26895346029c817079033fe95727060b73f655/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b26895346029c817079033fe95727060b73f655/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=9b26895346029c817079033fe95727060b73f655", "patch": "@@ -1457,13 +1457,73 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         if in_ == out { return llargs[0]; }\n \n         match (&in_.sty, &out.sty) {\n+            (&ty::TyInt(lhs), &ty::TyInt(rhs)) => {\n+                match (lhs, rhs) {\n+                    (ast::TyI8, ast::TyI8) |\n+                    (ast::TyI16, ast::TyI16) |\n+                    (ast::TyI32, ast::TyI32) |\n+                    (ast::TyI64, ast::TyI64) => return llargs[0],\n+\n+                    (ast::TyI8, ast::TyI16) |\n+                    (ast::TyI8, ast::TyI32) |\n+                    (ast::TyI8, ast::TyI64) |\n+                    (ast::TyI16, ast::TyI32) |\n+                    (ast::TyI16, ast::TyI64) |\n+                    (ast::TyI32, ast::TyI64) => return SExt(bcx, llargs[0], llret_ty),\n+\n+                    (ast::TyI16, ast::TyI8) |\n+                    (ast::TyI32, ast::TyI8) |\n+                    (ast::TyI32, ast::TyI16) |\n+                    (ast::TyI64, ast::TyI8) |\n+                    (ast::TyI64, ast::TyI16) |\n+                    (ast::TyI64, ast::TyI32) => return Trunc(bcx, llargs[0], llret_ty),\n+                    _ => {}\n+                }\n+            }\n+            (&ty::TyUint(lhs), &ty::TyUint(rhs)) => {\n+                match (lhs, rhs) {\n+                    (ast::TyU8, ast::TyU8) |\n+                    (ast::TyU16, ast::TyU16) |\n+                    (ast::TyU32, ast::TyU32) |\n+                    (ast::TyU64, ast::TyU64) => return llargs[0],\n+\n+                    (ast::TyU8, ast::TyU16) |\n+                    (ast::TyU8, ast::TyU32) |\n+                    (ast::TyU8, ast::TyU64) |\n+                    (ast::TyU16, ast::TyU32) |\n+                    (ast::TyU16, ast::TyU64) |\n+                    (ast::TyU32, ast::TyU64) => return ZExt(bcx, llargs[0], llret_ty),\n+\n+                    (ast::TyU16, ast::TyU8) |\n+                    (ast::TyU32, ast::TyU8) |\n+                    (ast::TyU32, ast::TyU16) |\n+                    (ast::TyU64, ast::TyU8) |\n+                    (ast::TyU64, ast::TyU16) |\n+                    (ast::TyU64, ast::TyU32) => return Trunc(bcx, llargs[0], llret_ty),\n+                    _ => {}\n+                }\n+            }\n             (&ty::TyInt(lhs), &ty::TyUint(rhs)) => {\n                 match (lhs, rhs) {\n                     (ast::TyI8, ast::TyU8) |\n                     (ast::TyI16, ast::TyU16) |\n                     (ast::TyI32, ast::TyU32) |\n                     (ast::TyI64, ast::TyU64) => return llargs[0],\n-                    _ => {},\n+\n+                    (ast::TyI8, ast::TyU16) |\n+                    (ast::TyI8, ast::TyU32) |\n+                    (ast::TyI8, ast::TyU64) |\n+                    (ast::TyI16, ast::TyU32) |\n+                    (ast::TyI16, ast::TyU64) |\n+                    (ast::TyI32, ast::TyU64) => return SExt(bcx, llargs[0], llret_ty),\n+\n+                    (ast::TyI16, ast::TyU8) |\n+                    (ast::TyI32, ast::TyU8) |\n+                    (ast::TyI32, ast::TyU16) |\n+                    (ast::TyI64, ast::TyU8) |\n+                    (ast::TyI64, ast::TyU16) |\n+                    (ast::TyI64, ast::TyU32) => return Trunc(bcx, llargs[0], llret_ty),\n+                    _ => {}\n                 }\n             }\n             (&ty::TyUint(lhs), &ty::TyInt(rhs)) => {\n@@ -1472,26 +1532,43 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     (ast::TyU16, ast::TyI16) |\n                     (ast::TyU32, ast::TyI32) |\n                     (ast::TyU64, ast::TyI64) => return llargs[0],\n-                    _ => {},\n+\n+                    (ast::TyU8, ast::TyI16) |\n+                    (ast::TyU8, ast::TyI32) |\n+                    (ast::TyU8, ast::TyI64) |\n+                    (ast::TyU16, ast::TyI32) |\n+                    (ast::TyU16, ast::TyI64) |\n+                    (ast::TyU32, ast::TyI64) => return ZExt(bcx, llargs[0], llret_ty),\n+\n+                    (ast::TyU16, ast::TyI8) |\n+                    (ast::TyU32, ast::TyI8) |\n+                    (ast::TyU32, ast::TyI16) |\n+                    (ast::TyU64, ast::TyI8) |\n+                    (ast::TyU64, ast::TyI16) |\n+                    (ast::TyU64, ast::TyI32) => return Trunc(bcx, llargs[0], llret_ty),\n+                    _ => {}\n                 }\n             }\n-            (&ty::TyInt(ast::TyI32), &ty::TyFloat(ast::TyF32)) |\n-            (&ty::TyInt(ast::TyI64), &ty::TyFloat(ast::TyF64)) => {\n+\n+            (&ty::TyInt(_), &ty::TyFloat(_)) => {\n                 return SIToFP(bcx, llargs[0], llret_ty)\n             }\n-            (&ty::TyUint(ast::TyU32), &ty::TyFloat(ast::TyF32)) |\n-            (&ty::TyUint(ast::TyU64), &ty::TyFloat(ast::TyF64)) => {\n+            (&ty::TyUint(_), &ty::TyFloat(_)) => {\n                 return UIToFP(bcx, llargs[0], llret_ty)\n             }\n \n-            (&ty::TyFloat(ast::TyF32), &ty::TyInt(ast::TyI32)) |\n-            (&ty::TyFloat(ast::TyF64), &ty::TyInt(ast::TyI64)) => {\n+            (&ty::TyFloat(_), &ty::TyInt(_)) => {\n                 return FPToSI(bcx, llargs[0], llret_ty)\n             }\n-            (&ty::TyFloat(ast::TyF32), &ty::TyUint(ast::TyU32)) |\n-            (&ty::TyFloat(ast::TyF64), &ty::TyUint(ast::TyU64)) => {\n+            (&ty::TyFloat(_), &ty::TyUint(_)) => {\n                 return FPToUI(bcx, llargs[0], llret_ty)\n             }\n+            (&ty::TyFloat(ast::TyF32), &ty::TyFloat(ast::TyF64)) => {\n+                return FPExt(bcx, llargs[0], llret_ty)\n+            }\n+            (&ty::TyFloat(ast::TyF64), &ty::TyFloat(ast::TyF32)) => {\n+                return FPTrunc(bcx, llargs[0], llret_ty)\n+            }\n             _ => {}\n         }\n         require!(false, \"SIMD cast intrinsic monomorphised with incompatible cast\");"}]}