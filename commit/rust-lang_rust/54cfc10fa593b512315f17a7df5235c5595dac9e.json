{"sha": "54cfc10fa593b512315f17a7df5235c5595dac9e", "node_id": "C_kwDOAAsO6NoAKDU0Y2ZjMTBmYTU5M2I1MTIzMTVmMTdhN2RmNTIzNWM1NTk1ZGFjOWU", "commit": {"author": {"name": "Zephaniah Ong", "email": "zealorez@gmail.com", "date": "2023-02-14T02:38:18Z"}, "committer": {"name": "Zephaniah Ong", "email": "zealorez@gmail.com", "date": "2023-02-15T07:19:49Z"}, "message": "make x look for x.py if shell script does not exist\n\nbump up x version\n\nRefactor code", "tree": {"sha": "9aec5ec143dc15b2c88ffa2cac18d4164142320f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aec5ec143dc15b2c88ffa2cac18d4164142320f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54cfc10fa593b512315f17a7df5235c5595dac9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54cfc10fa593b512315f17a7df5235c5595dac9e", "html_url": "https://github.com/rust-lang/rust/commit/54cfc10fa593b512315f17a7df5235c5595dac9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54cfc10fa593b512315f17a7df5235c5595dac9e/comments", "author": {"login": "zephaniahong", "id": 33389011, "node_id": "MDQ6VXNlcjMzMzg5MDEx", "avatar_url": "https://avatars.githubusercontent.com/u/33389011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zephaniahong", "html_url": "https://github.com/zephaniahong", "followers_url": "https://api.github.com/users/zephaniahong/followers", "following_url": "https://api.github.com/users/zephaniahong/following{/other_user}", "gists_url": "https://api.github.com/users/zephaniahong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zephaniahong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zephaniahong/subscriptions", "organizations_url": "https://api.github.com/users/zephaniahong/orgs", "repos_url": "https://api.github.com/users/zephaniahong/repos", "events_url": "https://api.github.com/users/zephaniahong/events{/privacy}", "received_events_url": "https://api.github.com/users/zephaniahong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zephaniahong", "id": 33389011, "node_id": "MDQ6VXNlcjMzMzg5MDEx", "avatar_url": "https://avatars.githubusercontent.com/u/33389011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zephaniahong", "html_url": "https://github.com/zephaniahong", "followers_url": "https://api.github.com/users/zephaniahong/followers", "following_url": "https://api.github.com/users/zephaniahong/following{/other_user}", "gists_url": "https://api.github.com/users/zephaniahong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zephaniahong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zephaniahong/subscriptions", "organizations_url": "https://api.github.com/users/zephaniahong/orgs", "repos_url": "https://api.github.com/users/zephaniahong/repos", "events_url": "https://api.github.com/users/zephaniahong/events{/privacy}", "received_events_url": "https://api.github.com/users/zephaniahong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7089e0dd3e988270f34f182d3749ea5fff5a18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7089e0dd3e988270f34f182d3749ea5fff5a18f", "html_url": "https://github.com/rust-lang/rust/commit/b7089e0dd3e988270f34f182d3749ea5fff5a18f"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "84a42ca36ef1c3c48692b93444dcf46f0d0897fc", "filename": "src/tools/x/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54cfc10fa593b512315f17a7df5235c5595dac9e/src%2Ftools%2Fx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54cfc10fa593b512315f17a7df5235c5595dac9e/src%2Ftools%2Fx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.toml?ref=54cfc10fa593b512315f17a7df5235c5595dac9e", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"x\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n description = \"Run x.py slightly more conveniently\"\n edition = \"2021\"\n publish = false"}, {"sha": "5da8a2888ec8385c6c6ab54a0189a787182e72c5", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/54cfc10fa593b512315f17a7df5235c5595dac9e/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54cfc10fa593b512315f17a7df5235c5595dac9e/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=54cfc10fa593b512315f17a7df5235c5595dac9e", "patch": "@@ -9,11 +9,47 @@\n //! We also don't use `pwsh` on Windows, because it is not installed by default;\n \n use std::{\n-    env, io,\n+    env::{self, consts::EXE_EXTENSION},\n+    io,\n     path::Path,\n     process::{self, Command, ExitStatus},\n };\n \n+const PYTHON: &str = \"python\";\n+const PYTHON2: &str = \"python2\";\n+const PYTHON3: &str = \"python3\";\n+\n+fn python() -> &'static str {\n+    let val = match env::var_os(\"PATH\") {\n+        Some(val) => val,\n+        None => return PYTHON,\n+    };\n+\n+    let mut python2 = false;\n+    let mut python3 = false;\n+\n+    for dir in env::split_paths(&val) {\n+        // `python` should always take precedence over python2 / python3 if it exists\n+        if dir.join(PYTHON).with_extension(EXE_EXTENSION).exists() {\n+            return PYTHON;\n+        }\n+\n+        python2 |= dir.join(PYTHON2).with_extension(EXE_EXTENSION).exists();\n+        python3 |= dir.join(PYTHON3).with_extension(EXE_EXTENSION).exists();\n+    }\n+\n+    // try 3 before 2\n+    if python3 {\n+        PYTHON3\n+    } else if python2 {\n+        PYTHON2\n+    } else {\n+        // Python was not found on path, so exit\n+        eprintln!(\"Unable to find python in your PATH. Please check it is installed.\");\n+        process::exit(1);\n+    }\n+}\n+\n #[cfg(windows)]\n fn x_command(dir: &Path) -> Command {\n     let mut cmd = Command::new(\"powershell.exe\");\n@@ -51,6 +87,17 @@ fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n     command.status()\n }\n \n+fn handle_result(result: io::Result<ExitStatus>, cmd: Command) {\n+    match result {\n+        Err(error) => {\n+            eprintln!(\"Failed to invoke `{:?}`: {}\", cmd, error);\n+        }\n+        Ok(status) => {\n+            process::exit(status.code().unwrap_or(1));\n+        }\n+    }\n+}\n+\n fn main() {\n     match env::args().skip(1).next().as_deref() {\n         Some(\"--wrapper-version\") => {\n@@ -70,22 +117,19 @@ fn main() {\n \n     for dir in current.ancestors() {\n         let candidate = dir.join(\"x.py\");\n-\n         if candidate.exists() {\n-            let mut cmd = x_command(dir);\n-\n-            cmd.args(env::args().skip(1)).current_dir(dir);\n-\n-            let result = exec_or_status(&mut cmd);\n-\n-            match result {\n-                Err(error) => {\n-                    eprintln!(\"Failed to invoke `{:?}`: {}\", cmd, error);\n-                }\n-                Ok(status) => {\n-                    process::exit(status.code().unwrap_or(1));\n-                }\n+            let shell_script_candidate = dir.join(\"x\");\n+            let mut cmd: Command;\n+            if shell_script_candidate.exists() {\n+                cmd = x_command(dir);\n+                cmd.args(env::args().skip(1)).current_dir(dir);\n+            } else {\n+                // For older checkouts that do not have the x shell script, default to python\n+                cmd = Command::new(python());\n+                cmd.arg(&candidate).args(env::args().skip(1)).current_dir(dir);\n             }\n+            let result = exec_or_status(&mut cmd);\n+            handle_result(result, cmd);\n         }\n     }\n "}]}