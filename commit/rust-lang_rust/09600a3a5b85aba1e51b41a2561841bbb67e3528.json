{"sha": "09600a3a5b85aba1e51b41a2561841bbb67e3528", "node_id": "C_kwDOAAsO6NoAKDA5NjAwYTNhNWI4NWFiYTFlNTFiNDFhMjU2MTg0MWJiYjY3ZTM1Mjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T12:35:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T12:35:18Z"}, "message": "Auto merge of #13268 - Veykril:simplify, r=Veykril\n\nSimplify", "tree": {"sha": "bf91f782f63c056d31cab1554a6a8308183e8ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf91f782f63c056d31cab1554a6a8308183e8ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09600a3a5b85aba1e51b41a2561841bbb67e3528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09600a3a5b85aba1e51b41a2561841bbb67e3528", "html_url": "https://github.com/rust-lang/rust/commit/09600a3a5b85aba1e51b41a2561841bbb67e3528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09600a3a5b85aba1e51b41a2561841bbb67e3528/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bde76b9abb3aade263f8381c1afd2677e53f4d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde76b9abb3aade263f8381c1afd2677e53f4d23", "html_url": "https://github.com/rust-lang/rust/commit/bde76b9abb3aade263f8381c1afd2677e53f4d23"}, {"sha": "027bfd68ba6258dcc26a9d43372d869308d512e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/027bfd68ba6258dcc26a9d43372d869308d512e2", "html_url": "https://github.com/rust-lang/rust/commit/027bfd68ba6258dcc26a9d43372d869308d512e2"}], "stats": {"total": 120, "additions": 58, "deletions": 62}, "files": [{"sha": "87e22c2138b72abdfacacab338e9a49241b43b13", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -115,7 +115,7 @@ pub(super) struct SourceToDefCtx<'a, 'b> {\n }\n \n impl SourceToDefCtx<'_, '_> {\n-    pub(super) fn file_to_def(&mut self, file: FileId) -> SmallVec<[ModuleId; 1]> {\n+    pub(super) fn file_to_def(&self, file: FileId) -> SmallVec<[ModuleId; 1]> {\n         let _p = profile::span(\"SourceBinder::to_module_def\");\n         let mut mods = SmallVec::new();\n         for &crate_id in self.db.relevant_crates(file).iter() {\n@@ -130,7 +130,7 @@ impl SourceToDefCtx<'_, '_> {\n         mods\n     }\n \n-    pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n+    pub(super) fn module_to_def(&self, src: InFile<ast::Module>) -> Option<ModuleId> {\n         let _p = profile::span(\"module_to_def\");\n         let parent_declaration = src\n             .syntax()\n@@ -151,7 +151,7 @@ impl SourceToDefCtx<'_, '_> {\n         Some(def_map.module_id(child_id))\n     }\n \n-    pub(super) fn source_file_to_def(&mut self, src: InFile<ast::SourceFile>) -> Option<ModuleId> {\n+    pub(super) fn source_file_to_def(&self, src: InFile<ast::SourceFile>) -> Option<ModuleId> {\n         let _p = profile::span(\"source_file_to_def\");\n         let file_id = src.file_id.original_file(self.db.upcast());\n         self.file_to_def(file_id).get(0).copied()"}, {"sha": "e7d0a8be7f57316f2ce92ade5164fc4c9e3f996a", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -87,9 +87,9 @@ fn punctuation(\n     let parent = token.parent();\n     let parent_kind = parent.as_ref().map_or(EOF, SyntaxNode::kind);\n     match (kind, parent_kind) {\n-        (T![?], _) => HlTag::Operator(HlOperator::Other) | HlMod::ControlFlow,\n+        (T![?], TRY_EXPR) => HlTag::Operator(HlOperator::Other) | HlMod::ControlFlow,\n         (T![&], BIN_EXPR) => HlOperator::Bitwise.into(),\n-        (T![&], _) => {\n+        (T![&], REF_EXPR) => {\n             let h = HlTag::Operator(HlOperator::Other).into();\n             let is_unsafe = parent\n                 .and_then(ast::RefExpr::cast)\n@@ -100,7 +100,9 @@ fn punctuation(\n                 h\n             }\n         }\n-        (T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] | T![.], _) => HlOperator::Other.into(),\n+        (T![::] | T![->] | T![=>] | T![..] | T![..=] | T![=] | T![@] | T![.], _) => {\n+            HlOperator::Other.into()\n+        }\n         (T![!], MACRO_CALL | MACRO_RULES) => HlPunct::MacroBang.into(),\n         (T![!], NEVER_TYPE) => HlTag::BuiltinType.into(),\n         (T![!], PREFIX_EXPR) => HlOperator::Logical.into(),\n@@ -129,15 +131,14 @@ fn punctuation(\n         (T![+=] | T![-=] | T![*=] | T![/=] | T![%=], BIN_EXPR) => {\n             Highlight::from(HlOperator::Arithmetic) | HlMod::Mutable\n         }\n-        (T![|] | T![&] | T![!] | T![^] | T![>>] | T![<<], BIN_EXPR) => HlOperator::Bitwise.into(),\n+        (T![|] | T![&] | T![^] | T![>>] | T![<<], BIN_EXPR) => HlOperator::Bitwise.into(),\n         (T![|=] | T![&=] | T![^=] | T![>>=] | T![<<=], BIN_EXPR) => {\n             Highlight::from(HlOperator::Bitwise) | HlMod::Mutable\n         }\n         (T![&&] | T![||], BIN_EXPR) => HlOperator::Logical.into(),\n         (T![>] | T![<] | T![==] | T![>=] | T![<=] | T![!=], BIN_EXPR) => {\n             HlOperator::Comparison.into()\n         }\n-        (_, PREFIX_EXPR | BIN_EXPR | RANGE_EXPR | RANGE_PAT | REST_PAT) => HlOperator::Other.into(),\n         (_, ATTR) => HlTag::AttributeBracket.into(),\n         (kind, _) => match kind {\n             T!['['] | T![']'] => HlPunct::Bracket,"}, {"sha": "9ed65fbc8548d1dba4f1a50bbe2d51f175ccc6f8", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -48,15 +48,15 @@\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">t_is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">t_is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">t_is_not_static</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "18045f1f55afdb2742da743e2eabe6f8aff6ab7f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -125,7 +125,7 @@\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference\">foo</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n         <span class=\"bool_literal\">true</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "9f2b1926b511d270a9ea5e7ad926ec5c51722788", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -61,11 +61,11 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -75,11 +75,11 @@\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword consuming mutable\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -96,11 +96,11 @@\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "abcd80c280bf3d072f990b69352e83241544f8c1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -42,7 +42,7 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"parenthesis\">(</span><span class=\"value_param declaration reference\">ra_fixture</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"parenthesis\">(</span><span class=\"value_param declaration reference\">ra_fixture</span><span class=\"colon\">:</span> <span class=\"punctuation\">&</span><span class=\"builtin_type\">str</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r#\"</span>"}, {"sha": "f98e0b1cda6e920c6a6b884d366d78f33d5cdff8", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_lifetimes.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -45,8 +45,8 @@\n <pre><code>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"comma\">,</span> <span class=\"lifetime declaration\">'b</span><span class=\"comma\">,</span> <span class=\"lifetime declaration\">'c</span><span class=\"angle\">&gt;</span> <span class=\"keyword\">where</span> <span class=\"lifetime\">'a</span><span class=\"colon\">:</span> <span class=\"lifetime\">'a</span><span class=\"comma\">,</span> <span class=\"lifetime\">'static</span><span class=\"colon\">:</span> <span class=\"lifetime\">'static</span> <span class=\"brace\">{</span>\n-    <span class=\"field declaration\">field</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"lifetime\">'a</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n-    <span class=\"field declaration\">field2</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"lifetime\">'static</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+    <span class=\"field declaration\">field</span><span class=\"colon\">:</span> <span class=\"punctuation\">&</span><span class=\"lifetime\">'a</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+    <span class=\"field declaration\">field2</span><span class=\"colon\">:</span> <span class=\"punctuation\">&</span><span class=\"lifetime\">'static</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n <span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"angle\">&gt;</span> <span class=\"struct\">Foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime\">'_</span><span class=\"comma\">,</span> <span class=\"lifetime\">'a</span><span class=\"comma\">,</span> <span class=\"lifetime\">'static</span><span class=\"angle\">&gt;</span>\n <span class=\"keyword\">where</span>"}, {"sha": "a626cda3fe8b437c98c09aa9c8f468c2534fa1d0", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -62,16 +62,16 @@\n         <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n             <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"parenthesis\">(</span><span class=\"string_literal\">\"explicit panic\"</span><span class=\"parenthesis\">)</span>\n         <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n-        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>literal <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>literal <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"punctuation\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n             <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"parenthesis\">)</span>\n         <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n         <span class=\"comment\">// Use `panic_str` instead of `panic_display::&lt;&str&gt;` for non_fmt_panic lint.</span>\n-        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"punctuation\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n             <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_str<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"parenthesis\">)</span>\n         <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n         <span class=\"comment\">// Special-case the single-argument case for const_panic.</span>\n-        <span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{}\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n-            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_display<span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{}\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"punctuation\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_display<span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span>\n         <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n         <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n             <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_fmt<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>const_format_args<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span>"}, {"sha": "1992bdc6ae35f3861fbef26415ebdca75be2ae95", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -49,7 +49,7 @@\n <span class=\"brace\">}</span>\n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">unsafe_deref</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-        <span class=\"punctuation\">*</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">as</span> <span class=\"punctuation\">*</span><span class=\"keyword\">const</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span>\n+        <span class=\"punctuation\">*</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">as</span> <span class=\"punctuation\">*</span><span class=\"keyword\">const</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">MUT_GLOBAL</span><span class=\"colon\">:</span> <span class=\"struct\">Struct</span> <span class=\"operator\">=</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span> <span class=\"field\">field</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n@@ -63,7 +63,7 @@\n \n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Struct</span> <span class=\"brace\">{</span> <span class=\"field declaration\">field</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">}</span>\n <span class=\"keyword\">impl</span> <span class=\"struct\">Struct</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n@@ -78,11 +78,11 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">unsafe_trait_bound</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"colon\">:</span> <span class=\"trait\">UnsafeTrait</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">_</span><span class=\"colon\">:</span> <span class=\"type_param\">T</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>"}, {"sha": "2c0af99940f971d132d5a3fc26824b0f341c12f0", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09600a3a5b85aba1e51b41a2561841bbb67e3528/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=09600a3a5b85aba1e51b41a2561841bbb67e3528", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n     sysroot::SysrootCrate,\n-    utf8_stdout, CargoConfig, CargoWorkspace, ManifestPath, ProjectJson, ProjectManifest, Sysroot,\n-    TargetKind, WorkspaceBuildScripts,\n+    utf8_stdout, CargoConfig, CargoWorkspace, ManifestPath, Package, ProjectJson, ProjectManifest,\n+    Sysroot, TargetKind, WorkspaceBuildScripts,\n };\n \n /// A set of cfg-overrides per crate.\n@@ -315,6 +315,13 @@ impl ProjectWorkspace {\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n+        let mk_sysroot = |sysroot: Option<&Sysroot>| {\n+            sysroot.map(|sysroot| PackageRoot {\n+                is_local: false,\n+                include: vec![sysroot.src_root().to_path_buf()],\n+                exclude: Vec::new(),\n+            })\n+        };\n         match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg: _ } => project\n                 .crates()\n@@ -325,13 +332,7 @@ impl ProjectWorkspace {\n                 })\n                 .collect::<FxHashSet<_>>()\n                 .into_iter()\n-                .chain(sysroot.as_ref().into_iter().flat_map(|sysroot| {\n-                    sysroot.crates().map(move |krate| PackageRoot {\n-                        is_local: false,\n-                        include: vec![sysroot[krate].root.parent().to_path_buf()],\n-                        exclude: Vec::new(),\n-                    })\n-                }))\n+                .chain(mk_sysroot(sysroot.as_ref()))\n                 .collect::<Vec<_>>(),\n             ProjectWorkspace::Cargo {\n                 cargo,\n@@ -380,11 +381,7 @@ impl ProjectWorkspace {\n                         }\n                         PackageRoot { is_local, include, exclude }\n                     })\n-                    .chain(sysroot.iter().map(|sysroot| PackageRoot {\n-                        is_local: false,\n-                        include: vec![sysroot.src_root().to_path_buf()],\n-                        exclude: Vec::new(),\n-                    }))\n+                    .chain(mk_sysroot(sysroot.as_ref()))\n                     .chain(rustc.iter().flat_map(|rustc| {\n                         rustc.packages().map(move |krate| PackageRoot {\n                             is_local: false,\n@@ -401,11 +398,7 @@ impl ProjectWorkspace {\n                     include: vec![detached_file.clone()],\n                     exclude: Vec::new(),\n                 })\n-                .chain(sysroot.crates().map(|krate| PackageRoot {\n-                    is_local: false,\n-                    include: vec![sysroot[krate].root.parent().to_path_buf()],\n-                    exclude: Vec::new(),\n-                }))\n+                .chain(mk_sysroot(Some(sysroot)))\n                 .collect(),\n         }\n     }\n@@ -639,6 +632,8 @@ fn cargo_to_crate_graph(\n                     lib_tgt = Some((crate_id, cargo[tgt].name.clone()));\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                 }\n+                // Even crates that don't set proc-macro = true are allowed to depend on proc_macro\n+                // (just none of the APIs work when called outside of a proc macro).\n                 if let Some(proc_macro) = libproc_macro {\n                     add_dep_with_prelude(\n                         &mut crate_graph,\n@@ -654,19 +649,19 @@ fn cargo_to_crate_graph(\n         }\n \n         // Set deps to the core, std and to the lib target of the current package\n-        for (from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n+        for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n             // Add sysroot deps first so that a lib target named `core` etc. can overwrite them.\n-            public_deps.add(*from, &mut crate_graph);\n+            public_deps.add(from, &mut crate_graph);\n \n             if let Some((to, name)) = lib_tgt.clone() {\n-                if to != *from && *kind != TargetKind::BuildScript {\n+                if to != from && kind != TargetKind::BuildScript {\n                     // (build script can not depend on its library target)\n \n                     // For root projects with dashes in their name,\n                     // cargo metadata does not do any normalization,\n                     // so we do it ourselves currently\n                     let name = CrateName::normalize_dashes(&name);\n-                    add_dep(&mut crate_graph, *from, name, to);\n+                    add_dep(&mut crate_graph, from, name, to);\n                 }\n             }\n         }\n@@ -678,17 +673,17 @@ fn cargo_to_crate_graph(\n         for dep in cargo[pkg].dependencies.iter() {\n             let name = CrateName::new(&dep.name).unwrap();\n             if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n-                for (from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n-                    if dep.kind == DepKind::Build && *kind != TargetKind::BuildScript {\n+                for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n+                    if dep.kind == DepKind::Build && kind != TargetKind::BuildScript {\n                         // Only build scripts may depend on build dependencies.\n                         continue;\n                     }\n-                    if dep.kind != DepKind::Build && *kind == TargetKind::BuildScript {\n+                    if dep.kind != DepKind::Build && kind == TargetKind::BuildScript {\n                         // Build scripts may only depend on build dependencies.\n                         continue;\n                     }\n \n-                    add_dep(&mut crate_graph, *from, name.clone(), to)\n+                    add_dep(&mut crate_graph, from, name.clone(), to)\n                 }\n             }\n         }\n@@ -699,9 +694,9 @@ fn cargo_to_crate_graph(\n         // and create dependencies on them for the crates which opt-in to that\n         if let Some(rustc_workspace) = rustc {\n             handle_rustc_crates(\n+                &mut crate_graph,\n                 rustc_workspace,\n                 load,\n-                &mut crate_graph,\n                 &cfg_options,\n                 override_cfg,\n                 load_proc_macro,\n@@ -761,16 +756,16 @@ fn detached_files_to_crate_graph(\n }\n \n fn handle_rustc_crates(\n+    crate_graph: &mut CrateGraph,\n     rustc_workspace: &CargoWorkspace,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-    crate_graph: &mut CrateGraph,\n     cfg_options: &CfgOptions,\n     override_cfg: &CfgOverrides,\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n-    pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n+    pkg_to_lib_crate: &mut FxHashMap<Package, CrateId>,\n     public_deps: &SysrootPublicDeps,\n     cargo: &CargoWorkspace,\n-    pkg_crates: &FxHashMap<la_arena::Idx<crate::PackageData>, Vec<(CrateId, TargetKind)>>,\n+    pkg_crates: &FxHashMap<Package, Vec<(CrateId, TargetKind)>>,\n     build_scripts: &WorkspaceBuildScripts,\n ) {\n     let mut rustc_pkg_crates = FxHashMap::default();\n@@ -784,8 +779,8 @@ fn handle_rustc_crates(\n         let mut queue = VecDeque::new();\n         queue.push_back(root_pkg);\n         while let Some(pkg) = queue.pop_front() {\n-            // Don't duplicate packages if they are dependended on a diamond pattern\n-            // N.B. if this line is omitted, we try to analyse over 4_800_000 crates\n+            // Don't duplicate packages if they are dependent on a diamond pattern\n+            // N.B. if this line is omitted, we try to analyze over 4_800_000 crates\n             // which is not ideal\n             if rustc_pkg_crates.contains_key(&pkg) {\n                 continue;"}]}