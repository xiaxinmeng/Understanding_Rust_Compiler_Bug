{"sha": "e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "node_id": "C_kwDOAAsO6NoAKGUxNzg2NGUyZmZkNDI0NDkwNmE2ODk3MDVkOGUyY2U3ZmZhYzZkNmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-24T17:49:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-24T17:49:53Z"}, "message": "Auto merge of #9031 - evantypanski:manual_rem_euclid, r=Jarcho\n\nAdd [`manual_rem_euclid`] lint\n\nCloses #8883\n\nAdds a lint for checking manual use of `rem_euclid(n)`\n\nchangelog: Add [`manual_rem_euclid`] lint", "tree": {"sha": "b35fd2090c23b610fbc9e1a262be186fdfccd771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b35fd2090c23b610fbc9e1a262be186fdfccd771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "html_url": "https://github.com/rust-lang/rust/commit/e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1ae10876d3eaa5c982dd3daa083b7c2fc363b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1ae10876d3eaa5c982dd3daa083b7c2fc363b9", "html_url": "https://github.com/rust-lang/rust/commit/1d1ae10876d3eaa5c982dd3daa083b7c2fc363b9"}, {"sha": "df26c3f551fec5854e3acd140782b8f8c98e987b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df26c3f551fec5854e3acd140782b8f8c98e987b", "html_url": "https://github.com/rust-lang/rust/commit/df26c3f551fec5854e3acd140782b8f8c98e987b"}], "stats": {"total": 331, "additions": 325, "deletions": 6}, "files": [{"sha": "dcc96bc10b8aa67e3e6575015ca1a1cb952e718f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -3527,6 +3527,7 @@ Released 2018-09-13\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n [`manual_range_contains`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n+[`manual_rem_euclid`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_rem_euclid\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_split_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once\n [`manual_str_repeat`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat"}, {"sha": "a1565255b0b589417f93dab1ce48f4bba28f9447", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -135,6 +135,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n+    LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n     LintId::of(manual_strip::MANUAL_STRIP),\n     LintId::of(map_clone::MAP_CLONE),\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),"}, {"sha": "6370264a12a6486bd66412a31c0ea0634f09919f", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -24,6 +24,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(loops::MANUAL_FLATTEN),\n     LintId::of(loops::SINGLE_ELEMENT_LOOP),\n     LintId::of(loops::WHILE_LET_LOOP),\n+    LintId::of(manual_rem_euclid::MANUAL_REM_EUCLID),\n     LintId::of(manual_strip::MANUAL_STRIP),\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n     LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),"}, {"sha": "f706ba0620fdd73c4e6270f46316e5a20194e0da", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -254,6 +254,7 @@ store.register_lints(&[\n     manual_bits::MANUAL_BITS,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,\n+    manual_rem_euclid::MANUAL_REM_EUCLID,\n     manual_strip::MANUAL_STRIP,\n     map_clone::MAP_CLONE,\n     map_err_ignore::MAP_ERR_IGNORE,"}, {"sha": "70cf6be8b7cf6ef398e9fd3166bf75135e2620d4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -282,6 +282,7 @@ mod manual_async_fn;\n mod manual_bits;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n+mod manual_rem_euclid;\n mod manual_strip;\n mod map_clone;\n mod map_err_ignore;\n@@ -912,6 +913,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n     store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n+    store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "b5698965fc3ddf455bea45add3b5759877f9cff3", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -0,0 +1,123 @@\n+use clippy_utils::consts::{constant_full_int, FullInt};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{in_constant, meets_msrv, msrvs, path_to_local};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, Node, TyKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for an expression like `((x % 4) + 4) % 4` which is a common manual reimplementation\n+    /// of `x.rem_euclid(4)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// It's simpler and more readable.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x: i32 = 24;\n+    /// let rem = ((x % 4) + 4) % 4;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x: i32 = 24;\n+    /// let rem = x.rem_euclid(4);\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub MANUAL_REM_EUCLID,\n+    complexity,\n+    \"manually reimplementing `rem_euclid`\"\n+}\n+\n+pub struct ManualRemEuclid {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualRemEuclid {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualRemEuclid => [MANUAL_REM_EUCLID]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv, msrvs::REM_EUCLID) {\n+            return;\n+        }\n+\n+        if in_constant(cx, expr.hir_id) && !meets_msrv(self.msrv, msrvs::REM_EUCLID_CONST) {\n+            return;\n+        }\n+\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        if let ExprKind::Binary(op1, expr1, right) = expr.kind\n+            && op1.node == BinOpKind::Rem\n+            && let Some(const1) = check_for_unsigned_int_constant(cx, right)\n+            && let ExprKind::Binary(op2, left, right) = expr1.kind\n+            && op2.node == BinOpKind::Add\n+            && let Some((const2, expr2)) = check_for_either_unsigned_int_constant(cx, left, right)\n+            && let ExprKind::Binary(op3, expr3, right) = expr2.kind\n+            && op3.node == BinOpKind::Rem\n+            && let Some(const3) = check_for_unsigned_int_constant(cx, right)\n+            // Also ensures the const is nonzero since zero can't be a divisor\n+            && const1 == const2 && const2 == const3\n+            && let Some(hir_id) = path_to_local(expr3)\n+            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id) {\n+                // Apply only to params or locals with annotated types\n+                match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+                    Some(Node::Param(..)) => (),\n+                    Some(Node::Local(local)) => {\n+                        let Some(ty) = local.ty else { return };\n+                        if matches!(ty.kind, TyKind::Infer) {\n+                            return;\n+                        }\n+                    }\n+                    _ => return,\n+                };\n+\n+                let mut app = Applicability::MachineApplicable;\n+                let rem_of = snippet_with_applicability(cx, expr3.span, \"_\", &mut app);\n+                span_lint_and_sugg(\n+                    cx,\n+                    MANUAL_REM_EUCLID,\n+                    expr.span,\n+                    \"manual `rem_euclid` implementation\",\n+                    \"consider using\",\n+                    format!(\"{rem_of}.rem_euclid({const1})\"),\n+                    app,\n+                );\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}\n+\n+// Checks if either the left or right expressions can be an unsigned int constant and returns that\n+// constant along with the other expression unchanged if so\n+fn check_for_either_unsigned_int_constant<'a>(\n+    cx: &'a LateContext<'_>,\n+    left: &'a Expr<'_>,\n+    right: &'a Expr<'_>,\n+) -> Option<(u128, &'a Expr<'a>)> {\n+    check_for_unsigned_int_constant(cx, left)\n+        .map(|int_const| (int_const, right))\n+        .or_else(|| check_for_unsigned_int_constant(cx, right).map(|int_const| (int_const, left)))\n+}\n+\n+fn check_for_unsigned_int_constant<'a>(cx: &'a LateContext<'_>, expr: &'a Expr<'_>) -> Option<u128> {\n+    let Some(int_const) = constant_full_int(cx, cx.typeck_results(), expr) else { return None };\n+    match int_const {\n+        FullInt::S(s) => s.try_into().ok(),\n+        FullInt::U(u) => Some(u),\n+    }\n+}"}, {"sha": "43c0a03c42abd502332f2f639deb77ce83272805", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -13,7 +13,7 @@ macro_rules! msrv_aliases {\n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n     1,53,0 { OR_PATTERNS, MANUAL_BITS }\n-    1,52,0 { STR_SPLIT_ONCE }\n+    1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }\n     1,50,0 { BOOL_THEN }\n     1,47,0 { TAU }\n@@ -23,7 +23,7 @@ msrv_aliases! {\n     1,42,0 { MATCHES_MACRO, SLICE_PATTERNS, PTR_SLICE_RAW_PARTS }\n     1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n     1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }\n-    1,38,0 { POINTER_CAST }\n+    1,38,0 { POINTER_CAST, REM_EUCLID }\n     1,37,0 { TYPE_ALIAS_ENUM_VARIANTS }\n     1,36,0 { ITERATOR_COPIED }\n     1,35,0 { OPTION_COPIED, RANGE_CONTAINS }"}, {"sha": "5bd2c2799f03683cab8c787f8a5c827616e12bfc", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -127,3 +127,11 @@ macro_rules! ptr_as_ptr_cast {\n         $ptr as *const i32\n     };\n }\n+\n+#[macro_export]\n+macro_rules! manual_rem_euclid {\n+    () => {\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    };\n+}"}, {"sha": "5601c96c10b28fe4af39b4301a263bfd748d4946", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -0,0 +1,55 @@\n+// run-rustfix\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::manual_rem_euclid)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! internal_rem_euclid {\n+    () => {\n+        let value: i32 = 5;\n+        let _: i32 = value.rem_euclid(4);\n+    };\n+}\n+\n+fn main() {\n+    let value: i32 = 5;\n+\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = value.rem_euclid(4);\n+    let _: i32 = 1 + value.rem_euclid(4);\n+\n+    let _: i32 = (3 + value % 4) % 4;\n+    let _: i32 = (-4 + value % -4) % -4;\n+    let _: i32 = ((5 % 4) + 4) % 4;\n+\n+    // Make sure the lint does not trigger if it would cause an error, like with an ambiguous\n+    // integer type\n+    let not_annotated = 24;\n+    let _ = ((not_annotated % 4) + 4) % 4;\n+    let inferred: _ = 24;\n+    let _ = ((inferred % 4) + 4) % 4;\n+\n+    // For lint to apply the constant must always be on the RHS of the previous value for %\n+    let _: i32 = 4 % ((value % 4) + 4);\n+    let _: i32 = ((4 % value) + 4) % 4;\n+\n+    // Lint in internal macros\n+    internal_rem_euclid!();\n+\n+    // Do not lint in external macros\n+    manual_rem_euclid!();\n+}\n+\n+// Should lint for params too\n+pub fn rem_euclid_4(num: i32) -> i32 {\n+    num.rem_euclid(4)\n+}\n+\n+// Constant version came later, should still lint\n+pub const fn const_rem_euclid_4(num: i32) -> i32 {\n+    num.rem_euclid(4)\n+}"}, {"sha": "52135be26b73c290640ab8cde7eefb7dc0111dd5", "filename": "tests/ui/manual_rem_euclid.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -0,0 +1,55 @@\n+// run-rustfix\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::manual_rem_euclid)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! internal_rem_euclid {\n+    () => {\n+        let value: i32 = 5;\n+        let _: i32 = ((value % 4) + 4) % 4;\n+    };\n+}\n+\n+fn main() {\n+    let value: i32 = 5;\n+\n+    let _: i32 = ((value % 4) + 4) % 4;\n+    let _: i32 = (4 + (value % 4)) % 4;\n+    let _: i32 = (value % 4 + 4) % 4;\n+    let _: i32 = (4 + value % 4) % 4;\n+    let _: i32 = 1 + (4 + value % 4) % 4;\n+\n+    let _: i32 = (3 + value % 4) % 4;\n+    let _: i32 = (-4 + value % -4) % -4;\n+    let _: i32 = ((5 % 4) + 4) % 4;\n+\n+    // Make sure the lint does not trigger if it would cause an error, like with an ambiguous\n+    // integer type\n+    let not_annotated = 24;\n+    let _ = ((not_annotated % 4) + 4) % 4;\n+    let inferred: _ = 24;\n+    let _ = ((inferred % 4) + 4) % 4;\n+\n+    // For lint to apply the constant must always be on the RHS of the previous value for %\n+    let _: i32 = 4 % ((value % 4) + 4);\n+    let _: i32 = ((4 % value) + 4) % 4;\n+\n+    // Lint in internal macros\n+    internal_rem_euclid!();\n+\n+    // Do not lint in external macros\n+    manual_rem_euclid!();\n+}\n+\n+// Should lint for params too\n+pub fn rem_euclid_4(num: i32) -> i32 {\n+    ((num % 4) + 4) % 4\n+}\n+\n+// Constant version came later, should still lint\n+pub const fn const_rem_euclid_4(num: i32) -> i32 {\n+    ((num % 4) + 4) % 4\n+}"}, {"sha": "a237fd0213c1eeb187fea7ab79183d2b15950ee7", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -0,0 +1,57 @@\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:19:18\n+   |\n+LL |     let _: i32 = ((value % 4) + 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+   |\n+   = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:20:18\n+   |\n+LL |     let _: i32 = (4 + (value % 4)) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:21:18\n+   |\n+LL |     let _: i32 = (value % 4 + 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:22:18\n+   |\n+LL |     let _: i32 = (4 + value % 4) % 4;\n+   |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:23:22\n+   |\n+LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n+   |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:12:22\n+   |\n+LL |         let _: i32 = ((value % 4) + 4) % 4;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n+...\n+LL |     internal_rem_euclid!();\n+   |     ---------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:49:5\n+   |\n+LL |     ((num % 4) + 4) % 4\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n+\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:54:5\n+   |\n+LL |     ((num % 4) + 4) % 4\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "44e407bd1ab2ba5084c8d38bfa2df046de1829aa", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -155,6 +155,11 @@ fn cast_abs_to_unsigned() {\n     assert_eq!(10u32, x.abs() as u32);\n }\n \n+fn manual_rem_euclid() {\n+    let x: i32 = 10;\n+    let _: i32 = ((x % 4) + 4) % 4;\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -174,6 +179,7 @@ fn main() {\n     int_from_bool();\n     err_expect();\n     cast_abs_to_unsigned();\n+    manual_rem_euclid();\n }\n \n mod just_under_msrv {\n@@ -211,3 +217,12 @@ mod just_above_msrv {\n         }\n     }\n }\n+\n+mod const_rem_euclid {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.50.0\"]\n+\n+    pub const fn const_rem_euclid_4(num: i32) -> i32 {\n+        ((num % 4) + 4) % 4\n+    }\n+}"}, {"sha": "b1c23b539ffdeb9fc62a262deb39656f6b314967", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e17864e2ffd4244906a689705d8e2ce7ffac6d6b/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=e17864e2ffd4244906a689705d8e2ce7ffac6d6b", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:198:24\n+  --> $DIR/min_rust_version_attr.rs:204:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:197:9\n+  --> $DIR/min_rust_version_attr.rs:203:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:210:24\n+  --> $DIR/min_rust_version_attr.rs:216:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:209:9\n+  --> $DIR/min_rust_version_attr.rs:215:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}