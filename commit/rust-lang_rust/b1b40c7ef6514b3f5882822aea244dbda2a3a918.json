{"sha": "b1b40c7ef6514b3f5882822aea244dbda2a3a918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjQwYzdlZjY1MTRiM2Y1ODgyODIyYWVhMjQ0ZGJkYTJhM2E5MTg=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-12-03T10:07:08Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-12-03T17:47:47Z"}, "message": "Make public borrowck api more accessible", "tree": {"sha": "ee9e65e54ceedaf1791faf793a635d1bd4caffe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9e65e54ceedaf1791faf793a635d1bd4caffe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b40c7ef6514b3f5882822aea244dbda2a3a918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b40c7ef6514b3f5882822aea244dbda2a3a918", "html_url": "https://github.com/rust-lang/rust/commit/b1b40c7ef6514b3f5882822aea244dbda2a3a918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b40c7ef6514b3f5882822aea244dbda2a3a918/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe88bf1e5a87861ccaf57ea45f3ebe0e8c2de7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe88bf1e5a87861ccaf57ea45f3ebe0e8c2de7d", "html_url": "https://github.com/rust-lang/rust/commit/dfe88bf1e5a87861ccaf57ea45f3ebe0e8c2de7d"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "b727f10d276ac0f0f400ffe6859ef60a20ff6b1c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b1b40c7ef6514b3f5882822aea244dbda2a3a918/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b40c7ef6514b3f5882822aea244dbda2a3a918/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b1b40c7ef6514b3f5882822aea244dbda2a3a918", "patch": "@@ -21,7 +21,7 @@ pub use self::MovedValueUseKind::*;\n use self::InteriorKind::*;\n \n use rustc::front::map as hir_map;\n-use rustc::front::map::blocks::{FnLikeNode, FnParts};\n+use rustc::front::map::blocks::FnParts;\n use rustc::middle::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n@@ -227,25 +227,12 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n                    move_data:flowed_moves }\n }\n \n-/// This and a `ty::ctxt` is all you need to run the dataflow analyses\n-/// used in the borrow checker.\n-pub struct FnPartsWithCFG<'a> {\n-    pub fn_parts: FnParts<'a>,\n-    pub cfg:  &'a cfg::CFG,\n-}\n-\n-impl<'a> FnPartsWithCFG<'a> {\n-    pub fn from_fn_like(f: &'a FnLikeNode,\n-                        g: &'a cfg::CFG) -> FnPartsWithCFG<'a> {\n-        FnPartsWithCFG { fn_parts: f.to_fn_parts(), cfg: g }\n-    }\n-}\n-\n /// Accessor for introspective clients inspecting `AnalysisData` and\n /// the `BorrowckCtxt` itself , e.g. the flowgraph visualizer.\n pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     tcx: &'a ty::ctxt<'tcx>,\n-    input: FnPartsWithCFG<'a>)\n+    fn_parts: FnParts<'a>,\n+    cfg: &cfg::CFG)\n     -> (BorrowckCtxt<'a, 'tcx>, AnalysisData<'a, 'tcx>)\n {\n \n@@ -260,15 +247,13 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n         }\n     };\n \n-    let p = input.fn_parts;\n-\n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx,\n-                                                     p.kind,\n-                                                     &*p.decl,\n-                                                     input.cfg,\n-                                                     &*p.body,\n-                                                     p.span,\n-                                                     p.id);\n+                                                     fn_parts.kind,\n+                                                     &*fn_parts.decl,\n+                                                     cfg,\n+                                                     &*fn_parts.body,\n+                                                     fn_parts.span,\n+                                                     fn_parts.id);\n \n     (bccx, dataflow_data)\n }"}, {"sha": "27cd9530c9be3404b2972aafa8e89c64ed027832", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b40c7ef6514b3f5882822aea244dbda2a3a918/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b40c7ef6514b3f5882822aea244dbda2a3a918/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=b1b40c7ef6514b3f5882822aea244dbda2a3a918", "patch": "@@ -38,7 +38,7 @@ extern crate rustc_front;\n \n pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;\n-pub use borrowck::FnPartsWithCFG;\n+pub use borrowck::{AnalysisData, BorrowckCtxt};\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used."}, {"sha": "1d21e5055d7519e071b3a27f80e09b76f2a15fad", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1b40c7ef6514b3f5882822aea244dbda2a3a918/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b40c7ef6514b3f5882822aea244dbda2a3a918/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b1b40c7ef6514b3f5882822aea244dbda2a3a918", "patch": "@@ -887,9 +887,10 @@ fn print_flowgraph<W: Write>(variants: Vec<borrowck_dot::Variant>,\n             return Ok(());\n         }\n         blocks::FnLikeCode(fn_like) => {\n-            let fn_parts = borrowck::FnPartsWithCFG::from_fn_like(&fn_like, &cfg);\n-            let (bccx, analysis_data) = borrowck::build_borrowck_dataflow_data_for_fn(tcx,\n-                                                                                      fn_parts);\n+            let (bccx, analysis_data) =\n+                borrowck::build_borrowck_dataflow_data_for_fn(tcx,\n+                                                              fn_like.to_fn_parts(),\n+                                                              &cfg);\n \n             let lcfg = borrowck_dot::DataflowLabeller {\n                 inner: lcfg,"}]}