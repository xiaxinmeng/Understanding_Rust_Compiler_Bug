{"sha": "bd38e890ee5c9e35bbc8874edf8547515bf57b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMzhlODkwZWU1YzllMzViYmM4ODc0ZWRmODU0NzUxNWJmNTdiMzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T10:32:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T10:32:52Z"}, "message": "Rollup merge of #35480 - KiChjang:e0379-bonus, r=nikomatsakis\n\nMove E0379 check from typeck to ast validation\n\nPart of #35233.\nExtension of #35338, #35364.\nFixes #35404.", "tree": {"sha": "53ebce1753ec4e9ecdaa2b92fd0138005f57f5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53ebce1753ec4e9ecdaa2b92fd0138005f57f5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd38e890ee5c9e35bbc8874edf8547515bf57b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd38e890ee5c9e35bbc8874edf8547515bf57b37", "html_url": "https://github.com/rust-lang/rust/commit/bd38e890ee5c9e35bbc8874edf8547515bf57b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd38e890ee5c9e35bbc8874edf8547515bf57b37/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f30173a017c7c5fdfb98697daa087fa5ce50c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f30173a017c7c5fdfb98697daa087fa5ce50c7", "html_url": "https://github.com/rust-lang/rust/commit/37f30173a017c7c5fdfb98697daa087fa5ce50c7"}, {"sha": "e46b09a1f9051a65544dee08f4d8d749d474d586", "url": "https://api.github.com/repos/rust-lang/rust/commits/e46b09a1f9051a65544dee08f4d8d749d474d586", "html_url": "https://github.com/rust-lang/rust/commit/e46b09a1f9051a65544dee08f4d8d749d474d586"}], "stats": {"total": 197, "additions": 131, "deletions": 66}, "files": [{"sha": "24792e634a5d219cbc3db7988cb45256133909ec", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -804,8 +804,8 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_constness(&mut self, c: Constness) -> hir::Constness {\n-        match c {\n+    fn lower_constness(&mut self, c: Spanned<Constness>) -> hir::Constness {\n+        match c.node {\n             Constness::Const => hir::Constness::Const,\n             Constness::NotConst => hir::Constness::NotConst,\n         }"}, {"sha": "4487234885692f05f34e205b58c4d0fedcbfa1a1", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -23,13 +23,13 @@\n \n pub use self::Code::*;\n \n+use hir as ast;\n use hir::map::{self, Node};\n-use syntax::abi;\n use hir::{Block, FnDecl};\n+use hir::intravisit::FnKind;\n+use syntax::abi;\n use syntax::ast::{Attribute, Name, NodeId};\n-use hir as ast;\n use syntax_pos::Span;\n-use hir::intravisit::FnKind;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc)."}, {"sha": "0cd39882b7cded58095b89aaf1db114ce6d2a0f8", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -1030,7 +1030,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     = node_inner.expect(\"expect item fn\");\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, generics, same_regions, &life_giver);\n         let (fn_decl, generics) = rebuilder.rebuild();\n-        self.give_expl_lifetime_param(err, &fn_decl, unsafety, constness, name, &generics, span);\n+        self.give_expl_lifetime_param(\n+            err, &fn_decl, unsafety, constness, name, &generics, span);\n     }\n \n     pub fn issue_32330_warnings(&self, span: Span, issue32330s: &[ty::Issue32330]) {"}, {"sha": "dde1a4a759563dffd179aa7ede1cfe538cfb911f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -20,6 +20,7 @@ use rustc::lint;\n use rustc::session::Session;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::codemap::Spanned;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n@@ -69,6 +70,18 @@ impl<'a> AstValidator<'a> {\n             }\n         }\n     }\n+\n+    fn check_trait_fn_not_const(&self, constness: Spanned<Constness>) {\n+        match constness.node {\n+            Constness::Const => {\n+                struct_span_err!(self.session, constness.span, E0379,\n+                                 \"trait fns cannot be declared const\")\n+                    .span_label(constness.span, &format!(\"trait fns cannot be const\"))\n+                    .emit();\n+            }\n+            _ => {}\n+        }\n+    }\n }\n \n impl<'a> Visitor for AstValidator<'a> {\n@@ -146,6 +159,9 @@ impl<'a> Visitor for AstValidator<'a> {\n                 self.invalid_visibility(&item.vis, item.span, None);\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n+                    if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n+                        self.check_trait_fn_not_const(sig.constness);\n+                    }\n                 }\n             }\n             ItemKind::Impl(_, _, _, None, _, _) => {\n@@ -169,6 +185,13 @@ impl<'a> Visitor for AstValidator<'a> {\n                     }\n                 }\n             }\n+            ItemKind::Trait(_, _, _, ref trait_items) => {\n+                for trait_item in trait_items {\n+                    if let TraitItemKind::Method(ref sig, _) = trait_item.node {\n+                        self.check_trait_fn_not_const(sig.constness);\n+                    }\n+                }\n+            }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");"}, {"sha": "2d1b6e1315f8bc810722d68e637a4eae3247afb1", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -147,7 +147,8 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n \n         let mode = match fk {\n-            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _) => Mode::ConstFn,\n+            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _)\n+                => Mode::ConstFn,\n             FnKind::Method(_, m, _, _) => {\n                 if m.constness == hir::Constness::Const {\n                     Mode::ConstFn"}, {"sha": "89b8aa81411b381ed7b1de79470440acb81e2be0", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -176,6 +176,13 @@ fn some_func() {\n ```\n \"##,\n \n+E0379: r##\"\n+Trait methods cannot be declared `const` by design. For more information, see\n+[RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n+\"##,\n+\n E0449: r##\"\n A visibility qualifier was used when it was unnecessary. Erroneous code\n examples:"}, {"sha": "c8d2f9144dcc69d7f5f2321658cf334fae4112d9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -836,13 +836,9 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                     check_const(ccx, &expr, trait_item.id)\n                 }\n                 hir::MethodTraitItem(ref sig, Some(ref body)) => {\n-                    check_trait_fn_not_const(ccx, trait_item.span, sig.constness);\n-\n                     check_bare_fn(ccx, &sig.decl, body, trait_item.id);\n                 }\n-                hir::MethodTraitItem(ref sig, None) => {\n-                    check_trait_fn_not_const(ccx, trait_item.span, sig.constness);\n-                }\n+                hir::MethodTraitItem(_, None) |\n                 hir::ConstTraitItem(_, None) |\n                 hir::TypeTraitItem(..) => {\n                     // Nothing to do.\n@@ -854,22 +850,6 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     }\n }\n \n-fn check_trait_fn_not_const<'a,'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                     span: Span,\n-                                     constness: hir::Constness)\n-{\n-    match constness {\n-        hir::Constness::NotConst => {\n-            // good\n-        }\n-        hir::Constness::Const => {\n-            struct_span_err!(ccx.tcx.sess, span, E0379, \"trait fns cannot be declared const\")\n-                .span_label(span, &format!(\"trait fns cannot be const\"))\n-                .emit()\n-        }\n-    }\n-}\n-\n fn check_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     def_id: DefId,\n                                     item: &hir::Item) {\n@@ -1027,9 +1007,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                          err.emit()\n                     }\n                 }\n-                hir::ImplItemKind::Method(ref sig, ref body) => {\n-                    check_trait_fn_not_const(ccx, impl_item.span, sig.constness);\n-\n+                hir::ImplItemKind::Method(_, ref body) => {\n                     let impl_method = match ty_impl_item {\n                         ty::MethodTraitItem(ref mti) => mti,\n                         _ => span_bug!(impl_item.span, \"non-method impl-item for method\")"}, {"sha": "3f1374db36936093418193e6b326429b41a4e6b8", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -3422,13 +3422,6 @@ containing the unsized type is the last and only unsized type field in the\n struct.\n \"##,\n \n-E0379: r##\"\n-Trait methods cannot be declared `const` by design. For more information, see\n-[RFC 911].\n-\n-[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n-\"##,\n-\n E0380: r##\"\n Default impls are only allowed for traits with no methods or associated items.\n For more information see the [opt-in builtin traits RFC](https://github.com/rust"}, {"sha": "ced9a05ce59249dfd8abfe3d488180600ce67252", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -1122,7 +1122,7 @@ pub struct MutTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MethodSig {\n     pub unsafety: Unsafety,\n-    pub constness: Constness,\n+    pub constness: Spanned<Constness>,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n     pub generics: Generics,\n@@ -1820,7 +1820,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn` or `pub fn`).\n     ///\n     /// E.g. `fn foo(bar: usize) -> usize { .. }`\n-    Fn(P<FnDecl>, Unsafety, Constness, Abi, Generics, P<Block>),\n+    Fn(P<FnDecl>, Unsafety, Spanned<Constness>, Abi, Generics, P<Block>),\n     /// A module declaration (`mod` or `pub mod`).\n     ///\n     /// E.g. `mod foo;` or `mod foo { .. }`"}, {"sha": "2d9673574c340208b552c486cfdb17be4fd0bc52", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -12,7 +12,7 @@ use abi::Abi;\n use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp, PatKind};\n use attr;\n use syntax_pos::{Span, DUMMY_SP, Pos};\n-use codemap::{respan, Spanned};\n+use codemap::{dummy_spanned, respan, Spanned};\n use ext::base::ExtCtxt;\n use parse::token::{self, keywords, InternedString};\n use ptr::P;\n@@ -1016,7 +1016,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   Vec::new(),\n                   ast::ItemKind::Fn(self.fn_decl(inputs, output),\n                               ast::Unsafety::Normal,\n-                              ast::Constness::NotConst,\n+                              dummy_spanned(ast::Constness::NotConst),\n                               Abi::Rust,\n                               generics,\n                               body))"}, {"sha": "9114c31d29816c459d8db02d530b3d2cac427c16", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -30,7 +30,7 @@ use ast::{NodeId, PatKind};\n use ast;\n use attr;\n use attr::AttrMetaMethods;\n-use codemap::CodeMap;\n+use codemap::{CodeMap, Spanned};\n use syntax_pos::Span;\n use errors::Handler;\n use visit::{self, FnKind, Visitor};\n@@ -1046,7 +1046,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 _node_id: NodeId) {\n         // check for const fn declarations\n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, ast::Constness::Const, _, _) => {\n+            FnKind::ItemFn(_, _, _, Spanned { node: ast::Constness::Const, .. }, _, _) => {\n                 gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n             }\n             _ => {\n@@ -1078,7 +1078,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.abi, ti.span);\n                 }\n-                if sig.constness == ast::Constness::Const {\n+                if sig.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }\n             }\n@@ -1105,7 +1105,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                                   \"associated constants are experimental\")\n             }\n             ast::ImplItemKind::Method(ref sig, _) => {\n-                if sig.constness == ast::Constness::Const {\n+                if sig.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }"}, {"sha": "8272aa7b440c7ba25d230b1cb095fc5a96717d20", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -937,7 +937,10 @@ mod tests {\n                                 variadic: false\n                             }),\n                                     ast::Unsafety::Normal,\n-                                    ast::Constness::NotConst,\n+                                    Spanned {\n+                                        span: sp(0,2),\n+                                        node: ast::Constness::NotConst,\n+                                    },\n                                     Abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),"}, {"sha": "92ec0fdb3de3160cfd90caa9686dffe109897f38", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -39,7 +39,7 @@ use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast::{BinOpKind, UnOp};\n use ast;\n-use codemap::{self, CodeMap, Spanned, spanned};\n+use codemap::{self, CodeMap, Spanned, spanned, respan};\n use syntax_pos::{self, Span, BytePos, mk_sp};\n use errors::{self, DiagnosticBuilder};\n use ext::tt::macro_parser;\n@@ -4770,7 +4770,7 @@ impl<'a> Parser<'a> {\n     /// Parse an item-position function declaration.\n     fn parse_item_fn(&mut self,\n                      unsafety: Unsafety,\n-                     constness: Constness,\n+                     constness: Spanned<Constness>,\n                      abi: abi::Abi)\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n@@ -4796,18 +4796,21 @@ impl<'a> Parser<'a> {\n     /// - `extern fn`\n     /// - etc\n     pub fn parse_fn_front_matter(&mut self)\n-                                 -> PResult<'a, (ast::Constness, ast::Unsafety, abi::Abi)> {\n+                                 -> PResult<'a, (Spanned<ast::Constness>,\n+                                                ast::Unsafety,\n+                                                abi::Abi)> {\n         let is_const_fn = self.eat_keyword(keywords::Const);\n+        let const_span = self.last_span;\n         let unsafety = self.parse_unsafety()?;\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (Constness::Const, unsafety, Abi::Rust)\n+            (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n         } else {\n             let abi = if self.eat_keyword(keywords::Extern) {\n                 self.parse_opt_abi()?.unwrap_or(Abi::C)\n             } else {\n                 Abi::Rust\n             };\n-            (Constness::NotConst, unsafety, abi)\n+            (respan(self.last_span, Constness::NotConst), unsafety, abi)\n         };\n         self.expect_keyword(keywords::Fn)?;\n         Ok((constness, unsafety, abi))\n@@ -5706,9 +5709,12 @@ impl<'a> Parser<'a> {\n \n             if self.eat_keyword(keywords::Fn) {\n                 // EXTERN FUNCTION ITEM\n+                let fn_span = self.last_span;\n                 let abi = opt_abi.unwrap_or(Abi::C);\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(Unsafety::Normal, Constness::NotConst, abi)?;\n+                    self.parse_item_fn(Unsafety::Normal,\n+                                       respan(fn_span, Constness::NotConst),\n+                                       abi)?;\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5742,6 +5748,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if self.eat_keyword(keywords::Const) {\n+            let const_span = self.last_span;\n             if self.check_keyword(keywords::Fn)\n                 || (self.check_keyword(keywords::Unsafe)\n                     && self.look_ahead(1, |t| t.is_keyword(keywords::Fn))) {\n@@ -5753,7 +5760,9 @@ impl<'a> Parser<'a> {\n                 };\n                 self.bump();\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(unsafety, Constness::Const, Abi::Rust)?;\n+                    self.parse_item_fn(unsafety,\n+                                       respan(const_span, Constness::Const),\n+                                       Abi::Rust)?;\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5817,8 +5826,11 @@ impl<'a> Parser<'a> {\n         if self.check_keyword(keywords::Fn) {\n             // FUNCTION ITEM\n             self.bump();\n+            let fn_span = self.last_span;\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(Unsafety::Normal, Constness::NotConst, Abi::Rust)?;\n+                self.parse_item_fn(Unsafety::Normal,\n+                                   respan(fn_span, Constness::NotConst),\n+                                   Abi::Rust)?;\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5838,8 +5850,11 @@ impl<'a> Parser<'a> {\n                 Abi::Rust\n             };\n             self.expect_keyword(keywords::Fn)?;\n+            let fn_span = self.last_span;\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(Unsafety::Unsafe, Constness::NotConst, abi)?;\n+                self.parse_item_fn(Unsafety::Unsafe,\n+                                   respan(fn_span, Constness::NotConst),\n+                                   abi)?;\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "6d59c6e8e4809873c13df8e8147d121e552b6f14", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -1185,7 +1185,7 @@ impl<'a> State<'a> {\n                 try!(self.print_fn(\n                     decl,\n                     unsafety,\n-                    constness,\n+                    constness.node,\n                     abi,\n                     Some(item.ident),\n                     typarams,\n@@ -1519,7 +1519,7 @@ impl<'a> State<'a> {\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n                       m.unsafety,\n-                      m.constness,\n+                      m.constness.node,\n                       m.abi,\n                       Some(ident),\n                       &m.generics,"}, {"sha": "cbf9aa8c6c17f1c79f031629ddcb1505e07bd73a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -24,7 +24,7 @@ use attr;\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n use std::rc::Rc;\n \n-use codemap::{self, CodeMap, ExpnInfo, NameAndSpan, MacroAttribute};\n+use codemap::{self, CodeMap, ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned};\n use errors;\n use errors::snippet::{SnippetData};\n use config;\n@@ -485,7 +485,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main_body = ecx.block(sp, vec![call_test_main]);\n     let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], main_ret_ty),\n                            ast::Unsafety::Normal,\n-                           ast::Constness::NotConst,\n+                           dummy_spanned(ast::Constness::NotConst),\n                            ::abi::Abi::Rust, ast::Generics::default(), main_body);\n     let main = P(ast::Item {\n         ident: token::str_to_ident(\"main\"),"}, {"sha": "b2d47996659560527530d5cd5a6d79c60a842076", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -31,7 +31,7 @@ use codemap::Spanned;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, &'a Visibility),\n+    ItemFn(Ident, &'a Generics, Unsafety, Spanned<Constness>, Abi, &'a Visibility),\n \n     /// fn foo(&self)\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>),"}, {"sha": "5960e4546b18c139cbe8a903d83bf8eac4c2d44e", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -197,7 +197,7 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{self, respan};\n+use syntax::codemap::{self, dummy_spanned, respan};\n use syntax::util::move_map::MoveMap;\n use syntax::parse::token::{InternedString, keywords};\n use syntax::ptr::P;\n@@ -902,7 +902,8 @@ impl<'a> MethodDef<'a> {\n                                                 generics: fn_generics,\n                                                 abi: abi,\n                                                 unsafety: unsafety,\n-                                                constness: ast::Constness::NotConst,\n+                                                constness:\n+                                                    dummy_spanned(ast::Constness::NotConst),\n                                                 decl: fn_decl,\n                                             },\n                                             body_block),"}, {"sha": "7ea72e23779ec5f40871851c233fc0a401aff4c8", "filename": "src/test/compile-fail/const-fn-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-mismatch.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -21,7 +21,7 @@ trait Foo {\n \n impl Foo for u32 {\n     const fn f() -> u32 { 22 }\n-    //~^ ERROR E0379\n+    //~^ ERROR trait fns cannot be declared const\n     //~| NOTE trait fns cannot be const\n }\n "}, {"sha": "257d4d5ee99210fbe514ba571378836f23fa51a4", "filename": "src/test/compile-fail/const-fn-not-in-trait.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-in-trait.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -14,8 +14,12 @@\n #![feature(const_fn)]\n \n trait Foo {\n-    const fn f() -> u32; //~ ERROR trait fns cannot be declared const\n-    const fn g() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n+    const fn f() -> u32;\n+    //~^ ERROR trait fns cannot be declared const\n+    //~| NOTE trait fns cannot be const\n+    const fn g() -> u32 { 0 }\n+    //~^ ERROR trait fns cannot be declared const\n+    //~| NOTE trait fns cannot be const\n }\n \n fn main() { }"}, {"sha": "5e44030eab71acad7f13b17652fc5b50c82adcbf", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustc-env:RUST_NEW_ERROR_FORMAT\n+\n+#![feature(const_fn)]\n+\n+trait Foo {\n+    fn f() -> u32;\n+    const fn g();\n+}\n+\n+impl Foo for u32 {\n+    const fn f() -> u32 { 22 }\n+    fn g() {}\n+}\n+\n+fn main() { }"}, {"sha": "f7b7635e41aecfec70ad91f99b95fac6a0d944f2", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd38e890ee5c9e35bbc8874edf8547515bf57b37/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr?ref=bd38e890ee5c9e35bbc8874edf8547515bf57b37", "patch": "@@ -0,0 +1,14 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-in-trait.rs:17:5\n+   |\n+17 |     const fn g();\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-in-trait.rs:21:5\n+   |\n+21 |     const fn f() -> u32 { 22 }\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: aborting due to 2 previous errors\n+"}]}