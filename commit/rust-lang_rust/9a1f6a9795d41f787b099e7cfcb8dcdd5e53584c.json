{"sha": "9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "node_id": "C_kwDOAAsO6NoAKDlhMWY2YTk3OTVkNDFmNzg3YjA5OWU3Y2ZjYjhkY2RkNWU1MzU4NGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T23:39:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T23:39:50Z"}, "message": "Auto merge of #8537 - xFrednet:7923-single-component-path-imports-for-macros, r=llogiq\n\nAllow `single_component_path_imports` for all macros\n\nCloses: https://github.com/rust-lang/rust-clippy/issues/7923\n\nIt can be useful to have `use macro_name` regardless of the visibility. This removes the visibility filter.\n\nchangelog: [`single_component_path_imports`]: no longer triggers on macros", "tree": {"sha": "77312192480b0d6205b8e0a0df00ee011ecd0716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77312192480b0d6205b8e0a0df00ee011ecd0716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "html_url": "https://github.com/rust-lang/rust/commit/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e1311b70f0b11cae18b0f7703ceed34b19eef37", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1311b70f0b11cae18b0f7703ceed34b19eef37", "html_url": "https://github.com/rust-lang/rust/commit/0e1311b70f0b11cae18b0f7703ceed34b19eef37"}, {"sha": "2ee53723897407ea31a1803af9bbedf98a49f934", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee53723897407ea31a1803af9bbedf98a49f934", "html_url": "https://github.com/rust-lang/rust/commit/2ee53723897407ea31a1803af9bbedf98a49f934"}], "stats": {"total": 52, "additions": 9, "deletions": 43}, "files": [{"sha": "66b79513032f6e8871e52ed543dafc9eb8585b5e", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n-use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n+use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -76,14 +76,13 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n         );\n     }\n \n-    for single_use in &single_use_usages {\n-        if !imports_reused_with_self.contains(&single_use.0) {\n-            let can_suggest = single_use.2;\n+    for (name, span, can_suggest) in single_use_usages {\n+        if !imports_reused_with_self.contains(&name) {\n             if can_suggest {\n                 span_lint_and_sugg(\n                     cx,\n                     SINGLE_COMPONENT_PATH_IMPORTS,\n-                    single_use.1,\n+                    span,\n                     \"this import is redundant\",\n                     \"remove it entirely\",\n                     String::new(),\n@@ -93,7 +92,7 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n                 span_lint_and_help(\n                     cx,\n                     SINGLE_COMPONENT_PATH_IMPORTS,\n-                    single_use.1,\n+                    span,\n                     \"this import is redundant\",\n                     None,\n                     \"remove this import\",\n@@ -124,14 +123,11 @@ fn track_uses(\n         ItemKind::Use(use_tree) => {\n             let segments = &use_tree.prefix.segments;\n \n-            let should_report =\n-                |name: &Symbol| !macros.contains(name) || matches!(item.vis.kind, VisibilityKind::Inherited);\n-\n             // keep track of `use some_module;` usages\n             if segments.len() == 1 {\n                 if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n                     let name = segments[0].ident.name;\n-                    if should_report(&name) {\n+                    if !macros.contains(&name) {\n                         single_use_usages.push((name, item.span, true));\n                     }\n                 }\n@@ -146,7 +142,7 @@ fn track_uses(\n                         if segments.len() == 1 {\n                             if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n                                 let name = segments[0].ident.name;\n-                                if should_report(&name) {\n+                                if !macros.contains(&name) {\n                                     single_use_usages.push((name, tree.0.span, false));\n                                 }\n                             }"}, {"sha": "e43f5d381aaa1087a928a49d86529693a74fdba9", "filename": "tests/ui/single_component_path_imports_macro.fixed", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e1311b70f0b11cae18b0f7703ceed34b19eef37/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0e1311b70f0b11cae18b0f7703ceed34b19eef37/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.fixed?ref=0e1311b70f0b11cae18b0f7703ceed34b19eef37", "patch": "@@ -1,20 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::single_component_path_imports)]\n-#![allow(unused_imports)]\n-\n-// #7106: use statements exporting a macro within a crate should not trigger lint\n-\n-macro_rules! m1 {\n-    () => {};\n-}\n-pub(crate) use m1; // ok\n-\n-macro_rules! m2 {\n-    () => {};\n-}\n- // fail\n-\n-fn main() {\n-    m1!();\n-    m2!();\n-}"}, {"sha": "fda294a61546b5c6fa2befd83ef8281b92bba9ea", "filename": "tests/ui/single_component_path_imports_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.rs?ref=9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "patch": "@@ -1,8 +1,8 @@\n-// run-rustfix\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n \n // #7106: use statements exporting a macro within a crate should not trigger lint\n+// #7923: normal `use` statements of macros should also not trigger the lint\n \n macro_rules! m1 {\n     () => {};\n@@ -12,7 +12,7 @@ pub(crate) use m1; // ok\n macro_rules! m2 {\n     () => {};\n }\n-use m2; // fail\n+use m2; // ok\n \n fn main() {\n     m1!();"}, {"sha": "37d5176129ff30a2d06733b35c2b2c9b5404574f", "filename": "tests/ui/single_component_path_imports_macro.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e1311b70f0b11cae18b0f7703ceed34b19eef37/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e1311b70f0b11cae18b0f7703ceed34b19eef37/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.stderr?ref=0e1311b70f0b11cae18b0f7703ceed34b19eef37", "patch": "@@ -1,10 +0,0 @@\n-error: this import is redundant\n-  --> $DIR/single_component_path_imports_macro.rs:15:1\n-   |\n-LL | use m2; // fail\n-   | ^^^^^^^ help: remove it entirely\n-   |\n-   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n-\n-error: aborting due to previous error\n-"}]}