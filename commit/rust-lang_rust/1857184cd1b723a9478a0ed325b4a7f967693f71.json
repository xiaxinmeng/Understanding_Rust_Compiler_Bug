{"sha": "1857184cd1b723a9478a0ed325b4a7f967693f71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTcxODRjZDFiNzIzYTk0NzhhMGVkMzI1YjRhN2Y5Njc2OTNmNzE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-24T17:22:36Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-24T17:22:36Z"}, "message": "remove enum name from ImplSource variants", "tree": {"sha": "1bdbe67a662ed59184fdd9e1a5419534396dde3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdbe67a662ed59184fdd9e1a5419534396dde3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1857184cd1b723a9478a0ed325b4a7f967693f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1857184cd1b723a9478a0ed325b4a7f967693f71", "html_url": "https://github.com/rust-lang/rust/commit/1857184cd1b723a9478a0ed325b4a7f967693f71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1857184cd1b723a9478a0ed325b4a7f967693f71/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893fadd11a52aa26fc19c67ee1b79f03d6a1bed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/893fadd11a52aa26fc19c67ee1b79f03d6a1bed3", "html_url": "https://github.com/rust-lang/rust/commit/893fadd11a52aa26fc19c67ee1b79f03d6a1bed3"}], "stats": {"total": 214, "additions": 104, "deletions": 110}, "files": [{"sha": "1dd6d590d908f36888dbda90131a49860c1fc5ea", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -28,7 +28,6 @@ pub use self::select::{EvaluationCache, EvaluationResult, OverflowError, Selecti\n \n pub type CanonicalChalkEnvironmentAndGoal<'tcx> = Canonical<'tcx, ChalkEnvironmentAndGoal<'tcx>>;\n \n-pub use self::ImplSource::*;\n pub use self::ObligationCauseCode::*;\n \n pub use self::chalk::{ChalkEnvironmentAndGoal, RustInterner as ChalkRustInterner};\n@@ -418,10 +417,10 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n ///\n ///     // Case B: ImplSource must be provided by caller. This applies when\n ///     // type is a type parameter.\n-///     param.clone();    // ImplSourceParam\n+///     param.clone();    // ImplSource::Param\n ///\n ///     // Case C: A mix of cases A and B.\n-///     mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n+///     mixed.clone();    // ImplSource(Impl_1, [ImplSource::Param])\n /// }\n /// ```\n ///\n@@ -431,72 +430,72 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n pub enum ImplSource<'tcx, N> {\n     /// ImplSource identifying a particular impl.\n-    ImplSourceUserDefined(ImplSourceUserDefinedData<'tcx, N>),\n+    UserDefined(ImplSourceUserDefinedData<'tcx, N>),\n \n     /// ImplSource for auto trait implementations.\n     /// This carries the information and nested obligations with regards\n     /// to an auto implementation for a trait `Trait`. The nested obligations\n     /// ensure the trait implementation holds for all the constituent types.\n-    ImplSourceAutoImpl(ImplSourceAutoImplData<N>),\n+    AutoImpl(ImplSourceAutoImplData<N>),\n \n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n     /// any).\n-    ImplSourceParam(Vec<N>),\n+    Param(Vec<N>),\n \n     /// Virtual calls through an object.\n-    ImplSourceObject(ImplSourceObjectData<'tcx, N>),\n+    Object(ImplSourceObjectData<'tcx, N>),\n \n     /// Successful resolution for a builtin trait.\n-    ImplSourceBuiltin(ImplSourceBuiltinData<N>),\n+    Builtin(ImplSourceBuiltinData<N>),\n \n     /// ImplSource automatically generated for a closure. The `DefId` is the ID\n-    /// of the closure expression. This is a `ImplSourceUserDefined` in spirit, but the\n+    /// of the closure expression. This is a `ImplSource::UserDefined` in spirit, but the\n     /// impl is generated by the compiler and does not appear in the source.\n-    ImplSourceClosure(ImplSourceClosureData<'tcx, N>),\n+    Closure(ImplSourceClosureData<'tcx, N>),\n \n     /// Same as above, but for a function pointer type with the given signature.\n-    ImplSourceFnPointer(ImplSourceFnPointerData<'tcx, N>),\n+    FnPointer(ImplSourceFnPointerData<'tcx, N>),\n \n     /// ImplSource for a builtin `DeterminantKind` trait implementation.\n-    ImplSourceDiscriminantKind(ImplSourceDiscriminantKindData),\n+    DiscriminantKind(ImplSourceDiscriminantKindData),\n \n     /// ImplSource automatically generated for a generator.\n-    ImplSourceGenerator(ImplSourceGeneratorData<'tcx, N>),\n+    Generator(ImplSourceGeneratorData<'tcx, N>),\n \n     /// ImplSource for a trait alias.\n-    ImplSourceTraitAlias(ImplSourceTraitAliasData<'tcx, N>),\n+    TraitAlias(ImplSourceTraitAliasData<'tcx, N>),\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {\n-            ImplSourceUserDefined(i) => i.nested,\n-            ImplSourceParam(n) => n,\n-            ImplSourceBuiltin(i) => i.nested,\n-            ImplSourceAutoImpl(d) => d.nested,\n-            ImplSourceClosure(c) => c.nested,\n-            ImplSourceGenerator(c) => c.nested,\n-            ImplSourceObject(d) => d.nested,\n-            ImplSourceFnPointer(d) => d.nested,\n-            ImplSourceDiscriminantKind(ImplSourceDiscriminantKindData) => Vec::new(),\n-            ImplSourceTraitAlias(d) => d.nested,\n+            ImplSource::UserDefined(i) => i.nested,\n+            ImplSource::Param(n) => n,\n+            ImplSource::Builtin(i) => i.nested,\n+            ImplSource::AutoImpl(d) => d.nested,\n+            ImplSource::Closure(c) => c.nested,\n+            ImplSource::Generator(c) => c.nested,\n+            ImplSource::Object(d) => d.nested,\n+            ImplSource::FnPointer(d) => d.nested,\n+            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData) => Vec::new(),\n+            ImplSource::TraitAlias(d) => d.nested,\n         }\n     }\n \n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match &self {\n-            ImplSourceUserDefined(i) => &i.nested[..],\n-            ImplSourceParam(n) => &n[..],\n-            ImplSourceBuiltin(i) => &i.nested[..],\n-            ImplSourceAutoImpl(d) => &d.nested[..],\n-            ImplSourceClosure(c) => &c.nested[..],\n-            ImplSourceGenerator(c) => &c.nested[..],\n-            ImplSourceObject(d) => &d.nested[..],\n-            ImplSourceFnPointer(d) => &d.nested[..],\n-            ImplSourceDiscriminantKind(ImplSourceDiscriminantKindData) => &[],\n-            ImplSourceTraitAlias(d) => &d.nested[..],\n+            ImplSource::UserDefined(i) => &i.nested[..],\n+            ImplSource::Param(n) => &n[..],\n+            ImplSource::Builtin(i) => &i.nested[..],\n+            ImplSource::AutoImpl(d) => &d.nested[..],\n+            ImplSource::Closure(c) => &c.nested[..],\n+            ImplSource::Generator(c) => &c.nested[..],\n+            ImplSource::Object(d) => &d.nested[..],\n+            ImplSource::FnPointer(d) => &d.nested[..],\n+            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData) => &[],\n+            ImplSource::TraitAlias(d) => &d.nested[..],\n         }\n     }\n \n@@ -505,42 +504,42 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n         F: FnMut(N) -> M,\n     {\n         match self {\n-            ImplSourceUserDefined(i) => ImplSourceUserDefined(ImplSourceUserDefinedData {\n+            ImplSource::UserDefined(i) => ImplSource::UserDefined(ImplSourceUserDefinedData {\n                 impl_def_id: i.impl_def_id,\n                 substs: i.substs,\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceParam(n) => ImplSourceParam(n.into_iter().map(f).collect()),\n-            ImplSourceBuiltin(i) => ImplSourceBuiltin(ImplSourceBuiltinData {\n+            ImplSource::Param(n) => ImplSource::Param(n.into_iter().map(f).collect()),\n+            ImplSource::Builtin(i) => ImplSource::Builtin(ImplSourceBuiltinData {\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceObject(o) => ImplSourceObject(ImplSourceObjectData {\n+            ImplSource::Object(o) => ImplSource::Object(ImplSourceObjectData {\n                 upcast_trait_ref: o.upcast_trait_ref,\n                 vtable_base: o.vtable_base,\n                 nested: o.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceAutoImpl(d) => ImplSourceAutoImpl(ImplSourceAutoImplData {\n+            ImplSource::AutoImpl(d) => ImplSource::AutoImpl(ImplSourceAutoImplData {\n                 trait_def_id: d.trait_def_id,\n                 nested: d.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceClosure(c) => ImplSourceClosure(ImplSourceClosureData {\n+            ImplSource::Closure(c) => ImplSource::Closure(ImplSourceClosureData {\n                 closure_def_id: c.closure_def_id,\n                 substs: c.substs,\n                 nested: c.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceGenerator(c) => ImplSourceGenerator(ImplSourceGeneratorData {\n+            ImplSource::Generator(c) => ImplSource::Generator(ImplSourceGeneratorData {\n                 generator_def_id: c.generator_def_id,\n                 substs: c.substs,\n                 nested: c.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceFnPointer(p) => ImplSourceFnPointer(ImplSourceFnPointerData {\n+            ImplSource::FnPointer(p) => ImplSource::FnPointer(ImplSourceFnPointerData {\n                 fn_ty: p.fn_ty,\n                 nested: p.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSourceDiscriminantKind(ImplSourceDiscriminantKindData) => {\n-                ImplSourceDiscriminantKind(ImplSourceDiscriminantKindData)\n+            ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData) => {\n+                ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n             }\n-            ImplSourceTraitAlias(d) => ImplSourceTraitAlias(ImplSourceTraitAliasData {\n+            ImplSource::TraitAlias(d) => ImplSource::TraitAlias(ImplSourceTraitAliasData {\n                 alias_def_id: d.alias_def_id,\n                 substs: d.substs,\n                 nested: d.nested.into_iter().map(f).collect(),"}, {"sha": "b8f6675b8e2197778c53271ad1c3093ba10258a3", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -7,25 +7,25 @@ use std::fmt;\n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            super::ImplSourceUserDefined(ref v) => write!(f, \"{:?}\", v),\n+            super::ImplSource::UserDefined(ref v) => write!(f, \"{:?}\", v),\n \n-            super::ImplSourceAutoImpl(ref t) => write!(f, \"{:?}\", t),\n+            super::ImplSource::AutoImpl(ref t) => write!(f, \"{:?}\", t),\n \n-            super::ImplSourceClosure(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::Closure(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSourceGenerator(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::Generator(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSourceFnPointer(ref d) => write!(f, \"ImplSourceFnPointer({:?})\", d),\n+            super::ImplSource::FnPointer(ref d) => write!(f, \"({:?})\", d),\n \n-            super::ImplSourceDiscriminantKind(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::DiscriminantKind(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSourceObject(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::Object(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSourceParam(ref n) => write!(f, \"ImplSourceParam({:?})\", n),\n+            super::ImplSource::Param(ref n) => write!(f, \"ImplSourceParamData({:?})\", n),\n \n-            super::ImplSourceBuiltin(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::Builtin(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSourceTraitAlias(ref d) => write!(f, \"{:?}\", d),\n+            super::ImplSource::TraitAlias(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -96,7 +96,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitAliasData<'tcx,\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"ImplSourceTraitAlias(alias_def_id={:?}, substs={:?}, nested={:?})\",\n+            \"ImplSourceTraitAliasData(alias_def_id={:?}, substs={:?}, nested={:?})\",\n             self.alias_def_id, self.substs, self.nested\n         )\n     }"}, {"sha": "d2586f0f84dffbe79a97a7d89f2798b89f89cc9b", "filename": "compiler/rustc_mir/src/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -21,7 +21,7 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     });\n \n     match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n-        Ok(traits::ImplSourceUserDefined(traits::ImplSourceUserDefinedData {\n+        Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {\n             impl_def_id,\n             ..\n         })) => tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap(),"}, {"sha": "35bfeff10b4aa7e7451cd89380c0fe34cb035358", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             ));\n \n             match result {\n-                Ok(Some(ImplSource::ImplSourceUserDefined(_))) => {\n+                Ok(Some(ImplSource::UserDefined(_))) => {\n                     debug!(\n                         \"find_auto_trait_generics({:?}): \\\n                          manual impl found, bailing out\",\n@@ -315,9 +315,8 @@ impl AutoTraitFinder<'tcx> {\n                     // If we see an explicit negative impl (e.g., `impl !Send for MyStruct`),\n                     // we immediately bail out, since it's impossible for us to continue.\n \n-                    if let ImplSource::ImplSourceUserDefined(ImplSourceUserDefinedData {\n-                        impl_def_id,\n-                        ..\n+                    if let ImplSource::UserDefined(ImplSourceUserDefinedData {\n+                        impl_def_id, ..\n                     }) = impl_source\n                     {\n                         // Blame 'tidy' for the weird bracket placement."}, {"sha": "ef8f7b69b5d6067a27e04bbd01ca468be47b4e95", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -1000,15 +1000,15 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n         };\n \n         let eligible = match &impl_source {\n-            super::ImplSourceClosure(_)\n-            | super::ImplSourceGenerator(_)\n-            | super::ImplSourceFnPointer(_)\n-            | super::ImplSourceObject(_)\n-            | super::ImplSourceTraitAlias(_) => {\n+            super::ImplSource::Closure(_)\n+            | super::ImplSource::Generator(_)\n+            | super::ImplSource::FnPointer(_)\n+            | super::ImplSource::Object(_)\n+            | super::ImplSource::TraitAlias(_) => {\n                 debug!(\"assemble_candidates_from_impls: impl_source={:?}\", impl_source);\n                 true\n             }\n-            super::ImplSourceUserDefined(impl_data) => {\n+            super::ImplSource::UserDefined(impl_data) => {\n                 // We have to be careful when projecting out of an\n                 // impl because of specialization. If we are not in\n                 // codegen (i.e., projection mode is not \"any\"), and the\n@@ -1060,7 +1060,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     }\n                 }\n             }\n-            super::ImplSourceDiscriminantKind(..) => {\n+            super::ImplSource::DiscriminantKind(..) => {\n                 // While `DiscriminantKind` is automatically implemented for every type,\n                 // the concrete discriminant may not be known yet.\n                 //\n@@ -1100,7 +1100,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Error(_) => false,\n                 }\n             }\n-            super::ImplSourceParam(..) => {\n+            super::ImplSource::Param(..) => {\n                 // This case tell us nothing about the value of an\n                 // associated type. Consider:\n                 //\n@@ -1128,7 +1128,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // in `assemble_candidates_from_param_env`.\n                 false\n             }\n-            super::ImplSourceAutoImpl(..) | super::ImplSourceBuiltin(..) => {\n+            super::ImplSource::AutoImpl(..) | super::ImplSource::Builtin(..) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1186,20 +1186,20 @@ fn confirm_select_candidate<'cx, 'tcx>(\n     impl_source: Selection<'tcx>,\n ) -> Progress<'tcx> {\n     match impl_source {\n-        super::ImplSourceUserDefined(data) => confirm_impl_candidate(selcx, obligation, data),\n-        super::ImplSourceGenerator(data) => confirm_generator_candidate(selcx, obligation, data),\n-        super::ImplSourceClosure(data) => confirm_closure_candidate(selcx, obligation, data),\n-        super::ImplSourceFnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),\n-        super::ImplSourceDiscriminantKind(data) => {\n+        super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),\n+        super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),\n+        super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),\n+        super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),\n+        super::ImplSource::DiscriminantKind(data) => {\n             confirm_discriminant_kind_candidate(selcx, obligation, data)\n         }\n-        super::ImplSourceObject(_) => {\n+        super::ImplSource::Object(_) => {\n             confirm_object_candidate(selcx, obligation, obligation_trait_ref)\n         }\n-        super::ImplSourceAutoImpl(..)\n-        | super::ImplSourceParam(..)\n-        | super::ImplSourceBuiltin(..)\n-        | super::ImplSourceTraitAlias(..) =>\n+        super::ImplSource::AutoImpl(..)\n+        | super::ImplSource::Param(..)\n+        | super::ImplSource::Builtin(..)\n+        | super::ImplSource::TraitAlias(..) =>\n         // we don't create Select candidates with this kind of resolution\n         {\n             span_bug!("}, {"sha": "88b656ce6808273c8e37b0d8decf56f4e533ceef", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -19,16 +19,12 @@ use crate::traits::project::{self, normalize_with_depth};\n use crate::traits::select::TraitObligationExt;\n use crate::traits::util;\n use crate::traits::util::{closure_trait_ref_and_return_type, predicate_for_trait_def};\n+use crate::traits::ImplSource;\n use crate::traits::Normalized;\n use crate::traits::OutputTypeParameterMismatch;\n use crate::traits::Selection;\n use crate::traits::TraitNotObjectSafe;\n use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n-use crate::traits::{\n-    ImplSourceAutoImpl, ImplSourceBuiltin, ImplSourceClosure, ImplSourceDiscriminantKind,\n-    ImplSourceFnPointer, ImplSourceGenerator, ImplSourceObject, ImplSourceParam,\n-    ImplSourceTraitAlias, ImplSourceUserDefined,\n-};\n use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n@@ -55,67 +51,67 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match candidate {\n             BuiltinCandidate { has_nested } => {\n                 let data = self.confirm_builtin_candidate(obligation, has_nested);\n-                Ok(ImplSourceBuiltin(data))\n+                Ok(ImplSource::Builtin(data))\n             }\n \n             ParamCandidate(param) => {\n                 let obligations = self.confirm_param_candidate(obligation, param);\n-                Ok(ImplSourceParam(obligations))\n+                Ok(ImplSource::Param(obligations))\n             }\n \n             ImplCandidate(impl_def_id) => {\n-                Ok(ImplSourceUserDefined(self.confirm_impl_candidate(obligation, impl_def_id)))\n+                Ok(ImplSource::UserDefined(self.confirm_impl_candidate(obligation, impl_def_id)))\n             }\n \n             AutoImplCandidate(trait_def_id) => {\n                 let data = self.confirm_auto_impl_candidate(obligation, trait_def_id);\n-                Ok(ImplSourceAutoImpl(data))\n+                Ok(ImplSource::AutoImpl(data))\n             }\n \n             ProjectionCandidate => {\n                 self.confirm_projection_candidate(obligation);\n-                Ok(ImplSourceParam(Vec::new()))\n+                Ok(ImplSource::Param(Vec::new()))\n             }\n \n             ClosureCandidate => {\n                 let vtable_closure = self.confirm_closure_candidate(obligation)?;\n-                Ok(ImplSourceClosure(vtable_closure))\n+                Ok(ImplSource::Closure(vtable_closure))\n             }\n \n             GeneratorCandidate => {\n                 let vtable_generator = self.confirm_generator_candidate(obligation)?;\n-                Ok(ImplSourceGenerator(vtable_generator))\n+                Ok(ImplSource::Generator(vtable_generator))\n             }\n \n             FnPointerCandidate => {\n                 let data = self.confirm_fn_pointer_candidate(obligation)?;\n-                Ok(ImplSourceFnPointer(data))\n+                Ok(ImplSource::FnPointer(data))\n             }\n \n             DiscriminantKindCandidate => {\n-                Ok(ImplSourceDiscriminantKind(ImplSourceDiscriminantKindData))\n+                Ok(ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData))\n             }\n \n             TraitAliasCandidate(alias_def_id) => {\n                 let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n-                Ok(ImplSourceTraitAlias(data))\n+                Ok(ImplSource::TraitAlias(data))\n             }\n \n             ObjectCandidate => {\n                 let data = self.confirm_object_candidate(obligation);\n-                Ok(ImplSourceObject(data))\n+                Ok(ImplSource::Object(data))\n             }\n \n             BuiltinObjectCandidate => {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                Ok(ImplSourceParam(Vec::new()))\n+                Ok(ImplSource::Param(Vec::new()))\n             }\n \n             BuiltinUnsizeCandidate => {\n                 let data = self.confirm_builtin_unsize_candidate(obligation)?;\n-                Ok(ImplSourceBuiltin(data))\n+                Ok(ImplSource::Builtin(data))\n             }\n         }\n     }"}, {"sha": "220f4cec742f1f5aa80114258dec6c48b4da5e43", "filename": "compiler/rustc_ty/src/instance.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_ty%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_ty%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty%2Fsrc%2Finstance.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -119,9 +119,9 @@ fn resolve_associated_item<'tcx>(\n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n     Ok(match vtbl {\n-        traits::ImplSourceUserDefined(impl_data) => {\n+        traits::ImplSource::UserDefined(impl_data) => {\n             debug!(\n-                \"resolving ImplSourceUserDefined: {:?}, {:?}, {:?}, {:?}\",\n+                \"resolving ImplSource::UserDefined: {:?}, {:?}, {:?}, {:?}\",\n                 param_env, trait_item, rcvr_substs, impl_data\n             );\n             assert!(!rcvr_substs.needs_infer());\n@@ -216,13 +216,13 @@ fn resolve_associated_item<'tcx>(\n \n             Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n-        traits::ImplSourceGenerator(generator_data) => Some(Instance {\n+        traits::ImplSource::Generator(generator_data) => Some(Instance {\n             def: ty::InstanceDef::Item(ty::WithOptConstParam::unknown(\n                 generator_data.generator_def_id,\n             )),\n             substs: generator_data.substs,\n         }),\n-        traits::ImplSourceClosure(closure_data) => {\n+        traits::ImplSource::Closure(closure_data) => {\n             let trait_closure_kind = tcx.fn_trait_kind_from_lang_item(trait_id).unwrap();\n             Some(Instance::resolve_closure(\n                 tcx,\n@@ -231,18 +231,18 @@ fn resolve_associated_item<'tcx>(\n                 trait_closure_kind,\n             ))\n         }\n-        traits::ImplSourceFnPointer(ref data) => match data.fn_ty.kind() {\n+        traits::ImplSource::FnPointer(ref data) => match data.fn_ty.kind() {\n             ty::FnDef(..) | ty::FnPtr(..) => Some(Instance {\n                 def: ty::InstanceDef::FnPtrShim(trait_item.def_id, data.fn_ty),\n                 substs: rcvr_substs,\n             }),\n             _ => None,\n         },\n-        traits::ImplSourceObject(ref data) => {\n+        traits::ImplSource::Object(ref data) => {\n             let index = traits::get_vtable_index_of_object_method(tcx, data, def_id);\n             Some(Instance { def: ty::InstanceDef::Virtual(def_id, index), substs: rcvr_substs })\n         }\n-        traits::ImplSourceBuiltin(..) => {\n+        traits::ImplSource::Builtin(..) => {\n             if Some(trait_ref.def_id) == tcx.lang_items().clone_trait() {\n                 // FIXME(eddyb) use lang items for methods instead of names.\n                 let name = tcx.item_name(def_id);\n@@ -271,10 +271,10 @@ fn resolve_associated_item<'tcx>(\n                 None\n             }\n         }\n-        traits::ImplSourceAutoImpl(..)\n-        | traits::ImplSourceParam(..)\n-        | traits::ImplSourceTraitAlias(..)\n-        | traits::ImplSourceDiscriminantKind(..) => None,\n+        traits::ImplSource::AutoImpl(..)\n+        | traits::ImplSource::Param(..)\n+        | traits::ImplSource::TraitAlias(..)\n+        | traits::ImplSource::DiscriminantKind(..) => None,\n     })\n }\n "}, {"sha": "c1ba29284da16b73956a7fab4dea6a16cd0e160d", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1857184cd1b723a9478a0ed325b4a7f967693f71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=1857184cd1b723a9478a0ed325b4a7f967693f71", "patch": "@@ -1306,7 +1306,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .at(&ObligationCause::dummy(), self.param_env)\n                     .sup(candidate.xform_self_ty, self_ty);\n                 match self.select_trait_candidate(trait_ref) {\n-                    Ok(Some(traits::ImplSource::ImplSourceUserDefined(ref impl_data))) => {\n+                    Ok(Some(traits::ImplSource::UserDefined(ref impl_data))) => {\n                         // If only a single impl matches, make the error message point\n                         // to that impl.\n                         ImplSource(impl_data.impl_def_id)"}]}