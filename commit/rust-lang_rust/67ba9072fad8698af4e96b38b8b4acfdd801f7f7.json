{"sha": "67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YmE5MDcyZmFkODY5OGFmNGU5NmIzOGI4YjRhY2ZkZDgwMWY3Zjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T11:15:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T11:18:20Z"}, "message": "Remove hir for imports", "tree": {"sha": "9361203d1e02192e6b5bc9c2391a2d1ca96954a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9361203d1e02192e6b5bc9c2391a2d1ca96954a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "html_url": "https://github.com/rust-lang/rust/commit/67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995", "html_url": "https://github.com/rust-lang/rust/commit/3ebf15c9b29b1fed6319d04f540ad48cd4bd6995"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "e6768ea0bc0f98ce840f49746e24669105d0b512", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "patch": "@@ -12,8 +12,8 @@ use hir_def::{\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n     AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId,\n+    LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -180,13 +180,11 @@ impl Module {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<Import>)> {\n+    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef)> {\n         db.crate_def_map(self.id.krate)[self.id.local_id]\n             .scope\n             .entries()\n-            .map(|(name, res)| {\n-                (name.clone(), res.def.into(), res.import.map(|id| Import { parent: self, id }))\n-            })\n+            .map(|(name, res)| (name.clone(), res.def.into()))\n             .collect()\n     }\n \n@@ -229,10 +227,10 @@ impl Module {\n     }\n }\n \n-pub struct Import {\n-    pub(crate) parent: Module,\n-    pub(crate) id: LocalImportId,\n-}\n+// pub struct Import {\n+//     pub(crate) parent: Module,\n+//     pub(crate) id: LocalImportId,\n+// }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {"}, {"sha": "5541266e2b1e0f534909313d9d630ee7c1b71087", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "patch": "@@ -9,8 +9,8 @@ use hir_def::{\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n-    Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, MacroDef, Module,\n+    Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub use hir_expand::InFile;\n@@ -117,18 +117,6 @@ impl HasSource for ImplBlock {\n         self.id.lookup(db).source(db)\n     }\n }\n-impl HasSource for Import {\n-    type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n-\n-    /// Returns the syntax of the last path segment corresponding to this import\n-    fn source(self, db: &impl DefDatabase) -> InFile<Self::Ast> {\n-        let src = self.parent.definition_source(db);\n-        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n-        let root = db.parse_or_expand(src.file_id).unwrap();\n-        let ptr = source_map.get(self.id);\n-        src.with_value(ptr.map_left(|it| it.to_node(&root)).map_right(|it| it.to_node(&root)))\n-    }\n-}\n \n impl HasSource for TypeParam {\n     type Ast = Either<ast::TraitDef, ast::TypeParam>;"}, {"sha": "0008a8858fc44a45813fe5f96830c90594c2c6c4", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "patch": "@@ -40,8 +40,8 @@ mod from_source;\n pub use crate::{\n     code_model::{\n         Adt, AssocItem, AttrDef, Const, Crate, CrateDependency, DefWithBody, Docs, Enum,\n-        EnumVariant, FieldSource, Function, GenericDef, HasAttrs, ImplBlock, Import, Local,\n-        MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n+        EnumVariant, FieldSource, Function, GenericDef, HasAttrs, ImplBlock, Local, MacroDef,\n+        Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n         TypeParam, Union, VariantDef,\n     },\n     from_source::FromSource,"}, {"sha": "8ce86ad7d210fa4d73511a28d9cc5f2c145d7406", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "patch": "@@ -1,7 +1,6 @@\n //! FIXME: write short doc here\n \n-use either::Either;\n-use hir::{Adt, HasSource, PathResolution};\n+use hir::{Adt, PathResolution, ScopeDef};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -19,17 +18,15 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     match def {\n         hir::ModuleDef::Module(module) => {\n             let module_scope = module.scope(ctx.db);\n-            for (name, def, import) in module_scope {\n-                if let hir::ScopeDef::ModuleDef(hir::ModuleDef::BuiltinType(..)) = def {\n-                    if ctx.use_item_syntax.is_some() {\n+            for (name, def) in module_scope {\n+                if ctx.use_item_syntax.is_some() {\n+                    if let hir::ScopeDef::ModuleDef(hir::ModuleDef::BuiltinType(..)) = def {\n                         tested_by!(dont_complete_primitive_in_use);\n                         continue;\n                     }\n-                }\n-                if Some(module) == ctx.module {\n-                    if let Some(import) = import {\n-                        if let Either::Left(use_tree) = import.source(ctx.db).value {\n-                            if use_tree.syntax().text_range().contains_inclusive(ctx.offset) {\n+                    if let ScopeDef::Unknown = def {\n+                        if let Some(name_ref) = ctx.name_ref.as_ref() {\n+                            if &name_ref.syntax().text() == name.to_string().as_str() {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);\n                                 continue;"}, {"sha": "8f56ce7062a63d1a85d44fa0abf1e4951b971936", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ba9072fad8698af4e96b38b8b4acfdd801f7f7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=67ba9072fad8698af4e96b38b8b4acfdd801f7f7", "patch": "@@ -18,6 +18,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) analyzer: hir::SourceAnalyzer,\n     pub(super) offset: TextUnit,\n     pub(super) token: SyntaxToken,\n+    pub(super) name_ref: Option<ast::NameRef>,\n     pub(super) module: Option<hir::Module>,\n     pub(super) function_syntax: Option<ast::FnDef>,\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n@@ -68,6 +69,7 @@ impl<'a> CompletionContext<'a> {\n             analyzer,\n             token,\n             offset: position.offset,\n+            name_ref: None,\n             module,\n             function_syntax: None,\n             use_item_syntax: None,\n@@ -142,6 +144,8 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     fn classify_name_ref(&mut self, original_file: SourceFile, name_ref: ast::NameRef) {\n+        self.name_ref =\n+            find_node_at_offset(original_file.syntax(), name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n         if name_ref.syntax().parent().and_then(ast::RecordField::cast).is_some() {\n             self.record_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);"}]}