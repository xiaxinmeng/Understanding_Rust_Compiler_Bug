{"sha": "7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "node_id": "C_kwDOAAsO6NoAKDcwNTQyODdiMGQ1MmNkMWJlNWRjNTBlNmExMWZhN2RjYWNlODAyOWY", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-11-28T19:58:57Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-11-28T19:58:57Z"}, "message": "Move helper closure to method.", "tree": {"sha": "e76fb17ce3820605caffe229e7b2da71d7e86b2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76fb17ce3820605caffe229e7b2da71d7e86b2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "html_url": "https://github.com/rust-lang/rust/commit/7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7054287b0d52cd1be5dc50e6a11fa7dcace8029f/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2582e36da3bb1ac57fe0472f6d424da40520dc51", "url": "https://api.github.com/repos/rust-lang/rust/commits/2582e36da3bb1ac57fe0472f6d424da40520dc51", "html_url": "https://github.com/rust-lang/rust/commit/2582e36da3bb1ac57fe0472f6d424da40520dc51"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "434a9c214686eb856b09ab4e7d8df94dee2262cf", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7054287b0d52cd1be5dc50e6a11fa7dcace8029f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7054287b0d52cd1be5dc50e6a11fa7dcace8029f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "patch": "@@ -1875,24 +1875,28 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.tcx.erase_late_bound_regions(value)\n     }\n \n+    /// Determine if the given associated item type is relevant in the current context.\n+    fn is_relevant_kind_for_mode(&self, kind: ty::AssocKind) -> bool {\n+        match (self.mode, kind) {\n+            (Mode::MethodCall, ty::AssocKind::Fn) => true,\n+            (Mode::Path, ty::AssocKind::Const | ty::AssocKind::Fn) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Finds the method with the appropriate name (or return type, as the case may be). If\n     /// `allow_similar_names` is set, find methods with close-matching names.\n     // The length of the returned iterator is nearly always 0 or 1 and this\n     // method is fairly hot.\n     fn impl_or_trait_item(&self, def_id: DefId) -> SmallVec<[ty::AssocItem; 1]> {\n-        let relevant_kind_for_mode = |kind| match (self.mode, kind) {\n-            (Mode::MethodCall, ty::AssocKind::Fn) => true,\n-            (Mode::Path, ty::AssocKind::Const | ty::AssocKind::Fn) => true,\n-            _ => false,\n-        };\n         if let Some(name) = self.method_name {\n             if self.allow_similar_names {\n                 let max_dist = max(name.as_str().len(), 3) / 3;\n                 self.tcx\n                     .associated_items(def_id)\n                     .in_definition_order()\n                     .filter(|x| {\n-                        if !relevant_kind_for_mode(x.kind) {\n+                        if !self.is_relevant_kind_for_mode(x.kind) {\n                             return false;\n                         }\n                         match lev_distance_with_substrings(name.as_str(), x.name.as_str(), max_dist)\n@@ -1906,14 +1910,14 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_value(def_id, name)\n-                    .filter(|x| relevant_kind_for_mode(x.kind))\n+                    .filter(|x| self.is_relevant_kind_for_mode(x.kind))\n                     .map_or_else(SmallVec::new, |x| SmallVec::from_buf([x]))\n             }\n         } else {\n             self.tcx\n                 .associated_items(def_id)\n                 .in_definition_order()\n-                .filter(|x| relevant_kind_for_mode(x.kind))\n+                .filter(|x| self.is_relevant_kind_for_mode(x.kind))\n                 .copied()\n                 .collect()\n         }"}]}