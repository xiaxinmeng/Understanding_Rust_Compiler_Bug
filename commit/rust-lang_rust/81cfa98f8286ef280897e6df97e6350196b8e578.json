{"sha": "81cfa98f8286ef280897e6df97e6350196b8e578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxY2ZhOThmODI4NmVmMjgwODk3ZTZkZjk3ZTYzNTAxOTZiOGU1Nzg=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-21T07:18:56Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-01T06:24:08Z"}, "message": "config.toml error reporting:\n\nImprove error messages for musl-libdir and wasi-root keys. Previously\nthe parser would panic with `unwrap()`. Now it prints\n\n      Target \"wasm32-wasi\" does not have a \"wasi-root\" key\n\n(and similar for the `musl-libdir` field, which is used in target that\nuse musl)\n\nAlso update comments around wasi-root field to make it clear that the\nfield is only valid in wasm32-wasi target and needs to be moved to a\n`[target.wasm32-wasi]` section to be valid.\n\nFixes #82317", "tree": {"sha": "3af08ebfad7c7c0d3aca2ddc4f6de1994693e85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3af08ebfad7c7c0d3aca2ddc4f6de1994693e85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81cfa98f8286ef280897e6df97e6350196b8e578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81cfa98f8286ef280897e6df97e6350196b8e578", "html_url": "https://github.com/rust-lang/rust/commit/81cfa98f8286ef280897e6df97e6350196b8e578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81cfa98f8286ef280897e6df97e6350196b8e578/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b150b7a8f77874f26c617666f5608fe4a3e58df", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b150b7a8f77874f26c617666f5608fe4a3e58df", "html_url": "https://github.com/rust-lang/rust/commit/3b150b7a8f77874f26c617666f5608fe4a3e58df"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "4dc83cad2a3108c197141516a38d8d54529f97ad", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81cfa98f8286ef280897e6df97e6350196b8e578/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/81cfa98f8286ef280897e6df97e6350196b8e578/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=81cfa98f8286ef280897e6df97e6350196b8e578", "patch": "@@ -631,7 +631,9 @@ changelog-seen = 2\n # The full path to the musl libdir.\n #musl-libdir = musl-root/lib\n \n-# The root location of the `wasm32-wasi` sysroot.\n+# The root location of the `wasm32-wasi` sysroot. Only used for the\n+# `wasm32-wasi` target. If you are building wasm32-wasi target, make sure to\n+# create a `[target.wasm32-wasi]` section and move this field there.\n #wasi-root = \"...\"\n \n # Used in testing for configuring where the QEMU images are located, you"}, {"sha": "7c8e02bdb8ee706e660146d1c9e816e7e99bfcae", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81cfa98f8286ef280897e6df97e6350196b8e578/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cfa98f8286ef280897e6df97e6350196b8e578/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=81cfa98f8286ef280897e6df97e6350196b8e578", "patch": "@@ -178,7 +178,9 @@ fn copy_self_contained_objects(\n     // To do that we have to distribute musl startup objects as a part of Rust toolchain\n     // and link with them manually in the self-contained mode.\n     if target.contains(\"musl\") {\n-        let srcdir = builder.musl_libdir(target).unwrap();\n+        let srcdir = builder.musl_libdir(target).unwrap_or_else(|| {\n+            panic!(\"Target {:?} does not have a \\\"musl-libdir\\\" key\", target.triple)\n+        });\n         for &obj in &[\"crt1.o\", \"Scrt1.o\", \"rcrt1.o\", \"crti.o\", \"crtn.o\"] {\n             copy_and_stamp(\n                 builder,\n@@ -196,7 +198,12 @@ fn copy_self_contained_objects(\n             target_deps.push((target, DependencyType::TargetSelfContained));\n         }\n     } else if target.ends_with(\"-wasi\") {\n-        let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n+        let srcdir = builder\n+            .wasi_root(target)\n+            .unwrap_or_else(|| {\n+                panic!(\"Target {:?} does not have a \\\"wasi-root\\\" key\", target.triple)\n+            })\n+            .join(\"lib/wasm32-wasi\");\n         for &obj in &[\"crt1.o\", \"crt1-reactor.o\"] {\n             copy_and_stamp(\n                 builder,"}]}