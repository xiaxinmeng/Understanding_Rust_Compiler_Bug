{"sha": "2daaf2b252040ff542eb42d66043f62c360c4db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYWFmMmIyNTIwNDBmZjU0MmViNDJkNjYwNDNmNjJjMzYwYzRkYjU=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-16T02:48:09Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-03-21T21:33:36Z"}, "message": "replace some adhoc logic with article_and_descr", "tree": {"sha": "d36b2cab978dbf2d3789635df868ff11741cc05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36b2cab978dbf2d3789635df868ff11741cc05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2daaf2b252040ff542eb42d66043f62c360c4db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2daaf2b252040ff542eb42d66043f62c360c4db5", "html_url": "https://github.com/rust-lang/rust/commit/2daaf2b252040ff542eb42d66043f62c360c4db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2daaf2b252040ff542eb42d66043f62c360c4db5/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "html_url": "https://github.com/rust-lang/rust/commit/38114ff16e7856f98b2b4be7ab4cd29b38bed59a"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "14ad35767b992d14f7f22ae39a1659ca54f241dd", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2daaf2b252040ff542eb42d66043f62c360c4db5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daaf2b252040ff542eb42d66043f62c360c4db5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2daaf2b252040ff542eb42d66043f62c360c4db5", "patch": "@@ -349,7 +349,7 @@ impl MissingDoc {\n         id: Option<hir::HirId>,\n         attrs: &[ast::Attribute],\n         sp: Span,\n-        desc: &'static str,\n+        desc: &str,\n     ) {\n         // If we're building a test harness, then warning about\n         // documentation is probably not really relevant right now.\n@@ -413,12 +413,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n-        let desc = match it.kind {\n-            hir::ItemKind::Fn(..) => \"a function\",\n-            hir::ItemKind::Mod(..) => \"a module\",\n-            hir::ItemKind::Enum(..) => \"an enum\",\n-            hir::ItemKind::Struct(..) => \"a struct\",\n-            hir::ItemKind::Union(..) => \"a union\",\n+        match it.kind {\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n                 // Issue #11592: traits are always considered exported, even when private.\n                 if let hir::VisibilityKind::Inherited = it.vis.node {\n@@ -428,33 +423,45 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                     }\n                     return;\n                 }\n-                \"a trait\"\n             }\n-            hir::ItemKind::TyAlias(..) => \"a type alias\",\n             hir::ItemKind::Impl { of_trait: Some(ref trait_ref), items, .. } => {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n                 if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(real_trait) {\n-                    match cx.tcx.hir().find(hir_id) {\n-                        Some(Node::Item(item)) => {\n-                            if let hir::VisibilityKind::Inherited = item.vis.node {\n-                                for impl_item_ref in items {\n-                                    self.private_traits.insert(impl_item_ref.id.hir_id);\n-                                }\n+                    if let Some(Node::Item(item)) = cx.tcx.hir().find(hir_id) {\n+                        if let hir::VisibilityKind::Inherited = item.vis.node {\n+                            for impl_item_ref in items {\n+                                self.private_traits.insert(impl_item_ref.id.hir_id);\n                             }\n                         }\n-                        _ => {}\n                     }\n                 }\n                 return;\n             }\n-            hir::ItemKind::Const(..) => \"a constant\",\n-            hir::ItemKind::Static(..) => \"a static\",\n+\n+            hir::ItemKind::TyAlias(..)\n+            | hir::ItemKind::Fn(..)\n+            | hir::ItemKind::Mod(..)\n+            | hir::ItemKind::Enum(..)\n+            | hir::ItemKind::Struct(..)\n+            | hir::ItemKind::Union(..)\n+            | hir::ItemKind::Const(..)\n+            | hir::ItemKind::Static(..) => {}\n+\n             _ => return,\n         };\n \n-        self.check_missing_docs_attrs(cx, Some(it.hir_id), &it.attrs, it.span, desc);\n+        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n+        let (article, desc) = cx.tcx.article_and_description(def_id);\n+\n+        self.check_missing_docs_attrs(\n+            cx,\n+            Some(it.hir_id),\n+            &it.attrs,\n+            it.span,\n+            &format!(\"{} {}\", article, desc),\n+        );\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, trait_item: &hir::TraitItem<'_>) {"}]}