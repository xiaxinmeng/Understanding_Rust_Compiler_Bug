{"sha": "45c8cb3597256390c69ff5ad6a7ee565114a1ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzhjYjM1OTcyNTYzOTBjNjlmZjVhZDZhN2VlNTY1MTE0YTFlYzc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-10T13:29:31Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T14:18:21Z"}, "message": "rustc: remove unused errors_reported field from regionck.", "tree": {"sha": "4cf2f9c1a57d63ef8c2fb3249258beb01f65d771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf2f9c1a57d63ef8c2fb3249258beb01f65d771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c8cb3597256390c69ff5ad6a7ee565114a1ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c8cb3597256390c69ff5ad6a7ee565114a1ec7", "html_url": "https://github.com/rust-lang/rust/commit/45c8cb3597256390c69ff5ad6a7ee565114a1ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c8cb3597256390c69ff5ad6a7ee565114a1ec7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "html_url": "https://github.com/rust-lang/rust/commit/acc5c971babe3c59a32834ecac3ec7e064bf1dfa"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "021318431a0721fcd00ff4ea91354eb24126c637", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45c8cb3597256390c69ff5ad6a7ee565114a1ec7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c8cb3597256390c69ff5ad6a7ee565114a1ec7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=45c8cb3597256390c69ff5ad6a7ee565114a1ec7", "patch": "@@ -158,7 +158,6 @@ macro_rules! ignore_err(\n \n pub struct Rcx<'a> {\n     fcx: &'a FnCtxt<'a>,\n-    errors_reported: uint,\n \n     // id of innermost fn or loop\n     repeating_scope: ast::NodeId,\n@@ -294,8 +293,7 @@ impl<'a, 'b> mc::Typer for &'a mut Rcx<'b> {\n }\n \n pub fn regionck_expr(fcx: &FnCtxt, e: &ast::Expr) {\n-    let mut rcx = Rcx { fcx: fcx, errors_reported: 0,\n-                         repeating_scope: e.id };\n+    let mut rcx = Rcx { fcx: fcx, repeating_scope: e.id };\n     let rcx = &mut rcx;\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n@@ -305,8 +303,7 @@ pub fn regionck_expr(fcx: &FnCtxt, e: &ast::Expr) {\n }\n \n pub fn regionck_fn(fcx: &FnCtxt, blk: &ast::Block) {\n-    let mut rcx = Rcx { fcx: fcx, errors_reported: 0,\n-                         repeating_scope: blk.id };\n+    let mut rcx = Rcx { fcx: fcx, repeating_scope: blk.id };\n     let rcx = &mut rcx;\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n@@ -951,8 +948,7 @@ fn constrain_regions_in_type_of_node(\n     rcx: &mut Rcx,\n     id: ast::NodeId,\n     minimum_lifetime: ty::Region,\n-    origin: infer::SubregionOrigin) -> bool\n-{\n+    origin: infer::SubregionOrigin) {\n     //! Guarantees that any lifetimes which appear in the type of\n     //! the node `id` (after applying adjustments) are valid for at\n     //! least `minimum_lifetime`\n@@ -970,15 +966,14 @@ fn constrain_regions_in_type_of_node(\n             ty={}, ty0={}, id={}, minimum_lifetime={:?})\",\n            ty_to_str(tcx, ty), ty_to_str(tcx, ty0),\n            id, minimum_lifetime);\n-    constrain_regions_in_type(rcx, minimum_lifetime, origin, ty)\n+    constrain_regions_in_type(rcx, minimum_lifetime, origin, ty);\n }\n \n fn constrain_regions_in_type(\n     rcx: &mut Rcx,\n     minimum_lifetime: ty::Region,\n     origin: infer::SubregionOrigin,\n-    ty: ty::t) -> bool\n-{\n+    ty: ty::t) {\n     /*!\n      * Requires that any regions which appear in `ty` must be\n      * superregions of `minimum_lifetime`.  Also enforces the constraint\n@@ -993,7 +988,6 @@ fn constrain_regions_in_type(\n      * code that R corresponds to.\"\n      */\n \n-    let e = rcx.errors_reported;\n     let tcx = rcx.fcx.ccx.tcx;\n \n     debug!(\"constrain_regions_in_type(minimum_lifetime={}, ty={})\",\n@@ -1020,8 +1014,6 @@ fn constrain_regions_in_type(\n                 r_sub, r_sup);\n         }\n     });\n-\n-    return e == rcx.errors_reported;\n }\n \n fn link_addr_of(rcx: &mut Rcx, expr: &ast::Expr,"}]}