{"sha": "9867e54beaeab381a1352f095662196353c36d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjdlNTRiZWFlYWIzODFhMTM1MmYwOTU2NjIxOTYzNTNjMzZkNjQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-29T16:05:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-29T16:05:11Z"}, "message": "Rollup merge of #78244 - workingjubilee:dogfood-fancy-ranges, r=varkor\n\nDogfood {exclusive,half-open} ranges in compiler (nfc)\n\nIn particular, this allows us to write more explicit matches that\navoid the pitfalls of using a fully general fall-through case, yet\nremain fairly ergonomic. Less logic is in guard cases, more is in\nthe actual exhaustive case analysis.\n\nNo functional changes.", "tree": {"sha": "6dbc3d7156b8e9516170192495da250ba60b5a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbc3d7156b8e9516170192495da250ba60b5a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9867e54beaeab381a1352f095662196353c36d64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmug4CRBK7hj4Ov3rIwAAdHIIAB7hhr6jjm2paAknwa+5nFry\n/LF0B1m1BuhN7tSufuFnWZD6WXJcdgAB7jPwYsgjNs6saPeJeGjsFPMLvjFsN6qW\nUPkBxj/au72+Wg5uf47dY6Tj2laknGI7QdyZffKk27crNQc8qcXXYlZfLZH5T9S6\nyFNoNXXjrMBH+S8bSr++ljjNbNZyBfAHlVhXZ0BnRxsLi4IhZk0Ge5kCbm20kzhJ\nNVzKTWviSB+Pe1HaykJtucyWKGjJojRxR8HWAMjq+vYm9R1lt7bCB5vQV56T1Rt9\n41Vm7XvauzL/C27wCm0PEjqns40fJKbfM17qzHgMTxqIOLg/C4hn26/B9lYvd88=\n=WpTI\n-----END PGP SIGNATURE-----\n", "payload": "tree 6dbc3d7156b8e9516170192495da250ba60b5a66\nparent a384a5866b93cd6ebbfca545b5e3755afb97fb88\nparent 0e88db7db4c09c63ba8a0036d34e72bd48719bd1\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603987511 +0100\ncommitter GitHub <noreply@github.com> 1603987511 +0100\n\nRollup merge of #78244 - workingjubilee:dogfood-fancy-ranges, r=varkor\n\nDogfood {exclusive,half-open} ranges in compiler (nfc)\n\nIn particular, this allows us to write more explicit matches that\navoid the pitfalls of using a fully general fall-through case, yet\nremain fairly ergonomic. Less logic is in guard cases, more is in\nthe actual exhaustive case analysis.\n\nNo functional changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9867e54beaeab381a1352f095662196353c36d64", "html_url": "https://github.com/rust-lang/rust/commit/9867e54beaeab381a1352f095662196353c36d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9867e54beaeab381a1352f095662196353c36d64/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a384a5866b93cd6ebbfca545b5e3755afb97fb88", "url": "https://api.github.com/repos/rust-lang/rust/commits/a384a5866b93cd6ebbfca545b5e3755afb97fb88", "html_url": "https://github.com/rust-lang/rust/commit/a384a5866b93cd6ebbfca545b5e3755afb97fb88"}, {"sha": "0e88db7db4c09c63ba8a0036d34e72bd48719bd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e88db7db4c09c63ba8a0036d34e72bd48719bd1", "html_url": "https://github.com/rust-lang/rust/commit/0e88db7db4c09c63ba8a0036d34e72bd48719bd1"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "2ecdff1a18d4133e6a6990765df6fbc32009c9ea", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=9867e54beaeab381a1352f095662196353c36d64", "patch": "@@ -35,6 +35,8 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(or_patterns)]\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "17f0d5632e657e0dfa71b346a74c6a645b974897", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=9867e54beaeab381a1352f095662196353c36d64", "patch": "@@ -250,13 +250,13 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     has_emitted\n                 }\n                 ty::Array(ty, len) => match len.try_eval_usize(cx.tcx, cx.param_env) {\n+                    // If the array is empty we don't lint, to avoid false positives\n+                    Some(0) | None => false,\n                     // If the array is definitely non-empty, we can do `#[must_use]` checking.\n-                    Some(n) if n != 0 => {\n+                    Some(n) => {\n                         let descr_pre = &format!(\"{}array{} of \", descr_pre, plural_suffix,);\n                         check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, n as usize + 1)\n                     }\n-                    // Otherwise, we don't lint, to avoid false positives.\n-                    _ => false,\n                 },\n                 ty::Closure(..) => {\n                     cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {"}, {"sha": "5ccadb7e660f681c055c9700396fe25a8cdcc4d8", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=9867e54beaeab381a1352f095662196353c36d64", "patch": "@@ -47,6 +47,8 @@\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(int_error_matching)]\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "2f7707b9498ad45541075e61788351088cd3ee00", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=9867e54beaeab381a1352f095662196353c36d64", "patch": "@@ -201,13 +201,13 @@ impl<'tcx> TyS<'tcx> {\n             ),\n \n             Array(ty, len) => match len.try_eval_usize(tcx, param_env) {\n+                Some(0) | None => DefIdForest::empty(),\n                 // If the array is definitely non-empty, it's uninhabited if\n                 // the type of its elements is uninhabited.\n-                Some(n) if n != 0 => ty.uninhabited_from(tcx, param_env),\n-                _ => DefIdForest::empty(),\n+                Some(1..) => ty.uninhabited_from(tcx, param_env),\n             },\n \n-            // References to uninitialised memory is valid for any type, including\n+            // References to uninitialised memory are valid for any type, including\n             // uninhabited types, in unsafe code, so we treat all references as\n             // inhabited.\n             // The precise semantics of inhabitedness with respect to references is currently"}, {"sha": "431fa30ed0fa1d9f8884c19ce1dbab01a90f07b6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=9867e54beaeab381a1352f095662196353c36d64", "patch": "@@ -1834,10 +1834,10 @@ impl<'tcx> TyS<'tcx> {\n             }\n             ty::Array(ty, len) => {\n                 match len.try_eval_usize(tcx, ParamEnv::empty()) {\n+                    Some(0) | None => false,\n                     // If the array is definitely non-empty, it's uninhabited if\n                     // the type of its elements is uninhabited.\n-                    Some(n) if n != 0 => ty.conservative_is_privately_uninhabited(tcx),\n-                    _ => false,\n+                    Some(1..) => ty.conservative_is_privately_uninhabited(tcx),\n                 }\n             }\n             ty::Ref(..) => {"}, {"sha": "55ee4e52082e51e3b10c57e4fc7dd2db3126b391", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9867e54beaeab381a1352f095662196353c36d64/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=9867e54beaeab381a1352f095662196353c36d64", "patch": "@@ -153,14 +153,14 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n     const SECONDARY_LIB_DIR: &str = \"lib\";\n \n     match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n-        Some(libdir) if libdir != \"lib\" => libdir.into(),\n-        _ => {\n+        None | Some(\"lib\") => {\n             if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n                 PRIMARY_LIB_DIR.into()\n             } else {\n                 SECONDARY_LIB_DIR.into()\n             }\n         }\n+        Some(libdir) => libdir.into(),\n     }\n }\n "}]}