{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "node_id": "C_kwDOAAsO6NoAKGUwMTJhMTkxZDc2OGFkZWRhMWVlMzZhOTllZjhiOTJkNTE5MjAxNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-06T22:56:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-06T22:56:13Z"}, "message": "Auto merge of #92627 - matthiaskrgr:rollup-xmz0rib, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #91055 (return the correct type for closures in `type_of`)\n - #92207 (Delay remaining `span_bug`s in drop elaboration)\n - #92417 (Fix spacing and ordering of words in pretty printed Impl)\n - #92504 (Exit nonzero on rustc -Wall)\n - #92559 (RustWrapper: adapt to new AttributeMask API)\n - #92589 (Break the loop)\n - #92607 (rustc_metadata: Some minor cleanups and optimizations)\n - #92620 (Remove unused `ExtendDefault` struct)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7b19030fd7fd2b126d41af9aaf4b918772b95db6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b19030fd7fd2b126d41af9aaf4b918772b95db6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa4ac66c194046f631ce076c75516ecfdeb77ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa4ac66c194046f631ce076c75516ecfdeb77ee", "html_url": "https://github.com/rust-lang/rust/commit/cfa4ac66c194046f631ce076c75516ecfdeb77ee"}, {"sha": "fcae1d64d98a7cbbb1f82dfdef3af52ab23e9353", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcae1d64d98a7cbbb1f82dfdef3af52ab23e9353", "html_url": "https://github.com/rust-lang/rust/commit/fcae1d64d98a7cbbb1f82dfdef3af52ab23e9353"}], "stats": {"total": 356, "additions": 215, "deletions": 141}, "files": [{"sha": "3267945f427a752bc8b91a3eb1893108051a4961", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -1287,14 +1287,17 @@ impl<'a> State<'a> {\n                 self.print_visibility(&item.vis);\n                 self.print_defaultness(defaultness);\n                 self.print_unsafety(unsafety);\n-                self.word_nbsp(\"impl\");\n-                self.print_constness(constness);\n+                self.word(\"impl\");\n \n-                if !generics.params.is_empty() {\n+                if generics.params.is_empty() {\n+                    self.nbsp();\n+                } else {\n                     self.print_generic_params(&generics.params);\n                     self.space();\n                 }\n \n+                self.print_constness(constness);\n+\n                 if let ast::ImplPolarity::Negative(_) = polarity {\n                     self.word(\"!\");\n                 }"}, {"sha": "694c679c1586efb40404f450ebd15ef9bfc7b0ca", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -1040,7 +1040,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     let wall = matches.opt_strs(\"W\");\n     if wall.iter().any(|x| *x == \"all\") {\n         print_wall_help();\n-        return None;\n+        rustc_errors::FatalError.raise();\n     }\n \n     // Don't handle -W help here, because we might first load plugins."}, {"sha": "c21e4acbefec04541ccfbda0e1d28f8ab2a8af5c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -341,14 +341,12 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n                                                  unsigned Index,\n                                                  LLVMRustAttribute RustAttr) {\n   Function *F = unwrap<Function>(Fn);\n-  Attribute Attr = Attribute::get(F->getContext(), fromRust(RustAttr));\n-  AttrBuilder B(Attr);\n-  auto PAL = F->getAttributes();\n+  AttributeList PAL = F->getAttributes();\n   AttributeList PALNew;\n #if LLVM_VERSION_LT(14, 0)\n-  PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+  PALNew = PAL.removeAttribute(F->getContext(), Index, fromRust(RustAttr));\n #else\n-  PALNew = PAL.removeAttributesAtIndex(F->getContext(), Index, B);\n+  PALNew = PAL.removeAttributeAtIndex(F->getContext(), Index, fromRust(RustAttr));\n #endif\n   F->setAttributes(PALNew);\n }"}, {"sha": "bb9a58a0b62aa48dfe897ef9f2dba7dc5f2c7825", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 64, "deletions": 71, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -27,6 +27,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n+use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -92,8 +93,7 @@ crate struct CrateMetadata {\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n     /// so pre-decoding can probably be avoided.\n-    trait_impls:\n-        FxHashMap<(u32, DefIndex), Lazy<[(DefIndex, Option<ty::fast_reject::SimplifiedType>)]>>,\n+    trait_impls: FxHashMap<(u32, DefIndex), Lazy<[(DefIndex, Option<SimplifiedType>)]>>,\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate.\n@@ -722,25 +722,24 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         &self.raw_proc_macros.unwrap()[pos]\n     }\n \n-    fn try_item_ident(&self, item_index: DefIndex, sess: &Session) -> Result<Ident, String> {\n-        let name = self\n-            .def_key(item_index)\n-            .disambiguated_data\n-            .data\n-            .get_opt_name()\n-            .ok_or_else(|| format!(\"Missing opt name for {:?}\", item_index))?;\n-        let span = self\n-            .root\n-            .tables\n-            .ident_span\n-            .get(self, item_index)\n-            .ok_or_else(|| format!(\"Missing ident span for {:?} ({:?})\", name, item_index))?\n-            .decode((self, sess));\n-        Ok(Ident::new(name, span))\n+    fn opt_item_ident(&self, item_index: DefIndex, sess: &Session) -> Option<Ident> {\n+        let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;\n+        let span = match self.root.tables.ident_span.get(self, item_index) {\n+            Some(lazy_span) => lazy_span.decode((self, sess)),\n+            None => {\n+                // FIXME: this weird case of a name with no span is specific to `extern crate`\n+                // items, which are supposed to be treated like `use` items and only be encoded\n+                // to metadata as `Export`s, return `None` because that's what all the callers\n+                // expect in this case.\n+                assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);\n+                return None;\n+            }\n+        };\n+        Some(Ident::new(name, span))\n     }\n \n     fn item_ident(&self, item_index: DefIndex, sess: &Session) -> Ident {\n-        self.try_item_ident(item_index, sess).unwrap()\n+        self.opt_item_ident(item_index, sess).expect(\"no encoded ident for item\")\n     }\n \n     fn maybe_kind(&self, item_id: DefIndex) -> Option<EntryKind> {\n@@ -1102,27 +1101,19 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         // Iterate over all children.\n         if let Some(children) = self.root.tables.children.get(self, id) {\n             for child_index in children.decode((self, sess)) {\n-                // FIXME: Merge with the logic below.\n-                if let None | Some(EntryKind::ForeignMod | EntryKind::Impl(_)) =\n-                    self.maybe_kind(child_index)\n-                {\n-                    continue;\n-                }\n-\n-                let def_key = self.def_key(child_index);\n-                if def_key.disambiguated_data.data.get_opt_name().is_some() {\n-                    let span = self.get_span(child_index, sess);\n+                if let Some(ident) = self.opt_item_ident(child_index, sess) {\n                     let kind = self.def_kind(child_index);\n-                    let ident = self.item_ident(child_index, sess);\n-                    let vis = self.get_visibility(child_index);\n+                    if matches!(kind, DefKind::Macro(..)) {\n+                        // FIXME: Macros are currently encoded twice, once as items and once as\n+                        // reexports. We ignore the items here and only use the reexports.\n+                        continue;\n+                    }\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n+                    let vis = self.get_visibility(child_index);\n+                    let span = self.get_span(child_index, sess);\n \n-                    // FIXME: Macros are currently encoded twice, once as items and once as\n-                    // reexports. We ignore the items here and only use the reexports.\n-                    if !matches!(kind, DefKind::Macro(..)) {\n-                        callback(Export { res, ident, vis, span });\n-                    }\n+                    callback(Export { ident, res, vis, span });\n \n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n@@ -1309,24 +1300,26 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_item_attrs(\n         &'a self,\n-        node_id: DefIndex,\n+        id: DefIndex,\n         sess: &'a Session,\n     ) -> impl Iterator<Item = ast::Attribute> + 'a {\n-        // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n-        // we assume that someone passing in a tuple struct ctor is actually wanting to\n-        // look at the definition\n-        let def_key = self.def_key(node_id);\n-        let item_id = if def_key.disambiguated_data.data == DefPathData::Ctor {\n-            def_key.parent.unwrap()\n-        } else {\n-            node_id\n-        };\n-\n         self.root\n             .tables\n             .attributes\n-            .get(self, item_id)\n-            .unwrap_or_else(Lazy::empty)\n+            .get(self, id)\n+            .unwrap_or_else(|| {\n+                // Structure and variant constructors don't have any attributes encoded for them,\n+                // but we assume that someone passing a constructor ID actually wants to look at\n+                // the attributes on the corresponding struct or variant.\n+                let def_key = self.def_key(id);\n+                assert_eq!(def_key.disambiguated_data.data, DefPathData::Ctor);\n+                let parent_id = def_key.parent.expect(\"no parent for a constructor\");\n+                self.root\n+                    .tables\n+                    .attributes\n+                    .get(self, parent_id)\n+                    .expect(\"no encoded attributes for a structure or variant\")\n+            })\n             .decode((self, sess))\n     }\n \n@@ -1372,39 +1365,39 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.traits.decode(self).map(|index| self.local_def_id(index))\n     }\n \n-    fn get_implementations_for_trait(\n+    fn get_trait_impls(&'a self) -> impl Iterator<Item = (DefId, Option<SimplifiedType>)> + 'a {\n+        self.trait_impls.values().flat_map(move |impls| {\n+            impls\n+                .decode(self)\n+                .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty))\n+        })\n+    }\n+\n+    fn get_implementations_of_trait(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        filter: Option<DefId>,\n-    ) -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n+        trait_def_id: DefId,\n+    ) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         if self.root.is_proc_macro_crate() {\n             // proc-macro crates export no trait impls.\n             return &[];\n         }\n \n-        if let Some(def_id) = filter {\n-            // Do a reverse lookup beforehand to avoid touching the crate_num\n-            // hash map in the loop below.\n-            let filter = match self.reverse_translate_def_id(def_id) {\n-                Some(def_id) => (def_id.krate.as_u32(), def_id.index),\n-                None => return &[],\n-            };\n+        // Do a reverse lookup beforehand to avoid touching the crate_num\n+        // hash map in the loop below.\n+        let key = match self.reverse_translate_def_id(trait_def_id) {\n+            Some(def_id) => (def_id.krate.as_u32(), def_id.index),\n+            None => return &[],\n+        };\n \n-            if let Some(impls) = self.trait_impls.get(&filter) {\n-                tcx.arena.alloc_from_iter(\n-                    impls.decode(self).map(|(idx, simplified_self_ty)| {\n-                        (self.local_def_id(idx), simplified_self_ty)\n-                    }),\n-                )\n-            } else {\n-                &[]\n-            }\n-        } else {\n-            tcx.arena.alloc_from_iter(self.trait_impls.values().flat_map(|impls| {\n+        if let Some(impls) = self.trait_impls.get(&key) {\n+            tcx.arena.alloc_from_iter(\n                 impls\n                     .decode(self)\n-                    .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty))\n-            }))\n+                    .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),\n+            )\n+        } else {\n+            &[]\n         }\n     }\n "}, {"sha": "aac0aa61ea65eccaf291b6c67c86160e9ca6b09b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -133,9 +133,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generator_kind => { cdata.generator_kind(def_id.index) }\n     opt_def_kind => { Some(cdata.def_kind(def_id.index)) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n-    def_ident_span => {\n-        cdata.try_item_ident(def_id.index, &tcx.sess).ok().map(|ident| ident.span)\n-    }\n+    def_ident_span => { cdata.opt_item_ident(def_id.index, &tcx.sess).map(|ident| ident.span) }\n     lookup_stability => {\n         cdata.get_stability(def_id.index).map(|s| tcx.intern_stability(s))\n     }\n@@ -145,9 +143,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     lookup_deprecation_entry => {\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n-    item_attrs => { tcx.arena.alloc_from_iter(\n-        cdata.get_item_attrs(def_id.index, tcx.sess)\n-    ) }\n+    item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     rendered_const => { cdata.get_rendered_const(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n@@ -196,14 +192,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     extra_filename => { cdata.root.extra_filename.clone() }\n \n     traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+    all_trait_implementations => { tcx.arena.alloc_from_iter(cdata.get_trait_impls()) }\n \n-    implementations_of_trait => {\n-        cdata.get_implementations_for_trait(tcx, Some(other))\n-    }\n-\n-    all_trait_implementations => {\n-        cdata.get_implementations_for_trait(tcx, None)\n-    }\n+    implementations_of_trait => { cdata.get_implementations_of_trait(tcx, other) }\n \n     visibility => { cdata.get_visibility(def_id.index) }\n     dep_kind => {\n@@ -470,7 +461,7 @@ impl CStore {\n         self.get_crate_data(cnum).num_def_ids()\n     }\n \n-    pub fn item_attrs(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n+    pub fn item_attrs_untracked(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n         self.get_crate_data(def_id.krate).get_item_attrs(def_id.index, sess).collect()\n     }\n "}, {"sha": "12d66f4fc45f36eabcea41a7b4cacc0ab9b3b813", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::interpret;\n use rustc_middle::thir;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n@@ -2055,7 +2055,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n struct ImplsVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    impls: FxHashMap<DefId, Vec<(DefIndex, Option<fast_reject::SimplifiedType>)>>,\n+    impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,\n }\n \n impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {"}, {"sha": "4076e0b9e0fed83e6db7e7d9000aeb7c5cb4a1e5", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::thir;\n+use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n@@ -261,7 +262,7 @@ crate struct CrateDep {\n #[derive(MetadataEncodable, MetadataDecodable)]\n crate struct TraitImpls {\n     trait_id: (u32, DefIndex),\n-    impls: Lazy<[(DefIndex, Option<ty::fast_reject::SimplifiedType>)]>,\n+    impls: Lazy<[(DefIndex, Option<SimplifiedType>)]>,\n }\n \n /// Define `LazyTables` and `TableBuilders` at the same time."}, {"sha": "b3db2e6340024529a8b8e25e18cd90a0f1e034eb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -1411,16 +1411,14 @@ rustc_queries! {\n \n     /// Given a crate and a trait, look up all impls of that trait in the crate.\n     /// Return `(impl_id, self_ty)`.\n-    query implementations_of_trait(_: (CrateNum, DefId))\n-        -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n+    query implementations_of_trait(_: (CrateNum, DefId)) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         desc { \"looking up implementations of a trait in a crate\" }\n         separate_provide_extern\n     }\n \n     /// Given a crate, look up all trait impls in that crate.\n     /// Return `(impl_id, self_ty)`.\n-    query all_trait_implementations(_: CrateNum)\n-        -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n+    query all_trait_implementations(_: CrateNum) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         desc { \"looking up all (?) trait implementations\" }\n         separate_provide_extern\n     }"}, {"sha": "daf9156a15f347f047500450a608ca88dec54013", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -143,6 +143,18 @@ pub fn simplify_type(\n }\n \n impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n+    pub fn def(self) -> Option<D> {\n+        match self {\n+            AdtSimplifiedType(d)\n+            | ForeignSimplifiedType(d)\n+            | TraitSimplifiedType(d)\n+            | ClosureSimplifiedType(d)\n+            | GeneratorSimplifiedType(d)\n+            | OpaqueSimplifiedType(d) => Some(d),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn map_def<U, F>(self, map: F) -> SimplifiedTypeGen<U>\n     where\n         F: Fn(D) -> U,"}, {"sha": "3af1b3a04402466c98444f4e37deb36323a6decb", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -28,6 +28,7 @@ use crate::traits::query::{\n };\n use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n+use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};"}, {"sha": "34d059f4ec849c28625f05730bf0cf5fb56891d4", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::specialization_graph;\n-use crate::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n@@ -68,7 +68,7 @@ pub enum TraitSpecializationKind {\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n     /// Impls indexed by their simplified self type, for fast lookup.\n-    non_blanket_impls: FxIndexMap<fast_reject::SimplifiedType, Vec<DefId>>,\n+    non_blanket_impls: FxIndexMap<SimplifiedType, Vec<DefId>>,\n }\n \n impl TraitImpls {"}, {"sha": "7320b2738a76c2c0b222f162962f9a4f10937cb1", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -316,12 +316,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 LookupResult::Parent(Some(parent)) => {\n                     let (_maybe_live, maybe_dead) = self.init_data.maybe_live_dead(parent);\n                     if maybe_dead {\n-                        span_bug!(\n+                        self.tcx.sess.delay_span_bug(\n                             terminator.source_info.span,\n-                            \"drop of untracked, uninitialized value {:?}, place {:?} ({:?})\",\n-                            bb,\n-                            place,\n-                            path\n+                            &format!(\n+                                \"drop of untracked, uninitialized value {:?}, place {:?} ({:?})\",\n+                                bb, place, path,\n+                            ),\n                         );\n                     }\n                     continue;\n@@ -368,10 +368,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             bb,\n                         ),\n                         LookupResult::Parent(..) => {\n-                            span_bug!(\n+                            self.tcx.sess.delay_span_bug(\n                                 terminator.source_info.span,\n-                                \"drop of untracked value {:?}\",\n-                                bb\n+                                &format!(\"drop of untracked value {:?}\", bb),\n                             );\n                         }\n                     }"}, {"sha": "4feeae5cab1ded3c12fefa1e327e220330038133", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -895,17 +895,19 @@ impl<'a> Resolver<'a> {\n                             // a note about editions\n                             let note = if let Some(did) = did {\n                                 let requires_note = !did.is_local()\n-                                    && this.cstore().item_attrs(did, this.session).iter().any(\n-                                        |attr| {\n+                                    && this\n+                                        .cstore()\n+                                        .item_attrs_untracked(did, this.session)\n+                                        .iter()\n+                                        .any(|attr| {\n                                             if attr.has_name(sym::rustc_diagnostic_item) {\n                                                 [sym::TryInto, sym::TryFrom, sym::FromIterator]\n                                                     .map(|x| Some(x))\n                                                     .contains(&attr.value_str())\n                                             } else {\n                                                 false\n                                             }\n-                                        },\n-                                    );\n+                                        });\n \n                                 requires_note.then(|| {\n                                     format!("}, {"sha": "b46a93c06734bf0e2ecab496b9532df74d47803b", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -3420,7 +3420,7 @@ impl<'a> Resolver<'a> {\n \n                 let attr = self\n                     .cstore()\n-                    .item_attrs(def_id, self.session)\n+                    .item_attrs_untracked(def_id, self.session)\n                     .into_iter()\n                     .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;\n                 let mut ret = Vec::new();"}, {"sha": "41c8a37a71a6d03a1c7dfd7c7cab5a0545cb1e28", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -295,7 +295,9 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         if let hir::ExprKind::Closure(..) = expr.kind {\n             let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             self.tcx.ensure().generics_of(def_id);\n-            self.tcx.ensure().type_of(def_id);\n+            // We do not call `type_of` for closures here as that\n+            // depends on typecheck and would therefore hide\n+            // any further errors in case one typeck fails.\n         }\n         intravisit::walk_expr(self, expr);\n     }"}, {"sha": "ae8d262fcf17654cab28a52d20e1a848ff03e557", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -470,14 +470,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Field(field) => icx.to_ty(field.ty),\n \n-        Node::Expr(&Expr { kind: ExprKind::Closure(.., gen), .. }) => {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            if let Some(movability) = gen {\n-                tcx.mk_generator(def_id.to_def_id(), substs, movability)\n-            } else {\n-                tcx.mk_closure(def_id.to_def_id(), substs)\n-            }\n-        }\n+        Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => tcx.typeck(def_id).node_type(hir_id),\n \n         Node::AnonConst(_) if let Some(param) = tcx.opt_const_param_of(def_id) => {\n             // We defer to `type_of` of the corresponding parameter"}, {"sha": "1ae0ff3036471d75391f4872ab8ed7ef599b1f16", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -715,13 +715,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         debug!(\"walk_captures({:?})\", closure_expr);\n \n-        let closure_def_id = self.tcx().hir().local_def_id(closure_expr.hir_id).to_def_id();\n-        let upvars = self.tcx().upvars_mentioned(self.body_owner);\n+        let tcx = self.tcx();\n+        let closure_def_id = tcx.hir().local_def_id(closure_expr.hir_id).to_def_id();\n+        let upvars = tcx.upvars_mentioned(self.body_owner);\n \n         // For purposes of this function, generator and closures are equivalent.\n         let body_owner_is_closure = matches!(\n-            self.tcx().type_of(self.body_owner.to_def_id()).kind(),\n-            ty::Closure(..) | ty::Generator(..)\n+            tcx.hir().body_owner_kind(tcx.hir().local_def_id_to_hir_id(self.body_owner)),\n+            hir::BodyOwnerKind::Closure,\n         );\n \n         // If we have a nested closure, we want to include the fake reads present in the nested closure."}, {"sha": "3ad48a1d283d858912be89abac9a57acb59e28c7", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -2277,16 +2277,6 @@ impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n     }\n }\n \n-struct ExtendDefault;\n-impl<T: Default> ExtendWith<T> for ExtendDefault {\n-    fn next(&mut self) -> T {\n-        Default::default()\n-    }\n-    fn last(self) -> T {\n-        Default::default()\n-    }\n-}\n-\n struct ExtendFunc<F>(F);\n impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {\n     fn next(&mut self) -> T {"}, {"sha": "7c36bb264c45ee0b5ca049a409759d8d88b90d58", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -13,7 +13,7 @@\n import tarfile\n import tempfile\n \n-from time import time\n+from time import time, sleep\n \n # Acquire a lock on the build directory to make sure that\n # we don't cause a race condition while building\n@@ -42,8 +42,10 @@ def acquire_lock(build_dir):\n             while True:\n                 try:\n                     curs.execute(\"BEGIN EXCLUSIVE\")\n+                    break\n                 except sqlite3.OperationalError:\n                     pass\n+                sleep(0.25)\n             return curs\n     except ImportError:\n         print(\"warning: sqlite3 not available in python, skipping build directory lock\")"}, {"sha": "820dcdb939499e83233b97129061e5979491c469", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -603,14 +603,20 @@ fn test_item() {\n         stringify_item!(\n             impl<T> Struct<T> {}\n         ),\n-        \"impl <T> Struct<T> {}\", // FIXME\n+        \"impl<T> Struct<T> {}\",\n     );\n     assert_eq!(\n         stringify_item!(\n             pub impl Trait for Struct {}\n         ),\n         \"pub impl Trait for Struct {}\",\n     );\n+    assert_eq!(\n+        stringify_item!(\n+            impl<T> const Trait for T {}\n+        ),\n+        \"impl<T> const Trait for T {}\",\n+    );\n     assert_eq!(\n         stringify_item!(\n             impl ~const Struct {}"}, {"sha": "c44dd51a5ec86522bacfbb1eb8fa4250de10c7dd", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for issue 81708 and issue 91816 where running a drop\n+// elaboration on a MIR which failed borrowck lead to an ICE.\n+\n+static A: () = {\n+    let a: [String; 1];\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+    a[0] = String::new();\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~| ERROR use of possibly-uninitialized variable\n+};\n+\n+struct B<T>([T; 1]);\n+\n+impl<T> B<T> {\n+    pub const fn f(mut self, other: T) -> Self {\n+        let _this = self;\n+        //~^ ERROR destructors cannot be evaluated at compile-time\n+        self.0[0] = other;\n+        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~| ERROR use of moved value\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "80d5fc7ec672c0df12754c3e0f8aa0a32b40d654", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e012a191d768adeda1ee36a99ef8b92d51920154/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr?ref=e012a191d768adeda1ee36a99ef8b92d51920154", "patch": "@@ -0,0 +1,57 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-elaboration-after-borrowck-error.rs:7:5\n+   |\n+LL |     a[0] = String::new();\n+   |     ^^^^\n+   |     |\n+   |     statics cannot evaluate destructors\n+   |     value is dropped here\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-elaboration-after-borrowck-error.rs:5:9\n+   |\n+LL |     let a: [String; 1];\n+   |         ^ statics cannot evaluate destructors\n+...\n+LL | };\n+   | - value is dropped here\n+\n+error[E0381]: use of possibly-uninitialized variable: `a`\n+  --> $DIR/drop-elaboration-after-borrowck-error.rs:7:5\n+   |\n+LL |     a[0] = String::new();\n+   |     ^^^^ use of possibly-uninitialized `a`\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-elaboration-after-borrowck-error.rs:18:9\n+   |\n+LL |         self.0[0] = other;\n+   |         ^^^^^^^^^\n+   |         |\n+   |         constant functions cannot evaluate destructors\n+   |         value is dropped here\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-elaboration-after-borrowck-error.rs:16:13\n+   |\n+LL |         let _this = self;\n+   |             ^^^^^ constant functions cannot evaluate destructors\n+...\n+LL |     }\n+   |     - value is dropped here\n+\n+error[E0382]: use of moved value: `self.0`\n+  --> $DIR/drop-elaboration-after-borrowck-error.rs:18:9\n+   |\n+LL |     pub const fn f(mut self, other: T) -> Self {\n+   |                    -------- move occurs because `self` has type `B<T>`, which does not implement the `Copy` trait\n+LL |         let _this = self;\n+   |                     ---- value moved here\n+LL |\n+LL |         self.0[0] = other;\n+   |         ^^^^^^^^^ value used here after move\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0381, E0382, E0493.\n+For more information about an error, try `rustc --explain E0381`."}]}