{"sha": "fa0809d3cdacae8638fd7beea2e85310902e21d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDgwOWQzY2RhY2FlODYzOGZkN2JlZWEyZTg1MzEwOTAyZTIxZDM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-09T09:15:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-10T14:43:19Z"}, "message": "Regression test for issue 30786.", "tree": {"sha": "5abaa18c7522f61c3004773c9a3ac3c22cc7a307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abaa18c7522f61c3004773c9a3ac3c22cc7a307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa0809d3cdacae8638fd7beea2e85310902e21d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0809d3cdacae8638fd7beea2e85310902e21d3", "html_url": "https://github.com/rust-lang/rust/commit/fa0809d3cdacae8638fd7beea2e85310902e21d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa0809d3cdacae8638fd7beea2e85310902e21d3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0324a2b309cd66cb7bd4a156bd0b84cb136e254f", "html_url": "https://github.com/rust-lang/rust/commit/0324a2b309cd66cb7bd4a156bd0b84cb136e254f"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "9a4f87728224515de44b7db4362ce1270264abe0", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa0809d3cdacae8638fd7beea2e85310902e21d3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0809d3cdacae8638fd7beea2e85310902e21d3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=fa0809d3cdacae8638fd7beea2e85310902e21d3", "patch": "@@ -0,0 +1,11 @@\n+error: implementation of `Stream` is not general enough\n+  --> $DIR/issue-30786.rs:107:22\n+   |\n+LL |     let map = source.map(|x: &_| x);\n+   |                      ^^^\n+   |\n+   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:107:26: 107:35]>`, for any lifetime `'0`\n+   = note: but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:107:26: 107:35]>`, for some specific lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c865d76851d388fcf1a7fc482a99ef546564b11", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa0809d3cdacae8638fd7beea2e85310902e21d3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0809d3cdacae8638fd7beea2e85310902e21d3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=fa0809d3cdacae8638fd7beea2e85310902e21d3", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:111:18\n+   |\n+LL |     let filter = map.filter(|x: &_| true);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:113:17\n+   |\n+LL |     let count = filter.count(); // Assert that we still have a valid stream.\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "321b83c3459d0c9a0d648400a2be19a97d7f987e", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/fa0809d3cdacae8638fd7beea2e85310902e21d3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0809d3cdacae8638fd7beea2e85310902e21d3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=fa0809d3cdacae8638fd7beea2e85310902e21d3", "patch": "@@ -0,0 +1,115 @@\n+// rust-lang/rust#30786: the use of `for<'b> &'b mut A: Stream<Item=T`\n+// should act as assertion that item does not borrow from its stream;\n+// but an earlier buggy rustc allowed `.map(|x: &_| x)` which does\n+// have such an item.\n+//\n+// This tests double-checks that we do not allow such behavior to leak\n+// through again.\n+\n+// revisions: migrate nll\n+\n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[nll]compile-flags: -Z borrowck=mir\n+\n+pub trait Stream {\n+    type Item;\n+    fn next(self) -> Option<Self::Item>;\n+}\n+\n+// Example stream\n+pub struct Repeat(u64);\n+\n+impl<'a> Stream for &'a mut Repeat {\n+    type Item = &'a u64;\n+    fn next(self) -> Option<Self::Item> {\n+        Some(&self.0)\n+    }\n+}\n+\n+pub struct Map<S, F> {\n+    stream: S,\n+    func: F,\n+}\n+\n+impl<'a, A, F, T> Stream for &'a mut Map<A, F>\n+where &'a mut A: Stream,\n+      F: FnMut(<&'a mut A as Stream>::Item) -> T,\n+{\n+    type Item = T;\n+    fn next(self) -> Option<T> {\n+        match self.stream.next() {\n+            Some(item) => Some((self.func)(item)),\n+            None => None,\n+        }\n+    }\n+}\n+\n+pub struct Filter<S, F> {\n+    stream: S,\n+    func: F,\n+}\n+\n+impl<'a, A, F, T> Stream for &'a mut Filter<A, F>\n+where for<'b> &'b mut A: Stream<Item=T>, // <---- BAD\n+      F: FnMut(&T) -> bool,\n+{\n+    type Item = <&'a mut A as Stream>::Item;\n+    fn next(self) -> Option<Self::Item> {\n+        while let Some(item) = self.stream.next() {\n+            if (self.func)(&item) {\n+                return Some(item);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+pub trait StreamExt where for<'b> &'b mut Self: Stream {\n+    fn map<F>(self, func: F) -> Map<Self, F>\n+    where Self: Sized,\n+    for<'a> &'a mut Map<Self, F>: Stream,\n+    {\n+        Map {\n+            func: func,\n+            stream: self,\n+        }\n+    }\n+\n+    fn filter<F>(self, func: F) -> Filter<Self, F>\n+    where Self: Sized,\n+    for<'a> &'a mut Filter<Self, F>: Stream,\n+    {\n+        Filter {\n+            func: func,\n+            stream: self,\n+        }\n+    }\n+\n+    fn count(mut self) -> usize\n+    where Self: Sized,\n+    {\n+        let mut count = 0;\n+        while let Some(_) = self.next() {\n+            count += 1;\n+        }\n+        count\n+    }\n+}\n+\n+impl<T> StreamExt for T where for<'a> &'a mut T: Stream { }\n+\n+fn main() {\n+    let source = Repeat(10);\n+    let map = source.map(|x: &_| x);\n+    //[migrate]~^ ERROR implementation of `Stream` is not general enough\n+    //[migrate]~| NOTE  `Stream` would have to be implemented for the type `&'0 mut Map\n+    //[migrate]~| NOTE  but `Stream` is actually implemented for the type `&'1\n+    let filter = map.filter(|x: &_| true);\n+    //[nll]~^ ERROR higher-ranked subtype error\n+    let count = filter.count(); // Assert that we still have a valid stream.\n+    //[nll]~^ ERROR higher-ranked subtype error\n+}"}]}