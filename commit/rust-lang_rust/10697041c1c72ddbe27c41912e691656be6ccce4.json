{"sha": "10697041c1c72ddbe27c41912e691656be6ccce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjk3MDQxYzFjNzJkZGJlMjdjNDE5MTJlNjkxNjU2YmU2Y2NjZTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-05T18:52:52Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-05T18:52:52Z"}, "message": "Implement all the other built-in derives\n\nSince as long as we're not implementing the bodies, they all work the same way.", "tree": {"sha": "ef8774a0374e124fef0254b87748c0e052f19f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8774a0374e124fef0254b87748c0e052f19f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10697041c1c72ddbe27c41912e691656be6ccce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10697041c1c72ddbe27c41912e691656be6ccce4", "html_url": "https://github.com/rust-lang/rust/commit/10697041c1c72ddbe27c41912e691656be6ccce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10697041c1c72ddbe27c41912e691656be6ccce4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db8a00bd99cdc10ae8166fca3827eefebf791471", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8a00bd99cdc10ae8166fca3827eefebf791471", "html_url": "https://github.com/rust-lang/rust/commit/db8a00bd99cdc10ae8166fca3827eefebf791471"}], "stats": {"total": 101, "additions": 86, "deletions": 15}, "files": [{"sha": "78fa9b09a2744e1f4efc84930e8be3f415d9b03f", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 79, "deletions": 15, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/10697041c1c72ddbe27c41912e691656be6ccce4/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10697041c1c72ddbe27c41912e691656be6ccce4/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=10697041c1c72ddbe27c41912e691656be6ccce4", "patch": "@@ -45,7 +45,14 @@ macro_rules! register_builtin {\n \n register_builtin! {\n     (COPY_TRAIT, Copy) => copy_expand,\n-    (CLONE_TRAIT, Clone) => clone_expand\n+    (CLONE_TRAIT, Clone) => clone_expand,\n+    (DEFAULT_TRAIT, Default) => default_expand,\n+    (DEBUG_TRAIT, Debug) => debug_expand,\n+    (HASH_TRAIT, Hash) => hash_expand,\n+    (ORD_TRAIT, Ord) => ord_expand,\n+    (PARTIAL_ORD_TRAIT, PartialOrd) => partial_ord_expand,\n+    (EQ_TRAIT, Eq) => eq_expand,\n+    (PARTIAL_EQ_TRAIT, PartialEq) => partial_eq_expand\n }\n \n struct BasicAdtInfo {\n@@ -109,36 +116,93 @@ fn make_type_args(n: usize, bound: Vec<tt::TokenTree>) -> Vec<tt::TokenTree> {\n     result\n }\n \n-fn copy_expand(\n-    _db: &dyn AstDatabase,\n-    _id: MacroCallId,\n+fn expand_simple_derive(\n     tt: &tt::Subtree,\n+    trait_path: tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n     let info = parse_adt(tt)?;\n     let name = info.name;\n-    let bound = (quote! { : std::marker::Copy }).token_trees;\n+    let trait_path_clone = trait_path.token_trees.clone();\n+    let bound = (quote! { : ##trait_path_clone }).token_trees;\n     let type_params = make_type_args(info.type_params, bound);\n     let type_args = make_type_args(info.type_params, Vec::new());\n+    let trait_path = trait_path.token_trees;\n     let expanded = quote! {\n-        impl ##type_params std::marker::Copy for #name ##type_args {}\n+        impl ##type_params ##trait_path for #name ##type_args {}\n     };\n     Ok(expanded)\n }\n \n+fn copy_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::marker::Copy })\n+}\n+\n fn clone_expand(\n     _db: &dyn AstDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    let info = parse_adt(tt)?;\n-    let name = info.name;\n-    let bound = (quote! { : std::clone::Clone }).token_trees;\n-    let type_params = make_type_args(info.type_params, bound);\n-    let type_args = make_type_args(info.type_params, Vec::new());\n-    let expanded = quote! {\n-        impl ##type_params std::clone::Clone for #name ##type_args {}\n-    };\n-    Ok(expanded)\n+    expand_simple_derive(tt, quote! { std::clone::Clone })\n+}\n+\n+fn default_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::default::Default })\n+}\n+\n+fn debug_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::fmt::Debug })\n+}\n+\n+fn hash_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::hash::Hash })\n+}\n+\n+fn eq_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::cmp::Eq })\n+}\n+\n+fn partial_eq_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::cmp::PartialEq })\n+}\n+\n+fn ord_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::cmp::Ord })\n+}\n+\n+fn partial_ord_expand(\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    expand_simple_derive(tt, quote! { std::cmp::PartialOrd })\n }\n \n #[cfg(test)]"}, {"sha": "c5a19116093ba7d9b520b756a8230c7f3807a5b0", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10697041c1c72ddbe27c41912e691656be6ccce4/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10697041c1c72ddbe27c41912e691656be6ccce4/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=10697041c1c72ddbe27c41912e691656be6ccce4", "patch": "@@ -163,3 +163,10 @@ pub const STRINGIFY_MACRO: Name = Name::new_inline_ascii(9, b\"stringify\");\n // Builtin derives\n pub const COPY_TRAIT: Name = Name::new_inline_ascii(4, b\"Copy\");\n pub const CLONE_TRAIT: Name = Name::new_inline_ascii(5, b\"Clone\");\n+pub const DEFAULT_TRAIT: Name = Name::new_inline_ascii(7, b\"Default\");\n+pub const DEBUG_TRAIT: Name = Name::new_inline_ascii(5, b\"Debug\");\n+pub const HASH_TRAIT: Name = Name::new_inline_ascii(4, b\"Hash\");\n+pub const ORD_TRAIT: Name = Name::new_inline_ascii(3, b\"Ord\");\n+pub const PARTIAL_ORD_TRAIT: Name = Name::new_inline_ascii(10, b\"PartialOrd\");\n+pub const EQ_TRAIT: Name = Name::new_inline_ascii(2, b\"Eq\");\n+pub const PARTIAL_EQ_TRAIT: Name = Name::new_inline_ascii(9, b\"PartialEq\");"}]}