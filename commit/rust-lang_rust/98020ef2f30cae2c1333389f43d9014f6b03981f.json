{"sha": "98020ef2f30cae2c1333389f43d9014f6b03981f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MDIwZWYyZjMwY2FlMmMxMzMzMzg5ZjQzZDkwMTRmNmIwMzk4MWY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-11T17:24:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-11T17:24:28Z"}, "message": "Merge #1394\n\n1394: Fix hover for pat that shadows items r=matklad a=sinkuu\n\n```rust\r\nfn x() {}\r\n\r\nfn y() {\r\n    let x = 0i32;\r\n    x; // hover on `x` is expected to be `i32`, but the actual result was `fn x()`\r\n}\r\n```\r\n\r\nThis was because: if [`res.is_empty()`](https://github.com/sinkuu/rust-analyzer/blob/656a0fa9f99298123d7dcee8c65a8a5ed7043bc4/crates/ra_ide_api/src/hover.rs#L205), it fallbacks to \"index based approach\" and adds `fn x()` to `res`, which makes [`res.extend(type_of)` below](https://github.com/sinkuu/rust-analyzer/blob/656a0fa9f99298123d7dcee8c65a8a5ed7043bc4/crates/ra_ide_api/src/hover.rs#L260-L266) not happen.\n\nCo-authored-by: Shotaro Yamada <sinkuu@sinkuu.xyz>", "tree": {"sha": "11dcb1b9c9a7fb12be8868925be62f0aec8d80d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11dcb1b9c9a7fb12be8868925be62f0aec8d80d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98020ef2f30cae2c1333389f43d9014f6b03981f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98020ef2f30cae2c1333389f43d9014f6b03981f", "html_url": "https://github.com/rust-lang/rust/commit/98020ef2f30cae2c1333389f43d9014f6b03981f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98020ef2f30cae2c1333389f43d9014f6b03981f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "80aa9d5f9f55341d2a51176e385d8aa6d2d2cec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/80aa9d5f9f55341d2a51176e385d8aa6d2d2cec8", "html_url": "https://github.com/rust-lang/rust/commit/80aa9d5f9f55341d2a51176e385d8aa6d2d2cec8"}, {"sha": "acafbd66f80f79a1b9f9ce181eb3bc22d0ebbf72", "url": "https://api.github.com/repos/rust-lang/rust/commits/acafbd66f80f79a1b9f9ce181eb3bc22d0ebbf72", "html_url": "https://github.com/rust-lang/rust/commit/acafbd66f80f79a1b9f9ce181eb3bc22d0ebbf72"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "df877c324c55a627a6fba230b73546001ca3f9ad", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/98020ef2f30cae2c1333389f43d9014f6b03981f/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98020ef2f30cae2c1333389f43d9014f6b03981f/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=98020ef2f30cae2c1333389f43d9014f6b03981f", "patch": "@@ -95,6 +95,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n         let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n \n+        let mut no_fallback = false;\n+\n         match classify_name_ref(db, &analyzer, name_ref) {\n             Some(Method(it)) => res.extend(from_def_source(db, it)),\n             Some(Macro(it)) => {\n@@ -142,19 +144,17 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                     })\n                 }\n             }\n-            Some(Pat(_)) => {\n-                res.extend(None);\n-            }\n-            Some(SelfParam(_)) => {\n-                res.extend(None);\n+            Some(Pat(_)) | Some(SelfParam(_)) => {\n+                // Hover for these shows type names\n+                no_fallback = true;\n             }\n             Some(GenericParam(_)) => {\n                 // FIXME: Hover for generic param\n             }\n             None => {}\n         }\n \n-        if res.is_empty() {\n+        if res.is_empty() && !no_fallback {\n             // Fallback index based approach:\n             let symbols = crate::symbol_index::index_resolve(db, name_ref);\n             for sym in symbols {\n@@ -675,4 +675,21 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_shadowing_pat() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            fn x() {}\n+\n+            fn y() {\n+                let x = 0i32;\n+                x<|>;\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}