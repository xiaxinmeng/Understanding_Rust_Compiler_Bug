{"sha": "6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "node_id": "C_kwDOAAsO6NoAKDZjN2NiMmJiNzcwZDQzZDEwNzhiZmJmM2QxNGU3YjQxOTdiMjM5MDA", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-05-05T20:44:12Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-12T04:48:39Z"}, "message": "Honor lint level attributes in more places.\n\nThis extends the LintLevelBuilder to handle lint level attributes on\nstruct expression fields and pattern fields.\n\nThis also updates the early lints to honor lint levels on generic\nparameters.", "tree": {"sha": "314e4131a8f75a435dfe42f0280183ae6cc4b74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/314e4131a8f75a435dfe42f0280183ae6cc4b74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "html_url": "https://github.com/rust-lang/rust/commit/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b651c1cebe5f365201d568507ddb49ca343f2e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b651c1cebe5f365201d568507ddb49ca343f2e7d", "html_url": "https://github.com/rust-lang/rust/commit/b651c1cebe5f365201d568507ddb49ca343f2e7d"}], "stats": {"total": 1318, "additions": 1312, "deletions": 6}, "files": [{"sha": "d94c5d034a65396163fe4527329354965deb9198", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "patch": "@@ -219,9 +219,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n-        run_early_pass!(self, check_generic_param, param);\n-        self.check_id(param.id);\n-        ast_visit::walk_generic_param(self, param);\n+        self.with_lint_attrs(param.id, &param.attrs, |cx| {\n+            run_early_pass!(cx, check_generic_param, param);\n+            ast_visit::walk_generic_param(cx, param);\n+        });\n     }\n \n     fn visit_generics(&mut self, g: &'a ast::Generics) {"}, {"sha": "bae366479923116a0d3e4bac27184aa8088a5576", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "patch": "@@ -761,9 +761,26 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        self.with_lint_attrs(e.hir_id, |builder| {\n-            intravisit::walk_expr(builder, e);\n-        })\n+        match e.kind {\n+            hir::ExprKind::Struct(qpath, fields, base_expr) => {\n+                self.with_lint_attrs(e.hir_id, |builder| {\n+                    builder.visit_qpath(qpath, e.hir_id, e.span);\n+                    for field in fields {\n+                        builder.with_lint_attrs(field.hir_id, |field_builder| {\n+                            field_builder.visit_id(field.hir_id);\n+                            field_builder.visit_ident(field.ident);\n+                            field_builder.visit_expr(field.expr);\n+                        });\n+                    }\n+                    if let Some(base_expr) = base_expr {\n+                        builder.visit_expr(base_expr);\n+                    }\n+                });\n+            }\n+            _ => self.with_lint_attrs(e.hir_id, |builder| {\n+                intravisit::walk_expr(builder, e);\n+            }),\n+        }\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n@@ -801,6 +818,28 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n             intravisit::walk_impl_item(builder, impl_item);\n         });\n     }\n+\n+    fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n+        match &p.kind {\n+            hir::PatKind::Struct(qpath, fields, _) => {\n+                self.visit_qpath(&qpath, p.hir_id, p.span);\n+                for field in *fields {\n+                    self.with_lint_attrs(field.hir_id, |builder| {\n+                        builder.visit_id(field.hir_id);\n+                        builder.visit_ident(field.ident);\n+                        builder.visit_pat(field.pat);\n+                    })\n+                }\n+            }\n+            _ => intravisit::walk_pat(self, p),\n+        }\n+    }\n+\n+    fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n+        self.with_lint_attrs(p.hir_id, |builder| {\n+            intravisit::walk_generic_param(builder, p);\n+        });\n+    }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "9ac0e45c6da0cd50da8f5c2adba24ae59f3f6d4e", "filename": "src/test/ui/lint/lint-attr-everywhere-early.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.rs?ref=6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "patch": "@@ -0,0 +1,169 @@\n+// Tests that lint levels can be set for early lints.\n+#![allow(non_camel_case_types, unsafe_code, while_true, unused_parens)]\n+\n+// The following is a check of the lints used here to verify they do not warn\n+// when allowed.\n+fn verify_no_warnings() {\n+    type non_camel_type = i32; // non_camel_case_types\n+    struct NON_CAMEL_IS_ALLOWED; // non_camel_case_types\n+    unsafe {} // unsafe_code\n+    enum Enum {\n+        VARIANT_CAMEL // non_camel_case_types\n+    }\n+    fn generics<foo>() {} // non_camel_case_types\n+    while true {} // while_true\n+    type T = (i32); // unused_parens\n+}\n+\n+\n+// ################## Types\n+\n+#[deny(non_camel_case_types)]\n+type type_outer = i32; //~ ERROR type `type_outer` should have an upper camel case name\n+\n+type BareFnPtr = fn(#[deny(unused_parens)](i32)); //~ ERROR unnecessary parentheses around type\n+// There aren't any early lints that currently apply to the variadic spot.\n+// type BareFnPtrVariadic = extern \"C\" fn(i32, #[deny()]...);\n+\n+// ################## Items\n+#[deny(non_camel_case_types)]\n+struct ITEM_OUTER; //~ ERROR type `ITEM_OUTER` should have an upper camel case name\n+\n+mod module_inner {\n+    #![deny(unsafe_code)]\n+    fn f() {\n+        unsafe {} //~ ERROR usage of an `unsafe` block\n+    }\n+}\n+\n+struct Associated;\n+impl Associated {\n+    #![deny(unsafe_code)]\n+\n+    fn inherent_denied_from_inner() { unsafe {} } //~ usage of an `unsafe` block\n+\n+    #[deny(while_true)]\n+    fn inherent_fn() { while true {} } //~ ERROR denote infinite loops with\n+\n+    #[deny(while_true)]\n+    const INHERENT_CONST: i32 = {while true {} 1}; //~ ERROR denote infinite loops with\n+}\n+\n+trait trait_inner { //~ ERROR trait `trait_inner` should have an upper camel case name\n+    #![deny(non_camel_case_types)]\n+}\n+\n+trait AssociatedTrait {\n+    #![deny(unsafe_code)]\n+\n+    fn denied_from_inner() { unsafe {} } //~ ERROR usage of an `unsafe` block\n+\n+    #[deny(while_true)]\n+    fn assoc_fn() { while true {} } //~ ERROR denote infinite loops with\n+\n+    #[deny(while_true)]\n+    const ASSOC_CONST: i32 = {while true {} 1}; //~ ERROR denote infinite loops with\n+\n+    #[deny(non_camel_case_types)]\n+    type assoc_type; //~ ERROR associated type `assoc_type` should have an upper camel case name\n+}\n+\n+impl AssociatedTrait for Associated {\n+    #![deny(unsafe_code)]\n+\n+    fn denied_from_inner() { unsafe {} } //~ ERROR usage of an `unsafe` block\n+\n+    #[deny(while_true)]\n+    fn assoc_fn() { while true {} } //~ ERROR denote infinite loops with\n+\n+    #[deny(while_true)]\n+    const ASSOC_CONST: i32 = {while true {} 1};  //~ ERROR denote infinite loops with\n+\n+    #[deny(unused_parens)]\n+    type assoc_type = (i32); //~ ERROR unnecessary parentheses around type\n+}\n+\n+struct StructFields {\n+    #[deny(unused_parens)]f1: (i32), //~ ERROR unnecessary parentheses around type\n+}\n+struct StructTuple(#[deny(unused_parens)](i32)); //~ ERROR unnecessary parentheses around type\n+\n+enum Enum {\n+    #[deny(non_camel_case_types)]\n+    VARIANT_CAMEL, //~ ERROR variant `VARIANT_CAMEL` should have an upper camel case name\n+}\n+\n+extern \"C\" {\n+    #![deny(unused_parens)]\n+\n+    fn foreign_denied_from_inner(x: (i32)); //~ ERROR unnecessary parentheses around type\n+}\n+\n+extern \"C\" {\n+    #[deny(unused_parens)]\n+    fn foreign_denied_from_outer(x: (i32)); //~ ERROR unnecessary parentheses around type\n+}\n+\n+fn function(#[deny(unused_parens)] param: (i32)) {} //~ ERROR unnecessary parentheses around type\n+\n+fn generics<#[deny(non_camel_case_types)]foo>() {} //~ ERROR type parameter `foo` should have an upper camel case name\n+\n+\n+// ################## Statements\n+fn statements() {\n+    #[deny(unused_parens)]\n+    let x = (1); //~ ERROR unnecessary parentheses around assigned value\n+}\n+\n+\n+// ################## Expressions\n+fn expressions() {\n+    let closure = |#[deny(unused_parens)] param: (i32)| {}; //~ ERROR unnecessary parentheses around type\n+\n+    struct Match{f1: i32}\n+    // Strangely unused_parens doesn't fire with {f1: (123)}\n+    let f = Match{#[deny(unused_parens)]f1: {(123)}}; //~ ERROR unnecessary parentheses around block return value\n+\n+    match f {\n+        #![deny(unsafe_code)]\n+\n+        #[deny(while_true)]\n+        Match{f1} => {\n+            unsafe {} //~ ERROR usage of an `unsafe` block\n+            while true {} //~ ERROR denote infinite loops with\n+        }\n+    }\n+\n+    // Statement Block\n+    {\n+        #![deny(unsafe_code)]\n+        unsafe {} //~ ERROR usage of an `unsafe` block\n+    }\n+    let block_tail = {\n+        #[deny(unsafe_code)]\n+        unsafe {} //~ ERROR usage of an `unsafe` block\n+    };\n+\n+    // Before expression as a statement.\n+    #[deny(unsafe_code)]\n+    unsafe {}; //~ ERROR usage of an `unsafe` block\n+\n+    [#[deny(unsafe_code)] unsafe {123}]; //~ ERROR usage of an `unsafe` block\n+    (#[deny(unsafe_code)] unsafe {123},); //~ ERROR usage of an `unsafe` block\n+    fn call(p: i32) {}\n+    call(#[deny(unsafe_code)] unsafe {123}); //~ ERROR usage of an `unsafe` block\n+    struct TupleStruct(i32);\n+    TupleStruct(#[deny(unsafe_code)] unsafe {123}); //~ ERROR usage of an `unsafe` block\n+}\n+\n+\n+// ################## Patterns\n+fn patterns() {\n+    // There aren't any early lints that I can find that apply to pattern fields.\n+    //\n+    // struct PatField{f1: i32, f2: i32};\n+    // let f = PatField{f1: 1, f2: 2};\n+    // let PatField{#[deny()]f1, #[deny()]..} = f;\n+}\n+\n+fn main() {}"}, {"sha": "f65d811105fab7b1f35205a29213b2b15ce5e759", "filename": "src/test/ui/lint/lint-attr-everywhere-early.stderr", "status": "added", "additions": 472, "deletions": 0, "changes": 472, "blob_url": "https://github.com/rust-lang/rust/blob/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.stderr?ref=6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "patch": "@@ -0,0 +1,472 @@\n+error: type `type_outer` should have an upper camel case name\n+  --> $DIR/lint-attr-everywhere-early.rs:22:6\n+   |\n+LL | type type_outer = i32;\n+   |      ^^^^^^^^^^ help: convert the identifier to upper camel case: `TypeOuter`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:21:8\n+   |\n+LL | #[deny(non_camel_case_types)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:24:43\n+   |\n+LL | type BareFnPtr = fn(#[deny(unused_parens)](i32));\n+   |                                           ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:24:28\n+   |\n+LL | type BareFnPtr = fn(#[deny(unused_parens)](i32));\n+   |                            ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL - type BareFnPtr = fn(#[deny(unused_parens)](i32));\n+LL + type BareFnPtr = fn(#[deny(unused_parens)]i32);\n+   | \n+\n+error: type `ITEM_OUTER` should have an upper camel case name\n+  --> $DIR/lint-attr-everywhere-early.rs:30:8\n+   |\n+LL | struct ITEM_OUTER;\n+   |        ^^^^^^^^^^ help: convert the identifier to upper camel case: `ItemOuter`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:29:8\n+   |\n+LL | #[deny(non_camel_case_types)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:35:9\n+   |\n+LL |         unsafe {}\n+   |         ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:33:13\n+   |\n+LL |     #![deny(unsafe_code)]\n+   |             ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:43:39\n+   |\n+LL |     fn inherent_denied_from_inner() { unsafe {} }\n+   |                                       ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:41:13\n+   |\n+LL |     #![deny(unsafe_code)]\n+   |             ^^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:46:24\n+   |\n+LL |     fn inherent_fn() { while true {} }\n+   |                        ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:45:12\n+   |\n+LL |     #[deny(while_true)]\n+   |            ^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:49:34\n+   |\n+LL |     const INHERENT_CONST: i32 = {while true {} 1};\n+   |                                  ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:48:12\n+   |\n+LL |     #[deny(while_true)]\n+   |            ^^^^^^^^^^\n+\n+error: trait `trait_inner` should have an upper camel case name\n+  --> $DIR/lint-attr-everywhere-early.rs:52:7\n+   |\n+LL | trait trait_inner {\n+   |       ^^^^^^^^^^^ help: convert the identifier to upper camel case: `TraitInner`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:53:13\n+   |\n+LL |     #![deny(non_camel_case_types)]\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:59:30\n+   |\n+LL |     fn denied_from_inner() { unsafe {} }\n+   |                              ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:57:13\n+   |\n+LL |     #![deny(unsafe_code)]\n+   |             ^^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:62:21\n+   |\n+LL |     fn assoc_fn() { while true {} }\n+   |                     ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:61:12\n+   |\n+LL |     #[deny(while_true)]\n+   |            ^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:65:31\n+   |\n+LL |     const ASSOC_CONST: i32 = {while true {} 1};\n+   |                               ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:64:12\n+   |\n+LL |     #[deny(while_true)]\n+   |            ^^^^^^^^^^\n+\n+error: associated type `assoc_type` should have an upper camel case name\n+  --> $DIR/lint-attr-everywhere-early.rs:68:10\n+   |\n+LL |     type assoc_type;\n+   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `AssocType`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:67:12\n+   |\n+LL |     #[deny(non_camel_case_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:74:30\n+   |\n+LL |     fn denied_from_inner() { unsafe {} }\n+   |                              ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:72:13\n+   |\n+LL |     #![deny(unsafe_code)]\n+   |             ^^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:77:21\n+   |\n+LL |     fn assoc_fn() { while true {} }\n+   |                     ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:76:12\n+   |\n+LL |     #[deny(while_true)]\n+   |            ^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:80:31\n+   |\n+LL |     const ASSOC_CONST: i32 = {while true {} 1};\n+   |                               ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:79:12\n+   |\n+LL |     #[deny(while_true)]\n+   |            ^^^^^^^^^^\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:83:23\n+   |\n+LL |     type assoc_type = (i32);\n+   |                       ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:82:12\n+   |\n+LL |     #[deny(unused_parens)]\n+   |            ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     type assoc_type = (i32);\n+LL +     type assoc_type = i32;\n+   | \n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:87:31\n+   |\n+LL |     #[deny(unused_parens)]f1: (i32),\n+   |                               ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:87:12\n+   |\n+LL |     #[deny(unused_parens)]f1: (i32),\n+   |            ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     #[deny(unused_parens)]f1: (i32),\n+LL +     #[deny(unused_parens)]f1: i32,\n+   | \n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:89:42\n+   |\n+LL | struct StructTuple(#[deny(unused_parens)](i32));\n+   |                                          ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:89:27\n+   |\n+LL | struct StructTuple(#[deny(unused_parens)](i32));\n+   |                           ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL - struct StructTuple(#[deny(unused_parens)](i32));\n+LL + struct StructTuple(#[deny(unused_parens)]i32);\n+   | \n+\n+error: variant `VARIANT_CAMEL` should have an upper camel case name\n+  --> $DIR/lint-attr-everywhere-early.rs:93:5\n+   |\n+LL |     VARIANT_CAMEL,\n+   |     ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `VariantCamel`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:92:12\n+   |\n+LL |     #[deny(non_camel_case_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:99:37\n+   |\n+LL |     fn foreign_denied_from_inner(x: (i32));\n+   |                                     ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:97:13\n+   |\n+LL |     #![deny(unused_parens)]\n+   |             ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     fn foreign_denied_from_inner(x: (i32));\n+LL +     fn foreign_denied_from_inner(x: i32);\n+   | \n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:104:37\n+   |\n+LL |     fn foreign_denied_from_outer(x: (i32));\n+   |                                     ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:103:12\n+   |\n+LL |     #[deny(unused_parens)]\n+   |            ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     fn foreign_denied_from_outer(x: (i32));\n+LL +     fn foreign_denied_from_outer(x: i32);\n+   | \n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:107:43\n+   |\n+LL | fn function(#[deny(unused_parens)] param: (i32)) {}\n+   |                                           ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:107:20\n+   |\n+LL | fn function(#[deny(unused_parens)] param: (i32)) {}\n+   |                    ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL - fn function(#[deny(unused_parens)] param: (i32)) {}\n+LL + fn function(#[deny(unused_parens)] param: i32) {}\n+   | \n+\n+error: type parameter `foo` should have an upper camel case name\n+  --> $DIR/lint-attr-everywhere-early.rs:109:42\n+   |\n+LL | fn generics<#[deny(non_camel_case_types)]foo>() {}\n+   |                                          ^^^ help: convert the identifier to upper camel case (notice the capitalization): `Foo`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:109:20\n+   |\n+LL | fn generics<#[deny(non_camel_case_types)]foo>() {}\n+   |                    ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary parentheses around assigned value\n+  --> $DIR/lint-attr-everywhere-early.rs:115:13\n+   |\n+LL |     let x = (1);\n+   |             ^ ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:114:12\n+   |\n+LL |     #[deny(unused_parens)]\n+   |            ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     let x = (1);\n+LL +     let x = 1;\n+   | \n+\n+error: unnecessary parentheses around type\n+  --> $DIR/lint-attr-everywhere-early.rs:121:50\n+   |\n+LL |     let closure = |#[deny(unused_parens)] param: (i32)| {};\n+   |                                                  ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:121:27\n+   |\n+LL |     let closure = |#[deny(unused_parens)] param: (i32)| {};\n+   |                           ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     let closure = |#[deny(unused_parens)] param: (i32)| {};\n+LL +     let closure = |#[deny(unused_parens)] param: i32| {};\n+   | \n+\n+error: unnecessary parentheses around block return value\n+  --> $DIR/lint-attr-everywhere-early.rs:125:46\n+   |\n+LL |     let f = Match{#[deny(unused_parens)]f1: {(123)}};\n+   |                                              ^   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:125:26\n+   |\n+LL |     let f = Match{#[deny(unused_parens)]f1: {(123)}};\n+   |                          ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     let f = Match{#[deny(unused_parens)]f1: {(123)}};\n+LL +     let f = Match{#[deny(unused_parens)]f1: {123}};\n+   | \n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:132:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:128:17\n+   |\n+LL |         #![deny(unsafe_code)]\n+   |                 ^^^^^^^^^^^\n+\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-attr-everywhere-early.rs:133:13\n+   |\n+LL |             while true {}\n+   |             ^^^^^^^^^^ help: use `loop`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:130:16\n+   |\n+LL |         #[deny(while_true)]\n+   |                ^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:140:9\n+   |\n+LL |         unsafe {}\n+   |         ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:139:17\n+   |\n+LL |         #![deny(unsafe_code)]\n+   |                 ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:144:9\n+   |\n+LL |         unsafe {}\n+   |         ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:143:16\n+   |\n+LL |         #[deny(unsafe_code)]\n+   |                ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:149:5\n+   |\n+LL |     unsafe {};\n+   |     ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:148:12\n+   |\n+LL |     #[deny(unsafe_code)]\n+   |            ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:151:27\n+   |\n+LL |     [#[deny(unsafe_code)] unsafe {123}];\n+   |                           ^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:151:13\n+   |\n+LL |     [#[deny(unsafe_code)] unsafe {123}];\n+   |             ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:152:27\n+   |\n+LL |     (#[deny(unsafe_code)] unsafe {123},);\n+   |                           ^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:152:13\n+   |\n+LL |     (#[deny(unsafe_code)] unsafe {123},);\n+   |             ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:154:31\n+   |\n+LL |     call(#[deny(unsafe_code)] unsafe {123});\n+   |                               ^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:154:17\n+   |\n+LL |     call(#[deny(unsafe_code)] unsafe {123});\n+   |                 ^^^^^^^^^^^\n+\n+error: usage of an `unsafe` block\n+  --> $DIR/lint-attr-everywhere-early.rs:156:38\n+   |\n+LL |     TupleStruct(#[deny(unsafe_code)] unsafe {123});\n+   |                                      ^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:156:24\n+   |\n+LL |     TupleStruct(#[deny(unsafe_code)] unsafe {123});\n+   |                        ^^^^^^^^^^^\n+\n+error: aborting due to 35 previous errors\n+"}, {"sha": "1055157d6020c3442230139ed5d214a17cdd7bdf", "filename": "src/test/ui/lint/lint-attr-everywhere-late.rs", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.rs?ref=6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "patch": "@@ -0,0 +1,197 @@\n+// Tests that lint levels can be set for late lints.\n+#![allow(\n+    non_snake_case,\n+    overflowing_literals,\n+    missing_docs,\n+    dyn_drop,\n+    enum_intrinsics_non_enums,\n+    clashing_extern_declarations\n+)]\n+\n+extern crate core;\n+use core::mem::{Discriminant, discriminant};\n+\n+// The following is a check of the lints used here to verify they do not warn\n+// when allowed.\n+pub fn missing_docs_allowed() {} // missing_docs\n+fn dyn_drop_allowed(_x: Box<dyn Drop>) {} // dyn_drop\n+fn verify_no_warnings() {\n+    discriminant::<i32>(&123); // enum_intrinsics_non_enums\n+    let x: u8 = 1000; // overflowing_literals\n+    let NON_SNAKE_CASE = 1; // non_snake_case\n+}\n+mod clashing_extern_allowed {\n+    extern \"C\" {\n+        fn extern_allowed();\n+    }\n+}\n+extern \"C\" {\n+    fn extern_allowed(_: i32); // clashing_extern_declarations\n+}\n+\n+// ################## Types\n+\n+#[deny(missing_docs)]\n+pub type MissingDocType = i32; //~ ERROR missing documentation for a type alias\n+\n+// There aren't any late lints that I can find that can be easily used with types.\n+// type BareFnPtr = fn(#[deny()]i32);\n+// type BareFnPtrVariadic = extern \"C\" fn(i32, #[deny()]...);\n+\n+// ################## Items\n+#[deny(missing_docs)]\n+pub struct ItemOuter; //~ ERROR missing documentation for a struct\n+\n+pub mod module_inner { //~ ERROR missing documentation for a module\n+    #![deny(missing_docs)]\n+    pub fn missing_inner() {} //~ ERROR missing documentation for a function\n+}\n+\n+pub struct Associated;\n+impl Associated {\n+    #![deny(missing_docs)]\n+\n+    pub fn inherent_denied_from_inner() {} //~ ERROR missing documentation for an associated function\n+}\n+\n+impl Associated {\n+    #[deny(missing_docs)]\n+    pub fn inherent_fn() {} //~ ERROR missing documentation for an associated function\n+\n+    #[deny(missing_docs)]\n+    pub const INHERENT_CONST: i32 = 1; //~ ERROR missing documentation for an associated constant\n+}\n+\n+pub trait TraitInner { //~ ERROR missing documentation for a trait\n+    #![deny(missing_docs)]\n+}\n+\n+pub trait AssociatedTraitInner { //~ ERROR missing documentation for a trait\n+    #![deny(missing_docs)]\n+\n+    fn denied_from_inner() {} //~ ERROR missing documentation for an associated function\n+}\n+\n+pub trait AssociatedTrait {\n+    fn denied_from_inner(_x: Box<dyn Drop>) {} // Used below\n+\n+    #[deny(missing_docs)]\n+    fn assoc_fn() {} //~ ERROR missing documentation for an associated function\n+\n+    #[deny(missing_docs)]\n+    const ASSOC_CONST: u8 = 1; //~ ERROR missing documentation for an associated constant\n+\n+    #[deny(missing_docs)]\n+    type AssocType; //~ ERROR missing documentation for an associated type\n+}\n+\n+struct Foo;\n+\n+impl AssociatedTrait for Associated {\n+    #![deny(dyn_drop)]\n+\n+    fn denied_from_inner(_x: Box<dyn Drop>) {} //~ ERROR types that do not implement `Drop`\n+\n+    #[deny(enum_intrinsics_non_enums)]\n+    fn assoc_fn() { discriminant::<i32>(&123); } //~ ERROR the return value of\n+\n+    #[deny(overflowing_literals)] const ASSOC_CONST: u8 = 1000; //~ ERROR literal out of range\n+    type AssocType = i32;\n+}\n+\n+\n+// There aren't any late lints that can apply to a field that I can find.\n+// non_snake_case doesn't work on fields\n+// struct StructFields {\n+//     #[deny()]f1: i32,\n+// }\n+// struct StructTuple(#[deny()]i32);\n+\n+pub enum Enum {\n+    #[deny(missing_docs)]\n+    Variant1, //~ ERROR missing documentation for a variant\n+}\n+\n+mod clashing_extern {\n+    extern \"C\" {\n+        fn clashing1();\n+        fn clashing2();\n+    }\n+}\n+extern \"C\" {\n+    #![deny(clashing_extern_declarations)]\n+    fn clashing1(_: i32); //~ ERROR `clashing1` redeclared with a different signature\n+}\n+\n+extern \"C\" {\n+    #[deny(clashing_extern_declarations)]\n+    fn clashing2(_: i32); //~ ERROR `clashing2` redeclared with a different signature\n+}\n+\n+fn function(#[deny(non_snake_case)] PARAM: i32) {} //~ ERROR variable `PARAM` should have a snake case name\n+// There aren't any late lints that can apply to generics that I can find.\n+// fn generics<#[deny()]T>() {}\n+\n+\n+// ################## Statements\n+fn statements() {\n+    #[deny(enum_intrinsics_non_enums)]\n+    let _ = discriminant::<i32>(&123); //~ ERROR the return value of\n+}\n+\n+\n+// ################## Expressions\n+fn expressions() {\n+    let closure = |#[deny(non_snake_case)] PARAM: i32| {}; //~ ERROR variable `PARAM` should have a snake case name\n+\n+    struct Match{f1: i32}\n+    // I can't find any late lints for patterns.\n+    // let f = Match{#[deny()]f1: 123};\n+\n+    let f = Match{f1: 123};\n+    match f {\n+        #![deny(enum_intrinsics_non_enums)]\n+        Match{f1} => {\n+            discriminant::<i32>(&123); //~ ERROR the return value of\n+        }\n+    }\n+    match f {\n+        #[deny(enum_intrinsics_non_enums)]\n+        Match{f1} => {\n+            discriminant::<i32>(&123); //~ ERROR the return value of\n+        }\n+    }\n+\n+    // Statement Block\n+    {\n+        #![deny(enum_intrinsics_non_enums)]\n+        discriminant::<i32>(&123); //~ ERROR the return value of\n+    }\n+    let block_tail = {\n+        #[deny(enum_intrinsics_non_enums)]\n+        discriminant::<i32>(&123); //~ ERROR the return value of\n+    };\n+\n+    // Before expression as a statement.\n+    #[deny(enum_intrinsics_non_enums)]\n+    discriminant::<i32>(&123); //~ ERROR the return value of\n+\n+    [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)]; //~ ERROR the return value of\n+    (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),); //~ ERROR the return value of\n+    fn call(p: Discriminant<i32>) {}\n+    call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)); //~ ERROR the return value of\n+    struct TupleStruct(Discriminant<i32>);\n+    TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)); //~ ERROR the return value of\n+}\n+\n+\n+// ################## Patterns\n+fn patterns() {\n+    // There aren't any late lints that I can find that apply to pattern fields.\n+    //\n+    // struct PatField{f1: i32, f2: i32};\n+    // let f = PatField{f1: 1, f2: 2};\n+    // let PatField{#[deny()]f1, #[deny()]..} = f;\n+}\n+\n+fn main() {}"}, {"sha": "d302798d65007e5550627df17b0a63212d4c30fe", "filename": "src/test/ui/lint/lint-attr-everywhere-late.stderr", "status": "added", "additions": 428, "deletions": 0, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.stderr?ref=6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "patch": "@@ -0,0 +1,428 @@\n+error: missing documentation for a type alias\n+  --> $DIR/lint-attr-everywhere-late.rs:35:1\n+   |\n+LL | pub type MissingDocType = i32;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:34:8\n+   |\n+LL | #[deny(missing_docs)]\n+   |        ^^^^^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/lint-attr-everywhere-late.rs:43:1\n+   |\n+LL | pub struct ItemOuter;\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:42:8\n+   |\n+LL | #[deny(missing_docs)]\n+   |        ^^^^^^^^^^^^\n+\n+error: missing documentation for a module\n+  --> $DIR/lint-attr-everywhere-late.rs:45:1\n+   |\n+LL | pub mod module_inner {\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:46:13\n+   |\n+LL |     #![deny(missing_docs)]\n+   |             ^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/lint-attr-everywhere-late.rs:47:5\n+   |\n+LL |     pub fn missing_inner() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated function\n+  --> $DIR/lint-attr-everywhere-late.rs:54:5\n+   |\n+LL |     pub fn inherent_denied_from_inner() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:52:13\n+   |\n+LL |     #![deny(missing_docs)]\n+   |             ^^^^^^^^^^^^\n+\n+error: missing documentation for an associated function\n+  --> $DIR/lint-attr-everywhere-late.rs:59:5\n+   |\n+LL |     pub fn inherent_fn() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:58:12\n+   |\n+LL |     #[deny(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+error: missing documentation for an associated constant\n+  --> $DIR/lint-attr-everywhere-late.rs:62:5\n+   |\n+LL |     pub const INHERENT_CONST: i32 = 1;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:61:12\n+   |\n+LL |     #[deny(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+error: missing documentation for a trait\n+  --> $DIR/lint-attr-everywhere-late.rs:65:1\n+   |\n+LL | pub trait TraitInner {\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:66:13\n+   |\n+LL |     #![deny(missing_docs)]\n+   |             ^^^^^^^^^^^^\n+\n+error: missing documentation for a trait\n+  --> $DIR/lint-attr-everywhere-late.rs:69:1\n+   |\n+LL | pub trait AssociatedTraitInner {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:70:13\n+   |\n+LL |     #![deny(missing_docs)]\n+   |             ^^^^^^^^^^^^\n+\n+error: missing documentation for an associated function\n+  --> $DIR/lint-attr-everywhere-late.rs:72:5\n+   |\n+LL |     fn denied_from_inner() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated function\n+  --> $DIR/lint-attr-everywhere-late.rs:79:5\n+   |\n+LL |     fn assoc_fn() {}\n+   |     ^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:78:12\n+   |\n+LL |     #[deny(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+error: missing documentation for an associated constant\n+  --> $DIR/lint-attr-everywhere-late.rs:82:5\n+   |\n+LL |     const ASSOC_CONST: u8 = 1;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:81:12\n+   |\n+LL |     #[deny(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+error: missing documentation for an associated type\n+  --> $DIR/lint-attr-everywhere-late.rs:85:5\n+   |\n+LL |     type AssocType;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:84:12\n+   |\n+LL |     #[deny(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n+  --> $DIR/lint-attr-everywhere-late.rs:93:38\n+   |\n+LL |     fn denied_from_inner(_x: Box<dyn Drop>) {}\n+   |                                      ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:91:13\n+   |\n+LL |     #![deny(dyn_drop)]\n+   |             ^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:96:21\n+   |\n+LL |     fn assoc_fn() { discriminant::<i32>(&123); }\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:95:12\n+   |\n+LL |     #[deny(enum_intrinsics_non_enums)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:96:41\n+   |\n+LL |     fn assoc_fn() { discriminant::<i32>(&123); }\n+   |                                         ^^^^\n+\n+error: missing documentation for a variant\n+  --> $DIR/lint-attr-everywhere-late.rs:112:5\n+   |\n+LL |     Variant1,\n+   |     ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:111:12\n+   |\n+LL |     #[deny(missing_docs)]\n+   |            ^^^^^^^^^^^^\n+\n+error: `clashing1` redeclared with a different signature\n+  --> $DIR/lint-attr-everywhere-late.rs:123:5\n+   |\n+LL |         fn clashing1();\n+   |         --------------- `clashing1` previously declared here\n+...\n+LL |     fn clashing1(_: i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:122:13\n+   |\n+LL |     #![deny(clashing_extern_declarations)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `unsafe extern \"C\" fn()`\n+              found `unsafe extern \"C\" fn(i32)`\n+\n+error: `clashing2` redeclared with a different signature\n+  --> $DIR/lint-attr-everywhere-late.rs:128:5\n+   |\n+LL |         fn clashing2();\n+   |         --------------- `clashing2` previously declared here\n+...\n+LL |     fn clashing2(_: i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:127:12\n+   |\n+LL |     #[deny(clashing_extern_declarations)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `unsafe extern \"C\" fn()`\n+              found `unsafe extern \"C\" fn(i32)`\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:139:13\n+   |\n+LL |     let _ = discriminant::<i32>(&123);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:138:12\n+   |\n+LL |     #[deny(enum_intrinsics_non_enums)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:139:33\n+   |\n+LL |     let _ = discriminant::<i32>(&123);\n+   |                                 ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:155:13\n+   |\n+LL |             discriminant::<i32>(&123);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:153:17\n+   |\n+LL |         #![deny(enum_intrinsics_non_enums)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:155:33\n+   |\n+LL |             discriminant::<i32>(&123);\n+   |                                 ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:161:13\n+   |\n+LL |             discriminant::<i32>(&123);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:159:16\n+   |\n+LL |         #[deny(enum_intrinsics_non_enums)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:161:33\n+   |\n+LL |             discriminant::<i32>(&123);\n+   |                                 ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:168:9\n+   |\n+LL |         discriminant::<i32>(&123);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:167:17\n+   |\n+LL |         #![deny(enum_intrinsics_non_enums)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:168:29\n+   |\n+LL |         discriminant::<i32>(&123);\n+   |                             ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:172:9\n+   |\n+LL |         discriminant::<i32>(&123);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:171:16\n+   |\n+LL |         #[deny(enum_intrinsics_non_enums)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:172:29\n+   |\n+LL |         discriminant::<i32>(&123);\n+   |                             ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:177:5\n+   |\n+LL |     discriminant::<i32>(&123);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:176:12\n+   |\n+LL |     #[deny(enum_intrinsics_non_enums)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:177:25\n+   |\n+LL |     discriminant::<i32>(&123);\n+   |                         ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:179:41\n+   |\n+LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:179:13\n+   |\n+LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:179:61\n+   |\n+LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n+   |                                                             ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:180:41\n+   |\n+LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:180:13\n+   |\n+LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:180:61\n+   |\n+LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n+   |                                                             ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:182:45\n+   |\n+LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:182:17\n+   |\n+LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:182:65\n+   |\n+LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                                                                 ^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-attr-everywhere-late.rs:184:52\n+   |\n+LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:184:24\n+   |\n+LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n+  --> $DIR/lint-attr-everywhere-late.rs:184:72\n+   |\n+LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                                                                        ^^^^\n+\n+error: literal out of range for `u8`\n+  --> $DIR/lint-attr-everywhere-late.rs:98:59\n+   |\n+LL |     #[deny(overflowing_literals)] const ASSOC_CONST: u8 = 1000;\n+   |                                                           ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:98:12\n+   |\n+LL |     #[deny(overflowing_literals)] const ASSOC_CONST: u8 = 1000;\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   = note: the literal `1000` does not fit into the type `u8` whose range is `0..=255`\n+\n+error: variable `PARAM` should have a snake case name\n+  --> $DIR/lint-attr-everywhere-late.rs:131:37\n+   |\n+LL | fn function(#[deny(non_snake_case)] PARAM: i32) {}\n+   |                                     ^^^^^ help: convert the identifier to snake case: `param`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:131:20\n+   |\n+LL | fn function(#[deny(non_snake_case)] PARAM: i32) {}\n+   |                    ^^^^^^^^^^^^^^\n+\n+error: variable `PARAM` should have a snake case name\n+  --> $DIR/lint-attr-everywhere-late.rs:145:44\n+   |\n+LL |     let closure = |#[deny(non_snake_case)] PARAM: i32| {};\n+   |                                            ^^^^^ help: convert the identifier to snake case: `param`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:145:27\n+   |\n+LL |     let closure = |#[deny(non_snake_case)] PARAM: i32| {};\n+   |                           ^^^^^^^^^^^^^^\n+\n+error: aborting due to 31 previous errors\n+"}]}