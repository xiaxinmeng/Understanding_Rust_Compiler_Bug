{"sha": "81424389382316220944322305c9935119dba5ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNDI0Mzg5MzgyMzE2MjIwOTQ0MzIyMzA1Yzk5MzUxMTlkYmE1Y2U=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2012-03-21T22:56:20Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2012-03-21T22:56:36Z"}, "message": "Avoid mangling names differently in debug builds to work around a build error. Fix up file name and path debug information, and build one compilation unit for a crate instead of one per source file.", "tree": {"sha": "85bbc824ee202521c42cd39e746cde68780a05ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85bbc824ee202521c42cd39e746cde68780a05ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81424389382316220944322305c9935119dba5ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81424389382316220944322305c9935119dba5ce", "html_url": "https://github.com/rust-lang/rust/commit/81424389382316220944322305c9935119dba5ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81424389382316220944322305c9935119dba5ce/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8ab0c1b3b2b6af4e9efa96773926bfa2f58f016", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ab0c1b3b2b6af4e9efa96773926bfa2f58f016", "html_url": "https://github.com/rust-lang/rust/commit/c8ab0c1b3b2b6af4e9efa96773926bfa2f58f016"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "fffd9414228db7d377414a83b3368d046d743f27", "filename": "Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -114,6 +114,9 @@ CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n STDLIB_GLOB :=$(call CFG_LIB_GLOB,std)\n CORELIB_GLOB :=$(call CFG_LIB_GLOB,core)\n LIBRUSTC_GLOB :=$(call CFG_LIB_GLOB,rustc)\n+STDLIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,std)\n+CORELIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,core)\n+LIBRUSTC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustc)\n \n # version-string calculation\n CFG_GIT_DIR := $(CFG_SRC_DIR).git"}, {"sha": "a92d10faf4b6314abf1abf3d288b9d90c490543c", "filename": "mk/host.mk", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -31,7 +31,8 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC): \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB) \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME): \\\n@@ -44,7 +45,8 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB) \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_DSYM_GLOB) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n@@ -53,7 +55,8 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB) \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/libcore.rlib: \\"}, {"sha": "b9c02591cf5d72a54a35bbbce1b428e10e19f329", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -85,6 +85,7 @@ endif\n ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).dylib\n   CFG_LIB_GLOB=lib$(1)-*.dylib\n+  CFG_LIB_DSYM_GLOB=lib$(1)-*.dylib.dSYM\n   CFG_UNIXY := 1\n   CFG_LDENV := DYLD_LIBRARY_PATH\n   CFG_GCCISH_LINK_FLAGS += -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind"}, {"sha": "2df43dfd978b32d607726d1cb9722edb981f6c4a", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -449,19 +449,18 @@ fn build_session_options(match: getopts::match,\n     ret sopts;\n }\n \n-fn build_session(sopts: @session::options, input: str,\n+fn build_session(sopts: @session::options,\n                  demitter: diagnostic::emitter) -> session {\n     let codemap = codemap::new_codemap();\n     let diagnostic_handler =\n         diagnostic::mk_handler(some(demitter));\n     let span_diagnostic_handler =\n         diagnostic::mk_span_handler(diagnostic_handler, codemap);\n-    build_session_(sopts, input, codemap, demitter,\n-                   span_diagnostic_handler)\n+    build_session_(sopts, codemap, demitter, span_diagnostic_handler)\n }\n \n fn build_session_(\n-    sopts: @session::options, input: str,\n+    sopts: @session::options,\n     codemap: codemap::codemap,\n     demitter: diagnostic::emitter,\n     span_diagnostic_handler: diagnostic::span_handler\n@@ -488,7 +487,7 @@ fn build_session_(\n       span_diagnostic: span_diagnostic_handler,\n       filesearch: filesearch,\n       mutable building_library: false,\n-      working_dir: path::dirname(input)}\n+      working_dir: os::getcwd()}\n }\n \n fn parse_pretty(sess: session, &&name: str) -> pp_mode {\n@@ -636,7 +635,7 @@ mod test {\n                        getopts::fail_str(f); }\n             };\n         let sessopts = build_session_options(match, diagnostic::emit);\n-        let sess = build_session(sessopts, \"\", diagnostic::emit);\n+        let sess = build_session(sessopts, diagnostic::emit);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         assert (attr::contains_name(cfg, \"test\"));\n     }\n@@ -652,7 +651,7 @@ mod test {\n                        getopts::fail_str(f); }\n             };\n         let sessopts = build_session_options(match, diagnostic::emit);\n-        let sess = build_session(sessopts, \"\", diagnostic::emit);\n+        let sess = build_session(sessopts, diagnostic::emit);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         let test_items = attr::find_meta_items_by_name(cfg, \"test\");\n         assert (vec::len(test_items) == 1u);"}, {"sha": "f2ed68172440fd7e1654619b6ad1bb847bcb9546", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -99,7 +99,7 @@ fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n     };\n \n     let sopts = build_session_options(match, demitter);\n-    let sess = build_session(sopts, ifile, demitter);\n+    let sess = build_session(sopts, demitter);\n     let odir = getopts::opt_maybe_str(match, \"out-dir\");\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n     let cfg = build_configuration(sess, binary, ifile);"}, {"sha": "fba5e20da6aa0f670f5a0f636b4482fbf0067257", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -402,7 +402,7 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     llsize = llsize_of(ccx, llty);\n     llalign = llalign_of(ccx, llty);\n     let name;\n-    if ccx.sess.opts.debuginfo {\n+    if false /*ccx.sess.opts.debuginfo*/ { //XXX this triggers duplicate LLVM symbols\n         name = mangle_internal_name_by_type_only(ccx, t, \"tydesc\");\n     } else { name = mangle_internal_name_by_seq(ccx, \"tydesc\"); }\n     note_unique_llvm_symbol(ccx, name);\n@@ -427,7 +427,7 @@ fn declare_generic_glue(ccx: @crate_ctxt, t: ty::t, llfnty: TypeRef,\n                         name: str) -> ValueRef {\n     let name = name;\n     let fn_nm;\n-    if ccx.sess.opts.debuginfo {\n+    if false /*ccx.sess.opts.debuginfo*/ { //XXX this triggers duplicate LLVM symbols\n         fn_nm = mangle_internal_name_by_type_only(ccx, t, \"glue_\" + name);\n     } else {\n         fn_nm = mangle_internal_name_by_seq(ccx, \"glue_\" + name);\n@@ -4672,8 +4672,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     lib::llvm::associate_type(tn, \"tydesc\", tydesc_type);\n     let crate_map = decl_crate_map(sess, link_meta.name, llmod);\n     let dbg_cx = if sess.opts.debuginfo {\n-        option::some(@{llmetadata: map::int_hash(),\n-                       names: new_namegen()})\n+        option::some(debuginfo::mk_ctxt(llmod_id))\n     } else {\n         option::none\n     };"}, {"sha": "ba547c6aecd51de2a55455cafaf1644e8c3334cb", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -114,7 +114,7 @@ type crate_ctxt = {\n      builder: BuilderRef_res,\n      shape_cx: shape::ctxt,\n      crate_map: ValueRef,\n-     dbg_cx: option<@debuginfo::debug_ctxt>,\n+     dbg_cx: option<debuginfo::debug_ctxt>,\n      mutable do_not_commit_warning_issued: bool};\n \n // Types used for llself."}, {"sha": "1088ef59ac81638e039589e645c86d18dd2b40bd", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 43, "deletions": 35, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -1,3 +1,4 @@\n+import std::map;\n import std::map::hashmap;\n import lib::llvm::llvm;\n import lib::llvm::ValueRef;\n@@ -17,6 +18,7 @@ export create_function;\n export create_arg;\n export update_source_pos;\n export debug_ctxt;\n+export mk_ctxt;\n \n const LLVMDebugVersion: int = (9 << 16);\n \n@@ -75,18 +77,24 @@ fn llnull() -> ValueRef unsafe {\n \n fn add_named_metadata(cx: @crate_ctxt, name: str, val: ValueRef) {\n     str::as_c_str(name, {|sbuf|\n-        llvm::LLVMAddNamedMetadataOperand(cx.llmod, sbuf,\n-                                          val)\n+        llvm::LLVMAddNamedMetadataOperand(cx.llmod, sbuf, val)\n     })\n }\n \n ////////////////\n \n type debug_ctxt = {\n     llmetadata: metadata_cache,\n-    names: namegen\n+    names: namegen,\n+    crate_file: str\n };\n \n+fn mk_ctxt(crate: str) -> debug_ctxt {\n+    {llmetadata: map::int_hash(),\n+     names: new_namegen(),\n+     crate_file: crate}\n+}\n+\n fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n     let existing = if cache.contains_key(mdtag) {\n         cache.get(mdtag)\n@@ -99,7 +107,7 @@ fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n type metadata<T> = {node: ValueRef, data: T};\n \n type file_md = {path: str};\n-type compile_unit_md = {path: str};\n+type compile_unit_md = {name: str};\n type subprogram_md = {id: ast::node_id};\n type local_var_md = {id: ast::node_id};\n type tydesc_md = {hash: uint};\n@@ -154,48 +162,51 @@ fn cached_metadata<T: copy>(cache: metadata_cache, mdtag: int,\n     ret option::none;\n }\n \n-fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n+fn create_compile_unit(cx: @crate_ctxt)\n     -> @metadata<compile_unit_md> unsafe {\n     let cache = get_cache(cx);\n+    let crate_name = option::get(cx.dbg_cx).crate_file;\n     let tg = CompileUnitTag;\n     alt cached_metadata::<@metadata<compile_unit_md>>(cache, tg,\n-                        {|md| md.data.path == full_path}) {\n+                        {|md| md.data.name == crate_name}) {\n       option::some(md) { ret md; }\n       option::none {}\n     }\n \n-    let work_dir = cx.sess.working_dir;\n-    let file_path = if str::starts_with(full_path, work_dir) {\n-        str::slice(full_path, str::len(work_dir), str::len(full_path))\n-    } else {\n-        full_path\n-    };\n+    let (_, work_dir) = get_file_path_and_dir(cx.sess.working_dir,\n+                                              crate_name);\n     let unit_metadata = [lltag(tg),\n                          llunused(),\n                          lli32(DW_LANG_RUST),\n-                         llstr(file_path),\n+                         llstr(crate_name),\n                          llstr(work_dir),\n                          llstr(#env[\"CFG_VERSION\"]),\n-                         lli1(false), // main compile unit\n+                         lli1(true), // deprecated: main compile unit\n                          lli1(cx.sess.opts.optimize != 0u),\n                          llstr(\"\"), // flags (???)\n                          lli32(0) // runtime version (???)\n-                         // list of enum types\n-                         // list of retained values\n-                         // list of subprograms\n-                         // list of global variables\n                         ];\n     let unit_node = llmdnode(unit_metadata);\n     add_named_metadata(cx, \"llvm.dbg.cu\", unit_node);\n-    let mdval = @{node: unit_node, data: {path: full_path}};\n+    let mdval = @{node: unit_node, data: {name: crate_name}};\n     update_cache(cache, tg, compile_unit_metadata(mdval));\n+\n     ret mdval;\n }\n \n fn get_cache(cx: @crate_ctxt) -> metadata_cache {\n     option::get(cx.dbg_cx).llmetadata\n }\n \n+fn get_file_path_and_dir(work_dir: str, full_path: str) -> (str, str) {\n+    (if str::starts_with(full_path, work_dir) {\n+        str::slice(full_path, str::len(work_dir) + 1u,\n+                   str::len(full_path))\n+    } else {\n+        full_path\n+    }, work_dir)\n+}\n+\n fn create_file(cx: @crate_ctxt, full_path: str) -> @metadata<file_md> {\n     let cache = get_cache(cx);;\n     let tg = FileDescriptorTag;\n@@ -205,12 +216,12 @@ fn create_file(cx: @crate_ctxt, full_path: str) -> @metadata<file_md> {\n         option::none {}\n     }\n \n-    let fname = path::basename(full_path);\n-    let path = path::dirname(full_path);\n-    let unit_node = create_compile_unit(cx, full_path).node;\n+    let (file_path, work_dir) = get_file_path_and_dir(cx.sess.working_dir,\n+                                                      full_path);\n+    let unit_node = create_compile_unit(cx).node;\n     let file_md = [lltag(tg),\n-                   llstr(fname),\n-                   llstr(path),\n+                   llstr(file_path),\n+                   llstr(work_dir),\n                    unit_node];\n     let val = llmdnode(file_md);\n     let mdval = @{node: val, data: {path: full_path}};\n@@ -310,7 +321,7 @@ fn create_basic_type(cx: @crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)\n \n     let fname = filename_from_span(cx, span);\n     let file_node = create_file(cx, fname);\n-    let cu_node = create_compile_unit(cx, fname);\n+    let cu_node = create_compile_unit(cx);\n     let (size, align) = size_and_align_of(cx, t);\n     let lldata = [lltag(tg),\n                   cu_node.node,\n@@ -463,7 +474,7 @@ fn create_composite_type(type_tag: int, name: str, file: ValueRef, line: int,\n                   lli32(line), // source line definition\n                   lli64(size), // size of members\n                   lli64(align), // align\n-                  lli64(offset), // offset\n+                  lli32/*64*/(offset), // offset\n                   lli32(0), // flags\n                   if option::is_none(derived) {\n                       llnull()\n@@ -781,13 +792,9 @@ fn create_function(fcx: fn_ctxt) -> @metadata<subprogram_md> {\n       option::none {}\n     }\n \n-    let path = path_str(fcx.path);\n-\n     let loc = codemap::lookup_char_pos(cx.sess.codemap,\n                                        sp.lo);\n     let file_node = create_file(cx, loc.file.name).node;\n-    let key = if cx.item_symbols.contains_key(fcx.id) { fcx.id } else { id };\n-    let mangled = cx.item_symbols.get(key);\n     let ty_node = if cx.sess.opts.extra_debuginfo {\n         alt ret_ty.node {\n           ast::ty_nil { llnull() }\n@@ -804,17 +811,17 @@ fn create_function(fcx: fn_ctxt) -> @metadata<subprogram_md> {\n                        llunused(),\n                        file_node,\n                        llstr(ident),\n-                       llstr(path), //XXX fully-qualified C++ name\n-                       llstr(mangled), //XXX MIPS name?????\n+                       llstr(ident), //XXX fully-qualified C++ name\n+                       llstr(\"\"), //XXX MIPS name?????\n                        file_node,\n                        lli32(loc.line as int),\n                        sub_node,\n                        lli1(false), //XXX static (check export)\n-                       lli1(true), // not extern\n+                       lli1(true), // defined in compilation unit\n                        lli32(DW_VIRTUALITY_none), // virtual-ness\n                        lli32(0i), //index into virt func\n-                       llnull(), // base type with vtbl\n-                       lli1(false), // artificial\n+                       /*llnull()*/ lli32(0), // base type with vtbl\n+                       lli32(256), // flags\n                        lli1(cx.sess.opts.optimize != 0u),\n                        fcx.llfn\n                        //list of template params\n@@ -825,5 +832,6 @@ fn create_function(fcx: fn_ctxt) -> @metadata<subprogram_md> {\n     add_named_metadata(cx, \"llvm.dbg.sp\", val);\n     let mdval = @{node: val, data: {id: id}};\n     update_cache(cache, SubprogramTag, subprogram_metadata(mdval));\n+\n     ret mdval;\n }"}, {"sha": "2b0d502cb098a1946ff474e557802691491fb057", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81424389382316220944322305c9935119dba5ce/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81424389382316220944322305c9935119dba5ce/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=81424389382316220944322305c9935119dba5ce", "patch": "@@ -155,7 +155,7 @@ fn build_session() -> (session::session, @mutable bool) {\n     let error_handlers = build_error_handlers(codemap);\n     let {emitter, span_handler, ignore_errors} = error_handlers;\n \n-    let session = driver::build_session_(sopts, \".\", codemap, emitter,\n+    let session = driver::build_session_(sopts, codemap, emitter,\n                                          span_handler);\n     (session, ignore_errors)\n }"}]}