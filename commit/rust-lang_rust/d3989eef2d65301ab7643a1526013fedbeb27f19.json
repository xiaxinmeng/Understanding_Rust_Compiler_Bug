{"sha": "d3989eef2d65301ab7643a1526013fedbeb27f19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTg5ZWVmMmQ2NTMwMWFiNzY0M2ExNTI2MDEzZmVkYmViMjdmMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T20:35:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T20:35:49Z"}, "message": "Auto merge of #5319 - 1tgr:master, r=flip1995\n\nLint for `pub(crate)` items that are not crate visible due to the visibility of the module that contains them\n\nchangelog: Add `redundant_pub_crate` lint\n\nCloses #5274.", "tree": {"sha": "275621a0a1d28ec12edb98624689753fbb190fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275621a0a1d28ec12edb98624689753fbb190fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3989eef2d65301ab7643a1526013fedbeb27f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3989eef2d65301ab7643a1526013fedbeb27f19", "html_url": "https://github.com/rust-lang/rust/commit/d3989eef2d65301ab7643a1526013fedbeb27f19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3989eef2d65301ab7643a1526013fedbeb27f19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff81c1b6d7abdcc9ee47f4a8ab175082cad4421", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff81c1b6d7abdcc9ee47f4a8ab175082cad4421", "html_url": "https://github.com/rust-lang/rust/commit/1ff81c1b6d7abdcc9ee47f4a8ab175082cad4421"}, {"sha": "870b9e8139052f7cb1ef1e5717f2f4ce523fb688", "url": "https://api.github.com/repos/rust-lang/rust/commits/870b9e8139052f7cb1ef1e5717f2f4ce523fb688", "html_url": "https://github.com/rust-lang/rust/commit/870b9e8139052f7cb1ef1e5717f2f4ce523fb688"}], "stats": {"total": 479, "additions": 458, "deletions": 21}, "files": [{"sha": "81a1e276a880fd047ccdfd411ffc9e204c53c886", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -1439,6 +1439,7 @@ Released 2018-09-13\n [`redundant_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n+[`redundant_pub_crate`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro"}, {"sha": "7d6fcbc90986ee68872b9398957983dbf06c6596", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 361 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 362 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "ccb495f8088cc082421ca26c063cfe15fbf3ae99", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -285,6 +285,7 @@ pub mod ranges;\n pub mod redundant_clone;\n pub mod redundant_field_names;\n pub mod redundant_pattern_matching;\n+pub mod redundant_pub_crate;\n pub mod redundant_static_lifetimes;\n pub mod reference;\n pub mod regex;\n@@ -323,7 +324,7 @@ pub mod zero_div_zero;\n pub use crate::utils::conf::Conf;\n \n mod reexport {\n-    crate use rustc_ast::ast::Name;\n+    pub use rustc_ast::ast::Name;\n }\n \n /// Register all pre expansion lints\n@@ -745,6 +746,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n+        &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n         &reference::DEREF_ADDROF,\n         &reference::REF_IN_DEREF,\n@@ -1021,6 +1023,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box wildcard_imports::WildcardImports);\n     store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n+    store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1322,6 +1325,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n+        LintId::of(&redundant_pub_crate::REDUNDANT_PUB_CRATE),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n@@ -1463,6 +1467,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&question_mark::QUESTION_MARK),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n+        LintId::of(&redundant_pub_crate::REDUNDANT_PUB_CRATE),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),"}, {"sha": "af4ab367f5fae06a077c3ed77a79a7e4ec9c8ad3", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -0,0 +1,76 @@\n+use crate::utils::span_lint_and_then;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind, VisibilityKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for items declared `pub(crate)` that are not crate visible because they\n+    /// are inside a private module.\n+    ///\n+    /// **Why is this bad?** Writing `pub(crate)` is misleading when it's redundant due to the parent\n+    /// module's visibility.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// mod internal {\n+    ///     pub(crate) fn internal_fn() { }\n+    /// }\n+    /// ```\n+    /// This function is not visible outside the module and it can be declared with `pub` or\n+    /// private visibility\n+    /// ```rust\n+    /// mod internal {\n+    ///     pub fn internal_fn() { }\n+    /// }\n+    /// ```\n+    pub REDUNDANT_PUB_CRATE,\n+    style,\n+    \"Using `pub(crate)` visibility on items that are not crate visible due to the visibility of the module that contains them.\"\n+}\n+\n+#[derive(Default)]\n+pub struct RedundantPubCrate {\n+    is_exported: Vec<bool>,\n+}\n+\n+impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPubCrate {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'tcx>) {\n+        if let VisibilityKind::Crate { .. } = item.vis.node {\n+            if !cx.access_levels.is_exported(item.hir_id) {\n+                if let Some(false) = self.is_exported.last() {\n+                    let span = item.span.with_hi(item.ident.span.hi());\n+                    span_lint_and_then(\n+                        cx,\n+                        REDUNDANT_PUB_CRATE,\n+                        span,\n+                        &format!(\"pub(crate) {} inside private module\", item.kind.descr()),\n+                        |db| {\n+                            db.span_suggestion(\n+                                item.vis.span,\n+                                \"consider using\",\n+                                \"pub\".to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        },\n+                    )\n+                }\n+            }\n+        }\n+\n+        if let ItemKind::Mod { .. } = item.kind {\n+            self.is_exported.push(cx.access_levels.is_exported(item.hir_id));\n+        }\n+    }\n+\n+    fn check_item_post(&mut self, _cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Mod { .. } = item.kind {\n+            self.is_exported.pop().expect(\"unbalanced check_item/check_item_post\");\n+        }\n+    }\n+}"}, {"sha": "722104e5b52492da1a120ffc0536235455326e12", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -80,7 +80,7 @@ macro_rules! define_Conf {\n             $(\n                 mod $config {\n                     use serde::Deserialize;\n-                    crate fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D) -> Result<$Ty, D::Error> {\n+                    pub fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D) -> Result<$Ty, D::Error> {\n                         use super::super::{ERRORS, Error};\n                         Ok(\n                             <$Ty>::deserialize(deserializer).unwrap_or_else(|e| {"}, {"sha": "99413153d49bbc08f28dd38deaabef9e62239988", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast::{Lit, LitFloatType, LitIntType, LitKind};\n \n #[derive(Debug, PartialEq)]\n-pub(crate) enum Radix {\n+pub enum Radix {\n     Binary,\n     Octal,\n     Decimal,\n@@ -26,7 +26,7 @@ pub fn format(lit: &str, type_suffix: Option<&str>, float: bool) -> String {\n }\n \n #[derive(Debug)]\n-pub(crate) struct NumericLiteral<'a> {\n+pub struct NumericLiteral<'a> {\n     /// Which radix the literal was represented in.\n     pub radix: Radix,\n     /// The radix prefix, if present."}, {"sha": "50d5c88195287428e8248831e341e6d702a2bdd4", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 361] = [\n+pub const ALL_LINTS: [Lint; 362] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1764,6 +1764,13 @@ pub const ALL_LINTS: [Lint; 361] = [\n         deprecation: None,\n         module: \"redundant_pattern_matching\",\n     },\n+    Lint {\n+        name: \"redundant_pub_crate\",\n+        group: \"style\",\n+        desc: \"Using `pub(crate)` visibility on items that are not crate visible due to the visibility of the module that contains them.\",\n+        deprecation: None,\n+        module: \"redundant_pub_crate\",\n+    },\n     Lint {\n         name: \"redundant_static_lifetimes\",\n         group: \"style\","}, {"sha": "25f2fd061b88ef0a014f078c8752796354766195", "filename": "tests/ui/redundant_pub_crate.fixed", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fredundant_pub_crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fredundant_pub_crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pub_crate.fixed?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -0,0 +1,107 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::redundant_pub_crate)]\n+\n+mod m1 {\n+    fn f() {}\n+    pub fn g() {} // private due to m1\n+    pub fn h() {}\n+\n+    mod m1_1 {\n+        fn f() {}\n+        pub fn g() {} // private due to m1_1 and m1\n+        pub fn h() {}\n+    }\n+\n+    pub mod m1_2 {\n+        // ^ private due to m1\n+        fn f() {}\n+        pub fn g() {} // private due to m1_2 and m1\n+        pub fn h() {}\n+    }\n+\n+    pub mod m1_3 {\n+        fn f() {}\n+        pub fn g() {} // private due to m1\n+        pub fn h() {}\n+    }\n+}\n+\n+pub(crate) mod m2 {\n+    fn f() {}\n+    pub fn g() {} // already crate visible due to m2\n+    pub fn h() {}\n+\n+    mod m2_1 {\n+        fn f() {}\n+        pub fn g() {} // private due to m2_1\n+        pub fn h() {}\n+    }\n+\n+    pub mod m2_2 {\n+        // ^ already crate visible due to m2\n+        fn f() {}\n+        pub fn g() {} // already crate visible due to m2_2 and m2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m2_3 {\n+        fn f() {}\n+        pub fn g() {} // already crate visible due to m2\n+        pub fn h() {}\n+    }\n+}\n+\n+pub mod m3 {\n+    fn f() {}\n+    pub(crate) fn g() {} // ok: m3 is exported\n+    pub fn h() {}\n+\n+    mod m3_1 {\n+        fn f() {}\n+        pub fn g() {} // private due to m3_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m3_2 {\n+        // ^ ok\n+        fn f() {}\n+        pub fn g() {} // already crate visible due to m3_2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m3_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // ok: m3 and m3_3 are exported\n+        pub fn h() {}\n+    }\n+}\n+\n+mod m4 {\n+    fn f() {}\n+    pub fn g() {} // private: not re-exported by `pub use m4::*`\n+    pub fn h() {}\n+\n+    mod m4_1 {\n+        fn f() {}\n+        pub fn g() {} // private due to m4_1\n+        pub fn h() {}\n+    }\n+\n+    pub mod m4_2 {\n+        // ^ private: not re-exported by `pub use m4::*`\n+        fn f() {}\n+        pub fn g() {} // private due to m4_2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m4_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // ok: m4_3 is re-exported by `pub use m4::*`\n+        pub fn h() {}\n+    }\n+}\n+\n+pub use m4::*;\n+\n+fn main() {}"}, {"sha": "616286b4f39f4fb7f04910d92416e8970f0d7c4c", "filename": "tests/ui/redundant_pub_crate.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pub_crate.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -0,0 +1,107 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::redundant_pub_crate)]\n+\n+mod m1 {\n+    fn f() {}\n+    pub(crate) fn g() {} // private due to m1\n+    pub fn h() {}\n+\n+    mod m1_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m1_1 and m1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m1_2 {\n+        // ^ private due to m1\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m1_2 and m1\n+        pub fn h() {}\n+    }\n+\n+    pub mod m1_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m1\n+        pub fn h() {}\n+    }\n+}\n+\n+pub(crate) mod m2 {\n+    fn f() {}\n+    pub(crate) fn g() {} // already crate visible due to m2\n+    pub fn h() {}\n+\n+    mod m2_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m2_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m2_2 {\n+        // ^ already crate visible due to m2\n+        fn f() {}\n+        pub(crate) fn g() {} // already crate visible due to m2_2 and m2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m2_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // already crate visible due to m2\n+        pub fn h() {}\n+    }\n+}\n+\n+pub mod m3 {\n+    fn f() {}\n+    pub(crate) fn g() {} // ok: m3 is exported\n+    pub fn h() {}\n+\n+    mod m3_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m3_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m3_2 {\n+        // ^ ok\n+        fn f() {}\n+        pub(crate) fn g() {} // already crate visible due to m3_2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m3_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // ok: m3 and m3_3 are exported\n+        pub fn h() {}\n+    }\n+}\n+\n+mod m4 {\n+    fn f() {}\n+    pub(crate) fn g() {} // private: not re-exported by `pub use m4::*`\n+    pub fn h() {}\n+\n+    mod m4_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m4_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m4_2 {\n+        // ^ private: not re-exported by `pub use m4::*`\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m4_2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m4_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // ok: m4_3 is re-exported by `pub use m4::*`\n+        pub fn h() {}\n+    }\n+}\n+\n+pub use m4::*;\n+\n+fn main() {}"}, {"sha": "6fccdaa4e20374d16915519368f6d6ec11f10641", "filename": "tests/ui/redundant_pub_crate.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fredundant_pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fredundant_pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pub_crate.stderr?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -0,0 +1,132 @@\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:7:5\n+   |\n+LL |     pub(crate) fn g() {} // private due to m1\n+   |     ----------^^^^^\n+   |     |\n+   |     help: consider using: `pub`\n+   |\n+   = note: `-D clippy::redundant-pub-crate` implied by `-D warnings`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:12:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m1_1 and m1\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) module inside private module\n+  --> $DIR/redundant_pub_crate.rs:16:5\n+   |\n+LL |     pub(crate) mod m1_2 {\n+   |     ----------^^^^^^^^^\n+   |     |\n+   |     help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:19:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m1_2 and m1\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:25:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m1\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:32:5\n+   |\n+LL |     pub(crate) fn g() {} // already crate visible due to m2\n+   |     ----------^^^^^\n+   |     |\n+   |     help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:37:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m2_1\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) module inside private module\n+  --> $DIR/redundant_pub_crate.rs:41:5\n+   |\n+LL |     pub(crate) mod m2_2 {\n+   |     ----------^^^^^^^^^\n+   |     |\n+   |     help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:44:9\n+   |\n+LL |         pub(crate) fn g() {} // already crate visible due to m2_2 and m2\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:50:9\n+   |\n+LL |         pub(crate) fn g() {} // already crate visible due to m2\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:62:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m3_1\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:69:9\n+   |\n+LL |         pub(crate) fn g() {} // already crate visible due to m3_2\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:82:5\n+   |\n+LL |     pub(crate) fn g() {} // private: not re-exported by `pub use m4::*`\n+   |     ----------^^^^^\n+   |     |\n+   |     help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:87:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m4_1\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: pub(crate) module inside private module\n+  --> $DIR/redundant_pub_crate.rs:91:5\n+   |\n+LL |     pub(crate) mod m4_2 {\n+   |     ----------^^^^^^^^^\n+   |     |\n+   |     help: consider using: `pub`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:94:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m4_2\n+   |         ----------^^^^^\n+   |         |\n+   |         help: consider using: `pub`\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "69ab6e1f8c14399fe8ae72b72a5af787cd252ea9", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -2,6 +2,7 @@\n // aux-build:wildcard_imports_helper.rs\n \n #![warn(clippy::wildcard_imports)]\n+#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n #![warn(unused_imports)]\n "}, {"sha": "e64ac4ce51908c730707574925d91d10fe8b77f1", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -2,6 +2,7 @@\n // aux-build:wildcard_imports_helper.rs\n \n #![warn(clippy::wildcard_imports)]\n+#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n #![warn(unused_imports)]\n "}, {"sha": "050e4c6304f05b49640f208d94bf7b80c2f64e0f", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3989eef2d65301ab7643a1526013fedbeb27f19/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=d3989eef2d65301ab7643a1526013fedbeb27f19", "patch": "@@ -1,91 +1,91 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:10:5\n+  --> $DIR/wildcard_imports.rs:11:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:11:5\n+  --> $DIR/wildcard_imports.rs:12:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:12:5\n+  --> $DIR/wildcard_imports.rs:13:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:14:5\n+  --> $DIR/wildcard_imports.rs:15:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:18:5\n+  --> $DIR/wildcard_imports.rs:19:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:19:5\n+  --> $DIR/wildcard_imports.rs:20:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:88:13\n+  --> $DIR/wildcard_imports.rs:89:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:94:75\n+  --> $DIR/wildcard_imports.rs:95:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:95:13\n+  --> $DIR/wildcard_imports.rs:96:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:106:20\n+  --> $DIR/wildcard_imports.rs:107:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:106:30\n+  --> $DIR/wildcard_imports.rs:107:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:113:13\n+  --> $DIR/wildcard_imports.rs:114:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:142:9\n+  --> $DIR/wildcard_imports.rs:143:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:151:9\n+  --> $DIR/wildcard_imports.rs:152:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:152:9\n+  --> $DIR/wildcard_imports.rs:153:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^"}]}