{"sha": "206e86b947b3fb6940615e866fbba79f26064118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNmU4NmI5NDdiM2ZiNjk0MDYxNWU4NjZmYmJhNzlmMjYwNjQxMTg=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-19T19:23:28Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-19T19:23:28Z"}, "message": "Rollup merge of #31721 - rphmeier:err_tuplestruct_count, r=Manishearth\n\nFixes #31706\n\nAlso fixes a phrasing error in the diagnostic.", "tree": {"sha": "908dc24c82e5845fcd45ac6620c6a5bf7e35a087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/908dc24c82e5845fcd45ac6620c6a5bf7e35a087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206e86b947b3fb6940615e866fbba79f26064118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206e86b947b3fb6940615e866fbba79f26064118", "html_url": "https://github.com/rust-lang/rust/commit/206e86b947b3fb6940615e866fbba79f26064118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206e86b947b3fb6940615e866fbba79f26064118/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a3e8bb51cdeda4ee73296b827bfb208a0bff5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a3e8bb51cdeda4ee73296b827bfb208a0bff5b", "html_url": "https://github.com/rust-lang/rust/commit/28a3e8bb51cdeda4ee73296b827bfb208a0bff5b"}, {"sha": "94499e3385fd42b2dbc75614e867183dd63c529a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94499e3385fd42b2dbc75614e867183dd63c529a", "html_url": "https://github.com/rust-lang/rust/commit/94499e3385fd42b2dbc75614e867183dd63c529a"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1b49409970ded6549c6abcf45bfa64b26deea627", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206e86b947b3fb6940615e866fbba79f26064118/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206e86b947b3fb6940615e866fbba79f26064118/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=206e86b947b3fb6940615e866fbba79f26064118", "patch": "@@ -205,8 +205,8 @@ let f = Bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `Bar::Foo`\n                                 //        is private\n ```\n \n-To fix this error, please ensure that all the fields of the struct, or\n-implement a function for easy instantiation. Examples:\n+To fix this error, please ensure that all the fields of the struct are public,\n+or implement a function for easy instantiation. Examples:\n \n ```\n mod Bar {"}, {"sha": "f0786b9b1fadd283397e631668ea0815280e80b1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206e86b947b3fb6940615e866fbba79f26064118/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206e86b947b3fb6940615e866fbba79f26064118/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=206e86b947b3fb6940615e866fbba79f26064118", "patch": "@@ -833,7 +833,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             NamedField(name) => format!(\"field `{}` of {} is private\",\n                                         name, struct_desc),\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n-                                         idx + 1, struct_desc),\n+                                         idx, struct_desc),\n         };\n         span_err!(self.tcx.sess, span, E0451,\n                   \"{}\", &msg[..]);"}, {"sha": "588c9be3065f82c32890e1ab1951d99474d71dad", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/206e86b947b3fb6940615e866fbba79f26064118/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206e86b947b3fb6940615e866fbba79f26064118/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=206e86b947b3fb6940615e866fbba79f26064118", "patch": "@@ -63,25 +63,25 @@ fn this_crate() {\n     let c = a::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR: field #1 of struct `a::A` is private\n+    let a::A(()) = a; //~ ERROR: field #0 of struct `a::A` is private\n     let a::A(_) = a;\n-    match a { a::A(()) => {} } //~ ERROR: field #1 of struct `a::A` is private\n+    match a { a::A(()) => {} } //~ ERROR: field #0 of struct `a::A` is private\n     match a { a::A(_) => {} }\n \n     let a::B(_) = b;\n-    let a::B(_b) = b; //~ ERROR: field #1 of struct `a::B` is private\n+    let a::B(_b) = b; //~ ERROR: field #0 of struct `a::B` is private\n     match b { a::B(_) => {} }\n-    match b { a::B(_b) => {} } //~ ERROR: field #1 of struct `a::B` is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #1 of struct `a::B` is private\n+    match b { a::B(_b) => {} } //~ ERROR: field #0 of struct `a::B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #0 of struct `a::B` is private\n \n     let a::C(_, _) = c;\n     let a::C(_a, _) = c;\n-    let a::C(_, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n-    let a::C(_a, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n+    let a::C(_, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n+    let a::C(_a, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n     match c { a::C(_, _) => {} }\n     match c { a::C(_a, _) => {} }\n-    match c { a::C(_, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n+    match c { a::C(_, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 of struct `other::A` is private\n+    let other::A(()) = a; //~ ERROR: field #0 of struct `other::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #1 of struct `other::A` is private\n+    //~^ ERROR: field #0 of struct `other::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 of struct `other::B` is private\n+    let other::B(_b) = b; //~ ERROR: field #0 of struct `other::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #1 of struct `other::B` is private\n+    //~^ ERROR: field #0 of struct `other::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #1 of struct `other::B` is private\n+    //~^ ERROR: field #0 of struct `other::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #2 of struct `other::C` is private\n+    //~^ ERROR: field #1 of struct `other::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #2 of struct `other::C` is private\n+    //~^ ERROR: field #1 of struct `other::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}]}