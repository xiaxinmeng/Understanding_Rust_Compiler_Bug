{"sha": "2c7816950846473414b1a0793e41c315ccdcb1b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzgxNjk1MDg0NjQ3MzQxNGIxYTA3OTNlNDFjMzE1Y2NkY2IxYjQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-26T03:21:16Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-26T03:21:16Z"}, "message": "Merge pull request #4644 from martica/camel-case-option\n\nUpdate more uses of Option, Some and None to camel case", "tree": {"sha": "1f1695f5fe73ee8ea1551d91dde227648a8fe0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1695f5fe73ee8ea1551d91dde227648a8fe0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7816950846473414b1a0793e41c315ccdcb1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7816950846473414b1a0793e41c315ccdcb1b4", "html_url": "https://github.com/rust-lang/rust/commit/2c7816950846473414b1a0793e41c315ccdcb1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7816950846473414b1a0793e41c315ccdcb1b4/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41adf9d8ef7c7dee6cfabbc5892ffb81d14b844a", "url": "https://api.github.com/repos/rust-lang/rust/commits/41adf9d8ef7c7dee6cfabbc5892ffb81d14b844a", "html_url": "https://github.com/rust-lang/rust/commit/41adf9d8ef7c7dee6cfabbc5892ffb81d14b844a"}, {"sha": "c89afc39718ed7b326f2e4f4ba4dd65a6d160bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89afc39718ed7b326f2e4f4ba4dd65a6d160bb3", "html_url": "https://github.com/rust-lang/rust/commit/c89afc39718ed7b326f2e4f4ba4dd65a6d160bb3"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "05a2572fdefe3d6eb514fc40af55d94dc807af97", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -149,7 +149,7 @@ pub pure fn chain_ref<T, U>(opt: &Option<T>,\n #[inline(always)]\n pub pure fn or<T>(opta: Option<T>, optb: Option<T>) -> Option<T> {\n     /*!\n-     * Returns the leftmost some() value, or none if both are none.\n+     * Returns the leftmost Some() value, or None if both are None.\n      */\n     match move opta {\n         Some(move opta) => Some(move opta),"}, {"sha": "35c1c96befae5264f67b49d0d87c3709e6eb3d30", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -114,10 +114,10 @@ variables from reassigned if there may be pointers to their interior)\n Finally, in some cases, both dangers can arise.  For example, something\n like the following:\n \n-    let mut x = ~some(5);\n+    let mut x = ~Some(5);\n     match x {\n-      ~some(ref y) => { ... }\n-      ~none => { ... }\n+      ~Some(ref y) => { ... }\n+      ~None => { ... }\n     }\n \n In this case, if `x` to be reassigned or `*x` were to be mutated, then"}, {"sha": "5916588a9a2bb772108faa63132fb37cb2429a6c", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -226,8 +226,8 @@ priv impl &preserve_ctxt {\n             //\n             // As an example, consider this scenario:\n             //\n-            //    let mut x = @some(3);\n-            //    match *x { Some(y) {...} none {...} }\n+            //    let mut x = @Some(3);\n+            //    match *x { Some(y) {...} None {...} }\n             //\n             // Technically, the value `x` need only be rooted\n             // in the `some` arm.  However, we evaluate `x` in trans\n@@ -236,8 +236,8 @@ priv impl &preserve_ctxt {\n             //\n             // As a second example, consider *this* scenario:\n             //\n-            //    let x = @mut @some(3);\n-            //    match x { @@some(y) {...} @@none {...} }\n+            //    let x = @mut @Some(3);\n+            //    match x { @@Some(y) {...} @@None {...} }\n             //\n             // Here again, `x` need only be rooted in the `some` arm.\n             // In this case, the value which needs to be rooted is"}, {"sha": "6a62e622526d7bc5de24efbcc287203e2bb00c2e", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -100,8 +100,8 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n     // Replace any typedef'd types with their equivalent non-typedef\n     // type. This ensures that all LLVM nominal types that contain\n     // Rust types are defined as the same LLVM types.  If we don't do\n-    // this then, e.g. `option<{myfield: bool}>` would be a different\n-    // type than `option<myrec>`.\n+    // this then, e.g. `Option<{myfield: bool}>` would be a different\n+    // type than `Option<myrec>`.\n     let t_norm = ty::normalize_ty(cx.tcx, t);\n \n     if t != t_norm {"}, {"sha": "43f609dd2f0a39879fc3a14ae0fe6122fad125f9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -2696,7 +2696,7 @@ fn check_instantiable(tcx: ty::ctxt,\n     if !ty::is_instantiable(tcx, item_ty) {\n         tcx.sess.span_err(sp, fmt!(\"this type cannot be instantiated \\\n                   without an instance of itself; \\\n-                  consider using `option<%s>`\",\n+                  consider using `Option<%s>`\",\n                                    ppaux::ty_to_str(tcx, item_ty)));\n     }\n }"}, {"sha": "54638819f7ccc83e02735d0176a709dbbd842ea7", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -492,13 +492,13 @@ fn lattice_var_and_t<L:LatticeDir Combine,\n     match self.bnd(a_bounds) {\n         Some(ref a_bnd) => {\n             // If a has an upper bound, return the LUB(a.ub, b)\n-            debug!(\"bnd=some(%s)\", a_bnd.inf_str(self.infcx()));\n+            debug!(\"bnd=Some(%s)\", a_bnd.inf_str(self.infcx()));\n             lattice_dir_op(a_bnd, b)\n         }\n         None => {\n             // If a does not have an upper bound, make b the upper bound of a\n             // and then return b.\n-            debug!(\"bnd=none\");\n+            debug!(\"bnd=None\");\n             let a_bounds = self.with_bnd(a_bounds, *b);\n             do self.combine_fields().bnds(&a_bounds.lb, &a_bounds.ub).then {\n                 self.infcx().set(vb, a_id, Root(a_bounds, nde_a.rank));"}, {"sha": "3e9a9756a81c6e0f0771946cc7a9b6fe16e1387c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -468,7 +468,7 @@ fn read_future(sock: &TcpSocket, timeout_msecs: uint)\n  *     }\n  *     // this callback is ran when a new connection arrives\n  *     {|new_conn, kill_ch|\n- *     let cont_po = core::comm::port::<option<tcp_err_data>>();\n+ *     let cont_po = core::comm::port::<Option<tcp_err_data>>();\n  *     let cont_ch = core::comm::chan(cont_po);\n  *     task::spawn {||\n  *         let accept_result = net::tcp::accept(new_conn);\n@@ -484,9 +484,9 @@ fn read_future(sock: &TcpSocket, timeout_msecs: uint)\n  *     };\n  *     match core::comm::recv(cont_po) {\n  *       // shut down listen()\n- *       some(err_data) { core::comm::send(kill_chan, some(err_data)) }\n+ *       Some(err_data) { core::comm::send(kill_chan, Some(err_data)) }\n  *       // wait for next connection\n- *       none {}\n+ *       None {}\n  *     }\n  * };\n  * ~~~~~~~~~~~\n@@ -593,7 +593,7 @@ pub fn accept(new_conn: TcpNewConnection)\n  * callback's arguments are:\n  *     * `new_conn` - an opaque type that can be passed to\n  *     `net::tcp::accept` in order to be converted to a `tcp_socket`.\n- *     * `kill_ch` - channel of type `core::comm::chan<option<tcp_err_data>>`.\n+ *     * `kill_ch` - channel of type `core::comm::chan<Option<tcp_err_data>>`.\n  *     this channel can be used to send a message to cause `listen` to begin\n  *     closing the underlying libuv data structures.\n  *"}, {"sha": "ded0f316a150e9905db8eba8e1066210fc67c623", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -893,7 +893,7 @@ pub mod node {\n      * # Return value\n      *\n      * * `option::None` if no transformation happened\n-     * * `option::some(x)` otherwise, in which case `x` has the same contents\n+     * * `option::Some(x)` otherwise, in which case `x` has the same contents\n      *    as `node` bot lower height and/or fragmentation.\n      */\n     pub fn bal(node: @Node) -> Option<@Node> {"}, {"sha": "d0ca133b39e4a9b92bb618fc4a5780e6534049a8", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -100,11 +100,11 @@ pub fn sleep(iotask: IoTask, msecs: uint) {\n }\n \n /**\n- * Receive on a port for (up to) a specified time, then return an `option<T>`\n+ * Receive on a port for (up to) a specified time, then return an `Option<T>`\n  *\n  * This call will block to receive on the provided port for up to the\n  * specified timeout. Depending on whether the provided port receives in that\n- * time period, `recv_timeout` will return an `option<T>` representing the\n+ * time period, `recv_timeout` will return an `Option<T>` representing the\n  * result.\n  *\n  * # Arguments\n@@ -115,9 +115,9 @@ pub fn sleep(iotask: IoTask, msecs: uint) {\n  *\n  * # Returns\n  *\n- * An `option<T>` representing the outcome of the call. If the call `recv`'d\n+ * An `Option<T>` representing the outcome of the call. If the call `recv`'d\n  * on the provided port in the allotted timeout period, then the result will\n- * be a `some(T)`. If not, then `none` will be returned.\n+ * be a `Some(T)`. If not, then `None` will be returned.\n  */\n pub fn recv_timeout<T: Copy Owned>(iotask: IoTask,\n                                    msecs: uint,\n@@ -255,7 +255,7 @@ mod test {\n             };\n \n             match recv_timeout(hl_loop, 10u, test_po) {\n-              some(val) => {\n+              Some(val) => {\n                 assert val == expected;\n                 successes += 1;\n               }"}, {"sha": "2505859a737a36f305eceea8ca5f67a8747ed8c2", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -15,9 +15,9 @@\n   xfailed for now (see Issue #2354)\n  */\n fn foo() { //~ ERROR this open brace is not closed\n-  match some(x) {\n-      some(y) { fail; }\n-      none    { fail; }\n+  match Some(x) {\n+      Some(y) { fail; }\n+      None    { fail; }\n }\n \n fn bar() {"}, {"sha": "f1f0637a31805fd1f4c12b6771eefd6c1cb14a82", "filename": "src/test/compile-fail/pat-ref-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Fcompile-fail%2Fpat-ref-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Fcompile-fail%2Fpat-ref-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-ref-enum.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn matcher(x: option<int>) {\n+fn matcher(x: Option<int>) {\n     match x {\n-      ref some(i) => {} //~ ERROR expected identifier, found enum pattern\n-      none => {}\n+      ref Some(i) => {} //~ ERROR expected identifier, found enum pattern\n+      None => {}\n     }\n }\n "}, {"sha": "5a82d0104383ba31ec2d43a0f7551d1639fd8f6b", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -69,8 +69,8 @@ fn main() {\n     let stmt = quote_stmt!(let x = 20;);\n     check_pp(ext_cx, *stmt, pprust::print_stmt, ~\"let x = 20;\");\n \n-    let pat = quote_pat!(some(_));\n-    check_pp(ext_cx, pat, pprust::print_refutable_pat, ~\"some(_)\");\n+    let pat = quote_pat!(Some(_));\n+    check_pp(ext_cx, pat, pprust::print_refutable_pat, ~\"Some(_)\");\n \n }\n "}, {"sha": "eda015cce1840a47ce086ecb20bd4357a38af3ad", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -16,9 +16,9 @@ fn dispose(+_x: arc::ARC<bool>) unsafe { }\n \n fn main() {\n     let p = arc::arc(true);\n-    let x = some(p);\n+    let x = Some(p);\n     match move x {\n-        some(move z) => { dispose(z); },\n-        none => fail\n+        Some(move z) => { dispose(z); },\n+        None => fail\n     }\n }"}, {"sha": "0bf5b7de75d3caa4e6e8f463439d0ca44f4dfc9a", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -55,8 +55,8 @@ class cat : map<int, bool> {\n   fn contains_key(&&k: int) -> bool { k <= self.meows }\n   fn get(&&k:int) -> bool { k <= self.meows }\n   fn [](&&k:int) -> bool { k <= self.meows }\n-  fn find(&&k:int) -> option<bool> { some(self.get(k)) }\n-  fn remove(&&k:int) -> option<bool> { self.meows -= k; some(true) }\n+  fn find(&&k:int) -> Option<bool> { Some(self.get(k)) }\n+  fn remove(&&k:int) -> Option<bool> { self.meows -= k; Some(true) }\n   fn each(f: fn(&&int, &&bool) -> bool) {\n     let mut n = int::abs(self.meows);\n     while n > 0 {"}, {"sha": "f80e3956eda716ada0cb9d22735b04ac09495f71", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -23,7 +23,7 @@ trait noisy {\n }\n \n trait scratchy {\n-  fn scratch() -> option<furniture>;\n+  fn scratch() -> Option<furniture>;\n }\n \n trait bitey {\n@@ -72,13 +72,13 @@ class cat : noisy, scratchy, bitey {\n \n   fn speak() -> int { self.meow() as int }\n   fn meow_count() -> uint { *self.meows }\n-  fn scratch() -> option<furniture> {\n+  fn scratch() -> Option<furniture> {\n     let all = ~[chair, couch, bed];\n     log(error, self.scratched);\n-    let mut rslt = none;\n+    let mut rslt = None;\n     for each(all) |thing| { if !self.scratched.contains(thing) {\n           self.scratched.push(thing);\n-          return some(thing); }}\n+          return Some(thing); }}\n     rslt\n   }\n   fn bite() -> body_part {"}, {"sha": "b6e9d66ec7260c671e65a79277f18e0ee35f406e", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -23,7 +23,7 @@ class keys<K: Copy, V: Copy, M: Copy map<K,V>>\n     }\n \n     fn each(blk: fn(K) -> bool) { self.map.each(|k, _v| blk(k) ) }\n-    fn size_hint() -> option<uint> { some(self.map.size()) }\n+    fn size_hint() -> Option<uint> { Some(self.map.size()) }\n     fn eachi(blk: fn(uint, K) -> bool) { iter::eachi(self, blk) }\n }\n "}, {"sha": "cc3b3d623322de3100e6fce044d567531b135285", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -310,8 +310,8 @@ fn main() {\n //    Commented out because of option::get error\n \n     let (client_, server_) = pingpong::init();\n-    let client_ = ~mut some(client_);\n-    let server_ = ~mut some(server_);\n+    let client_ = ~mut Some(client_);\n+    let server_ = ~mut Some(server_);\n \n     task::spawn {|move client_|\n         let mut client__ = none;"}, {"sha": "fddc41a3761458bf3a5f90a73b9256d680233b95", "filename": "src/test/run-pass/issue-2869.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fissue-2869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fissue-2869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2869.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n // xfail-test\n-enum pat { pat_ident(option<uint>) }\n+enum pat { pat_ident(Option<uint>) }\n \n fn f(pat: pat) -> bool { true }\n \n fn num_bindings(pat: pat) -> uint {\n     match pat {\n       pat_ident(_) if f(pat) { 0 }\n-      pat_ident(none) { 1 }\n-      pat_ident(some(sub)) { sub }\n+      pat_ident(None) { 1 }\n+      pat_ident(Some(sub)) { sub }\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "8ed85b957ee73f791626c095f2e56ebb4aba7b97", "filename": "src/test/run-pass/region-return-interior-of-option-in-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option-in-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7816950846473414b1a0793e41c315ccdcb1b4/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option-in-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option-in-self.rs?ref=2c7816950846473414b1a0793e41c315ccdcb1b4", "patch": "@@ -15,14 +15,14 @@ struct cell<T> {\n }\n \n struct cells<T> {\n-    vals: ~[option<cell<T>>];\n+    vals: ~[Option<cell<T>>];\n }\n \n impl<T> &cells<T> {\n     fn get(idx: uint) -> &self/T {\n         match self.vals[idx] {\n-          some(ref v) => &v.value,\n-          none => fail\n+          Some(ref v) => &v.value,\n+          None => fail\n         }\n     }\n }"}]}