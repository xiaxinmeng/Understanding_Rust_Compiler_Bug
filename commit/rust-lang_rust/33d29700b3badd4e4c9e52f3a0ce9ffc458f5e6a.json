{"sha": "33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZDI5NzAwYjNiYWRkNGU0YzllNTJmM2EwY2U5ZmZjNDU4ZjVlNmE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-10T20:46:40Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-10T20:46:40Z"}, "message": "MIR: Refactor mir::Terminator to use tuples instead of a fixed-size arrays.", "tree": {"sha": "fee198ee9ab62f3ea59daf21207bdaf29a80d721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee198ee9ab62f3ea59daf21207bdaf29a80d721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "html_url": "https://github.com/rust-lang/rust/commit/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62de4c066cf12d820b3dfdcf7a45400611e29a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62de4c066cf12d820b3dfdcf7a45400611e29a7", "html_url": "https://github.com/rust-lang/rust/commit/d62de4c066cf12d820b3dfdcf7a45400611e29a7"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "0959bb078ed8662f921a2fa39f9bf7a596102239", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -13,6 +13,7 @@ use middle::def_id::DefId;\n use middle::subst::Substs;\n use middle::ty::{AdtDef, ClosureSubsts, FnOutput, Region, Ty};\n use rustc_back::slice;\n+use rustc_data_structures::tuple_slice::TupleSlice;\n use rustc_front::hir::InlineAsm;\n use syntax::ast::Name;\n use syntax::codemap::Span;\n@@ -206,7 +207,7 @@ pub enum Terminator<'tcx> {\n     /// jump to branch 0 if this lvalue evaluates to true\n     If {\n         cond: Operand<'tcx>,\n-        targets: [BasicBlock; 2],\n+        targets: (BasicBlock, BasicBlock),\n     },\n \n     /// lvalue evaluates to some enum; jump depending on the branch\n@@ -254,7 +255,7 @@ pub enum Terminator<'tcx> {\n     /// unwinding.\n     Call {\n         data: CallData<'tcx>,\n-        targets: [BasicBlock; 2],\n+        targets: (BasicBlock, BasicBlock),\n     },\n }\n \n@@ -264,12 +265,12 @@ impl<'tcx> Terminator<'tcx> {\n         match *self {\n             Goto { target: ref b } => slice::ref_slice(b),\n             Panic { target: ref b } => slice::ref_slice(b),\n-            If { cond: _, targets: ref b } => b,\n+            If { cond: _, targets: ref b } => b.as_slice(),\n             Switch { targets: ref b, .. } => b,\n             SwitchInt { targets: ref b, .. } => b,\n             Diverge => &[],\n             Return => &[],\n-            Call { data: _, targets: ref b } => b,\n+            Call { data: _, targets: ref b } => b.as_slice(),\n         }\n     }\n \n@@ -278,12 +279,12 @@ impl<'tcx> Terminator<'tcx> {\n         match *self {\n             Goto { target: ref mut b } => slice::mut_ref_slice(b),\n             Panic { target: ref mut b } => slice::mut_ref_slice(b),\n-            If { cond: _, targets: ref mut b } => b,\n+            If { cond: _, targets: ref mut b } => b.as_mut_slice(),\n             Switch { targets: ref mut b, .. } => b,\n             SwitchInt { targets: ref mut b, .. } => b,\n             Diverge => &mut [],\n             Return => &mut [],\n-            Call { data: _, targets: ref mut b } => b,\n+            Call { data: _, targets: ref mut b } => b.as_mut_slice(),\n         }\n     }\n }"}, {"sha": "7547b804e65534d3b5cf3ffc6b9fdefb45204f71", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -10,6 +10,7 @@\n \n use middle::ty::Region;\n use mir::repr::*;\n+use rustc_data_structures::tuple_slice::TupleSlice;\n \n pub trait Visitor<'tcx> {\n     // Override these, and call `self.super_xxx` to revert back to the\n@@ -97,7 +98,7 @@ pub trait Visitor<'tcx> {\n \n             Terminator::If { ref cond, ref targets } => {\n                 self.visit_operand(cond);\n-                for &target in &targets[..] {\n+                for &target in targets.as_slice() {\n                     self.visit_branch(block, target);\n                 }\n             }\n@@ -126,7 +127,7 @@ pub trait Visitor<'tcx> {\n                 for arg in &data.args {\n                     self.visit_operand(arg);\n                 }\n-                for &target in &targets[..] {\n+                for &target in targets.as_slice() {\n                     self.visit_branch(block, target);\n                 }\n             }"}, {"sha": "1c96addcea0d9e618644462836c8cf3244be6aac", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -69,7 +69,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.cfg.terminate(block,\n                                    Terminator::If {\n                                        cond: Operand::Consume(lt),\n-                                       targets: [success, failure],\n+                                       targets: (success, failure),\n                                    });\n                 this.panic(failure);\n                 success.and(slice.index(idx))"}, {"sha": "802c55ce7647a0f53bdd731ba5f8eaab99ee3d9c", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -53,7 +53,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let mut else_block = this.cfg.start_new_block();\n                 this.cfg.terminate(block, Terminator::If {\n                     cond: operand,\n-                    targets: [then_block, else_block]\n+                    targets: (then_block, else_block)\n                 });\n \n                 unpack!(then_block = this.into(destination, then_block, then_expr));\n@@ -84,15 +84,15 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n                 let lhs = unpack!(block = this.as_operand(block, lhs));\n                 let blocks = match op {\n-                    LogicalOp::And => [else_block, false_block],\n-                    LogicalOp::Or => [true_block, else_block],\n+                    LogicalOp::And => (else_block, false_block),\n+                    LogicalOp::Or => (true_block, else_block),\n                 };\n                 this.cfg.terminate(block, Terminator::If { cond: lhs, targets: blocks });\n \n                 let rhs = unpack!(else_block = this.as_operand(else_block, rhs));\n                 this.cfg.terminate(else_block, Terminator::If {\n                     cond: rhs,\n-                    targets: [true_block, false_block]\n+                    targets: (true_block, false_block)\n                 });\n \n                 this.cfg.push_assign_constant(\n@@ -149,7 +149,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         this.cfg.terminate(loop_block_end,\n                                            Terminator::If {\n                                                cond: cond,\n-                                               targets: [body_block, exit_block]\n+                                               targets: (body_block, exit_block)\n                                            });\n                     } else {\n                         body_block = loop_block;\n@@ -225,7 +225,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                            func: fun,\n                                            args: args,\n                                        },\n-                                       targets: [success, panic],\n+                                       targets: (success, panic),\n                                    });\n                 success.unit()\n             }"}, {"sha": "f8385d5817018b063217a11bb9353827fb6dea0a", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -555,7 +555,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             let cond = unpack!(block = self.as_operand(block, guard));\n             let otherwise = self.cfg.start_new_block();\n             self.cfg.terminate(block, Terminator::If { cond: cond,\n-                                                       targets: [arm_block, otherwise]});\n+                                                       targets: (arm_block, otherwise)});\n             Some(otherwise)\n         } else {\n             self.cfg.terminate(block, Terminator::Goto { target: arm_block });"}, {"sha": "7b329fc4d52c38da3d25af934e56d29ba1d26ddd", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -232,7 +232,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                                  self.cfg.start_new_block()];\n                 self.cfg.terminate(block, Terminator::If {\n                     cond: Operand::Consume(result),\n-                    targets: [target_blocks[0], target_blocks[1]]\n+                    targets: (target_blocks[0], target_blocks[1])\n                 });\n \n                 target_blocks\n@@ -252,7 +252,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let bool_ty = self.hir.bool_ty();\n         let eq_result = self.temp(bool_ty);\n         let func = self.item_ref_operand(span, item_ref);\n-        let call_blocks = [self.cfg.start_new_block(), self.diverge_cleanup()];\n+        let call_blocks = (self.cfg.start_new_block(), self.diverge_cleanup());\n         self.cfg.terminate(block,\n                            Terminator::Call {\n                                data: CallData {\n@@ -264,10 +264,10 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                            });\n \n         // check the result\n-        self.cfg.terminate(call_blocks[0],\n+        self.cfg.terminate(call_blocks.0,\n                            Terminator::If {\n                                cond: Operand::Consume(eq_result),\n-                               targets: [target_blocks[0], target_blocks[1]],\n+                               targets: (target_blocks[0], target_blocks[1]),\n                            });\n \n         target_blocks"}, {"sha": "d0c0afc80a657dce2b7c166c4536cbdc1896a3cd", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -96,18 +96,21 @@ impl SimplifyCfg {\n             mem::swap(&mut terminator, &mut mir.basic_block_data_mut(bb).terminator);\n \n             mir.basic_block_data_mut(bb).terminator = match terminator {\n-                Terminator::If { ref targets, .. } if targets[0] == targets[1] => {\n+                Terminator::If { ref targets, .. } if targets.0 == targets.1 => {\n                     changed = true;\n-                    Terminator::Goto { target: targets[0] }\n+                    Terminator::Goto { target: targets.0 }\n                 }\n                 Terminator::If { ref targets, cond: Operand::Constant(Constant {\n                     literal: Literal::Value {\n                         value: ConstVal::Bool(cond)\n                     }, ..\n                 }) } => {\n                     changed = true;\n-                    let target_idx = if cond { 0 } else { 1 };\n-                    Terminator::Goto { target: targets[target_idx] }\n+                    if cond {\n+                        Terminator::Goto { target: targets.0 }\n+                    } else {\n+                        Terminator::Goto { target: targets.1 }\n+                    }\n                 }\n                 Terminator::SwitchInt { ref targets, .. }  if targets.len() == 1 => {\n                     Terminator::Goto { target: targets[0] }"}, {"sha": "b58b51f5a2b235d6df5d92ede9c371a722f937b5", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=33d29700b3badd4e4c9e52f3a0ce9ffc458f5e6a", "patch": "@@ -39,7 +39,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 unimplemented!()\n             }\n \n-            mir::Terminator::If { ref cond, targets: [true_bb, false_bb] } => {\n+            mir::Terminator::If { ref cond, targets: (true_bb, false_bb) } => {\n                 let cond = self.trans_operand(bcx, cond);\n                 let lltrue = self.llblock(true_bb);\n                 let llfalse = self.llblock(false_bb);"}]}