{"sha": "a84aee3dbe053218579e69a9b093c82cd7714f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NGFlZTNkYmUwNTMyMTg1NzllNjlhOWIwOTNjODJjZDc3MTRmNzU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-01T22:16:46Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:14Z"}, "message": "Add `HygieneData::apply_mark_internal`.", "tree": {"sha": "211868c96791fe5e35fde987d973eb7ade72d733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/211868c96791fe5e35fde987d973eb7ade72d733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84aee3dbe053218579e69a9b093c82cd7714f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84aee3dbe053218579e69a9b093c82cd7714f75", "html_url": "https://github.com/rust-lang/rust/commit/a84aee3dbe053218579e69a9b093c82cd7714f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84aee3dbe053218579e69a9b093c82cd7714f75/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a02b2e36c0f1b601519ec6bc71b2d8ff621b4625", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02b2e36c0f1b601519ec6bc71b2d8ff621b4625", "html_url": "https://github.com/rust-lang/rust/commit/a02b2e36c0f1b601519ec6bc71b2d8ff621b4625"}], "stats": {"total": 113, "additions": 58, "deletions": 55}, "files": [{"sha": "affbb46a1f8f318c3cbe7a9a962a00ccf78a8c14", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 58, "deletions": 55, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a84aee3dbe053218579e69a9b093c82cd7714f75/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84aee3dbe053218579e69a9b093c82cd7714f75/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=a84aee3dbe053218579e69a9b093c82cd7714f75", "patch": "@@ -264,6 +264,63 @@ impl HygieneData {\n         }\n         scope\n     }\n+\n+    fn apply_mark_internal(&mut self, ctxt: SyntaxContext, mark: Mark, transparency: Transparency)\n+                           -> SyntaxContext {\n+        let syntax_contexts = &mut self.syntax_contexts;\n+        let mut opaque = syntax_contexts[ctxt.0 as usize].opaque;\n+        let mut opaque_and_semitransparent =\n+            syntax_contexts[ctxt.0 as usize].opaque_and_semitransparent;\n+\n+        if transparency >= Transparency::Opaque {\n+            let prev_ctxt = opaque;\n+            opaque = *self.markings.entry((prev_ctxt, mark, transparency)).or_insert_with(|| {\n+                let new_opaque = SyntaxContext(syntax_contexts.len() as u32);\n+                syntax_contexts.push(SyntaxContextData {\n+                    outer_mark: mark,\n+                    transparency,\n+                    prev_ctxt,\n+                    opaque: new_opaque,\n+                    opaque_and_semitransparent: new_opaque,\n+                    dollar_crate_name: kw::DollarCrate,\n+                });\n+                new_opaque\n+            });\n+        }\n+\n+        if transparency >= Transparency::SemiTransparent {\n+            let prev_ctxt = opaque_and_semitransparent;\n+            opaque_and_semitransparent =\n+                    *self.markings.entry((prev_ctxt, mark, transparency)).or_insert_with(|| {\n+                let new_opaque_and_semitransparent =\n+                    SyntaxContext(syntax_contexts.len() as u32);\n+                syntax_contexts.push(SyntaxContextData {\n+                    outer_mark: mark,\n+                    transparency,\n+                    prev_ctxt,\n+                    opaque,\n+                    opaque_and_semitransparent: new_opaque_and_semitransparent,\n+                    dollar_crate_name: kw::DollarCrate,\n+                });\n+                new_opaque_and_semitransparent\n+            });\n+        }\n+\n+        let prev_ctxt = ctxt;\n+        *self.markings.entry((prev_ctxt, mark, transparency)).or_insert_with(|| {\n+            let new_opaque_and_semitransparent_and_transparent =\n+                SyntaxContext(syntax_contexts.len() as u32);\n+            syntax_contexts.push(SyntaxContextData {\n+                outer_mark: mark,\n+                transparency,\n+                prev_ctxt,\n+                opaque,\n+                opaque_and_semitransparent,\n+                dollar_crate_name: kw::DollarCrate,\n+            });\n+            new_opaque_and_semitransparent_and_transparent\n+        })\n+    }\n }\n \n pub fn clear_markings() {\n@@ -359,61 +416,7 @@ impl SyntaxContext {\n     }\n \n     fn apply_mark_internal(self, mark: Mark, transparency: Transparency) -> SyntaxContext {\n-        HygieneData::with(|data| {\n-            let syntax_contexts = &mut data.syntax_contexts;\n-            let mut opaque = syntax_contexts[self.0 as usize].opaque;\n-            let mut opaque_and_semitransparent =\n-                syntax_contexts[self.0 as usize].opaque_and_semitransparent;\n-\n-            if transparency >= Transparency::Opaque {\n-                let prev_ctxt = opaque;\n-                opaque = *data.markings.entry((prev_ctxt, mark, transparency)).or_insert_with(|| {\n-                    let new_opaque = SyntaxContext(syntax_contexts.len() as u32);\n-                    syntax_contexts.push(SyntaxContextData {\n-                        outer_mark: mark,\n-                        transparency,\n-                        prev_ctxt,\n-                        opaque: new_opaque,\n-                        opaque_and_semitransparent: new_opaque,\n-                        dollar_crate_name: kw::DollarCrate,\n-                    });\n-                    new_opaque\n-                });\n-            }\n-\n-            if transparency >= Transparency::SemiTransparent {\n-                let prev_ctxt = opaque_and_semitransparent;\n-                opaque_and_semitransparent =\n-                        *data.markings.entry((prev_ctxt, mark, transparency)).or_insert_with(|| {\n-                    let new_opaque_and_semitransparent =\n-                        SyntaxContext(syntax_contexts.len() as u32);\n-                    syntax_contexts.push(SyntaxContextData {\n-                        outer_mark: mark,\n-                        transparency,\n-                        prev_ctxt,\n-                        opaque,\n-                        opaque_and_semitransparent: new_opaque_and_semitransparent,\n-                        dollar_crate_name: kw::DollarCrate,\n-                    });\n-                    new_opaque_and_semitransparent\n-                });\n-            }\n-\n-            let prev_ctxt = self;\n-            *data.markings.entry((prev_ctxt, mark, transparency)).or_insert_with(|| {\n-                let new_opaque_and_semitransparent_and_transparent =\n-                    SyntaxContext(syntax_contexts.len() as u32);\n-                syntax_contexts.push(SyntaxContextData {\n-                    outer_mark: mark,\n-                    transparency,\n-                    prev_ctxt,\n-                    opaque,\n-                    opaque_and_semitransparent,\n-                    dollar_crate_name: kw::DollarCrate,\n-                });\n-                new_opaque_and_semitransparent_and_transparent\n-            })\n-        })\n+        HygieneData::with(|data| data.apply_mark_internal(self, mark, transparency))\n     }\n \n     /// Pulls a single mark off of the syntax context. This effectively moves the"}]}