{"sha": "3ac84b2542ec1c4caeab54239c67202113c82ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYzg0YjI1NDJlYzFjNGNhZWFiNTQyMzljNjcyMDIxMTNjODJlYTA=", "commit": {"author": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-02-24T18:34:51Z"}, "committer": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-02-24T18:34:51Z"}, "message": "Remove explicit visit_qpath method\n\nInstead of replacing the default behaviour of the visit_qpath method,\nI've moved the printing code to private method of PrintVisitor\n(print_qpath).", "tree": {"sha": "6ae7c2788dd5740c0d10f5e50a595cd733f82d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ae7c2788dd5740c0d10f5e50a595cd733f82d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ac84b2542ec1c4caeab54239c67202113c82ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac84b2542ec1c4caeab54239c67202113c82ea0", "html_url": "https://github.com/rust-lang/rust/commit/3ac84b2542ec1c4caeab54239c67202113c82ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ac84b2542ec1c4caeab54239c67202113c82ea0/comments", "author": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8494f57c82f6a1ff79a1065c8025f7e68dbe26de", "html_url": "https://github.com/rust-lang/rust/commit/8494f57c82f6a1ff79a1065c8025f7e68dbe26de"}], "stats": {"total": 36, "additions": 11, "deletions": 25}, "files": [{"sha": "beae98f81f6574472d18d5240d271b29dd9702eb", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3ac84b2542ec1c4caeab54239c67202113c82ea0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac84b2542ec1c4caeab54239c67202113c82ea0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=3ac84b2542ec1c4caeab54239c67202113c82ea0", "patch": "@@ -6,10 +6,8 @@\n use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::{Expr, Expr_, QPath, Ty_};\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor, walk_decl};\n-use rustc::hir::Decl;\n-use syntax::ast::{self, Attribute, LitKind, NodeId, DUMMY_NODE_ID};\n-use syntax::codemap::Span;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use syntax::ast::{self, Attribute, LitKind, DUMMY_NODE_ID};\n use std::collections::HashMap;\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -80,7 +78,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         prelude();\n-\n         PrintVisitor::new(\"item\").visit_impl_item(item);\n         done();\n     }\n@@ -173,6 +170,12 @@ impl PrintVisitor {\n             },\n         }\n     }\n+\n+    fn print_qpath(&mut self, path: &QPath) {\n+        print!(\"    if match_qpath({}, &[\", self.current);\n+        print_path(path, &mut true);\n+        println!(\"]);\");\n+    }\n }\n \n struct PrintVisitor {\n@@ -184,18 +187,6 @@ struct PrintVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n-    fn visit_decl(&mut self, d: &'tcx Decl) {\n-        match d.node {\n-            hir::DeclLocal(ref local) => {\n-                self.visit_pat(&local.pat);\n-                if let Some(ref e) = local.init {\n-                    self.visit_expr(e);\n-                }\n-            },\n-            _ => walk_decl(self, d)\n-        }\n-    }\n-\n     fn visit_expr(&mut self, expr: &Expr) {\n         print!(\"    if let Expr_::Expr\");\n         let current = format!(\"{}.node\", self.current);\n@@ -283,7 +274,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 if let Ty_::TyPath(ref qp) = ty.node {\n                     println!(\"    if let Ty_::TyPath(ref {}) = {}.node;\", qp_label, cast_ty);\n                     self.current = qp_label;\n-                    self.visit_qpath(&qp, ty.id, ty.span);\n+                    self.print_qpath(&qp);\n                 }\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n@@ -398,7 +389,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 let path_pat = self.next(\"path\");\n                 println!(\"Path(ref {}) = {};\", path_pat, current);\n                 self.current = path_pat;\n-                self.visit_qpath(path, expr.id, expr.span);\n+                self.print_qpath(path);\n             },\n             Expr_::ExprAddrOf(mutability, ref inner) => {\n                 let inner_pat = self.next(\"inner\");\n@@ -453,7 +444,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Struct(ref {}, ref {}, None) = {};\", path_pat, fields_pat, current);\n                 }\n                 self.current = path_pat;\n-                self.visit_qpath(path, expr.id, expr.span);\n+                self.print_qpath(path);\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n                 println!(\"    // unimplemented: field checks\");\n             },\n@@ -468,11 +459,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         }\n     }\n \n-    fn visit_qpath(&mut self, path: &QPath, _: NodeId, _: Span) {\n-        print!(\"    if match_qpath({}, &[\", self.current);\n-        print_path(path, &mut true);\n-        println!(\"]);\");\n-    }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }"}]}