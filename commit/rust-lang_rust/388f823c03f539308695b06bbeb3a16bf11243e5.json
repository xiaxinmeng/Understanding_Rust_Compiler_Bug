{"sha": "388f823c03f539308695b06bbeb3a16bf11243e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OGY4MjNjMDNmNTM5MzA4Njk1YjA2YmJlYjNhMTZiZjExMjQzZTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-22T22:07:09Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:11:19Z"}, "message": "Correct name of constrained_generic_params alias", "tree": {"sha": "abd9d3fe247c00cb8f5f888d537514e75927c577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd9d3fe247c00cb8f5f888d537514e75927c577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388f823c03f539308695b06bbeb3a16bf11243e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388f823c03f539308695b06bbeb3a16bf11243e5", "html_url": "https://github.com/rust-lang/rust/commit/388f823c03f539308695b06bbeb3a16bf11243e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388f823c03f539308695b06bbeb3a16bf11243e5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b1ddba9b132c4853b4e7af8e4e906e7a0d37b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b1ddba9b132c4853b4e7af8e4e906e7a0d37b2", "html_url": "https://github.com/rust-lang/rust/commit/d8b1ddba9b132c4853b4e7af8e4e906e7a0d37b2"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "9c8b5ac58e337529a0b0aa4852a7ddfc57b0858c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/388f823c03f539308695b06bbeb3a16bf11243e5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388f823c03f539308695b06bbeb3a16bf11243e5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=388f823c03f539308695b06bbeb3a16bf11243e5", "patch": "@@ -15,7 +15,7 @@\n //! crate as a kind of pass. This should eventually be factored away.\n \n use crate::astconv::{AstConv, Bounds};\n-use crate::constrained_generic_params as ctp;\n+use crate::constrained_generic_params as cgp;\n use crate::check::intrinsic::intrisic_operation_unsafety;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n@@ -2202,11 +2202,11 @@ fn explicit_predicates_of<'a, 'tcx>(\n     {\n         let self_ty = tcx.type_of(def_id);\n         let trait_ref = tcx.impl_trait_ref(def_id);\n-        ctp::setup_constraining_predicates(\n+        cgp::setup_constraining_predicates(\n             tcx,\n             &mut predicates,\n             trait_ref,\n-            &mut ctp::parameters_for_impl(self_ty, trait_ref),\n+            &mut cgp::parameters_for_impl(self_ty, trait_ref),\n         );\n     }\n "}, {"sha": "e7ec5bc81c7695661c1dc046168adfd1773abdec", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/388f823c03f539308695b06bbeb3a16bf11243e5/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388f823c03f539308695b06bbeb3a16bf11243e5/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=388f823c03f539308695b06bbeb3a16bf11243e5", "patch": "@@ -8,7 +8,7 @@\n //! specialization errors. These things can (and probably should) be\n //! fixed, but for the moment it's easier to do these checks early.\n \n-use crate::constrained_generic_params as ctp;\n+use crate::constrained_generic_params as cgp;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -102,8 +102,8 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl_predicates = tcx.predicates_of(impl_def_id);\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n \n-    let mut input_parameters = ctp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n-    ctp::identify_constrained_generic_params(\n+    let mut input_parameters = cgp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n+    cgp::identify_constrained_generic_params(\n         tcx, &impl_predicates, impl_trait_ref, &mut input_parameters);\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n@@ -114,23 +114,23 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             item.kind == ty::AssociatedKind::Type && item.defaultness.has_value()\n         })\n         .flat_map(|def_id| {\n-            ctp::parameters_for(&tcx.type_of(def_id), true)\n+            cgp::parameters_for(&tcx.type_of(def_id), true)\n         }).collect();\n \n     for param in &impl_generics.params {\n         match param.kind {\n             // Disallow ANY unconstrained type parameters.\n             ty::GenericParamDefKind::Type { .. } => {\n                 let param_ty = ty::ParamTy::for_def(param);\n-                if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n+                if !input_parameters.contains(&cgp::Parameter::from(param_ty)) {\n                     report_unused_parameter(tcx,\n                                             tcx.def_span(param.def_id),\n                                             \"type\",\n                                             &param_ty.to_string());\n                 }\n             }\n             ty::GenericParamDefKind::Lifetime => {\n-                let param_lt = ctp::Parameter::from(param.to_early_bound_region_data());\n+                let param_lt = cgp::Parameter::from(param.to_early_bound_region_data());\n                 if lifetimes_in_associated_types.contains(&param_lt) && // (*)\n                     !input_parameters.contains(&param_lt) {\n                     report_unused_parameter(tcx,\n@@ -141,7 +141,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             ty::GenericParamDefKind::Const => {\n                 let param_ct = ty::ParamConst::for_def(param);\n-                if !input_parameters.contains(&ctp::Parameter::from(param_ct)) {\n+                if !input_parameters.contains(&cgp::Parameter::from(param_ct)) {\n                     report_unused_parameter(tcx,\n                                            tcx.def_span(param.def_id),\n                                            \"const\","}]}