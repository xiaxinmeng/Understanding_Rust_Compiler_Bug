{"sha": "0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMWRjNjJjMWVjM2MyM2RjYjVlOTA1MDBhMmIzYjI1ODE3YWQwM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-29T12:23:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-29T12:23:05Z"}, "message": "Auto merge of #56340 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 22 pull requests\n\nSuccessful merges:\n\n - #55391 (bootstrap: clean up a few clippy findings)\n - #56021 (avoid features_untracked)\n - #56023 (atomic::Ordering: Get rid of misleading parts of intro)\n - #56080 (Reduce the amount of bold text at doc.rlo)\n - #56114 (Enclose type in backticks for \"non-exhaustive patterns\" error)\n - #56124 (Fix small doc mistake on std::io::read::read_to_end)\n - #56127 (Update an outdated comment in mir building)\n - #56148 (Add rustc-guide as a submodule)\n - #56149 (Make std::os::unix/linux::fs::MetadataExt::a/m/ctime* documentation clearer)\n - #56220 (Suggest appropriate place for lifetime when declared after type arguments)\n - #56223 (Make JSON output from -Zprofile-json valid)\n - #56236 (Remove unsafe `unsafe` inner function.)\n - #56255 (Update outdated code comments in StringReader)\n - #56257 (rustc-guide has moved to rust-lang/)\n - #56273 (Add missing doc link)\n - #56289 (Fix small typo in comment of thread::stack_size)\n - #56294 (Fix a typo in the documentation of std::ffi)\n - #56312 (Deduplicate literal -> constant lowering)\n - #56319 (fix futures creating aliasing mutable and shared ref)\n - #56321 (rustdoc: add bottom margin spacing to nested lists)\n - #56322 (resolve: Fix false-positives from lint `absolute_paths_not_starting_with_crate`)\n - #56330 (Clean up span in non-trailing `..` suggestion)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9eff411fcec26978368a52f56a1146e918b2694a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eff411fcec26978368a52f56a1146e918b2694a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "html_url": "https://github.com/rust-lang/rust/commit/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147e60c5f89cfa2d3ffc247413956a37582c98e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/147e60c5f89cfa2d3ffc247413956a37582c98e7", "html_url": "https://github.com/rust-lang/rust/commit/147e60c5f89cfa2d3ffc247413956a37582c98e7"}, {"sha": "3b64f86beb82b78496a5d5fe3c43944ef7ebd95d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b64f86beb82b78496a5d5fe3c43944ef7ebd95d", "html_url": "https://github.com/rust-lang/rust/commit/3b64f86beb82b78496a5d5fe3c43944ef7ebd95d"}], "stats": {"total": 734, "additions": 418, "deletions": 316}, "files": [{"sha": "5cc4cab62d1731093cfb07dbd3a40325e7d59795", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -62,3 +62,6 @@\n \turl = https://github.com/rust-lang-nursery/clang.git\n \tbranch = rust-release-80-v1\n \n+[submodule \"src/doc/rustc-guide\"]\n+\tpath = src/doc/rustc-guide\n+\turl = https://github.com/rust-lang/rustc-guide.git"}, {"sha": "137fe61320796291ddf37c393a7165b68fd7f79d", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -640,13 +640,13 @@ are:\n * **Google!** ([search only in Rust Documentation][gsearchdocs] to find types, traits, etc. quickly)\n * Don't be afraid to ask! The Rust community is friendly and helpful.\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/about-this-guide.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n [gdfrustc]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n [gsearchdocs]: https://www.google.com/search?q=site:doc.rust-lang.org+your+query+here\n [rif]: http://internals.rust-lang.org\n [rr]: https://doc.rust-lang.org/book/README.html\n [rustforge]: https://forge.rust-lang.org/\n [tlgba]: http://tomlee.co/2014/04/a-more-detailed-tour-of-the-rust-compiler/\n [ro]: http://www.rustaceans.org/\n-[rctd]: https://rust-lang-nursery.github.io/rustc-guide/tests/intro.html\n+[rctd]: https://rust-lang.github.io/rustc-guide/tests/intro.html\n [cheatsheet]: https://buildbot2.rust-lang.org/homu/"}, {"sha": "37442661bcbc1f73daab687a1e2e97f25ce263a3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -233,7 +233,7 @@ Also, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n [IRC]: https://en.wikipedia.org/wiki/Internet_Relay_Chat\n [#rust]: irc://irc.mozilla.org/rust\n [#rust-beginners]: irc://irc.mozilla.org/rust-beginners\n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/about-this-guide.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n [rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n \n ## License"}, {"sha": "65228915866eafc47bada4483d39cf129cd4ed32", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -12,4 +12,4 @@ There is also useful content in the following READMEs, which are gradually being\n - https://github.com/rust-lang/rust/tree/master/src/librustc/infer/higher_ranked\n - https://github.com/rust-lang/rust/tree/master/src/librustc/infer/lexical_region_resolve\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/about-this-guide.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html"}, {"sha": "2832f5bebddd61bd2d1b7dccde7b9c19c2d7ab8a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -777,10 +777,10 @@ impl Build {\n     fn cflags(&self, target: Interned<String>, which: GitRepo) -> Vec<String> {\n         // Filter out -O and /O (the optimization flags) that we picked up from\n         // cc-rs because the build scripts will determine that for themselves.\n-        let mut base: Vec<String> = self.cc[&target].args().iter()\n+        let mut base = self.cc[&target].args().iter()\n                            .map(|s| s.to_string_lossy().into_owned())\n                            .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))\n-                           .collect::<Vec<_>>();\n+                           .collect::<Vec<String>>();\n \n         // If we're compiling on macOS then we add a few unconditional flags\n         // indicating that we want libc++ (more filled out than libstdc++) and"}, {"sha": "b79a349a453b6868502101a84ae92278ffc0b0c7", "filename": "src/doc/index.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -21,6 +21,9 @@ nav {\n #search-but:hover, #search-input:focus {\n     border-color: #55a9ff;\n }\n+h2 {\n+    font-size: 18px;\n+}\n </style>\n \n Welcome to an overview of the documentation provided by the Rust project."}, {"sha": "3a804956e3c28d7e44e38804207a00013594e1d3", "filename": "src/doc/rustc-guide", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-guide?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -0,0 +1 @@\n+Subproject commit 3a804956e3c28d7e44e38804207a00013594e1d3"}, {"sha": "3a1cafe8a61533dfdb5baa1493c641a19525fea4", "filename": "src/doc/rustc/src/contributing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,6 +1,6 @@\n # Contributing to rustc\n \n We'd love to have your help improving `rustc`! To that end, we've written [a\n-whole book](https://rust-lang-nursery.github.io/rustc-guide/) on its\n+whole book](https://rust-lang.github.io/rustc-guide/) on its\n internals, how it works, and how to get started working on it. To learn\n-more, you'll want to check that out.\n\\ No newline at end of file\n+more, you'll want to check that out."}, {"sha": "3063cb1a7df440022fcd58d6a7a11f8ab010a500", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -519,7 +519,7 @@ pub trait Iterator {\n     /// element.\n     ///\n     /// `map()` transforms one iterator into another, by means of its argument:\n-    /// something that implements `FnMut`. It produces a new iterator which\n+    /// something that implements [`FnMut`]. It produces a new iterator which\n     /// calls this closure on each element of the original iterator.\n     ///\n     /// If you are good at thinking in types, you can think of `map()` like this:\n@@ -533,6 +533,7 @@ pub trait Iterator {\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n     /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n+    /// [`FnMut`]: ../../std/ops/trait.FnMut.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "52abd8f99529b586b00b6d665d2d0509d112003a", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -62,18 +62,15 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n         }\n \n         const TAG_CONT_U8: u8 = 128;\n-        fn unsafe_get(xs: &[u8], i: usize) -> u8 {\n-            unsafe { *xs.get_unchecked(i) }\n-        }\n         fn safe_get(xs: &[u8], i: usize) -> u8 {\n-            if i >= xs.len() { 0 } else { unsafe_get(xs, i) }\n+            *xs.get(i).unwrap_or(&0)\n         }\n \n         let mut i = 0;\n         while i < self.source.len() {\n             let i_ = i;\n \n-            let byte = unsafe_get(self.source, i);\n+            let byte = unsafe { *self.source.get_unchecked(i) };\n             i += 1;\n \n             if byte < 128 {"}, {"sha": "27eeb045bb196ab4987a0f7877497672525c4ba3", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -173,18 +173,20 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n \n /// Atomic memory orderings\n ///\n-/// Memory orderings limit the ways that both the compiler and CPU may reorder\n-/// instructions around atomic operations. At its most restrictive,\n-/// \"sequentially consistent\" atomics allow neither reads nor writes\n-/// to be moved either before or after the atomic operation; on the other end\n-/// \"relaxed\" atomics allow all reorderings.\n+/// Memory orderings specify the way atomic operations synchronize memory.\n+/// In its weakest [`Relaxed`][Ordering::Relaxed], only the memory directly touched by the\n+/// operation is synchronized. On the other hand, a store-load pair of [`SeqCst`][Ordering::SeqCst]\n+/// operations synchronize other memory while additionally preserving a total order of such\n+/// operations across all threads.\n ///\n /// Rust's memory orderings are [the same as\n /// LLVM's](https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n ///\n /// For more information see the [nomicon].\n ///\n /// [nomicon]: ../../../nomicon/atomics.html\n+/// [Ordering::Relaxed]: #variant.Relaxed\n+/// [Ordering::SeqCst]: #variant.SeqCst\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n #[non_exhaustive]\n@@ -234,8 +236,8 @@ pub enum Ordering {\n     /// For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.\n     ///\n     /// Notice that in the case of `compare_and_swap`, it is possible that the operation ends up\n-    /// not performing any store and hence it has just `Acquire` ordering. However,\n-    /// `AcqRel` will never perform [`Relaxed`] accesses.\n+    /// not performing any store and hence it has just [`Acquire`] ordering. However,\n+    /// [`AcqRel`][`AcquireRelease`] will never perform [`Relaxed`] accesses.\n     ///\n     /// This ordering is only applicable for operations that combine both loads and stores.\n     ///"}, {"sha": "c0e5c542bdc8b794e15e074db22cfabbe96f82ce", "filename": "src/librustc/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,3 +1,3 @@\n For more information about how rustc works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/"}, {"sha": "91a06e452e5fd9c14b340e108e6f7838d20d39fa", "filename": "src/librustc/dep_graph/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fdep_graph%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fdep_graph%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n To learn more about how dependency tracking works in rustc, see the [rustc\n guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/query.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/query.html"}, {"sha": "4c94c993ab40595131f83168c737a4c2b5292806", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -195,7 +195,7 @@ impl DepGraph {\n     /// - If you need 3+ arguments, use a tuple for the\n     ///   `arg` parameter.\n     ///\n-    /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/incremental-compilation.html\n+    /// [rustc guide]: https://rust-lang.github.io/rustc-guide/incremental-compilation.html\n     pub fn with_task<'gcx, C, A, R>(&self,\n                                    key: DepNode,\n                                    cx: C,"}, {"sha": "1674320165e65f7fa0260eba170ae4cab3e5b35e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -689,7 +689,7 @@ pub struct WhereEqPredicate {\n ///\n /// For more details, see the [rustc guide].\n ///\n-/// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/hir.html\n+/// [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub module: Mod,"}, {"sha": "54bfe90099b7376880a16d8e1316745c26ba6d20", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -13,7 +13,7 @@\n //! For an overview of what canonicalization is and how it fits into\n //! rustc, check out the [chapter in the rustc guide][c].\n //!\n-//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::canonical::{\n     Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, Canonicalized,\n@@ -44,7 +44,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// To get a good understanding of what is happening here, check\n     /// out the [chapter in the rustc guide][c].\n     ///\n-    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query\n+    /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query\n     pub fn canonicalize_query<V>(\n         &self,\n         value: &V,\n@@ -92,7 +92,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// To get a good understanding of what is happening here, check\n     /// out the [chapter in the rustc guide][c].\n     ///\n-    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result\n+    /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result\n     pub fn canonicalize_response<V>(&self, value: &V) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,"}, {"sha": "6b0fa79b201fcfbe24777633cef756b49919688e", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -29,7 +29,7 @@\n //! For a more detailed look at what is happening here, check\n //! out the [chapter in the rustc guide][c].\n //!\n-//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "8d2b1d74c554b0f62839a3056f9b04341c3a36ab", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -15,7 +15,7 @@\n //! For an overview of what canonicaliation is and how it fits into\n //! rustc, check out the [chapter in the rustc guide][c].\n //!\n-//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::canonical::substitute::substitute_value;\n use infer::canonical::{\n@@ -184,7 +184,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// To get a good understanding of what is happening here, check\n     /// out the [chapter in the rustc guide][c].\n     ///\n-    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#processing-the-canonicalized-query-result\n+    /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#processing-the-canonicalized-query-result\n     pub fn instantiate_query_response_and_region_obligations<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "ab575882f8a17deed154a3c8dd892ce5d194e400", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -14,7 +14,7 @@\n //! For an overview of what canonicalization is and how it fits into\n //! rustc, check out the [chapter in the rustc guide][c].\n //!\n-//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n+//! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::canonical::{Canonical, CanonicalVarValues};\n use ty::fold::TypeFoldable;"}, {"sha": "cf91b85807632f08ccf1dc24468221c0464c4a2d", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// For more information about how placeholders and HRTBs work, see\n     /// the [rustc guide].\n     ///\n-    /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/hrtb.html\n+    /// [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n     pub fn replace_bound_vars_with_placeholders<T>(\n         &self,\n         binder: &ty::Binder<T>"}, {"sha": "4483e522f3a1f59b40aa56d809903821ff3ac8b4", "filename": "src/librustc/infer/lexical_region_resolve/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is obsolete and will be removed soon! For\n > more info on how the current borrowck works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n ## Terminology\n "}, {"sha": "775bbf955b830efd558623056a450e20cd8bb481", "filename": "src/librustc/infer/region_constraints/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is obsolete and will be removed soon! For\n > more info on how the current borrowck works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n ## Terminology\n \n@@ -18,7 +18,7 @@ constraints over the course of a function.  Finally, at the end of\n processing a function, we process and solve the constraints all at\n once.\n \n-[ti]: https://rust-lang-nursery.github.io/rustc-guide/type-inference.html\n+[ti]: https://rust-lang.github.io/rustc-guide/type-inference.html\n \n The constraints are always of one of three possible forms:\n "}, {"sha": "ddb0c5bf22ab6410299a4f061c2c3f9fc9cda00b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -30,7 +30,7 @@\n //!\n //! For more information about how rustc works, see the [rustc guide].\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/\n //!\n //! # Note\n //!"}, {"sha": "35d1a4dd2cb7c5e691ede2c7d72cf258cfa4c0c8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -14,7 +14,7 @@\n //! For more information about how MIR-based region-checking works,\n //! see the [rustc guide].\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n use ich::{StableHashingContext, NodeIdHashingMode};\n use util::nodemap::{FxHashMap, FxHashSet};"}, {"sha": "368f83eb6112731b65ad294b491370ed2066c59c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -10,7 +10,7 @@\n \n //! MIR datatypes and passes. See the [rustc guide] for more info.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/index.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n \n use hir::def::CtorKind;\n use hir::def_id::DefId;"}, {"sha": "4bf8ba0d6d1c8ef9ed75d3d26ee4d1c563bc0581", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -11,8 +11,8 @@\n //! See rustc guide chapters on [trait-resolution] and [trait-specialization] for more info on how\n //! this works.\n //!\n-//! [trait-resolution]: https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html\n-//! [trait-specialization]: https://rust-lang-nursery.github.io/rustc-guide/traits/specialization.html\n+//! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n+//! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n use syntax_pos::DUMMY_SP;"}, {"sha": "e582a9020464dfed81049c142e5b2353744489a4", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -10,7 +10,7 @@\n \n //! Trait Resolution. See [rustc guide] for more info on how this works.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n \n pub use self::SelectionError::*;\n pub use self::FulfillmentErrorCode::*;"}, {"sha": "f8f9650ebe1ae6952b35285d1a85e4cdc82170f9", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -53,7 +53,7 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n /// first canonicalize the key and then invoke the query on the tcx,\n /// which produces the resulting query region constraints.\n ///\n-/// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n+/// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n     fmt::Debug + Sized + TypeFoldable<'tcx> + Lift<'gcx>\n {"}, {"sha": "fb4c9f3bad7154686a13dfe76f72bdaa185f2cfd", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -10,7 +10,7 @@\n \n //! See [rustc guide] for more info on how this works.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#selection\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/resolution.html#selection\n \n use self::EvaluationResult::*;\n use self::SelectionCandidate::*;\n@@ -1173,7 +1173,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // candidates. See [rustc guide] for more details.\n     //\n     // [rustc guide]:\n-    // https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#candidate-assembly\n+    // https://rust-lang.github.io/rustc-guide/traits/resolution.html#candidate-assembly\n \n     fn candidate_from_obligation<'o>(\n         &mut self,\n@@ -2720,7 +2720,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // type error.  See [rustc guide] for more details.\n     //\n     // [rustc guide]:\n-    // https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#confirmation\n+    // https://rust-lang.github.io/rustc-guide/traits/resolution.html#confirmation\n \n     fn confirm_candidate(\n         &mut self,"}, {"sha": "19ef3171b13fc75667d463bfca079606a23bcddb", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -17,7 +17,7 @@\n //! See the [rustc guide] for a bit more detail on how specialization\n //! fits together with the rest of the trait machinery.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/specialization.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;"}, {"sha": "e32913b8905b7b2ac8f761aa875ed5da22064acd", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             }\n         } else {\n             // users enabling the `const_fn` feature gate can do what they want\n-            !self.sess.features_untracked().const_fn\n+            !self.features().const_fn\n         }\n     }\n }"}, {"sha": "79a4638d6f7d9915c4d49a26dd640c86518e1349", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -876,7 +876,7 @@ pub struct FreeRegionInfo {\n /// various **compiler queries** that have been performed. See the\n /// [rustc guide] for more details.\n ///\n-/// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/ty.html\n+/// [rustc guide]: https://rust-lang.github.io/rustc-guide/ty.html\n #[derive(Copy, Clone)]\n pub struct TyCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     gcx: &'a GlobalCtxt<'gcx>,"}, {"sha": "a18e3a275467db607bc960606b118bcaf939d1e8", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1138,7 +1138,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n ///\n /// [1]: http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n /// [2]: http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n-/// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/hrtb.html\n+/// [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/hrtb.html\n #[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub enum RegionKind {\n     // Region bound in a type or fn declaration which will be"}, {"sha": "bea3453b31adf8de36a73d8b26adf1c6a84aefac", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -102,7 +102,7 @@ macro_rules! define_categories {\n                         };\n \n                     json.push_str(&format!(\n-                        \"{{ \\\"category\\\": {}, \\\"time_ms\\\": {},\n+                        \"{{ \\\"category\\\": \\\"{}\\\", \\\"time_ms\\\": {},\\\n                             \\\"query_count\\\": {}, \\\"query_hits\\\": {} }},\",\n                         stringify!($name),\n                         self.times.$name / 1_000_000,"}, {"sha": "a05c56e3629a3a3ed7746268532de8bd32ab3301", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is more or less obsolete, and will be removed\n > soon! The new system is described in the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n This pass has the job of enforcing memory safety. This is a subtle\n topic. This docs aim to explain both the practice and the theory"}, {"sha": "dda2e5ac18f01ba00f35a1b9a3d8b8d6b3ea567d", "filename": "src/librustc_codegen_llvm/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_codegen_llvm%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_codegen_llvm%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -4,4 +4,4 @@ that runs towards the end of the compilation process.\n \n For more information about how codegen works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/codegen.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/codegen.html"}, {"sha": "c4d73953e9b2e0bac3582173a24aaf12025feb29", "filename": "src/librustc_driver/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_driver%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_driver%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -7,4 +7,4 @@ options).\n \n For more information about how the driver works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/rustc-driver.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/rustc-driver.html"}, {"sha": "2db9fb9cb99f41bcf9d41e2e0262a9aaf82fa362", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -85,9 +85,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         unpack!(block = this.into(&Place::Local(temp), block, expr));\n \n-        // In constants, temp_lifetime is None. We should not need to drop\n-        // anything because no values with a destructor can be created in\n-        // a constant at this time, even if the type may need dropping.\n+        // In constants, temp_lifetime is None for temporaries that live for the\n+        // 'static lifetime. Thus we do not drop these temporaries and simply leak them.\n+        // This is equivalent to what `let x = &foo();` does in functions. The temporary\n+        // is lifted to their surrounding scope. In a function that means the temporary lives\n+        // until just before the function returns. In constants that means it outlives the\n+        // constant's initialization value computation. Anything outliving a constant\n+        // must have the `'static` lifetime and live forever.\n+        // Anything with a shorter lifetime (e.g the `&foo()` in `bar(&foo())` or anything\n+        // within a block will keep the regular drops just like runtime code.\n         if let Some(temp_lifetime) = temp_lifetime {\n             this.schedule_drop_storage_and_value(\n                 expr_span,"}, {"sha": "c98ef31c2bae22b958f357b969e54be0948ce89c", "filename": "src/librustc_mir/hair/constant.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -0,0 +1,102 @@\n+use syntax::ast;\n+use rustc::ty::{self, Ty, TyCtxt, ParamEnv};\n+use syntax_pos::symbol::Symbol;\n+use rustc::mir::interpret::{ConstValue, Scalar};\n+\n+#[derive(PartialEq)]\n+crate enum LitToConstError {\n+    UnparseableFloat,\n+    Reported,\n+}\n+\n+crate fn lit_to_const<'a, 'gcx, 'tcx>(\n+    lit: &'tcx ast::LitKind,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    ty: Ty<'tcx>,\n+    neg: bool,\n+) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n+    use syntax::ast::*;\n+\n+    let trunc = |n| {\n+        let param_ty = ParamEnv::reveal_all().and(tcx.lift_to_global(&ty).unwrap());\n+        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n+        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n+        let shift = 128 - width.bits();\n+        let result = (n << shift) >> shift;\n+        trace!(\"trunc result: {}\", result);\n+        Ok(ConstValue::Scalar(Scalar::Bits {\n+            bits: result,\n+            size: width.bytes() as u8,\n+        }))\n+    };\n+\n+    use rustc::mir::interpret::*;\n+    let lit = match *lit {\n+        LitKind::Str(ref s, _) => {\n+            let s = s.as_str();\n+            let id = tcx.allocate_bytes(s.as_bytes());\n+            ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n+        },\n+        LitKind::ByteStr(ref data) => {\n+            let id = tcx.allocate_bytes(data);\n+            ConstValue::Scalar(Scalar::Ptr(id.into()))\n+        },\n+        LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bits {\n+            bits: n as u128,\n+            size: 1,\n+        }),\n+        LitKind::Int(n, _) if neg => {\n+            let n = n as i128;\n+            let n = n.overflowing_neg().0;\n+            trunc(n as u128)?\n+        },\n+        LitKind::Int(n, _) => trunc(n)?,\n+        LitKind::Float(n, fty) => {\n+            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n+        }\n+        LitKind::FloatUnsuffixed(n) => {\n+            let fty = match ty.sty {\n+                ty::Float(fty) => fty,\n+                _ => bug!()\n+            };\n+            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n+        }\n+        LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n+        LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n+    };\n+    Ok(ty::Const::from_const_value(tcx, lit, ty))\n+}\n+\n+fn parse_float<'tcx>(\n+    num: Symbol,\n+    fty: ast::FloatTy,\n+    neg: bool,\n+) -> Result<ConstValue<'tcx>, ()> {\n+    let num = num.as_str();\n+    use rustc_apfloat::ieee::{Single, Double};\n+    use rustc_apfloat::Float;\n+    let (bits, size) = match fty {\n+        ast::FloatTy::F32 => {\n+            num.parse::<f32>().map_err(|_| ())?;\n+            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n+            if neg {\n+                f = -f;\n+            }\n+            (f.to_bits(), 4)\n+        }\n+        ast::FloatTy::F64 => {\n+            num.parse::<f64>().map_err(|_| ())?;\n+            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n+            if neg {\n+                f = -f;\n+            }\n+            (f.to_bits(), 8)\n+        }\n+    };\n+\n+    Ok(ConstValue::Scalar(Scalar::Bits { bits, size }))\n+}"}, {"sha": "c414088b653221c099ffb5f80ec38c4882fa9035", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -26,12 +26,12 @@ use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::layout::VariantIdx;\n-use syntax::ast::{self, LitKind};\n+use syntax::ast;\n use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n-use hair::pattern::parse_float;\n+use hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n@@ -131,7 +131,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty::Const::from_bool(self.tcx, false)\n     }\n \n-    // FIXME: Combine with rustc_mir::hair::pattern::lit_to_const\n     pub fn const_eval_literal(\n         &mut self,\n         lit: &'tcx ast::LitKind,\n@@ -141,61 +140,19 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     ) -> &'tcx ty::Const<'tcx> {\n         trace!(\"const_eval_literal: {:#?}, {:?}, {:?}, {:?}\", lit, ty, sp, neg);\n \n-        let parse_float = |num, fty| -> ConstValue<'tcx> {\n-            parse_float(num, fty, neg).unwrap_or_else(|_| {\n+        match lit_to_const(lit, self.tcx, ty, neg) {\n+            Ok(c) => c,\n+            Err(LitToConstError::UnparseableFloat) => {\n                 // FIXME(#31407) this is only necessary because float parsing is buggy\n-                self.tcx.sess.span_fatal(sp, \"could not evaluate float literal (see issue #31407)\");\n-            })\n-        };\n-\n-        let trunc = |n| {\n-            let param_ty = self.param_env.and(self.tcx.lift_to_global(&ty).unwrap());\n-            let width = self.tcx.layout_of(param_ty).unwrap().size;\n-            trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n-            let shift = 128 - width.bits();\n-            let result = (n << shift) >> shift;\n-            trace!(\"trunc result: {}\", result);\n-            ConstValue::Scalar(Scalar::Bits {\n-                bits: result,\n-                size: width.bytes() as u8,\n-            })\n-        };\n-\n-        use rustc::mir::interpret::*;\n-        let lit = match *lit {\n-            LitKind::Str(ref s, _) => {\n-                let s = s.as_str();\n-                let id = self.tcx.allocate_bytes(s.as_bytes());\n-                ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &self.tcx)\n-            },\n-            LitKind::ByteStr(ref data) => {\n-                let id = self.tcx.allocate_bytes(data);\n-                ConstValue::Scalar(Scalar::Ptr(id.into()))\n+                self.tcx.sess.span_err(sp, \"could not evaluate float literal (see issue #31407)\");\n+                // create a dummy value and continue compiling\n+                Const::from_bits(self.tcx, 0, self.param_env.and(ty))\n             },\n-            LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bits {\n-                bits: n as u128,\n-                size: 1,\n-            }),\n-            LitKind::Int(n, _) if neg => {\n-                let n = n as i128;\n-                let n = n.overflowing_neg().0;\n-                trunc(n as u128)\n-            },\n-            LitKind::Int(n, _) => trunc(n),\n-            LitKind::Float(n, fty) => {\n-                parse_float(n, fty)\n-            }\n-            LitKind::FloatUnsuffixed(n) => {\n-                let fty = match ty.sty {\n-                    ty::Float(fty) => fty,\n-                    _ => bug!()\n-                };\n-                parse_float(n, fty)\n+            Err(LitToConstError::Reported) => {\n+                // create a dummy value and continue compiling\n+                Const::from_bits(self.tcx, 0, self.param_env.and(ty))\n             }\n-            LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n-            LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n-        };\n-        ty::Const::from_const_value(self.tcx, lit, ty)\n+        }\n     }\n \n     pub fn pattern_from_hir(&mut self, p: &hir::Pat) -> Pattern<'tcx> {"}, {"sha": "e604b118eacf1f8f445acd5553806bf1ef9dc8e8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -26,6 +26,7 @@ use syntax_pos::Span;\n use self::cx::Cx;\n \n pub mod cx;\n+mod constant;\n \n pub mod pattern;\n pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};"}, {"sha": "a6bd36e582fcd843c69466e3315a8ae2ec8ca24d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = create_e0004(self.tcx.sess, scrut.span,\n-                                               format!(\"non-exhaustive patterns: type {} \\\n+                                               format!(\"non-exhaustive patterns: type `{}` \\\n                                                         is non-empty\",\n                                                        pat_ty));\n                     span_help!(&mut err, scrut.span,"}, {"sha": "61d8297fec90e5f59202a761c5be89df8603f503", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 130, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -19,6 +19,7 @@ pub(crate) use self::check_match::check_match;\n use const_eval::{const_field, const_variant_index};\n \n use hair::util::UserAnnotatedTyHelpers;\n+use hair::constant::*;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{ProjectionElem, UserTypeAnnotation, UserTypeProjection, UserTypeProjections};\n@@ -37,7 +38,6 @@ use std::fmt;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax_pos::symbol::Symbol;\n \n #[derive(Clone, Debug)]\n pub enum PatternError {\n@@ -891,12 +891,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         *self.const_to_pat(instance, val, expr.hir_id, lit.span).kind\n                     },\n-                    Err(e) => {\n-                        if e == LitToConstError::UnparseableFloat {\n-                            self.errors.push(PatternError::FloatBug);\n-                        }\n+                    Err(LitToConstError::UnparseableFloat) => {\n+                        self.errors.push(PatternError::FloatBug);\n                         PatternKind::Wild\n                     },\n+                    Err(LitToConstError::Reported) => PatternKind::Wild,\n                 }\n             },\n             hir::ExprKind::Path(ref qpath) => *self.lower_path(qpath, expr.hir_id, expr.span).kind,\n@@ -914,12 +913,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         *self.const_to_pat(instance, val, expr.hir_id, lit.span).kind\n                     },\n-                    Err(e) => {\n-                        if e == LitToConstError::UnparseableFloat {\n-                            self.errors.push(PatternError::FloatBug);\n-                        }\n+                    Err(LitToConstError::UnparseableFloat) => {\n+                        self.errors.push(PatternError::FloatBug);\n                         PatternKind::Wild\n                     },\n+                    Err(LitToConstError::Reported) => PatternKind::Wild,\n                 }\n             }\n             _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),\n@@ -1294,124 +1292,3 @@ pub fn compare_const_vals<'a, 'tcx>(\n \n     fallback()\n }\n-\n-#[derive(PartialEq)]\n-enum LitToConstError {\n-    UnparseableFloat,\n-    Propagated,\n-}\n-\n-// FIXME: Combine with rustc_mir::hair::cx::const_eval_literal\n-fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n-                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          ty: Ty<'tcx>,\n-                          neg: bool)\n-                          -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n-    use syntax::ast::*;\n-\n-    use rustc::mir::interpret::*;\n-    let lit = match *lit {\n-        LitKind::Str(ref s, _) => {\n-            let s = s.as_str();\n-            let id = tcx.allocate_bytes(s.as_bytes());\n-            ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n-        },\n-        LitKind::ByteStr(ref data) => {\n-            let id = tcx.allocate_bytes(data);\n-            ConstValue::Scalar(Scalar::Ptr(id.into()))\n-        },\n-        LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bits {\n-            bits: n as u128,\n-            size: 1,\n-        }),\n-        LitKind::Int(n, _) => {\n-            enum Int {\n-                Signed(IntTy),\n-                Unsigned(UintTy),\n-            }\n-            let ity = match ty.sty {\n-                ty::Int(IntTy::Isize) => Int::Signed(tcx.sess.target.isize_ty),\n-                ty::Int(other) => Int::Signed(other),\n-                ty::Uint(UintTy::Usize) => Int::Unsigned(tcx.sess.target.usize_ty),\n-                ty::Uint(other) => Int::Unsigned(other),\n-                ty::Error => { // Avoid ICE (#51963)\n-                    return Err(LitToConstError::Propagated);\n-                }\n-                _ => bug!(\"literal integer type with bad type ({:?})\", ty.sty),\n-            };\n-            // This converts from LitKind::Int (which is sign extended) to\n-            // Scalar::Bytes (which is zero extended)\n-            let n = match ity {\n-                // FIXME(oli-obk): are these casts correct?\n-                Int::Signed(IntTy::I8) if neg =>\n-                    (n as i8).overflowing_neg().0 as u8 as u128,\n-                Int::Signed(IntTy::I16) if neg =>\n-                    (n as i16).overflowing_neg().0 as u16 as u128,\n-                Int::Signed(IntTy::I32) if neg =>\n-                    (n as i32).overflowing_neg().0 as u32 as u128,\n-                Int::Signed(IntTy::I64) if neg =>\n-                    (n as i64).overflowing_neg().0 as u64 as u128,\n-                Int::Signed(IntTy::I128) if neg =>\n-                    (n as i128).overflowing_neg().0 as u128,\n-                Int::Signed(IntTy::I8) | Int::Unsigned(UintTy::U8) => n as u8 as u128,\n-                Int::Signed(IntTy::I16) | Int::Unsigned(UintTy::U16) => n as u16 as u128,\n-                Int::Signed(IntTy::I32) | Int::Unsigned(UintTy::U32) => n as u32 as u128,\n-                Int::Signed(IntTy::I64) | Int::Unsigned(UintTy::U64) => n as u64 as u128,\n-                Int::Signed(IntTy::I128)| Int::Unsigned(UintTy::U128) => n,\n-                _ => bug!(),\n-            };\n-            let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size.bytes() as u8;\n-            ConstValue::Scalar(Scalar::Bits {\n-                bits: n,\n-                size,\n-            })\n-        },\n-        LitKind::Float(n, fty) => {\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n-        }\n-        LitKind::FloatUnsuffixed(n) => {\n-            let fty = match ty.sty {\n-                ty::Float(fty) => fty,\n-                _ => bug!()\n-            };\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n-        }\n-        LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n-        LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n-    };\n-    Ok(ty::Const::from_const_value(tcx, lit, ty))\n-}\n-\n-pub fn parse_float<'tcx>(\n-    num: Symbol,\n-    fty: ast::FloatTy,\n-    neg: bool,\n-) -> Result<ConstValue<'tcx>, ()> {\n-    let num = num.as_str();\n-    use rustc_apfloat::ieee::{Single, Double};\n-    use rustc_apfloat::Float;\n-    let (bits, size) = match fty {\n-        ast::FloatTy::F32 => {\n-            num.parse::<f32>().map_err(|_| ())?;\n-            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            });\n-            if neg {\n-                f = -f;\n-            }\n-            (f.to_bits(), 4)\n-        }\n-        ast::FloatTy::F64 => {\n-            num.parse::<f64>().map_err(|_| ())?;\n-            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            });\n-            if neg {\n-                f = -f;\n-            }\n-            (f.to_bits(), 8)\n-        }\n-    };\n-\n-    Ok(ConstValue::Scalar(Scalar::Bits { bits, size }))\n-}"}, {"sha": "09fe7b14c7973896c0c274a0d8c0b6398ab6b05f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if !self.tcx.sess.features_untracked().const_let {\n+                    if !self.tcx.features().const_let {\n                         // Check for unused values. This usually means\n                         // there are extra statements in the AST.\n                         for temp in mir.temps_iter() {\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.tcx.sess.features_untracked().const_let => {\n+            LocalKind::Var if !self.tcx.features().const_let => {\n                 if self.mode != Mode::Fn {\n                     emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n                                     self.span, GateIssue::Language,\n@@ -558,7 +558,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 Mode::Fn => {},\n                                 _ => {\n                                     if let ty::RawPtr(_) = base_ty.sty {\n-                                        if !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                                        if !this.tcx.features().const_raw_ptr_deref {\n                                             emit_feature_err(\n                                                 &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n                                                 this.span, GateIssue::Language,\n@@ -581,7 +581,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                     match this.mode {\n                                         Mode::Fn => this.not_const(),\n                                         Mode::ConstFn => {\n-                                            if !this.tcx.sess.features_untracked().const_fn_union {\n+                                            if !this.tcx.features().const_fn_union {\n                                                 emit_feature_err(\n                                                     &this.tcx.sess.parse_sess, \"const_fn_union\",\n                                                     this.span, GateIssue::Language,\n@@ -807,7 +807,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         if let Mode::Fn = self.mode {\n                             // in normal functions, mark such casts as not promotable\n                             self.add(Qualif::NOT_CONST);\n-                        } else if !self.tcx.sess.features_untracked().const_raw_ptr_to_usize_cast {\n+                        } else if !self.tcx.features().const_raw_ptr_to_usize_cast {\n                             // in const fn and constants require the feature gate\n                             // FIXME: make it unsafe inside const fn and constants\n                             emit_feature_err(\n@@ -834,7 +834,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if let Mode::Fn = self.mode {\n                         // raw pointer operations are not allowed inside promoteds\n                         self.add(Qualif::NOT_CONST);\n-                    } else if !self.tcx.sess.features_untracked().const_compare_raw_pointers {\n+                    } else if !self.tcx.features().const_compare_raw_pointers {\n                         // require the feature gate inside constants and const fn\n                         // FIXME: make it unsafe to use these operations\n                         emit_feature_err(\n@@ -933,7 +933,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 if self.mode != Mode::Fn {\n                                     is_const_fn = true;\n                                     // const eval transmute calls only with the feature gate\n-                                    if !self.tcx.sess.features_untracked().const_transmute {\n+                                    if !self.tcx.features().const_transmute {\n                                         emit_feature_err(\n                                             &self.tcx.sess.parse_sess, \"const_transmute\",\n                                             self.span, GateIssue::Language,\n@@ -971,7 +971,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 // FIXME: cannot allow this inside `allow_internal_unstable` because\n                                 // that would make `panic!` insta stable in constants, since the\n                                 // macro is marked with the attr\n-                                if self.tcx.sess.features_untracked().const_panic {\n+                                if self.tcx.features().const_panic {\n                                     is_const_fn = true;\n                                 } else {\n                                     // don't allow panics in constants without the feature gate\n@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n             if self.mir.local_kind(index) == LocalKind::Var &&\n                self.const_fn_arg_vars.insert(index) &&\n-               !self.tcx.sess.features_untracked().const_let {\n+               !self.tcx.features().const_let {\n \n                 // Direct use of an argument is permitted.\n                 match *rvalue {"}, {"sha": "c1d4643c2403ea633c4d439a79c299684cb7838d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3950,7 +3950,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         let first_name = match path.get(0) {\n             // In the 2018 edition this lint is a hard error, so nothing to do\n-            Some(seg) if seg.ident.span.rust_2015() => seg.ident.name,\n+            Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,\n             _ => return,\n         };\n "}, {"sha": "a22000ea9d280479323472d01dadb8f3aac7e68b", "filename": "src/librustc_target/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_target%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_target%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,4 +3,4 @@ specific to different compilation targets and so forth.\n \n For more information about how rustc works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/"}, {"sha": "fdcbd935524db8348de791d7e1d4ae124f809dbf", "filename": "src/librustc_typeck/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,5 +1,5 @@\n For high-level intro to how type checking works in rustc, see the\n [type checking] chapter of the [rustc guide].\n \n-[type checking]: https://rust-lang-nursery.github.io/rustc-guide/type-checking.html\n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/\n+[type checking]: https://rust-lang.github.io/rustc-guide/type-checking.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/"}, {"sha": "2cd2bb5064877a2c9502e351bad54216a0b2ac36", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -59,15 +59,15 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n         if self.steps.len() >= *tcx.sess.recursion_limit.get() {\n             // We've reached the recursion limit, error gracefully.\n             let suggested_limit = *tcx.sess.recursion_limit.get() * 2;\n-            let msg = format!(\"reached the recursion limit while auto-dereferencing {:?}\",\n+            let msg = format!(\"reached the recursion limit while auto-dereferencing `{:?}`\",\n                               self.cur_ty);\n             let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg);\n             let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 struct_span_err!(tcx.sess,\n                                  self.span,\n                                  E0055,\n-                                 \"reached the recursion limit while auto-dereferencing {:?}\",\n+                                 \"reached the recursion limit while auto-dereferencing `{:?}`\",\n                                  self.cur_ty)\n                     .span_label(self.span, \"deref recursion limit reached\")\n                     .help(&format!("}, {"sha": "37f4ae56779b2fb115089fd57ef29e0089aa6526", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -10,7 +10,7 @@\n \n //! Method lookup: the secret sauce of Rust. See the [rustc guide] chapter.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/method-lookup.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/method-lookup.html\n \n use check::FnCtxt;\n use hir::def::Def;"}, {"sha": "084951f4a2c168bf0b0af6d85cdd5da5fbf3a1cc", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -538,7 +538,7 @@ fn main() {\n     let foo = Foo;\n     let ref_foo = &&Foo;\n \n-    // error, reached the recursion limit while auto-dereferencing &&Foo\n+    // error, reached the recursion limit while auto-dereferencing `&&Foo`\n     ref_foo.foo();\n }\n ```"}, {"sha": "e3c82d50a8d9b0fdb616b8051fe0b5a9e6c6306b", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -11,7 +11,7 @@\n //! Module for inferring the variance of type and lifetime parameters. See the [rustc guide]\n //! chapter for more info.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/variance.html\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/variance.html\n \n use arena;\n use rustc::hir;"}, {"sha": "3692221a3fc3fe324b37f748d8abc6f16fa65fea", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -89,8 +89,8 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n \n     // See the following for a discussion on dep-graph management.\n     //\n-    // - https://rust-lang-nursery.github.io/rustc-guide/query.html\n-    // - https://rust-lang-nursery.github.io/rustc-guide/variance.html\n+    // - https://rust-lang.github.io/rustc-guide/query.html\n+    // - https://rust-lang.github.io/rustc-guide/variance.html\n     tcx.hir.krate().visit_all_item_likes(&mut terms_cx);\n \n     terms_cx"}, {"sha": "e4f7bc30e3fcfc6b3ed972b6323888189a7424e0", "filename": "src/librustdoc/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,3 +1,3 @@\n For more information about how `librustdoc` works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/rustdoc.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/rustdoc.html"}, {"sha": "a5b4a86ad8d184b0a2c5dc6d4c2ffb59502f43d4", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -121,7 +121,7 @@ ol, ul {\n \tpadding-left: 25px;\n }\n ul ul, ol ul, ul ol, ol ol {\n-\tmargin-bottom: 0;\n+\tmargin-bottom: .6em;\n }\n \n p {"}, {"sha": "f1f3742996bda21d70b42b0287bd7d7f7743ac1b", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -112,12 +112,12 @@\n //! ## On Unix\n //!\n //! On Unix, [`OsStr`] implements the\n-//! `std::os::unix:ffi::`[`OsStrExt`][unix.OsStrExt] trait, which\n+//! `std::os::unix::ffi::`[`OsStrExt`][unix.OsStrExt] trait, which\n //! augments it with two methods, [`from_bytes`] and [`as_bytes`].\n //! These do inexpensive conversions from and to UTF-8 byte slices.\n //!\n //! Additionally, on Unix [`OsString`] implements the\n-//! `std::os::unix:ffi::`[`OsStringExt`][unix.OsStringExt] trait,\n+//! `std::os::unix::ffi::`[`OsStringExt`][unix.OsStringExt] trait,\n //! which provides [`from_vec`] and [`into_vec`] methods that consume\n //! their arguments, and take or produce vectors of [`u8`].\n //!"}, {"sha": "d5e6cab948b8fa28adc5d4b59ece3da03a41b783", "filename": "src/libstd/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -95,10 +95,10 @@ where\n     });\n     let _reset_waker = SetOnDrop(waker_ptr);\n \n-    let mut waker_ptr = waker_ptr.expect(\n+    let waker_ptr = waker_ptr.expect(\n         \"TLS LocalWaker not set. This is a rustc bug. \\\n         Please file an issue on https://github.com/rust-lang/rust.\");\n-    unsafe { f(waker_ptr.as_mut()) }\n+    unsafe { f(waker_ptr.as_ref()) }\n }\n \n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}, {"sha": "076524e624a4781af978d112a7455243337a111b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -431,7 +431,7 @@ fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n ///     // read up to 10 bytes\n ///     f.read(&mut buffer)?;\n ///\n-///     let mut buffer = vec![0; 10];\n+///     let mut buffer = Vec::new();\n ///     // read the whole file\n ///     f.read_to_end(&mut buffer)?;\n ///"}, {"sha": "b518f524e0b0893c7cbe64a0ee6ac1758c47c400", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -191,7 +191,7 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_size(&self) -> u64;\n-    /// Returns the last access time.\n+    /// Returns the last access time of the file, in seconds since Unix Epoch.\n     ///\n     /// # Examples\n     ///\n@@ -208,7 +208,9 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime(&self) -> i64;\n-    /// Returns the last access time, nano seconds part.\n+    /// Returns the last access time of the file, in nanoseconds since [`st_atime`].\n+    ///\n+    /// [`st_atime`]: #tymethod.st_atime\n     ///\n     /// # Examples\n     ///\n@@ -225,7 +227,7 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime_nsec(&self) -> i64;\n-    /// Returns the last modification time.\n+    /// Returns the last modification time of the file, in seconds since Unix Epoch.\n     ///\n     /// # Examples\n     ///\n@@ -242,7 +244,9 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime(&self) -> i64;\n-    /// Returns the last modification time, nano seconds part.\n+    /// Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n+    ///\n+    /// [`st_mtime`]: #tymethod.st_mtime\n     ///\n     /// # Examples\n     ///\n@@ -259,7 +263,7 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime_nsec(&self) -> i64;\n-    /// Returns the last status change time.\n+    /// Returns the last status change time of the file, in seconds since Unix Epoch.\n     ///\n     /// # Examples\n     ///\n@@ -276,7 +280,9 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime(&self) -> i64;\n-    /// Returns the last status change time, nano seconds part.\n+    /// Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n+    ///\n+    /// [`st_ctime`]: #tymethod.st_ctime\n     ///\n     /// # Examples\n     ///"}, {"sha": "7e65bbdef2a9630bb5db209a9bc4f82a52dcb8c8", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -522,7 +522,7 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn size(&self) -> u64;\n-    /// Returns the time of the last access to the file.\n+    /// Returns the last access time of the file, in seconds since Unix Epoch.\n     ///\n     /// # Examples\n     ///\n@@ -539,7 +539,9 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime(&self) -> i64;\n-    /// Returns the time of the last access to the file in nanoseconds.\n+    /// Returns the last access time of the file, in nanoseconds since [`atime`].\n+    ///\n+    /// [`atime`]: #tymethod.atime\n     ///\n     /// # Examples\n     ///\n@@ -556,7 +558,7 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime_nsec(&self) -> i64;\n-    /// Returns the time of the last modification of the file.\n+    /// Returns the last modification time of the file, in seconds since Unix Epoch.\n     ///\n     /// # Examples\n     ///\n@@ -573,7 +575,9 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime(&self) -> i64;\n-    /// Returns the time of the last modification of the file in nanoseconds.\n+    /// Returns the last modification time of the file, in nanoseconds since [`mtime`].\n+    ///\n+    /// [`mtime`]: #tymethod.mtime\n     ///\n     /// # Examples\n     ///\n@@ -590,7 +594,7 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime_nsec(&self) -> i64;\n-    /// Returns the time of the last status change of the file.\n+    /// Returns the last status change time of the file, in seconds since Unix Epoch.\n     ///\n     /// # Examples\n     ///\n@@ -607,7 +611,9 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime(&self) -> i64;\n-    /// Returns the time of the last status change of the file in nanoseconds.\n+    /// Returns the last status change time of the file, in nanoseconds since [`ctime`].\n+    ///\n+    /// [`ctime`]: #tymethod.ctime\n     ///\n     /// # Examples\n     ///"}, {"sha": "3a9f3ec5c6fc10f04fcec171b45fe0a3b39369ea", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -326,7 +326,7 @@ impl Builder {\n     /// Sets the size of the stack (in bytes) for the new thread.\n     ///\n     /// The actual stack size may be greater than this value if\n-    /// the platform specifies minimal stack size.\n+    /// the platform specifies a minimal stack size.\n     ///\n     /// For more information about the stack size for threads, see\n     /// [this module-level documentation][stack-size]."}, {"sha": "daa252ef4551b38715776b9a1a71a862c17727c9", "filename": "src/libsyntax/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibsyntax%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibsyntax%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FREADME.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -5,5 +5,5 @@ lexer, macro expander, and utilities for traversing ASTs.\n For more information about how these things work in rustc, see the\n rustc guide:\n \n-- [Parsing](https://rust-lang-nursery.github.io/rustc-guide/the-parser.html)\n-- [Macro Expansion](https://rust-lang-nursery.github.io/rustc-guide/macro-expansion.html)\n+- [Parsing](https://rust-lang.github.io/rustc-guide/the-parser.html)\n+- [Macro Expansion](https://rust-lang.github.io/rustc-guide/macro-expansion.html)"}, {"sha": "c90c62c13f969bc13f94abf070fe536af2cfb77a", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -60,11 +60,11 @@ pub struct StringReader<'a> {\n     // cache a direct reference to the source text, so that we don't have to\n     // retrieve it via `self.source_file.src.as_ref().unwrap()` all the time.\n     src: Lrc<String>,\n-    /// Stack of open delimiters and their spans. Used for error message.\n     token: token::Token,\n     span: Span,\n     /// The raw source span which *does not* take `override_span` into account\n     span_src_raw: Span,\n+    /// Stack of open delimiters and their spans. Used for error message.\n     open_braces: Vec<(token::DelimToken, Span)>,\n     /// The type and spans for all braces\n     ///\n@@ -506,8 +506,7 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    /// Advance the StringReader by one character. If a newline is\n-    /// discovered, add it to the SourceFile's list of line start offsets.\n+    /// Advance the StringReader by one character.\n     crate fn bump(&mut self) {\n         let next_src_index = self.src_index(self.next_pos);\n         if next_src_index < self.end_src_index {"}, {"sha": "506199b60adb6befb662e209043785a9f3d2a65b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3952,7 +3952,7 @@ impl<'a> Parser<'a> {\n                     );\n                     err.emit();\n                 }\n-                self.bump();  // `..` || `...`:w\n+                self.bump();  // `..` || `...`\n \n                 if self.token == token::CloseDelim(token::Brace) {\n                     etc_span = Some(etc_sp);\n@@ -3972,7 +3972,7 @@ impl<'a> Parser<'a> {\n                     ate_comma = true;\n                 }\n \n-                etc_span = Some(etc_sp);\n+                etc_span = Some(etc_sp.until(self.span));\n                 if self.token == token::CloseDelim(token::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n@@ -5172,8 +5172,12 @@ impl<'a> Parser<'a> {\n     /// Parses (possibly empty) list of lifetime and type parameters, possibly including\n     /// trailing comma and erroneous trailing attributes.\n     crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n+        let mut lifetimes = Vec::new();\n         let mut params = Vec::new();\n-        let mut seen_ty_param = false;\n+        let mut seen_ty_param: Option<Span> = None;\n+        let mut last_comma_span = None;\n+        let mut bad_lifetime_pos = vec![];\n+        let mut suggestions = vec![];\n         loop {\n             let attrs = self.parse_outer_attributes()?;\n             if self.check_lifetime() {\n@@ -5184,25 +5188,42 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Vec::new()\n                 };\n-                params.push(ast::GenericParam {\n+                lifetimes.push(ast::GenericParam {\n                     ident: lifetime.ident,\n                     id: lifetime.id,\n                     attrs: attrs.into(),\n                     bounds,\n                     kind: ast::GenericParamKind::Lifetime,\n                 });\n-                if seen_ty_param {\n-                    self.span_err(self.prev_span,\n-                        \"lifetime parameters must be declared prior to type parameters\");\n+                if let Some(sp) = seen_ty_param {\n+                    let param_span = self.prev_span;\n+                    let ate_comma = self.eat(&token::Comma);\n+                    let remove_sp = if ate_comma {\n+                        param_span.until(self.span)\n+                    } else {\n+                        last_comma_span.unwrap_or(param_span).to(param_span)\n+                    };\n+                    bad_lifetime_pos.push(param_span);\n+\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(param_span) {\n+                        suggestions.push((remove_sp, String::new()));\n+                        suggestions.push((sp.shrink_to_lo(), format!(\"{}, \", snippet)));\n+                    }\n+                    if ate_comma {\n+                        last_comma_span = Some(self.prev_span);\n+                        continue\n+                    }\n                 }\n             } else if self.check_ident() {\n                 // Parse type parameter.\n                 params.push(self.parse_ty_param(attrs)?);\n-                seen_ty_param = true;\n+                if seen_ty_param.is_none() {\n+                    seen_ty_param = Some(self.prev_span);\n+                }\n             } else {\n                 // Check for trailing attributes and stop parsing.\n                 if !attrs.is_empty() {\n-                    let param_kind = if seen_ty_param { \"type\" } else { \"lifetime\" };\n+                    let param_kind = if seen_ty_param.is_some() { \"type\" } else { \"lifetime\" };\n                     self.span_err(attrs[0].span,\n                         &format!(\"trailing attribute after {} parameters\", param_kind));\n                 }\n@@ -5212,8 +5233,24 @@ impl<'a> Parser<'a> {\n             if !self.eat(&token::Comma) {\n                 break\n             }\n+            last_comma_span = Some(self.prev_span);\n+        }\n+        if !bad_lifetime_pos.is_empty() {\n+            let mut err = self.struct_span_err(\n+                bad_lifetime_pos,\n+                \"lifetime parameters must be declared prior to type parameters\",\n+            );\n+            if !suggestions.is_empty() {\n+                err.multipart_suggestion_with_applicability(\n+                    \"move the lifetime parameter prior to the first type parameter\",\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n         }\n-        Ok(params)\n+        lifetimes.extend(params);  // ensure the correct order of lifetimes and type params\n+        Ok(lifetimes)\n     }\n \n     /// Parse a set of optional generic type parameter declarations. Where"}, {"sha": "c4ca478134399a3773ebc649989e2db3e48dd1cb", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n # Compiler Test Documentation\n \n Documentation the compiler testing framework has moved to\n-[the rustc guide](https://rust-lang-nursery.github.io/rustc-guide/tests/intro.html).\n+[the rustc guide](https://rust-lang.github.io/rustc-guide/tests/intro.html)."}, {"sha": "7e7f21dd69c9261059affe69b915008efdf1d5ba", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing I\n+error[E0055]: reached the recursion limit while auto-dereferencing `I`\n   --> $DIR/recursion_limit_deref.rs:60:22\n    |\n LL |     let x: &Bottom = &t; //~ ERROR mismatched types"}, {"sha": "2d46196ddda552cab8ad6cde36e286d832b9464e", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empty\n+error[E0004]: non-exhaustive patterns: type `std::option::Option<i32>` is non-empty\n   --> $DIR/E0004-2.rs:14:11\n    |\n LL |     match x { } //~ ERROR E0004"}, {"sha": "dddbd92765a5d0dda9f5eb32a4a167976546404e", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/E0055.rs:21:13\n    |\n LL |     ref_foo.foo();"}, {"sha": "ef68adecd1a5f21eba82613d40b75a21936b6813", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -7,15 +7,15 @@ LL |         x = box x;\n    |             cyclic type of infinite size\n    |             help: try using a conversion method: `box x.to_string()`\n \n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:35:5\n    |\n LL |     Foo.foo;\n    |     ^^^^^^^ deref recursion limit reached\n    |\n    = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n \n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:35:9\n    |\n LL |     Foo.foo;\n@@ -29,7 +29,7 @@ error[E0609]: no field `foo` on type `Foo`\n LL |     Foo.foo;\n    |         ^^^ unknown field\n \n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:36:9\n    |\n LL |     Foo.bar();"}, {"sha": "f0782bd973805a8d43b6b6119860c0187ed4a276", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type () is non-empty\n+error[E0004]: non-exhaustive patterns: type `()` is non-empty\n   --> $DIR/issue-3096-1.rs:12:11\n    |\n LL |     match () { } //~ ERROR non-exhaustive"}, {"sha": "e0fa641ff39e7fd7157aba0aa149c60889dd45fc", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type *const bottom is non-empty\n+error[E0004]: non-exhaustive patterns: type `*const bottom` is non-empty\n   --> $DIR/issue-3096-2.rs:15:11\n    |\n LL |     match x { } //~ ERROR non-exhaustive patterns"}, {"sha": "1c785949547e5506a9b9c82ce959041a85611dfe", "filename": "src/test/ui/issues/issue-38940.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-38940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-38940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -42,5 +42,5 @@ fn main() {\n     let t = Top::new();\n     let x: &Bottom = &t;\n     //~^ ERROR mismatched types\n-    //~| ERROR reached the recursion limit while auto-dereferencing I\n+    //~| ERROR reached the recursion limit while auto-dereferencing `I`\n }"}, {"sha": "d94a7101c0a3865d685afb7db8d5b5da38d457ec", "filename": "src/test/ui/issues/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -1,4 +1,4 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing I\n+error[E0055]: reached the recursion limit while auto-dereferencing `I`\n   --> $DIR/issue-38940.rs:43:22\n    |\n LL |     let x: &Bottom = &t;"}, {"sha": "644df1f56b426a4507ef64e7f221cc02d19869ac", "filename": "src/test/ui/issues/issue-49257.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -8,8 +8,8 @@ LL |     let Point { .., y, } = p; //~ ERROR expected `}`, found `,`\n    |                 `..` must be at the end and cannot have a trailing comma\n help: move the `..` to the end of the field list\n    |\n-LL |     let Point {  y, .. } = p; //~ ERROR expected `}`, found `,`\n-   |                --   ^^^^\n+LL |     let Point { y, .. } = p; //~ ERROR expected `}`, found `,`\n+   |                --  ^^^^\n \n error: expected `}`, found `,`\n   --> $DIR/issue-49257.rs:21:19\n@@ -21,8 +21,8 @@ LL |     let Point { .., y } = p; //~ ERROR expected `}`, found `,`\n    |                 `..` must be at the end and cannot have a trailing comma\n help: move the `..` to the end of the field list\n    |\n-LL |     let Point {  y , .. } = p; //~ ERROR expected `}`, found `,`\n-   |                --  ^^^^^^\n+LL |     let Point { y , .. } = p; //~ ERROR expected `}`, found `,`\n+   |                -- ^^^^^^\n \n error: expected `}`, found `,`\n   --> $DIR/issue-49257.rs:22:19"}, {"sha": "622066a94f80a1562486882d570619102f8bfa14", "filename": "src/test/ui/parser/issue-14303-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | enum X<'a, T, 'b> {\n    |               ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | enum X<'a, 'b, T> {\n+   |            ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "630c9cb40de37aa452dbef5c90a3bdf08e891e23", "filename": "src/test/ui/parser/issue-14303-fn-def.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | fn foo<'a, T, 'b>(x: &'a T) {}\n    |               ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | fn foo<'a, 'b, T>(x: &'a T) {}\n+   |            ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "2e3181de902758c3207b98e741716ace89776c76", "filename": "src/test/ui/parser/issue-14303-impl.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | impl<'a, T, 'b> X {}\n    |             ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | impl<'a, 'b, T> X {}\n+   |          ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "c6b33120c18f046094b9501c4140c3871fd4c3cd", "filename": "src/test/ui/parser/issue-14303-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | struct X<'a, T, 'b> {\n    |                 ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct X<'a, 'b, T> {\n+   |              ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "6d00f284bbbe741b75bac61292248964a7e4d2db", "filename": "src/test/ui/parser/issue-14303-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | trait Foo<'a, T, 'b> {}\n    |                  ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | trait Foo<'a, 'b, T> {}\n+   |               ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "dc4ab2131a83420f9681454e854a99feca821872", "filename": "src/test/ui/rust-2018/auxiliary/edition-lint-paths.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fedition-lint-paths.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -9,3 +9,14 @@\n // except according to those terms.\n \n pub fn foo() {}\n+\n+#[macro_export]\n+macro_rules! macro_2015 {\n+    () => {\n+        use edition_lint_paths as other_name;\n+        use edition_lint_paths::foo as other_foo;\n+        fn check_macro_2015() {\n+            ::edition_lint_paths::foo();\n+        }\n+    }\n+}"}, {"sha": "09b31beb775859dedaecf63813c69f1d699937fd", "filename": "src/test/ui/rust-2018/edition-lint-paths-2018.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths-2018.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+// edition:2018\n+// compile-flags:--extern edition_lint_paths\n+// aux-build:edition-lint-paths.rs\n+\n+#![deny(absolute_paths_not_starting_with_crate)]\n+\n+edition_lint_paths::macro_2015!(); // OK\n+\n+fn main() {}"}, {"sha": "5051a406078aa74eb6961d01e65e84147674cacb", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -0,0 +1,21 @@\n+struct A<T, 'a> {\n+    t: &'a T,\n+}\n+\n+struct B<T, 'a, U> {\n+    t: &'a T,\n+    u: U,\n+}\n+\n+struct C<T, U, 'a> {\n+    t: &'a T,\n+    u: U,\n+}\n+\n+struct D<T, U, 'a, 'b, V, 'c> {\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n+fn main() {}"}, {"sha": "f3d6469b5125501752128afcd05a02aed2f3c7d7", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -0,0 +1,42 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:1:13\n+   |\n+LL | struct A<T, 'a> {\n+   |             ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct A<'a, T> {\n+   |          ^^^ --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:5:13\n+   |\n+LL | struct B<T, 'a, U> {\n+   |             ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct B<'a, T, U> {\n+   |          ^^^   --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:10:16\n+   |\n+LL | struct C<T, U, 'a> {\n+   |                ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct C<'a, T, U> {\n+   |          ^^^    --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:15:16\n+   |\n+LL | struct D<T, U, 'a, 'b, V, 'c> {\n+   |                ^^  ^^     ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct D<'a, 'b, 'c, T, U, V> {\n+   |          ^^^ ^^^ ^^^      ---\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f4974b8fa385402e7f7537c6a37b579729a2af56", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n LL |     let _ = match x {   //~ ERROR non-exhaustive\n    |                   ^ pattern `Err(_)` not covered\n \n-error[E0004]: non-exhaustive patterns: type &Void is non-empty\n+error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -16,7 +16,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n+error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -28,7 +28,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n+error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive"}]}