{"sha": "9bf6a5de7705e83c110179580e996dcf74a5928f", "node_id": "C_kwDOAAsO6NoAKDliZjZhNWRlNzcwNWU4M2MxMTAxNzk1ODBlOTk2ZGNmNzRhNTkyOGY", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-01-30T22:37:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-01-30T22:37:11Z"}, "message": "Hide failed command unless in verbose mode\n\nThis is particularly intended for invoking compiletest; the command line there\nis long (3,350 characters on my system) and takes up a lot of screen real estate\nfor little benefit to the majority of those running bootstrap. This moves\nprinting it to verbose mode (-v must be passed) which means that it's still\npossible to access when needed for debugging.\n\nThe main downside is that CI logs will by-default become less usable for\ndebugging (particularly) spurious failures, but it is pretty rare for us to\nreally need the information there -- it's usually fairly obvious what is being\nrun with a little investigation.", "tree": {"sha": "19a781e2c6ae297a489f878f3a4a73d5d0f7021b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a781e2c6ae297a489f878f3a4a73d5d0f7021b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bf6a5de7705e83c110179580e996dcf74a5928f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf6a5de7705e83c110179580e996dcf74a5928f", "html_url": "https://github.com/rust-lang/rust/commit/9bf6a5de7705e83c110179580e996dcf74a5928f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bf6a5de7705e83c110179580e996dcf74a5928f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08e816333281b0c0fb5a99c2c15d8084312e41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08e816333281b0c0fb5a99c2c15d8084312e41a", "html_url": "https://github.com/rust-lang/rust/commit/d08e816333281b0c0fb5a99c2c15d8084312e41a"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "e5f84d417bf0b24f558889ec45cf5b0746677f7a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bf6a5de7705e83c110179580e996dcf74a5928f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf6a5de7705e83c110179580e996dcf74a5928f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9bf6a5de7705e83c110179580e996dcf74a5928f", "patch": "@@ -851,7 +851,7 @@ impl Build {\n             return;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        run(cmd)\n+        run(cmd, self.is_verbose())\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n@@ -871,7 +871,7 @@ impl Build {\n             return true;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run(cmd)\n+        try_run(cmd, self.is_verbose())\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails."}, {"sha": "24aded547315e9828dd8a0a8e92b5457aaf9914e", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bf6a5de7705e83c110179580e996dcf74a5928f/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf6a5de7705e83c110179580e996dcf74a5928f/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=9bf6a5de7705e83c110179580e996dcf74a5928f", "patch": "@@ -55,18 +55,18 @@ pub fn restore_library_path() {\n     }\n }\n \n-pub fn run(cmd: &mut Command) {\n-    if !try_run(cmd) {\n+pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n+    if !try_run(cmd, print_cmd_on_fail) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run(cmd: &mut Command) -> bool {\n+pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n     };\n-    if !status.success() {\n+    if !status.success() && print_cmd_on_fail {\n         println!(\n             \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n              expected success, got: {}\\n\\n\","}]}