{"sha": "4bbe532737630eb2a5e07b73f01875c936e2ec57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYmU1MzI3Mzc2MzBlYjJhNWUwN2I3M2YwMTg3NWM5MzZlMmVjNTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-07T09:55:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-16T10:22:32Z"}, "message": "Permit coinductive match only for purely OIBIT backtraces.\nBetter safe than sorry.", "tree": {"sha": "80e865e7969f047df41a1bec6ad0fda39a79ec08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e865e7969f047df41a1bec6ad0fda39a79ec08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbe532737630eb2a5e07b73f01875c936e2ec57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbe532737630eb2a5e07b73f01875c936e2ec57", "html_url": "https://github.com/rust-lang/rust/commit/4bbe532737630eb2a5e07b73f01875c936e2ec57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbe532737630eb2a5e07b73f01875c936e2ec57/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3db82d1a4eb89b9f0aa25df8b66f5c42ab4fcd43", "url": "https://api.github.com/repos/rust-lang/rust/commits/3db82d1a4eb89b9f0aa25df8b66f5c42ab4fcd43", "html_url": "https://github.com/rust-lang/rust/commit/3db82d1a4eb89b9f0aa25df8b66f5c42ab4fcd43"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "0e1c9c3843bf763444f9a4e3241eb1367681378a", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe532737630eb2a5e07b73f01875c936e2ec57/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe532737630eb2a5e07b73f01875c936e2ec57/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=4bbe532737630eb2a5e07b73f01875c936e2ec57", "patch": "@@ -359,17 +359,8 @@ fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n     let obligation = &pending_obligation.obligation;\n     match obligation.predicate {\n         ty::Predicate::Trait(ref data) => {\n-            // For defaulted traits, we use a co-inductive strategy to\n-            // solve, so that recursion is ok.\n-            if selcx.tcx().trait_has_default_impl(data.def_id()) {\n-                debug!(\"process_predicate: trait has default impl\");\n-                for bt_obligation in backtrace {\n-                    debug!(\"process_predicate: bt_obligation = {:?}\", bt_obligation.obligation);\n-                    if bt_obligation.obligation.predicate == obligation.predicate {\n-                        debug!(\"process_predicate: found a match!\");\n-                        return Ok(Some(vec![]));\n-                    }\n-                }\n+            if coinductive_match(selcx, obligation, data, &backtrace) {\n+                return Ok(Some(vec![]));\n             }\n \n             let trait_obligation = obligation.with(data.clone());\n@@ -483,6 +474,42 @@ fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n     }\n }\n \n+/// For defaulted traits, we use a co-inductive strategy to solve, so\n+/// that recursion is ok. This routine returns true if the top of the\n+/// stack (`top_obligation` and `top_data`):\n+/// - is a defaulted trait, and\n+/// - it also appears in the backtrace at some position `X`; and,\n+/// - all the predicates at positions `X..` between `X` an the top are\n+///   also defaulted traits.\n+fn coinductive_match<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n+                              top_obligation: &PredicateObligation<'tcx>,\n+                              top_data: &ty::PolyTraitPredicate<'tcx>,\n+                              backtrace: &Backtrace<PendingPredicateObligation<'tcx>>)\n+                              -> bool\n+{\n+    if selcx.tcx().trait_has_default_impl(top_data.def_id()) {\n+        for bt_obligation in backtrace.clone() {\n+            // *Everything* in the backtrace must be a defaulted trait.\n+            match bt_obligation.obligation.predicate {\n+                ty::Predicate::Trait(ref data) => {\n+                    if !selcx.tcx().trait_has_default_impl(data.def_id()) {\n+                        break;\n+                    }\n+                }\n+                _ => { break; }\n+            }\n+\n+            // And we must find a recursive match.\n+            if bt_obligation.obligation.predicate == top_obligation.predicate {\n+                debug!(\"process_predicate: found a match in the backtrace\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,\n                                     r_b: ty::Region,\n                                     cause: ObligationCause<'tcx>,"}, {"sha": "d23b42790d762f18a9bd3bbe7a831713eb37a8da", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bbe532737630eb2a5e07b73f01875c936e2ec57/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbe532737630eb2a5e07b73f01875c936e2ec57/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=4bbe532737630eb2a5e07b73f01875c936e2ec57", "patch": "@@ -379,6 +379,7 @@ impl<O> Node<O> {\n     }\n }\n \n+#[derive(Clone)]\n pub struct Backtrace<'b, O: 'b> {\n     nodes: &'b [Node<O>],\n     pointer: Option<NodeIndex>,"}]}