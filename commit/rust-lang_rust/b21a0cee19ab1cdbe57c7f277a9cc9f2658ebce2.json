{"sha": "b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWEwY2VlMTlhYjFjZGJlNTdjN2YyNzdhOWNjOWYyNjU4ZWJjZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:17:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:17:34Z"}, "message": "rollup merge of #20704: alexcrichton/hopefully-make-tests-less-spurious\n\nThese tests have all been failing spuroiusly on Windows from time to time, and\none suspicion is that the shilc thread outliving the main thread somehow causes\nthe problem. Switch all the tests over to using Thread::scoped instead of\nThread::spawn to see if it helps the issue.\n\ncc #19120", "tree": {"sha": "9ae0e662fc80c622888ad76275664fb109d553dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae0e662fc80c622888ad76275664fb109d553dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "html_url": "https://github.com/rust-lang/rust/commit/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188bfbfd5d3943ee91b33bf0ebff98854831dcaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/188bfbfd5d3943ee91b33bf0ebff98854831dcaa", "html_url": "https://github.com/rust-lang/rust/commit/188bfbfd5d3943ee91b33bf0ebff98854831dcaa"}, {"sha": "99b39cc98ea03994f376b8389e4366b688334e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b39cc98ea03994f376b8389e4366b688334e65", "html_url": "https://github.com/rust-lang/rust/commit/99b39cc98ea03994f376b8389e4366b688334e65"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "6addfc59a3dacfbab81d2bfba2241ef713d862b2", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -66,15 +66,15 @@ pub fn main() {\n     assert_eq!(receiver.recv().ok(), None);\n \n     let (sender, receiver) = channel();\n-    let _t = Thread::spawn(move|| {\n+    let _t = Thread::scoped(move|| {\n         let v = Foo::FailingVariant { on_drop: SendOnDrop { sender: sender } };\n     });\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n     assert_eq!(receiver.recv().ok(), None);\n \n     let (sender, receiver) = channel();\n     let _t = {\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             let mut v = Foo::NestedVariant(box 42u, SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());"}, {"sha": "c3e04177cce7d3b6d5aca70326ef03452bf05a89", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -42,7 +42,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n \n pub fn main() {\n     range(0u, 100).map(|_| {\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             assert_eq!(count(5), 16);\n         })\n     }).collect::<Vec<_>>();"}, {"sha": "f5e91b9de67a938637ae777427ce5b0a6b5c8029", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -39,7 +39,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n \n pub fn main() {\n     range(0, 10u).map(|i| {\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             let result = count(5);\n             println!(\"result = {}\", result);\n             assert_eq!(result, 16);"}, {"sha": "73355d15a27594634eee41af89e1552f3623ff9d", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -15,7 +15,7 @@ use std::time::Duration;\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _t = Thread::spawn(move||{\n+    let _t = Thread::scoped(move||{\n         let mut timer = Timer::new().unwrap();\n         timer.sleep(Duration::milliseconds(10));\n         tx.send(()).unwrap();"}, {"sha": "cad71732034833e01909a7180986c9850f485ba8", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -34,11 +34,11 @@ fn test() {\n \n     let (srv_tx, srv_rx) = channel();\n     let (cli_tx, cli_rx) = channel();\n-    for _ in range(0, N) {\n+    let _t = range(0, N).map(|_| {\n         let a = a.clone();\n         let cnt = cnt.clone();\n         let srv_tx = srv_tx.clone();\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             let mut a = a;\n             loop {\n                 match a.accept() {\n@@ -52,18 +52,18 @@ fn test() {\n                 }\n             }\n             srv_tx.send(());\n-        });\n-    }\n+        })\n+    }).collect::<Vec<_>>();\n \n-    for _ in range(0, N) {\n+    let _t = range(0, N).map(|_| {\n         let cli_tx = cli_tx.clone();\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             for _ in range(0, M) {\n                 let _s = TcpStream::connect(addr).unwrap();\n             }\n             cli_tx.send(());\n-        });\n-    }\n+        })\n+    }).collect::<Vec<_>>();\n     drop((cli_tx, srv_tx));\n \n     // wait for senders"}, {"sha": "abc2938df00bb8b19bf3d35b9b57a8f53d3504ec", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -13,7 +13,7 @@ use std::thread::Thread;\n pub fn main() {\n     let mut i = 10;\n     while i > 0 {\n-        Thread::spawn({let i = i; move|| child(i)});\n+        Thread::scoped({let i = i; move|| child(i)});\n         i = i - 1;\n     }\n     println!(\"main thread exiting\");"}, {"sha": "ba75c7629b514b24d23cdb3573d45320fd030242", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -19,13 +19,13 @@ pub fn main() {\n     let (tx, rx) = channel();\n     let n = 100u;\n     let mut expected = 0u;\n-    for i in range(0u, n) {\n+    let _t = range(0u, n).map(|i| {\n+        expected += i;\n         let tx = tx.clone();\n-        Thread::spawn(move|| {\n+        Thread::scoped(move|| {\n             child(&tx, i)\n-        });\n-        expected += i;\n-    }\n+        })\n+    }).collect::<Vec<_>>();\n \n     let mut actual = 0u;\n     for _ in range(0u, n) {"}, {"sha": "159bac101830a4c665c565d0971c97bdf9b443d6", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=b21a0cee19ab1cdbe57c7f277a9cc9f2658ebce2", "patch": "@@ -37,7 +37,7 @@ fn f(tx: Sender<bool>) {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _t = Thread::spawn(move|| f(tx.clone()));\n+    let _t = Thread::scoped(move|| f(tx.clone()));\n     println!(\"hiiiiiiiii\");\n     assert!(rx.recv().unwrap());\n }"}]}