{"sha": "50df6b9dc5144df09ef6b8519afd3657abdab03f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZGY2YjlkYzUxNDRkZjA5ZWY2Yjg1MTlhZmQzNjU3YWJkYWIwM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T03:06:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T03:06:52Z"}, "message": "Auto merge of #31319 - alexcrichton:msvc-backtraces, r=michaelwoerister\n\nThis mirrors the behavior of `clang-cl.exe` by adding a `CodeView` global\nvariable when emitting debug information. This should in turn help stack traces\nthat are generated when code is compiled with debuginfo enabled.\n\nCloses #28133", "tree": {"sha": "233265d7eae39934347e6b1f11bbc73db2674f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233265d7eae39934347e6b1f11bbc73db2674f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50df6b9dc5144df09ef6b8519afd3657abdab03f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50df6b9dc5144df09ef6b8519afd3657abdab03f", "html_url": "https://github.com/rust-lang/rust/commit/50df6b9dc5144df09ef6b8519afd3657abdab03f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50df6b9dc5144df09ef6b8519afd3657abdab03f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9922419cf84a12b2b9c69f8b261cdd7c287c1a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9922419cf84a12b2b9c69f8b261cdd7c287c1a5", "html_url": "https://github.com/rust-lang/rust/commit/a9922419cf84a12b2b9c69f8b261cdd7c287c1a5"}, {"sha": "8b7d0c04c412acf06d73c9b9c8623319f804b062", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7d0c04c412acf06d73c9b9c8623319f804b062", "html_url": "https://github.com/rust-lang/rust/commit/8b7d0c04c412acf06d73c9b9c8623319f804b062"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "f0b48ddd5c388856e5604b675f2df62a533da24a", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50df6b9dc5144df09ef6b8519afd3657abdab03f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50df6b9dc5144df09ef6b8519afd3657abdab03f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=50df6b9dc5144df09ef6b8519afd3657abdab03f", "patch": "@@ -200,6 +200,13 @@ pub fn finalize(cx: &CrateContext) {\n                                         2)\n         }\n \n+        // Indicate that we want CodeView debug information on MSVC\n+        if cx.sess().target.target.options.is_like_msvc {\n+            llvm::LLVMRustAddModuleFlag(cx.llmod(),\n+                                        \"CodeView\\0\".as_ptr() as *const _,\n+                                        1)\n+        }\n+\n         // Prevent bitcode readers from deleting the debug info.\n         let ptr = \"Debug Info Version\\0\".as_ptr();\n         llvm::LLVMRustAddModuleFlag(cx.llmod(), ptr as *const _,"}, {"sha": "8b2b26948824f08d89b9252cc024a2714d5e773b", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50df6b9dc5144df09ef6b8519afd3657abdab03f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50df6b9dc5144df09ef6b8519afd3657abdab03f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=50df6b9dc5144df09ef6b8519afd3657abdab03f", "patch": "@@ -14,6 +14,7 @@\n // seemingly completely unrelated change.\n // Unfortunately, LLVM has no \"disable\" option for this, so we have to set\n // \"enable\" to 0 instead.\n+\n // compile-flags:-g -Cllvm-args=-enable-tail-merge=0\n // ignore-pretty as this critically relies on line numbers\n \n@@ -27,30 +28,23 @@ macro_rules! pos {\n     () => ((file!(), line!()))\n }\n \n-#[cfg(all(unix,\n-          not(target_os = \"macos\"),\n-          not(target_os = \"ios\"),\n-          not(target_os = \"android\"),\n-          not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n macro_rules! dump_and_die {\n     ($($pos:expr),*) => ({\n         // FIXME(#18285): we cannot include the current position because\n         // the macro span takes over the last frame's file/line.\n-        dump_filelines(&[$($pos),*]);\n-        panic!();\n+        if cfg!(target_os = \"macos\") ||\n+           cfg!(target_os = \"ios\") ||\n+           cfg!(target_os = \"android\") ||\n+           cfg!(all(target_os = \"linux\", target_arch = \"arm\")) ||\n+           cfg!(all(windows, target_env = \"gnu\")) {\n+            // skip these platforms as this support isn't implemented yet.\n+        } else {\n+            dump_filelines(&[$($pos),*]);\n+            panic!();\n+        }\n     })\n }\n \n-// this does not work on Windows, Android, OSX or iOS\n-#[cfg(not(all(unix,\n-              not(target_os = \"macos\"),\n-              not(target_os = \"ios\"),\n-              not(target_os = \"android\"),\n-              not(all(target_os = \"linux\", target_arch = \"arm\")))))]\n-macro_rules! dump_and_die {\n-    ($($pos:expr),*) => ({ let _ = [$($pos),*]; })\n-}\n-\n // we can't use a function as it will alter the backtrace\n macro_rules! check {\n     ($counter:expr; $($pos:expr),*) => ({"}, {"sha": "3fb52f8c8b4dc321c8efee9e89b15c05755401de", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50df6b9dc5144df09ef6b8519afd3657abdab03f/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50df6b9dc5144df09ef6b8519afd3657abdab03f/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=50df6b9dc5144df09ef6b8519afd3657abdab03f", "patch": "@@ -10,12 +10,11 @@\n \n // no-pretty-expanded FIXME #15189\n // ignore-android FIXME #17520\n-// ignore-msvc FIXME #28133\n+// compile-flags:-g\n \n use std::env;\n use std::process::{Command, Stdio};\n use std::str;\n-use std::ops::{Drop, FnMut, FnOnce};\n \n #[inline(never)]\n fn foo() {\n@@ -52,7 +51,7 @@ fn runtest(me: &str) {\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(&out.stderr).unwrap();\n-    assert!(s.contains(\"stack backtrace\") && s.contains(\"foo::h\"),\n+    assert!(s.contains(\"stack backtrace\") && s.contains(\" - foo\"),\n             \"bad output: {}\", s);\n \n     // Make sure the stack trace is *not* printed\n@@ -62,7 +61,7 @@ fn runtest(me: &str) {\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(&out.stderr).unwrap();\n-    assert!(!s.contains(\"stack backtrace\") && !s.contains(\"foo::h\"),\n+    assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - foo\"),\n             \"bad output2: {}\", s);\n \n     // Make sure a stack trace is printed\n@@ -72,7 +71,7 @@ fn runtest(me: &str) {\n     let s = str::from_utf8(&out.stderr).unwrap();\n     // loosened the following from double::h to double:: due to\n     // spurious failures on mac, 32bit, optimized\n-    assert!(s.contains(\"stack backtrace\") && s.contains(\"double::\"),\n+    assert!(s.contains(\"stack backtrace\") && s.contains(\" - double\"),\n             \"bad output3: {}\", s);\n \n     // Make sure a stack trace isn't printed too many times\n@@ -89,8 +88,11 @@ fn runtest(me: &str) {\n             \"bad output4: {}\", s);\n }\n \n-#[cfg(not(all(windows, target_arch = \"x86\")))]\n fn main() {\n+    if cfg!(windows) && cfg!(target_arch = \"x86\") && cfg!(target_env = \"gnu\") {\n+        return\n+    }\n+\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"fail\" {\n         foo();\n@@ -100,7 +102,3 @@ fn main() {\n         runtest(&args[0]);\n     }\n }\n-\n-// See issue 28218\n-#[cfg(all(windows, target_arch = \"x86\"))]\n-fn main() {}"}]}