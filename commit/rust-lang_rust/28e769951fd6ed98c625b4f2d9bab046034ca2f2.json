{"sha": "28e769951fd6ed98c625b4f2d9bab046034ca2f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZTc2OTk1MWZkNmVkOThjNjI1YjRmMmQ5YmFiMDQ2MDM0Y2EyZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T08:22:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T08:22:57Z"}, "message": "Auto merge of #7439 - iobtl:assert_msg_panic_fp, r=flip1995\n\nFix false-positive `assert` in `panic`\n\nThis PR fixes a false-positive in `clippy::panic` when using the `assert` macro with its optional message parameter.\n\nFixes: #7433\n\nchangelog: `panic_unimplemented.rs`: added condition to exclude `assert` macro, similar to `debug_assert`\nchangelog: `panicking_macros.rs`: relevant tests to check for `assert` usage.", "tree": {"sha": "2a1200465f1f0545097998ef749ef1c873ec47e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1200465f1f0545097998ef749ef1c873ec47e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28e769951fd6ed98c625b4f2d9bab046034ca2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28e769951fd6ed98c625b4f2d9bab046034ca2f2", "html_url": "https://github.com/rust-lang/rust/commit/28e769951fd6ed98c625b4f2d9bab046034ca2f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28e769951fd6ed98c625b4f2d9bab046034ca2f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d74df19c582a10ad41ddce496528e597b06765", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d74df19c582a10ad41ddce496528e597b06765", "html_url": "https://github.com/rust-lang/rust/commit/64d74df19c582a10ad41ddce496528e597b06765"}, {"sha": "eeefbb7617c85cb1b51a4758f3d4743f01966578", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeefbb7617c85cb1b51a4758f3d4743f01966578", "html_url": "https://github.com/rust-lang/rust/commit/eeefbb7617c85cb1b51a4758f3d4743f01966578"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "dc28874c16e67febf474f13cda31f1dcb38e5711", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e769951fd6ed98c625b4f2d9bab046034ca2f2/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e769951fd6ed98c625b4f2d9bab046034ca2f2/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=28e769951fd6ed98c625b4f2d9bab046034ca2f2", "patch": "@@ -74,7 +74,9 @@ declare_lint_pass!(PanicUnimplemented => [UNIMPLEMENTED, UNREACHABLE, TODO, PANI\n \n impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if match_panic_call(cx, expr).is_some() && is_expn_of(expr.span, \"debug_assert\").is_none() {\n+        if match_panic_call(cx, expr).is_some()\n+            && (is_expn_of(expr.span, \"debug_assert\").is_none() && is_expn_of(expr.span, \"assert\").is_none())\n+        {\n             let span = get_outer_span(expr);\n             if is_expn_of(expr.span, \"unimplemented\").is_some() {\n                 span_lint("}, {"sha": "7338064646244ca7611a01d73c61203a15a0631f", "filename": "tests/ui/panicking_macros.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28e769951fd6ed98c625b4f2d9bab046034ca2f2/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e769951fd6ed98c625b4f2d9bab046034ca2f2/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=28e769951fd6ed98c625b4f2d9bab046034ca2f2", "patch": "@@ -43,6 +43,18 @@ fn core_versions() {\n     unreachable!();\n }\n \n+fn assert() {\n+    assert!(true);\n+    assert_eq!(true, true);\n+    assert_ne!(true, false);\n+}\n+\n+fn assert_msg() {\n+    assert!(true, \"this should not panic\");\n+    assert_eq!(true, true, \"this should not panic\");\n+    assert_ne!(true, false, \"this should not panic\");\n+}\n+\n fn debug_assert() {\n     debug_assert!(true);\n     debug_assert_eq!(true, true);\n@@ -61,4 +73,8 @@ fn main() {\n     unimplemented();\n     unreachable();\n     core_versions();\n+    assert();\n+    assert_msg();\n+    debug_assert();\n+    debug_assert_msg();\n }"}]}