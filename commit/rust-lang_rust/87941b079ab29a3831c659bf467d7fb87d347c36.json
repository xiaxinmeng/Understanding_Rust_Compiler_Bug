{"sha": "87941b079ab29a3831c659bf467d7fb87d347c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTQxYjA3OWFiMjlhMzgzMWM2NTliZjQ2N2Q3ZmI4N2QzNDdjMzY=", "commit": {"author": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-05-30T05:30:16Z"}, "committer": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-06-02T21:52:09Z"}, "message": "Stabilize iterator_repeat_with\n\nFixes #48169", "tree": {"sha": "84767cf949123d8ce666089901648ea84c7e9616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84767cf949123d8ce666089901648ea84c7e9616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87941b079ab29a3831c659bf467d7fb87d347c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87941b079ab29a3831c659bf467d7fb87d347c36", "html_url": "https://github.com/rust-lang/rust/commit/87941b079ab29a3831c659bf467d7fb87d347c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87941b079ab29a3831c659bf467d7fb87d347c36/comments", "author": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "html_url": "https://github.com/rust-lang/rust/commit/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7"}], "stats": {"total": 42, "additions": 8, "deletions": 34}, "files": [{"sha": "f313f0d9147ce1228dbd316382688f8509f0cac3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=87941b079ab29a3831c659bf467d7fb87d347c36", "patch": "@@ -333,7 +333,7 @@ pub use self::range::Step;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{Repeat, repeat};\n-#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+#[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub use self::sources::{RepeatWith, repeat_with};\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub use self::sources::{Empty, empty};"}, {"sha": "d500cc99fa13c2641dabc0e3bfc3d898e4fd194e", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=87941b079ab29a3831c659bf467d7fb87d347c36", "patch": "@@ -113,12 +113,12 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n ///\n /// [`repeat_with`]: fn.repeat_with.html\n #[derive(Copy, Clone, Debug)]\n-#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+#[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub struct RepeatWith<F> {\n     repeater: F\n }\n \n-#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+#[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n     type Item = A;\n \n@@ -129,13 +129,7 @@ impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n     fn size_hint(&self) -> (usize, Option<usize>) { (usize::MAX, None) }\n }\n \n-#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n-impl<A, F: FnMut() -> A> DoubleEndedIterator for RepeatWith<F> {\n-    #[inline]\n-    fn next_back(&mut self) -> Option<A> { self.next() }\n-}\n-\n-#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+#[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n impl<A, F: FnMut() -> A> FusedIterator for RepeatWith<F> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -158,19 +152,15 @@ unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n ///\n /// [`repeat`]: fn.repeat.html\n ///\n-/// An iterator produced by `repeat_with()` is a `DoubleEndedIterator`.\n-/// It is important to note that reversing `repeat_with(f)` will produce\n-/// the exact same sequence as the non-reversed iterator. In other words,\n-/// `repeat_with(f).rev().collect::<Vec<_>>()` is equivalent to\n-/// `repeat_with(f).collect::<Vec<_>>()`.\n+/// An iterator produced by `repeat_with()` is not a `DoubleEndedIterator`.\n+/// If you need `repeat_with()` to return a `DoubleEndedIterator`,\n+/// please open a GitHub issue explaining your use case.\n ///\n /// # Examples\n ///\n /// Basic usage:\n ///\n /// ```\n-/// #![feature(iterator_repeat_with)]\n-///\n /// use std::iter;\n ///\n /// // let's assume we have some value of a type that is not `Clone`\n@@ -191,8 +181,6 @@ unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n /// Using mutation and going finite:\n ///\n /// ```rust\n-/// #![feature(iterator_repeat_with)]\n-///\n /// use std::iter;\n ///\n /// // From the zeroth to the third power of two:\n@@ -209,7 +197,7 @@ unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n /// assert_eq!(None, pow2.next());\n /// ```\n #[inline]\n-#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n+#[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub fn repeat_with<A, F: FnMut() -> A>(repeater: F) -> RepeatWith<F> {\n     RepeatWith { repeater }\n }"}, {"sha": "ce86f469695e98953ec8fdbe957f29e2ec14ca8b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=87941b079ab29a3831c659bf467d7fb87d347c36", "patch": "@@ -89,7 +89,6 @@\n #![feature(fundamental)]\n #![feature(intrinsics)]\n #![feature(iterator_flatten)]\n-#![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]"}, {"sha": "9b8d7031f8e7507d7cfacbbc89deef69637a84ec", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=87941b079ab29a3831c659bf467d7fb87d347c36", "patch": "@@ -1722,18 +1722,6 @@ fn test_repeat_with() {\n     assert_eq!(repeat_with(|| NotClone(42)).size_hint(), (usize::MAX, None));\n }\n \n-#[test]\n-fn test_repeat_with_rev() {\n-    let mut curr = 1;\n-    let mut pow2 = repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n-                    .rev().take(4);\n-    assert_eq!(pow2.next(), Some(1));\n-    assert_eq!(pow2.next(), Some(2));\n-    assert_eq!(pow2.next(), Some(4));\n-    assert_eq!(pow2.next(), Some(8));\n-    assert_eq!(pow2.next(), None);\n-}\n-\n #[test]\n fn test_repeat_with_take() {\n     let mut it = repeat_with(|| 42).take(3);"}, {"sha": "b17c240f0eb630a98e3f1aa6ebbf4904b3d597d1", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87941b079ab29a3831c659bf467d7fb87d347c36/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=87941b079ab29a3831c659bf467d7fb87d347c36", "patch": "@@ -25,7 +25,6 @@\n #![feature(hashmap_internals)]\n #![feature(iterator_step_by)]\n #![feature(iterator_flatten)]\n-#![feature(iterator_repeat_with)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}]}