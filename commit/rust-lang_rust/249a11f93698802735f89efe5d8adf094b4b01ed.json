{"sha": "249a11f93698802735f89efe5d8adf094b4b01ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OWExMWY5MzY5ODgwMjczNWY4OWVmZTVkOGFkZjA5NGI0YjAxZWQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-23T19:30:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-23T19:30:56Z"}, "message": "Rollup merge of #86790 - janikrabe:retain-iter-order-doc, r=m-ou-se\n\nDocument iteration order of `retain` functions\n\nFor `HashSet` and `HashMap`, this simply copies the comment from\n`BinaryHeap::retain`.\n\nFor `BTreeSet` and `BTreeMap`, this adds an additional guarantee that\nwasn't previously documented. I think that because these data structures\nare inherently ordered and other functions guarantee ordered iteration,\nit makes sense to provide this guarantee for `retain` as well.", "tree": {"sha": "a1f6cc3b77dc8be53c4b3c6fee8d8d96119110f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f6cc3b77dc8be53c4b3c6fee8d8d96119110f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/249a11f93698802735f89efe5d8adf094b4b01ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+xjxCRBK7hj4Ov3rIwAAKg4IABI1sUiLzvzcVpw/5E+hkul7\nfToZnyLjGJ3mbBf6Kqe9VRbycliaF30Hkvv17UdMkd/L/IIG4T+GkXE0mckiZMEX\n8mRTdSfH23QzfqhambQTQOuH/2COKS8iLX7zllouQbouaig/oEUK3vVd6V/vZ3vV\n12OqpnfycBHfPlZptFCySuqTc69Fek38tGkCA7cX/CYy6Kwnil2FP74X81288fto\nA2WsPami3u0p45phf2hsiJu3aNAbevP3kCouckUzmzL4JSkuYZ5EPJFZm4/In7HO\nRVomCEF7EVn46DigAXzK1AzRkVyZWZJrZMUJjaR4qaidCsUDwCEGuEX45wrnB28=\n=wCnH\n-----END PGP SIGNATURE-----\n", "payload": "tree a1f6cc3b77dc8be53c4b3c6fee8d8d96119110f7\nparent d4532903b05b06e25511ec929823909a157cdf2c\nparent 2dd69aaafc64fe9dce74088b5371a6cfb032e01e\nauthor Yuki Okushi <jtitor@2k36.org> 1627068656 +0900\ncommitter GitHub <noreply@github.com> 1627068656 +0900\n\nRollup merge of #86790 - janikrabe:retain-iter-order-doc, r=m-ou-se\n\nDocument iteration order of `retain` functions\n\nFor `HashSet` and `HashMap`, this simply copies the comment from\n`BinaryHeap::retain`.\n\nFor `BTreeSet` and `BTreeMap`, this adds an additional guarantee that\nwasn't previously documented. I think that because these data structures\nare inherently ordered and other functions guarantee ordered iteration,\nit makes sense to provide this guarantee for `retain` as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/249a11f93698802735f89efe5d8adf094b4b01ed", "html_url": "https://github.com/rust-lang/rust/commit/249a11f93698802735f89efe5d8adf094b4b01ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/249a11f93698802735f89efe5d8adf094b4b01ed/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4532903b05b06e25511ec929823909a157cdf2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4532903b05b06e25511ec929823909a157cdf2c", "html_url": "https://github.com/rust-lang/rust/commit/d4532903b05b06e25511ec929823909a157cdf2c"}, {"sha": "2dd69aaafc64fe9dce74088b5371a6cfb032e01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd69aaafc64fe9dce74088b5371a6cfb032e01e", "html_url": "https://github.com/rust-lang/rust/commit/2dd69aaafc64fe9dce74088b5371a6cfb032e01e"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "79042ab739c748a41167cd92822eb243f9ffc36c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=249a11f93698802735f89efe5d8adf094b4b01ed", "patch": "@@ -935,6 +935,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in ascending key order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "9711214aea62381204cbbece21ef3067250b809a", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=249a11f93698802735f89efe5d8adf094b4b01ed", "patch": "@@ -846,6 +846,7 @@ impl<T> BTreeSet<T> {\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in ascending order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "4a5efab9055b3c33ac62424efbbc178d3f7daaa2", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=249a11f93698802735f89efe5d8adf094b4b01ed", "patch": "@@ -934,6 +934,7 @@ where\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "1a2a8afac8bed6568e82960fcd21da0df86cd984", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249a11f93698802735f89efe5d8adf094b4b01ed/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=249a11f93698802735f89efe5d8adf094b4b01ed", "patch": "@@ -912,6 +912,7 @@ where\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples\n     ///"}]}