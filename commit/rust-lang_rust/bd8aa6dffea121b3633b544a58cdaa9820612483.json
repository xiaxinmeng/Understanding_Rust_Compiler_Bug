{"sha": "bd8aa6dffea121b3633b544a58cdaa9820612483", "node_id": "C_kwDOAAsO6NoAKGJkOGFhNmRmZmVhMTIxYjM2MzNiNTQ0YTU4Y2RhYTk4MjA2MTI0ODM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-17T10:33:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-17T10:33:01Z"}, "message": "Rollup merge of #100660 - PunkyMunky64:patch-2, r=thomcc\n\nFixed a few documentation errors\n\nQuick pull request; IEEE-754, not IEEE-745. May save someone a quick second some time.", "tree": {"sha": "86fbd72dba88347508484082d06f8313b9804b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86fbd72dba88347508484082d06f8313b9804b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8aa6dffea121b3633b544a58cdaa9820612483", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/MPdCRBK7hj4Ov3rIwAACVIIAKdcjo1pQiZ+irrlE3mpflV+\nEHIOx48LhwxATlAmuyXGdVd+WalmWOg3N7f/4NVXXTxl9ymuSmNHAHhxhU80jjnM\nkUqcp02ESTWckBS7ducISUSQ8lVQ3b+6gxQdGzhE7s3j/mH6UyNk2kvAw4otwiuW\nmOqGjZY6NoHuI+WdsHbFmM9dz9kEIiM8wubSSrmi7iH4d+xBY6hQx8hVhDwD1rkF\nJUyYcJf2s1tpJLpH2K0blZhOnYWeA4JmaAtZYMkavlazgWL6KZQX00Llo4/cfK+c\ngIe3BOFaU5eDlIJjP6q5eqUk8J3F6BseUW3R4tCePmkpE3T9guwyXiZ2JOHfT3c=\n=iGBY\n-----END PGP SIGNATURE-----\n", "payload": "tree 86fbd72dba88347508484082d06f8313b9804b04\nparent 36d8d5565d98ef24cea7889930401009e8fad7c4\nparent 683b3f4e6e57897cefadc157ce704c0c4d209b04\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660732381 +0200\ncommitter GitHub <noreply@github.com> 1660732381 +0200\n\nRollup merge of #100660 - PunkyMunky64:patch-2, r=thomcc\n\nFixed a few documentation errors\n\nQuick pull request; IEEE-754, not IEEE-745. May save someone a quick second some time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8aa6dffea121b3633b544a58cdaa9820612483", "html_url": "https://github.com/rust-lang/rust/commit/bd8aa6dffea121b3633b544a58cdaa9820612483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8aa6dffea121b3633b544a58cdaa9820612483/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d8d5565d98ef24cea7889930401009e8fad7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d8d5565d98ef24cea7889930401009e8fad7c4", "html_url": "https://github.com/rust-lang/rust/commit/36d8d5565d98ef24cea7889930401009e8fad7c4"}, {"sha": "683b3f4e6e57897cefadc157ce704c0c4d209b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/683b3f4e6e57897cefadc157ce704c0c4d209b04", "html_url": "https://github.com/rust-lang/rust/commit/683b3f4e6e57897cefadc157ce704c0c4d209b04"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "b5c8241d2943dedebb6f21393cfb49502aadaf3b", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd8aa6dffea121b3633b544a58cdaa9820612483/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8aa6dffea121b3633b544a58cdaa9820612483/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=bd8aa6dffea121b3633b544a58cdaa9820612483", "patch": "@@ -393,7 +393,7 @@ impl f64 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// Note that IEEE-754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -624,7 +624,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -655,7 +655,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases."}]}