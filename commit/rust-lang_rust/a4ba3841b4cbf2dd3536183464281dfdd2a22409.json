{"sha": "a4ba3841b4cbf2dd3536183464281dfdd2a22409", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YmEzODQxYjRjYmYyZGQzNTM2MTgzNDY0MjgxZGZkZDJhMjI0MDk=", "commit": {"author": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-04-08T17:56:37Z"}, "committer": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-04-08T17:56:37Z"}, "message": "Add explicit type assist.", "tree": {"sha": "35dca7b4b07466d862a0a2052d2f0d51bfefb0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35dca7b4b07466d862a0a2052d2f0d51bfefb0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ba3841b4cbf2dd3536183464281dfdd2a22409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ba3841b4cbf2dd3536183464281dfdd2a22409", "html_url": "https://github.com/rust-lang/rust/commit/a4ba3841b4cbf2dd3536183464281dfdd2a22409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ba3841b4cbf2dd3536183464281dfdd2a22409/comments", "author": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6ab0758731d0555fbf1b1a918abd3e12c8169d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6ab0758731d0555fbf1b1a918abd3e12c8169d", "html_url": "https://github.com/rust-lang/rust/commit/ac6ab0758731d0555fbf1b1a918abd3e12c8169d"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "dec4f68eef46486ea5034eed54c7e9ff76603105", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba3841b4cbf2dd3536183464281dfdd2a22409/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba3841b4cbf2dd3536183464281dfdd2a22409/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=a4ba3841b4cbf2dd3536183464281dfdd2a22409", "patch": "@@ -0,0 +1,95 @@\n+use hir::{\n+    HirDisplay, Ty,\n+    db::HirDatabase,\n+    source_binder::function_from_child_node,\n+};\n+use ra_syntax::{\n+    SyntaxKind,\n+    ast::{LetStmt, PatKind, NameOwner, AstNode}\n+};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+/// Add explicit type assist.\n+pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let stmt = ctx.node_at_offset::<LetStmt>()?;\n+    let expr = stmt.initializer()?;\n+    let pat = stmt.pat()?;\n+    // Must be a binding\n+    let pat = match pat.kind() {\n+        PatKind::BindPat(bind_pat) => bind_pat,\n+        _ => {\n+            return None;\n+        }\n+    };\n+    let pat_range = pat.syntax().range();\n+    // The binding must have a name\n+    let name = pat.name()?;\n+    let name_range = name.syntax().range();\n+    // Assist not applicable if the type has already been specified\n+    if stmt.syntax().children_with_tokens().any(|child| child.kind() == SyntaxKind::COLON) {\n+        return None;\n+    }\n+    // Infer type\n+    let func = function_from_child_node(ctx.db, ctx.frange.file_id, pat.syntax())?;\n+    let inference_res = func.infer(ctx.db);\n+    let source_map = func.body_source_map(ctx.db);\n+    let expr_id = source_map.node_expr(expr.into())?;\n+    let ty = inference_res[expr_id].clone();\n+    // Assist not applicable if the type is unknown\n+    if is_unknown(&ty) {\n+        return None;\n+    }\n+    let ty_str = ty.display(ctx.db).to_string();\n+\n+    ctx.add_action(AssistId(\"add_explicit_type\"), \"add explicit type\", |edit| {\n+        edit.target(pat_range);\n+        edit.insert(name_range.end(), format!(\": {}\", ty_str));\n+    });\n+    ctx.build()\n+}\n+\n+/// Returns true if any type parameter is unknown\n+fn is_unknown(ty: &Ty) -> bool {\n+    match ty {\n+        Ty::Unknown => true,\n+        Ty::Apply(a_ty) => a_ty.parameters.iter().any(is_unknown),\n+        _ => false,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n+\n+    #[test]\n+    fn add_explicit_type_target() {\n+        check_assist_target(add_explicit_type, \"fn f() { let a<|> = 1; }\", \"a\");\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_works_for_simple_expr() {\n+        check_assist(\n+            add_explicit_type,\n+            \"fn f() { let a<|> = 1; }\",\n+            \"fn f() { let a<|>: i32 = 1; }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_ty_not_inferred() {\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|> = None; }\");\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_ty_already_specified() {\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: i32 = 1; }\");\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_specified_ty_is_tuple() {\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: (i32, i32) = (3, 4); }\");\n+    }\n+}"}, {"sha": "ded401b63ddb53a60ea4c56dd0948a09ddbd2228", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ba3841b4cbf2dd3536183464281dfdd2a22409/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ba3841b4cbf2dd3536183464281dfdd2a22409/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=a4ba3841b4cbf2dd3536183464281dfdd2a22409", "patch": "@@ -86,6 +86,7 @@ where\n }\n \n mod add_derive;\n+mod add_explicit_type;\n mod add_impl;\n mod flip_comma;\n mod flip_binexpr;\n@@ -103,6 +104,7 @@ mod add_missing_impl_members;\n fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n     &[\n         add_derive::add_derive,\n+        add_explicit_type::add_explicit_type,\n         add_impl::add_impl,\n         change_visibility::change_visibility,\n         fill_match_arms::fill_match_arms,"}]}