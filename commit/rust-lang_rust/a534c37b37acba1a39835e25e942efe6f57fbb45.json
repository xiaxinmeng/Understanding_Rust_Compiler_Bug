{"sha": "a534c37b37acba1a39835e25e942efe6f57fbb45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MzRjMzdiMzdhY2JhMWEzOTgzNWUyNWU5NDJlZmU2ZjU3ZmJiNDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-25T21:21:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-25T21:21:01Z"}, "message": "Rollup merge of #62822 - RalfJung:pointers, r=Centril\n\nImprove some pointer-related documentation", "tree": {"sha": "c73c0024e4148c1f846da94c0b715620e00942f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c73c0024e4148c1f846da94c0b715620e00942f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a534c37b37acba1a39835e25e942efe6f57fbb45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOh09CRBK7hj4Ov3rIwAAdHIIAAxFJjhnjnSm6SZQD9CC7AVb\n1c3tveqsH5Szlzgg6C+/DGdgnlrD/wSWduuhcnB2r/FOMQIh4gOs4vR4qhlNIsn/\n6BAKKgrMJmXIYotzu6owpjzAG7jp7cnZExbabz8ootva7vKb9CKRggEZ+J5t2OXj\ni0BLESVnhbLBnqrS3l3xzG244am6l8C3WTpPGXVkdUPMsP3jvQS/AVAUAMxnSfAT\nIQTnmV6byZCAXibEgUMiSdOVziXXkDuKT3ZuTF+zU6Uw9JKCwPGmYBPPsJCwTNkn\nGVNY5pk3Xi46odv+08C4X4yo5QpoPVct/3CPOxIFZlrje/e4fIQO0K8vveIlzfQ=\n=BErZ\n-----END PGP SIGNATURE-----\n", "payload": "tree c73c0024e4148c1f846da94c0b715620e00942f5\nparent e1de70b04548b2e899fcf0da09c29600cc05325e\nparent 65cf10d90276e40bd8cc27a79d6c6f0d13e0cc7a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564089661 +0200\ncommitter GitHub <noreply@github.com> 1564089661 +0200\n\nRollup merge of #62822 - RalfJung:pointers, r=Centril\n\nImprove some pointer-related documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a534c37b37acba1a39835e25e942efe6f57fbb45", "html_url": "https://github.com/rust-lang/rust/commit/a534c37b37acba1a39835e25e942efe6f57fbb45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a534c37b37acba1a39835e25e942efe6f57fbb45/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1de70b04548b2e899fcf0da09c29600cc05325e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1de70b04548b2e899fcf0da09c29600cc05325e", "html_url": "https://github.com/rust-lang/rust/commit/e1de70b04548b2e899fcf0da09c29600cc05325e"}, {"sha": "65cf10d90276e40bd8cc27a79d6c6f0d13e0cc7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65cf10d90276e40bd8cc27a79d6c6f0d13e0cc7a", "html_url": "https://github.com/rust-lang/rust/commit/65cf10d90276e40bd8cc27a79d6c6f0d13e0cc7a"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "d9a3da66a67868096011e29eac00e9328109c2f0", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a534c37b37acba1a39835e25e942efe6f57fbb45/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a534c37b37acba1a39835e25e942efe6f57fbb45/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a534c37b37acba1a39835e25e942efe6f57fbb45", "patch": "@@ -362,8 +362,13 @@ mod prim_unit { }\n ///\n /// *[See also the `std::ptr` module](ptr/index.html).*\n ///\n-/// Working with raw pointers in Rust is uncommon,\n-/// typically limited to a few patterns.\n+/// Working with raw pointers in Rust is uncommon, typically limited to a few patterns.\n+/// Raw pointers can be unaligned or [`null`]. However, when a raw pointer is\n+/// dereferenced (using the `*` operator), it must be non-null and aligned.\n+///\n+/// Storing through a raw pointer using `*ptr = data` calls `drop` on the old value, so\n+/// [`write`] must be used if the type has drop glue and memory is not already\n+/// initialized - otherwise `drop` would be called on the uninitialized memory.\n ///\n /// Use the [`null`] and [`null_mut`] functions to create null pointers, and the\n /// [`is_null`] method of the `*const T` and `*mut T` types to check for null.\n@@ -442,6 +447,7 @@ mod prim_unit { }\n /// [`offset`]: ../std/primitive.pointer.html#method.offset\n /// [`into_raw`]: ../std/boxed/struct.Box.html#method.into_raw\n /// [`drop`]: ../std/mem/fn.drop.html\n+/// [`write`]: ../std/ptr/fn.write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer { }\n \n@@ -891,9 +897,13 @@ mod prim_usize { }\n /// A reference represents a borrow of some owned value. You can get one by using the `&` or `&mut`\n /// operators on a value, or by using a `ref` or `ref mut` pattern.\n ///\n-/// For those familiar with pointers, a reference is just a pointer that is assumed to not be null.\n-/// In fact, `Option<&T>` has the same memory representation as a nullable pointer, and can be\n-/// passed across FFI boundaries as such.\n+/// For those familiar with pointers, a reference is just a pointer that is assumed to be\n+/// aligned, not null, and pointing to memory containing a valid value of `T` - for example,\n+/// `&bool` can only point to an allocation containing the integer values `1` (`true`) or `0`\n+/// (`false`), but creating a `&bool` that points to an allocation containing\n+/// the value `3` causes undefined behaviour.\n+/// In fact, `Option<&T>` has the same memory representation as a\n+/// nullable but aligned pointer, and can be passed across FFI boundaries as such.\n ///\n /// In most cases, references can be used much like the original value. Field access, method\n /// calling, and indexing work the same (save for mutability rules, of course). In addition, the\n@@ -1036,6 +1046,11 @@ mod prim_ref { }\n /// [`FnMut`]: ops/trait.FnMut.html\n /// [`FnOnce`]: ops/trait.FnOnce.html\n ///\n+/// Function pointers are pointers that point to *code*, not data. They can be called\n+/// just like functions. Like references, function pointers are, among other things, assumed to\n+/// not be null, so if you want to pass a function pointer over FFI and be able to accommodate null\n+/// pointers, make your type `Option<fn()>` with your required signature.\n+///\n /// Plain function pointers are obtained by casting either plain functions, or closures that don't\n /// capture an environment:\n ///\n@@ -1091,10 +1106,6 @@ mod prim_ref { }\n ///\n /// These markers can be combined, so `unsafe extern \"stdcall\" fn()` is a valid type.\n ///\n-/// Like references in rust, function pointers are assumed to not be null, so if you want to pass a\n-/// function pointer over FFI and be able to accommodate null pointers, make your type\n-/// `Option<fn()>` with your required signature.\n-///\n /// Function pointers implement the following traits:\n ///\n /// * [`Clone`]"}]}