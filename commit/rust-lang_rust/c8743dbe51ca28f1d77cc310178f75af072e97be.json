{"sha": "c8743dbe51ca28f1d77cc310178f75af072e97be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzQzZGJlNTFjYTI4ZjFkNzdjYzMxMDE3OGY3NWFmMDcyZTk3YmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T10:48:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T08:03:16Z"}, "message": "add and use helper method to get SourceInfo of current instruction in frame", "tree": {"sha": "d37e9beebf1638f911ffa686b3ab63f65cfe5efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d37e9beebf1638f911ffa686b3ab63f65cfe5efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8743dbe51ca28f1d77cc310178f75af072e97be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8743dbe51ca28f1d77cc310178f75af072e97be", "html_url": "https://github.com/rust-lang/rust/commit/c8743dbe51ca28f1d77cc310178f75af072e97be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8743dbe51ca28f1d77cc310178f75af072e97be/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56356a0745fe6b040400ebfaa636b8197395afc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/56356a0745fe6b040400ebfaa636b8197395afc1", "html_url": "https://github.com/rust-lang/rust/commit/56356a0745fe6b040400ebfaa636b8197395afc1"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "36f17688e8e9d0c59c1bea459b1a988df1b8a3ed", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c8743dbe51ca28f1d77cc310178f75af072e97be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8743dbe51ca28f1d77cc310178f75af072e97be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c8743dbe51ca28f1d77cc310178f75af072e97be", "patch": "@@ -164,6 +164,20 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     }\n }\n \n+impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n+    /// Return the `SourceInfo` of the current instruction.\n+    pub fn current_source_info(&self) -> Option<mir::SourceInfo> {\n+        self.block.map(|block| {\n+            let block = &self.body.basic_blocks()[block];\n+            if self.stmt < block.statements.len() {\n+                block.statements[self.stmt].source_info\n+            } else {\n+                block.terminator().source_info\n+            }\n+        })\n+    }\n+}\n+\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for InterpCx<'mir, 'tcx, M> {\n     #[inline]\n     fn data_layout(&self) -> &layout::TargetDataLayout {\n@@ -828,34 +842,28 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo<'tcx>> {\n         let mut last_span = None;\n         let mut frames = Vec::new();\n-        for &Frame { instance, span, body, block, stmt, .. } in self.stack().iter().rev() {\n+        for frame in self.stack().iter().rev() {\n             // make sure we don't emit frames that are duplicates of the previous\n-            if explicit_span == Some(span) {\n-                last_span = Some(span);\n+            if explicit_span == Some(frame.span) {\n+                last_span = Some(frame.span);\n                 continue;\n             }\n             if let Some(last) = last_span {\n-                if last == span {\n+                if last == frame.span {\n                     continue;\n                 }\n             } else {\n-                last_span = Some(span);\n+                last_span = Some(frame.span);\n             }\n \n-            let lint_root = block.and_then(|block| {\n-                let block = &body.basic_blocks()[block];\n-                let source_info = if stmt < block.statements.len() {\n-                    block.statements[stmt].source_info\n-                } else {\n-                    block.terminator().source_info\n-                };\n-                match &body.source_scopes[source_info.scope].local_data {\n+            let lint_root = frame.current_source_info().and_then(|source_info| {\n+                match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }\n             });\n \n-            frames.push(FrameInfo { call_site: span, instance, lint_root });\n+            frames.push(FrameInfo { call_site: frame.span, instance: frame.instance, lint_root });\n         }\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         frames"}]}