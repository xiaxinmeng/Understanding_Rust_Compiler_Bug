{"sha": "183e893aaae581bd0ab499ba56b6c5e118557dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4M2U4OTNhYWFlNTgxYmQwYWI0OTliYTU2YjZjNWUxMTg1NTdkYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-20T02:00:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-20T02:00:31Z"}, "message": "Auto merge of #69256 - nnethercote:misc-inlining, r=Centril\n\nMiscellaneous inlining improvements\n\nThese commits inline some hot functions that aren't currently inlined, for some speed wins.\n\nr? @Centril", "tree": {"sha": "02a99563f74f9a881cbb02303c8bdda9902674a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a99563f74f9a881cbb02303c8bdda9902674a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183e893aaae581bd0ab499ba56b6c5e118557dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183e893aaae581bd0ab499ba56b6c5e118557dc7", "html_url": "https://github.com/rust-lang/rust/commit/183e893aaae581bd0ab499ba56b6c5e118557dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183e893aaae581bd0ab499ba56b6c5e118557dc7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5638142b32935508626226d0f0cf9059db40789", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5638142b32935508626226d0f0cf9059db40789", "html_url": "https://github.com/rust-lang/rust/commit/d5638142b32935508626226d0f0cf9059db40789"}, {"sha": "e761f3af904b3c275bdebc73bb29ffc45384945d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e761f3af904b3c275bdebc73bb29ffc45384945d", "html_url": "https://github.com/rust-lang/rust/commit/e761f3af904b3c275bdebc73bb29ffc45384945d"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "7c4acb0edb7f22f6b839f2cbb412c50a14d1926e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183e893aaae581bd0ab499ba56b6c5e118557dc7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183e893aaae581bd0ab499ba56b6c5e118557dc7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=183e893aaae581bd0ab499ba56b6c5e118557dc7", "patch": "@@ -1499,7 +1499,7 @@ fn contains_nonascii(x: usize) -> bool {\n \n /// Walks through `v` checking that it's a valid UTF-8 sequence,\n /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.\n-#[inline]\n+#[inline(always)]\n fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n     let mut index = 0;\n     let len = v.len();"}, {"sha": "97708d91d7e2ac4eb30580dd1048ba996481f0d4", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183e893aaae581bd0ab499ba56b6c5e118557dc7/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183e893aaae581bd0ab499ba56b6c5e118557dc7/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=183e893aaae581bd0ab499ba56b6c5e118557dc7", "patch": "@@ -993,6 +993,7 @@ impl Encodable for Symbol {\n }\n \n impl Decodable for Symbol {\n+    #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Symbol, D::Error> {\n         Ok(Symbol::intern(&d.read_str()?))\n     }\n@@ -1031,6 +1032,7 @@ impl Interner {\n         }\n     }\n \n+    #[inline]\n     pub fn intern(&mut self, string: &str) -> Symbol {\n         if let Some(&name) = self.names.get(string) {\n             return name;"}, {"sha": "8c6548cd3c5b205e2ae56ad1b8410f16277a8314", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/183e893aaae581bd0ab499ba56b6c5e118557dc7/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183e893aaae581bd0ab499ba56b6c5e118557dc7/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=183e893aaae581bd0ab499ba56b6c5e118557dc7", "patch": "@@ -36,6 +36,7 @@ pub trait Encoder {\n     fn emit_str(&mut self, v: &str) -> Result<(), Self::Error>;\n \n     // Compound types:\n+    #[inline]\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -57,6 +58,7 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_enum_variant_arg<F>(&mut self, _a_idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -89,13 +91,15 @@ pub trait Encoder {\n         self.emit_enum_variant_arg(f_idx, f)\n     }\n \n+    #[inline]\n     fn emit_struct<F>(&mut self, _name: &str, _len: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_struct_field<F>(\n         &mut self,\n         _f_name: &str,\n@@ -108,13 +112,15 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_tuple<F>(&mut self, _len: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_tuple_arg<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -164,6 +170,7 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_seq_elt<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -179,13 +186,15 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_map_elt_key<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_map_elt_val<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -218,13 +227,15 @@ pub trait Decoder {\n     fn read_str(&mut self) -> Result<Cow<'_, str>, Self::Error>;\n \n     // Compound types:\n+    #[inline]\n     fn read_enum<T, F>(&mut self, _name: &str, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_enum_variant<T, F>(&mut self, _names: &[&str], mut f: F) -> Result<T, Self::Error>\n     where\n         F: FnMut(&mut Self, usize) -> Result<T, Self::Error>,\n@@ -233,6 +244,7 @@ pub trait Decoder {\n         f(self, disr)\n     }\n \n+    #[inline]\n     fn read_enum_variant_arg<T, F>(&mut self, _a_idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n@@ -259,13 +271,15 @@ pub trait Decoder {\n         self.read_enum_variant_arg(f_idx, f)\n     }\n \n+    #[inline]\n     fn read_struct<T, F>(&mut self, _s_name: &str, _len: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_struct_field<T, F>(\n         &mut self,\n         _f_name: &str,\n@@ -278,13 +292,15 @@ pub trait Decoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_tuple<T, F>(&mut self, _len: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_tuple_arg<T, F>(&mut self, _a_idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n@@ -328,6 +344,7 @@ pub trait Decoder {\n         f(self, len)\n     }\n \n+    #[inline]\n     fn read_seq_elt<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n@@ -343,13 +360,15 @@ pub trait Decoder {\n         f(self, len)\n     }\n \n+    #[inline]\n     fn read_map_elt_key<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_map_elt_val<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,"}]}