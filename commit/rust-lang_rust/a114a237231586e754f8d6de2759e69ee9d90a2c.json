{"sha": "a114a237231586e754f8d6de2759e69ee9d90a2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTRhMjM3MjMxNTg2ZTc1NGY4ZDZkZTI3NTllNjllZTlkOTBhMmM=", "commit": {"author": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-13T22:21:27Z"}, "committer": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-05-19T23:16:11Z"}, "message": "Document `#[ffi_const]` and `#[ffi_pure]` function attributes in unstable book\n\nBased on the work of gnzlbg <gonzalobg88@gmail.com>.", "tree": {"sha": "4605361afbf6c1c9098fefc11ae33e2fa3327acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4605361afbf6c1c9098fefc11ae33e2fa3327acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a114a237231586e754f8d6de2759e69ee9d90a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a114a237231586e754f8d6de2759e69ee9d90a2c", "html_url": "https://github.com/rust-lang/rust/commit/a114a237231586e754f8d6de2759e69ee9d90a2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a114a237231586e754f8d6de2759e69ee9d90a2c/comments", "author": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d7f0bbe962811d2e5207762aa92c2059c33d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d7f0bbe962811d2e5207762aa92c2059c33d1a", "html_url": "https://github.com/rust-lang/rust/commit/a7d7f0bbe962811d2e5207762aa92c2059c33d1a"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "9a1ced4033b2201772943a47a642d854bc04e8e2", "filename": "src/doc/unstable-book/src/language-features/ffi-const.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a114a237231586e754f8d6de2759e69ee9d90a2c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/a114a237231586e754f8d6de2759e69ee9d90a2c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-const.md?ref=a114a237231586e754f8d6de2759e69ee9d90a2c", "patch": "@@ -0,0 +1,47 @@\n+# `ffi_const`\n+\n+The `#[ffi_const]` attribute applies clang's `const` attribute to foreign\n+functions declarations.\n+\n+That is, `#[ffi_const]` functions shall have no effects except for its return\n+value, which can only depend on the values of the function parameters, and is\n+not affected by changes to the observable state of the program.\n+\n+Applying the `#[ffi_const]` attribute to a function that violates these\n+requirements is undefined behaviour.\n+\n+This attribute enables Rust to perform common optimizations, like sub-expression\n+elimination, and it can avoid emitting some calls in repeated invocations of the\n+function with the same argument values regardless of other operations being\n+performed in between these functions calls (as opposed to `#[ffi_pure]`\n+functions).\n+\n+## Pitfalls\n+\n+A `#[ffi_const]` function can only read global memory that would not affect\n+its return value for the whole execution of the program (e.g. immutable global\n+memory). `#[ffi_const]` functions are referentially-transparent and therefore\n+more strict than `#[ffi_pure]` functions.\n+\n+A common pitfall involves applying the `#[ffi_const]` attribute to a\n+function that reads memory through pointer arguments which do not necessarily\n+point to immutable global memory.\n+\n+A `#[ffi_const]` function that returns unit has no effect on the abstract\n+machine's state, and a `#[ffi_const]` function cannot be `#[ffi_pure]`.\n+\n+A `#[ffi_const]` function must not diverge, neither via a side effect (e.g. a\n+call to `abort`) nor by infinite loops.\n+\n+When translating C headers to Rust FFI, it is worth verifying for which targets\n+the `const` attribute is enabled in those headers, and using the appropriate\n+`cfg` macros in the Rust side to match those definitions. While the semantics of\n+`const` are implemented identically by many C and C++ compilers, e.g., clang,\n+[GCC], [ARM C/C++ compiler], [IBM ILE C/C++], etc. they are not necessarily\n+implemented in this way on all of them. It is therefore also worth verifying\n+that the semantics of the C toolchain used to compile the binary being linked\n+against are compatible with those of the `#[ffi_const]`.\n+\n+[ARM C/C++ compiler]: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacgigch.html\n+[GCC]: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-const-function-attribute\n+[IBM ILE C/C++]: https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_const.htm"}, {"sha": "7bfd7a378f00bff14f17c2e6cd5a9b7bf55deea2", "filename": "src/doc/unstable-book/src/language-features/ffi-pure.md", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a114a237231586e754f8d6de2759e69ee9d90a2c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md", "raw_url": "https://github.com/rust-lang/rust/raw/a114a237231586e754f8d6de2759e69ee9d90a2c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md?ref=a114a237231586e754f8d6de2759e69ee9d90a2c", "patch": "@@ -0,0 +1,51 @@\n+# `ffi_pure`\n+\n+The `#[ffi_pure]` attribute applies clang's `pure` attribute to foreign\n+functions declarations.\n+\n+That is, `#[ffi_pure]` functions shall have no effects except for its return\n+value, which shall not change across two consecutive function calls with\n+the same parameters.\n+\n+Applying the `#[ffi_pure]` attribute to a function that violates these\n+requirements is undefined behavior.\n+\n+This attribute enables Rust to perform common optimizations, like sub-expression\n+elimination and loop optimizations. Some common examples of pure functions are\n+`strlen` or `memcmp`.\n+\n+These optimizations are only applicable when the compiler can prove that no\n+program state observable by the `#[ffi_pure]` function has changed between calls\n+of the function, which could alter the result. See also the `#[ffi_const]`\n+attribute, which provides stronger guarantees regarding the allowable behavior\n+of a function, enabling further optimization.\n+\n+## Pitfalls\n+\n+A `#[ffi_pure]` function can read global memory through the function\n+parameters (e.g. pointers), globals, etc. `#[ffi_pure]` functions are not\n+referentially-transparent, and are therefore more relaxed than `#[ffi_const]`\n+functions.\n+\n+However, accesing global memory through volatile or atomic reads can violate the\n+requirement that two consecutive function calls shall return the same value.\n+\n+A `pure` function that returns unit has no effect on the abstract machine's\n+state.\n+\n+A `#[ffi_pure]` function must not diverge, neither via a side effect (e.g. a\n+call to `abort`) nor by infinite loops.\n+\n+When translating C headers to Rust FFI, it is worth verifying for which targets\n+the `pure` attribute is enabled in those headers, and using the appropriate\n+`cfg` macros in the Rust side to match those definitions. While the semantics of\n+`pure` are implemented identically by many C and C++ compilers, e.g., clang,\n+[GCC], [ARM C/C++ compiler], [IBM ILE C/C++], etc. they are not necessarily\n+implemented in this way on all of them. It is therefore also worth verifying\n+that the semantics of the C toolchain used to compile the binary being linked\n+against are compatible with those of the `#[ffi_pure]`.\n+\n+\n+[ARM C/C++ compiler]: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacigdac.html\n+[GCC]: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-pure-function-attribute\n+[IBM ILE C/C++]: https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_pure.htm"}]}