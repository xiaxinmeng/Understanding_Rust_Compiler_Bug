{"sha": "7e27209ff83ffd6b94b6d9833b28644587ec3207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMjcyMDlmZjgzZmZkNmI5NGI2ZDk4MzNiMjg2NDQ1ODdlYzMyMDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-01T09:15:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-01T09:15:42Z"}, "message": "Rollup merge of #86666 - ptrojahn:compare_kinds, r=petrochenkov\n\nFix misleading \"impl Trait\" error\n\nThe kinds can't be compared directly, as types with references are treated as different because the lifetimes aren't bound in ty, but are in expected.\nCloses #84160", "tree": {"sha": "62043387a2676b77099a9e65f2fd1ea020688af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62043387a2676b77099a9e65f2fd1ea020688af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e27209ff83ffd6b94b6d9833b28644587ec3207", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3Ye+CRBK7hj4Ov3rIwAAQvAIAFg7QR4yxq+hsVDbpoDq8EJQ\nq2o4Dc5Z63T3WvqRkvPQOEtvBYN+PLu4d3kfln1fruHhCuDspHb4iDgjcnM89j9m\n6qhMacpR6YKFVnQ33nd9wf0f2xMgQQ1XJATPALo51QRHAt9Fd6STonrSdESReXrJ\n7gDWxS24wh5CmHKqRTVAMqZkrtMNX2xoFRsRHLTp6Ii1x0Z096zYz+vqEuI4oe6V\nN2mCiEax9VS00vTKAFnZO6h0z6IvgjF2Dx9LtroPEN//Rpmrnplyf0jl/SfT7RPk\nkvzaCQJRd0fbdtOSEfADFGz4SeM22YAsKXmR/6LVf8GxA0U8Ya5zXT0EBfTNjX4=\n=kv+w\n-----END PGP SIGNATURE-----\n", "payload": "tree 62043387a2676b77099a9e65f2fd1ea020688af0\nparent dfd30d7b705f858603ef6d21bdb893297aea37ba\nparent 61554bc9d72472332aac8cad341d77aa40cfb733\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1625130942 +0200\ncommitter GitHub <noreply@github.com> 1625130942 +0200\n\nRollup merge of #86666 - ptrojahn:compare_kinds, r=petrochenkov\n\nFix misleading \"impl Trait\" error\n\nThe kinds can't be compared directly, as types with references are treated as different because the lifetimes aren't bound in ty, but are in expected.\nCloses #84160\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e27209ff83ffd6b94b6d9833b28644587ec3207", "html_url": "https://github.com/rust-lang/rust/commit/7e27209ff83ffd6b94b6d9833b28644587ec3207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e27209ff83ffd6b94b6d9833b28644587ec3207/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd30d7b705f858603ef6d21bdb893297aea37ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd30d7b705f858603ef6d21bdb893297aea37ba", "html_url": "https://github.com/rust-lang/rust/commit/dfd30d7b705f858603ef6d21bdb893297aea37ba"}, {"sha": "61554bc9d72472332aac8cad341d77aa40cfb733", "url": "https://api.github.com/repos/rust-lang/rust/commits/61554bc9d72472332aac8cad341d77aa40cfb733", "html_url": "https://github.com/rust-lang/rust/commit/61554bc9d72472332aac8cad341d77aa40cfb733"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "afa4d0f1c4de9067948fe5219c5e040df6f907a2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e27209ff83ffd6b94b6d9833b28644587ec3207/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e27209ff83ffd6b94b6d9833b28644587ec3207/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=7e27209ff83ffd6b94b6d9833b28644587ec3207", "patch": "@@ -1481,6 +1481,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     expected,\n                     found,\n                     can_suggest,\n+                    fcx.tcx.hir().get_parent_item(id),\n                 );\n             }\n             if !pointing_at_return_type {"}, {"sha": "54aab271fdb3c767e1d68c833088e33e2be24713", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e27209ff83ffd6b94b6d9833b28644587ec3207/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e27209ff83ffd6b94b6d9833b28644587ec3207/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=7e27209ff83ffd6b94b6d9833b28644587ec3207", "patch": "@@ -52,9 +52,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            pointing_at_return_type =\n-                self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n+            pointing_at_return_type = self.suggest_missing_return_type(\n+                err,\n+                &fn_decl,\n+                expected,\n+                found,\n+                can_suggest,\n+                fn_id,\n+            );\n             self.suggest_missing_break_or_return_expr(\n                 err, expr, &fn_decl, expected, found, blk_id, fn_id,\n             );\n@@ -433,6 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         can_suggest: bool,\n+        fn_id: hir::HirId,\n     ) -> bool {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n@@ -465,7 +472,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n-                if ty.kind() == expected.kind() {\n+                let bound_vars = self.tcx.late_bound_vars(fn_id);\n+                let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n+                let ty = self.normalize_associated_types_in(sp, ty);\n+                if self.can_coerce(expected, ty) {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\", expected));\n                     return true;\n                 }"}, {"sha": "f69629232aed1123ac691d08159fea475431edd0", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=7e27209ff83ffd6b94b6d9833b28644587ec3207", "patch": "@@ -6,6 +6,8 @@ LL |     type A;\n LL |     type B;\n    |     ------- the expected foreign type\n ...\n+LL | fn foo(r: &A) -> &B {\n+   |                  -- expected `&B` because of return type\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |"}, {"sha": "798ce1199a9dc24ac41b70f26fc13f00c5f85b43", "filename": "src/test/ui/retslot-cast.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Fretslot-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Fretslot-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fretslot-cast.stderr?ref=7e27209ff83ffd6b94b6d9833b28644587ec3207", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/retslot-cast.rs:13:5\n    |\n+LL |             -> Option<&Iterator<Item=()>> {\n+   |                -------------------------- expected `Option<&dyn Iterator<Item = ()>>` because of return type\n+...\n LL |     inner(x)\n    |     ^^^^^^^^ expected trait `Iterator<Item = ()>`, found trait `Iterator<Item = ()> + Send`\n    |"}, {"sha": "7b444df85282af77ebe9641e65cdc0d8e95fecc8", "filename": "src/test/ui/typeck/issue-84160.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs?ref=7e27209ff83ffd6b94b6d9833b28644587ec3207", "patch": "@@ -0,0 +1,9 @@\n+fn mismatched_types_with_reference(x: &u32) -> &u32 {\n+    if false {\n+        return x;\n+    }\n+    return \"test\";\n+    //~^ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "24c188b3fcb70292970b746488577b841c1cd2ad", "filename": "src/test/ui/typeck/issue-84160.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e27209ff83ffd6b94b6d9833b28644587ec3207/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr?ref=7e27209ff83ffd6b94b6d9833b28644587ec3207", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-84160.rs:5:12\n+   |\n+LL | fn mismatched_types_with_reference(x: &u32) -> &u32 {\n+   |                                                ---- expected `&u32` because of return type\n+...\n+LL |     return \"test\";\n+   |            ^^^^^^ expected `u32`, found `str`\n+   |\n+   = note: expected reference `&u32`\n+              found reference `&'static str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}