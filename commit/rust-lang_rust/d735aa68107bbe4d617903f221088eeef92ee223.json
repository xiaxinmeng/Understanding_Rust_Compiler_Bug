{"sha": "d735aa68107bbe4d617903f221088eeef92ee223", "node_id": "C_kwDOAAsO6NoAKGQ3MzVhYTY4MTA3YmJlNGQ2MTc5MDNmMjIxMDg4ZWVlZjkyZWUyMjM", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-27T10:58:59Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-27T10:58:59Z"}, "message": "Eliminate duplication of building panic langcall in codegen", "tree": {"sha": "dc7c9bddae0d59111df3ff64c332ae562dfc897d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7c9bddae0d59111df3ff64c332ae562dfc897d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d735aa68107bbe4d617903f221088eeef92ee223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d735aa68107bbe4d617903f221088eeef92ee223", "html_url": "https://github.com/rust-lang/rust/commit/d735aa68107bbe4d617903f221088eeef92ee223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d735aa68107bbe4d617903f221088eeef92ee223/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f631e8e93681ddc6e62d6ba6065cac7c449534c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f631e8e93681ddc6e62d6ba6065cac7c449534c", "html_url": "https://github.com/rust-lang/rust/commit/1f631e8e93681ddc6e62d6ba6065cac7c449534c"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "94c63b98ff9a0c6f4ca6588816c69955b0e2f671", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d735aa68107bbe4d617903f221088eeef92ee223/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735aa68107bbe4d617903f221088eeef92ee223/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=d735aa68107bbe4d617903f221088eeef92ee223", "patch": "@@ -2,15 +2,13 @@\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::Span;\n \n use crate::base;\n-use crate::traits::BuilderMethods;\n use crate::traits::*;\n \n pub enum IntPredicate {\n@@ -118,14 +116,22 @@ mod temp_stable_hash_impls {\n     }\n }\n \n-pub fn langcall(tcx: TyCtxt<'_>, span: Option<Span>, msg: &str, li: LangItem) -> DefId {\n-    tcx.lang_items().require(li).unwrap_or_else(|s| {\n+pub fn build_langcall<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    bx: &Bx,\n+    span: Option<Span>,\n+    msg: &str,\n+    li: LangItem,\n+) -> (Bx::FnAbiOfResult, Bx::Value) {\n+    let tcx = bx.tcx();\n+    let def_id = tcx.lang_items().require(li).unwrap_or_else(|s| {\n         let msg = format!(\"{} {}\", msg, s);\n         match span {\n             Some(span) => tcx.sess.span_fatal(span, &msg),\n             None => tcx.sess.fatal(&msg),\n         }\n-    })\n+    });\n+    let instance = ty::Instance::mono(tcx, def_id);\n+    (bx.fn_abi_of_instance(instance, ty::List::empty()), bx.get_fn_addr(instance))\n }\n \n // To avoid UB from LLVM, these two functions mask RHS with an"}, {"sha": "9f28bc713817295e664db662a30dd56556a33625", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d735aa68107bbe4d617903f221088eeef92ee223/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735aa68107bbe4d617903f221088eeef92ee223/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=d735aa68107bbe4d617903f221088eeef92ee223", "patch": "@@ -489,11 +489,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         };\n \n-        // Obtain the panic entry point.\n-        let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n-        let instance = ty::Instance::mono(bx.tcx(), def_id);\n-        let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n-        let llfn = bx.get_fn_addr(instance);\n+        let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), \"\", lang_item);\n \n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n@@ -509,10 +505,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.set_debug_loc(&mut bx, terminator.source_info);\n \n         // Obtain the panic entry point.\n-        let def_id = common::langcall(bx.tcx(), Some(span), \"\", LangItem::PanicNoUnwind);\n-        let instance = ty::Instance::mono(bx.tcx(), def_id);\n-        let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n-        let llfn = bx.get_fn_addr(instance);\n+        let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), \"\", LangItem::PanicNoUnwind);\n \n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_abi, llfn, &[], None, None);\n@@ -573,12 +566,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let location = self.get_caller_location(bx, source_info).immediate();\n \n                 // Obtain the panic entry point.\n-                // FIXME: dedup this with `codegen_assert_terminator` above.\n-                let def_id =\n-                    common::langcall(bx.tcx(), Some(source_info.span), \"\", LangItem::Panic);\n-                let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n-                let llfn = bx.get_fn_addr(instance);\n+                let (fn_abi, llfn) =\n+                    common::build_langcall(bx, Some(source_info.span), \"\", LangItem::Panic);\n \n                 // Codegen the actual panic invoke/call.\n                 helper.do_call(\n@@ -1440,10 +1429,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let llretty = self.landing_pad_type();\n             bx.cleanup_landing_pad(llretty, llpersonality);\n \n-            let def_id = common::langcall(bx.tcx(), None, \"\", LangItem::PanicNoUnwind);\n-            let instance = ty::Instance::mono(bx.tcx(), def_id);\n-            let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n-            let fn_ptr = bx.get_fn_addr(instance);\n+            let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, \"\", LangItem::PanicNoUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n             let llret = bx.call(fn_ty, fn_ptr, &[], None);"}]}