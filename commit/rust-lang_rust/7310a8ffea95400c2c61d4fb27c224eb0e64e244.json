{"sha": "7310a8ffea95400c2c61d4fb27c224eb0e64e244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTBhOGZmZWE5NTQwMGMyYzYxZDRmYjI3YzIyNGViMGU2NGUyNDQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-01T18:39:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-01T18:39:31Z"}, "message": "ICH: Adapt to changes in the MetaItem AST representation.", "tree": {"sha": "3ff082544cc82ac27a92c9f99ec76d88d234a7a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff082544cc82ac27a92c9f99ec76d88d234a7a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7310a8ffea95400c2c61d4fb27c224eb0e64e244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7310a8ffea95400c2c61d4fb27c224eb0e64e244", "html_url": "https://github.com/rust-lang/rust/commit/7310a8ffea95400c2c61d4fb27c224eb0e64e244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7310a8ffea95400c2c61d4fb27c224eb0e64e244/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cbd6fe33155fde25146d2cf03aa26e450086106", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbd6fe33155fde25146d2cf03aa26e450086106", "html_url": "https://github.com/rust-lang/rust/commit/8cbd6fe33155fde25146d2cf03aa26e450086106"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "47f623266f3b74cff40d833e4f6e8d216a59445f", "filename": "src/librustc_data_structures/fnv.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7310a8ffea95400c2c61d4fb27c224eb0e64e244/src%2Flibrustc_data_structures%2Ffnv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7310a8ffea95400c2c61d4fb27c224eb0e64e244/src%2Flibrustc_data_structures%2Ffnv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffnv.rs?ref=7310a8ffea95400c2c61d4fb27c224eb0e64e244", "patch": "@@ -57,3 +57,9 @@ impl Hasher for FnvHasher {\n         self.0\n     }\n }\n+\n+pub fn hash<T: Hash>(v: &T) -> u64 {\n+    let mut state = FnvHasher::default();\n+    v.hash(&mut state);\n+    state.finish()\n+}"}, {"sha": "05a2f751d29210726f7ccf3411445b23b342a227", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7310a8ffea95400c2c61d4fb27c224eb0e64e244/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7310a8ffea95400c2c61d4fb27c224eb0e64e244/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=7310a8ffea95400c2c61d4fb27c224eb0e64e244", "patch": "@@ -15,7 +15,7 @@\n \n use self::SawExprComponent::*;\n use self::SawAbiComponent::*;\n-use syntax::ast::{self, Name, NodeId, Attribute};\n+use syntax::ast::{self, Name, NodeId};\n use syntax::parse::token;\n use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n use rustc::hir;\n@@ -24,6 +24,7 @@ use rustc::hir::def::{Def, PathResolution};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::fnv;\n use std::hash::{Hash, SipHasher};\n \n use super::def_path_hash::DefPathHashes;\n@@ -526,7 +527,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n         visit::walk_assoc_type_binding(self, type_binding)\n     }\n \n-    fn visit_attribute(&mut self, _: &Attribute) {\n+    fn visit_attribute(&mut self, _: &ast::Attribute) {\n         // We explicitly do not use this method, since doing that would\n         // implicitly impose an order on the attributes being hashed, while we\n         // explicitly don't want their order to matter\n@@ -658,28 +659,34 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n                 s.hash(self.st);\n                 // Sort subitems so the hash does not depend on their order\n                 let indices = self.indices_sorted_by(&items, |p| {\n-                    meta_item_sort_key(&*p)\n+                    (p.name(), fnv::hash(&p.literal().map(|i| &i.node)))\n                 });\n                 items.len().hash(self.st);\n                 for (index, &item_index) in indices.iter().enumerate() {\n                     index.hash(self.st);\n-                    self.hash_meta_item(&items[item_index]);\n+                    let nested_meta_item: &ast::NestedMetaItemKind = &items[item_index].node;\n+                    self.hash_discriminant(nested_meta_item);\n+                    match *nested_meta_item {\n+                        ast::NestedMetaItemKind::MetaItem(ref meta_item) => {\n+                            self.hash_meta_item(meta_item);\n+                        }\n+                        ast::NestedMetaItemKind::Literal(ref lit) => {\n+                            lit.node.hash(self.st);\n+                        }\n+                    }\n                 }\n             }\n         }\n     }\n \n-    pub fn hash_attributes(&mut self, attributes: &[Attribute]) {\n+    pub fn hash_attributes(&mut self, attributes: &[ast::Attribute]) {\n         debug!(\"hash_attributes: st={:?}\", self.st);\n-        let indices = self.indices_sorted_by(attributes, |attr| {\n-            meta_item_sort_key(&attr.node.value)\n-        });\n+        let indices = self.indices_sorted_by(attributes, |attr| attr.name());\n \n         for i in indices {\n             let attr = &attributes[i].node;\n-\n             if !attr.is_sugared_doc &&\n-               !IGNORED_ATTRIBUTES.contains(&&*meta_item_sort_key(&attr.value)) {\n+               !IGNORED_ATTRIBUTES.contains(&&*attr.value.name()) {\n                 SawAttribute(attr.style).hash(self.st);\n                 self.hash_meta_item(&*attr.value);\n             }\n@@ -696,11 +703,3 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n         indices\n     }\n }\n-\n-fn meta_item_sort_key(item: &ast::MetaItem) -> token::InternedString {\n-    match item.node {\n-        ast::MetaItemKind::Word(ref s) |\n-        ast::MetaItemKind::NameValue(ref s, _) |\n-        ast::MetaItemKind::List(ref s, _) => s.clone()\n-    }\n-}"}]}