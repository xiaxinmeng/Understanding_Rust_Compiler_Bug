{"sha": "dd4781547852c9bf34ffcf5362b1e25da84ecc51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNDc4MTU0Nzg1MmM5YmYzNGZmY2Y1MzYyYjFlMjVkYTg0ZWNjNTE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-27T20:00:08Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-27T20:23:59Z"}, "message": "Avoid re-export errors in the generated test harness.", "tree": {"sha": "02f9169e1381c76ea46412c8be54a98aaf9bf1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f9169e1381c76ea46412c8be54a98aaf9bf1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd4781547852c9bf34ffcf5362b1e25da84ecc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4781547852c9bf34ffcf5362b1e25da84ecc51", "html_url": "https://github.com/rust-lang/rust/commit/dd4781547852c9bf34ffcf5362b1e25da84ecc51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd4781547852c9bf34ffcf5362b1e25da84ecc51/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0623cf7bda44849ab5df78a06b22f9108cf821a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0623cf7bda44849ab5df78a06b22f9108cf821a", "html_url": "https://github.com/rust-lang/rust/commit/d0623cf7bda44849ab5df78a06b22f9108cf821a"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "1fc9c45de930647b9021aa88e75f6e6749819451", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd4781547852c9bf34ffcf5362b1e25da84ecc51/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4781547852c9bf34ffcf5362b1e25da84ecc51/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=dd4781547852c9bf34ffcf5362b1e25da84ecc51", "patch": "@@ -683,9 +683,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         match (value_result, type_result) {\n-            // With `#![feature(item_like_imports)]`, all namespaces\n-            // must be re-exported with extra visibility for an error to occur.\n-            (Ok(value_binding), Ok(type_binding)) if self.new_import_semantics => {\n+            // All namespaces must be re-exported with extra visibility for an error to occur.\n+            (Ok(value_binding), Ok(type_binding)) => {\n                 let vis = directive.vis.get();\n                 if !value_binding.pseudo_vis().is_at_least(vis, self) &&\n                    !type_binding.pseudo_vis().is_at_least(vis, self) {"}, {"sha": "b3d3667fd42ccf251e6a3e1ac797a480607ca8ef", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd4781547852c9bf34ffcf5362b1e25da84ecc51/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4781547852c9bf34ffcf5362b1e25da84ecc51/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=dd4781547852c9bf34ffcf5362b1e25da84ecc51", "patch": "@@ -19,7 +19,7 @@ use std::iter;\n use std::slice;\n use std::mem;\n use std::vec;\n-use attr;\n+use attr::{self, HasAttrs};\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n use std::rc::Rc;\n \n@@ -243,12 +243,20 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n                    tested_submods: Vec<(ast::Ident, ast::Ident)>) -> (P<ast::Item>, ast::Ident) {\n     let super_ = token::str_to_ident(\"super\");\n \n+    // Generate imports with `#[allow(private_in_public)]` to work around issue #36768.\n+    let allow_private_in_public = cx.ext_cx.attribute(DUMMY_SP, cx.ext_cx.meta_list(\n+        DUMMY_SP,\n+        InternedString::new(\"allow\"),\n+        vec![cx.ext_cx.meta_list_item_word(DUMMY_SP, InternedString::new(\"private_in_public\"))],\n+    ));\n     let items = tests.into_iter().map(|r| {\n         cx.ext_cx.item_use_simple(DUMMY_SP, ast::Visibility::Public,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n+            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n         cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Visibility::Public, r, path)\n+            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     })).collect();\n \n     let reexport_mod = ast::Mod {"}]}