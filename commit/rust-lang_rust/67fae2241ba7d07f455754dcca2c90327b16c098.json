{"sha": "67fae2241ba7d07f455754dcca2c90327b16c098", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZmFlMjI0MWJhN2QwN2Y0NTU3NTRkY2NhMmM5MDMyN2IxNmMwOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-28T02:17:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-28T02:17:10Z"}, "message": "Auto merge of #68587 - JohnTitor:rollup-fz45xwc, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #68200 (Stabilize the debug_map_key_value feature)\n - #68383 (Clean up E0205 explanation)\n - #68412 (Clean up E0207 explanation)\n - #68454 (clean up E0214 explanation)\n - #68482 (clean up error codes explanation)\n - #68563 (Don't call `tcx.fn_sig` on closures)\n - #68570 (Bump LLVM submodule to fix LLVM assertion failure in MSP430 interrupt generation.)\n - #68571 (check_match: extract common logic)\n - #68573 (Clean up E0262 explanation)\n - #68575 (Disable the testcase for Vxworks.)\n - #68581 (Add support for icebreakers-cleanup-crew commands)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d9fa61b66ef5737c0a8d8b25bc3fe1689721d020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9fa61b66ef5737c0a8d8b25bc3fe1689721d020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67fae2241ba7d07f455754dcca2c90327b16c098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67fae2241ba7d07f455754dcca2c90327b16c098", "html_url": "https://github.com/rust-lang/rust/commit/67fae2241ba7d07f455754dcca2c90327b16c098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67fae2241ba7d07f455754dcca2c90327b16c098/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08594515926df9b23b912628d9f8c814a30edcb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/08594515926df9b23b912628d9f8c814a30edcb7", "html_url": "https://github.com/rust-lang/rust/commit/08594515926df9b23b912628d9f8c814a30edcb7"}, {"sha": "aac5788a618863000184cc0c8bb48153143a5378", "url": "https://api.github.com/repos/rust-lang/rust/commits/aac5788a618863000184cc0c8bb48153143a5378", "html_url": "https://github.com/rust-lang/rust/commit/aac5788a618863000184cc0c8bb48153143a5378"}], "stats": {"total": 151, "additions": 103, "deletions": 48}, "files": [{"sha": "ae839bf2ac32b7d96c419045d2a436554ae6445a", "filename": "src/doc/unstable-book/src/library-features/debug-map-key-value.md", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdebug-map-key-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdebug-map-key-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdebug-map-key-value.md?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1,9 +0,0 @@\n-# `debug_map_key_value`\n-\n-The tracking issue for this feature is: [#62482]\n-\n-[#62482]: https://github.com/rust-lang/rust/issues/62482\n-\n-------------------------\n-\n-Add the methods `key` and `value` to `DebugMap` so that an entry can be formatted across multiple calls without additional buffering."}, {"sha": "63866a5d110e38cf31852f2b79edfff13752f08e", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -778,7 +778,6 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(debug_map_key_value)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<(String, i32)>);\n@@ -796,7 +795,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     ///     \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n     /// );\n     /// ```\n-    #[unstable(feature = \"debug_map_key_value\", reason = \"recently added\", issue = \"62482\")]\n+    #[stable(feature = \"debug_map_key_value\", since = \"1.42.0\")]\n     pub fn key(&mut self, key: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             assert!(\n@@ -843,7 +842,6 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(debug_map_key_value)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<(String, i32)>);\n@@ -861,7 +859,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     ///     \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n     /// );\n     /// ```\n-    #[unstable(feature = \"debug_map_key_value\", reason = \"recently added\", issue = \"62482\")]\n+    #[stable(feature = \"debug_map_key_value\", since = \"1.42.0\")]\n     pub fn value(&mut self, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             assert!(self.has_key, \"attempted to format a map value before its key\");"}, {"sha": "197536158bec151b707f986d5a10bd8859fc0285", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -4,7 +4,6 @@\n #![feature(cell_update)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n-#![feature(debug_map_key_value)]\n #![feature(debug_non_exhaustive)]\n #![feature(dec2flt)]\n #![feature(exact_size_is_empty)]"}, {"sha": "da53b671ad0cc8e6b57359faa0f3c9cf12eda9d5", "filename": "src/librustc_error_codes/error_codes/E0206.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0206.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0206.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0206.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,12 +1,18 @@\n-You can only implement `Copy` for a struct or enum. Both of the following\n-examples will fail, because neither `[u8; 256]` nor `&'static mut Bar`\n-(mutable reference to `Bar`) is a struct or enum:\n+The `Copy` trait was implemented on a type which is neither a struct nor an\n+enum.\n+\n+Erroneous code example:\n \n ```compile_fail,E0206\n type Foo = [u8; 256];\n-impl Copy for Foo { } // error\n+impl Copy for Foo { } // error!\n \n #[derive(Copy, Clone)]\n struct Bar;\n-impl Copy for &'static mut Bar { } // error\n+\n+impl Copy for &'static mut Bar { } // error!\n ```\n+\n+You can only implement `Copy` for a struct or an enum. Both of the previous\n+examples will fail, because neither `[u8; 256]` nor `&'static mut Bar`\n+(mutable reference to `Bar`) is a struct or enum."}, {"sha": "21e7e461c753b3a347b59ada90de27d53fbe4af2", "filename": "src/librustc_error_codes/error_codes/E0207.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0207.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0207.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0207.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,3 +1,19 @@\n+A type or lifetime parameter that is specified for `impl` is not constrained.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0207\n+struct Foo;\n+\n+impl<T: Default> Foo {\n+    // error: the type parameter `T` is not constrained by the impl trait, self\n+    // type, or predicates [E0207]\n+    fn get(&self) -> T {\n+        <T as Default>::default()\n+    }\n+}\n+```\n+\n Any type parameter or lifetime parameter of an `impl` must meet at least one of\n the following criteria:\n \n@@ -10,19 +26,7 @@ the following criteria:\n ### Error example 1\n \n Suppose we have a struct `Foo` and we would like to define some methods for it.\n-The following definition leads to a compiler error:\n-\n-```compile_fail,E0207\n-struct Foo;\n-\n-impl<T: Default> Foo {\n-// error: the type parameter `T` is not constrained by the impl trait, self\n-// type, or predicates [E0207]\n-    fn get(&self) -> T {\n-        <T as Default>::default()\n-    }\n-}\n-```\n+The previous code example has a definition which leads to a compiler error:\n \n The problem is that the parameter `T` does not appear in the implementing type\n (`Foo`) of the impl. In this case, we can fix the error by moving the type"}, {"sha": "b64ee80e284d5ce3868c48d12064aef16fc61198", "filename": "src/librustc_error_codes/error_codes/E0214.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0214.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0214.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0214.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,12 +1,17 @@\n A generic type was described using parentheses rather than angle brackets.\n-For example:\n+\n+Erroneous code example:\n \n ```compile_fail,E0214\n-fn main() {\n-    let v: Vec(&str) = vec![\"foo\"];\n-}\n+let v: Vec(&str) = vec![\"foo\"];\n ```\n \n This is not currently supported: `v` should be defined as `Vec<&str>`.\n Parentheses are currently only used with generic types when defining parameters\n for `Fn`-family traits.\n+\n+The previous code example fixed:\n+\n+```\n+let v: Vec<&str> = vec![\"foo\"];\n+```"}, {"sha": "ddc54007c8c52b9bf26a481db2d4d859adefd28b", "filename": "src/librustc_error_codes/error_codes/E0220.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0220.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0220.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0220.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,4 +1,5 @@\n-You used an associated type which isn't defined in the trait.\n+The associated type used was not defined in the trait.\n+\n Erroneous code example:\n \n ```compile_fail,E0220"}, {"sha": "26111ca42933337d55ef60ca709bc48b7ee4b8ca", "filename": "src/librustc_error_codes/error_codes/E0221.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0221.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0221.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0221.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,5 +1,6 @@\n An attempt was made to retrieve an associated type, but the type was ambiguous.\n-For example:\n+\n+Erroneous code example:\n \n ```compile_fail,E0221\n trait T1 {}"}, {"sha": "fbf1b8d7033141a7b120971e98ddc7ddefad81c5", "filename": "src/librustc_error_codes/error_codes/E0222.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0222.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0222.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0222.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,5 +1,6 @@\n An attempt was made to constrain an associated type.\n-For example:\n+\n+Erroneous code example:\n \n ```compile_fail,E0222\n pub trait Vehicle {"}, {"sha": "67419d53ef9d10c064d3ea1b1d1179741e34ce62", "filename": "src/librustc_error_codes/error_codes/E0262.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0262.md", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_error_codes%2Ferror_codes%2FE0262.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0262.md?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1,8 +1,12 @@\n-Declaring certain lifetime names in parameters is disallowed. For example,\n-because the `'static` lifetime is a special built-in lifetime name denoting\n-the lifetime of the entire program, this is an error:\n+An invalid name was used for a lifetime parameter.\n+\n+Erroneous code example:\n \n ```compile_fail,E0262\n // error, invalid lifetime parameter name `'static`\n fn foo<'static>(x: &'static str) { }\n ```\n+\n+Declaring certain lifetime names in parameters is disallowed. For example,\n+because the `'static` lifetime is a special built-in lifetime name denoting\n+the lifetime of the entire program, this is an error:"}, {"sha": "5eeb92f583b98ef1bd363f4bf12401893585e08c", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -86,6 +86,10 @@ pub fn provide(providers: &mut Providers<'_>) {\n     /// Const evaluability whitelist is here to check evaluability at the\n     /// top level beforehand.\n     fn is_const_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> Option<bool> {\n+        if tcx.is_closure(def_id) {\n+            return None;\n+        }\n+\n         match tcx.fn_sig(def_id).abi() {\n             Abi::RustIntrinsic | Abi::PlatformIntrinsic => {\n                 Some(tcx.lookup_const_stability(def_id).is_some())"}, {"sha": "08ed6b521b502d04a2356bdfa3202502a366d1c4", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -586,7 +586,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         module: DefId,\n-        f: impl for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R,\n+        f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>) -> R,\n     ) -> R {\n         let pattern_arena = TypedArena::default();\n "}, {"sha": "82822f0c471a4d2be1a83acaeec5f464e3dc40de", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -140,6 +140,11 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         (pattern, pattern_ty)\n     }\n \n+    fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n+        let module = self.tcx.hir().get_module_parent(hir_id);\n+        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |cx| f(cx));\n+    }\n+\n     fn check_match(\n         &mut self,\n         scrut: &hir::Expr<'_>,\n@@ -151,8 +156,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             self.check_patterns(arm.guard.is_some(), &arm.pat);\n         }\n \n-        let module = self.tcx.hir().get_module_parent(scrut.hir_id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n+        self.check_in_cx(scrut.hir_id, |ref mut cx| {\n             let mut have_errors = false;\n \n             let inlined_arms: Vec<_> = arms\n@@ -180,8 +184,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     }\n \n     fn check_irrefutable(&self, pat: &'tcx Pat<'tcx>, origin: &str, sp: Option<Span>) {\n-        let module = self.tcx.hir().get_module_parent(pat.hir_id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n+        self.check_in_cx(pat.hir_id, |ref mut cx| {\n             let (pattern, pattern_ty) = self.lower_pattern(cx, pat, &mut false);\n             let pats: Matrix<'_, '_> = vec![PatStack::from_pattern(pattern)].into_iter().collect();\n "}, {"sha": "d7cdb4359223be265da34ebeaa00b92b7c5419fd", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -1 +1 @@\n-Subproject commit a56b846ec7c96d8dc86418819baee40d70c92974\n+Subproject commit d7cdb4359223be265da34ebeaa00b92b7c5419fd"}, {"sha": "2e721b8533413c27941b9f51e76632038039c296", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #68542\n+// Tests that we don't ICE when a closure appears\n+// in the length part of an array.\n+\n+struct Bug {\n+    a: [(); (|| { 0 })()] //~ ERROR calls in constants are limited to\n+    //~^ ERROR evaluation of constant value failed\n+}\n+\n+fn main() {}"}, {"sha": "815cc9d836f9237b57bc89acacefb9f8653ab71c", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -0,0 +1,16 @@\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n+   |\n+LL |     a: [(); (|| { 0 })()]\n+   |             ^^^^^^^^^^^^\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n+   |\n+LL |     a: [(); (|| { 0 })()]\n+   |             ^^^^^^^^^^^^ calling non-const function `Bug::a::{{constant}}#0::{{closure}}#0`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0015, E0080.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "c5c824ac58d30423fa866ff145418d3717429e70", "filename": "src/test/ui/env-funky-keys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Ftest%2Fui%2Fenv-funky-keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/src%2Ftest%2Fui%2Fenv-funky-keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-funky-keys.rs?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -6,6 +6,7 @@\n // ignore-cloudabi no execve\n // ignore-emscripten no execve\n // ignore-sgx no execve\n+// ignore-vxworks no execve\n // no-prefer-dynamic\n \n #![feature(rustc_private)]"}, {"sha": "7ece7f977ce2a39b76c002105aacb1598885a36a", "filename": "triagebot.toml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67fae2241ba7d07f455754dcca2c90327b16c098/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/67fae2241ba7d07f455754dcca2c90327b16c098/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=67fae2241ba7d07f455754dcca2c90327b16c098", "patch": "@@ -19,3 +19,14 @@ Thanks! <3\n [instructions]: https://rust-lang.github.io/rustc-guide/ice-breaker/llvm.html\n \"\"\"\n label = \"ICEBreaker-LLVM\"\n+\n+[ping.icebreakers-cleanup-crew]\n+message = \"\"\"\\\n+Hey Cleanup Crew ICE-breakers! This bug has been identified as a good\n+\"Cleanup ICE-breaking candidate\". In case it's useful, here are some\n+[instructions] for tackling these sorts of bugs. Maybe take a look?\n+Thanks! <3\n+\n+[instructions]: https://rust-lang.github.io/rustc-guide/ice-breaker/cleanup-crew.html\n+\"\"\"\n+label = \"ICEBreaker-Cleanup-Crew\""}]}