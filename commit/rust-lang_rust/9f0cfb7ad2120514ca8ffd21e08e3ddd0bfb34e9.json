{"sha": "9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMGNmYjdhZDIxMjA1MTRjYThmZmQyMWUwOGUzZGRkMGJmYjM0ZTk=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-02-14T22:56:28Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-02-25T01:59:58Z"}, "message": "Teach the server about Semantic Tokens proposed LSP", "tree": {"sha": "b8ca50525e88fbdfee8b34d826cc0526ff0c3787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ca50525e88fbdfee8b34d826cc0526ff0c3787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "html_url": "https://github.com/rust-lang/rust/commit/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558d263a0c602ef12914cbb10c263a9e2bb96bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/558d263a0c602ef12914cbb10c263a9e2bb96bf2", "html_url": "https://github.com/rust-lang/rust/commit/558d263a0c602ef12914cbb10c263a9e2bb96bf2"}], "stats": {"total": 279, "additions": 239, "deletions": 40}, "files": [{"sha": "82e10bc7e6ad199b1a21f83791fe5a5a4cebc660", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -75,7 +75,7 @@ pub use crate::{\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     ssr::SsrError,\n-    syntax_highlighting::HighlightedRange,\n+    syntax_highlighting::{tags, HighlightedRange},\n };\n \n pub use hir::Documentation;"}, {"sha": "812229b4e0b483a3056ecca0a750d027a7185ed3", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -17,32 +17,32 @@ use crate::{\n };\n \n pub mod tags {\n-    pub(crate) const FIELD: &str = \"field\";\n-    pub(crate) const FUNCTION: &str = \"function\";\n-    pub(crate) const MODULE: &str = \"module\";\n-    pub(crate) const CONSTANT: &str = \"constant\";\n-    pub(crate) const MACRO: &str = \"macro\";\n-\n-    pub(crate) const VARIABLE: &str = \"variable\";\n-    pub(crate) const VARIABLE_MUT: &str = \"variable.mut\";\n-\n-    pub(crate) const TYPE: &str = \"type\";\n-    pub(crate) const TYPE_BUILTIN: &str = \"type.builtin\";\n-    pub(crate) const TYPE_SELF: &str = \"type.self\";\n-    pub(crate) const TYPE_PARAM: &str = \"type.param\";\n-    pub(crate) const TYPE_LIFETIME: &str = \"type.lifetime\";\n-\n-    pub(crate) const LITERAL_BYTE: &str = \"literal.byte\";\n-    pub(crate) const LITERAL_NUMERIC: &str = \"literal.numeric\";\n-    pub(crate) const LITERAL_CHAR: &str = \"literal.char\";\n-\n-    pub(crate) const LITERAL_COMMENT: &str = \"comment\";\n-    pub(crate) const LITERAL_STRING: &str = \"string\";\n-    pub(crate) const LITERAL_ATTRIBUTE: &str = \"attribute\";\n-\n-    pub(crate) const KEYWORD: &str = \"keyword\";\n-    pub(crate) const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n-    pub(crate) const KEYWORD_CONTROL: &str = \"keyword.control\";\n+    pub const FIELD: &str = \"field\";\n+    pub const FUNCTION: &str = \"function\";\n+    pub const MODULE: &str = \"module\";\n+    pub const CONSTANT: &str = \"constant\";\n+    pub const MACRO: &str = \"macro\";\n+\n+    pub const VARIABLE: &str = \"variable\";\n+    pub const VARIABLE_MUT: &str = \"variable.mut\";\n+\n+    pub const TYPE: &str = \"type\";\n+    pub const TYPE_BUILTIN: &str = \"type.builtin\";\n+    pub const TYPE_SELF: &str = \"type.self\";\n+    pub const TYPE_PARAM: &str = \"type.param\";\n+    pub const TYPE_LIFETIME: &str = \"type.lifetime\";\n+\n+    pub const LITERAL_BYTE: &str = \"literal.byte\";\n+    pub const LITERAL_NUMERIC: &str = \"literal.numeric\";\n+    pub const LITERAL_CHAR: &str = \"literal.char\";\n+\n+    pub const LITERAL_COMMENT: &str = \"comment\";\n+    pub const LITERAL_STRING: &str = \"string\";\n+    pub const LITERAL_ATTRIBUTE: &str = \"attribute\";\n+\n+    pub const KEYWORD: &str = \"keyword\";\n+    pub const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n+    pub const KEYWORD_CONTROL: &str = \"keyword.control\";\n }\n \n #[derive(Debug)]"}, {"sha": "638987ee81967cd16dda30bf1e50ceaf027179f4", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -1,12 +1,15 @@\n //! Advertizes the capabilities of the LSP Server.\n \n+use crate::semantic_tokens;\n+\n use lsp_types::{\n     CallHierarchyServerCapability, CodeActionProviderCapability, CodeLensOptions,\n     CompletionOptions, DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n     ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n-    SelectionRangeProviderCapability, ServerCapabilities, SignatureHelpOptions,\n-    TextDocumentSyncCapability, TextDocumentSyncKind, TextDocumentSyncOptions,\n-    TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n+    SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n+    SemanticTokensOptions, SemanticTokensServerCapabilities, ServerCapabilities,\n+    SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n+    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -57,7 +60,20 @@ pub fn server_capabilities() -> ServerCapabilities {\n         execute_command_provider: None,\n         workspace: None,\n         call_hierarchy_provider: Some(CallHierarchyServerCapability::Simple(true)),\n-        semantic_tokens_provider: None,\n+        semantic_tokens_provider: Some(SemanticTokensServerCapabilities::SemanticTokensOptions(\n+            SemanticTokensOptions {\n+                legend: SemanticTokensLegend {\n+                    token_types: semantic_tokens::supported_token_types().iter().cloned().collect(),\n+                    token_modifiers: semantic_tokens::supported_token_modifiers()\n+                        .iter()\n+                        .cloned()\n+                        .collect(),\n+                },\n+\n+                document_provider: Some(SemanticTokensDocumentProvider::Bool(true)),\n+                ..SemanticTokensOptions::default()\n+            },\n+        )),\n         experimental: Default::default(),\n     }\n }"}, {"sha": "5fcb46b6174b2d839588f007cc8100e9a6ab386e", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -4,19 +4,20 @@\n use lsp_types::{\n     self, CreateFile, DiagnosticSeverity, DocumentChangeOperation, DocumentChanges, Documentation,\n     Location, LocationLink, MarkupContent, MarkupKind, Position, Range, RenameFile, ResourceOp,\n-    SymbolKind, TextDocumentEdit, TextDocumentIdentifier, TextDocumentItem,\n-    TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, WorkspaceEdit,\n+    SemanticTokenModifier, SemanticTokenType, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n+    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n+    WorkspaceEdit,\n };\n use ra_ide::{\n-    translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n+    tags, translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n     FileRange, FileSystemEdit, Fold, FoldKind, InsertTextFormat, LineCol, LineIndex,\n     NavigationTarget, RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_vfs::LineEndings;\n \n-use crate::{req, world::WorldSnapshot, Result};\n+use crate::{req, semantic_tokens, world::WorldSnapshot, Result};\n \n pub trait Conv {\n     type Output;\n@@ -302,6 +303,76 @@ impl ConvWith<&FoldConvCtx<'_>> for Fold {\n     }\n }\n \n+impl Conv for &'static str {\n+    type Output = (SemanticTokenType, Vec<SemanticTokenModifier>);\n+\n+    fn conv(self) -> (SemanticTokenType, Vec<SemanticTokenModifier>) {\n+        let token_type: SemanticTokenType = match self {\n+            tags::FIELD => SemanticTokenType::MEMBER,\n+            tags::FUNCTION => SemanticTokenType::FUNCTION,\n+            tags::MODULE => SemanticTokenType::NAMESPACE,\n+            tags::CONSTANT => {\n+                return (\n+                    SemanticTokenType::VARIABLE,\n+                    vec![SemanticTokenModifier::STATIC, SemanticTokenModifier::READONLY],\n+                )\n+            }\n+            tags::MACRO => SemanticTokenType::MACRO,\n+\n+            tags::VARIABLE => {\n+                return (SemanticTokenType::VARIABLE, vec![SemanticTokenModifier::READONLY])\n+            }\n+            tags::VARIABLE_MUT => SemanticTokenType::VARIABLE,\n+\n+            tags::TYPE => SemanticTokenType::TYPE,\n+            tags::TYPE_BUILTIN => SemanticTokenType::TYPE,\n+            tags::TYPE_SELF => {\n+                return (SemanticTokenType::TYPE, vec![SemanticTokenModifier::REFERENCE])\n+            }\n+            tags::TYPE_PARAM => SemanticTokenType::TYPE_PARAMETER,\n+            tags::TYPE_LIFETIME => {\n+                return (SemanticTokenType::LABEL, vec![SemanticTokenModifier::REFERENCE])\n+            }\n+\n+            tags::LITERAL_BYTE => SemanticTokenType::NUMBER,\n+            tags::LITERAL_NUMERIC => SemanticTokenType::NUMBER,\n+            tags::LITERAL_CHAR => SemanticTokenType::NUMBER,\n+\n+            tags::LITERAL_COMMENT => {\n+                return (SemanticTokenType::COMMENT, vec![SemanticTokenModifier::DOCUMENTATION])\n+            }\n+\n+            tags::LITERAL_STRING => SemanticTokenType::STRING,\n+            tags::LITERAL_ATTRIBUTE => SemanticTokenType::KEYWORD,\n+\n+            tags::KEYWORD => SemanticTokenType::KEYWORD,\n+            tags::KEYWORD_UNSAFE => SemanticTokenType::KEYWORD,\n+            tags::KEYWORD_CONTROL => SemanticTokenType::KEYWORD,\n+            unknown => panic!(\"Unknown semantic token: {}\", unknown),\n+        };\n+\n+        (token_type, vec![])\n+    }\n+}\n+\n+impl Conv for (SemanticTokenType, Vec<SemanticTokenModifier>) {\n+    type Output = (u32, u32);\n+\n+    fn conv(self) -> Self::Output {\n+        let token_index =\n+            semantic_tokens::supported_token_types().iter().position(|it| *it == self.0).unwrap();\n+        let mut token_modifier_bitset = 0;\n+        for modifier in self.1.iter() {\n+            token_modifier_bitset |= semantic_tokens::supported_token_modifiers()\n+                .iter()\n+                .position(|it| it == modifier)\n+                .unwrap();\n+        }\n+\n+        (token_index as u32, token_modifier_bitset as u32)\n+    }\n+}\n+\n impl<T: ConvWith<CTX>, CTX> ConvWith<CTX> for Option<T> {\n     type Output = Option<T::Output>;\n "}, {"sha": "a0f96882341dd16220a1e0953bc0778a860cfcf7", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -36,6 +36,7 @@ pub mod req;\n mod config;\n mod world;\n mod diagnostics;\n+mod semantic_tokens;\n \n use serde::de::DeserializeOwned;\n "}, {"sha": "6e9e604a6556039752dea2ffa79ee2cccf18cfd4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -528,6 +528,7 @@ fn on_request(\n         .on::<req::CallHierarchyIncomingCalls>(handlers::handle_call_hierarchy_incoming)?\n         .on::<req::CallHierarchyOutgoingCalls>(handlers::handle_call_hierarchy_outgoing)?\n         .on::<req::Ssr>(handlers::handle_ssr)?\n+        .on::<req::SemanticTokensRequest>(handlers::handle_semantic_tokens)?\n         .finish();\n     Ok(())\n }"}, {"sha": "e13e7c95a25f046e54a46ccfa27b2433b59849bd", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -16,8 +16,9 @@ use lsp_types::{\n     CodeAction, CodeActionOrCommand, CodeActionResponse, CodeLens, Command, CompletionItem,\n     Diagnostic, DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n-    PrepareRenameResponse, Range, RenameParams, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, WorkspaceEdit,\n+    PrepareRenameResponse, Range, RenameParams, SemanticTokenModifier, SemanticTokenType,\n+    SemanticTokens, SemanticTokensParams, SemanticTokensResult, SymbolInformation,\n+    TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n     AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n@@ -38,6 +39,7 @@ use crate::{\n     diagnostics::DiagnosticTask,\n     from_json,\n     req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n+    semantic_tokens::SemanticTokensBuilder,\n     world::WorldSnapshot,\n     LspError, Result,\n };\n@@ -1068,3 +1070,25 @@ pub fn handle_call_hierarchy_outgoing(\n \n     Ok(Some(res))\n }\n+\n+pub fn handle_semantic_tokens(\n+    world: WorldSnapshot,\n+    params: SemanticTokensParams,\n+) -> Result<Option<SemanticTokensResult>> {\n+    let _p = profile(\"handle_semantic_tokens\");\n+\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+\n+    let mut builder = SemanticTokensBuilder::default();\n+\n+    for h in world.analysis().highlight(file_id)?.into_iter() {\n+        let type_and_modifiers: (SemanticTokenType, Vec<SemanticTokenModifier>) = h.tag.conv();\n+        let (token_type, token_modifiers) = type_and_modifiers.conv();\n+        builder.push(h.range.conv_with(&line_index), token_type, token_modifiers);\n+    }\n+\n+    let tokens = SemanticTokens { data: builder.build(), ..Default::default() };\n+\n+    Ok(Some(tokens.into()))\n+}"}, {"sha": "3734899bc09b6ad965566655d9c54a37d0f418fb", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -12,9 +12,9 @@ pub use lsp_types::{\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n     PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,\n     PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams, SelectionRange,\n-    SelectionRangeParams, ServerCapabilities, ShowMessageParams, SignatureHelp, SymbolKind,\n-    TextDocumentEdit, TextDocumentPositionParams, TextEdit, WorkDoneProgressParams, WorkspaceEdit,\n-    WorkspaceSymbolParams,\n+    SelectionRangeParams, SemanticTokensParams, SemanticTokensResult, ServerCapabilities,\n+    ShowMessageParams, SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams,\n+    TextEdit, WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}, {"sha": "f76605aaa57551fed11e633b7c7f6465a9113b98", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=9f0cfb7ad2120514ca8ffd21e08e3ddd0bfb34e9", "patch": "@@ -0,0 +1,86 @@\n+use lsp_types::{Range, SemanticToken, SemanticTokenModifier, SemanticTokenType};\n+\n+const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n+    SemanticTokenType::COMMENT,\n+    SemanticTokenType::KEYWORD,\n+    SemanticTokenType::STRING,\n+    SemanticTokenType::NUMBER,\n+    SemanticTokenType::REGEXP,\n+    SemanticTokenType::OPERATOR,\n+    SemanticTokenType::NAMESPACE,\n+    SemanticTokenType::TYPE,\n+    SemanticTokenType::STRUCT,\n+    SemanticTokenType::CLASS,\n+    SemanticTokenType::INTERFACE,\n+    SemanticTokenType::ENUM,\n+    SemanticTokenType::TYPE_PARAMETER,\n+    SemanticTokenType::FUNCTION,\n+    SemanticTokenType::MEMBER,\n+    SemanticTokenType::PROPERTY,\n+    SemanticTokenType::MACRO,\n+    SemanticTokenType::VARIABLE,\n+    SemanticTokenType::PARAMETER,\n+    SemanticTokenType::LABEL,\n+];\n+\n+const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n+    SemanticTokenModifier::DOCUMENTATION,\n+    SemanticTokenModifier::DECLARATION,\n+    SemanticTokenModifier::DEFINITION,\n+    SemanticTokenModifier::REFERENCE,\n+    SemanticTokenModifier::STATIC,\n+    SemanticTokenModifier::ABSTRACT,\n+    SemanticTokenModifier::DEPRECATED,\n+    SemanticTokenModifier::ASYNC,\n+    SemanticTokenModifier::VOLATILE,\n+    SemanticTokenModifier::READONLY,\n+];\n+\n+pub(crate) fn supported_token_types() -> &'static [SemanticTokenType] {\n+    SUPPORTED_TYPES\n+}\n+\n+pub(crate) fn supported_token_modifiers() -> &'static [SemanticTokenModifier] {\n+    SUPPORTED_MODIFIERS\n+}\n+\n+#[derive(Default)]\n+pub(crate) struct SemanticTokensBuilder {\n+    prev_line: u32,\n+    prev_char: u32,\n+    data: Vec<SemanticToken>,\n+}\n+\n+impl SemanticTokensBuilder {\n+    pub fn push(&mut self, range: Range, token_index: u32, modifier_bitset: u32) {\n+        let mut push_line = range.start.line as u32;\n+        let mut push_char = range.start.character as u32;\n+\n+        if !self.data.is_empty() {\n+            push_line -= self.prev_line;\n+            if push_line == 0 {\n+                push_char -= self.prev_char;\n+            }\n+        }\n+\n+        // A token cannot be multiline\n+        let token_len = range.end.character - range.start.character;\n+\n+        let token = SemanticToken {\n+            delta_line: push_line,\n+            delta_start: push_char,\n+            length: token_len as u32,\n+            token_type: token_index,\n+            token_modifiers_bitset: modifier_bitset,\n+        };\n+\n+        self.data.push(token);\n+\n+        self.prev_line = range.start.line as u32;\n+        self.prev_char = range.start.character as u32;\n+    }\n+\n+    pub fn build(self) -> Vec<SemanticToken> {\n+        self.data\n+    }\n+}"}]}