{"sha": "9bb66634314323e92eb1f33fed0a059f46b0aa4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjY2NjM0MzE0MzIzZTkyZWIxZjMzZmVkMGEwNTlmNDZiMGFhNGM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T11:33:28Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T13:08:18Z"}, "message": "[eddyb] rustc_codegen_ssa: handle LLVM unsafety correctly.", "tree": {"sha": "5f0cec324530e38af8f8925c2a50418cfc6668c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0cec324530e38af8f8925c2a50418cfc6668c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb66634314323e92eb1f33fed0a059f46b0aa4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb66634314323e92eb1f33fed0a059f46b0aa4c", "html_url": "https://github.com/rust-lang/rust/commit/9bb66634314323e92eb1f33fed0a059f46b0aa4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb66634314323e92eb1f33fed0a059f46b0aa4c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51", "html_url": "https://github.com/rust-lang/rust/commit/bf7f8cd3fc2164b8669a13aad6197f1c8c42da51"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "7f0e18e1aebf18c2026c5f5e97061b98fc3f1f55", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -84,8 +84,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let asm = CString::new(ia.asm.as_str().as_bytes()).unwrap();\n         let constraint_cstr = CString::new(all_constraints).unwrap();\n         let r = self.inline_asm_call(\n-            asm.as_ptr(),\n-            constraint_cstr.as_ptr(),\n+            &asm,\n+            &constraint_cstr,\n             &inputs,\n             output_type,\n             ia.volatile,"}, {"sha": "102fc95529d2796f341dfbb258982cb759a1724a", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -194,7 +194,9 @@ pub fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n \n             // Run replace-all-uses-with for statics that need it\n             for &(old_g, new_g) in cx.statics_to_rauw().borrow().iter() {\n-                cx.static_replace_all_uses(old_g, new_g)\n+                unsafe {\n+                    cx.static_replace_all_uses(old_g, new_g)\n+                }\n             }\n \n             // Create the llvm.used variable"}, {"sha": "b8df95e3183fda4b9bf9de253a89469fea725f13", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -28,6 +28,7 @@ use rustc_codegen_ssa::base::to_immediate;\n use rustc_codegen_ssa::mir::operand::{OperandValue, OperandRef};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use std::borrow::Cow;\n+use std::ffi::CStr;\n use std::ops::Range;\n use std::ptr;\n \n@@ -838,7 +839,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn inline_asm_call(&mut self, asm: *const c_char, cons: *const c_char,\n+    fn inline_asm_call(&mut self, asm: &CStr, cons: &CStr,\n                        inputs: &[&'ll Value], output: &'ll Type,\n                        volatile: bool, alignstack: bool,\n                        dia: syntax::ast::AsmDialect) -> Option<&'ll Value> {\n@@ -858,11 +859,17 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let fty = self.cx().type_func(&argtys[..], output);\n         unsafe {\n             // Ask LLVM to verify that the constraints are well-formed.\n-            let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons);\n+            let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr());\n             debug!(\"Constraint verification result: {:?}\", constraints_ok);\n             if constraints_ok {\n                 let v = llvm::LLVMRustInlineAsm(\n-                    fty, asm, cons, volatile, alignstack, AsmDialect::from_generic(dia));\n+                    fty,\n+                    asm.as_ptr(),\n+                    cons.as_ptr(),\n+                    volatile,\n+                    alignstack,\n+                    AsmDialect::from_generic(dia),\n+                );\n                 Some(self.call(v, inputs, None))\n             } else {\n                 // LLVM has detected an issue with our constraints, bail out\n@@ -1400,10 +1407,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         self.cx\n     }\n \n-    fn delete_basic_block(&mut self, bb: &'ll BasicBlock) {\n-        unsafe {\n-            llvm::LLVMDeleteBasicBlock(bb);\n-        }\n+    unsafe fn delete_basic_block(&mut self, bb: &'ll BasicBlock) {\n+        llvm::LLVMDeleteBasicBlock(bb);\n     }\n \n     fn do_not_inline(&mut self, llret: &'ll Value) {"}, {"sha": "5e45a4f68ae3a593f85d0ff414f3d65eb43bc3e2", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -498,11 +498,9 @@ impl StaticMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             }\n         }\n     }\n-    fn static_replace_all_uses(&self, old_g: &'ll Value, new_g: &'ll Value) {\n-        unsafe {\n-            let bitcast = llvm::LLVMConstPointerCast(new_g, self.val_ty(old_g));\n-            llvm::LLVMReplaceAllUsesWith(old_g, bitcast);\n-            llvm::LLVMDeleteGlobal(old_g);\n-        }\n+    unsafe fn static_replace_all_uses(&self, old_g: &'ll Value, new_g: &'ll Value) {\n+        let bitcast = llvm::LLVMConstPointerCast(new_g, self.val_ty(old_g));\n+        llvm::LLVMReplaceAllUsesWith(old_g, bitcast);\n+        llvm::LLVMDeleteGlobal(old_g);\n     }\n }"}, {"sha": "3757c514d2ce96f2684dc37703162c274b729726", "filename": "src/librustc_codegen_ssa/interfaces/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fbuilder.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -15,7 +15,7 @@ use super::intrinsic::IntrinsicCallMethods;\n use super::type_::ArgTypeMethods;\n use super::HasCodegen;\n use common::{AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope};\n-use libc::c_char;\n+use std::ffi::CStr;\n use mir::operand::OperandRef;\n use mir::place::PlaceRef;\n use rustc::ty::layout::{Align, Size};\n@@ -162,8 +162,8 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     ) -> Self::Value;\n     fn inline_asm_call(\n         &mut self,\n-        asm: *const c_char,\n-        cons: *const c_char,\n+        asm: &CStr,\n+        cons: &CStr,\n         inputs: &[Self::Value],\n         output: Self::Type,\n         volatile: bool,\n@@ -318,6 +318,6 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     ) -> Self::Value;\n     fn zext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n \n-    fn delete_basic_block(&mut self, bb: Self::BasicBlock);\n+    unsafe fn delete_basic_block(&mut self, bb: Self::BasicBlock);\n     fn do_not_inline(&mut self, llret: Self::Value);\n }"}, {"sha": "172c48f8a85ffcbd6f3a929806d6f358a0ddd58c", "filename": "src/librustc_codegen_ssa/interfaces/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Finterfaces%2Fstatics.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -19,5 +19,5 @@ pub trait StaticMethods<'tcx>: Backend<'tcx> {\n     fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;\n     fn get_static(&self, def_id: DefId) -> Self::Value;\n     fn codegen_static(&self, def_id: DefId, is_mutable: bool);\n-    fn static_replace_all_uses(&self, old_g: Self::Value, new_g: Self::Value);\n+    unsafe fn static_replace_all_uses(&self, old_g: Self::Value, new_g: Self::Value);\n }"}, {"sha": "873c3ee367c7094ea0d753b1037bf793e5fbc01c", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb66634314323e92eb1f33fed0a059f46b0aa4c/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=9bb66634314323e92eb1f33fed0a059f46b0aa4c", "patch": "@@ -359,7 +359,9 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         // Unreachable block\n         if !visited.contains(bb.index()) {\n             debug!(\"codegen_mir: block {:?} was not visited\", bb);\n-            bx.delete_basic_block(fx.blocks[bb]);\n+            unsafe {\n+                bx.delete_basic_block(fx.blocks[bb]);\n+            }\n         }\n     }\n }"}]}