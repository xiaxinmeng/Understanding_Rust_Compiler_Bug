{"sha": "86d117832042fa37b5831f8275e5f14b45938b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZDExNzgzMjA0MmZhMzdiNTgzMWY4Mjc1ZTVmMTRiNDU5MzhiNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-30T06:17:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-30T06:17:39Z"}, "message": "Auto merge of #45603 - joshleeb:iss42106, r=estebank\n\nFix duplicate display of error E0502\n\nRef. Repeated \"mutable/immutable borrow\" error messages #42106.\n\nThis PR modifies the return type of [`report_error_if_loan_conflicts_with_restriction`](https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src/librustc_borrowck/borrowck/check_loans.rs#L398-L403) so the result can be checked in [`report_error_if_loans_conflict`](https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src/librustc_borrowck/borrowck/check_loans.rs#L377-L396). This is done to prevent displaying a duplicate of the error message E0502 which is referenced in #42106.\n\nThe output of compiling:\n\n```rust\nfn do_something<T>(collection: &mut Vec<T>) {\n    let _a = &collection;\n    collection.swap(1, 2);\n}\n\nfn main() {}\n```\n\nis now\n\n```bash\n$ rustc src/test/compile-fail/issue-42106.rs\nerror[E0502]: cannot borrow `*collection` as mutable because `collection` is also borrowed as immutable\n  --> src/test/compile-fail/issue-42106.rs:13:5\n   |\n12 |     let _a = &collection;\n   |               ---------- immutable borrow occurs here\n13 |     collection.swap(1, 2);\n   |     ^^^^^^^^^^ mutable borrow occurs here\n14 | }\n   | - immutable borrow ends here\n\nerror: aborting due to 2 previous errors\n```\n\nr? @estebank", "tree": {"sha": "0a11e130f3b21e4c983f3dbe367d1e4447d8777d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a11e130f3b21e4c983f3dbe367d1e4447d8777d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d117832042fa37b5831f8275e5f14b45938b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d117832042fa37b5831f8275e5f14b45938b55", "html_url": "https://github.com/rust-lang/rust/commit/86d117832042fa37b5831f8275e5f14b45938b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d117832042fa37b5831f8275e5f14b45938b55/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875ec8d597eefbd1fb3c040d100ec03d8f66f445", "url": "https://api.github.com/repos/rust-lang/rust/commits/875ec8d597eefbd1fb3c040d100ec03d8f66f445", "html_url": "https://github.com/rust-lang/rust/commit/875ec8d597eefbd1fb3c040d100ec03d8f66f445"}, {"sha": "cf10bcfe4861ce01fe932300fa64dbb4484f3ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf10bcfe4861ce01fe932300fa64dbb4484f3ef7", "html_url": "https://github.com/rust-lang/rust/commit/cf10bcfe4861ce01fe932300fa64dbb4484f3ef7"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "c1d0d849dfb46c33ada376324ebc7b25c1de9e46", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/86d117832042fa37b5831f8275e5f14b45938b55/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d117832042fa37b5831f8275e5f14b45938b55/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=86d117832042fa37b5831f8275e5f14b45938b55", "patch": "@@ -395,18 +395,29 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         assert!(self.bccx.region_scope_tree.scopes_intersect(old_loan.kill_scope,\n                                                        new_loan.kill_scope));\n \n-        self.report_error_if_loan_conflicts_with_restriction(\n-            old_loan, new_loan, old_loan, new_loan) &&\n-        self.report_error_if_loan_conflicts_with_restriction(\n-            new_loan, old_loan, old_loan, new_loan)\n+        let err_old_new = self.report_error_if_loan_conflicts_with_restriction(\n+            old_loan, new_loan, old_loan, new_loan).err();\n+        let err_new_old = self.report_error_if_loan_conflicts_with_restriction(\n+            new_loan, old_loan, old_loan, new_loan).err();\n+\n+        match (err_old_new, err_new_old) {\n+            (Some(mut err), None) | (None, Some(mut err)) => err.emit(),\n+            (Some(mut err_old), Some(mut err_new)) => {\n+                err_old.emit();\n+                err_new.cancel();\n+            }\n+            (None, None) => return true,\n+        }\n+\n+        false\n     }\n \n     pub fn report_error_if_loan_conflicts_with_restriction(&self,\n                                                            loan1: &Loan<'tcx>,\n                                                            loan2: &Loan<'tcx>,\n                                                            old_loan: &Loan<'tcx>,\n                                                            new_loan: &Loan<'tcx>)\n-                                                           -> bool {\n+                                                           -> Result<(), DiagnosticBuilder<'a>> {\n         //! Checks whether the restrictions introduced by `loan1` would\n         //! prohibit `loan2`. Returns false if an error is reported.\n \n@@ -416,7 +427,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                loan2);\n \n         if compatible_borrow_kinds(loan1.kind, loan2.kind) {\n-            return true;\n+            return Ok(());\n         }\n \n         let loan2_base_path = owned_ptr_base_path_rc(&loan2.loan_path);\n@@ -520,11 +531,10 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 _ => { }\n             }\n \n-            err.emit();\n-            return false;\n+            return Err(err);\n         }\n \n-        true\n+        Ok(())\n     }\n \n     fn consume_common(&self,"}, {"sha": "f13f1dd114517083261392b6598d984712ee4553", "filename": "src/test/ui/issue-42106.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86d117832042fa37b5831f8275e5f14b45938b55/src%2Ftest%2Fui%2Fissue-42106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d117832042fa37b5831f8275e5f14b45938b55/src%2Ftest%2Fui%2Fissue-42106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.rs?ref=86d117832042fa37b5831f8275e5f14b45938b55", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn do_something<T>(collection: &mut Vec<T>) {\n+    let _a = &collection;\n+    collection.swap(1, 2);\n+}\n+\n+fn main() {}"}, {"sha": "481cdb5f5b2f65e8458d01c7e634f25f1f0654f2", "filename": "src/test/ui/issue-42106.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86d117832042fa37b5831f8275e5f14b45938b55/src%2Ftest%2Fui%2Fissue-42106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86d117832042fa37b5831f8275e5f14b45938b55/src%2Ftest%2Fui%2Fissue-42106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.stderr?ref=86d117832042fa37b5831f8275e5f14b45938b55", "patch": "@@ -0,0 +1,12 @@\n+error[E0502]: cannot borrow `*collection` as mutable because `collection` is also borrowed as immutable\n+  --> $DIR/issue-42106.rs:13:5\n+   |\n+12 |     let _a = &collection;\n+   |               ---------- immutable borrow occurs here\n+13 |     collection.swap(1, 2);\n+   |     ^^^^^^^^^^ mutable borrow occurs here\n+14 | }\n+   | - immutable borrow ends here\n+\n+error: aborting due to 2 previous errors\n+"}]}