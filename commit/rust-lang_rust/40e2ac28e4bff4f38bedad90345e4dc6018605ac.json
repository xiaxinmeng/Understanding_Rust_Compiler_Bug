{"sha": "40e2ac28e4bff4f38bedad90345e4dc6018605ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZTJhYzI4ZTRiZmY0ZjM4YmVkYWQ5MDM0NWU0ZGM2MDE4NjA1YWM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-08T01:07:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-08T01:07:28Z"}, "message": "Added proper lint for the unit variant/struct warning.", "tree": {"sha": "47d199aac17dd166c60e0882f019d8830495e58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d199aac17dd166c60e0882f019d8830495e58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40e2ac28e4bff4f38bedad90345e4dc6018605ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40e2ac28e4bff4f38bedad90345e4dc6018605ac", "html_url": "https://github.com/rust-lang/rust/commit/40e2ac28e4bff4f38bedad90345e4dc6018605ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40e2ac28e4bff4f38bedad90345e4dc6018605ac/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aed830ee3a8b6cbdbe8e401a5a40afacfba96f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aed830ee3a8b6cbdbe8e401a5a40afacfba96f9", "html_url": "https://github.com/rust-lang/rust/commit/8aed830ee3a8b6cbdbe8e401a5a40afacfba96f9"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "93a46090b90eb018427a3f455b7322a0518ab7c8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40e2ac28e4bff4f38bedad90345e4dc6018605ac/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2ac28e4bff4f38bedad90345e4dc6018605ac/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=40e2ac28e4bff4f38bedad90345e4dc6018605ac", "patch": "@@ -133,6 +133,12 @@ declare_lint! {\n     \"type parameter default erroneously allowed in invalid location\"\n }\n \n+declare_lint! {\n+    pub MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n+    Warn,\n+    \"unit struct or enum variant erroneously allowed to match via path::ident(..)\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -159,6 +165,7 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n             INVALID_TYPE_PARAM_DEFAULT,\n+            MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n             CONST_ERR\n         )\n     }"}, {"sha": "b4f398053d1fd089172ae61417d0594785879d86", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40e2ac28e4bff4f38bedad90345e4dc6018605ac/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2ac28e4bff4f38bedad90345e4dc6018605ac/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=40e2ac28e4bff4f38bedad90345e4dc6018605ac", "patch": "@@ -144,7 +144,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n     add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n-                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT);\n+                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT,\n+                    MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "93ceaf8b11f12e47e9cf41388e320437bed89941", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/40e2ac28e4bff4f38bedad90345e4dc6018605ac/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2ac28e4bff4f38bedad90345e4dc6018605ac/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=40e2ac28e4bff4f38bedad90345e4dc6018605ac", "patch": "@@ -19,6 +19,7 @@ use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n use check::{check_expr_with_lvalue_pref};\n use check::{instantiate_path, resolve_ty_and_def_ufcs, structurally_resolved_type};\n+use lint;\n use require_same_types;\n use util::nodemap::FnvHashMap;\n use session::Session;\n@@ -138,7 +139,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 if pat_is_resolved_const(&tcx.def_map.borrow(), pat) => {\n             if let hir::PatEnum(ref path, ref subpats) = pat.node {\n                 if !(subpats.is_some() && subpats.as_ref().unwrap().is_empty()) {\n-                    bad_struct_kind_err(tcx.sess, pat.span, path, false);\n+                    bad_struct_kind_err(tcx.sess, pat, path, false);\n                     return;\n                 }\n             }\n@@ -590,10 +591,21 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx hir::Pat,\n }\n \n // This function exists due to the warning \"diagnostic code E0164 already used\"\n-fn bad_struct_kind_err(sess: &Session, span: Span, path: &hir::Path, is_warning: bool) {\n+fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: bool) {\n     let name = pprust::path_to_string(path);\n-    span_err_or_warn!(is_warning, sess, span, E0164,\n-        \"`{}` does not name a tuple variant or a tuple struct\", name);\n+    let msg = format!(\"`{}` does not name a tuple variant or a tuple struct\", name);\n+    if lint {\n+        let expanded_msg =\n+            format!(\"{}; RFC 218 disallowed matching of unit variants or unit structs via {}(..)\",\n+                    msg,\n+                    name);\n+        sess.add_lint(lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n+                      pat.id,\n+                      pat.span,\n+                      expanded_msg);\n+    } else {\n+        span_err!(sess, pat.span, E0164, \"{}\", msg);\n+    }\n }\n \n pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n@@ -657,17 +669,8 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                      opt_ty, def, pat.span, pat.id);\n \n     let report_bad_struct_kind = |is_warning| {\n-        bad_struct_kind_err(tcx.sess, pat.span, path, is_warning);\n-        if is_warning {\n-            // Boo! Too painful to attach this to the actual warning,\n-            // it should go away at some point though.\n-            tcx.sess.span_note_without_error(\n-                pat.span,\n-                \"this warning will become a HARD ERROR in a future release. \\\n-                 See RFC 218 for details.\");\n-            return;\n-        }\n-\n+        bad_struct_kind_err(tcx.sess, pat, path, is_warning);\n+        if is_warning { return; }\n         fcx.write_error(pat.id);\n         if let Some(subpats) = subpats {\n             for pat in subpats {"}]}