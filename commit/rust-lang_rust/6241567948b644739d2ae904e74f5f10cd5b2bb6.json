{"sha": "6241567948b644739d2ae904e74f5f10cd5b2bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDE1Njc5NDhiNjQ0NzM5ZDJhZTkwNGU3NGY1ZjEwY2Q1YjJiYjY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T12:49:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T12:49:21Z"}, "message": "Speedup trait impl search for goto_implementation", "tree": {"sha": "7af5ca0990c536409ea1e2044f0fc5aa63a3702d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af5ca0990c536409ea1e2044f0fc5aa63a3702d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6241567948b644739d2ae904e74f5f10cd5b2bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6241567948b644739d2ae904e74f5f10cd5b2bb6", "html_url": "https://github.com/rust-lang/rust/commit/6241567948b644739d2ae904e74f5f10cd5b2bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6241567948b644739d2ae904e74f5f10cd5b2bb6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c782a53148dc2f34be2eafbdf872ab6497632fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c782a53148dc2f34be2eafbdf872ab6497632fd", "html_url": "https://github.com/rust-lang/rust/commit/6c782a53148dc2f34be2eafbdf872ab6497632fd"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "42a805c57503fa4661a32a0723de03c918119071", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6241567948b644739d2ae904e74f5f10cd5b2bb6/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241567948b644739d2ae904e74f5f10cd5b2bb6/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6241567948b644739d2ae904e74f5f10cd5b2bb6", "patch": "@@ -51,7 +51,8 @@ use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n     autoderef,\n     display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n-    method_resolution, to_assoc_type_id,\n+    method_resolution::{self, TyFingerprint},\n+    to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n     InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, Ty,\n@@ -1500,13 +1501,20 @@ impl Impl {\n         def_crates.iter().for_each(|&id| {\n             all.extend(db.inherent_impls_in_crate(id).all_impls().map(Self::from).filter(filter))\n         });\n+        let fp = TyFingerprint::for_impl(&ty.value);\n         for id in def_crates\n             .iter()\n             .flat_map(|&id| Crate { id }.reverse_dependencies(db))\n             .map(|Crate { id }| id)\n             .chain(def_crates.iter().copied())\n         {\n-            all.extend(db.trait_impls_in_crate(id).all_impls().map(Self::from).filter(filter));\n+            match fp {\n+                Some(fp) => all.extend(\n+                    db.trait_impls_in_crate(id).for_self_ty(fp).map(Self::from).filter(filter),\n+                ),\n+                None => all\n+                    .extend(db.trait_impls_in_crate(id).all_impls().map(Self::from).filter(filter)),\n+            }\n         }\n         all\n     }"}, {"sha": "57f37ef4b3e9e5fc7301570fdf8fcf22760569ce", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6241567948b644739d2ae904e74f5f10cd5b2bb6/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241567948b644739d2ae904e74f5f10cd5b2bb6/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=6241567948b644739d2ae904e74f5f10cd5b2bb6", "patch": "@@ -44,7 +44,7 @@ impl TyFingerprint {\n     /// Creates a TyFingerprint for looking up an impl. Only certain types can\n     /// have impls: if we have some `struct S`, we can have an `impl S`, but not\n     /// `impl &S`. Hence, this will return `None` for reference types and such.\n-    pub(crate) fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n+    pub fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n         let fp = match *ty.interned(&Interner) {\n             TyKind::Str => TyFingerprint::Str,\n             TyKind::Never => TyFingerprint::Never,\n@@ -141,6 +141,14 @@ impl TraitImpls {\n         }\n     }\n \n+    /// Queries all trait impls for the given type.\n+    pub fn for_self_ty(&self, fp: TyFingerprint) -> impl Iterator<Item = ImplId> + '_ {\n+        self.map\n+            .values()\n+            .flat_map(move |impls| impls.get(&None).into_iter().chain(impls.get(&Some(fp))))\n+            .flat_map(|it| it.iter().copied())\n+    }\n+\n     /// Queries all impls of the given trait.\n     pub fn for_trait(&self, trait_: TraitId) -> impl Iterator<Item = ImplId> + '_ {\n         self.map"}]}