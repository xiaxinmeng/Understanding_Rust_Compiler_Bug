{"sha": "9f714ef03567d588fbb63c662670fd9326d7348e", "node_id": "C_kwDOAAsO6NoAKDlmNzE0ZWYwMzU2N2Q1ODhmYmI2M2M2NjI2NzBmZDkzMjZkNzM0OGU", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-27T16:40:47Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-27T16:55:21Z"}, "message": "Delegate from `map_id` to `try_map_id`", "tree": {"sha": "8ed1aec35bd2ef4eaa239cd3c9cb378b51b78632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed1aec35bd2ef4eaa239cd3c9cb378b51b78632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f714ef03567d588fbb63c662670fd9326d7348e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGiYvkACgkQB8rDzKfg\nZD/8MQ//XLucDEHIzGdFxwjTgXo8Jgf/I64khEjFVX79eIZcmnbtYCLjOdmi/+wi\ndSmDgnaRRNErnWoDpv0bOsxh6CZLyVqXgBSEY1/tQqDGM8Jjapu/RfC7/92oS0GI\nAJF2SSJDMQ+/EJemYKtWw1TpobnAMjCSJWHYoYW2LFsLHr0dXgTNUVuJRKpD9vP9\n+yfScox4gw7bQwmmy5H5CS0e0Mfl/PfSbx8C/C68zXy56aKwKKbsYjfFfPW70Zk0\n1I5YC5NQZRFBGp3fuEFZbGAg0D8Bywo0vSTkSmERfVK+adZL1s3DvWRVAccIvP+J\nwnU3PpuzfSegqMflGVSsaTJslScdQoVfkIygmmAsOq0wf/vysACk6TWTPoko2kpq\nbq2+gjRAz4fuUuFtWRTmbtlpk5PsDX9vFAfAsmv/YYqsOAjrN7ySsQfh0s++X7Iw\nH8encGfmsnTGvGpx1OJHJbvuARP8ax/xF47aBXF5UDm2Ic0Nw07BApMKxDpHQuOt\nyA+Sxr2ivlB+CgKfS3AlcQ3V+7N3o+9QBEy4cEj60Ed3ZGazbyedzubldH8XaEdf\nLYBHBjqyUCKm3lnobRHwuTV7oDw5YzS/SeNir5wXRwKeluuPQpZ/PyIyxrqcV7tf\nPZSHThm41w4oYP7BwQ8UThXvQPezdHKFMCDiDzLx8dd3NT5Vn1c=\n=8Q4l\n-----END PGP SIGNATURE-----", "payload": "tree 8ed1aec35bd2ef4eaa239cd3c9cb378b51b78632\nparent 04f1c09f90abebd0c6a7658105dec57099a63caa\nauthor Alan Egerton <eggyal@gmail.com> 1638031247 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1638032121 +0000\n\nDelegate from `map_id` to `try_map_id`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f714ef03567d588fbb63c662670fd9326d7348e", "html_url": "https://github.com/rust-lang/rust/commit/9f714ef03567d588fbb63c662670fd9326d7348e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f714ef03567d588fbb63c662670fd9326d7348e/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f1c09f90abebd0c6a7658105dec57099a63caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f1c09f90abebd0c6a7658105dec57099a63caa", "html_url": "https://github.com/rust-lang/rust/commit/04f1c09f90abebd0c6a7658105dec57099a63caa"}], "stats": {"total": 64, "additions": 7, "deletions": 57}, "files": [{"sha": "8f441a1841e91c1ec6af2ef08ea044a7b4a8880d", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 6, "deletions": 57, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9f714ef03567d588fbb63c662670fd9326d7348e/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f714ef03567d588fbb63c662670fd9326d7348e/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=9f714ef03567d588fbb63c662670fd9326d7348e", "patch": "@@ -5,9 +5,13 @@ use std::ptr;\n pub trait IdFunctor: Sized {\n     type Inner;\n \n-    fn map_id<F>(self, f: F) -> Self\n+    #[inline]\n+    fn map_id<F>(self, mut f: F) -> Self\n     where\n-        F: FnMut(Self::Inner) -> Self::Inner;\n+        F: FnMut(Self::Inner) -> Self::Inner,\n+    {\n+        self.try_map_id::<_, !>(|value| Ok(f(value))).into_ok()\n+    }\n \n     fn try_map_id<F, E>(self, f: F) -> Result<Self, E>\n     where\n@@ -17,25 +21,6 @@ pub trait IdFunctor: Sized {\n impl<T> IdFunctor for Box<T> {\n     type Inner = T;\n \n-    #[inline]\n-    fn map_id<F>(self, mut f: F) -> Self\n-    where\n-        F: FnMut(Self::Inner) -> Self::Inner,\n-    {\n-        let raw = Box::into_raw(self);\n-        unsafe {\n-            // SAFETY: The raw pointer points to a valid value of type `T`.\n-            let value = ptr::read(raw);\n-            // SAFETY: Converts `Box<T>` to `Box<MaybeUninit<T>>` which is the\n-            // inverse of `Box::assume_init()` and should be safe.\n-            let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n-            // SAFETY: Write the mapped value back into the `Box`.\n-            raw.write(f(value));\n-            // SAFETY: We just initialized `raw`.\n-            raw.assume_init()\n-        }\n-    }\n-\n     #[inline]\n     fn try_map_id<F, E>(self, mut f: F) -> Result<Self, E>\n     where\n@@ -59,26 +44,6 @@ impl<T> IdFunctor for Box<T> {\n impl<T> IdFunctor for Vec<T> {\n     type Inner = T;\n \n-    #[inline]\n-    fn map_id<F>(mut self, mut f: F) -> Self\n-    where\n-        F: FnMut(Self::Inner) -> Self::Inner,\n-    {\n-        // FIXME: We don't really care about panics here and leak\n-        // far more than we should, but that should be fine for now.\n-        let len = self.len();\n-        unsafe {\n-            self.set_len(0);\n-            let start = self.as_mut_ptr();\n-            for i in 0..len {\n-                let p = start.add(i);\n-                ptr::write(p, f(ptr::read(p)));\n-            }\n-            self.set_len(len);\n-        }\n-        self\n-    }\n-\n     #[inline]\n     fn try_map_id<F, E>(mut self, mut f: F) -> Result<Self, E>\n     where\n@@ -119,14 +84,6 @@ impl<T> IdFunctor for Vec<T> {\n impl<T> IdFunctor for Box<[T]> {\n     type Inner = T;\n \n-    #[inline]\n-    fn map_id<F>(self, f: F) -> Self\n-    where\n-        F: FnMut(Self::Inner) -> Self::Inner,\n-    {\n-        Vec::from(self).map_id(f).into()\n-    }\n-\n     #[inline]\n     fn try_map_id<F, E>(self, f: F) -> Result<Self, E>\n     where\n@@ -139,14 +96,6 @@ impl<T> IdFunctor for Box<[T]> {\n impl<I: Idx, T> IdFunctor for IndexVec<I, T> {\n     type Inner = T;\n \n-    #[inline]\n-    fn map_id<F>(self, f: F) -> Self\n-    where\n-        F: FnMut(Self::Inner) -> Self::Inner,\n-    {\n-        IndexVec::from_raw(self.raw.map_id(f))\n-    }\n-\n     #[inline]\n     fn try_map_id<F, E>(self, f: F) -> Result<Self, E>\n     where"}, {"sha": "d4eb622e780ce1857af21276d6d4fcb5df8f9a7d", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f714ef03567d588fbb63c662670fd9326d7348e/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f714ef03567d588fbb63c662670fd9326d7348e/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=9f714ef03567d588fbb63c662670fd9326d7348e", "patch": "@@ -25,6 +25,7 @@\n #![feature(once_cell)]\n #![feature(test)]\n #![feature(thread_id_value)]\n+#![feature(unwrap_infallible)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n "}]}