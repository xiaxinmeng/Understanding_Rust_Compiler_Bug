{"sha": "4f1bae0c96402b874c2f5686032eb3527b4f1900", "node_id": "C_kwDOAAsO6NoAKDRmMWJhZTBjOTY0MDJiODc0YzJmNTY4NjAzMmViMzUyN2I0ZjE5MDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-25T14:19:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-25T14:19:10Z"}, "message": "Auto merge of #10116 - tgross35:patch-1, r=llogiq\n\n`not_unsafe_ptr_arg_deref` update documentation\n\nchangelog: [`not_unsafe_ptr_arg_deref`]: strengthened documentation wording, fixes #7714", "tree": {"sha": "df271074c56376748669c54a99ec5554807f4782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df271074c56376748669c54a99ec5554807f4782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f1bae0c96402b874c2f5686032eb3527b4f1900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1bae0c96402b874c2f5686032eb3527b4f1900", "html_url": "https://github.com/rust-lang/rust/commit/4f1bae0c96402b874c2f5686032eb3527b4f1900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f1bae0c96402b874c2f5686032eb3527b4f1900/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8703a0ce2e021a922b60455318e21e918940a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8703a0ce2e021a922b60455318e21e918940a62", "html_url": "https://github.com/rust-lang/rust/commit/e8703a0ce2e021a922b60455318e21e918940a62"}, {"sha": "12f2dea229a49a1b0d25453ba7993eb35aaadc6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/12f2dea229a49a1b0d25453ba7993eb35aaadc6b", "html_url": "https://github.com/rust-lang/rust/commit/12f2dea229a49a1b0d25453ba7993eb35aaadc6b"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "9dbce3f889bef117ddfcbba93d9de08a85bd60bf", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4f1bae0c96402b874c2f5686032eb3527b4f1900/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1bae0c96402b874c2f5686032eb3527b4f1900/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=4f1bae0c96402b874c2f5686032eb3527b4f1900", "patch": "@@ -63,30 +63,53 @@ declare_clippy_lint! {\n     /// arguments but are not marked `unsafe`.\n     ///\n     /// ### Why is this bad?\n-    /// The function should probably be marked `unsafe`, since\n-    /// for an arbitrary raw pointer, there is no way of telling for sure if it is\n-    /// valid.\n+    /// The function should almost definitely be marked `unsafe`, since for an\n+    /// arbitrary raw pointer, there is no way of telling for sure if it is valid.\n+    ///\n+    /// In general, this lint should **never be disabled** unless it is definitely a\n+    /// false positive (please submit an issue if so) since it breaks Rust's\n+    /// soundness guarantees, directly exposing API users to potentially dangerous\n+    /// program behavior. This is also true for internal APIs, as it is easy to leak\n+    /// unsoundness.\n+    ///\n+    /// ### Context\n+    /// In Rust, an `unsafe {...}` block is used to indicate that the code in that\n+    /// section has been verified in some way that the compiler can not. For a\n+    /// function that accepts a raw pointer then accesses the pointer's data, this is\n+    /// generally impossible as the incoming pointer could point anywhere, valid or\n+    /// not. So, the signature should be marked `unsafe fn`: this indicates that the\n+    /// function's caller must provide some verification that the arguments it sends\n+    /// are valid (and then call the function within an `unsafe` block).\n     ///\n     /// ### Known problems\n     /// * It does not check functions recursively so if the pointer is passed to a\n     /// private non-`unsafe` function which does the dereferencing, the lint won't\n-    /// trigger.\n+    /// trigger (false negative).\n     /// * It only checks for arguments whose type are raw pointers, not raw pointers\n     /// got from an argument in some other way (`fn foo(bar: &[*const u8])` or\n-    /// `some_argument.get_raw_ptr()`).\n+    /// `some_argument.get_raw_ptr()`) (false negative).\n     ///\n     /// ### Example\n     /// ```rust,ignore\n     /// pub fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }\n+    ///\n+    /// // this call \"looks\" safe but will segfault or worse!\n+    /// // foo(invalid_ptr);\n     /// ```\n     ///\n     /// Use instead:\n     /// ```rust,ignore\n     /// pub unsafe fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }\n+    ///\n+    /// // this would cause a compiler error for calling without `unsafe`\n+    /// // foo(invalid_ptr);\n+    ///\n+    /// // sound call if the caller knows the pointer is valid\n+    /// unsafe { foo(valid_ptr); }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NOT_UNSAFE_PTR_ARG_DEREF,"}]}