{"sha": "a44fb04d57400f70ad58c1e35fc9dd9a7c43de07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NGZiMDRkNTc0MDBmNzBhZDU4YzFlMzVmYzlkZDlhN2M0M2RlMDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-21T18:44:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-21T18:44:12Z"}, "message": "Revert \"rustc: Avoid SHA-1 hashing every type, since they're interned\"\n\nThis reverts commit df90f57a5f76059394abd8328d30003b844cb497.", "tree": {"sha": "58b719429765a05ba90cbde67ce9a833c49f6a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b719429765a05ba90cbde67ce9a833c49f6a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07", "html_url": "https://github.com/rust-lang/rust/commit/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49bdad4994ad555fcfbb523ad79096c46a0ed48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49bdad4994ad555fcfbb523ad79096c46a0ed48", "html_url": "https://github.com/rust-lang/rust/commit/b49bdad4994ad555fcfbb523ad79096c46a0ed48"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "ab9f47e3cc02721e7de6820068afd8af516f1d42", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=a44fb04d57400f70ad58c1e35fc9dd9a7c43de07", "patch": "@@ -399,18 +399,38 @@ fn truncated_sha1_result(sha1 sha) -> str {\n     ret str::substr(sha.result_str(), 0u, 16u);\n }\n \n-fn hash_link_meta(sha1 sha, &link_meta link_meta) -> str {\n+\n+// This calculates STH for a symbol, as defined above\n+fn symbol_hash(ty::ctxt tcx, sha1 sha, &ty::t t,\n+               &link_meta link_meta) -> str {\n+    // NB: do *not* use abbrevs here as we want the symbol names\n+    // to be independent of one another in the crate.\n+\n     sha.reset();\n     sha.input_str(link_meta.name);\n     sha.input_str(\"-\");\n-    sha.input_str(link_meta.vers);\n+    // FIXME: This wants to be link_meta.meta_hash\n+    sha.input_str(link_meta.name);\n     sha.input_str(\"-\");\n-    sha.input_str(link_meta.extras_hash);\n-    ret truncated_sha1_result(sha);\n+    sha.input_str(encoder::encoded_ty(tcx, t));\n+    auto hash = truncated_sha1_result(sha);\n+    // Prefix with _ so that it never blends into adjacent digits\n+\n+    ret \"_\" + hash;\n }\n \n fn get_symbol_hash(&@crate_ctxt ccx, &ty::t t) -> str {\n-    ret #fmt(\"_%s_%u\", ccx.link_meta_hash, t);\n+    auto hash = \"\";\n+    alt (ccx.type_sha1s.find(t)) {\n+        case (some(?h)) { hash = h; }\n+        case (none) {\n+            hash =\n+                symbol_hash(ccx.tcx, ccx.sha, t,\n+                            ccx.link_meta);\n+            ccx.type_sha1s.insert(t, hash);\n+        }\n+    }\n+    ret hash;\n }\n \n fn mangle(&str[] ss) -> str {"}, {"sha": "fb79b3602527935ed699a2dc3791bb6326b40d71", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44fb04d57400f70ad58c1e35fc9dd9a7c43de07/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a44fb04d57400f70ad58c1e35fc9dd9a7c43de07", "patch": "@@ -136,7 +136,6 @@ type crate_ctxt =\n         hashmap[ast::node_id, str] item_symbols,\n         mutable option::t[ValueRef] main_fn,\n         link::link_meta link_meta,\n-        str link_meta_hash,\n \n         // TODO: hashmap[tup(tag_id,subtys), @tag_info]\n         hashmap[ty::t, uint] tag_sizes,\n@@ -151,6 +150,7 @@ type crate_ctxt =\n         @glue_fns glues,\n         namegen names,\n         std::sha1::sha1 sha,\n+        hashmap[ty::t, str] type_sha1s,\n         hashmap[ty::t, str] type_short_names,\n         ty::ctxt tcx,\n         stats stats,\n@@ -8601,9 +8601,9 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n     auto tag_sizes = map::mk_hashmap[ty::t, uint](hasher, eqer);\n     auto tydescs = map::mk_hashmap[ty::t, @tydesc_info](hasher, eqer);\n     auto lltypes = map::mk_hashmap[ty::t, TypeRef](hasher, eqer);\n+    auto sha1s = map::mk_hashmap[ty::t, str](hasher, eqer);\n     auto short_names = map::mk_hashmap[ty::t, str](hasher, eqer);\n     auto sha = std::sha1::mk_sha1();\n-    auto link_meta = link::build_link_meta(sess, *crate, output, sha);\n     auto ccx =\n         @rec(sess=sess,\n              llmod=llmod,\n@@ -8615,8 +8615,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n              ast_map=amap,\n              item_symbols=new_int_hash[str](),\n              mutable main_fn=none[ValueRef],\n-             link_meta=link_meta,\n-             link_meta_hash=link::hash_link_meta(sha, link_meta),\n+             link_meta=link::build_link_meta(sess, *crate, output, sha),\n              tag_sizes=tag_sizes,\n              discrims=new_int_hash[ValueRef](),\n              discrim_symbols=new_int_hash[str](),\n@@ -8629,6 +8628,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n              glues=glues,\n              names=namegen(0),\n              sha=sha,\n+             type_sha1s=sha1s,\n              type_short_names=short_names,\n              tcx=tcx,\n              stats=rec(mutable n_static_tydescs=0u,"}]}