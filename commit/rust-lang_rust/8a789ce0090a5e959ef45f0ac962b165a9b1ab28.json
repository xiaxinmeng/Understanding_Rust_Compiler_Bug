{"sha": "8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "node_id": "C_kwDOAAsO6NoAKDhhNzg5Y2UwMDkwYTVlOTU5ZWY0NWYwYWM5NjJiMTY1YTliMWFiMjg", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-09-01T13:05:53Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:12Z"}, "message": "Reject registration of downcasts for now", "tree": {"sha": "ba293faafe828af05133f92260205fc513ed2ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba293faafe828af05133f92260205fc513ed2ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "html_url": "https://github.com/rust-lang/rust/commit/8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a00d53379da5f226ec1c69d742f1bde3f29523", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a00d53379da5f226ec1c69d742f1bde3f29523", "html_url": "https://github.com/rust-lang/rust/commit/47a00d53379da5f226ec1c69d742f1bde3f29523"}], "stats": {"total": 179, "additions": 92, "deletions": 87}, "files": [{"sha": "64e45083fc07b0d15faadf5665253b858dbeb7ba", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "patch": "@@ -462,8 +462,8 @@ impl Map {\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n     ) {\n         if filter(ty) {\n-            self.register(local, projection)\n-                .expect(\"projection should only contain convertible elements\");\n+            // Since downcasts are currently not allowed, this might fail.\n+            let _ = self.register(local, projection);\n         }\n         if max_derefs > 0 {\n             if let Some(ty::TypeAndMut { ty, .. }) = ty.builtin_deref(false) {\n@@ -496,6 +496,11 @@ impl Map {\n \n         // Apply the projection.\n         for &elem in projection {\n+            // For now, downcast is not allowed (see #101168).\n+            match elem {\n+                PlaceElem::Downcast(..) => return Err(()),\n+                _ => (),\n+            }\n             let elem = elem.try_into()?;\n             index = *self.projections.entry((index, elem)).or_insert_with(|| {\n                 // Prepend new child to the linked list."}, {"sha": "f7c557c3edf3f9aad7288a6367f3f6c864c72504", "filename": "src/test/mir-opt/dataflow-const-prop/recursive.main.DataflowConstProp.diff", "status": "modified", "additions": 84, "deletions": 85, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff?ref=8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "patch": "@@ -3,40 +3,40 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/recursive.rs:+0:11: +0:11\n-      let _1: S;                           // in scope 0 at $DIR/recursive.rs:+1:9: +1:10\n-      let mut _3: &S;                      // in scope 0 at $DIR/recursive.rs:+2:20: +2:22\n-      let _4: &S;                          // in scope 0 at $DIR/recursive.rs:+2:20: +2:22\n-      let mut _6: &S;                      // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n-      let _7: &S;                          // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n-      let mut _9: isize;                   // in scope 0 at $DIR/recursive.rs:+5:9: +5:18\n-      let mut _11: isize;                  // in scope 0 at $DIR/recursive.rs:+6:13: +6:22\n-      let mut _13: isize;                  // in scope 0 at $DIR/recursive.rs:+7:17: +7:28\n-      let mut _15: !;                      // in scope 0 at $DIR/recursive.rs:+8:22: +8:43\n-      let mut _16: !;                      // in scope 0 at $DIR/recursive.rs:+10:18: +10:39\n-      let mut _17: !;                      // in scope 0 at $DIR/recursive.rs:+12:14: +12:35\n-      let mut _18: &S;                     // in scope 0 at $DIR/recursive.rs:+6:20: +6:21\n-      let mut _19: &S;                     // in scope 0 at $DIR/recursive.rs:+6:20: +6:21\n+      let _1: S;                           // in scope 0 at $DIR/recursive.rs:+2:9: +2:10\n+      let mut _3: &S;                      // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n+      let _4: &S;                          // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n+      let mut _6: &S;                      // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n+      let _7: &S;                          // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n+      let mut _9: isize;                   // in scope 0 at $DIR/recursive.rs:+6:9: +6:18\n+      let mut _11: isize;                  // in scope 0 at $DIR/recursive.rs:+7:13: +7:22\n+      let mut _13: isize;                  // in scope 0 at $DIR/recursive.rs:+8:17: +8:28\n+      let mut _15: !;                      // in scope 0 at $DIR/recursive.rs:+9:22: +9:43\n+      let mut _16: !;                      // in scope 0 at $DIR/recursive.rs:+11:18: +11:39\n+      let mut _17: !;                      // in scope 0 at $DIR/recursive.rs:+13:14: +13:35\n+      let mut _18: &S;                     // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n+      let mut _19: &S;                     // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/recursive.rs:+1:9: +1:10\n-          let _2: S;                       // in scope 1 at $DIR/recursive.rs:+2:9: +2:10\n+          debug a => _1;                   // in scope 1 at $DIR/recursive.rs:+2:9: +2:10\n+          let _2: S;                       // in scope 1 at $DIR/recursive.rs:+3:9: +3:10\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/recursive.rs:+2:9: +2:10\n-              let _5: S;                   // in scope 2 at $DIR/recursive.rs:+3:9: +3:10\n+              debug b => _2;               // in scope 2 at $DIR/recursive.rs:+3:9: +3:10\n+              let _5: S;                   // in scope 2 at $DIR/recursive.rs:+4:9: +4:10\n               scope 3 {\n-                  debug c => _5;           // in scope 3 at $DIR/recursive.rs:+3:9: +3:10\n-                  let _8: u32;             // in scope 3 at $DIR/recursive.rs:+4:9: +4:10\n-                  let _10: &S;             // in scope 3 at $DIR/recursive.rs:+5:16: +5:17\n+                  debug c => _5;           // in scope 3 at $DIR/recursive.rs:+4:9: +4:10\n+                  let _8: u32;             // in scope 3 at $DIR/recursive.rs:+5:9: +5:10\n+                  let _10: &S;             // in scope 3 at $DIR/recursive.rs:+6:16: +6:17\n                   scope 4 {\n-                      debug d => _8;       // in scope 4 at $DIR/recursive.rs:+4:9: +4:10\n+                      debug d => _8;       // in scope 4 at $DIR/recursive.rs:+5:9: +5:10\n                   }\n                   scope 5 {\n-                      debug b => _10;      // in scope 5 at $DIR/recursive.rs:+5:16: +5:17\n-                      let _12: &&S;        // in scope 5 at $DIR/recursive.rs:+6:20: +6:21\n+                      debug b => _10;      // in scope 5 at $DIR/recursive.rs:+6:16: +6:17\n+                      let _12: &&S;        // in scope 5 at $DIR/recursive.rs:+7:20: +7:21\n                       scope 6 {\n-                          debug a => _12;  // in scope 6 at $DIR/recursive.rs:+6:20: +6:21\n-                          let _14: &u32;   // in scope 6 at $DIR/recursive.rs:+7:24: +7:27\n+                          debug a => _12;  // in scope 6 at $DIR/recursive.rs:+7:20: +7:21\n+                          let _14: &u32;   // in scope 6 at $DIR/recursive.rs:+8:24: +8:27\n                           scope 7 {\n-                              debug num => _14; // in scope 7 at $DIR/recursive.rs:+7:24: +7:27\n+                              debug num => _14; // in scope 7 at $DIR/recursive.rs:+8:24: +8:27\n                           }\n                       }\n                   }\n@@ -45,89 +45,88 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/recursive.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/recursive.rs:+1:13: +1:22\n-          ((_1 as Num).0: u32) = const 0_u32; // scope 0 at $DIR/recursive.rs:+1:13: +1:22\n-          discriminant(_1) = 1;            // scope 0 at $DIR/recursive.rs:+1:13: +1:22\n-          StorageLive(_2);                 // scope 1 at $DIR/recursive.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/recursive.rs:+2:20: +2:22\n-          StorageLive(_4);                 // scope 1 at $DIR/recursive.rs:+2:20: +2:22\n-          _4 = &_1;                        // scope 1 at $DIR/recursive.rs:+2:20: +2:22\n-          _3 = &(*_4);                     // scope 1 at $DIR/recursive.rs:+2:20: +2:22\n-          Deinit(_2);                      // scope 1 at $DIR/recursive.rs:+2:13: +2:23\n-          ((_2 as Rec).0: &S) = move _3;   // scope 1 at $DIR/recursive.rs:+2:13: +2:23\n-          discriminant(_2) = 0;            // scope 1 at $DIR/recursive.rs:+2:13: +2:23\n-          StorageDead(_3);                 // scope 1 at $DIR/recursive.rs:+2:22: +2:23\n-          StorageDead(_4);                 // scope 1 at $DIR/recursive.rs:+2:23: +2:24\n-          StorageLive(_5);                 // scope 2 at $DIR/recursive.rs:+3:9: +3:10\n-          StorageLive(_6);                 // scope 2 at $DIR/recursive.rs:+3:20: +3:22\n-          StorageLive(_7);                 // scope 2 at $DIR/recursive.rs:+3:20: +3:22\n-          _7 = &_2;                        // scope 2 at $DIR/recursive.rs:+3:20: +3:22\n-          _6 = &(*_7);                     // scope 2 at $DIR/recursive.rs:+3:20: +3:22\n-          Deinit(_5);                      // scope 2 at $DIR/recursive.rs:+3:13: +3:23\n-          ((_5 as Rec).0: &S) = move _6;   // scope 2 at $DIR/recursive.rs:+3:13: +3:23\n-          discriminant(_5) = 0;            // scope 2 at $DIR/recursive.rs:+3:13: +3:23\n-          StorageDead(_6);                 // scope 2 at $DIR/recursive.rs:+3:22: +3:23\n-          StorageDead(_7);                 // scope 2 at $DIR/recursive.rs:+3:23: +3:24\n-          StorageLive(_8);                 // scope 3 at $DIR/recursive.rs:+4:9: +4:10\n-          _9 = discriminant(_5);           // scope 3 at $DIR/recursive.rs:+4:19: +4:20\n-          switchInt(move _9) -> [0_isize: bb2, otherwise: bb1]; // scope 3 at $DIR/recursive.rs:+4:13: +4:20\n+          StorageLive(_1);                 // scope 0 at $DIR/recursive.rs:+2:9: +2:10\n+          Deinit(_1);                      // scope 0 at $DIR/recursive.rs:+2:13: +2:22\n+          ((_1 as Num).0: u32) = const 0_u32; // scope 0 at $DIR/recursive.rs:+2:13: +2:22\n+          discriminant(_1) = 1;            // scope 0 at $DIR/recursive.rs:+2:13: +2:22\n+          StorageLive(_2);                 // scope 1 at $DIR/recursive.rs:+3:9: +3:10\n+          StorageLive(_3);                 // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n+          StorageLive(_4);                 // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n+          _4 = &_1;                        // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n+          _3 = &(*_4);                     // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n+          Deinit(_2);                      // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n+          ((_2 as Rec).0: &S) = move _3;   // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n+          discriminant(_2) = 0;            // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n+          StorageDead(_3);                 // scope 1 at $DIR/recursive.rs:+3:22: +3:23\n+          StorageDead(_4);                 // scope 1 at $DIR/recursive.rs:+3:23: +3:24\n+          StorageLive(_5);                 // scope 2 at $DIR/recursive.rs:+4:9: +4:10\n+          StorageLive(_6);                 // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n+          StorageLive(_7);                 // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n+          _7 = &_2;                        // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n+          _6 = &(*_7);                     // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n+          Deinit(_5);                      // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n+          ((_5 as Rec).0: &S) = move _6;   // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n+          discriminant(_5) = 0;            // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n+          StorageDead(_6);                 // scope 2 at $DIR/recursive.rs:+4:22: +4:23\n+          StorageDead(_7);                 // scope 2 at $DIR/recursive.rs:+4:23: +4:24\n+          StorageLive(_8);                 // scope 3 at $DIR/recursive.rs:+5:9: +5:10\n+          _9 = discriminant(_5);           // scope 3 at $DIR/recursive.rs:+5:19: +5:20\n+          switchInt(move _9) -> [0_isize: bb2, otherwise: bb1]; // scope 3 at $DIR/recursive.rs:+5:13: +5:20\n       }\n   \n       bb1: {\n-          StorageLive(_17);                // scope 3 at $DIR/recursive.rs:+12:14: +12:35\n-          _17 = exit(const 0_i32);         // scope 3 at $DIR/recursive.rs:+12:14: +12:35\n+          StorageLive(_17);                // scope 3 at $DIR/recursive.rs:+13:14: +13:35\n+          _17 = exit(const 0_i32);         // scope 3 at $DIR/recursive.rs:+13:14: +13:35\n                                            // mir::Constant\n-                                           // + span: $DIR/recursive.rs:21:14: 21:32\n+                                           // + span: $DIR/recursive.rs:22:14: 22:32\n                                            // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageLive(_10);                // scope 3 at $DIR/recursive.rs:+5:16: +5:17\n-          _10 = ((_5 as Rec).0: &S);       // scope 3 at $DIR/recursive.rs:+5:16: +5:17\n-          _11 = discriminant((*_10));      // scope 5 at $DIR/recursive.rs:+5:28: +5:29\n-          switchInt(move _11) -> [0_isize: bb4, otherwise: bb3]; // scope 5 at $DIR/recursive.rs:+5:22: +5:29\n+          StorageLive(_10);                // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n+          _10 = ((_5 as Rec).0: &S);       // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n+          _11 = discriminant((*_10));      // scope 5 at $DIR/recursive.rs:+6:28: +6:29\n+          switchInt(move _11) -> [0_isize: bb4, otherwise: bb3]; // scope 5 at $DIR/recursive.rs:+6:22: +6:29\n       }\n   \n       bb3: {\n-          StorageLive(_16);                // scope 5 at $DIR/recursive.rs:+10:18: +10:39\n-          _16 = exit(const 0_i32);         // scope 5 at $DIR/recursive.rs:+10:18: +10:39\n+          StorageLive(_16);                // scope 5 at $DIR/recursive.rs:+11:18: +11:39\n+          _16 = exit(const 0_i32);         // scope 5 at $DIR/recursive.rs:+11:18: +11:39\n                                            // mir::Constant\n-                                           // + span: $DIR/recursive.rs:19:18: 19:36\n+                                           // + span: $DIR/recursive.rs:20:18: 20:36\n                                            // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageLive(_12);                // scope 5 at $DIR/recursive.rs:+6:20: +6:21\n-          _12 = &(((*_10) as Rec).0: &S);  // scope 5 at $DIR/recursive.rs:+6:20: +6:21\n-          _18 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+6:32: +6:33\n-          _13 = discriminant((*_18));      // scope 6 at $DIR/recursive.rs:+6:32: +6:33\n-          switchInt(move _13) -> [1_isize: bb6, otherwise: bb5]; // scope 6 at $DIR/recursive.rs:+6:26: +6:33\n+          StorageLive(_12);                // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n+          _12 = &(((*_10) as Rec).0: &S);  // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n+          _18 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+7:32: +7:33\n+          _13 = discriminant((*_18));      // scope 6 at $DIR/recursive.rs:+7:32: +7:33\n+          switchInt(move _13) -> [1_isize: bb6, otherwise: bb5]; // scope 6 at $DIR/recursive.rs:+7:26: +7:33\n       }\n   \n       bb5: {\n-          StorageLive(_15);                // scope 6 at $DIR/recursive.rs:+8:22: +8:43\n-          _15 = exit(const 0_i32);         // scope 6 at $DIR/recursive.rs:+8:22: +8:43\n+          StorageLive(_15);                // scope 6 at $DIR/recursive.rs:+9:22: +9:43\n+          _15 = exit(const 0_i32);         // scope 6 at $DIR/recursive.rs:+9:22: +9:43\n                                            // mir::Constant\n-                                           // + span: $DIR/recursive.rs:17:22: 17:40\n+                                           // + span: $DIR/recursive.rs:18:22: 18:40\n                                            // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }\n       }\n   \n       bb6: {\n-          StorageLive(_14);                // scope 6 at $DIR/recursive.rs:+7:24: +7:27\n-          _19 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+7:24: +7:27\n-          _14 = &(((*_19) as Num).0: u32); // scope 6 at $DIR/recursive.rs:+7:24: +7:27\n--         _8 = (*_14);                     // scope 7 at $DIR/recursive.rs:+7:32: +7:36\n-+         _8 = const 0_u32;                // scope 7 at $DIR/recursive.rs:+7:32: +7:36\n-          StorageDead(_14);                // scope 6 at $DIR/recursive.rs:+7:35: +7:36\n-          StorageDead(_12);                // scope 5 at $DIR/recursive.rs:+9:13: +9:14\n-          StorageDead(_10);                // scope 3 at $DIR/recursive.rs:+11:9: +11:10\n-          _0 = const ();                   // scope 0 at $DIR/recursive.rs:+0:11: +14:2\n-          StorageDead(_8);                 // scope 3 at $DIR/recursive.rs:+14:1: +14:2\n-          StorageDead(_5);                 // scope 2 at $DIR/recursive.rs:+14:1: +14:2\n-          StorageDead(_2);                 // scope 1 at $DIR/recursive.rs:+14:1: +14:2\n-          StorageDead(_1);                 // scope 0 at $DIR/recursive.rs:+14:1: +14:2\n-          return;                          // scope 0 at $DIR/recursive.rs:+14:2: +14:2\n+          StorageLive(_14);                // scope 6 at $DIR/recursive.rs:+8:24: +8:27\n+          _19 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+8:24: +8:27\n+          _14 = &(((*_19) as Num).0: u32); // scope 6 at $DIR/recursive.rs:+8:24: +8:27\n+          _8 = (*_14);                     // scope 7 at $DIR/recursive.rs:+8:32: +8:36\n+          StorageDead(_14);                // scope 6 at $DIR/recursive.rs:+8:35: +8:36\n+          StorageDead(_12);                // scope 5 at $DIR/recursive.rs:+10:13: +10:14\n+          StorageDead(_10);                // scope 3 at $DIR/recursive.rs:+12:9: +12:10\n+          _0 = const ();                   // scope 0 at $DIR/recursive.rs:+0:11: +15:2\n+          StorageDead(_8);                 // scope 3 at $DIR/recursive.rs:+15:1: +15:2\n+          StorageDead(_5);                 // scope 2 at $DIR/recursive.rs:+15:1: +15:2\n+          StorageDead(_2);                 // scope 1 at $DIR/recursive.rs:+15:1: +15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/recursive.rs:+15:1: +15:2\n+          return;                          // scope 0 at $DIR/recursive.rs:+15:2: +15:2\n       }\n   }\n   "}, {"sha": "d7ca182b9fcfa42717900c854c2672b6884f55f2", "filename": "src/test/mir-opt/dataflow-const-prop/recursive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a789ce0090a5e959ef45f0ac962b165a9b1ab28/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.rs?ref=8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "patch": "@@ -7,6 +7,7 @@ enum S<'a> {\n \n // EMIT_MIR recursive.main.DataflowConstProp.diff\n fn main() {\n+    // FIXME: This currently does not work, because downcasts are rejected.\n     let a = S::Num(0);\n     let b = S::Rec(&a);\n     let c = S::Rec(&b);"}]}