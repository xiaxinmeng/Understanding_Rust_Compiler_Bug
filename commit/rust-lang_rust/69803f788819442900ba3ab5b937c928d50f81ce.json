{"sha": "69803f788819442900ba3ab5b937c928d50f81ce", "node_id": "C_kwDOAAsO6NoAKDY5ODAzZjc4ODgxOTQ0MjkwMGJhM2FiNWI5MzdjOTI4ZDUwZjgxY2U", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-15T21:22:22Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-31T18:28:15Z"}, "message": "Make `span_extend_to_prev_str()` more robust", "tree": {"sha": "7bbe81f5fd0187a39395b447229d0c0c7d3798fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbe81f5fd0187a39395b447229d0c0c7d3798fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69803f788819442900ba3ab5b937c928d50f81ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69803f788819442900ba3ab5b937c928d50f81ce", "html_url": "https://github.com/rust-lang/rust/commit/69803f788819442900ba3ab5b937c928d50f81ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69803f788819442900ba3ab5b937c928d50f81ce/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24b8bb13bff98bb747cd403b86596af43aceee78", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b8bb13bff98bb747cd403b86596af43aceee78", "html_url": "https://github.com/rust-lang/rust/commit/24b8bb13bff98bb747cd403b86596af43aceee78"}], "stats": {"total": 155, "additions": 116, "deletions": 39}, "files": [{"sha": "1f657218a64a980591098e040e33e5e7dc58c2af", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/69803f788819442900ba3ab5b937c928d50f81ce/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69803f788819442900ba3ab5b937c928d50f81ce/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=69803f788819442900ba3ab5b937c928d50f81ce", "patch": "@@ -453,28 +453,28 @@ impl<'a> Resolver<'a> {\n                 // edit:\n                 // only do this if the const and usage of the non-constant value are on the same line\n                 // the further the two are apart, the higher the chance of the suggestion being wrong\n-                // also make sure that the pos for the suggestion is not 0 (ICE #90878)\n \n-                let sp =\n-                    self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n-\n-                let pos_for_suggestion = sp.lo().0.saturating_sub(current.len() as u32);\n+                let sp = self\n+                    .session\n+                    .source_map()\n+                    .span_extend_to_prev_str(ident.span, current, true, false);\n \n-                if sp.lo().0 == 0\n-                    || pos_for_suggestion == 0\n-                    || self.session.source_map().is_multiline(sp)\n-                {\n-                    err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n-                } else {\n-                    let sp = sp.with_lo(BytePos(pos_for_suggestion));\n-                    err.span_suggestion(\n-                        sp,\n-                        &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n-                        format!(\"{} {}\", sugg, ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    err.span_label(span, \"non-constant value\");\n+                match sp {\n+                    Some(sp) if !self.session.source_map().is_multiline(sp) => {\n+                        let sp = sp.with_lo(BytePos(sp.lo().0 - (current.len() as u32)));\n+                        err.span_suggestion(\n+                            sp,\n+                            &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n+                            format!(\"{} {}\", sugg, ident),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.span_label(span, \"non-constant value\");\n+                    }\n+                    _ => {\n+                        err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n+                    }\n                 }\n+\n                 err\n             }\n             ResolutionError::BindingShadowsSomethingUnacceptable {"}, {"sha": "95177102dcf8678df118ab6d58cc65750219d8be", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/69803f788819442900ba3ab5b937c928d50f81ce/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69803f788819442900ba3ab5b937c928d50f81ce/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=69803f788819442900ba3ab5b937c928d50f81ce", "patch": "@@ -629,26 +629,41 @@ impl SourceMap {\n     }\n \n     /// Extends the given `Span` to just after the previous occurrence of `pat` when surrounded by\n-    /// whitespace. Returns the same span if no character could be found or if an error occurred\n-    /// while retrieving the code snippet.\n-    pub fn span_extend_to_prev_str(&self, sp: Span, pat: &str, accept_newlines: bool) -> Span {\n+    /// whitespace. Returns None if the pattern could not be found or if an error occurred while\n+    /// retrieving the code snippet.\n+    pub fn span_extend_to_prev_str(\n+        &self,\n+        sp: Span,\n+        pat: &str,\n+        accept_newlines: bool,\n+        include_whitespace: bool,\n+    ) -> Option<Span> {\n         // assure that the pattern is delimited, to avoid the following\n         //     fn my_fn()\n         //           ^^^^ returned span without the check\n         //     ---------- correct span\n+        let prev_source = self.span_to_prev_source(sp).ok()?;\n         for ws in &[\" \", \"\\t\", \"\\n\"] {\n             let pat = pat.to_owned() + ws;\n-            if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-                let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n-                if prev_source.is_empty() && sp.lo().0 != 0 {\n-                    return sp.with_lo(BytePos(sp.lo().0 - 1));\n-                } else if accept_newlines || !prev_source.contains('\\n') {\n-                    return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n+            if let Some(pat_pos) = prev_source.rfind(&pat) {\n+                let just_after_pat_pos = pat_pos + pat.len() - 1;\n+                let just_after_pat_plus_ws = if include_whitespace {\n+                    just_after_pat_pos\n+                        + prev_source[just_after_pat_pos..]\n+                            .find(|c: char| !c.is_whitespace())\n+                            .unwrap_or(0)\n+                } else {\n+                    just_after_pat_pos\n+                };\n+                let len = prev_source.len() - just_after_pat_plus_ws;\n+                let prev_source = &prev_source[just_after_pat_plus_ws..];\n+                if accept_newlines || !prev_source.trim_start().contains('\\n') {\n+                    return Some(sp.with_lo(BytePos(sp.lo().0 - len as u32)));\n                 }\n             }\n         }\n \n-        sp\n+        None\n     }\n \n     /// Returns the source snippet as `String` after the given `Span`.\n@@ -927,7 +942,7 @@ impl SourceMap {\n     }\n \n     pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {\n-        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true);\n+        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true, true).unwrap_or(span);\n         if let Ok(snippet) = self.span_to_snippet(prev_span) {\n             debug!(\n                 \"generate_fn_name_span: span={:?}, prev_span={:?}, snippet={:?}\",\n@@ -968,8 +983,7 @@ impl SourceMap {\n     pub fn generate_local_type_param_snippet(&self, span: Span) -> Option<(Span, String)> {\n         // Try to extend the span to the previous \"fn\" keyword to retrieve the function\n         // signature.\n-        let sugg_span = self.span_extend_to_prev_str(span, \"fn\", false);\n-        if sugg_span != span {\n+        if let Some(sugg_span) = self.span_extend_to_prev_str(span, \"fn\", false, true) {\n             if let Ok(snippet) = self.span_to_snippet(sugg_span) {\n                 // Consume the function name.\n                 let mut offset = snippet"}, {"sha": "194cd66a66e96325ae9e63e4201d96fe616f56ec", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=69803f788819442900ba3ab5b937c928d50f81ce", "patch": "@@ -394,7 +394,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:39:37\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n@@ -403,7 +403,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:50:44\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n@@ -412,7 +412,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:57:31\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n@@ -421,7 +421,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:57:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -430,7 +430,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:64:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -439,7 +439,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:67:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -448,7 +448,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:70:42\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                                          ^^^ non-constant value"}, {"sha": "41b9d95734a8d923d7a848e5e6d82039db3ab210", "filename": "src/test/ui/consts/issue-91560.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.fixed?ref=69803f788819442900ba3ab5b937c928d50f81ce", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for issue #91560.\n+\n+// run-rustfix\n+\n+#![allow(unused,non_upper_case_globals)]\n+\n+fn foo() {\n+    const length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn bar() {\n+    const length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn main() {}"}, {"sha": "04592feb505416f2c2baa6ad8a77966cdf213398", "filename": "src/test/ui/consts/issue-91560.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.rs?ref=69803f788819442900ba3ab5b937c928d50f81ce", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for issue #91560.\n+\n+// run-rustfix\n+\n+#![allow(unused,non_upper_case_globals)]\n+\n+fn foo() {\n+    let mut length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn bar() {\n+    let   length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn main() {}"}, {"sha": "e1b5d4cacf8e305e633ca1779d64076f10c41ecc", "filename": "src/test/ui/consts/issue-91560.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69803f788819442900ba3ab5b937c928d50f81ce/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.stderr?ref=69803f788819442900ba3ab5b937c928d50f81ce", "patch": "@@ -0,0 +1,21 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-91560.rs:10:19\n+   |\n+LL |     let mut length: usize = 2;\n+   |     -------------- help: consider using `const` instead of `let`: `const length`\n+LL |\n+LL |     let arr = [0; length];\n+   |                   ^^^^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-91560.rs:17:19\n+   |\n+LL |     let   length: usize = 2;\n+   |     ------------ help: consider using `const` instead of `let`: `const length`\n+LL |\n+LL |     let arr = [0; length];\n+   |                   ^^^^^^ non-constant value\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}]}