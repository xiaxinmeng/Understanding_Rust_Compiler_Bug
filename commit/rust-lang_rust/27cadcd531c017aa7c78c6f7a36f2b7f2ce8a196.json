{"sha": "27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Y2FkY2Q1MzFjMDE3YWE3Yzc4YzZmN2EzNmYyYjdmMmNlOGExOTY=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T02:05:28Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:51Z"}, "message": "HasSource::source -> HasSource::source_old\n\nTo start migrating HasSource::source to return an Option.", "tree": {"sha": "24f43261eeafffc8b98be361c9c2841c2e4861f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f43261eeafffc8b98be361c9c2841c2e4861f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "html_url": "https://github.com/rust-lang/rust/commit/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3ce16f2641b7eb562a8eae67738b0ff0c0b7b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3ce16f2641b7eb562a8eae67738b0ff0c0b7b0", "html_url": "https://github.com/rust-lang/rust/commit/aa3ce16f2641b7eb562a8eae67738b0ff0c0b7b0"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "a8efad6d63456ea283dffb3a1d85a723d77a9b3b", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -196,7 +196,7 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::Variant) -> Optio\n     let path = mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n-    let pat: ast::Pat = match var.source(db).value.kind() {\n+    let pat: ast::Pat = match var.source_old(db).value.kind() {\n         ast::StructKind::Tuple(field_list) => {\n             let pats = iter::repeat(make::wildcard_pat().into()).take(field_list.fields().count());\n             make::tuple_struct_pat(path, pats).into()"}, {"sha": "d8150abd9657daa4a06b66c83822153cd91ee9e6", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -97,7 +97,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let parent_name = parent.name(ctx.db());\n     let target_module = parent.module(ctx.db());\n \n-    let in_file_source = record_field_def.source(ctx.db());\n+    let in_file_source = record_field_def.source_old(ctx.db());\n     let (offset, current_visibility, target) = match in_file_source.value {\n         hir::FieldSource::Named(it) => {\n             let s = it.syntax();\n@@ -150,7 +150,7 @@ fn target_data_for_def(\n         S: HasSource<Ast = Ast>,\n         Ast: AstNode + ast::VisibilityOwner,\n     {\n-        let source = x.source(db);\n+        let source = x.source_old(db);\n         let in_file_syntax = source.syntax();\n         let file_id = in_file_syntax.file_id;\n         let syntax = in_file_syntax.value;"}, {"sha": "7ee7111aee26ef100a2eda88a77a1347b00fedf8", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -99,9 +99,9 @@ pub fn filter_assoc_items(\n     items\n         .iter()\n         .map(|i| match i {\n-            hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source(db).value),\n-            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source(db).value),\n-            hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source(db).value),\n+            hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source_old(db).value),\n+            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source_old(db).value),\n+            hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source_old(db).value),\n         })\n         .filter(has_def_name)\n         .filter(|it| match it {"}, {"sha": "759253c53d4f4c34cd0ab46e3ad1f6a1b2dbac18", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -156,7 +156,7 @@ fn add_function_impl(\n     };\n     let range = TextRange::new(fn_def_node.text_range().start(), ctx.source_range().end());\n \n-    let function_decl = function_declaration(&func.source(ctx.db).value);\n+    let function_decl = function_declaration(&func.source_old(ctx.db).value);\n     match ctx.config.snippet_cap {\n         Some(cap) => {\n             let snippet = format!(\"{} {{\\n    $0\\n}}\", function_decl);\n@@ -200,7 +200,7 @@ fn add_const_impl(\n     let const_name = const_.name(ctx.db).map(|n| n.to_string());\n \n     if let Some(const_name) = const_name {\n-        let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n+        let snippet = make_const_compl_syntax(&const_.source_old(ctx.db).value);\n \n         let range = TextRange::new(const_def_node.text_range().start(), ctx.source_range().end());\n "}, {"sha": "a8820a4fe1a16dc32ab19ad7fdfa2fbb2e0cbd1b", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -27,7 +27,7 @@ struct ConstRender<'a> {\n \n impl<'a> ConstRender<'a> {\n     fn new(ctx: RenderContext<'a>, const_: hir::Const) -> ConstRender<'a> {\n-        let ast_node = const_.source(ctx.db()).value;\n+        let ast_node = const_.source_old(ctx.db()).value;\n         ConstRender { ctx, const_, ast_node }\n     }\n "}, {"sha": "d9ea425a0a0e350b7e5125b3d0d7f90eeb04b07c", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -34,7 +34,7 @@ impl<'a> FunctionRender<'a> {\n         fn_: hir::Function,\n     ) -> FunctionRender<'a> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()).to_string());\n-        let ast_node = fn_.source(ctx.db()).value;\n+        let ast_node = fn_.source_old(ctx.db()).value;\n \n         FunctionRender { ctx, name, func: fn_, ast_node }\n     }"}, {"sha": "3d13fd9e2f69a84159e88348c306216e2a1fe573", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -96,7 +96,7 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn detail(&self) -> String {\n-        let ast_node = self.macro_.source(self.ctx.db()).value;\n+        let ast_node = self.macro_.source_old(self.ctx.db()).value;\n         macro_label(&ast_node)\n     }\n }"}, {"sha": "4099a5d0e14f83637ecd674ac28316a8fb743c62", "filename": "crates/completion/src/render/type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -27,7 +27,7 @@ struct TypeAliasRender<'a> {\n \n impl<'a> TypeAliasRender<'a> {\n     fn new(ctx: RenderContext<'a>, type_alias: hir::TypeAlias) -> TypeAliasRender<'a> {\n-        let ast_node = type_alias.source(ctx.db()).value;\n+        let ast_node = type_alias.source_old(ctx.db()).value;\n         TypeAliasRender { ctx, type_alias, ast_node }\n     }\n "}, {"sha": "5020aa196dea693fdd6a4b31fa7f973298d1516e", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -989,7 +989,7 @@ impl MacroDef {\n         if self.is_proc_macro() {\n             return None;\n         }\n-        self.source(db).value.name().map(|it| it.as_name())\n+        self.source_old(db).value.name().map(|it| it.as_name())\n     }\n \n     /// Indicate it is a proc-macro\n@@ -1378,7 +1378,7 @@ impl Impl {\n     }\n \n     pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n         let item = src.file_id.is_builtin_derive(db.upcast())?;\n         let hygenic = hir_expand::hygiene::Hygiene::new(db.upcast(), item.file_id);\n "}, {"sha": "a8256c1812d2365957d2399bec664fb3ebce3c42", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -16,7 +16,7 @@ use crate::{\n \n pub trait HasSource {\n     type Ast;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast>;\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast>;\n }\n \n /// NB: Module is !HasSource, because it has two source nodes at the same time:\n@@ -46,7 +46,7 @@ impl Module {\n \n impl HasSource for Field {\n     type Ast = FieldSource;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<FieldSource> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<FieldSource> {\n         let var = VariantId::from(self.parent);\n         let src = var.child_source(db.upcast());\n         src.map(|it| match it[self.id].clone() {\n@@ -57,61 +57,61 @@ impl HasSource for Field {\n }\n impl HasSource for Struct {\n     type Ast = ast::Struct;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Struct> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Struct> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::Union;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Union> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Union> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::Enum;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Enum> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Enum> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Variant {\n     type Ast = ast::Variant;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n         self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone())\n     }\n }\n impl HasSource for Function {\n     type Ast = ast::Fn;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Const {\n     type Ast = ast::Const;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Const> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Const> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Static {\n     type Ast = ast::Static;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Static> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Static> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Trait {\n     type Ast = ast::Trait;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Trait> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Trait> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAlias;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::TypeAlias> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::TypeAlias> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for MacroDef {\n     type Ast = ast::Macro;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Macro> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Macro> {\n         InFile {\n             file_id: self.id.ast_id.expect(\"MacroDef without ast_id\").file_id,\n             value: self.id.ast_id.expect(\"MacroDef without ast_id\").to_node(db.upcast()),\n@@ -120,22 +120,22 @@ impl HasSource for MacroDef {\n }\n impl HasSource for Impl {\n     type Ast = ast::Impl;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n \n impl HasSource for TypeParam {\n     type Ast = Either<ast::Trait, ast::TypeParam>;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         child_source.map(|it| it[self.id.local_id].clone())\n     }\n }\n \n impl HasSource for LifetimeParam {\n     type Ast = ast::LifetimeParam;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n+    fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         child_source.map(|it| it[self.id.local_id].clone())\n     }"}, {"sha": "702e8239d179cf1f5a202536e8bdc02e577b6786", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -156,20 +156,20 @@ fn missing_record_expr_field_fix(\n     let record_fields = match VariantDef::from(def_id) {\n         VariantDef::Struct(s) => {\n             module = s.module(sema.db);\n-            let source = s.source(sema.db);\n+            let source = s.source_old(sema.db);\n             def_file_id = source.file_id;\n             let fields = source.value.field_list()?;\n             record_field_list(fields)?\n         }\n         VariantDef::Union(u) => {\n             module = u.module(sema.db);\n-            let source = u.source(sema.db);\n+            let source = u.source_old(sema.db);\n             def_file_id = source.file_id;\n             source.value.record_field_list()?\n         }\n         VariantDef::Variant(e) => {\n             module = e.module(sema.db);\n-            let source = e.source(sema.db);\n+            let source = e.source_old(sema.db);\n             def_file_id = source.file_id;\n             let fields = source.value.field_list()?;\n             record_field_list(fields)?"}, {"sha": "de4c0fa12ddc0b75ba2785f365676a65f14fc080", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -285,7 +285,7 @@ where\n     D::Ast: ast::NameOwner + ShortLabel,\n {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().map(|it| it as &dyn ast::NameOwner),\n@@ -314,7 +314,7 @@ impl ToNav for hir::Module {\n \n impl ToNav for hir::Impl {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n         let derive_attr = self.is_builtin_derive(db);\n         let frange = if let Some(item) = &derive_attr {\n             item.syntax().original_file_range(db)\n@@ -339,7 +339,7 @@ impl ToNav for hir::Impl {\n \n impl ToNav for hir::Field {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n \n         match &src.value {\n             FieldSource::Named(it) => {\n@@ -365,7 +365,7 @@ impl ToNav for hir::Field {\n \n impl ToNav for hir::MacroDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n         log::debug!(\"nav target {:#?}\", src.value.syntax());\n         let mut res = NavigationTarget::from_named(\n             db,\n@@ -448,7 +448,7 @@ impl ToNav for hir::Label {\n \n impl ToNav for hir::TypeParam {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n         let full_range = match &src.value {\n             Either::Left(it) => it.syntax().text_range(),\n             Either::Right(it) => it.syntax().text_range(),\n@@ -472,7 +472,7 @@ impl ToNav for hir::TypeParam {\n \n impl ToNav for hir::LifetimeParam {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n+        let src = self.source_old(db);\n         let full_range = src.value.syntax().text_range();\n         NavigationTarget {\n             file_id: src.file_id.original_file(db),"}, {"sha": "90781ea3420c38b2a969b954f6b9d119afcb7ba8", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -206,7 +206,7 @@ fn runnable_action(\n                 _ => None,\n             },\n             ModuleDef::Function(it) => {\n-                let src = it.source(sema.db);\n+                let src = it.source_old(sema.db);\n                 if src.file_id != file_id.into() {\n                     mark::hit!(hover_macro_generated_struct_fn_doc_comment);\n                     mark::hit!(hover_macro_generated_struct_fn_doc_attr);\n@@ -332,11 +332,11 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             if it.is_proc_macro() {\n                 return None;\n             }\n-            let label = macro_label(&it.source(db).value);\n+            let label = macro_label(&it.source_old(db).value);\n             from_def_source_labeled(db, it, Some(label), mod_path)\n         }\n         Definition::Field(def) => {\n-            let src = def.source(db).value;\n+            let src = def.source_old(db).value;\n             if let FieldSource::Named(it) = src {\n                 from_def_source_labeled(db, def, it.short_label(), mod_path)\n             } else {\n@@ -385,7 +385,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n         D: HasSource<Ast = A> + HasAttrs + Copy,\n         A: ShortLabel,\n     {\n-        let short_label = def.source(db).value.short_label();\n+        let short_label = def.source_old(db).value.short_label();\n         from_def_source_labeled(db, def, short_label, mod_path)\n     }\n "}, {"sha": "2df4894a1e095092e7dfe26b911b21ed4fbd9c8c", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -121,9 +121,9 @@ impl Definition {\n \n         if let Definition::Local(var) = self {\n             let range = match var.parent(db) {\n-                DefWithBody::Function(f) => f.source(db).value.syntax().text_range(),\n-                DefWithBody::Const(c) => c.source(db).value.syntax().text_range(),\n-                DefWithBody::Static(s) => s.source(db).value.syntax().text_range(),\n+                DefWithBody::Function(f) => f.source_old(db).value.syntax().text_range(),\n+                DefWithBody::Const(c) => c.source_old(db).value.syntax().text_range(),\n+                DefWithBody::Static(s) => s.source_old(db).value.syntax().text_range(),\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, Some(range));\n@@ -132,17 +132,17 @@ impl Definition {\n \n         if let Definition::LifetimeParam(param) = self {\n             let range = match param.parent(db) {\n-                hir::GenericDef::Function(it) => it.source(db).value.syntax().text_range(),\n+                hir::GenericDef::Function(it) => it.source_old(db).value.syntax().text_range(),\n                 hir::GenericDef::Adt(it) => match it {\n-                    hir::Adt::Struct(it) => it.source(db).value.syntax().text_range(),\n-                    hir::Adt::Union(it) => it.source(db).value.syntax().text_range(),\n-                    hir::Adt::Enum(it) => it.source(db).value.syntax().text_range(),\n+                    hir::Adt::Struct(it) => it.source_old(db).value.syntax().text_range(),\n+                    hir::Adt::Union(it) => it.source_old(db).value.syntax().text_range(),\n+                    hir::Adt::Enum(it) => it.source_old(db).value.syntax().text_range(),\n                 },\n-                hir::GenericDef::Trait(it) => it.source(db).value.syntax().text_range(),\n-                hir::GenericDef::TypeAlias(it) => it.source(db).value.syntax().text_range(),\n-                hir::GenericDef::Impl(it) => it.source(db).value.syntax().text_range(),\n-                hir::GenericDef::Variant(it) => it.source(db).value.syntax().text_range(),\n-                hir::GenericDef::Const(it) => it.source(db).value.syntax().text_range(),\n+                hir::GenericDef::Trait(it) => it.source_old(db).value.syntax().text_range(),\n+                hir::GenericDef::TypeAlias(it) => it.source_old(db).value.syntax().text_range(),\n+                hir::GenericDef::Impl(it) => it.source_old(db).value.syntax().text_range(),\n+                hir::GenericDef::Variant(it) => it.source_old(db).value.syntax().text_range(),\n+                hir::GenericDef::Const(it) => it.source_old(db).value.syntax().text_range(),\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, Some(range));"}, {"sha": "3ee11a8f07d432bf9120e939f771825998d51b7f", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=27cadcd531c017aa7c78c6f7a36f2b7f2ce8a196", "patch": "@@ -161,7 +161,7 @@ impl AnalysisStatsCmd {\n             }\n             let mut msg = format!(\"processing: {}\", full_name);\n             if verbosity.is_verbose() {\n-                let src = f.source(db);\n+                let src = f.source_old(db);\n                 let original_file = src.file_id.original_file(db);\n                 let path = vfs.file_path(original_file);\n                 let syntax_range = src.value.syntax().text_range();"}]}