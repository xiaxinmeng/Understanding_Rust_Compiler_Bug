{"sha": "3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "node_id": "C_kwDOAAsO6NoAKDNkZGMwNGY0ZGIxZjc2OGY3NGZlOWUyMWE0ZWYxMTljMTg2Mjk1YTA", "commit": {"author": {"name": "Allen Hsu", "email": "allen@thelookoutway.com", "date": "2022-07-13T11:39:52Z"}, "committer": {"name": "Allen Hsu", "email": "allen.hsusp+git@gmail.com", "date": "2022-08-02T12:00:04Z"}, "message": "Add extra test cases from #8771, #8757, #9076.", "tree": {"sha": "2bd7ffc22fd2c229ddd7408d9f853840eb9b7b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd7ffc22fd2c229ddd7408d9f853840eb9b7b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "html_url": "https://github.com/rust-lang/rust/commit/3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc04f4db1f768f74fe9e21a4ef119c186295a0/comments", "author": {"login": "aldhsu", "id": 6347283, "node_id": "MDQ6VXNlcjYzNDcyODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6347283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldhsu", "html_url": "https://github.com/aldhsu", "followers_url": "https://api.github.com/users/aldhsu/followers", "following_url": "https://api.github.com/users/aldhsu/following{/other_user}", "gists_url": "https://api.github.com/users/aldhsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldhsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldhsu/subscriptions", "organizations_url": "https://api.github.com/users/aldhsu/orgs", "repos_url": "https://api.github.com/users/aldhsu/repos", "events_url": "https://api.github.com/users/aldhsu/events{/privacy}", "received_events_url": "https://api.github.com/users/aldhsu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2", "html_url": "https://github.com/rust-lang/rust/commit/b96842d7d7b6fbb8509471fb30dfaa8f5877fcb2"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "5630a0345adb1278492d6f44e2c3b8923df9fbaa", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3ddc04f4db1f768f74fe9e21a4ef119c186295a0/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddc04f4db1f768f74fe9e21a4ef119c186295a0/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs?ref=3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "patch": "@@ -95,7 +95,72 @@ trait FooIter: Iterator<Item = Foo> {\n     }\n }\n \n-// This should not lint\n+// The below should not lint and exist to guard against false positives\n fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n \n+pub mod one {\n+    #[derive(Clone, Debug)]\n+    struct MultiProductIter<I>\n+    where\n+        I: Iterator + Clone,\n+        I::Item: Clone,\n+    {\n+        _marker: I,\n+    }\n+\n+    pub struct MultiProduct<I>(Vec<MultiProductIter<I>>)\n+    where\n+        I: Iterator + Clone,\n+        I::Item: Clone;\n+\n+    pub fn multi_cartesian_product<H>(_: H) -> MultiProduct<<H::Item as IntoIterator>::IntoIter>\n+    where\n+        H: Iterator,\n+        H::Item: IntoIterator,\n+        <H::Item as IntoIterator>::IntoIter: Clone,\n+        <H::Item as IntoIterator>::Item: Clone,\n+    {\n+        todo!()\n+    }\n+}\n+\n+pub mod two {\n+    use std::iter::Peekable;\n+\n+    pub struct MergeBy<I, J, F>\n+    where\n+        I: Iterator,\n+        J: Iterator<Item = I::Item>,\n+    {\n+        _i: Peekable<I>,\n+        _j: Peekable<J>,\n+        _f: F,\n+    }\n+\n+    impl<I, J, F> Clone for MergeBy<I, J, F>\n+    where\n+        I: Iterator,\n+        J: Iterator<Item = I::Item>,\n+        std::iter::Peekable<I>: Clone,\n+        std::iter::Peekable<J>: Clone,\n+        F: Clone,\n+    {\n+        fn clone(&self) -> Self {\n+            Self {\n+                _i: self._i.clone(),\n+                _j: self._j.clone(),\n+                _f: self._f.clone(),\n+            }\n+        }\n+    }\n+}\n+\n+pub trait Trait {}\n+\n+pub fn f(_a: impl Trait, _b: impl Trait) {}\n+\n+pub trait ImplTrait<T> {}\n+\n+impl<A, B> ImplTrait<(A, B)> for Foo where Foo: ImplTrait<A> + ImplTrait<B> {}\n+\n fn main() {}"}]}