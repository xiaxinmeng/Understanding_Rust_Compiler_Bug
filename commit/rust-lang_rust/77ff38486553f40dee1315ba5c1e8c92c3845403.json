{"sha": "77ff38486553f40dee1315ba5c1e8c92c3845403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZmYzODQ4NjU1M2Y0MGRlZTEzMTViYTVjMWU4YzkyYzM4NDU0MDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-09T02:42:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T17:18:09Z"}, "message": "type-alias-enum-variants-pass: harden; account for unit variants.", "tree": {"sha": "1b552f14a03c9e79b09bebef8e57f3f09a98d5b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b552f14a03c9e79b09bebef8e57f3f09a98d5b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ff38486553f40dee1315ba5c1e8c92c3845403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ff38486553f40dee1315ba5c1e8c92c3845403", "html_url": "https://github.com/rust-lang/rust/commit/77ff38486553f40dee1315ba5c1e8c92c3845403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ff38486553f40dee1315ba5c1e8c92c3845403/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87cae326d90d0a5b02f06a1fa788f1b8a9c6538", "url": "https://api.github.com/repos/rust-lang/rust/commits/d87cae326d90d0a5b02f06a1fa788f1b8a9c6538", "html_url": "https://github.com/rust-lang/rust/commit/d87cae326d90d0a5b02f06a1fa788f1b8a9c6538"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "39677733d524db1b424d513da136ad5bc90cd691", "filename": "src/test/ui/type-alias-enum-variants/type-alias-enum-variants-pass.rs", "status": "modified", "additions": 51, "deletions": 12, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/77ff38486553f40dee1315ba5c1e8c92c3845403/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Ftype-alias-enum-variants-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77ff38486553f40dee1315ba5c1e8c92c3845403/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Ftype-alias-enum-variants-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Ftype-alias-enum-variants-pass.rs?ref=77ff38486553f40dee1315ba5c1e8c92c3845403", "patch": "@@ -1,30 +1,69 @@\n // run-pass\n \n+// Check that it is possible to resolve, in the value namespace,\n+// to an `enum` variant through a type alias. This includes `Self`.\n+// Type qualified syntax `<Type>::Variant` also works when syntactically valid.\n+\n #[derive(Debug, PartialEq, Eq)]\n enum Foo {\n     Bar(i32),\n     Baz { i: i32 },\n+    Qux,\n }\n \n type FooAlias = Foo;\n type OptionAlias = Option<i32>;\n \n+macro_rules! check_pat {\n+    ($x:expr, $p:pat) => {\n+        assert!(if let $p = $x { true } else { false });\n+    };\n+}\n+\n impl Foo {\n-    fn foo() -> Self {\n-        Self::Bar(3)\n+    fn bar() -> Self {\n+        let x = Self::Bar(3);\n+        assert_eq!(x, <Self>::Bar(3));\n+        check_pat!(x, Self::Bar(3));\n+        x\n+    }\n+\n+    fn baz() -> Self {\n+        let x = Self::Baz { i: 42 };\n+        check_pat!(x, Self::Baz { i: 42 });\n+        x\n+    }\n+\n+    fn qux() -> Self {\n+        let x = Self::Qux;\n+        assert_eq!(x, <Self>::Qux);\n+        check_pat!(x, Self::Qux);\n+        check_pat!(x, <Self>::Qux);\n+        x\n     }\n }\n \n fn main() {\n-    let t = FooAlias::Bar(1);\n-    assert_eq!(t, Foo::Bar(1));\n-    let t = FooAlias::Baz { i: 2 };\n-    assert_eq!(t, Foo::Baz { i: 2 });\n-    match t {\n-        FooAlias::Bar(_i) => {}\n-        FooAlias::Baz { i } => { assert_eq!(i, 2); }\n-    }\n-    assert_eq!(Foo::foo(), Foo::Bar(3));\n+    let bar = Foo::Bar(1);\n+    assert_eq!(bar, FooAlias::Bar(1));\n+    assert_eq!(bar, <FooAlias>::Bar(1));\n+    check_pat!(bar, FooAlias::Bar(1));\n+\n+    let baz = FooAlias::Baz { i: 2 };\n+    assert_eq!(baz, Foo::Baz { i: 2 });\n+    check_pat!(baz, FooAlias::Baz { i: 2 });\n+\n+    let qux = Foo::Qux;\n+    assert_eq!(qux, FooAlias::Qux);\n+    assert_eq!(qux, <FooAlias>::Qux);\n+    check_pat!(qux, FooAlias::Qux);\n+    check_pat!(qux, <FooAlias>::Qux);\n+\n+    assert_eq!(Foo::bar(), Foo::Bar(3));\n+    assert_eq!(Foo::baz(), Foo::Baz { i: 42 });\n+    assert_eq!(Foo::qux(), Foo::Qux);\n \n-    assert_eq!(OptionAlias::Some(4), Option::Some(4));\n+    let some = Option::Some(4);\n+    assert_eq!(some, OptionAlias::Some(4));\n+    check_pat!(some, OptionAlias::Some(4));\n }"}]}