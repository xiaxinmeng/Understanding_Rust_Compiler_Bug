{"sha": "8f4480d180386541b8f918bda14479f9a896eb85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNDQ4MGQxODAzODY1NDFiOGY5MThiZGExNDQ3OWY5YTg5NmViODU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-22T07:57:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-22T07:57:37Z"}, "message": "Merge #2044\n\n2044: Fixup folding ranges for clients with lineFoldingOnly=true r=matklad a=ztlpn\n\nFixes #2033 \n\nCo-authored-by: Alex Zatelepin <mvzp10@gmail.com>", "tree": {"sha": "e8f7533cd46894797a4440f80bfad3c294dd19da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f7533cd46894797a4440f80bfad3c294dd19da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f4480d180386541b8f918bda14479f9a896eb85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdrrZxCRBK7hj4Ov3rIwAAdHIIAGLOdgR9AlGPnY7mkemmUNfo\nhjzJXFgT/PJ9DRJ19QNz+i5Ijmy9SOeT3G6ME+HKcoUZUM6eciGk6zQzqcpjiiaF\n1acqMv6cUchulF6vxLibLmklc/NbKE2mdibI0AZ6qC4Vw69BrVkZ/8oNr1XLYZpk\nsLangy9XkbQoGsSe0x8ki1Z7GElOG+7VG/15nswBX0gAhWYRo66ZByCMsllhPC5J\nhB+SOJWx5XqvInfhC6tB0XHRykv/sWlrg45XS5VM5Sf6ZshHWTomZUsF0Ei9xzrp\n1co3feHPS9Vy93ltK4XXgm79ja4Nsza/8zwxOYTYRVf/jBYCk0yjTeRrcSilT1A=\n=PeQl\n-----END PGP SIGNATURE-----\n", "payload": "tree e8f7533cd46894797a4440f80bfad3c294dd19da\nparent e4810a302b4badb024d22da50cfa4aae64184493\nparent 6d105ccd93b8793592a6e89872766fcaf6c822e4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571731057 +0000\ncommitter GitHub <noreply@github.com> 1571731057 +0000\n\nMerge #2044\n\n2044: Fixup folding ranges for clients with lineFoldingOnly=true r=matklad a=ztlpn\n\nFixes #2033 \n\nCo-authored-by: Alex Zatelepin <mvzp10@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4480d180386541b8f918bda14479f9a896eb85", "html_url": "https://github.com/rust-lang/rust/commit/8f4480d180386541b8f918bda14479f9a896eb85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f4480d180386541b8f918bda14479f9a896eb85/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4810a302b4badb024d22da50cfa4aae64184493", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4810a302b4badb024d22da50cfa4aae64184493", "html_url": "https://github.com/rust-lang/rust/commit/e4810a302b4badb024d22da50cfa4aae64184493"}, {"sha": "6d105ccd93b8793592a6e89872766fcaf6c822e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d105ccd93b8793592a6e89872766fcaf6c822e4", "html_url": "https://github.com/rust-lang/rust/commit/6d105ccd93b8793592a6e89872766fcaf6c822e4"}], "stats": {"total": 141, "additions": 117, "deletions": 24}, "files": [{"sha": "ee503633d7ee44e88fb66ae10fb9c952682a5631", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 92, "deletions": 14, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=8f4480d180386541b8f918bda14479f9a896eb85", "patch": "@@ -227,22 +227,57 @@ impl ConvWith<(&LineIndex, LineEndings)> for &AtomTextEdit {\n     }\n }\n \n-impl ConvWith<&LineIndex> for Fold {\n+pub(crate) struct FoldConvCtx<'a> {\n+    pub(crate) text: &'a str,\n+    pub(crate) line_index: &'a LineIndex,\n+    pub(crate) line_folding_only: bool,\n+}\n+\n+impl ConvWith<&FoldConvCtx<'_>> for Fold {\n     type Output = lsp_types::FoldingRange;\n \n-    fn conv_with(self, line_index: &LineIndex) -> lsp_types::FoldingRange {\n-        let range = self.range.conv_with(&line_index);\n-        lsp_types::FoldingRange {\n-            start_line: range.start.line,\n-            start_character: Some(range.start.character),\n-            end_line: range.end.line,\n-            end_character: Some(range.end.character),\n-            kind: match self.kind {\n-                FoldKind::Comment => Some(lsp_types::FoldingRangeKind::Comment),\n-                FoldKind::Imports => Some(lsp_types::FoldingRangeKind::Imports),\n-                FoldKind::Mods => None,\n-                FoldKind::Block => None,\n-            },\n+    fn conv_with(self, ctx: &FoldConvCtx) -> lsp_types::FoldingRange {\n+        let kind = match self.kind {\n+            FoldKind::Comment => Some(lsp_types::FoldingRangeKind::Comment),\n+            FoldKind::Imports => Some(lsp_types::FoldingRangeKind::Imports),\n+            FoldKind::Mods => None,\n+            FoldKind::Block => None,\n+        };\n+\n+        let range = self.range.conv_with(&ctx.line_index);\n+\n+        if ctx.line_folding_only {\n+            // Clients with line_folding_only == true (such as VSCode) will fold the whole end line\n+            // even if it contains text not in the folding range. To prevent that we exclude\n+            // range.end.line from the folding region if there is more text after range.end\n+            // on the same line.\n+            let has_more_text_on_end_line = ctx.text\n+                [TextRange::from_to(self.range.end(), TextUnit::of_str(ctx.text))]\n+            .chars()\n+            .take_while(|it| *it != '\\n')\n+            .any(|it| !it.is_whitespace());\n+\n+            let end_line = if has_more_text_on_end_line {\n+                range.end.line.saturating_sub(1)\n+            } else {\n+                range.end.line\n+            };\n+\n+            lsp_types::FoldingRange {\n+                start_line: range.start.line,\n+                start_character: None,\n+                end_line,\n+                end_character: None,\n+                kind,\n+            }\n+        } else {\n+            lsp_types::FoldingRange {\n+                start_line: range.start.line,\n+                start_character: Some(range.start.character),\n+                end_line: range.end.line,\n+                end_character: Some(range.end.character),\n+                kind,\n+            }\n         }\n     }\n }\n@@ -512,3 +547,46 @@ where\n         self.map(|it| it.try_conv_with(ctx)).collect()\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use test_utils::extract_ranges;\n+\n+    #[test]\n+    fn conv_fold_line_folding_only_fixup() {\n+        let text = r#\"<fold>mod a;\n+mod b;\n+mod c;</fold>\n+\n+fn main() <fold>{\n+    if cond <fold>{\n+        a::do_a();\n+    }</fold> else <fold>{\n+        b::do_b();\n+    }</fold>\n+}</fold>\"#;\n+\n+        let (ranges, text) = extract_ranges(text, \"fold\");\n+        assert_eq!(ranges.len(), 4);\n+        let folds = vec![\n+            Fold { range: ranges[0], kind: FoldKind::Mods },\n+            Fold { range: ranges[1], kind: FoldKind::Block },\n+            Fold { range: ranges[2], kind: FoldKind::Block },\n+            Fold { range: ranges[3], kind: FoldKind::Block },\n+        ];\n+\n+        let line_index = LineIndex::new(&text);\n+        let ctx = FoldConvCtx { text: &text, line_index: &line_index, line_folding_only: true };\n+        let converted: Vec<_> = folds.into_iter().map_conv_with(&ctx).collect();\n+\n+        let expected_lines = [(0, 2), (4, 10), (5, 6), (7, 9)];\n+        assert_eq!(converted.len(), expected_lines.len());\n+        for (folding_range, (start_line, end_line)) in converted.iter().zip(expected_lines.iter()) {\n+            assert_eq!(folding_range.start_line, *start_line);\n+            assert_eq!(folding_range.start_character, None);\n+            assert_eq!(folding_range.end_line, *end_line);\n+            assert_eq!(folding_range.end_character, None);\n+        }\n+    }\n+}"}, {"sha": "0b5d9c44d40dff5eca6f203bb2a85b910fcdd6f2", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=8f4480d180386541b8f918bda14479f9a896eb85", "patch": "@@ -111,6 +111,21 @@ pub fn main_loop(\n             connection.sender.send(request.into()).unwrap();\n         }\n \n+        let options = {\n+            let text_document_caps = client_caps.text_document.as_ref();\n+            Options {\n+                publish_decorations: config.publish_decorations,\n+                supports_location_link: text_document_caps\n+                    .and_then(|it| it.definition)\n+                    .and_then(|it| it.link_support)\n+                    .unwrap_or(false),\n+                line_folding_only: text_document_caps\n+                    .and_then(|it| it.folding_range.as_ref())\n+                    .and_then(|it| it.line_folding_only)\n+                    .unwrap_or(false),\n+            }\n+        };\n+\n         let feature_flags = {\n             let mut ff = FeatureFlags::default();\n             for (flag, value) in config.feature_flags {\n@@ -133,14 +148,7 @@ pub fn main_loop(\n             config.lru_capacity,\n             &globs,\n             Watch(!config.use_client_watching),\n-            Options {\n-                publish_decorations: config.publish_decorations,\n-                supports_location_link: client_caps\n-                    .text_document\n-                    .and_then(|it| it.definition)\n-                    .and_then(|it| it.link_support)\n-                    .unwrap_or(false),\n-            },\n+            options,\n             feature_flags,\n         )\n     };"}, {"sha": "af3cd04ea953e47700d4af6d728f760f37233254", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8f4480d180386541b8f918bda14479f9a896eb85", "patch": "@@ -18,7 +18,7 @@ use serde_json::to_value;\n \n use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n-    conv::{to_location, Conv, ConvWith, MapConvWith, TryConvWith, TryConvWithToVec},\n+    conv::{to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith, TryConvWithToVec},\n     req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -383,8 +383,14 @@ pub fn handle_folding_range(\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let folds = world.analysis().folding_ranges(file_id)?;\n+    let text = world.analysis().file_text(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n-    let res = Some(folds.into_iter().map_conv_with(&*line_index).collect());\n+    let ctx = FoldConvCtx {\n+        text: &text,\n+        line_index: &line_index,\n+        line_folding_only: world.options.line_folding_only,\n+    };\n+    let res = Some(folds.into_iter().map_conv_with(&ctx).collect());\n     Ok(res)\n }\n "}, {"sha": "51824e7a352bda91a6da97d46422f6c632e5f3eb", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4480d180386541b8f918bda14479f9a896eb85/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=8f4480d180386541b8f918bda14479f9a896eb85", "patch": "@@ -27,6 +27,7 @@ use crate::{\n pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n+    pub line_folding_only: bool,\n }\n \n /// `WorldState` is the primary mutable state of the language server"}]}