{"sha": "c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMGVlYzNhMWNhMGEzMjhmNDA2ZjZiNzUyZWIwZmQzYTkwZGNhOTE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-14T23:40:23Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-06T18:37:44Z"}, "message": "Bootstrapping preparation for the library\n\nSince just `ops::Try` will need to change meaning.", "tree": {"sha": "128a2ba89c6537a210def5130447fdafa8ce7fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128a2ba89c6537a210def5130447fdafa8ce7fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "html_url": "https://github.com/rust-lang/rust/commit/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "html_url": "https://github.com/rust-lang/rust/commit/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca"}], "stats": {"total": 227, "additions": 123, "deletions": 104}, "files": [{"sha": "793adfb0c0fc8e2ee96b933bc9a578e5de603a5e", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use core::fmt;\n use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n-use core::ops::Try;\n+use core::ops::TryWhereOutputEquals;\n \n use super::{count, wrap_index, RingSlices};\n \n@@ -66,7 +66,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         let (mut iter, final_res);\n         if self.tail <= self.head {\n@@ -140,7 +140,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         let (mut iter, final_res);\n         if self.tail <= self.head {"}, {"sha": "af973c29bde616fea29963078fb7504cf6bc627f", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -141,6 +141,7 @@\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]\n+#![feature(try_trait_transition)]\n #![feature(min_type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]"}, {"sha": "19bc44776c9a6eba7111f5e2b76ca7968d6b20e1", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{DoubleEndedIterator, FusedIterator, Iterator, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that links two iterators together, in a chain.\n ///\n@@ -98,7 +98,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         if let Some(ref mut a) = self.a {\n             acc = a.try_fold(acc, &mut f)?;\n@@ -281,7 +281,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         if let Some(ref mut b) = self.b {\n             acc = b.try_rfold(acc, &mut f)?;"}, {"sha": "b0344ce1388ae1507fcdc4aadb99fe865998ff43", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::iter::adapters::{zip::try_get_unchecked, TrustedRandomAccess};\n use crate::iter::{FusedIterator, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that clones the elements of an underlying iterator.\n ///\n@@ -46,7 +46,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         self.it.try_fold(init, clone_try_fold(f))\n     }\n@@ -82,7 +82,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         self.it.try_rfold(init, clone_try_fold(f))\n     }"}, {"sha": "d261effc10431b748ffe1b13737f628fd5b96056", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::iter::adapters::{zip::try_get_unchecked, TrustedRandomAccess};\n use crate::iter::{FusedIterator, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that copies the elements of an underlying iterator.\n ///\n@@ -50,7 +50,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         self.it.try_fold(init, copy_try_fold(f))\n     }\n@@ -98,7 +98,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         self.it.try_rfold(init, copy_try_fold(f))\n     }"}, {"sha": "5704dc3590103a16a31760111f2127f972e6e5c1", "filename": "library/core/src/iter/adapters/cycle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,4 +1,4 @@\n-use crate::{iter::FusedIterator, ops::Try};\n+use crate::{iter::FusedIterator, ops::TryWhereOutputEquals};\n \n /// An iterator that repeats endlessly.\n ///\n@@ -53,7 +53,7 @@ where\n     fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n     where\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         // fully iterate the current iterator. this is necessary because\n         // `self.iter` may be empty even when `self.orig` isn't"}, {"sha": "8b37cc4d4a50d53198b69adbae58b821cf49e9c1", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that yields the current count and the element during iteration.\n ///\n@@ -71,7 +71,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         #[inline]\n         fn enumerate<'a, T, Acc, R>(\n@@ -150,7 +150,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         // Can safely add and subtract the count, as `ExactSizeIterator` promises\n         // that the number of elements fits into a `usize`."}, {"sha": "8f5484c9a5c2f85bf2d46016dee9292870ec177d", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that filters the elements of `iter` with `predicate`.\n ///\n@@ -37,7 +37,7 @@ fn filter_fold<T, Acc>(\n     move |acc, item| if predicate(&item) { fold(acc, item) } else { acc }\n }\n \n-fn filter_try_fold<'a, T, Acc, R: Try<Ok = Acc>>(\n+fn filter_try_fold<'a, T, Acc, R: TryWhereOutputEquals<Acc>>(\n     predicate: &'a mut impl FnMut(&T) -> bool,\n     mut fold: impl FnMut(Acc, T) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n@@ -88,7 +88,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_fold(init, filter_try_fold(&mut self.predicate, fold))\n     }\n@@ -117,7 +117,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_rfold(init, filter_try_fold(&mut self.predicate, fold))\n     }"}, {"sha": "308f984cd940e51257b3d97dcf73b0465eb61381", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator that uses `f` to both filter and map elements from `iter`.\n ///\n@@ -39,7 +39,7 @@ fn filter_map_fold<T, B, Acc>(\n     }\n }\n \n-fn filter_map_try_fold<'a, T, B, Acc, R: Try<Ok = Acc>>(\n+fn filter_map_try_fold<'a, T, B, Acc, R: TryWhereOutputEquals<Acc>>(\n     f: &'a mut impl FnMut(T) -> Option<B>,\n     mut fold: impl FnMut(Acc, B) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n@@ -72,7 +72,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_fold(init, filter_map_try_fold(&mut self.f, fold))\n     }\n@@ -111,7 +111,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_rfold(init, filter_map_try_fold(&mut self.f, fold))\n     }"}, {"sha": "b2fe1499ca6637dfccb29614d6d7d55d4a2d8b96", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that maps each element to an iterator, and yields the elements\n /// of the produced iterators.\n@@ -61,7 +61,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.inner.try_fold(init, fold)\n     }\n@@ -91,7 +91,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.inner.try_rfold(init, fold)\n     }\n@@ -178,7 +178,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.inner.try_fold(init, fold)\n     }\n@@ -208,7 +208,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.inner.try_rfold(init, fold)\n     }\n@@ -293,10 +293,10 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Ok = Acc>>(\n+        fn flatten<'a, T: IntoIterator, Acc, R: TryWhereOutputEquals<Acc>>(\n             frontiter: &'a mut Option<T::IntoIter>,\n             fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n         ) -> impl FnMut(Acc, T) -> R + 'a {\n@@ -382,10 +382,10 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         #[inline]\n-        fn flatten<'a, T: IntoIterator, Acc, R: Try<Ok = Acc>>(\n+        fn flatten<'a, T: IntoIterator, Acc, R: TryWhereOutputEquals<Acc>>(\n             backiter: &'a mut Option<T::IntoIter>,\n             fold: &'a mut impl FnMut(Acc, T::Item) -> R,\n         ) -> impl FnMut(Acc, T) -> R + 'a"}, {"sha": "43d0626e3b7e8ffdaa87c3fc22bc892e35a90bea", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -3,7 +3,7 @@ use crate::iter::adapters::{zip::try_get_unchecked, InPlaceIterable, SourceIter}\n use crate::iter::{\n     DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess,\n };\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n@@ -92,7 +92,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         FuseImpl::try_fold(self, acc, fold)\n     }\n@@ -148,7 +148,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         FuseImpl::try_rfold(self, acc, fold)\n     }\n@@ -219,7 +219,7 @@ trait FuseImpl<I> {\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>;\n+        R: TryWhereOutputEquals<Acc>;\n     fn fold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc;\n@@ -238,7 +238,7 @@ trait FuseImpl<I> {\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n         I: DoubleEndedIterator;\n     fn rfold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n     where\n@@ -305,7 +305,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         if let Some(ref mut iter) = self.iter {\n             acc = iter.try_fold(acc, fold)?;\n@@ -354,7 +354,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n         I: DoubleEndedIterator,\n     {\n         if let Some(ref mut iter) = self.iter {\n@@ -443,7 +443,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         unchecked!(self).try_fold(init, fold)\n     }\n@@ -485,7 +485,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n         I: DoubleEndedIterator,\n     {\n         unchecked!(self).try_rfold(init, fold)"}, {"sha": "3221a0eeafa03ecadd1113210de574c4a82c87ef", "filename": "library/core/src/iter/adapters/inspect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that calls a function with a reference to each element before\n /// yielding it.\n@@ -87,7 +87,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_fold(init, inspect_try_fold(&mut self.f, fold))\n     }\n@@ -117,7 +117,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_rfold(init, inspect_try_fold(&mut self.f, fold))\n     }"}, {"sha": "8ca7adb013fe46f653d00f1383016e9cdbdbbc15", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,7 +1,7 @@\n use crate::fmt;\n use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that maps the values of `iter` with `f`.\n ///\n@@ -110,7 +110,7 @@ where\n     where\n         Self: Sized,\n         G: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_fold(init, map_try_fold(&mut self.f, g))\n     }\n@@ -146,7 +146,7 @@ where\n     where\n         Self: Sized,\n         G: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         self.iter.try_rfold(init, map_try_fold(&mut self.f, g))\n     }"}, {"sha": "ab16dbdb073dd1bc4d88ba50f905df646bfd6fe0", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, InPlaceIterable};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator that only accepts elements while `predicate` returns `Some(_)`.\n ///\n@@ -54,7 +54,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         let Self { iter, predicate } = self;\n         iter.try_fold(init, |acc, x| match predicate(x) {"}, {"sha": "048d209561b424ead353ab1edd61bc503a67492d", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{InPlaceIterable, Iterator};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n mod chain;\n mod cloned;\n@@ -167,7 +167,7 @@ where\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         let error = &mut *self.error;\n         self.iter"}, {"sha": "7e851c67de4343e0fc16d34be8c092c739646c9e", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n@@ -91,7 +91,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         let acc = match self.peeked.take() {\n             Some(None) => return try { init },\n@@ -134,15 +134,15 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         match self.peeked.take() {\n             Some(None) => try { init },\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n                     self.peeked = Some(Some(v));\n-                    Try::from_error(e)\n+                    R::from_error(e)\n                 }\n             },\n             None => self.iter.try_rfold(init, f),"}, {"sha": "f24bde9f6ad8e55ef6eebf02dd533c9766e15723", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// A double-ended iterator with the direction inverted.\n ///\n@@ -51,7 +51,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         self.iter.try_rfold(init, f)\n     }\n@@ -96,7 +96,7 @@ where\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         self.iter.try_fold(init, f)\n     }"}, {"sha": "38a3f255389d9d8d208b7b9d86380e1bf3e53fc4", "filename": "library/core/src/iter/adapters/scan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, InPlaceIterable};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator to maintain state while iterating another iterator.\n ///\n@@ -56,9 +56,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n-        fn scan<'a, T, St, B, Acc, R: Try<Ok = Acc>>(\n+        fn scan<'a, T, St, B, Acc, R: TryWhereOutputEquals<Acc>>(\n             state: &'a mut St,\n             f: &'a mut impl FnMut(&mut St, T) -> Option<B>,\n             mut fold: impl FnMut(Acc, B) -> R + 'a,"}, {"sha": "bee160baaad8274844b9e616a561fda5d23dd06e", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::intrinsics::unlikely;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator that skips over `n` elements of `iter`.\n ///\n@@ -88,7 +88,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         let n = self.n;\n         self.n = 0;\n@@ -146,9 +146,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n-        fn check<T, Acc, R: Try<Ok = Acc>>(\n+        fn check<T, Acc, R: TryWhereOutputEquals<Acc>>(\n             mut n: usize,\n             mut fold: impl FnMut(Acc, T) -> R,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> {"}, {"sha": "3c679187c62b1ca96cc27a710ef4d1f08d6e89a0", "filename": "library/core/src/iter/adapters/skip_while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n \n /// An iterator that rejects elements while `predicate` returns `true`.\n ///\n@@ -70,7 +70,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         if !self.flag {\n             match self.next() {"}, {"sha": "ad29bff213c8c891251f498231724f40a91e2a2e", "filename": "library/core/src/iter/adapters/step_by.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fstep_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fstep_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fstep_by.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,4 +1,4 @@\n-use crate::{intrinsics, iter::from_fn, ops::Try};\n+use crate::{intrinsics, iter::from_fn, ops::TryWhereOutputEquals};\n \n /// An iterator for stepping iterators by a custom amount.\n ///\n@@ -111,7 +111,7 @@ where\n     fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n     where\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         #[inline]\n         fn nth<I: Iterator>(iter: &mut I, step: usize) -> impl FnMut() -> Option<I::Item> + '_ {\n@@ -187,7 +187,7 @@ where\n     fn try_rfold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R\n     where\n         F: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         #[inline]\n         fn nth_back<I: DoubleEndedIterator>("}, {"sha": "4852efebdf40fe561872e2e6a9cec710efb8d4d6", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -3,7 +3,7 @@ use crate::iter::{\n     adapters::zip::try_get_unchecked, adapters::SourceIter, FusedIterator, InPlaceIterable,\n     TrustedLen, TrustedRandomAccess,\n };\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n ///\n@@ -80,9 +80,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n-        fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n+        fn check<'a, T, Acc, R: TryWhereOutputEquals<Acc>>(\n             n: &'a mut usize,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<R, Acc> + 'a {\n@@ -178,7 +178,7 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n         if self.n == 0 {\n             try { init }"}, {"sha": "d97d3141496afc172bb010fa68574076b2d93683", "filename": "library/core/src/iter/adapters/take_while.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,6 +1,6 @@\n use crate::fmt;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator that only accepts elements while `predicate` returns `true`.\n ///\n@@ -68,9 +68,9 @@ where\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n+        R: TryWhereOutputEquals<Acc>,\n     {\n-        fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n+        fn check<'a, T, Acc, R: TryWhereOutputEquals<Acc>>(\n             flag: &'a mut bool,\n             p: &'a mut impl FnMut(&T) -> bool,\n             mut fold: impl FnMut(Acc, T) -> R + 'a,"}, {"sha": "d3da606665497040603ce0454773a1531f2cfdec", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,7 +1,7 @@\n use crate::char;\n use crate::convert::TryFrom;\n use crate::mem;\n-use crate::ops::{self, Try};\n+use crate::ops::{self, TryWhereOutputEquals};\n \n use super::{FusedIterator, TrustedLen, TrustedRandomAccess};\n \n@@ -755,7 +755,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         if self.is_empty() {\n             return try { init };\n@@ -860,7 +860,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         if self.is_empty() {\n             return try { init };"}, {"sha": "aed48a48ddedb23a40c8475ee104232e4558bf12", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,4 +1,4 @@\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n /// An iterator able to yield elements from both ends.\n ///\n@@ -218,7 +218,7 @@ pub trait DoubleEndedIterator: Iterator {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         let mut accum = init;\n         while let Some(x) = self.next_back() {"}, {"sha": "30f47443ecb15d798eb27b07612b25fdfff26cab", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -3,7 +3,7 @@\n // can't split that into multiple files.\n \n use crate::cmp::{self, Ordering};\n-use crate::ops::{ControlFlow, Try};\n+use crate::ops::{ControlFlow, TryWhereOutputEquals};\n \n use super::super::TrustedRandomAccess;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n@@ -1999,7 +1999,7 @@ pub trait Iterator {\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> R,\n-        R: Try<Ok = B>,\n+        R: TryWhereOutputEquals<B>,\n     {\n         let mut accum = init;\n         while let Some(x) = self.next() {\n@@ -2041,7 +2041,7 @@ pub trait Iterator {\n     where\n         Self: Sized,\n         F: FnMut(Self::Item) -> R,\n-        R: Try<Ok = ()>,\n+        R: TryWhereOutputEquals<()>,\n     {\n         #[inline]\n         fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {\n@@ -2416,13 +2416,13 @@ pub trait Iterator {\n     where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> R,\n-        R: Try<Ok = bool>,\n+        R: TryWhereOutputEquals<bool>,\n     {\n         #[inline]\n         fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, R::Error>>\n         where\n             F: FnMut(&T) -> R,\n-            R: Try<Ok = bool>,\n+            R: TryWhereOutputEquals<bool>,\n         {\n             move |(), x| match f(&x).into_result() {\n                 Ok(false) => ControlFlow::CONTINUE,"}, {"sha": "b5ac590b59d7eabe233578c5b9ed3ba4aa11db29", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,5 +1,4 @@\n-use crate::convert;\n-use crate::ops::{self, Try};\n+use crate::{convert, ops};\n \n /// Used to tell an operation whether it should exit early or go on as usual.\n ///\n@@ -62,7 +61,7 @@ pub enum ControlFlow<B, C = ()> {\n }\n \n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-impl<B, C> Try for ControlFlow<B, C> {\n+impl<B, C> ops::TryV1 for ControlFlow<B, C> {\n     type Ok = C;\n     type Error = B;\n     #[inline]\n@@ -182,14 +181,14 @@ impl<B, C> ControlFlow<B, C> {\n     }\n }\n \n-impl<R: Try> ControlFlow<R, R::Ok> {\n+impl<R: ops::TryV1> ControlFlow<R, R::Ok> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     #[inline]\n     pub fn from_try(r: R) -> Self {\n-        match Try::into_result(r) {\n+        match R::into_result(r) {\n             Ok(v) => ControlFlow::Continue(v),\n-            Err(v) => ControlFlow::Break(Try::from_error(v)),\n+            Err(v) => ControlFlow::Break(R::from_error(v)),\n         }\n     }\n \n@@ -198,7 +197,7 @@ impl<R: Try> ControlFlow<R, R::Ok> {\n     #[inline]\n     pub fn into_try(self) -> R {\n         match self {\n-            ControlFlow::Continue(v) => Try::from_ok(v),\n+            ControlFlow::Continue(v) => R::from_ok(v),\n             ControlFlow::Break(v) => v,\n         }\n     }"}, {"sha": "7f747ced397492d8e94eb081c6d0aa5681dc74c5", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -185,6 +185,9 @@ pub use self::range::{Bound, RangeBounds, RangeInclusive, RangeToInclusive};\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n pub use self::r#try::Try;\n \n+#[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n+pub use self::r#try::Try as TryV1;\n+\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub use self::try_trait::FromResidual;\n \n@@ -202,3 +205,19 @@ pub use self::unsize::DispatchFromDyn;\n \n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n pub use self::control_flow::ControlFlow;\n+\n+/// [`TryV1`] and [`TryV2`] have different associated type names,\n+/// so rather than need `bootstrap` checks all over the library,\n+/// centralize the difference to this one trait alias.\n+///\n+/// As with all `try_trait_transition` stuff, this will be deleted\n+/// after the bootstrap compiler uses V2 for `?`.\n+///\n+/// ```\n+/// #![feature(try_trait_transition)]\n+/// use std::ops::TryWhereOutputEquals;\n+/// fn foo<T, C>() where T: TryWhereOutputEquals<C> {}\n+/// foo::<Option<i32>, i32>();\n+/// ```\n+#[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n+pub trait TryWhereOutputEquals<T> = TryV1<Ok = T>;"}, {"sha": "928d8441fa6d13d6889710a54733fefb8bcfa68c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1644,7 +1644,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n pub struct NoneError;\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-impl<T> ops::Try for Option<T> {\n+impl<T> ops::TryV1 for Option<T> {\n     type Ok = T;\n     type Error = NoneError;\n "}, {"sha": "5f6afcc82218231339f66e3684234bbebdbd156e", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1627,7 +1627,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n }\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-impl<T, E> ops::Try for Result<T, E> {\n+impl<T, E> ops::TryV1 for Result<T, E> {\n     type Ok = T;\n     type Error = E;\n "}, {"sha": "c3ba8b23e8df90d9d0b80a9481d1b47d93ecd99b", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -110,7 +110,7 @@ impl<'a> iter::Iterator for EscapeAscii<'a> {\n     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n         Fold: FnMut(Acc, Self::Item) -> R,\n-        R: ops::Try<Ok = Acc>,\n+        R: ops::TryWhereOutputEquals<Acc>,\n     {\n         self.inner.try_fold(init, fold)\n     }"}, {"sha": "612f17a1e61617ddd35f8c7a080264965b6db658", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -5,7 +5,7 @@ use crate::fmt::{self, Write};\n use crate::iter::TrustedRandomAccess;\n use crate::iter::{Chain, FlatMap, Flatten};\n use crate::iter::{Copied, Filter, FusedIterator, Map, TrustedLen};\n-use crate::ops::Try;\n+use crate::ops::TryWhereOutputEquals;\n use crate::option;\n use crate::slice::{self, Split as SliceSplit};\n \n@@ -1467,7 +1467,7 @@ macro_rules! escape_types_impls {\n \n             #[inline]\n             fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n-                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n+                Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: TryWhereOutputEquals<Acc>\n             {\n                 self.inner.try_fold(init, fold)\n             }"}, {"sha": "2ccfc22c27cac11330eda9ee7d3c69b36cdd2a71", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10eec3a1ca0a328f406f6b752eb0fd3a90dca91/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=c10eec3a1ca0a328f406f6b752eb0fd3a90dca91", "patch": "@@ -1,7 +1,7 @@\n #![stable(feature = \"futures_api\", since = \"1.36.0\")]\n \n use crate::convert;\n-use crate::ops::{self, ControlFlow, Try};\n+use crate::ops::{self, ControlFlow};\n use crate::result::Result;\n \n /// Indicates whether a value is available or if the current task has been\n@@ -129,7 +129,7 @@ impl<T> From<T> for Poll<T> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<T, E> Try for Poll<Result<T, E>> {\n+impl<T, E> ops::TryV1 for Poll<Result<T, E>> {\n     type Ok = Poll<T>;\n     type Error = E;\n \n@@ -184,7 +184,7 @@ impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Pol\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<T, E> Try for Poll<Option<Result<T, E>>> {\n+impl<T, E> ops::TryV1 for Poll<Option<Result<T, E>>> {\n     type Ok = Poll<Option<T>>;\n     type Error = E;\n "}]}