{"sha": "71c9a884d1d9b27bf9da8ce7d328d74349db54a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYzlhODg0ZDFkOWIyN2JmOWRhOGNlN2QzMjhkNzQzNDlkYjU0YTI=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T04:41:04Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:52Z"}, "message": "Fix type error with .and_then", "tree": {"sha": "3da4580708ecd1f1f5b0605658d223432ae049c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da4580708ecd1f1f5b0605658d223432ae049c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c9a884d1d9b27bf9da8ce7d328d74349db54a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c9a884d1d9b27bf9da8ce7d328d74349db54a2", "html_url": "https://github.com/rust-lang/rust/commit/71c9a884d1d9b27bf9da8ce7d328d74349db54a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c9a884d1d9b27bf9da8ce7d328d74349db54a2/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "html_url": "https://github.com/rust-lang/rust/commit/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "436c59d2c7bfb0cd81d892ba987525babd7e0a11", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71c9a884d1d9b27bf9da8ce7d328d74349db54a2/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c9a884d1d9b27bf9da8ce7d328d74349db54a2/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=71c9a884d1d9b27bf9da8ce7d328d74349db54a2", "patch": "@@ -120,58 +120,57 @@ impl Definition {\n         let file_id = module_src.file_id.original_file(db);\n \n         if let Definition::Local(var) = self {\n-            #[allow(deprecated)]\n             let range = match var.parent(db) {\n                 DefWithBody::Function(f) => {\n-                    f.source(db).and_then(|src| src.value.syntax().text_range())\n+                    f.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 DefWithBody::Const(c) => {\n-                    c.source(db).and_then(|src| src.value.syntax().text_range())\n+                    c.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 DefWithBody::Static(s) => {\n-                    s.source(db).and_then(|src| src.value.syntax().text_range())\n+                    s.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n             };\n             let mut res = FxHashMap::default();\n-            res.insert(file_id, Some(range));\n+            res.insert(file_id, range);\n             return SearchScope::new(res);\n         }\n \n         if let Definition::LifetimeParam(param) = self {\n             #[allow(deprecated)]\n             let range = match param.parent(db) {\n                 hir::GenericDef::Function(it) => {\n-                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 hir::GenericDef::Adt(it) => match it {\n                     hir::Adt::Struct(it) => {\n-                        it.source(db).and_then(|src| src.value.syntax().text_range())\n+                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                     }\n                     hir::Adt::Union(it) => {\n-                        it.source(db).and_then(|src| src.value.syntax().text_range())\n+                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                     }\n                     hir::Adt::Enum(it) => {\n-                        it.source(db).and_then(|src| src.value.syntax().text_range())\n+                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                     }\n                 },\n                 hir::GenericDef::Trait(it) => {\n-                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 hir::GenericDef::TypeAlias(it) => {\n-                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 hir::GenericDef::Impl(it) => {\n-                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 hir::GenericDef::Variant(it) => {\n-                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n                 hir::GenericDef::Const(it) => {\n-                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n                 }\n             };\n             let mut res = FxHashMap::default();\n-            res.insert(file_id, Some(range));\n+            res.insert(file_id, range);\n             return SearchScope::new(res);\n         }\n "}]}