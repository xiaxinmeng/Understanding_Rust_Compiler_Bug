{"sha": "38a0b81b1c32764d6a583a5efb6f306b8c44c503", "node_id": "C_kwDOAAsO6NoAKDM4YTBiODFiMWMzMjc2NGQ2YTU4M2E1ZWZiNmYzMDZiOGM0NGM1MDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T20:21:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T20:21:35Z"}, "message": "Auto merge of #94679 - matthiaskrgr:rollup-9vd7w6a, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #94659 (explain why shift with signed offset works the way it does)\n - #94671 (fix pin doc typo)\n - #94672 (Improved error message for failed bitcode load)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "85ba5541fd089c08781679eb7d9dc881948e9ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85ba5541fd089c08781679eb7d9dc881948e9ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a0b81b1c32764d6a583a5efb6f306b8c44c503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a0b81b1c32764d6a583a5efb6f306b8c44c503", "html_url": "https://github.com/rust-lang/rust/commit/38a0b81b1c32764d6a583a5efb6f306b8c44c503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a0b81b1c32764d6a583a5efb6f306b8c44c503/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38b8a8c621e0c946af1b74f57bb8cc028e0060d", "html_url": "https://github.com/rust-lang/rust/commit/c38b8a8c621e0c946af1b74f57bb8cc028e0060d"}, {"sha": "0480a3254afc371ee2f402cd588a1a61fc679eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/0480a3254afc371ee2f402cd588a1a61fc679eea", "html_url": "https://github.com/rust-lang/rust/commit/0480a3254afc371ee2f402cd588a1a61fc679eea"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "0f5b1c08ec2dc707920b85ec45c08aac2bde8193", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a0b81b1c32764d6a583a5efb6f306b8c44c503/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a0b81b1c32764d6a583a5efb6f306b8c44c503/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=38a0b81b1c32764d6a583a5efb6f306b8c44c503", "patch": "@@ -317,7 +317,7 @@ fn fat_lto(\n             info!(\"linking {:?}\", name);\n             let data = bc_decoded.data();\n             linker.add(data).map_err(|()| {\n-                let msg = format!(\"failed to load bc of {:?}\", name);\n+                let msg = format!(\"failed to load bitcode of module {:?}\", name);\n                 write::llvm_err(diag_handler, &msg)\n             })?;\n             serialized_bitcode.push(bc_decoded);"}, {"sha": "6dae9dc72b7b4668df706aa5dc605f0e2c3a7ea4", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38a0b81b1c32764d6a583a5efb6f306b8c44c503/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a0b81b1c32764d6a583a5efb6f306b8c44c503/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=38a0b81b1c32764d6a583a5efb6f306b8c44c503", "patch": "@@ -127,17 +127,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Shift ops can have an RHS with a different numeric type.\n         if bin_op == Shl || bin_op == Shr {\n-            let signed = left_layout.abi.is_signed();\n             let size = u128::from(left_layout.size.bits());\n+            // Even if `r` is signed, we treat it as if it was unsigned (i.e., we use its\n+            // zero-extended form). This matches the codegen backend:\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/base.rs#L315-L317>.\n+            // The overflow check is also ignorant to the sign:\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L728>.\n+            // This would behave rather strangely if we had integer types of size 256: a shift by\n+            // -1i8 would actually shift by 255, but that would *not* be considered overflowing. A\n+            // shift by -1i16 though would be considered overflowing. If we had integers of size\n+            // 512, then a shift by -1i8 would even produce a different result than one by -1i16:\n+            // the first shifts by 255, the latter by u16::MAX % 512 = 511. Lucky enough, our\n+            // integers are maximally 128bits wide, so negative shifts *always* overflow and we have\n+            // consistent results for the same value represented at different bit widths.\n+            assert!(size <= 128);\n             let overflow = r >= size;\n             // The shift offset is implicitly masked to the type size, to make sure this operation\n             // is always defined. This is the one MIR operator that does *not* directly map to a\n             // single LLVM operation. See\n-            // <https://github.com/rust-lang/rust/blob/a3b9405ae7bb6ab4e8103b414e75c44598a10fd2/compiler/rustc_codegen_ssa/src/common.rs#L131-L158>\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/common.rs#L131-L158>\n             // for the corresponding truncation in our codegen backends.\n             let r = r % size;\n             let r = u32::try_from(r).unwrap(); // we masked so this will always fit\n-            let result = if signed {\n+            let result = if left_layout.abi.is_signed() {\n                 let l = self.sign_extend(l, left_layout) as i128;\n                 let result = match bin_op {\n                     Shl => l.checked_shl(r).unwrap(),"}, {"sha": "cef6a68b4d329e5d2f7ef343ce53880bcc33b888", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a0b81b1c32764d6a583a5efb6f306b8c44c503/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a0b81b1c32764d6a583a5efb6f306b8c44c503/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=38a0b81b1c32764d6a583a5efb6f306b8c44c503", "patch": "@@ -954,7 +954,7 @@ impl<P, U> DispatchFromDyn<Pin<U>> for Pin<P> where P: DispatchFromDyn<U> {}\n /// stuff(pin!(Foo { /* \u2026 */ }));\n /// ```\n ///\n-/// ### Manually polling a `Future` (wihout `Unpin` bounds)\n+/// ### Manually polling a `Future` (without `Unpin` bounds)\n ///\n /// ```rust\n /// #![feature(pin_macro)]"}, {"sha": "f66afa94f4da71fe9db1e389001a7d101c97c3da", "filename": "src/test/ui/lto/lto-duplicate-symbols.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a0b81b1c32764d6a583a5efb6f306b8c44c503/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a0b81b1c32764d6a583a5efb6f306b8c44c503/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.stderr?ref=38a0b81b1c32764d6a583a5efb6f306b8c44c503", "patch": "@@ -1,6 +1,6 @@\n warning: Linking globals named 'foo': symbol multiply defined!\n \n-error: failed to load bc of \"lto-duplicate-symbols2.lto_duplicate_symbols2.HASH-cgu.0.rcgu.o\": \n+error: failed to load bitcode of module \"lto-duplicate-symbols2.lto_duplicate_symbols2.HASH-cgu.0.rcgu.o\": \n \n error: aborting due to previous error; 1 warning emitted\n "}]}