{"sha": "20d962cfa5511eece711684ff83cb721eacd60dc", "node_id": "C_kwDOAAsO6NoAKDIwZDk2MmNmYTU1MTFlZWNlNzExNjg0ZmY4M2NiNzIxZWFjZDYwZGM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-21T15:42:25Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T13:15:24Z"}, "message": "Simplify insert_outlives_predicate opaque type logic", "tree": {"sha": "562186b7bc7e00fbd1a2cbb0fb62179778ecf3da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/562186b7bc7e00fbd1a2cbb0fb62179778ecf3da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20d962cfa5511eece711684ff83cb721eacd60dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20d962cfa5511eece711684ff83cb721eacd60dc", "html_url": "https://github.com/rust-lang/rust/commit/20d962cfa5511eece711684ff83cb721eacd60dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20d962cfa5511eece711684ff83cb721eacd60dc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "html_url": "https://github.com/rust-lang/rust/commit/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "f582fdf903ddd6e84cc0ce4c1e5b108bba39e31b", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/20d962cfa5511eece711684ff83cb721eacd60dc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d962cfa5511eece711684ff83cb721eacd60dc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=20d962cfa5511eece711684ff83cb721eacd60dc", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, EarlyBinder, Region, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Region, Ty, TyCtxt};\n use rustc_span::Span;\n use smallvec::smallvec;\n use std::collections::BTreeMap;\n@@ -97,36 +97,20 @@ pub(crate) fn insert_outlives_predicate<'tcx>(\n                     }\n \n                     Component::Opaque(def_id, substs) => {\n-                        for predicate in tcx.item_bounds(def_id) {\n-                            let predicate = EarlyBinder(predicate).subst(tcx, substs);\n-                            // FIXME(oli-obk): fishy skip-binder\n-                            match predicate.kind().skip_binder() {\n-                                ty::PredicateKind::Trait(tp) => {\n-                                    for subst in tp.trait_ref.substs {\n-                                        insert_outlives_predicate(\n-                                            tcx,\n-                                            subst,\n-                                            outlived_region,\n-                                            span,\n-                                            required_predicates,\n-                                        )\n-                                    }\n-                                }\n-                                ty::PredicateKind::RegionOutlives(_)\n-                                | ty::PredicateKind::TypeOutlives(_)\n-                                | ty::PredicateKind::Projection(_)\n-                                | ty::PredicateKind::WellFormed(_)\n-                                | ty::PredicateKind::ObjectSafe(_)\n-                                | ty::PredicateKind::ClosureKind(_, _, _)\n-                                | ty::PredicateKind::Subtype(_)\n-                                | ty::PredicateKind::Coerce(_)\n-                                | ty::PredicateKind::ConstEvaluatable(_)\n-                                | ty::PredicateKind::ConstEquate(_, _)\n-                                | ty::PredicateKind::TypeWellFormedFromEnv(_) => {\n-                                    todo!(\"{:#?}\", predicate)\n-                                }\n-                            }\n-                        }\n+                        // This would arise from something like:\n+                        //\n+                        // ```rust\n+                        // type Opaque<T> = impl Sized;\n+                        // fn defining<T>() -> Opaque<T> {}\n+                        // struct Ss<'a, T>(&'a Opaque<T>);\n+                        // ```\n+                        //\n+                        // Here we want to require an explicit `where Opaque<T>: 'a`\n+\n+                        let ty = tcx.mk_opaque(def_id, substs);\n+                        required_predicates\n+                            .entry(ty::OutlivesPredicate(ty.into(), outlived_region))\n+                            .or_insert(span);\n                     }\n \n                     Component::EscapingProjection(_) => {"}, {"sha": "a5ab3e1acae5268fb1c3a1bf3e81d0b8904bec79", "filename": "src/test/ui/type-alias-impl-trait/unbounded_opaque_type.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20d962cfa5511eece711684ff83cb721eacd60dc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funbounded_opaque_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d962cfa5511eece711684ff83cb721eacd60dc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funbounded_opaque_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funbounded_opaque_type.rs?ref=20d962cfa5511eece711684ff83cb721eacd60dc", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+type Opaque<T> = impl Sized;\n+fn defining<T>() -> Opaque<T> {}\n+struct Ss<'a, T>(&'a Opaque<T>);\n+\n+fn main() {}"}]}