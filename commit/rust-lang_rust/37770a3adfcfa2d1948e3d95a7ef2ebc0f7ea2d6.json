{"sha": "37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NzcwYTNhZGZjZmEyZDE5NDhlM2Q5NWE3ZWYyZWJjMGY3ZWEyZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-26T14:01:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-26T14:01:02Z"}, "message": "Merge #2072\n\n2072: Upgrade Chalk (without using its dyn/impl Trait support) r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "7480a8bfc49b5934c86a20ea9979d47c913a1734", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7480a8bfc49b5934c86a20ea9979d47c913a1734"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtFGeCRBK7hj4Ov3rIwAAdHIIAGeQdwKnjq+PLerR37EgK4Zy\nEGI39zp1k4dSCZ7PHbCetcpQkGe6X9czI2/qArKNsCqA443kpofSH2fK2jfeCQOo\ngm4TkD37R164PNT+aSZ6OrJyI2TOG12EUO05D4gf0yD4M+fNIgifozbjLgzQiWay\negT5lRsHRxqK+0k5KIYA/JhXGUzE7nwyboL/zCw32PV6iqVrFl9w+1owojSKfnF7\nwZVjKf5S2Y6oeXS5cdbW4HG6hKbfJ3b7o17xuRB6sCGOxxDqc1YInc/MzcYej0Cd\nFdO6sS3MAriErYGsrpkDOxbygAaVJIDtlH0BhTEJSRtizdAe+NmuyBYgucvnHRU=\n=JJBQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7480a8bfc49b5934c86a20ea9979d47c913a1734\nparent 54d1a582812e01691ecb2f8ed11e8df9dda1530c\nparent b342ee561697d9925e7ee07cd5b56fd029562c94\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572098462 +0000\ncommitter GitHub <noreply@github.com> 1572098462 +0000\n\nMerge #2072\n\n2072: Upgrade Chalk (without using its dyn/impl Trait support) r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "html_url": "https://github.com/rust-lang/rust/commit/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d1a582812e01691ecb2f8ed11e8df9dda1530c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d1a582812e01691ecb2f8ed11e8df9dda1530c", "html_url": "https://github.com/rust-lang/rust/commit/54d1a582812e01691ecb2f8ed11e8df9dda1530c"}, {"sha": "b342ee561697d9925e7ee07cd5b56fd029562c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/b342ee561697d9925e7ee07cd5b56fd029562c94", "html_url": "https://github.com/rust-lang/rust/commit/b342ee561697d9925e7ee07cd5b56fd029562c94"}], "stats": {"total": 168, "additions": 99, "deletions": 69}, "files": [{"sha": "6f8a4431d5a71f961e96d8dc4b800006ee626976", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "patch": "@@ -126,50 +126,50 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9#13303bb0067c6ed0572322080ae367ee38f9e7c9\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae#1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\"\n dependencies = [\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stacker 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9#13303bb0067c6ed0572322080ae367ee38f9e7c9\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae#1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\"\n dependencies = [\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9#13303bb0067c6ed0572322080ae367ee38f9e7c9\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae#1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9#13303bb0067c6ed0572322080ae367ee38f9e7c9\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae#1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\"\n dependencies = [\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9#13303bb0067c6ed0572322080ae367ee38f9e7c9\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae#1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\"\n dependencies = [\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -979,9 +979,9 @@ name = \"ra_hir\"\n version = \"0.1.0\"\n dependencies = [\n  \"arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n- \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n+ \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1794,11 +1794,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d2d1617e838936c0d2323a65cc151e03ae19a7678dd24f72bccf27119b90a5d\"\n \"checksum cc 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0213d356d3c4ea2c18c40b037c3be23cd639825c18f25ee670ac7813beeef99c\"\n \"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\" = \"<none>\"\n-\"checksum chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\" = \"<none>\"\n-\"checksum chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\" = \"<none>\"\n-\"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\" = \"<none>\"\n-\"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=13303bb0067c6ed0572322080ae367ee38f9e7c9)\" = \"<none>\"\n+\"checksum chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\" = \"<none>\"\n+\"checksum chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\" = \"<none>\"\n+\"checksum chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\" = \"<none>\"\n+\"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\" = \"<none>\"\n+\"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae)\" = \"<none>\"\n \"checksum chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8493056968583b0193c1bb04d6f7684586f3726992d6c573261941a895dbd68\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\""}, {"sha": "f05ec0b8a730ee8c567a368a9897136cfa8cda3e", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "patch": "@@ -22,9 +22,9 @@ tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n test_utils = { path = \"../test_utils\" }\n ra_prof = { path = \"../ra_prof\" }\n \n-chalk-solve = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"13303bb0067c6ed0572322080ae367ee38f9e7c9\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"13303bb0067c6ed0572322080ae367ee38f9e7c9\" }\n-chalk-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"13303bb0067c6ed0572322080ae367ee38f9e7c9\" }\n+chalk-solve = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\" }\n+chalk-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"1e5c1929364dfbb7c0c7ac0956b8250abe7c2cae\" }\n lalrpop-intern = \"0.15.1\"\n \n [dev-dependencies]"}, {"sha": "4f1eab1508afdca01768224369b680290c7868c2", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "patch": "@@ -1,7 +1,7 @@\n //! Trait solving using Chalk.\n use std::sync::{Arc, Mutex};\n \n-use chalk_ir::cast::Cast;\n+use chalk_ir::{cast::Cast, family::ChalkIr};\n use log::debug;\n use ra_db::salsa;\n use ra_prof::profile;\n@@ -33,7 +33,7 @@ impl TraitSolver {\n     fn solve(\n         &self,\n         db: &impl HirDatabase,\n-        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal>>,\n+        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<ChalkIr>>>,\n     ) -> Option<chalk_solve::Solution> {\n         let context = ChalkContext { db, krate: self.krate };\n         debug!(\"solve goal: {:?}\", goal);\n@@ -196,7 +196,7 @@ pub(crate) fn trait_solve_query(\n }\n \n fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -> Solution {\n-    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution>| {\n+    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<ChalkIr>>| {\n         let value = subst\n             .value\n             .parameters"}, {"sha": "ad7c11a5a83d9447ef8ed30949f59010f19e1f0a", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 70, "deletions": 40, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=37770a3adfcfa2d1948e3d95a7ef2ebc0f7ea2d6", "patch": "@@ -4,8 +4,8 @@ use std::sync::Arc;\n use log::debug;\n \n use chalk_ir::{\n-    cast::Cast, Identifier, ImplId, Parameter, PlaceholderIndex, TypeId, TypeKindId, TypeName,\n-    UniverseIndex,\n+    cast::Cast, family::ChalkIr, Identifier, ImplId, Parameter, PlaceholderIndex, TypeId,\n+    TypeKindId, TypeName, UniverseIndex,\n };\n use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n \n@@ -38,8 +38,8 @@ where\n }\n \n impl ToChalk for Ty {\n-    type Chalk = chalk_ir::Ty;\n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty {\n+    type Chalk = chalk_ir::Ty<ChalkIr>;\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty<ChalkIr> {\n         match self {\n             Ty::Apply(apply_ty) => {\n                 let name = match apply_ty.ctor {\n@@ -62,21 +62,21 @@ impl ToChalk for Ty {\n                 chalk_ir::ProjectionTy { associated_ty_id, parameters }.cast()\n             }\n             Ty::Param { idx, .. } => {\n-                PlaceholderIndex { ui: UniverseIndex::ROOT, idx: idx as usize }.to_ty()\n+                PlaceholderIndex { ui: UniverseIndex::ROOT, idx: idx as usize }.to_ty::<ChalkIr>()\n             }\n             Ty::Bound(idx) => chalk_ir::Ty::BoundVar(idx as usize),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n             // FIXME this is clearly incorrect, but probably not too incorrect\n             // and I'm not sure what to actually do with Ty::Unknown\n             // maybe an alternative would be `for<T> T`? (meaningless in rust, but expressible in chalk's Ty)\n-            //\n-            // FIXME also dyn and impl Trait are currently handled like Unknown because Chalk doesn't have them yet\n+            // FIXME use Chalk's Dyn/Opaque once the bugs with that are fixed\n             Ty::Unknown | Ty::Dyn(_) | Ty::Opaque(_) => {\n-                PlaceholderIndex { ui: UniverseIndex::ROOT, idx: usize::max_value() }.to_ty()\n+                PlaceholderIndex { ui: UniverseIndex::ROOT, idx: usize::max_value() }\n+                    .to_ty::<ChalkIr>()\n             }\n         }\n     }\n-    fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty) -> Self {\n+    fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty<ChalkIr>) -> Self {\n         match chalk {\n             chalk_ir::Ty::Apply(apply_ty) => {\n                 // FIXME this is kind of hacky due to the fact that\n@@ -108,18 +108,30 @@ impl ToChalk for Ty {\n             chalk_ir::Ty::ForAll(_) => unimplemented!(),\n             chalk_ir::Ty::BoundVar(idx) => Ty::Bound(idx as u32),\n             chalk_ir::Ty::InferenceVar(_iv) => Ty::Unknown,\n+            chalk_ir::Ty::Dyn(where_clauses) => {\n+                assert_eq!(where_clauses.binders.len(), 1);\n+                let predicates =\n+                    where_clauses.value.into_iter().map(|c| from_chalk(db, c)).collect();\n+                Ty::Dyn(predicates)\n+            }\n+            chalk_ir::Ty::Opaque(where_clauses) => {\n+                assert_eq!(where_clauses.binders.len(), 1);\n+                let predicates =\n+                    where_clauses.value.into_iter().map(|c| from_chalk(db, c)).collect();\n+                Ty::Opaque(predicates)\n+            }\n         }\n     }\n }\n \n impl ToChalk for Substs {\n-    type Chalk = Vec<chalk_ir::Parameter>;\n+    type Chalk = Vec<chalk_ir::Parameter<ChalkIr>>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> Vec<Parameter> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> Vec<Parameter<ChalkIr>> {\n         self.iter().map(|ty| ty.clone().to_chalk(db).cast()).collect()\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, parameters: Vec<chalk_ir::Parameter>) -> Substs {\n+    fn from_chalk(db: &impl HirDatabase, parameters: Vec<chalk_ir::Parameter<ChalkIr>>) -> Substs {\n         let tys = parameters\n             .into_iter()\n             .map(|p| match p {\n@@ -132,15 +144,15 @@ impl ToChalk for Substs {\n }\n \n impl ToChalk for TraitRef {\n-    type Chalk = chalk_ir::TraitRef;\n+    type Chalk = chalk_ir::TraitRef<ChalkIr>;\n \n-    fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef {\n+    fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef<ChalkIr> {\n         let trait_id = self.trait_.to_chalk(db);\n         let parameters = self.substs.to_chalk(db);\n         chalk_ir::TraitRef { trait_id, parameters }\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef) -> Self {\n+    fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef<ChalkIr>) -> Self {\n         let trait_ = from_chalk(db, trait_ref.trait_id);\n         let substs = from_chalk(db, trait_ref.parameters);\n         TraitRef { trait_, substs }\n@@ -196,9 +208,9 @@ impl ToChalk for TypeAlias {\n }\n \n impl ToChalk for GenericPredicate {\n-    type Chalk = chalk_ir::QuantifiedWhereClause;\n+    type Chalk = chalk_ir::QuantifiedWhereClause<ChalkIr>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::QuantifiedWhereClause {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::QuantifiedWhereClause<ChalkIr> {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => {\n                 make_binders(chalk_ir::WhereClause::Implemented(trait_ref.to_chalk(db)), 0)\n@@ -221,25 +233,40 @@ impl ToChalk for GenericPredicate {\n     }\n \n     fn from_chalk(\n-        _db: &impl HirDatabase,\n-        _where_clause: chalk_ir::QuantifiedWhereClause,\n+        db: &impl HirDatabase,\n+        where_clause: chalk_ir::QuantifiedWhereClause<ChalkIr>,\n     ) -> GenericPredicate {\n-        // This should never need to be called\n-        unimplemented!()\n+        match where_clause.value {\n+            chalk_ir::WhereClause::Implemented(tr) => {\n+                if tr.trait_id == UNKNOWN_TRAIT {\n+                    // FIXME we need an Error enum on the Chalk side to avoid this\n+                    return GenericPredicate::Error;\n+                }\n+                GenericPredicate::Implemented(from_chalk(db, tr))\n+            }\n+            chalk_ir::WhereClause::ProjectionEq(projection_eq) => {\n+                let projection_ty = from_chalk(db, projection_eq.projection);\n+                let ty = from_chalk(db, projection_eq.ty);\n+                GenericPredicate::Projection(super::ProjectionPredicate { projection_ty, ty })\n+            }\n+        }\n     }\n }\n \n impl ToChalk for ProjectionTy {\n-    type Chalk = chalk_ir::ProjectionTy;\n+    type Chalk = chalk_ir::ProjectionTy<ChalkIr>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::ProjectionTy {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::ProjectionTy<ChalkIr> {\n         chalk_ir::ProjectionTy {\n             associated_ty_id: self.associated_ty.to_chalk(db),\n             parameters: self.parameters.to_chalk(db),\n         }\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, projection_ty: chalk_ir::ProjectionTy) -> ProjectionTy {\n+    fn from_chalk(\n+        db: &impl HirDatabase,\n+        projection_ty: chalk_ir::ProjectionTy<ChalkIr>,\n+    ) -> ProjectionTy {\n         ProjectionTy {\n             associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n             parameters: from_chalk(db, projection_ty.parameters),\n@@ -248,31 +275,31 @@ impl ToChalk for ProjectionTy {\n }\n \n impl ToChalk for super::ProjectionPredicate {\n-    type Chalk = chalk_ir::Normalize;\n+    type Chalk = chalk_ir::Normalize<ChalkIr>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize<ChalkIr> {\n         chalk_ir::Normalize {\n             projection: self.projection_ty.to_chalk(db),\n             ty: self.ty.to_chalk(db),\n         }\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize) -> Self {\n+    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize<ChalkIr>) -> Self {\n         unimplemented!()\n     }\n }\n \n impl ToChalk for Obligation {\n-    type Chalk = chalk_ir::DomainGoal;\n+    type Chalk = chalk_ir::DomainGoal<ChalkIr>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal<ChalkIr> {\n         match self {\n             Obligation::Trait(tr) => tr.to_chalk(db).cast(),\n             Obligation::Projection(pr) => pr.to_chalk(db).cast(),\n         }\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal) -> Self {\n+    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal<ChalkIr>) -> Self {\n         unimplemented!()\n     }\n }\n@@ -296,30 +323,33 @@ where\n }\n \n impl ToChalk for Arc<super::TraitEnvironment> {\n-    type Chalk = Arc<chalk_ir::Environment>;\n+    type Chalk = Arc<chalk_ir::Environment<ChalkIr>>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> Arc<chalk_ir::Environment> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> Arc<chalk_ir::Environment<ChalkIr>> {\n         let mut clauses = Vec::new();\n         for pred in &self.predicates {\n             if pred.is_error() {\n                 // for env, we just ignore errors\n                 continue;\n             }\n-            let program_clause: chalk_ir::ProgramClause = pred.clone().to_chalk(db).cast();\n+            let program_clause: chalk_ir::ProgramClause<ChalkIr> = pred.clone().to_chalk(db).cast();\n             clauses.push(program_clause.into_from_env_clause());\n         }\n         chalk_ir::Environment::new().add_clauses(clauses)\n     }\n \n     fn from_chalk(\n         _db: &impl HirDatabase,\n-        _env: Arc<chalk_ir::Environment>,\n+        _env: Arc<chalk_ir::Environment<ChalkIr>>,\n     ) -> Arc<super::TraitEnvironment> {\n         unimplemented!()\n     }\n }\n \n-impl<T: ToChalk> ToChalk for super::InEnvironment<T> {\n+impl<T: ToChalk> ToChalk for super::InEnvironment<T>\n+where\n+    T::Chalk: chalk_ir::family::HasTypeFamily<TypeFamily = ChalkIr>,\n+{\n     type Chalk = chalk_ir::InEnvironment<T::Chalk>;\n \n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::InEnvironment<T::Chalk> {\n@@ -351,7 +381,7 @@ fn convert_where_clauses(\n     db: &impl HirDatabase,\n     def: GenericDef,\n     substs: &Substs,\n-) -> Vec<chalk_ir::QuantifiedWhereClause> {\n+) -> Vec<chalk_ir::QuantifiedWhereClause<ChalkIr>> {\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n@@ -384,7 +414,7 @@ where\n     fn impls_for_trait(\n         &self,\n         trait_id: chalk_ir::TraitId,\n-        parameters: &[Parameter],\n+        parameters: &[Parameter<ChalkIr>],\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         if trait_id == UNKNOWN_TRAIT {\n@@ -430,13 +460,13 @@ where\n     }\n     fn split_projection<'p>(\n         &self,\n-        projection: &'p chalk_ir::ProjectionTy,\n-    ) -> (Arc<AssociatedTyDatum>, &'p [Parameter], &'p [Parameter]) {\n+        projection: &'p chalk_ir::ProjectionTy<ChalkIr>,\n+    ) -> (Arc<AssociatedTyDatum>, &'p [Parameter<ChalkIr>], &'p [Parameter<ChalkIr>]) {\n         debug!(\"split_projection {:?}\", projection);\n         // we don't support GATs, so I think this should always be correct currently\n         (self.db.associated_ty_data(projection.associated_ty_id), &projection.parameters, &[])\n     }\n-    fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause> {\n+    fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<ChalkIr>> {\n         vec![]\n     }\n     fn local_impls_to_coherence_check("}]}