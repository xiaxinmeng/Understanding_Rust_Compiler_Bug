{"sha": "652f34d2709ec0c323ae632ba14992f80ebf7629", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MmYzNGQyNzA5ZWMwYzMyM2FlNjMyYmExNDk5MmY4MGViZjc2Mjk=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-12T08:15:28Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-10-04T21:49:39Z"}, "message": "Add [T]::as_chunks_mut (as unstable)\n\nAllows getting the slices directly, rather than just through an iterator as in `array_chunks(_mut)`.  The constructors for those iterators are then written in terms of these methods, so the iterator constructors no longer have any `unsafe` of their own.", "tree": {"sha": "c4dc77807e97a16a9dd5e81badf8c799001a62c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4dc77807e97a16a9dd5e81badf8c799001a62c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652f34d2709ec0c323ae632ba14992f80ebf7629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652f34d2709ec0c323ae632ba14992f80ebf7629", "html_url": "https://github.com/rust-lang/rust/commit/652f34d2709ec0c323ae632ba14992f80ebf7629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652f34d2709ec0c323ae632ba14992f80ebf7629/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ccf5f731bb71db3470002d6baf5ab4792b821d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ccf5f731bb71db3470002d6baf5ab4792b821d9", "html_url": "https://github.com/rust-lang/rust/commit/4ccf5f731bb71db3470002d6baf5ab4792b821d9"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "9c58153316aa517dba127f5c4f21cf81c5a75343", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/652f34d2709ec0c323ae632ba14992f80ebf7629/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f34d2709ec0c323ae632ba14992f80ebf7629/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=652f34d2709ec0c323ae632ba14992f80ebf7629", "patch": "@@ -2102,13 +2102,8 @@ pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n     #[inline]\n     pub(super) fn new(slice: &'a [T]) -> Self {\n-        let len = slice.len() / N;\n-        let (fst, snd) = slice.split_at(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        let array_slice: &[[T; N]] = unsafe { from_raw_parts(fst.as_ptr().cast(), len) };\n-\n-        Self { iter: array_slice.iter(), rem: snd }\n+        let (array_slice, rem) = slice.as_chunks();\n+        Self { iter: array_slice.iter(), rem }\n     }\n \n     /// Returns the remainder of the original slice that is not going to be\n@@ -2229,14 +2224,8 @@ pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n impl<'a, T, const N: usize> ArrayChunksMut<'a, T, N> {\n     #[inline]\n     pub(super) fn new(slice: &'a mut [T]) -> Self {\n-        let len = slice.len() / N;\n-        let (fst, snd) = slice.split_at_mut(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        unsafe {\n-            let array_slice: &mut [[T; N]] = from_raw_parts_mut(fst.as_mut_ptr().cast(), len);\n-            Self { iter: array_slice.iter_mut(), rem: snd }\n-        }\n+        let (array_slice, rem) = slice.as_chunks_mut();\n+        Self { iter: array_slice.iter_mut(), rem }\n     }\n \n     /// Returns the remainder of the original slice that is not going to be"}, {"sha": "d3591e8547525eadb2e679e3e6bb71c812c66084", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/652f34d2709ec0c323ae632ba14992f80ebf7629/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f34d2709ec0c323ae632ba14992f80ebf7629/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=652f34d2709ec0c323ae632ba14992f80ebf7629", "patch": "@@ -883,6 +883,36 @@ impl<T> [T] {\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the beginning of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let (chunks, remainder) = slice.as_chunks();\n+    /// assert_eq!(chunks, &[['l', 'o'], ['r', 'e']]);\n+    /// assert_eq!(remainder, &['m']);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (multiple_of_n, remainder) = self.split_at(len * N);\n+        // SAFETY: We cast a slice of `len * N` elements into\n+        // a slice of `len` many `N` elements chunks.\n+        let array_slice: &[[T; N]] = unsafe { from_raw_parts(multiple_of_n.as_ptr().cast(), len) };\n+        (array_slice, remainder)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///\n@@ -917,6 +947,43 @@ impl<T> [T] {\n         ArrayChunks::new(self)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the beginning of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let v = &mut [0, 0, 0, 0, 0];\n+    /// let mut count = 1;\n+    ///\n+    /// let (chunks, remainder) = v.as_chunks_mut();\n+    /// remainder[0] = 9;\n+    /// for chunk in chunks {\n+    ///     *chunk = [count; 2];\n+    ///     count += 1;\n+    /// }\n+    /// assert_eq!(v, &[1, 1, 2, 2, 9]);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n+        let array_slice: &mut [[T; N]] =\n+            // SAFETY: We cast a slice of `len * N` elements into\n+            // a slice of `len` many `N` elements chunks.\n+            unsafe { from_raw_parts_mut(multiple_of_n.as_mut_ptr().cast(), len) };\n+        (array_slice, remainder)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///"}]}