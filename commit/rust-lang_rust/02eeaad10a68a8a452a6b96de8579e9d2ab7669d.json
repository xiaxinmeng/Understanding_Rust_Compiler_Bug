{"sha": "02eeaad10a68a8a452a6b96de8579e9d2ab7669d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZWVhYWQxMGE2OGE4YTQ1MmE2Yjk2ZGU4NTc5ZTlkMmFiNzY2OWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-13T09:07:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-13T09:07:07Z"}, "message": "Rustup to rustc 1.38.0-nightly (71f9384e3 2019-07-12)", "tree": {"sha": "5fac9b33100bcae150e910bf0a4552992088ff52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fac9b33100bcae150e910bf0a4552992088ff52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02eeaad10a68a8a452a6b96de8579e9d2ab7669d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02eeaad10a68a8a452a6b96de8579e9d2ab7669d", "html_url": "https://github.com/rust-lang/rust/commit/02eeaad10a68a8a452a6b96de8579e9d2ab7669d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02eeaad10a68a8a452a6b96de8579e9d2ab7669d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55b99230d6c0bcc2edb0a3dd0beb236673257e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b99230d6c0bcc2edb0a3dd0beb236673257e17", "html_url": "https://github.com/rust-lang/rust/commit/55b99230d6c0bcc2edb0a3dd0beb236673257e17"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "9a2b0cf3688b150cb7f08d47bcbb6d62f7b9bf57", "filename": "src/constant.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02eeaad10a68a8a452a6b96de8579e9d2ab7669d/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02eeaad10a68a8a452a6b96de8579e9d2ab7669d/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=02eeaad10a68a8a452a6b96de8579e9d2ab7669d", "patch": "@@ -65,7 +65,7 @@ pub fn trans_promoted<'a, 'tcx: 'a>(\n         }))\n     {\n         Ok(const_) => {\n-            let cplace = trans_const_place(fx, *const_);\n+            let cplace = trans_const_place(fx, const_);\n             debug_assert_eq!(cplace.layout(), fx.layout_of(dest_ty));\n             cplace\n         }\n@@ -90,7 +90,7 @@ pub fn trans_constant<'a, 'tcx: 'a>(\n pub fn force_eval_const<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     const_: &'tcx Const,\n-) -> Const<'tcx> {\n+) -> &'tcx Const<'tcx> {\n     match const_.val {\n         ConstValue::Unevaluated(def_id, ref substs) => {\n             let param_env = ParamEnv::reveal_all();\n@@ -100,15 +100,15 @@ pub fn force_eval_const<'a, 'tcx: 'a>(\n                 instance,\n                 promoted: None,\n             };\n-            *fx.tcx.const_eval(param_env.and(cid)).unwrap()\n+            fx.tcx.const_eval(param_env.and(cid)).unwrap()\n         }\n-        _ => *fx.monomorphize(&const_),\n+        _ => fx.monomorphize(&const_),\n     }\n }\n \n pub fn trans_const_value<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    const_: Const<'tcx>,\n+    const_: &'tcx Const<'tcx>,\n ) -> CValue<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n@@ -137,7 +137,7 @@ pub fn trans_const_value<'a, 'tcx: 'a>(\n \n fn trans_const_place<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    const_: Const<'tcx>,\n+    const_: &'tcx Const<'tcx>,\n ) -> CPlace<'tcx> {\n     // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n     let result = || -> InterpResult<'tcx, &'tcx Allocation> {\n@@ -160,13 +160,13 @@ fn trans_const_place<'a, 'tcx: 'a>(\n                 span: DUMMY_SP,\n                 ty: const_.ty,\n                 user_ty: None,\n-                literal: fx.tcx.mk_const(const_),\n+                literal: const_,\n             })),\n             None,\n         )?;\n         let ptr = ecx.allocate(op.layout, MemoryKind::Stack);\n         ecx.copy_op(op, ptr.into())?;\n-        let alloc = ecx.memory().get(ptr.to_ptr()?.alloc_id)?;\n+        let alloc = ecx.memory().get(ptr.to_ref().to_scalar()?.to_ptr()?.alloc_id)?;\n         Ok(fx.tcx.intern_const_alloc(alloc.clone()))\n     };\n     let alloc = result().expect(\"unable to convert ConstValue to Allocation\");"}, {"sha": "08a829ff1da195a50e296e424100b9b467103446", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02eeaad10a68a8a452a6b96de8579e9d2ab7669d/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02eeaad10a68a8a452a6b96de8579e9d2ab7669d/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=02eeaad10a68a8a452a6b96de8579e9d2ab7669d", "patch": "@@ -200,7 +200,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         type_name, <T> () {\n             let type_name = fx.tcx.type_name(T);\n-            let type_name = crate::constant::trans_const_value(fx, *type_name);\n+            let type_name = crate::constant::trans_const_value(fx, type_name);\n             ret.write_cvalue(fx, type_name);\n         };\n "}]}