{"sha": "8769409612be396c77184a603ea344851b5a0e76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3Njk0MDk2MTJiZTM5NmM3NzE4NGE2MDNlYTM0NDg1MWI1YTBlNzY=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-05-14T14:01:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T05:29:16Z"}, "message": "rt: adding rust_uv_* binding for kernel malloc and free'ing :/\n\nI need these in the context of doing various malloc/free operations for\nlibuv structs that need to live in the heap, because of API workflow\n(there's no stack to put them in). This has cropped up several times\nwhen impl'ing the high-level API for things like timers, but I've decided\nto take the plunge and use this approach for the net::tcp module.\n\nTechnically, this can be avoided by spawning a new\ntask that contains the needed memory structures on its stack and then\nhaving it block for the duration of the time we need that memory to be\nvalid (this is what I did in std::timer). Exposing this API provides a\nmuch lower overhead way to address\nthe issue, albeit with safety concerns. The main mitigation policy should\nbe to use malloc/free with libuv handles only when the handles, are then\nassociated with a resource or class-with-dtor. So we have a finite lifetime\nfor the object and can gaurantee a free(), barring a runtime crash (in\nwhich case you have bigger problems!)", "tree": {"sha": "73281a7678c6a73bdf715db2d60cadd637a0d235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73281a7678c6a73bdf715db2d60cadd637a0d235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8769409612be396c77184a603ea344851b5a0e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8769409612be396c77184a603ea344851b5a0e76", "html_url": "https://github.com/rust-lang/rust/commit/8769409612be396c77184a603ea344851b5a0e76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8769409612be396c77184a603ea344851b5a0e76/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733881d8522ac7b3873cc16b25ce4c6d83edfdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/733881d8522ac7b3873cc16b25ce4c6d83edfdd0", "html_url": "https://github.com/rust-lang/rust/commit/733881d8522ac7b3873cc16b25ce4c6d83edfdd0"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "c7720efe56a9ec8fbb4ece1c58b172c5e082acb8", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8769409612be396c77184a603ea344851b5a0e76/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8769409612be396c77184a603ea344851b5a0e76/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=8769409612be396c77184a603ea344851b5a0e76", "patch": "@@ -450,3 +450,13 @@ rust_uv_get_kernel_global_chan_ptr() {\n     LOG(task, stdlib,\"global loop val: %lu\", (unsigned long int)*result);\n     return result;\n }\n+\n+extern \"C\" void*\n+rust_uv_current_kernel_malloc(size_t size) {\n+\treturn current_kernel_malloc(size, \"rust_uv_current_kernel_malloc\");\n+}\n+\n+extern \"C\" void*\n+rust_uv_current_kernel_free(void* mem) {\n+\treturn current_kernel_free(mem);\n+}"}, {"sha": "9a1b2609a598f94147172ec58b7ba6771db5b268", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8769409612be396c77184a603ea344851b5a0e76/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/8769409612be396c77184a603ea344851b5a0e76/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=8769409612be396c77184a603ea344851b5a0e76", "patch": "@@ -143,6 +143,8 @@ rust_uv_set_data_for_req\n rust_uv_get_base_from_buf\n rust_uv_get_len_from_buf\n rust_uv_get_kernel_global_chan_ptr\n+rust_uv_current_kernel_malloc\n+rust_uv_current_kernel_free\n rust_dbg_lock_create\n rust_dbg_lock_destroy\n rust_dbg_lock_lock"}]}