{"sha": "b6e2c47df0bf63da8a31089e86ef40b53314308c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZTJjNDdkZjBiZjYzZGE4YTMxMDg5ZTg2ZWY0MGI1MzMxNDMwOGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-27T05:07:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-27T05:07:27Z"}, "message": "Merge pull request #2572 from flip1995/immut_while\n\nFix check of immutable condition in closure", "tree": {"sha": "c45825c6ef1ad9d99023f2e4312fdaeb62186c96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45825c6ef1ad9d99023f2e4312fdaeb62186c96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e2c47df0bf63da8a31089e86ef40b53314308c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaudGPCRBK7hj4Ov3rIwAAdHIIAAHg/m9EwAlJ4+bEsM69kCkC\nkGZbmjNmHqI1iECE7SkVxpqOxd47O+ofgqYr5gmu4EOvrsuChCP3uPlmPfYUCXFi\nnk26N0h6N8xvCt+ZFbrvC7xKDYJMPOK6CmRsd8hMqG5skwc8ITfskxfwJezioI62\nH25hbrZ5CGzDnp3MSRyj23UQcpyJHNYAFhardLVqRUzebfmKdGn2mOdtA9AMCJW+\n69OXzHmoBIJtrOYirPRmRfHzKCyYkgD7b9vjAcls34Sv+T3gzDkB/S35ICPQoRm6\n32izpQddLzYYNLPjXausyTbWgVhi4GIgzG/AeEOBAf3d8QMZX2576i+1U3P5onI=\n=eGhW\n-----END PGP SIGNATURE-----\n", "payload": "tree c45825c6ef1ad9d99023f2e4312fdaeb62186c96\nparent 29c449e6445757ec4157cba1c01e857d26c692ca\nparent 7d290751321f9dcaa91cf4a925e7d68d3ce68817\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1522127247 +0200\ncommitter GitHub <noreply@github.com> 1522127247 +0200\n\nMerge pull request #2572 from flip1995/immut_while\n\nFix check of immutable condition in closure"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e2c47df0bf63da8a31089e86ef40b53314308c", "html_url": "https://github.com/rust-lang/rust/commit/b6e2c47df0bf63da8a31089e86ef40b53314308c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e2c47df0bf63da8a31089e86ef40b53314308c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c449e6445757ec4157cba1c01e857d26c692ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c449e6445757ec4157cba1c01e857d26c692ca", "html_url": "https://github.com/rust-lang/rust/commit/29c449e6445757ec4157cba1c01e857d26c692ca"}, {"sha": "7d290751321f9dcaa91cf4a925e7d68d3ce68817", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d290751321f9dcaa91cf4a925e7d68d3ce68817", "html_url": "https://github.com/rust-lang/rust/commit/7d290751321f9dcaa91cf4a925e7d68d3ce68817"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "a76b46a1bcbb34f84483b3e40a31d0fd9c94111c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2c47df0bf63da8a31089e86ef40b53314308c/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2c47df0bf63da8a31089e86ef40b53314308c/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b6e2c47df0bf63da8a31089e86ef40b53314308c", "patch": "@@ -347,7 +347,9 @@ declare_lint! {\n /// **Why is this bad?** If the condition is unchanged, entering the body of the loop\n /// will lead to an infinite loop.\n ///\n-/// **Known problems:** None\n+/// **Known problems:** If the `while`-loop is in a closure, the check for mutation of the\n+/// condition variables in the body can cause false negatives. For example when only `Upvar` `a` is\n+/// in the condition and only `Upvar` `b` gets mutated in the body, the lint will not trigger.\n ///\n /// **Example:**\n /// ```rust\n@@ -2152,11 +2154,15 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n \n     let mut delegate = MutVarsDelegate {\n         used_mutably: mut_var_visitor.ids,\n+        skip: false,\n     };\n     let def_id = def_id::DefId::local(block.hir_id.owner);\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n     ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).walk_expr(expr);\n \n+    if delegate.skip {\n+        return;\n+    }\n     if !delegate.used_mutably.iter().any(|(_, v)| *v) {\n         span_lint(\n             cx,\n@@ -2183,9 +2189,13 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n             if let ExprPath(ref qpath) = ex.node;\n             if let QPath::Resolved(None, _) = *qpath;\n             let def = self.cx.tables.qpath_def(qpath, ex.hir_id);\n-            if let Def::Local(node_id) = def;\n             then {\n-                self.ids.insert(node_id, false);\n+                match def {\n+                    Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n+                        self.ids.insert(node_id, false);\n+                    },\n+                    _ => {},\n+                }\n             }\n         }\n     }\n@@ -2211,6 +2221,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n \n struct MutVarsDelegate {\n     used_mutably: HashMap<NodeId, bool>,\n+    skip: bool,\n }\n \n impl<'tcx> MutVarsDelegate {\n@@ -2220,6 +2231,12 @@ impl<'tcx> MutVarsDelegate {\n                 if let Some(used) = self.used_mutably.get_mut(&id) {\n                     *used = true;\n                 },\n+            Categorization::Upvar(_) => {\n+                //FIXME: This causes false negatives. We can't get the `NodeId` from\n+                //`Categorization::Upvar(_)`. So we search for any `Upvar`s in the\n+                //`while`-body, not just the ones in the condition.\n+                self.skip = true\n+            },\n             Categorization::Deref(ref cmt, _) => self.update(&cmt.cat, sp),\n             _ => {}\n         }"}, {"sha": "4029f9a9b2950b6bb8d1bf5df70ef3b21e7e72f2", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2c47df0bf63da8a31089e86ef40b53314308c/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2c47df0bf63da8a31089e86ef40b53314308c/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=b6e2c47df0bf63da8a31089e86ef40b53314308c", "patch": "@@ -1,9 +1,13 @@\n+\n+\n+\n fn fn_val(i: i32) -> i32 { unimplemented!() }\n fn fn_constref(i: &i32) -> i32 { unimplemented!() }\n fn fn_mutref(i: &mut i32) { unimplemented!() }\n fn fooi() -> i32 { unimplemented!() }\n fn foob() -> bool { unimplemented!() }\n \n+#[allow(many_single_char_names)]\n fn immutable_condition() {\n     // Should warn when all vars mentionned are immutable\n     let y = 0;\n@@ -43,6 +47,14 @@ fn immutable_condition() {\n         println!(\"OK - Fn call results may vary\");\n     }\n \n+    let mut a = 0;\n+    let mut c = move || {\n+        while a < 5 {\n+            a += 1;\n+            println!(\"OK - a is mutable\");\n+        }\n+    };\n+    c();\n }\n \n fn unused_var() {"}, {"sha": "0bf14bb723b1d14a3fbce85d6aadfa74d444958d", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2c47df0bf63da8a31089e86ef40b53314308c/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2c47df0bf63da8a31089e86ef40b53314308c/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=b6e2c47df0bf63da8a31089e86ef40b53314308c", "patch": "@@ -1,57 +1,57 @@\n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:10:11\n+  --> $DIR/infinite_loop.rs:14:11\n    |\n-10 |     while y < 10 {\n+14 |     while y < 10 {\n    |           ^^^^^^\n    |\n    = note: `-D while-immutable-condition` implied by `-D warnings`\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:15:11\n+  --> $DIR/infinite_loop.rs:19:11\n    |\n-15 |     while y < 10 && x < 3 {\n+19 |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:22:11\n+  --> $DIR/infinite_loop.rs:26:11\n    |\n-22 |     while !cond {\n+26 |     while !cond {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:52:11\n+  --> $DIR/infinite_loop.rs:64:11\n    |\n-52 |     while i < 3 {\n+64 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:57:11\n+  --> $DIR/infinite_loop.rs:69:11\n    |\n-57 |     while i < 3 && j > 0 {\n+69 |     while i < 3 && j > 0 {\n    |           ^^^^^^^^^^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:61:11\n+  --> $DIR/infinite_loop.rs:73:11\n    |\n-61 |     while i < 3 {\n+73 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:76:11\n+  --> $DIR/infinite_loop.rs:88:11\n    |\n-76 |     while i < 3 {\n+88 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:81:11\n+  --> $DIR/infinite_loop.rs:93:11\n    |\n-81 |     while i < 3 {\n+93 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-   --> $DIR/infinite_loop.rs:144:15\n+   --> $DIR/infinite_loop.rs:156:15\n     |\n-144 |         while self.count < n {\n+156 |         while self.count < n {\n     |               ^^^^^^^^^^^^^^\n \n error: aborting due to 9 previous errors"}]}