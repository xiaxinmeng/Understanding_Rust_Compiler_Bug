{"sha": "111694d85bc64e3604599668c5b2db574e07abf0", "node_id": "C_kwDOAAsO6NoAKDExMTY5NGQ4NWJjNjRlMzYwNDU5OTY2OGM1YjJkYjU3NGUwN2FiZjA", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-02T15:54:00Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-02T18:37:12Z"}, "message": "Be more strict about supported Paths in generate_enum_variant\n\nPathType path parents don't support this assist", "tree": {"sha": "e22ff2794ce35527d5f13d255e1de764f50e5077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e22ff2794ce35527d5f13d255e1de764f50e5077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111694d85bc64e3604599668c5b2db574e07abf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111694d85bc64e3604599668c5b2db574e07abf0", "html_url": "https://github.com/rust-lang/rust/commit/111694d85bc64e3604599668c5b2db574e07abf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111694d85bc64e3604599668c5b2db574e07abf0/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4638def7aedd8d69ec2670abf6a08b876ad75d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4638def7aedd8d69ec2670abf6a08b876ad75d9", "html_url": "https://github.com/rust-lang/rust/commit/e4638def7aedd8d69ec2670abf6a08b876ad75d9"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "b3dd29b77108b2a0f58a520df631585db6654172", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 85, "deletions": 20, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/111694d85bc64e3604599668c5b2db574e07abf0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111694d85bc64e3604599668c5b2db574e07abf0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=111694d85bc64e3604599668c5b2db574e07abf0", "patch": "@@ -2,7 +2,7 @@ use hir::{HasSource, HirDisplay, InFile};\n use ide_db::assists::{AssistId, AssistKind};\n use syntax::{\n     ast::{self, make, HasArgList},\n-    AstNode,\n+    match_ast, AstNode, SyntaxNode,\n };\n \n use crate::assist_context::{AssistContext, Assists};\n@@ -33,6 +33,7 @@ use crate::assist_context::{AssistContext, Assists};\n // ```\n pub(crate) fn generate_enum_variant(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n+    let parent = path_parent(&path)?;\n \n     if ctx.sema.resolve_path(&path).is_some() {\n         // No need to generate anything if the path resolves\n@@ -49,19 +50,65 @@ pub(crate) fn generate_enum_variant(acc: &mut Assists, ctx: &AssistContext<'_>)\n         ctx.sema.resolve_path(&path.qualifier()?)\n     {\n         let target = path.syntax().text_range();\n-        return add_variant_to_accumulator(acc, ctx, target, e, &name_ref, &path);\n+        return add_variant_to_accumulator(acc, ctx, target, e, &name_ref, parent);\n     }\n \n     None\n }\n \n+#[derive(Debug)]\n+enum PathParent {\n+    PathExpr(ast::PathExpr),\n+    RecordExpr(ast::RecordExpr),\n+    UseTree(ast::UseTree),\n+}\n+\n+impl PathParent {\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            PathParent::PathExpr(it) => it.syntax(),\n+            PathParent::RecordExpr(it) => it.syntax(),\n+            PathParent::UseTree(it) => it.syntax(),\n+        }\n+    }\n+\n+    fn make_field_list(&self, ctx: &AssistContext<'_>) -> Option<ast::FieldList> {\n+        let scope = ctx.sema.scope(self.syntax())?;\n+\n+        match self {\n+            PathParent::PathExpr(it) => {\n+                if let Some(call_expr) = it.syntax().parent().and_then(ast::CallExpr::cast) {\n+                    make_tuple_field_list(call_expr, ctx, &scope)\n+                } else {\n+                    None\n+                }\n+            }\n+            PathParent::RecordExpr(it) => make_record_field_list(it, ctx, &scope),\n+            PathParent::UseTree(_) => None,\n+        }\n+    }\n+}\n+\n+fn path_parent(path: &ast::Path) -> Option<PathParent> {\n+    let parent = path.syntax().parent()?;\n+\n+    match_ast! {\n+        match parent {\n+            ast::PathExpr(it) => Some(PathParent::PathExpr(it)),\n+            ast::RecordExpr(it) => Some(PathParent::RecordExpr(it)),\n+            ast::UseTree(it) => Some(PathParent::UseTree(it)),\n+            _ => None\n+        }\n+    }\n+}\n+\n fn add_variant_to_accumulator(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,\n     target: syntax::TextRange,\n     adt: hir::Enum,\n     name_ref: &ast::NameRef,\n-    path: &ast::Path,\n+    parent: PathParent,\n ) -> Option<()> {\n     let db = ctx.db();\n     let InFile { file_id, value: enum_node } = adt.source(db)?.original_ast_node(db)?;\n@@ -73,7 +120,7 @@ fn add_variant_to_accumulator(\n         |builder| {\n             builder.edit_file(file_id.original_file(db));\n             let node = builder.make_mut(enum_node);\n-            let variant = make_variant(ctx, name_ref, &path);\n+            let variant = make_variant(ctx, name_ref, parent);\n             node.variant_list().map(|it| it.add_variant(variant.clone_for_update()));\n         },\n     )\n@@ -82,27 +129,14 @@ fn add_variant_to_accumulator(\n fn make_variant(\n     ctx: &AssistContext<'_>,\n     name_ref: &ast::NameRef,\n-    path: &ast::Path,\n+    parent: PathParent,\n ) -> ast::Variant {\n-    let field_list = make_field_list(ctx, path);\n+    let field_list = parent.make_field_list(ctx);\n     make::variant(make::name(&name_ref.text()), field_list)\n }\n \n-fn make_field_list(ctx: &AssistContext<'_>, path: &ast::Path) -> Option<ast::FieldList> {\n-    let scope = ctx.sema.scope(&path.syntax())?;\n-    if let Some(call_expr) =\n-        path.syntax().parent().and_then(|it| it.parent()).and_then(ast::CallExpr::cast)\n-    {\n-        make_tuple_field_list(call_expr, ctx, &scope)\n-    } else if let Some(record_expr) = path.syntax().parent().and_then(ast::RecordExpr::cast) {\n-        make_record_field_list(record_expr, ctx, &scope)\n-    } else {\n-        None\n-    }\n-}\n-\n fn make_record_field_list(\n-    record: ast::RecordExpr,\n+    record: &ast::RecordExpr,\n     ctx: &AssistContext<'_>,\n     scope: &hir::SemanticsScope<'_>,\n ) -> Option<ast::FieldList> {\n@@ -465,6 +499,37 @@ enum Foo {\n fn main() {\n     Foo::Bar { x, y: x, s: Struct {} }\n }\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn use_tree() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+//- /main.rs\n+mod foo;\n+use foo::Foo::Bar$0;\n+\n+//- /foo.rs\n+enum Foo {}\n+\",\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_for_path_type() {\n+        check_assist_not_applicable(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {}\n+impl Foo::Bar$0 {}\n \",\n         )\n     }"}]}