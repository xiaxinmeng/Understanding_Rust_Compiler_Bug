{"sha": "e518c057f5b55523655aa5ea0fb624c693fc8bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MThjMDU3ZjViNTU1MjM2NTVhYTVlYTBmYjYyNGM2OTNmYzhiYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-23T03:13:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-23T03:13:10Z"}, "message": "Auto merge of #27894 - steveklabnik:gh26888, r=alexcrichton\n\n{BTree,Hash}{Map,Set} will not update their key if it already exists, which\r\ncan matter with more complex keys. This behavior is now documented.\r\n\r\nFixes #26888", "tree": {"sha": "dfaa7b14df4e649d314bb1ed9e3bae9da9e26e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfaa7b14df4e649d314bb1ed9e3bae9da9e26e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e518c057f5b55523655aa5ea0fb624c693fc8bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e518c057f5b55523655aa5ea0fb624c693fc8bb4", "html_url": "https://github.com/rust-lang/rust/commit/e518c057f5b55523655aa5ea0fb624c693fc8bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e518c057f5b55523655aa5ea0fb624c693fc8bb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414d68ec72a0491f2b3a836524dd7c02cdd5b750", "url": "https://api.github.com/repos/rust-lang/rust/commits/414d68ec72a0491f2b3a836524dd7c02cdd5b750", "html_url": "https://github.com/rust-lang/rust/commit/414d68ec72a0491f2b3a836524dd7c02cdd5b750"}, {"sha": "e8e3c6f38616acb0b45433454d57f5b2ecf78a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e3c6f38616acb0b45433454d57f5b2ecf78a96", "html_url": "https://github.com/rust-lang/rust/commit/e8e3c6f38616acb0b45433454d57f5b2ecf78a96"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "1ad836f9bdfb965ffbf31dc57d3414bbf0c1d16f", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=e518c057f5b55523655aa5ea0fb624c693fc8bb4", "patch": "@@ -315,8 +315,14 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     // 2) While ODS may potentially return the pair we *just* inserted after\n     // the split, we will never do this. Again, this shouldn't effect the analysis.\n \n-    /// Inserts a key-value pair into the map. If the key already had a value\n-    /// present in the map, that value is returned. Otherwise, `None` is returned.\n+    /// Inserts a key-value pair into the map.\n+    ///\n+    /// If the map did not have this key present, `None` is returned.\n+    ///\n+    /// If the map did have this key present, that value is returned, and the\n+    /// entry is not updated. See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///"}, {"sha": "3ca0aa377c102fd4c397a4bc9d9016974660f75f", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=e518c057f5b55523655aa5ea0fb624c693fc8bb4", "patch": "@@ -430,8 +430,14 @@ impl<T: Ord> BTreeSet<T> {\n         other.is_subset(self)\n     }\n \n-    /// Adds a value to the set. Returns `true` if the value was not already\n-    /// present in the set.\n+    /// Adds a value to the set.\n+    ///\n+    /// If the set did not have a value present, `true` is returned.\n+    ///\n+    /// If the set did have this key present, that value is returned, and the\n+    /// entry is not updated. See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///"}, {"sha": "7c6add80337c01f218fbaa51314beeaf929533e2", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e518c057f5b55523655aa5ea0fb624c693fc8bb4", "patch": "@@ -1101,8 +1101,14 @@ impl<K, V, S> HashMap<K, V, S>\n         self.search_mut(k).map(|bucket| bucket.into_mut_refs().1)\n     }\n \n-    /// Inserts a key-value pair into the map. If the key already had a value\n-    /// present in the map, that value is returned. Otherwise, `None` is returned.\n+    /// Inserts a key-value pair into the map.\n+    ///\n+    /// If the map did not have this key present, `None` is returned.\n+    ///\n+    /// If the map did have this key present, that value is returned, and the\n+    /// entry is not updated. See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///"}, {"sha": "1f6b349399610a251041fe10d9c41fb092628047", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=e518c057f5b55523655aa5ea0fb624c693fc8bb4", "patch": "@@ -540,8 +540,14 @@ impl<T, S> HashSet<T, S>\n         other.is_subset(self)\n     }\n \n-    /// Adds a value to the set. Returns `true` if the value was not already\n-    /// present in the set.\n+    /// Adds a value to the set.\n+    ///\n+    /// If the set did not have a value present, `true` is returned.\n+    ///\n+    /// If the set did have this key present, that value is returned, and the\n+    /// entry is not updated. See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///"}, {"sha": "77f571d580b5fe833d1b9b8f8a02306250fbaaea", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e518c057f5b55523655aa5ea0fb624c693fc8bb4/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=e518c057f5b55523655aa5ea0fb624c693fc8bb4", "patch": "@@ -359,6 +359,52 @@\n //!     }\n //! }\n //! ```\n+//!\n+//! # Insert and complex keys\n+//!\n+//! If we have a more complex key, calls to `insert()` will\n+//! not update the value of the key. For example:\n+//!\n+//! ```\n+//! use std::cmp::Ordering;\n+//! use std::collections::BTreeMap;\n+//! use std::hash::{Hash, Hasher};\n+//!\n+//! #[derive(Debug)]\n+//! struct Foo {\n+//!     a: u32,\n+//!     b: &'static str,\n+//! }\n+//!\n+//! // we will compare `Foo`s by their `a` value only.\n+//! impl PartialEq for Foo {\n+//!     fn eq(&self, other: &Self) -> bool { self.a == other.a }\n+//! }\n+//!\n+//! impl Eq for Foo {}\n+//!\n+//! // we will hash `Foo`s by their `a` value only.\n+//! impl Hash for Foo {\n+//!     fn hash<H: Hasher>(&self, h: &mut H) { self.a.hash(h); }\n+//! }\n+//!\n+//! impl PartialOrd for Foo {\n+//!     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { self.a.partial_cmp(&other.a) }\n+//! }\n+//!\n+//! impl Ord for Foo {\n+//!     fn cmp(&self, other: &Self) -> Ordering { self.a.cmp(&other.a) }\n+//! }\n+//!\n+//! let mut map = BTreeMap::new();\n+//! map.insert(Foo { a: 1, b: \"baz\" }, ());\n+//!\n+//! // We already have a Foo with an a of 1, so this will be updating the value.\n+//! map.insert(Foo { a: 1, b: \"xyz\" }, ());\n+//!\n+//! // ... but the key hasn't changed. b is still \"baz\", not \"xyz\"\n+//! assert_eq!(map.keys().next().unwrap().b, \"baz\");\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}