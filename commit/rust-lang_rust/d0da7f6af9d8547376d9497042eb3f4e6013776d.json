{"sha": "d0da7f6af9d8547376d9497042eb3f4e6013776d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZGE3ZjZhZjlkODU0NzM3NmQ5NDk3MDQyZWIzZjRlNjAxMzc3NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-22T23:59:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-22T23:59:28Z"}, "message": "Auto merge of #35908 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 20 pull requests\n\n- Successful merges: #35360, #35526, #35809, #35817, #35820, #35824, #35835, #35841, #35842, #35858, #35860, #35861, #35864, #35878, #35879, #35881, #35882, #35889, #35891, #35901\n- Failed merges: #35395", "tree": {"sha": "07e2e49d871682a5ee73e2dfbc271de9ac02041a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e2e49d871682a5ee73e2dfbc271de9ac02041a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0da7f6af9d8547376d9497042eb3f4e6013776d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0da7f6af9d8547376d9497042eb3f4e6013776d", "html_url": "https://github.com/rust-lang/rust/commit/d0da7f6af9d8547376d9497042eb3f4e6013776d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0da7f6af9d8547376d9497042eb3f4e6013776d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5a0fa45b5e2786b6e64e27f48cd129e7aefdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5a0fa45b5e2786b6e64e27f48cd129e7aefdbd", "html_url": "https://github.com/rust-lang/rust/commit/3c5a0fa45b5e2786b6e64e27f48cd129e7aefdbd"}, {"sha": "8ea29366597e1b4af9c215ce485df3b4a4a447de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea29366597e1b4af9c215ce485df3b4a4a447de", "html_url": "https://github.com/rust-lang/rust/commit/8ea29366597e1b4af9c215ce485df3b4a4a447de"}], "stats": {"total": 778, "additions": 639, "deletions": 139}, "files": [{"sha": "4e6cd6c9782a95872376db0ff294cd4f1d88523c", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -230,7 +230,7 @@ To find documentation-related issues, sort by the [A-docs label][adocs].\n In many cases, you don't need a full `make doc`. You can use `rustdoc` directly\n to check small fixes. For example, `rustdoc src/doc/reference.md` will render\n reference to `doc/reference.html`. The CSS might be messed up, but you can\n-verify that HTML is right.\n+verify that the HTML is right.\n \n ## Issue Triage\n "}, {"sha": "9cbb514e2806576e7c9d3f9cbddc5e66f2a307de", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -47,6 +47,34 @@ As you can see, the `trait` block looks very similar to the `impl` block,\n but we don\u2019t define a body, only a type signature. When we `impl` a trait,\n we use `impl Trait for Item`, rather than only `impl Item`.\n \n+`Self` may be used in a type annotation to refer to an instance of the type\n+implementing this trait passed as a parameter. `Self`, `&Self` or `&mut Self`\n+may be used depending on the level of ownership required.\n+\n+```rust\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+trait HasArea {\n+    fn area(&self) -> f64;\n+\n+    fn is_larger(&self, &Self) -> bool;\n+}\n+\n+impl HasArea for Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+\n+    fn is_larger(&self, other: &Self) -> bool {\n+        self.area() > other.area()\n+    }\n+}\n+```\n+\n ## Trait bounds on generic functions\n \n Traits are useful because they allow a type to make certain promises about its"}, {"sha": "542b7bf797b358d2f617f2d3da5991758568a8b3", "filename": "src/etc/CONFIGS.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Fetc%2FCONFIGS.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Fetc%2FCONFIGS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FCONFIGS.md?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -6,6 +6,7 @@ These are some links to repos with configs which ease the use of rust.\n \n * [rust.vim](https://github.com/rust-lang/rust.vim)\n * [emacs rust-mode](https://github.com/rust-lang/rust-mode)\n+* [sublime-rust](https://github.com/rust-lang/sublime-rust)\n * [gedit-config](https://github.com/rust-lang/gedit-config)\n * [kate-config](https://github.com/rust-lang/kate-config)\n * [nano-config](https://github.com/rust-lang/nano-config)"}, {"sha": "3a158240c3a2671404336cad0d4f857cc6f1b0ad", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -263,6 +263,23 @@ impl<T> Rc<T> {\n     }\n \n     /// Checks if `Rc::try_unwrap` would return `Ok`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_would_unwrap)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x = Rc::new(3);\n+    /// assert!(Rc::would_unwrap(&x));\n+    /// assert_eq!(Rc::try_unwrap(x), Ok(3));\n+    ///\n+    /// let x = Rc::new(4);\n+    /// let _y = x.clone();\n+    /// assert!(!Rc::would_unwrap(&x));\n+    /// assert_eq!(Rc::try_unwrap(x), Err(Rc::new(4)));\n+    /// ```\n     #[unstable(feature = \"rc_would_unwrap\",\n                reason = \"just added for niche usecase\",\n                issue = \"28356\")]"}, {"sha": "a7dc2875320b718e99a4e19fc5d443744251d28e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -132,7 +132,7 @@ use boxed::Box;\n /// [`OsString`]: ../../std/ffi/struct.OsString.html\n ///\n /// Indexing is intended to be a constant-time operation, but UTF-8 encoding\n-/// does not allow us to do this. Furtheremore, it's not clear what sort of\n+/// does not allow us to do this. Furthermore, it's not clear what sort of\n /// thing the index should return: a byte, a codepoint, or a grapheme cluster.\n /// The [`as_bytes()`] and [`chars()`] methods return iterators over the first\n /// two, respectively."}, {"sha": "282f281047e4702c9470ccd704b7b08f24dd428c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 122, "deletions": 46, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -299,26 +299,63 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Mul`. When `Foo * Foo` happens, it ends up\n-/// calling `mul`, and therefore, `main` prints `Multiplying!`.\n+/// Implementing a `Mul`tipliable rational number struct:\n ///\n /// ```\n /// use std::ops::Mul;\n ///\n-/// struct Foo;\n+/// // The uniqueness of rational numbers in lowest terms is a consequence of\n+/// // the fundamental theorem of arithmetic.\n+/// #[derive(Eq)]\n+/// #[derive(PartialEq, Debug)]\n+/// struct Rational {\n+///     nominator: usize,\n+///     denominator: usize,\n+/// }\n ///\n-/// impl Mul for Foo {\n-///     type Output = Foo;\n+/// impl Rational {\n+///     fn new(nominator: usize, denominator: usize) -> Self {\n+///         if denominator == 0 {\n+///             panic!(\"Zero is an invalid denominator!\");\n+///         }\n ///\n-///     fn mul(self, _rhs: Foo) -> Foo {\n-///         println!(\"Multiplying!\");\n-///         self\n+///         // Reduce to lowest terms by dividing by the greatest common\n+///         // divisor.\n+///         let gcd = gcd(nominator, denominator);\n+///         Rational {\n+///             nominator: nominator / gcd,\n+///             denominator: denominator / gcd,\n+///         }\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     Foo * Foo;\n+/// impl Mul for Rational {\n+///     // The multiplication of rational numbers is a closed operation.\n+///     type Output = Self;\n+///\n+///     fn mul(self, rhs: Self) -> Self {\n+///         let nominator = self.nominator * rhs.nominator;\n+///         let denominator = self.denominator * rhs.denominator;\n+///         Rational::new(nominator, denominator)\n+///     }\n+/// }\n+///\n+/// // Euclid's two-thousand-year-old algorithm for finding the greatest common\n+/// // divisor.\n+/// fn gcd(x: usize, y: usize) -> usize {\n+///     let mut x = x;\n+///     let mut y = y;\n+///     while y != 0 {\n+///         let t = y;\n+///         y = x % y;\n+///         x = t;\n+///     }\n+///     x\n /// }\n+///\n+/// assert_eq!(Rational::new(1, 2), Rational::new(2, 4));\n+/// assert_eq!(Rational::new(2, 3) * Rational::new(3, 4),\n+///            Rational::new(1, 2));\n /// ```\n ///\n /// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n@@ -486,26 +523,34 @@ div_impl_float! { f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Rem`. When `Foo % Foo` happens, it ends up\n-/// calling `rem`, and therefore, `main` prints `Remainder-ing!`.\n+/// This example implements `Rem` on a `SplitSlice` object. After `Rem` is\n+/// implemented, one can use the `%` operator to find out what the remaining\n+/// elements of the slice would be after splitting it into equal slices of a\n+/// given length.\n ///\n /// ```\n /// use std::ops::Rem;\n ///\n-/// struct Foo;\n+/// #[derive(PartialEq, Debug)]\n+/// struct SplitSlice<'a, T: 'a> {\n+///     slice: &'a [T],\n+/// }\n ///\n-/// impl Rem for Foo {\n-///     type Output = Foo;\n+/// impl<'a, T> Rem<usize> for SplitSlice<'a, T> {\n+///     type Output = SplitSlice<'a, T>;\n ///\n-///     fn rem(self, _rhs: Foo) -> Foo {\n-///         println!(\"Remainder-ing!\");\n-///         self\n+///     fn rem(self, modulus: usize) -> Self {\n+///         let len = self.slice.len();\n+///         let rem = len % modulus;\n+///         let start = len - rem;\n+///         SplitSlice {slice: &self.slice[start..]}\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     Foo % Foo;\n-/// }\n+/// // If we were to divide &[0, 1, 2, 3, 4, 5, 6, 7] into slices of size 3,\n+/// // the remainder would be &[6, 7]\n+/// assert_eq!(SplitSlice { slice: &[0, 1, 2, 3, 4, 5, 6, 7] } % 3,\n+///            SplitSlice { slice: &[6, 7] });\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -694,26 +739,41 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitAnd`. When `Foo & Foo` happens, it ends up\n-/// calling `bitand`, and therefore, `main` prints `Bitwise And-ing!`.\n+/// In this example, the `BitAnd` trait is implemented for a `BooleanVector`\n+/// struct.\n ///\n /// ```\n /// use std::ops::BitAnd;\n ///\n-/// struct Foo;\n-///\n-/// impl BitAnd for Foo {\n-///     type Output = Foo;\n-///\n-///     fn bitand(self, _rhs: Foo) -> Foo {\n-///         println!(\"Bitwise And-ing!\");\n-///         self\n+/// #[derive(Debug)]\n+/// struct BooleanVector {\n+///     value: Vec<bool>,\n+/// };\n+///\n+/// impl BitAnd for BooleanVector {\n+///     type Output = Self;\n+///\n+///     fn bitand(self, rhs: Self) -> Self {\n+///         BooleanVector {\n+///             value: self.value\n+///                 .iter()\n+///                 .zip(rhs.value.iter())\n+///                 .map(|(x, y)| *x && *y)\n+///                 .collect(),\n+///         }\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     Foo & Foo;\n+/// impl PartialEq for BooleanVector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n /// }\n+///\n+/// let bv1 = BooleanVector { value: vec![true, true, false, false] };\n+/// let bv2 = BooleanVector { value: vec![true, false, true, false] };\n+/// let expected = BooleanVector { value: vec![true, false, false, false] };\n+/// assert_eq!(bv1 & bv2, expected);\n /// ```\n #[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1490,28 +1550,44 @@ shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Index`. When `Foo[Bar]` happens, it ends up\n-/// calling `index`, and therefore, `main` prints `Indexing!`.\n+/// This example implements `Index` on a read-only `NucleotideCount` container,\n+/// enabling individual counts to be retrieved with index syntax.\n ///\n /// ```\n /// use std::ops::Index;\n ///\n-/// #[derive(Copy, Clone)]\n-/// struct Foo;\n-/// struct Bar;\n+/// enum Nucleotide {\n+///     A,\n+///     C,\n+///     G,\n+///     T,\n+/// }\n ///\n-/// impl Index<Bar> for Foo {\n-///     type Output = Foo;\n+/// struct NucleotideCount {\n+///     a: usize,\n+///     c: usize,\n+///     g: usize,\n+///     t: usize,\n+/// }\n ///\n-///     fn index<'a>(&'a self, _index: Bar) -> &'a Foo {\n-///         println!(\"Indexing!\");\n-///         self\n+/// impl Index<Nucleotide> for NucleotideCount {\n+///     type Output = usize;\n+///\n+///     fn index(&self, nucleotide: Nucleotide) -> &usize {\n+///         match nucleotide {\n+///             Nucleotide::A => &self.a,\n+///             Nucleotide::C => &self.c,\n+///             Nucleotide::G => &self.g,\n+///             Nucleotide::T => &self.t,\n+///         }\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     Foo[Bar];\n-/// }\n+/// let nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};\n+/// assert_eq!(nucleotide_count[Nucleotide::A], 14);\n+/// assert_eq!(nucleotide_count[Nucleotide::C], 9);\n+/// assert_eq!(nucleotide_count[Nucleotide::G], 10);\n+/// assert_eq!(nucleotide_count[Nucleotide::T], 12);\n /// ```\n #[lang = \"index\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]"}, {"sha": "8cb485872b3f3fe08de08b75b7987aa9d5a6e68a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -128,7 +128,9 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// let x = 12;\n /// let y = &x as *const i32;\n ///\n-/// unsafe { println!(\"{}\", std::ptr::read(y)); }\n+/// unsafe {\n+///     assert_eq!(std::ptr::read(y), 12);\n+/// }\n /// ```\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -178,7 +180,7 @@ pub unsafe fn read_and_drop<T>(dest: *mut T) -> T {\n ///\n /// unsafe {\n ///     std::ptr::write(y, z);\n-///     println!(\"{}\", std::ptr::read(y));\n+///     assert_eq!(std::ptr::read(y), 12);\n /// }\n /// ```\n #[inline]\n@@ -220,7 +222,9 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// let x = 12;\n /// let y = &x as *const i32;\n ///\n-/// unsafe { println!(\"{}\", std::ptr::read_volatile(y)); }\n+/// unsafe {\n+///     assert_eq!(std::ptr::read_volatile(y), 12);\n+/// }\n /// ```\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n@@ -266,7 +270,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// unsafe {\n ///     std::ptr::write_volatile(y, z);\n-///     println!(\"{}\", std::ptr::read_volatile(y));\n+///     assert_eq!(std::ptr::read_volatile(y), 12);\n /// }\n /// ```\n #[inline]"}, {"sha": "189150d426463f4835af37c86cde53e43245dfbf", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -23,9 +23,8 @@ use syntax::ast::NodeId;\n pub enum AccessLevel {\n     // Exported items + items participating in various kinds of public interfaces,\n     // but not directly nameable. For example, if function `fn f() -> T {...}` is\n-    // public, then type `T` is exported. Its values can be obtained by other crates\n-    // even if the type itseld is not nameable.\n-    // FIXME: Mostly unimplemented. Only `type` aliases export items currently.\n+    // public, then type `T` is reachable. Its values can be obtained by other crates\n+    // even if the type itself is not nameable.\n     Reachable,\n     // Public items + items accessible to other crates with help of `pub use` reexports\n     Exported,"}, {"sha": "c1f162e5772bf41d81cffac9fa3a52bff9481341", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -647,10 +647,13 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 struct_span_err!(self.bccx, span, E0503,\n                                  \"cannot use `{}` because it was mutably borrowed\",\n                                  &self.bccx.loan_path_to_string(copy_path))\n-                    .span_note(loan_span,\n+                    .span_label(loan_span,\n                                &format!(\"borrow of `{}` occurs here\",\n                                        &self.bccx.loan_path_to_string(&loan_path))\n                                )\n+                    .span_label(span,\n+                               &format!(\"use of borrowed `{}`\",\n+                                        &self.bccx.loan_path_to_string(&loan_path)))\n                     .emit();\n             }\n         }"}, {"sha": "225895adefa4ba7621826f71c07a611b72352e74", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -914,9 +914,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n             mc::AliasableStatic |\n             mc::AliasableStaticMut => {\n-                struct_span_err!(\n+                let mut err = struct_span_err!(\n                     self.tcx.sess, span, E0388,\n-                    \"{} in a static location\", prefix)\n+                    \"{} in a static location\", prefix);\n+                err.span_label(span, &format!(\"cannot write data in a static definition\"));\n+                err\n             }\n             mc::AliasableBorrowed => {\n                 struct_span_err!("}, {"sha": "099ec62b38de715180340825420473e9ebf47288", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -14,7 +14,7 @@ register_long_diagnostics! {\n E0454: r##\"\n A link name was given with an empty name. Erroneous code example:\n \n-```\n+```compile_fail,E0454\n #[link(name = \"\")] extern {} // error: #[link(name = \"\")] given with empty name\n ```\n \n@@ -32,7 +32,7 @@ as frameworks are specific to that operating system.\n \n Erroneous code example:\n \n-```compile_fail\"\n+```compile_fail,E0455\n #[link(name = \"FooCoreServices\",  kind = \"framework\")] extern {}\n // OS used to compile is Linux for example\n ```\n@@ -50,7 +50,7 @@ See more: https://doc.rust-lang.org/book/conditional-compilation.html\n E0458: r##\"\n An unknown \"kind\" was specified for a link attribute. Erroneous code example:\n \n-```\n+```compile_fail,E0458\n #[link(kind = \"wonderful_unicorn\")] extern {}\n // error: unknown kind: `wonderful_unicorn`\n ```\n@@ -64,7 +64,7 @@ Please specify a valid \"kind\" value, from one of the following:\n E0459: r##\"\n A link was used without a name parameter. Erroneous code example:\n \n-```\n+```compile_fail,E0459\n #[link(kind = \"dylib\")] extern {}\n // error: #[link(...)] specified without `name = \"foo\"`\n ```\n@@ -80,7 +80,7 @@ you want. Example:\n E0463: r##\"\n A plugin/crate was declared but cannot be found. Erroneous code example:\n \n-```\n+```compile_fail,E0463\n #![feature(plugin)]\n #![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\n extern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`"}, {"sha": "5641a50ccaccf53c00d71bb1b2aebe548277347f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -251,20 +251,24 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n             err\n         }\n         ResolutionError::TypeNotMemberOfTrait(type_, trait_) => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0437,\n                              \"type `{}` is not a member of trait `{}`\",\n                              type_,\n-                             trait_)\n+                             trait_);\n+            err.span_label(span, &format!(\"not a member of trait `Foo`\"));\n+            err\n         }\n         ResolutionError::ConstNotMemberOfTrait(const_, trait_) => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0438,\n                              \"const `{}` is not a member of trait `{}`\",\n                              const_,\n-                             trait_)\n+                             trait_);\n+            err.span_label(span, &format!(\"not a member of trait `Foo`\"));\n+            err\n         }\n         ResolutionError::VariableNotBoundInPattern(variable_name, from, to) => {\n             struct_span_err!(resolver.session,\n@@ -336,19 +340,23 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n             err\n         }\n         ResolutionError::StructVariantUsedAsFunction(path_name) => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0423,\n                              \"`{}` is the name of a struct or struct variant, but this expression \\\n                              uses it like a function name\",\n-                             path_name)\n+                             path_name);\n+            err.span_label(span, &format!(\"struct called like a function\"));\n+            err\n         }\n         ResolutionError::SelfNotAvailableInStaticMethod => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0424,\n-                             \"`self` is not available in a static method. Maybe a `self` \\\n-                             argument is missing?\")\n+                             \"`self` is not available in a static method\");\n+            err.span_label(span, &format!(\"not available in static method\"));\n+            err.note(&format!(\"maybe a `self` argument is missing?\"));\n+            err\n         }\n         ResolutionError::UnresolvedName { path, message: msg, context, is_static_method,\n                                           is_field, def } => {\n@@ -390,11 +398,13 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n             err\n         }\n         ResolutionError::UndeclaredLabel(name) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0426,\n-                             \"use of undeclared label `{}`\",\n-                             name)\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0426,\n+                                           \"use of undeclared label `{}`\",\n+                                           name);\n+            err.span_label(span, &format!(\"undeclared label `{}`\",&name));\n+            err\n         }\n         ResolutionError::SelfImportsOnlyAllowedWithin => {\n             struct_span_err!(resolver.session,\n@@ -418,10 +428,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n         }\n         ResolutionError::UnresolvedImport(name) => {\n             let msg = match name {\n-                Some((n, p)) => format!(\"unresolved import `{}`{}\", n, p),\n+                Some((n, _)) => format!(\"unresolved import `{}`\", n),\n                 None => \"unresolved import\".to_owned(),\n             };\n-            struct_span_err!(resolver.session, span, E0432, \"{}\", msg)\n+            let mut err = struct_span_err!(resolver.session, span, E0432, \"{}\", msg);\n+            if let Some((_, p)) = name {\n+                err.span_label(span, &p);\n+            }\n+            err\n         }\n         ResolutionError::FailedToResolve(msg) => {\n             let mut err = struct_span_err!(resolver.session, span, E0433,\n@@ -438,10 +452,12 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                               closure form instead\")\n         }\n         ResolutionError::AttemptToUseNonConstantValueInConstant => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0435,\n-                             \"attempt to use a non-constant value in a constant\")\n+                             \"attempt to use a non-constant value in a constant\");\n+            err.span_label(span, &format!(\"non-constant used with constant\"));\n+            err\n         }\n         ResolutionError::BindingShadowsSomethingUnacceptable(what_binding, name, binding) => {\n             let shadows_what = PathResolution::new(binding.def().unwrap()).kind_name();"}, {"sha": "8c6d89c29bde14f68b4d42c1e8d08d2b5b93de54", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -423,7 +423,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             if let Failed(err) = self.finalize_import(import) {\n                 errors = true;\n                 let (span, help) = match err {\n-                    Some((span, msg)) => (span, format!(\". {}\", msg)),\n+                    Some((span, msg)) => (span, msg),\n                     None => (import.span, String::new()),\n                 };\n \n@@ -596,9 +596,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 };\n                 let module_str = module_to_string(module);\n                 let msg = if &module_str == \"???\" {\n-                    format!(\"There is no `{}` in the crate root{}\", name, lev_suggestion)\n+                    format!(\"no `{}` in the root{}\", name, lev_suggestion)\n                 } else {\n-                    format!(\"There is no `{}` in `{}`{}\", name, module_str, lev_suggestion)\n+                    format!(\"no `{}` in `{}`{}\", name, module_str, lev_suggestion)\n                 };\n                 Failed(Some((directive.span, msg)))\n             } else {"}, {"sha": "52073359c0fd99ea331c08566d1a281303151598", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -347,9 +347,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if let ty::TyTrait(..) = mt.ty.sty {\n                     // This is \"x = SomeTrait\" being reduced from\n                     // \"let &x = &SomeTrait\" or \"let box x = Box<SomeTrait>\", an error.\n-                    span_err!(self.tcx.sess, span, E0033,\n-                              \"type `{}` cannot be dereferenced\",\n-                              self.ty_to_string(expected));\n+                    let type_str = self.ty_to_string(expected);\n+                    struct_span_err!(self.tcx.sess, span, E0033,\n+                              \"type `{}` cannot be dereferenced\", type_str)\n+                        .span_label(span, &format!(\"type `{}` cannot be dereferenced\", type_str))\n+                        .emit();\n                     return false\n                 }\n             }"}, {"sha": "54e63497e6202debd71f51d8392dda6c2e4613d6", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -161,6 +161,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             }\n             CastError::CastToBool => {\n                 struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\")\n+                    .span_label(self.span, &format!(\"unsupported cast\"))\n                     .help(\"compare with zero instead\")\n                     .emit();\n             }"}, {"sha": "c754d5b8359a9cc5b80beae763013b0443653fdd", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -45,10 +45,10 @@ impl RWLock {\n         // We roughly maintain the deadlocking behavior by panicking to ensure\n         // that this lock acquisition does not succeed.\n         //\n-        // We also check whether there this lock is already write locked. This\n+        // We also check whether this lock is already write locked. This\n         // is only possible if it was write locked by the current thread and\n         // the implementation allows recursive locking. The POSIX standard\n-        // doesn't require recursivly locking a rwlock to deadlock, but we can't\n+        // doesn't require recursively locking a rwlock to deadlock, but we can't\n         // allow that because it could lead to aliasing issues.\n         if r == libc::EAGAIN {\n             panic!(\"rwlock maximum reader count exceeded\");"}, {"sha": "44d2f158d20bbeadad7b5c28d289963c044e7258", "filename": "src/test/compile-fail/E0017.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0017.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -20,6 +20,7 @@ static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR E0017\n                                               //~| NOTE statics require immutable values\n                                               //~| ERROR E0388\n+                                              //~| NOTE cannot write data in a static definition\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n                                              //~| NOTE statics require immutable values\n                                              //~| ERROR E0017"}, {"sha": "d320bcd4d0f5536924c86f666d02a18426e07a77", "filename": "src/test/compile-fail/E0033.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0033.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -13,7 +13,13 @@ trait SomeTrait {\n }\n \n fn main() {\n-    let trait_obj: &SomeTrait = SomeTrait; //~ ERROR E0425\n-                                           //~^ ERROR E0038\n-    let &invalid = trait_obj; //~ ERROR E0033\n+    let trait_obj: &SomeTrait = SomeTrait;\n+    //~^ ERROR E0425\n+    //~| ERROR E0038\n+    //~| method `foo` has no receiver\n+    //~| NOTE the trait `SomeTrait` cannot be made into an object\n+\n+    let &invalid = trait_obj;\n+    //~^ ERROR E0033\n+    //~| NOTE type `&SomeTrait` cannot be dereferenced\n }"}, {"sha": "98b700984a707c5729a9fdeb6cb45266551a2426", "filename": "src/test/compile-fail/E0423.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0423.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -12,4 +12,5 @@ fn main () {\n     struct Foo { a: bool };\n \n     let f = Foo(); //~ ERROR E0423\n+                   //~^ struct called like a function\n }"}, {"sha": "911007113d3d64804a3c8ab51eb1fd4293ed4280", "filename": "src/test/compile-fail/E0424.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0424.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -14,7 +14,10 @@ impl Foo {\n     fn bar(self) {}\n \n     fn foo() {\n-        self.bar(); //~ ERROR E0424\n+        self.bar();\n+        //~^ ERROR `self` is not available in a static method [E0424]\n+        //~| NOTE not available in static method\n+        //~| NOTE maybe a `self` argument is missing?\n     }\n }\n "}, {"sha": "be21421cb0781a74eff288ce81f406e242a3b0b4", "filename": "src/test/compile-fail/E0426.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0426.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0426.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0426.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -10,6 +10,8 @@\n \n fn main () {\n     loop {\n-        break 'a; //~ ERROR E0426\n+        break 'a;\n+        //~^ ERROR E0426\n+        //~| NOTE undeclared label `'a`\n     }\n }"}, {"sha": "f687633d34d86c4cb59af93ee989fae152616a6f", "filename": "src/test/compile-fail/E0435.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0435.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -11,4 +11,5 @@\n fn main () {\n     let foo = 42u32;\n     const FOO : u32 = foo; //~ ERROR E0435\n+    //~| NOTE non-constant used with constant\n }"}, {"sha": "62ee8dc3464928fa3248504b3f0a5a7ce6cebe28", "filename": "src/test/compile-fail/E0437.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0437.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -12,6 +12,7 @@ trait Foo {}\n \n impl Foo for i32 {\n     type Bar = bool; //~ ERROR E0437\n+    //~| NOTE not a member of trait `Foo`\n }\n \n fn main () {"}, {"sha": "f549d62aebfea1a98d496bf065d23a74cb322e69", "filename": "src/test/compile-fail/E0438.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0438.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0438.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0438.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -14,6 +14,7 @@ trait Foo {}\n \n impl Foo for i32 {\n     const BAR: bool = true; //~ ERROR E0438\n+        //~| NOTE not a member of trait `Foo`\n }\n \n fn main () {"}, {"sha": "967ff64327235f9566a2319a7bc9563a25e87714", "filename": "src/test/compile-fail/E0441.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0441.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8; //~ ERROR E0441\n+}\n+\n+fn main() {}"}, {"sha": "ddd927054be1d56ebce5c923db92d2c5719d34ce", "filename": "src/test/compile-fail/E0442.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0442.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[repr(simd)]\n+struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,\n+             i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+struct i32x4(i32, i32, i32, i32);\n+#[repr(simd)]\n+struct i64x2(i64, i64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n+    //~^ ERROR E0442\n+    //~| ERROR E0442\n+    //~| ERROR E0442\n+}\n+\n+fn main() {}"}, {"sha": "24d1ee01dd46eb13cd399afd28c5afdcd904b38e", "filename": "src/test/compile-fail/E0443.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0443.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)]\n+struct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8; //~ ERROR E0443\n+}\n+\n+fn main() {}"}, {"sha": "a424a3ca20ec09c6a7193419abd3bb66806a59bd", "filename": "src/test/compile-fail/E0444.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0444.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[repr(simd)]\n+struct f64x2(f64, f64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32; //~ ERROR E0444\n+}\n+\n+fn main() {}"}, {"sha": "6b360c60a0f90ee2718b79326fc1cd938d5c4bbe", "filename": "src/test/compile-fail/E0445.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0445.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n+\n+pub trait Bar : Foo {} //~ ERROR E0445\n+pub struct Bar2<T: Foo>(pub T); //~ ERROR E0445\n+pub fn foo<T: Foo> (t: T) {} //~ ERROR E0445\n+\n+fn main() {}"}, {"sha": "c576661828471abf71e304c1cae2e8c69de94260", "filename": "src/test/compile-fail/E0446.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0446.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod Foo {\n+    struct Bar(u32);\n+\n+    pub fn bar() -> Bar { //~ ERROR E0446\n+        Bar(0)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ac365db33e5cdadc546c7f4e7cbe4b377b75a652", "filename": "src/test/compile-fail/E0449.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0449.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Bar;\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+pub impl Bar {} //~ ERROR E0449\n+\n+pub impl Foo for Bar { //~ ERROR E0449\n+    pub fn foo() {} //~ ERROR E0449\n+}\n+\n+fn main() {\n+}"}, {"sha": "3d76cb93773164a66cc6baf271866b5cdafe822f", "filename": "src/test/compile-fail/E0450.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0450.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod Bar {\n+    pub struct Foo(isize);\n+}\n+\n+fn main() {\n+    let f = Bar::Foo(0); //~ ERROR E0450\n+}"}, {"sha": "9e4a8713a33e027ce8071149f6dc3bc0837fba23", "filename": "src/test/compile-fail/E0451.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0451.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        b: isize,\n+    }\n+}\n+\n+fn main() {\n+    let f = Bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n+}"}, {"sha": "1665bbdd4c2c1b595da4b94ed12d73daca6d945a", "filename": "src/test/compile-fail/E0452.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0452.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(foo = \"\")] //~ ERROR E0452\n+\n+fn main() {\n+}"}, {"sha": "629b373cd7f12dff2eb48d62f3097c10ad197de3", "filename": "src/test/compile-fail/E0453.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0453.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(non_snake_case)]\n+\n+#[allow(non_snake_case)] //~ ERROR E0453\n+fn main() {\n+}"}, {"sha": "1439c3133d9ca22588aaa1f38714d4c96a74e8cf", "filename": "src/test/compile-fail/E0454.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0454.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(name = \"\")] extern {} //~ ERROR E0454\n+\n+fn main() {\n+}"}, {"sha": "21bedc6b84c2b81ca31ffded3fd16f86d30a0912", "filename": "src/test/compile-fail/E0458.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0458.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(kind = \"wonderful_unicorn\")] extern {} //~ ERROR E0458\n+                                              //~^ ERROR E0459\n+\n+fn main() {\n+}"}, {"sha": "dc7ac714f22395feddc48a4e5f71dc1ef7553871", "filename": "src/test/compile-fail/E0459.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0459.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(kind = \"dylib\")] extern {} //~ ERROR E0459\n+\n+fn main() {\n+}"}, {"sha": "3eff107365af1e3722846e1253c1bb9c4d4ffdc0", "filename": "src/test/compile-fail/E0463.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2FE0463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0463.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(plugin)]\n+#![plugin(cookie_monster)] //~ ERROR E0463\n+extern crate cake_is_a_lie;\n+\n+fn main() {\n+}"}, {"sha": "530822f6c5bafb1c387cae483b780d8536be33e8", "filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -71,6 +71,7 @@ fn copy_after_mut_borrow() {\n     let _x = &mut a.x;\n     //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n+    //~^ NOTE use of borrowed `a.x`\n }\n \n fn move_after_mut_borrow() {\n@@ -141,6 +142,7 @@ fn copy_after_mut_borrow_nested() {\n     let _x = &mut a.x.x;\n     //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n+    //~^ NOTE use of borrowed `a.x.x`\n }\n \n fn move_after_mut_borrow_nested() {"}, {"sha": "7839fb45d1c34ebfb7adce6e6f1e71cbc7345808", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -59,10 +59,12 @@ fn main()\n     //~^ ERROR casting\n     //~^^ HELP through a usize first\n     let _ = 3_i32 as bool;\n-    //~^ ERROR cannot cast as `bool`\n+    //~^ ERROR cannot cast as `bool` [E0054]\n+    //~| unsupported cast\n     //~| HELP compare with zero\n     let _ = E::A as bool;\n-    //~^ ERROR cannot cast as `bool`\n+    //~^ ERROR cannot cast as `bool` [E0054]\n+    //~| unsupported cast\n     //~| HELP compare with zero\n     let _ = 0x61u32 as char; //~ ERROR only `u8` can be cast\n "}, {"sha": "220b255bde419e9371f58c092c2f31e63cd15ed3", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use spam::{ham, eggs};\n-//~^ ERROR unresolved import `spam::eggs`. There is no `eggs` in `spam`\n+use spam::{ham, eggs}; //~ ERROR unresolved import `spam::eggs` [E0432]\n+                       //~^ no `eggs` in `spam`\n \n mod spam {\n     pub fn ham() { }"}, {"sha": "1ca1c060410adb1b44fecc132103d2fc78680000", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n use zed::bar;\n-use zed::baz;\n-//~^ ERROR unresolved import `zed::baz`. There is no `baz` in `zed`\n+use zed::baz; //~ ERROR unresolved import `zed::baz` [E0432]\n+              //~^ no `baz` in `zed`. Did you mean to use `bar`?\n \n \n mod zed {\n     pub fn bar() { println!(\"bar\"); }\n-    use foo; //~ ERROR unresolved import\n+    use foo; //~ ERROR unresolved import `foo` [E0432]\n+             //~^ no `foo` in the root\n }\n \n fn main() {"}, {"sha": "f5b03f9b2e97158ec104827b6d7ed94ef9687cf4", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use baz::zed::bar;\n-//~^ ERROR unresolved import `baz::zed::bar`. Could not find `zed` in `baz`\n+use baz::zed::bar; //~ ERROR unresolved import `baz::zed::bar` [E0432]\n+                   //~^ Could not find `zed` in `baz`\n \n mod baz {}\n mod zed {"}, {"sha": "20943bd0ea0773f8737ad45f264f81af41f89756", "filename": "src/test/compile-fail/issue-12612.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -15,8 +15,8 @@ extern crate issue_12612_1 as foo;\n use foo::bar;\n \n mod test {\n-    use bar::foo;\n-    //~^ ERROR unresolved import `bar::foo`. Maybe a missing `extern crate bar`?\n+    use bar::foo; //~ ERROR unresolved import `bar::foo` [E0432]\n+                  //~^ Maybe a missing `extern crate bar`?\n }\n \n fn main() {}"}, {"sha": "0059e92e07f07a8aa29ae13cfb8ff78e6395509e", "filename": "src/test/compile-fail/issue-13404.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-13404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-13404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13404.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use a::f;\n-use b::f;\n-//~^ ERROR: unresolved import `b::f`. There is no `f` in `b`\n+use b::f; //~ ERROR: unresolved import `b::f` [E0432]\n+          //~^ no `f` in `b`\n \n mod a { pub fn f() {} }\n mod b { }"}, {"sha": "dc09af0ada66f0cb03285baf96f3d8e2eeabbc61", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -10,6 +10,7 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n-use unresolved::*; //~ ERROR unresolved import `unresolved::*`. Maybe a missing `extern crate unres\n+use unresolved::*; //~ ERROR unresolved import `unresolved::*` [E0432]\n+                   //~^ Maybe a missing `extern crate unresolved`?\n \n fn main() {}"}, {"sha": "8e3faca02b7d1cef64a9a6a1f959859f915f29c6", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -13,5 +13,7 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Foo::Variant(42); //~ ERROR uses it like a function\n+    let f = Foo::Variant(42);\n+    //~^ ERROR uses it like a function\n+    //~| struct called like a function\n }"}, {"sha": "15d5d2b80c31d0053eeb75ae2915cefecbce8a19", "filename": "src/test/compile-fail/issue-19452.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -13,5 +13,7 @@ enum Homura {\n }\n \n fn main() {\n-    let homura = Homura::Madoka; //~ ERROR uses it like a function\n+    let homura = Homura::Madoka;\n+    //~^ ERROR uses it like a function\n+    //~| struct called like a function\n }"}, {"sha": "da92161967dbdc98921c9684174cbc913b757b45", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -59,7 +59,9 @@ impl cat {\n impl cat {\n   fn meow() {\n     if self.whiskers > 3 {\n-        //~^ ERROR: `self` is not available in a static method. Maybe a `self` argument is missing?\n+        //~^ ERROR `self` is not available in a static method [E0424]\n+        //~| NOTE not available in static method\n+        //~| NOTE maybe a `self` argument is missing?\n         println!(\"MEOW\");\n     }\n   }"}, {"sha": "ceefd583a5ca6f1b22de8dd9c8403e625297ec08", "filename": "src/test/compile-fail/issue-25793.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -12,6 +12,7 @@ macro_rules! width(\n     ($this:expr) => {\n         $this.width.unwrap()\n         //~^ ERROR cannot use `self.width` because it was mutably borrowed\n+        //~| NOTE use of borrowed `*self`\n     }\n );\n "}, {"sha": "0d684ec5ae19b4593f2a5b379857e62a989a09e1", "filename": "src/test/compile-fail/issue-2937.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use m::f as x; //~ ERROR unresolved import `m::f`. There is no `f` in `m`\n+use m::f as x; //~ ERROR unresolved import `m::f` [E0432]\n+               //~^ no `f` in `m`\n \n mod m {}\n "}, {"sha": "b0cfd8714fc028969d84f8515ac3372c587f8f7b", "filename": "src/test/compile-fail/issue-30560.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-30560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-30560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30560.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -9,8 +9,12 @@\n // except according to those terms.\n \n type Alias = ();\n-use Alias::*; //~ ERROR Not a module\n-use std::io::Result::*; //~ ERROR Not a module\n+use Alias::*;\n+//~^ ERROR unresolved import `Alias::*` [E0432]\n+//~| Not a module `Alias`\n+use std::io::Result::*;\n+//~^ ERROR unresolved import `std::io::Result::*` [E0432]\n+//~| Not a module `Result`\n \n trait T {}\n use T::*; //~ ERROR items in traits are not importable"}, {"sha": "d610e8b483798af81cf2c1df4a57f5054a925b72", "filename": "src/test/compile-fail/issue-32833.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-32833.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-32833.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32833.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use bar::Foo; //~ ERROR There is no `Foo` in `bar` [E0432]\n+use bar::Foo; //~ ERROR unresolved import `bar::Foo` [E0432]\n+              //~^ no `Foo` in `bar`\n mod bar {\n-    use Foo; //~ ERROR There is no `Foo` in the crate root [E0432]\n+    use Foo; //~ ERROR unresolved import `Foo` [E0432]\n+             //~^ no `Foo` in the root\n }\n \n fn main() {}"}, {"sha": "7a36012925eed415f3c836f067946553e1bd9f33", "filename": "src/test/compile-fail/issue-5035.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -14,7 +14,8 @@ impl K for isize {} //~ ERROR: `K` is not a trait\n                     //~| NOTE: not a trait\n                     //~| NOTE: aliases cannot be used for traits\n \n-use ImportError; //~ ERROR unresolved\n+use ImportError; //~ ERROR unresolved import `ImportError` [E0432]\n+                 //~^ no `ImportError` in the root\n impl ImportError for () {} // check that this is not an additional error (c.f. #35142)\n \n fn main() {}"}, {"sha": "670b6bd46e7d82a88455b82ce017c47d8b7f590c", "filename": "src/test/compile-fail/issue-8208.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -8,14 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use self::*; //~ ERROR: unresolved import `self::*`. Cannot glob-import a module into itself.\n+use self::*; //~ ERROR: unresolved import `self::*` [E0432]\n+             //~^ Cannot glob-import a module into itself.\n \n mod foo {\n-    use foo::*; //~ ERROR: unresolved import `foo::*`. Cannot glob-import a module into itself.\n+    use foo::*; //~ ERROR: unresolved import `foo::*` [E0432]\n+                //~^ Cannot glob-import a module into itself.\n \n     mod bar {\n         use super::bar::*;\n-        //~^ ERROR: unresolved import `super::bar::*`. Cannot glob-import a module into itself.\n+        //~^ ERROR: unresolved import `super::bar::*` [E0432]\n+        //~| Cannot glob-import a module into itself.\n     }\n \n }"}, {"sha": "376e95312b8fbf6b1cc7df7034e1bf42cbae3edc", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -25,12 +25,14 @@ pub fn foo() {}\n \n fn test1() {\n     use bar::foo;\n-    //~^ ERROR unresolved import `bar::foo`. There is no `foo` in `bar`\n+    //~^ ERROR unresolved import `bar::foo` [E0432]\n+    //~| no `foo` in `bar`\n }\n \n fn test2() {\n     use bar::glob::foo;\n-    //~^ ERROR unresolved import `bar::glob::foo`. There is no `foo` in `bar::glob`\n+    //~^ ERROR unresolved import `bar::glob::foo` [E0432]\n+    //~| no `foo` in `bar::glob`\n }\n \n #[start] fn main(_: isize, _: *const *const u8) -> isize { 3 }"}, {"sha": "b841717bd11d8c24675b93ae3d93d521e0228e20", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -26,7 +26,8 @@ pub fn foo() {}\n \n fn test1() {\n     use bar::gpriv;\n-    //~^ ERROR unresolved import `bar::gpriv`. There is no `gpriv` in `bar`\n+    //~^ ERROR unresolved import `bar::gpriv` [E0432]\n+    //~| no `gpriv` in `bar`\n \n     // This should pass because the compiler will insert a fake name binding\n     // for `gpriv`"}, {"sha": "8c026df7d9754ea846ad63bd58e88db69de29964", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -12,11 +12,20 @@\n fn broken() {\n     let mut x = 3;\n     let mut _y = vec!(&mut x);\n+    //~^ NOTE borrow of `x` occurs here\n+    //~| NOTE borrow of `x` occurs here\n+    //~| NOTE borrow of `x` occurs here\n     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+        //~^ NOTE use of borrowed `x`\n         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+        //~^ NOTE use of borrowed `x`\n         _y.push(&mut z); //~ ERROR `z` does not live long enough\n+        //~^ NOTE does not live long enough\n         x += 1; //~ ERROR cannot assign\n+        //~^ NOTE assignment to borrowed `x` occurs here\n     }\n+    //~^ NOTE borrowed value only valid until here\n }\n+//~^ NOTE borrowed value must be valid until here\n \n fn main() { }"}, {"sha": "a23ac80fca62071490dc4cd51f015a08b94cffdb", "filename": "src/test/compile-fail/resolve_self_super_hint.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -11,16 +11,20 @@\n mod a {\n     extern crate collections;\n     use collections::HashMap;\n-//~^ ERROR unresolved import `collections::HashMap`. Did you mean `self::collections`?\n+    //~^ ERROR unresolved import `collections::HashMap` [E0432]\n+    //~| Did you mean `self::collections`?\n     mod b {\n         use collections::HashMap;\n-//~^ ERROR unresolved import `collections::HashMap`. Did you mean `a::collections`?\n+        //~^ ERROR unresolved import `collections::HashMap` [E0432]\n+        //~| Did you mean `a::collections`?\n         mod c {\n             use collections::HashMap;\n-//~^ ERROR unresolved import `collections::HashMap`. Did you mean `a::collections`?\n+            //~^ ERROR unresolved import `collections::HashMap` [E0432]\n+            //~| Did you mean `a::collections`?\n             mod d {\n                 use collections::HashMap;\n-//~^ ERROR unresolved import `collections::HashMap`. Did you mean `a::collections`?\n+                //~^ ERROR unresolved import `collections::HashMap` [E0432]\n+                //~| Did you mean `a::collections`?\n             }\n         }\n     }"}, {"sha": "7d11ff6c9b54dae32081a2b2dbce8192af15b75c", "filename": "src/test/compile-fail/super-at-top-level.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::f; //~ ERROR unresolved import `super::f`. There are too many initial `super`s.\n+use super::f; //~ ERROR unresolved import `super::f` [E0432]\n+              //~^ There are too many initial `super`s.\n \n fn main() {\n }"}, {"sha": "d1254f3f5241b98c134cb9136cfcaf37702c329c", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -10,13 +10,17 @@\n \n // ignore-tidy-linelength\n \n-use foo::bar; //~ ERROR unresolved import `foo::bar`. Maybe a missing `extern crate foo`?\n+use foo::bar; //~ ERROR unresolved import `foo::bar` [E0432]\n+              //~^ Maybe a missing `extern crate foo`?\n \n-use bar::Baz as x; //~ ERROR unresolved import `bar::Baz`. There is no `Baz` in `bar`. Did you mean to use `Bar`?\n+use bar::Baz as x; //~ ERROR unresolved import `bar::Baz` [E0432]\n+                   //~^ no `Baz` in `bar`. Did you mean to use `Bar`?\n \n-use food::baz; //~ ERROR unresolved import `food::baz`. There is no `baz` in `food`. Did you mean to use `bag`?\n+use food::baz; //~ ERROR unresolved import `food::baz`\n+               //~^ no `baz` in `food`. Did you mean to use `bag`?\n \n-use food::{beens as Foo}; //~ ERROR unresolved import `food::beens`. There is no `beens` in `food`. Did you mean to use `beans`?\n+use food::{beens as Foo}; //~ ERROR unresolved import `food::beens` [E0432]\n+                          //~^ no `beens` in `food`. Did you mean to use `beans`?\n \n mod bar {\n     pub struct Bar;"}, {"sha": "58e37bbfa3ea7c7729d56545777f2aff02527e81", "filename": "src/test/compile-fail/use-from-trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fuse-from-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fuse-from-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-from-trait.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -18,10 +18,12 @@ use Trait::C;\n //~^ ERROR `C` is not directly importable\n \n use Foo::new;\n-//~^ ERROR unresolved import `Foo::new`. Not a module `Foo`\n+//~^ ERROR unresolved import `Foo::new` [E0432]\n+//~| Not a module `Foo`\n \n use Foo::C2;\n-//~^ ERROR unresolved import `Foo::C2`. Not a module `Foo`\n+//~^ ERROR unresolved import `Foo::C2` [E0432]\n+//~| Not a module `Foo`\n \n pub trait Trait {\n     fn foo();"}, {"sha": "6df20d414a788f919f0744ecc45d00a67de60791", "filename": "src/test/compile-fail/use-keyword.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fuse-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fuse-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-keyword.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -14,9 +14,14 @@\n mod a {\n     mod b {\n         use self as A; //~ ERROR `self` imports are only allowed within a { } list\n-        //~^ ERROR unresolved import `self`. There is no `self` in the crate root\n-        use super as B; //~ ERROR unresolved import `super`. There is no `super` in the crate root\n-        use super::{self as C}; //~ERROR unresolved import `super`. There is no `super` in the crate\n+        //~^ ERROR unresolved import `self` [E0432]\n+        //~| no `self` in the root\n+        use super as B;\n+        //~^ ERROR unresolved import `super` [E0432]\n+        //~| no `super` in the root\n+        use super::{self as C};\n+        //~^ ERROR unresolved import `super` [E0432]\n+        //~| no `super` in the root\n     }\n }\n "}, {"sha": "5f8842a521abd80d940d04e31a350abed4d6dcb5", "filename": "src/test/compile-fail/use-mod-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0da7f6af9d8547376d9497042eb3f4e6013776d/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs?ref=d0da7f6af9d8547376d9497042eb3f4e6013776d", "patch": "@@ -10,10 +10,12 @@\n \n mod foo {\n     use self::{self};\n-    //~^ ERROR unresolved import `self`. There is no `self` in the crate root\n+    //~^ ERROR unresolved import `self` [E0432]\n+    //~| no `self` in the root\n \n     use super::{self};\n-    //~^ ERROR unresolved import `super`. There is no `super` in the crate root\n+    //~^ ERROR unresolved import `super` [E0432]\n+    //~| no `super` in the root\n }\n \n fn main() {}"}]}