{"sha": "2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDI2NzBlYTBhNTViN2Y3NDgxYzVjZTJhOTVjNWM1MDMzOTQxZDU=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-12-30T20:45:24Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-01-28T14:13:42Z"}, "message": "Unify computation of length in `EscapeUnicode`\n\nThe `offset` value was computed both in `next` and in `size_hint`;\ncomputing it in a single place ensures consistency and makes it easier\nto apply improvements. The value is now computed as soon as the\niterator is constructed. This means that the time to compute it is\nspent immediately and cannot be avoided, but it also guarantees that\nit is only spent once.", "tree": {"sha": "58670df4b48fe6bca30943a4362254a3318b4f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58670df4b48fe6bca30943a4362254a3318b4f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "html_url": "https://github.com/rust-lang/rust/commit/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035f4cca00d20fcf889c8c588125cd07b632a476", "url": "https://api.github.com/repos/rust-lang/rust/commits/035f4cca00d20fcf889c8c588125cd07b632a476", "html_url": "https://github.com/rust-lang/rust/commit/035f4cca00d20fcf889c8c588125cd07b632a476"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "df6044fa83928efe32d1d2e53df9c75037998bf6", "filename": "src/libcore/char.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "patch": "@@ -299,7 +299,15 @@ impl CharExt for char {\n \n     #[inline]\n     fn escape_unicode(self) -> EscapeUnicode {\n-        EscapeUnicode { c: self, state: EscapeUnicodeState::Backslash }\n+        let mut n = 0;\n+        while (self as u32) >> (4 * (n + 1)) != 0 {\n+            n += 1;\n+        }\n+        EscapeUnicode {\n+            c: self,\n+            state: EscapeUnicodeState::Backslash,\n+            offset: n,\n+        }\n     }\n \n     #[inline]\n@@ -420,15 +428,16 @@ pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n     c: char,\n-    state: EscapeUnicodeState\n+    state: EscapeUnicodeState,\n+    offset: usize,\n }\n \n #[derive(Clone)]\n enum EscapeUnicodeState {\n     Backslash,\n     Type,\n     LeftBrace,\n-    Value(usize),\n+    Value,\n     RightBrace,\n     Done,\n }\n@@ -448,19 +457,15 @@ impl Iterator for EscapeUnicode {\n                 Some('u')\n             }\n             EscapeUnicodeState::LeftBrace => {\n-                let mut n = 0;\n-                while (self.c as u32) >> (4 * (n + 1)) != 0 {\n-                    n += 1;\n-                }\n-                self.state = EscapeUnicodeState::Value(n);\n+                self.state = EscapeUnicodeState::Value;\n                 Some('{')\n             }\n-            EscapeUnicodeState::Value(offset) => {\n-                let c = from_digit(((self.c as u32) >> (offset * 4)) & 0xf, 16).unwrap();\n-                if offset == 0 {\n+            EscapeUnicodeState::Value => {\n+                let c = from_digit(((self.c as u32) >> (self.offset * 4)) & 0xf, 16).unwrap();\n+                if self.offset == 0 {\n                     self.state = EscapeUnicodeState::RightBrace;\n                 } else {\n-                    self.state = EscapeUnicodeState::Value(offset - 1);\n+                    self.offset -= 1;\n                 }\n                 Some(c)\n             }\n@@ -473,18 +478,15 @@ impl Iterator for EscapeUnicode {\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let mut n = 0;\n-        while (self.c as usize) >> (4 * (n + 1)) != 0 {\n-            n += 1;\n-        }\n         let n = match self.state {\n-            EscapeUnicodeState::Backslash => n + 5,\n-            EscapeUnicodeState::Type => n + 4,\n-            EscapeUnicodeState::LeftBrace => n + 3,\n-            EscapeUnicodeState::Value(offset) => offset + 2,\n+            EscapeUnicodeState::Backslash => 5,\n+            EscapeUnicodeState::Type => 4,\n+            EscapeUnicodeState::LeftBrace => 3,\n+            EscapeUnicodeState::Value => 2,\n             EscapeUnicodeState::RightBrace => 1,\n             EscapeUnicodeState::Done => 0,\n         };\n+        let n = n + self.offset;\n         (n, Some(n))\n     }\n }"}]}