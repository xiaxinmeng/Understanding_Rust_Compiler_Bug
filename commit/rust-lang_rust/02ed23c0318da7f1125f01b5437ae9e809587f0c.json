{"sha": "02ed23c0318da7f1125f01b5437ae9e809587f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZWQyM2MwMzE4ZGE3ZjExMjVmMDFiNTQzN2FlOWU4MDk1ODdmMGM=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-18T23:09:52Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-21T23:15:09Z"}, "message": "Use an exhaustive match in `Node::ident()` and add docs\n\nThis should cause a compiler error in the future if more variants are\nadded without `Node::ident()` being updated.", "tree": {"sha": "05a3fa23913d6502dc9028b794bb27aee267c4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a3fa23913d6502dc9028b794bb27aee267c4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ed23c0318da7f1125f01b5437ae9e809587f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ed23c0318da7f1125f01b5437ae9e809587f0c", "html_url": "https://github.com/rust-lang/rust/commit/02ed23c0318da7f1125f01b5437ae9e809587f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ed23c0318da7f1125f01b5437ae9e809587f0c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa3b4f940b4705dc5a1089e917f521b093fd0bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa3b4f940b4705dc5a1089e917f521b093fd0bc", "html_url": "https://github.com/rust-lang/rust/commit/0fa3b4f940b4705dc5a1089e917f521b093fd0bc"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "dd5dfe978a47777a27ed9220dcdee4488d686ce5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/02ed23c0318da7f1125f01b5437ae9e809587f0c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ed23c0318da7f1125f01b5437ae9e809587f0c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=02ed23c0318da7f1125f01b5437ae9e809587f0c", "patch": "@@ -3182,6 +3182,20 @@ pub enum Node<'hir> {\n }\n \n impl<'hir> Node<'hir> {\n+    /// Get the identifier of this `Node`, if applicable.\n+    ///\n+    /// # Edge cases\n+    ///\n+    /// Calling `.ident()` on a [`Node::Ctor`] will return `None`\n+    /// because `Ctor`s do not have identifiers themselves.\n+    /// Instead, call `.ident()` on the parent struct/variant, like so:\n+    ///\n+    /// ```ignore (illustrative)\n+    /// ctor\n+    ///     .ctor_hir_id()\n+    ///     .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n+    ///     .and_then(|parent| parent.ident())\n+    /// ```\n     pub fn ident(&self) -> Option<Ident> {\n         match self {\n             Node::TraitItem(TraitItem { ident, .. })\n@@ -3190,8 +3204,25 @@ impl<'hir> Node<'hir> {\n             | Node::Field(FieldDef { ident, .. })\n             | Node::Variant(Variant { ident, .. })\n             | Node::MacroDef(MacroDef { ident, .. })\n-            | Node::Item(Item { ident, .. }) => Some(*ident),\n-            _ => None,\n+            | Node::Item(Item { ident, .. })\n+            | Node::PathSegment(PathSegment { ident, .. }) => Some(*ident),\n+            Node::Lifetime(lt) => Some(lt.name.ident()),\n+            Node::GenericParam(p) => Some(p.name.ident()),\n+            Node::Param(..)\n+            | Node::AnonConst(..)\n+            | Node::Expr(..)\n+            | Node::Stmt(..)\n+            | Node::Block(..)\n+            | Node::Ctor(..)\n+            | Node::Pat(..)\n+            | Node::Binding(..)\n+            | Node::Arm(..)\n+            | Node::Local(..)\n+            | Node::Visibility(..)\n+            | Node::Crate(..)\n+            | Node::Ty(..)\n+            | Node::TraitRef(..)\n+            | Node::Infer(..) => None,\n         }\n     }\n "}]}