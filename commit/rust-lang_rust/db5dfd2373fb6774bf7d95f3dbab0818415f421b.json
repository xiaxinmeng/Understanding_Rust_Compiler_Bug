{"sha": "db5dfd2373fb6774bf7d95f3dbab0818415f421b", "node_id": "C_kwDOAAsO6NoAKGRiNWRmZDIzNzNmYjY3NzRiZjdkOTVmM2RiYWIwODE4NDE1ZjQyMWI", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-14T20:57:26Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-20T11:15:17Z"}, "message": "Add block-based mutex unlocking example", "tree": {"sha": "22e04f296e0bad299f3b09894f4bcf7e45fb63e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e04f296e0bad299f3b09894f4bcf7e45fb63e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5dfd2373fb6774bf7d95f3dbab0818415f421b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5dfd2373fb6774bf7d95f3dbab0818415f421b", "html_url": "https://github.com/rust-lang/rust/commit/db5dfd2373fb6774bf7d95f3dbab0818415f421b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5dfd2373fb6774bf7d95f3dbab0818415f421b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a04d086cac54a41517d5657b59d5fe2caca2d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a04d086cac54a41517d5657b59d5fe2caca2d71", "html_url": "https://github.com/rust-lang/rust/commit/4a04d086cac54a41517d5657b59d5fe2caca2d71"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "2f7c609c83ef064d9277baf55037d69d311ae833", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db5dfd2373fb6774bf7d95f3dbab0818415f421b/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5dfd2373fb6774bf7d95f3dbab0818415f421b/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=db5dfd2373fb6774bf7d95f3dbab0818415f421b", "patch": "@@ -107,8 +107,8 @@ use crate::sys::locks as sys;\n /// *guard += 1;\n /// ```\n ///\n-/// It is sometimes necessary to manually drop the mutex guard to unlock it\n-/// sooner than the end of the enclosing scope.\n+/// It is sometimes necessary to manually drop the mutex guard or to create an inner scope\n+/// to unlock it sooner than the end of the enclosing scope.\n ///\n /// ```\n /// use std::sync::{Arc, Mutex};\n@@ -125,11 +125,18 @@ use crate::sys::locks as sys;\n ///     let res_mutex_clone = Arc::clone(&res_mutex);\n ///\n ///     threads.push(thread::spawn(move || {\n-///         let mut data = data_mutex_clone.lock().unwrap();\n-///         // This is the result of some important and long-ish work.\n-///         let result = data.iter().fold(0, |acc, x| acc + x * 2);\n-///         data.push(result);\n-///         drop(data);\n+///         // Here we use a block to limit the lifetime of the lock guard.\n+///         let result = {\n+///             let mut data = data_mutex_clone.lock().unwrap();\n+///             // This is the result of some important and long-ish work.\n+///             let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+///             data.push(result);\n+///             result\n+///             // The mutex guard gets dropped here, together with any other values\n+///             // created in the critical section.\n+///         };\n+///         // The guard created here is a temporary dropped at the end of the statement, i.e.\n+///         // the lock would not remain being held even if the thread did some additional work.\n ///         *res_mutex_clone.lock().unwrap() += result;\n ///     }));\n /// });\n@@ -146,6 +153,8 @@ use crate::sys::locks as sys;\n /// // It's even more important here than in the threads because we `.join` the\n /// // threads after that. If we had not dropped the mutex guard, a thread could\n /// // be waiting forever for it, causing a deadlock.\n+/// // As in the threads a block could have been used instead of calling the\n+/// // `drop` function.\n /// drop(data);\n /// // Here the mutex guard is not assigned to a variable and so, even if the\n /// // scope does not end after this line, the mutex is still released: there is\n@@ -160,6 +169,7 @@ use crate::sys::locks as sys;\n ///\n /// assert_eq!(*res_mutex.lock().unwrap(), 800);\n /// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Mutex\")]\n pub struct Mutex<T: ?Sized> {"}]}