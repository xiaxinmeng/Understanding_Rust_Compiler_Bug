{"sha": "b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "node_id": "C_kwDOAAsO6NoAKGI4ZDJmNWNkZTVkMmZiMzMyYTc0YzE5NzRjZDhlMGEyZDY5ZjRmOGE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-19T20:33:09Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-19T20:33:09Z"}, "message": "Don't crate-locally reexport walk functions in tidy", "tree": {"sha": "cf1725327c868751e4a82966a095353790f1cfc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1725327c868751e4a82966a095353790f1cfc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "html_url": "https://github.com/rust-lang/rust/commit/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503e19d01e941b88bf6d5b28e9108d046abcfa2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/503e19d01e941b88bf6d5b28e9108d046abcfa2d", "html_url": "https://github.com/rust-lang/rust/commit/503e19d01e941b88bf6d5b28e9108d046abcfa2d"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "b898f20a5d018b30a0b47bbd6452ca25547adc04", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -21,6 +21,7 @@ mod os_impl {\n \n #[cfg(unix)]\n mod os_impl {\n+    use crate::walk::{filter_dirs, walk_no_read};\n     use std::fs;\n     use std::os::unix::prelude::*;\n     use std::path::Path;\n@@ -100,10 +101,10 @@ mod os_impl {\n \n         const ALLOWED: &[&str] = &[\"configure\", \"x\"];\n \n-        crate::walk_no_read(\n+        walk_no_read(\n             path,\n             &mut |path| {\n-                crate::filter_dirs(path)\n+                filter_dirs(path)\n                     || path.ends_with(\"src/etc\")\n                     // This is a list of directories that we almost certainly\n                     // don't need to walk. A future PR will likely want to"}, {"sha": "9880a32ad0c28433704bb77504696c7d96254452", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -1,13 +1,14 @@\n //! Tidy check to prevent creation of unnecessary debug artifacts while running tests.\n \n+use crate::walk::{filter_dirs, walk};\n use std::path::{Path, PathBuf};\n \n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let test_dir: PathBuf = path.join(\"test\");\n \n-    super::walk(&test_dir, &mut super::filter_dirs, &mut |entry, contents| {\n+    walk(&test_dir, &mut filter_dirs, &mut |entry, contents| {\n         let filename = entry.path();\n         let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n         if !is_rust {"}, {"sha": "8a7c4460dc7eaed4dc7a24723d14c17f159e42d9", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -1,5 +1,6 @@\n //! Tidy check to ensure that crate `edition` is '2018' or '2021'.\n \n+use crate::walk::{filter_dirs, walk};\n use std::path::Path;\n \n fn is_edition_2021(mut line: &str) -> bool {\n@@ -8,9 +9,9 @@ fn is_edition_2021(mut line: &str) -> bool {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    super::walk(\n+    walk(\n         path,\n-        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap();"}, {"sha": "610e322e12963e63854e0b3ba08b5300762abacd", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -1,6 +1,7 @@\n //! Checks that all error codes have at least one test to prevent having error\n //! codes that are silently not thrown by the compiler anymore.\n \n+use crate::walk::{filter_dirs, walk};\n use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n@@ -217,7 +218,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     println!(\"Checking which error codes lack tests...\");\n \n     for path in paths {\n-        super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n+        walk(path, &mut filter_dirs, &mut |entry, contents| {\n             let file_name = entry.file_name();\n             let entry_path = entry.path();\n "}, {"sha": "fe5fd72b91a49946337ed8bdda075d9b41733dae", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -3,14 +3,15 @@\n //! This ensures that error codes are used at most once and also prints out some\n //! statistics about the error codes.\n \n+use crate::walk::{filter_dirs, walk};\n use std::collections::HashMap;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let mut map: HashMap<_, Vec<_>> = HashMap::new();\n-    super::walk(\n+    walk(\n         path,\n-        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "28a0700a64bfdb8a27b6fd8e2d6464906126097d", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -9,6 +9,7 @@\n //! * All unstable lang features have tests to ensure they are actually unstable.\n //! * Language features in a group are sorted by feature name.\n \n+use crate::walk::{filter_dirs, walk, walk_many};\n use std::collections::HashMap;\n use std::fmt;\n use std::fs;\n@@ -92,14 +93,14 @@ pub fn check(\n     let lib_features = get_and_check_lib_features(lib_path, bad, &features);\n     assert!(!lib_features.is_empty());\n \n-    super::walk_many(\n+    walk_many(\n         &[\n             &src_path.join(\"test/ui\"),\n             &src_path.join(\"test/ui-fulldeps\"),\n             &src_path.join(\"test/rustdoc-ui\"),\n             &src_path.join(\"test/rustdoc\"),\n         ],\n-        &mut |path| super::filter_dirs(path),\n+        &mut filter_dirs,\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n@@ -466,9 +467,9 @@ fn map_lib_features(\n     base_src_path: &Path,\n     mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize),\n ) {\n-    super::walk(\n+    walk(\n         base_src_path,\n-        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "e82cca402e2d8b550e1a883f074ae9ea41831495", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -3,8 +3,6 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n-use walk::{filter_dirs, walk, walk_many, walk_no_read};\n-\n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n /// * The expression that failed"}, {"sha": "f4592fdcff9dcb5f65a2f612c62b9fafb3665414", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -30,6 +30,7 @@\n //! platform-specific cfgs are allowed. Not sure yet how to deal with\n //! this in the long term.\n \n+use crate::walk::{filter_dirs, walk};\n use std::iter::Iterator;\n use std::path::Path;\n \n@@ -67,7 +68,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // Sanity check that the complex parsing here works.\n     let mut saw_target_arch = false;\n     let mut saw_cfg_bang = false;\n-    super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n+    walk(path, &mut filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") {"}, {"sha": "541380cebde8d07d5211a78744bf281f97da0a2b", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -16,6 +16,7 @@\n //! A number of these checks can be opted-out of with various directives of the form:\n //! `// ignore-tidy-CHECK-NAME`.\n \n+use crate::walk::{filter_dirs, walk};\n use regex::Regex;\n use std::path::Path;\n \n@@ -218,13 +219,13 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n-        super::filter_dirs(path) || skip_markdown_path(path)\n+        filter_dirs(path) || skip_markdown_path(path)\n     }\n     let problematic_consts_strings: Vec<String> = (PROBLEMATIC_CONSTS.iter().map(u32::to_string))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n-    super::walk(path, &mut skip, &mut |entry, contents| {\n+    walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\"];"}, {"sha": "8ba25705666a9479b4c1e9a4ce0778c003447512", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -36,7 +36,7 @@ struct RevisionInfo<'a> {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let tests = path.join(\"test\");\n-    super::walk(\n+    crate::walk::walk(\n         &tests,\n         &mut |path| path.extension().map(|p| p == \"rs\") == Some(false),\n         &mut |entry, content| {"}, {"sha": "969d5fec60f371116b36ea0a756a14af618f8a01", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -47,7 +47,7 @@ fn check_entries(path: &Path, bad: &mut bool) {\n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n     for path in &[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")] {\n-        super::walk_no_read(path, &mut |_| false, &mut |entry| {\n+        crate::walk::walk_no_read(path, &mut |_| false, &mut |entry| {\n             let file_path = entry.path();\n             if let Some(ext) = file_path.extension() {\n                 if ext == \"stderr\" || ext == \"stdout\" {"}, {"sha": "2c23b6ebc75e2c996c8eec89cf0ed772895fe7cd", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=b8d2f5cde5d2fb332a74c1974cd8e0a2d69f4f8a", "patch": "@@ -7,6 +7,7 @@\n //! named `tests.rs` or `benches.rs`, or directories named `tests` or `benches` unconfigured\n //! during normal build.\n \n+use crate::walk::{filter_dirs, walk};\n use std::path::Path;\n \n pub fn check(root_path: &Path, bad: &mut bool) {\n@@ -20,7 +21,7 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n     let mut skip = |path: &Path| {\n         let file_name = path.file_name().unwrap_or_default();\n         if path.is_dir() {\n-            super::filter_dirs(path)\n+            filter_dirs(path)\n                 || path.ends_with(\"src/test\")\n                 || path.ends_with(\"src/doc\")\n                 || (file_name == \"tests\" || file_name == \"benches\") && !is_core(path)\n@@ -34,7 +35,7 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         }\n     };\n \n-    super::walk(root_path, &mut skip, &mut |entry, contents| {\n+    walk(root_path, &mut skip, &mut |entry, contents| {\n         let path = entry.path();\n         let is_core = path.starts_with(core);\n         for (i, line) in contents.lines().enumerate() {"}]}