{"sha": "64164b10e8b321745284bf7da7656e464b4ec9f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTY0YjEwZThiMzIxNzQ1Mjg0YmY3ZGE3NjU2ZTQ2NGI0ZWM5ZjQ=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-26T21:42:07Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Improve comments.", "tree": {"sha": "b4766736d3d5f62637327ef63f02ab048af0073d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4766736d3d5f62637327ef63f02ab048af0073d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64164b10e8b321745284bf7da7656e464b4ec9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64164b10e8b321745284bf7da7656e464b4ec9f4", "html_url": "https://github.com/rust-lang/rust/commit/64164b10e8b321745284bf7da7656e464b4ec9f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64164b10e8b321745284bf7da7656e464b4ec9f4/comments", "author": null, "committer": null, "parents": [{"sha": "ff5e35b90a7717bffb4bf2f1ae898e2c73920281", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5e35b90a7717bffb4bf2f1ae898e2c73920281", "html_url": "https://github.com/rust-lang/rust/commit/ff5e35b90a7717bffb4bf2f1ae898e2c73920281"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "9a332a0dcf2c00301593713a2efdce3b97b2f803", "filename": "src/thread.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64164b10e8b321745284bf7da7656e464b4ec9f4/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64164b10e8b321745284bf7da7656e464b4ec9f4/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=64164b10e8b321745284bf7da7656e464b4ec9f4", "patch": "@@ -61,7 +61,8 @@ impl ThreadId {\n     }\n }\n \n-/// An identifier of a set of blocked threads.\n+/// An identifier of a set of blocked threads. 0 is used to indicate the absence\n+/// of a blockset identifier and, therefore, is not a valid identifier.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n pub struct BlockSetId(NonZeroU32);\n \n@@ -116,8 +117,8 @@ pub struct Thread<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n-    /// Check if the thread terminated. If yes, change the state to terminated\n-    /// and return `true`.\n+    /// Check if the thread is done executing (no more stack frames). If yes,\n+    /// change the state to terminated and return `true`.\n     fn check_terminated(&mut self) -> bool {\n         if self.state == ThreadState::Enabled {\n             if self.stack.is_empty() {\n@@ -174,6 +175,7 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n         let mut threads = IndexVec::new();\n         // Create the main thread and add it to the list of threads.\n         let mut main_thread = Thread::default();\n+        // The main thread can *not* be joined on.\n         main_thread.join_status = ThreadJoinStatus::Detached;\n         threads.push(main_thread);\n         Self {\n@@ -282,7 +284,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n             self.threads\n                 .iter()\n                 .all(|thread| thread.state != ThreadState::BlockedOnJoin(joined_thread_id)),\n-            \"a joinable thread has threads waiting for its termination\"\n+            \"a joinable thread already has threads waiting for its termination\"\n         );\n         // Mark the joined thread as being joined so that we detect if other\n         // threads try to join it.\n@@ -349,7 +351,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     /// The currently implemented scheduling policy is the one that is commonly\n     /// used in stateless model checkers such as Loom: run the active thread as\n     /// long as we can and switch only when we have to (the active thread was\n-    /// blocked, terminated, or was explicitly asked to be preempted).\n+    /// blocked, terminated, or has explicitly asked to be preempted).\n     fn schedule(&mut self) -> InterpResult<'tcx, SchedulingAction> {\n         if self.threads[self.active_thread].check_terminated() {\n             // Check if we need to unblock any threads."}]}