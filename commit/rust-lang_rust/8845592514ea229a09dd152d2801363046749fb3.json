{"sha": "8845592514ea229a09dd152d2801363046749fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NDU1OTI1MTRlYTIyOWEwOWRkMTUyZDI4MDEzNjMwNDY3NDlmYjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-14T09:57:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-14T09:57:48Z"}, "message": "Rollup merge of #33572 - nagisa:assoc-const-types, r=eddyb\n\nSupport references to outer type params for assoc consts\n\nFixes #28809\n\nr? @eddyb", "tree": {"sha": "2d23520cedafa4a24a5836c6b7cbf6c92fff73a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d23520cedafa4a24a5836c6b7cbf6c92fff73a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8845592514ea229a09dd152d2801363046749fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8845592514ea229a09dd152d2801363046749fb3", "html_url": "https://github.com/rust-lang/rust/commit/8845592514ea229a09dd152d2801363046749fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8845592514ea229a09dd152d2801363046749fb3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ca82aa17bb01927bb66a31ec817b0f39509c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ca82aa17bb01927bb66a31ec817b0f39509c4d", "html_url": "https://github.com/rust-lang/rust/commit/25ca82aa17bb01927bb66a31ec817b0f39509c4d"}, {"sha": "d3218fae7b5a4a0ba9b02903dc12d36ff94a1388", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3218fae7b5a4a0ba9b02903dc12d36ff94a1388", "html_url": "https://github.com/rust-lang/rust/commit/d3218fae7b5a4a0ba9b02903dc12d36ff94a1388"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "114e81721ab28df812b170c3ddd1f3b348867252", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8845592514ea229a09dd152d2801363046749fb3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8845592514ea229a09dd152d2801363046749fb3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8845592514ea229a09dd152d2801363046749fb3", "patch": "@@ -1260,7 +1260,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n         match tcx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n-                    hir::ImplItemKind::Type(_) => {\n+                    hir::ImplItemKind::Type(_) | hir::ImplItemKind::Const(_, _) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the impl\n                         let impl_id = tcx.map.get_parent(id);\n@@ -1272,15 +1272,6 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                                                             &predicates,\n                                                             tcx.region_maps.item_extent(id))\n                     }\n-                    hir::ImplItemKind::Const(_, _) => {\n-                        let def_id = tcx.map.local_def_id(id);\n-                        let scheme = tcx.lookup_item_type(def_id);\n-                        let predicates = tcx.lookup_predicates(def_id);\n-                        tcx.construct_parameter_environment(impl_item.span,\n-                                                            &scheme.generics,\n-                                                            &predicates,\n-                                                            tcx.region_maps.item_extent(id))\n-                    }\n                     hir::ImplItemKind::Method(_, ref body) => {\n                         let method_def_id = tcx.map.local_def_id(id);\n                         match tcx.impl_or_trait_item(method_def_id) {\n@@ -1303,7 +1294,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(ast_map::NodeTraitItem(trait_item)) => {\n                 match trait_item.node {\n-                    hir::TypeTraitItem(..) => {\n+                    hir::TypeTraitItem(..) | hir::ConstTraitItem(..) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the trait\n                         let trait_id = tcx.map.get_parent(id);\n@@ -1315,15 +1306,6 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                                                             &predicates,\n                                                             tcx.region_maps.item_extent(id))\n                     }\n-                    hir::ConstTraitItem(..) => {\n-                        let def_id = tcx.map.local_def_id(id);\n-                        let scheme = tcx.lookup_item_type(def_id);\n-                        let predicates = tcx.lookup_predicates(def_id);\n-                        tcx.construct_parameter_environment(trait_item.span,\n-                                                            &scheme.generics,\n-                                                            &predicates,\n-                                                            tcx.region_maps.item_extent(id))\n-                    }\n                     hir::MethodTraitItem(_, ref body) => {\n                         // Use call-site for extent (unless this is a\n                         // trait method with no default; then fallback"}, {"sha": "a1a966ea65a151b52022b14877d41ccb457c85ab", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8845592514ea229a09dd152d2801363046749fb3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8845592514ea229a09dd152d2801363046749fb3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8845592514ea229a09dd152d2801363046749fb3", "patch": "@@ -1949,9 +1949,7 @@ impl<'a> Resolver<'a> {\n                                     this.check_trait_item(impl_item.ident.name,\n                                                           impl_item.span,\n                                         |n, s| ResolutionError::ConstNotMemberOfTrait(n, s));\n-                                    this.with_constant_rib(|this| {\n-                                        visit::walk_impl_item(this, impl_item);\n-                                    });\n+                                    visit::walk_impl_item(this, impl_item);\n                                 }\n                                 ImplItemKind::Method(ref sig, _) => {\n                                     // If this is a trait impl, ensure the method"}, {"sha": "8f9e44c1365a66963238f29bf88011a4a8cee880", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8845592514ea229a09dd152d2801363046749fb3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8845592514ea229a09dd152d2801363046749fb3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8845592514ea229a09dd152d2801363046749fb3", "patch": "@@ -1153,7 +1153,8 @@ fn check_const<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                         sp: Span,\n                         e: &'tcx hir::Expr,\n                         id: ast::NodeId) {\n-    ccx.inherited(None).enter(|inh| {\n+    let param_env = ParameterEnvironment::for_item(ccx.tcx, id);\n+    ccx.inherited(Some(param_env)).enter(|inh| {\n         let rty = ccx.tcx.node_id_to_type(id);\n         let fcx = FnCtxt::new(&inh, ty::FnConverging(rty), e.id);\n         let declty = fcx.tcx.lookup_item_type(ccx.tcx.map.local_def_id(id)).ty;"}, {"sha": "a603b225132d45ecfade7dd0abf54f1141eaa5a6", "filename": "src/test/run-pass/associated-const-outer-ty-refs.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8845592514ea229a09dd152d2801363046749fb3/src%2Ftest%2Frun-pass%2Fassociated-const-outer-ty-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8845592514ea229a09dd152d2801363046749fb3/src%2Ftest%2Frun-pass%2Fassociated-const-outer-ty-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-outer-ty-refs.rs?ref=8845592514ea229a09dd152d2801363046749fb3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(associated_consts)]\n+\n+trait Lattice {\n+    const BOTTOM: Self;\n+}\n+\n+// FIXME(#33573): this should work without the 'static lifetime bound.\n+impl<T: 'static> Lattice for Option<T> {\n+    const BOTTOM: Option<T> = None;\n+}\n+\n+fn main(){}"}]}