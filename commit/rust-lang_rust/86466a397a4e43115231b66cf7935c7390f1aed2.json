{"sha": "86466a397a4e43115231b66cf7935c7390f1aed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDY2YTM5N2E0ZTQzMTE1MjMxYjY2Y2Y3OTM1YzczOTBmMWFlZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T23:42:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T23:42:41Z"}, "message": "Auto merge of #58981 - estebank:elseless-if, r=davidtwco\n\nPoint at coercion reason for `if` expressions without else clause if caused by return type\n\n```\nerror[E0317]: if may be missing an else clause\n  --> $DIR/if-without-else-as-fn-expr.rs:2:5\n   |\nLL |   fn foo(bar: usize) -> usize {\n   |                         ----- found `usize` because of this return type\nLL | /     if bar % 5 == 0 {\nLL | |         return 3;\nLL | |     }\n   | |_____^ expected (), found usize\n   |\n   = note: expected type `()`\n              found type `usize`\n   = note: `if` expressions without `else` must evaluate to `()`\n```\n\nFix #25228.", "tree": {"sha": "3716d9582b7fb543cef75e9b6be79cde5574425f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3716d9582b7fb543cef75e9b6be79cde5574425f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86466a397a4e43115231b66cf7935c7390f1aed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86466a397a4e43115231b66cf7935c7390f1aed2", "html_url": "https://github.com/rust-lang/rust/commit/86466a397a4e43115231b66cf7935c7390f1aed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86466a397a4e43115231b66cf7935c7390f1aed2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fd0458951a4ff91c03366445f0e2e93b86bd2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fd0458951a4ff91c03366445f0e2e93b86bd2f", "html_url": "https://github.com/rust-lang/rust/commit/94fd0458951a4ff91c03366445f0e2e93b86bd2f"}, {"sha": "dcaec88a57cd0f388af1678f8db155b2add8b175", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaec88a57cd0f388af1678f8db155b2add8b175", "html_url": "https://github.com/rust-lang/rust/commit/dcaec88a57cd0f388af1678f8db155b2add8b175"}], "stats": {"total": 138, "additions": 135, "deletions": 3}, "files": [{"sha": "899bb6f8012dada9666acc320fec65c326367023", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=86466a397a4e43115231b66cf7935c7390f1aed2", "patch": "@@ -3463,8 +3463,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // We won't diverge unless both branches do (or the condition does).\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n         } else {\n+            // If this `if` expr is the parent's function return expr, the cause of the type\n+            // coercion is the return type, point at it. (#25228)\n+            let ret_reason = self.maybe_get_coercion_reason(then_expr.hir_id, sp);\n+\n             let else_cause = self.cause(sp, ObligationCauseCode::IfExpressionWithNoElse);\n-            coerce.coerce_forced_unit(self, &else_cause, &mut |_| (), true);\n+            coerce.coerce_forced_unit(self, &else_cause, &mut |err| {\n+                if let Some((sp, msg)) = &ret_reason {\n+                    err.span_label(*sp, msg.as_str());\n+                } else if let ExprKind::Block(block, _) = &then_expr.node {\n+                    if let Some(expr) = &block.expr {\n+                        err.span_label(expr.span, \"found here\".to_string());\n+                    }\n+                }\n+                err.note(\"`if` expressions without `else` evaluate to `()`\");\n+                err.help(\"consider adding an `else` block that evaluates to the expected type\");\n+            }, ret_reason.is_none());\n \n             // If the condition is false we can't diverge.\n             self.diverges.set(cond_diverges);\n@@ -3478,6 +3492,37 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n+        let node = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_node_by_hir_id(\n+            self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n+        ));\n+        if let Node::Block(block) = node {\n+            // check that the body's parent is an fn\n+            let parent = self.tcx.hir().get_by_hir_id(\n+                self.tcx.hir().get_parent_node_by_hir_id(\n+                    self.tcx.hir().get_parent_node_by_hir_id(block.hir_id),\n+                ),\n+            );\n+            if let (Some(expr), Node::Item(hir::Item {\n+                node: hir::ItemKind::Fn(..), ..\n+            })) = (&block.expr, parent) {\n+                // check that the `if` expr without `else` is the fn body's expr\n+                if expr.span == sp {\n+                    return self.get_fn_decl(hir_id).map(|(fn_decl, _)| (\n+                        fn_decl.output.span(),\n+                        format!(\"expected `{}` because of this return type\", fn_decl.output),\n+                    ));\n+                }\n+            }\n+        }\n+        if let Node::Local(hir::Local {\n+            ty: Some(_), pat, ..\n+        }) = node {\n+            return Some((pat.span, \"expected because of this assignment\".to_string()));\n+        }\n+        None\n+    }\n+\n     // Check field access expressions\n     fn check_field(&self,\n                    expr: &'gcx hir::Expr,"}, {"sha": "67e4445629f8caa044d2c2bd25b6051168d34e14", "filename": "src/test/ui/if/if-without-else-as-fn-expr.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs?ref=86466a397a4e43115231b66cf7935c7390f1aed2", "patch": "@@ -0,0 +1,25 @@\n+fn foo(bar: usize) -> usize {\n+    if bar % 5 == 0 {\n+        return 3;\n+    }\n+    //~^^^ ERROR if may be missing an else clause\n+}\n+\n+fn foo2(bar: usize) -> usize {\n+    let x: usize = if bar % 5 == 0 {\n+        return 3;\n+    };\n+    //~^^^ ERROR if may be missing an else clause\n+    x\n+}\n+\n+fn foo3(bar: usize) -> usize {\n+    if bar % 5 == 0 {\n+        3\n+    }\n+    //~^^^ ERROR if may be missing an else clause\n+}\n+\n+fn main() {\n+    let _ = foo(1);\n+}"}, {"sha": "0ba72726ca78795807758c74146bb5ffa44189b3", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=86466a397a4e43115231b66cf7935c7390f1aed2", "patch": "@@ -0,0 +1,49 @@\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:2:5\n+   |\n+LL |   fn foo(bar: usize) -> usize {\n+   |                         ----- expected `usize` because of this return type\n+LL | /     if bar % 5 == 0 {\n+LL | |         return 3;\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:9:20\n+   |\n+LL |       let x: usize = if bar % 5 == 0 {\n+   |  _________-__________^\n+   | |         |\n+   | |         expected because of this assignment\n+LL | |         return 3;\n+LL | |     };\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:17:5\n+   |\n+LL |   fn foo3(bar: usize) -> usize {\n+   |                          ----- expected `usize` because of this return type\n+LL | /     if bar % 5 == 0 {\n+LL | |         3\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0317`."}, {"sha": "ddb013ab711fad05b9059373b8346a849e0de772", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=86466a397a4e43115231b66cf7935c7390f1aed2", "patch": "@@ -2,10 +2,15 @@ error[E0317]: if may be missing an else clause\n   --> $DIR/if-without-else-result.rs:2:13\n    |\n LL |     let a = if true { true };\n-   |             ^^^^^^^^^^^^^^^^ expected (), found bool\n+   |             ^^^^^^^^^^----^^\n+   |             |         |\n+   |             |         found here\n+   |             expected (), found bool\n    |\n    = note: expected type `()`\n               found type `bool`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n \n error: aborting due to previous error\n "}, {"sha": "dd76faef5c7a697d81919da4c07667bf3b6f4003", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=86466a397a4e43115231b66cf7935c7390f1aed2", "patch": "@@ -8,11 +8,14 @@ LL | |\n LL | |\n LL | |\n LL | |         1\n+   | |         - found here\n LL | |     };\n    | |_____^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n \n error: aborting due to previous error\n "}, {"sha": "0c3ba2ea4f94dabe1d95ab15c10e7ad590f6cefb", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86466a397a4e43115231b66cf7935c7390f1aed2/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=86466a397a4e43115231b66cf7935c7390f1aed2", "patch": "@@ -2,10 +2,15 @@ error[E0317]: if may be missing an else clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n LL |         Drop = assert_eq!(1, 1)\n-   |                ^^^^^^^^^^^^^^^^ expected (), found isize\n+   |                ^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected (), found isize\n+   |                found here\n    |\n    = note: expected type `()`\n               found type `isize`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}]}