{"sha": "5e5a3d58678d70ad49b87251a12d11dea52e69b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNWEzZDU4Njc4ZDcwYWQ0OWI4NzI1MWExMmQxMWRlYTUyZTY5YjA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-05-29T18:04:03Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-05-30T03:41:47Z"}, "message": "Use the virtual name for libstd files in StableSourceFileId and also in the\nencoded build artifacts.\n\nFix #70924.", "tree": {"sha": "79e8c9758b0925dad40b918ea919954d581937ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e8c9758b0925dad40b918ea919954d581937ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e5a3d58678d70ad49b87251a12d11dea52e69b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5a3d58678d70ad49b87251a12d11dea52e69b0", "html_url": "https://github.com/rust-lang/rust/commit/5e5a3d58678d70ad49b87251a12d11dea52e69b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e5a3d58678d70ad49b87251a12d11dea52e69b0/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da09fd3db0c71680e16311140d07e8f1e079af82", "url": "https://api.github.com/repos/rust-lang/rust/commits/da09fd3db0c71680e16311140d07e8f1e079af82", "html_url": "https://github.com/rust-lang/rust/commit/da09fd3db0c71680e16311140d07e8f1e079af82"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "9964c9c94c9510594f7c4337c676031805661a03", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a3d58678d70ad49b87251a12d11dea52e69b0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a3d58678d70ad49b87251a12d11dea52e69b0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=5e5a3d58678d70ad49b87251a12d11dea52e69b0", "patch": "@@ -396,7 +396,7 @@ impl<'tcx> EncodeContext<'tcx> {\n                     // any relative paths are potentially relative to a\n                     // wrong directory.\n                     FileName::Real(ref name) => {\n-                        let name = name.local_path();\n+                        let name = name.stable_name();\n                         let mut adapted = (**source_file).clone();\n                         adapted.name = Path::new(&working_dir).join(name).into();\n                         adapted.name_hash = {"}, {"sha": "e17fe1fa782cbe1c1dee94c4d7f651af53266fa7", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a3d58678d70ad49b87251a12d11dea52e69b0/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a3d58678d70ad49b87251a12d11dea52e69b0/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=5e5a3d58678d70ad49b87251a12d11dea52e69b0", "patch": "@@ -99,6 +99,7 @@ pub enum RealFileName {\n \n impl RealFileName {\n     /// Returns the path suitable for reading from the file system on the local host.\n+    /// Avoid embedding this in build artifacts; see `stable_name` for that.\n     pub fn local_path(&self) -> &Path {\n         match self {\n             RealFileName::Named(p)\n@@ -107,12 +108,24 @@ impl RealFileName {\n     }\n \n     /// Returns the path suitable for reading from the file system on the local host.\n+    /// Avoid embedding this in build artifacts; see `stable_name` for that.\n     pub fn into_local_path(self) -> PathBuf {\n         match self {\n             RealFileName::Named(p)\n             | RealFileName::Devirtualized { local_path: p, virtual_name: _ } => p,\n         }\n     }\n+\n+    /// Returns the path suitable for embedding into build artifacts. Note that\n+    /// a virtualized path will not correspond to a valid file system path; see\n+    /// `local_path` for something that is more likely to return paths into the\n+    /// local host file system.\n+    pub fn stable_name(&self) -> &Path {\n+        match self {\n+            RealFileName::Named(p)\n+            | RealFileName::Devirtualized { local_path: _, virtual_name: p } => &p,\n+        }\n+    }\n }\n \n /// Differentiates between real files and common virtual files."}, {"sha": "c33c1dd29cb72a935c3ecf8960b8d46e317e9dc1", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a3d58678d70ad49b87251a12d11dea52e69b0/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a3d58678d70ad49b87251a12d11dea52e69b0/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=5e5a3d58678d70ad49b87251a12d11dea52e69b0", "patch": "@@ -86,6 +86,8 @@ impl FileLoader for RealFileLoader {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub struct StableSourceFileId(u128);\n \n+// FIXME: we need a more globally consistent approach to the problem solved by\n+// StableSourceFileId, perhaps built atop source_file.name_hash.\n impl StableSourceFileId {\n     pub fn new(source_file: &SourceFile) -> StableSourceFileId {\n         StableSourceFileId::new_from_pieces(\n@@ -102,7 +104,14 @@ impl StableSourceFileId {\n     ) -> StableSourceFileId {\n         let mut hasher = StableHasher::new();\n \n-        name.hash(&mut hasher);\n+        if let FileName::Real(real_name) = name {\n+            // rust-lang/rust#70924: Use the stable (virtualized) name when\n+            // available. (We do not want artifacts from transient file system\n+            // paths for libstd to leak into our build artifacts.)\n+            real_name.stable_name().hash(&mut hasher)\n+        } else {\n+            name.hash(&mut hasher);\n+        }\n         name_was_remapped.hash(&mut hasher);\n         unmapped_path.hash(&mut hasher);\n "}]}