{"sha": "22d21ab4c28f1023d55ced53746daf7a69b7559d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDIxYWI0YzI4ZjEwMjNkNTVjZWQ1Mzc0NmRhZjdhNjliNzU1OWQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-17T17:18:09Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-05T19:01:37Z"}, "message": "rename repr to name", "tree": {"sha": "cdc7f652c2d47a6d344b98359dbdbaf1216fd946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdc7f652c2d47a6d344b98359dbdbaf1216fd946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d21ab4c28f1023d55ced53746daf7a69b7559d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d21ab4c28f1023d55ced53746daf7a69b7559d", "html_url": "https://github.com/rust-lang/rust/commit/22d21ab4c28f1023d55ced53746daf7a69b7559d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d21ab4c28f1023d55ced53746daf7a69b7559d/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7266981b4cd9a593bf64ba3e91f724f998e18786", "url": "https://api.github.com/repos/rust-lang/rust/commits/7266981b4cd9a593bf64ba3e91f724f998e18786", "html_url": "https://github.com/rust-lang/rust/commit/7266981b4cd9a593bf64ba3e91f724f998e18786"}], "stats": {"total": 218, "additions": 109, "deletions": 109}, "files": [{"sha": "8f72d302bef686398707a60de94fab4b79505ce2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -734,7 +734,7 @@ pub fn mangle_internal_name_by_path(ccx: @CrateContext, path: path) -> ~str {\n }\n \n pub fn mangle_internal_name_by_seq(ccx: @CrateContext, flav: &str) -> ~str {\n-    return fmt!(\"%s_%u\", flav, (ccx.names)(flav).repr);\n+    return fmt!(\"%s_%u\", flav, (ccx.names)(flav).name);\n }\n \n "}, {"sha": "c923c49decccee85cc124b153a4b1c16116ee9ca", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -61,7 +61,7 @@ pub fn new_namegen(intr: @ident_interner) -> namegen {\n     let f: @fn(s: &str) -> ident = |prefix| {\n         intr.gensym(fmt!(\"%s_%u\",\n                           prefix,\n-                          intr.gensym(prefix).repr))\n+                          intr.gensym(prefix).name))\n     };\n     f\n }\n@@ -1195,7 +1195,7 @@ pub fn C_cstr(cx: @CrateContext, s: @~str) -> ValueRef {\n             llvm::LLVMConstString(buf, s.len() as c_uint, False)\n         };\n         let g =\n-            str::as_c_str(fmt!(\"str%u\", (cx.names)(\"str\").repr),\n+            str::as_c_str(fmt!(\"str%u\", (cx.names)(\"str\").name),\n                         |buf| llvm::LLVMAddGlobal(cx.llmod, val_ty(sc), buf));\n         llvm::LLVMSetInitializer(g, sc);\n         llvm::LLVMSetGlobalConstant(g, True);\n@@ -1287,7 +1287,7 @@ pub fn C_bytes_plus_null(bytes: &[u8]) -> ValueRef {\n pub fn C_shape(ccx: @CrateContext, bytes: ~[u8]) -> ValueRef {\n     unsafe {\n         let llshape = C_bytes_plus_null(bytes);\n-        let name = fmt!(\"shape%u\", (ccx.names)(\"shape\").repr);\n+        let name = fmt!(\"shape%u\", (ccx.names)(\"shape\").name);\n         let llglobal = str::as_c_str(name, |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape), buf)\n         });"}, {"sha": "01f0bb94b3150e9066424fa41b9fcad31dbdbf72", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -2678,7 +2678,7 @@ impl cmp::TotalOrd for bound_region {\n             (&ty::br_anon(ref a1), &ty::br_anon(ref a2)) => a1.cmp(a2),\n             (&ty::br_anon(*), _) => cmp::Less,\n \n-            (&ty::br_named(ref a1), &ty::br_named(ref a2)) => a1.repr.cmp(&a2.repr),\n+            (&ty::br_named(ref a1), &ty::br_named(ref a2)) => a1.name.cmp(&a2.name),\n             (&ty::br_named(*), _) => cmp::Less,\n \n             (&ty::br_cap_avoid(ref a1, @ref b1),"}, {"sha": "523e4fd83328111bb2f8f6b8dbcf185f6ee3a36a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -25,12 +25,12 @@ use core::to_str::ToStr;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n \n-// an identifier contains an index into the interner\n-// table and a SyntaxContext to track renaming and\n+// an identifier contains a Name (index into the interner\n+// table) and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n #[deriving(Eq)]\n-pub struct ident { repr: Name, ctxt: SyntaxContext }\n+pub struct ident { name: Name, ctxt: SyntaxContext }\n \n // a SyntaxContext represents a chain of macro-expandings\n // and renamings. Each macro expansion corresponds to\n@@ -96,7 +96,7 @@ impl<D:Decoder> Decodable<D> for ident {\n impl to_bytes::IterBytes for ident {\n     #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        self.repr.iter_bytes(lsb0, f)\n+        self.name.iter_bytes(lsb0, f)\n     }\n }\n "}, {"sha": "446610d987df9fd52cfb1a695e56d77f63fc2468", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -620,8 +620,8 @@ pub enum Privacy {\n \n // HYGIENE FUNCTIONS\n \n-/// Construct an identifier with the given repr and an empty context:\n-pub fn new_ident(repr: uint) -> ident { ident {repr: repr, ctxt: 0}}\n+/// Construct an identifier with the given name and an empty context:\n+pub fn new_ident(name: Name) -> ident { ident {name: name, ctxt: 0}}\n \n /// Extend a syntax context with a given mark\n pub fn new_mark (m:Mrk, tail:SyntaxContext,table:&mut SCTable)\n@@ -686,14 +686,14 @@ fn idx_push<T>(vec: &mut ~[T], val: T) -> uint {\n /// Resolve a syntax object to a name, per MTWT.\n pub fn resolve (id : ident, table : &mut SCTable) -> Name {\n     match table.table[id.ctxt] {\n-        EmptyCtxt => id.repr,\n+        EmptyCtxt => id.name,\n         // ignore marks here:\n-        Mark(_,subctxt) => resolve (ident{repr:id.repr, ctxt: subctxt},table),\n+        Mark(_,subctxt) => resolve (ident{name:id.name, ctxt: subctxt},table),\n         // do the rename if necessary:\n-        Rename(ident{repr,ctxt},toname,subctxt) => {\n+        Rename(ident{name,ctxt},toname,subctxt) => {\n             // this could be cached or computed eagerly:\n-            let resolvedfrom = resolve(ident{repr:repr,ctxt:ctxt},table);\n-            let resolvedthis = resolve(ident{repr:id.repr,ctxt:subctxt},table);\n+            let resolvedfrom = resolve(ident{name:name,ctxt:ctxt},table);\n+            let resolvedthis = resolve(ident{name:id.name,ctxt:subctxt},table);\n             if ((resolvedthis == resolvedfrom)\n                 && (marksof (ctxt,resolvedthis,table)\n                     == marksof (subctxt,resolvedthis,table))) {\n@@ -777,11 +777,11 @@ mod test {\n     // convert a list of uints to an @~[ident]\n     // (ignores the interner completely)\n     fn uints_to_idents (uints: &~[uint]) -> @~[ident] {\n-        @uints.map(|u|{ ident {repr:*u, ctxt: empty_ctxt} })\n+        @uints.map(|u|{ ident {name:*u, ctxt: empty_ctxt} })\n     }\n \n     fn id (u : uint, s: SyntaxContext) -> ident {\n-        ident{repr:u, ctxt: s}\n+        ident{name:u, ctxt: s}\n     }\n \n     // because of the SCTable, I now need a tidy way of"}, {"sha": "d42ca684ec004b8a2831f2ba9d5c23f1d4e3c0f0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -52,7 +52,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                     let extname = pth.idents[0];\n                     let extnamestr = get_ident_interner().get(extname);\n                     // leaving explicit deref here to highlight unbox op:\n-                    match (*extsbox).find(&extname.repr) {\n+                    match (*extsbox).find(&extname.name) {\n                         None => {\n                             cx.span_fatal(\n                                 pth.span,\n@@ -219,7 +219,7 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n     let extname = pth.idents[0];\n     let interner = get_ident_interner();\n     let extnamestr = interner.get(extname);\n-    let expanded = match (*extsbox).find(&extname.repr) {\n+    let expanded = match (*extsbox).find(&extname.name) {\n         None => cx.span_fatal(pth.span,\n                               fmt!(\"macro undefined: '%s!'\", *extnamestr)),\n \n@@ -317,7 +317,7 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n     }\n     let extname = pth.idents[0];\n     let extnamestr = get_ident_interner().get(extname);\n-    let (fully_expanded, sp) = match (*extsbox).find(&extname.repr) {\n+    let (fully_expanded, sp) = match (*extsbox).find(&extname.name) {\n         None =>\n             cx.span_fatal(pth.span, fmt!(\"macro undefined: '%s'\", *extnamestr)),\n \n@@ -391,7 +391,7 @@ fn renames_to_fold(renames : @mut ~[(ast::ident,ast::Name)]) -> @ast_fold {\n             let new_ctxt = renames.foldl(id.ctxt,|ctxt,&(from,to)| {\n                 new_rename(from,to,*ctxt,table)\n             });\n-            ast::ident{repr:id.repr,ctxt:new_ctxt}\n+            ast::ident{name:id.name,ctxt:new_ctxt}\n         },\n         .. *afp\n     };\n@@ -697,7 +697,7 @@ pub fn new_ident_renamer(from: ast::ident,\n     @fn(ast::ident)->ast::ident {\n     |id : ast::ident|\n     ast::ident{\n-        repr: id.repr,\n+        name: id.name,\n         ctxt: new_rename(from,to,id.ctxt,table)\n     }\n }\n@@ -709,7 +709,7 @@ pub fn new_ident_marker(mark: uint,\n     @fn(ast::ident)->ast::ident {\n     |id : ast::ident|\n     ast::ident{\n-        repr: id.repr,\n+        name: id.name,\n         ctxt: new_mark(mark,id.ctxt,table)\n     }\n }\n@@ -720,7 +720,7 @@ pub fn new_ident_resolver(table: @mut SCTable) ->\n     @fn(ast::ident)->ast::ident {\n     |id : ast::ident|\n     ast::ident {\n-        repr : resolve(id,table),\n+        name : resolve(id,table),\n         ctxt : illegal_ctxt\n     }\n }\n@@ -848,8 +848,8 @@ mod test {\n         };\n         let table = @mut new_sctable();\n         let a_name = 100; // enforced by testing_interner\n-        let a2_name = sess.interner.gensym(\"a2\").repr;\n-        let renamer = new_ident_renamer(ast::ident{repr:a_name,ctxt:empty_ctxt},\n+        let a2_name = sess.interner.gensym(\"a2\").name;\n+        let renamer = new_ident_renamer(ast::ident{name:a_name,ctxt:empty_ctxt},\n                                         a2_name,table);\n         let renamed_ast = fun_to_ident_folder(renamer).fold_item(item_ast).get();\n         let resolver = new_ident_resolver(table);"}, {"sha": "4914aa3fceb8cd08d3b541e4bfaf07d09023ebd6", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -142,7 +142,7 @@ impl Parser {\n     // true. Otherwise, return false.\n     pub fn eat_keyword(&self, kw: keywords::Keyword) -> bool {\n         let is_kw = match *self.token {\n-            token::IDENT(sid, false) => kw.to_ident().repr == sid.repr,\n+            token::IDENT(sid, false) => kw.to_ident().name == sid.name,\n             _ => false\n         };\n         if is_kw { self.bump() }"}, {"sha": "b5882a71dd35b9293da5c82a95002c55fd55e2fd", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d21ab4c28f1023d55ced53746daf7a69b7559d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=22d21ab4c28f1023d55ced53746daf7a69b7559d", "patch": "@@ -304,47 +304,47 @@ pub fn is_bar(t: &Token) -> bool {\n pub mod special_idents {\n     use ast::ident;\n \n-    pub static underscore : ident = ident { repr: 0, ctxt: 0};\n-    pub static anon : ident = ident { repr: 1, ctxt: 0};\n-    pub static invalid : ident = ident { repr: 2, ctxt: 0}; // ''\n-    pub static unary : ident = ident { repr: 3, ctxt: 0};\n-    pub static not_fn : ident = ident { repr: 4, ctxt: 0};\n-    pub static idx_fn : ident = ident { repr: 5, ctxt: 0};\n-    pub static unary_minus_fn : ident = ident { repr: 6, ctxt: 0};\n-    pub static clownshoes_extensions : ident = ident { repr: 7, ctxt: 0};\n+    pub static underscore : ident = ident { name: 0, ctxt: 0};\n+    pub static anon : ident = ident { name: 1, ctxt: 0};\n+    pub static invalid : ident = ident { name: 2, ctxt: 0}; // ''\n+    pub static unary : ident = ident { name: 3, ctxt: 0};\n+    pub static not_fn : ident = ident { name: 4, ctxt: 0};\n+    pub static idx_fn : ident = ident { name: 5, ctxt: 0};\n+    pub static unary_minus_fn : ident = ident { name: 6, ctxt: 0};\n+    pub static clownshoes_extensions : ident = ident { name: 7, ctxt: 0};\n \n-    pub static self_ : ident = ident { repr: 8, ctxt: 0}; // 'self'\n+    pub static self_ : ident = ident { name: 8, ctxt: 0}; // 'self'\n \n     /* for matcher NTs */\n-    pub static item : ident = ident { repr: 9, ctxt: 0};\n-    pub static block : ident = ident { repr: 10, ctxt: 0};\n-    pub static stmt : ident = ident { repr: 11, ctxt: 0};\n-    pub static pat : ident = ident { repr: 12, ctxt: 0};\n-    pub static expr : ident = ident { repr: 13, ctxt: 0};\n-    pub static ty : ident = ident { repr: 14, ctxt: 0};\n-    pub static ident : ident = ident { repr: 15, ctxt: 0};\n-    pub static path : ident = ident { repr: 16, ctxt: 0};\n-    pub static tt : ident = ident { repr: 17, ctxt: 0};\n-    pub static matchers : ident = ident { repr: 18, ctxt: 0};\n-\n-    pub static str : ident = ident { repr: 19, ctxt: 0}; // for the type\n+    pub static item : ident = ident { name: 9, ctxt: 0};\n+    pub static block : ident = ident { name: 10, ctxt: 0};\n+    pub static stmt : ident = ident { name: 11, ctxt: 0};\n+    pub static pat : ident = ident { name: 12, ctxt: 0};\n+    pub static expr : ident = ident { name: 13, ctxt: 0};\n+    pub static ty : ident = ident { name: 14, ctxt: 0};\n+    pub static ident : ident = ident { name: 15, ctxt: 0};\n+    pub static path : ident = ident { name: 16, ctxt: 0};\n+    pub static tt : ident = ident { name: 17, ctxt: 0};\n+    pub static matchers : ident = ident { name: 18, ctxt: 0};\n+\n+    pub static str : ident = ident { name: 19, ctxt: 0}; // for the type\n \n     /* outside of libsyntax */\n-    pub static ty_visitor : ident = ident { repr: 20, ctxt: 0};\n-    pub static arg : ident = ident { repr: 21, ctxt: 0};\n-    pub static descrim : ident = ident { repr: 22, ctxt: 0};\n-    pub static clownshoe_abi : ident = ident { repr: 23, ctxt: 0};\n-    pub static clownshoe_stack_shim : ident = ident { repr: 24, ctxt: 0};\n-    pub static tydesc : ident = ident { repr: 25, ctxt: 0};\n-    pub static main : ident = ident { repr: 26, ctxt: 0};\n-    pub static opaque : ident = ident { repr: 27, ctxt: 0};\n-    pub static blk : ident = ident { repr: 28, ctxt: 0};\n-    pub static statik : ident = ident { repr: 29, ctxt: 0};\n-    pub static intrinsic : ident = ident { repr: 30, ctxt: 0};\n-    pub static clownshoes_foreign_mod: ident = ident { repr: 31, ctxt: 0};\n-    pub static unnamed_field: ident = ident { repr: 32, ctxt: 0};\n-    pub static c_abi: ident = ident { repr: 33, ctxt: 0};\n-    pub static type_self: ident = ident { repr: 34, ctxt: 0};    // `Self`\n+    pub static ty_visitor : ident = ident { name: 20, ctxt: 0};\n+    pub static arg : ident = ident { name: 21, ctxt: 0};\n+    pub static descrim : ident = ident { name: 22, ctxt: 0};\n+    pub static clownshoe_abi : ident = ident { name: 23, ctxt: 0};\n+    pub static clownshoe_stack_shim : ident = ident { name: 24, ctxt: 0};\n+    pub static tydesc : ident = ident { name: 25, ctxt: 0};\n+    pub static main : ident = ident { name: 26, ctxt: 0};\n+    pub static opaque : ident = ident { name: 27, ctxt: 0};\n+    pub static blk : ident = ident { name: 28, ctxt: 0};\n+    pub static statik : ident = ident { name: 29, ctxt: 0};\n+    pub static intrinsic : ident = ident { name: 30, ctxt: 0};\n+    pub static clownshoes_foreign_mod: ident = ident { name: 31, ctxt: 0};\n+    pub static unnamed_field: ident = ident { name: 32, ctxt: 0};\n+    pub static c_abi: ident = ident { name: 33, ctxt: 0};\n+    pub static type_self: ident = ident { name: 34, ctxt: 0};    // `Self`\n }\n \n pub struct StringRef<'self>(&'self str);\n@@ -397,13 +397,13 @@ impl ident_interner {\n     // I'm torn as to whether these should produce idents or\n     // just uints.\n     pub fn intern(&self, val: &str) -> ast::ident {\n-        ast::ident { repr: self.interner.intern(val), ctxt: 0 }\n+        ast::ident { name: self.interner.intern(val), ctxt: 0 }\n     }\n     pub fn gensym(&self, val: &str) -> ast::ident {\n-        ast::ident { repr: self.interner.gensym(val), ctxt: 0 }\n+        ast::ident { name: self.interner.gensym(val), ctxt: 0 }\n     }\n     pub fn get(&self, idx: ast::ident) -> @~str {\n-        self.interner.get(idx.repr)\n+        self.interner.get(idx.name)\n     }\n     pub fn len(&self) -> uint {\n         self.interner.len()\n@@ -412,7 +412,7 @@ impl ident_interner {\n                         IterBytes +\n                         Equiv<@~str>>(&self, val: &Q) -> Option<ast::ident> {\n         match self.interner.find_equiv(val) {\n-            Some(v) => Some(ast::ident { repr: v, ctxt: 0 }),\n+            Some(v) => Some(ast::ident { name: v, ctxt: 0 }),\n             None => None,\n         }\n     }\n@@ -534,7 +534,7 @@ pub fn mk_fake_ident_interner() -> @ident_interner {\n // maps a string to its interned representation\n pub fn intern(str : &str) -> uint {\n     let interner = get_ident_interner();\n-    interner.intern(str).repr\n+    interner.intern(str).name\n }\n \n /**\n@@ -592,57 +592,57 @@ pub mod keywords {\n     impl Keyword {\n         pub fn to_ident(&self) -> ident {\n             match *self {\n-                As => ident { repr: 35, ctxt: 0 },\n-                   Break => ident { repr: 36, ctxt: 0 },\n-                   Const => ident { repr: 37, ctxt: 0 },\n-                   Copy => ident { repr: 38, ctxt: 0 },\n-                   Do => ident { repr: 39, ctxt: 0 },\n-                   Else => ident { repr: 41, ctxt: 0 },\n-                   Enum => ident { repr: 42, ctxt: 0 },\n-                   Extern => ident { repr: 43, ctxt: 0 },\n-                   False => ident { repr: 44, ctxt: 0 },\n-                   Fn => ident { repr: 45, ctxt: 0 },\n-                   For => ident { repr: 46, ctxt: 0 },\n-                   If => ident { repr: 47, ctxt: 0 },\n-                   Impl => ident { repr: 48, ctxt: 0 },\n-                   Let => ident { repr: 49, ctxt: 0 },\n-                   __Log => ident { repr: 50, ctxt: 0 },\n-                   Loop => ident { repr: 51, ctxt: 0 },\n-                   Match => ident { repr: 52, ctxt: 0 },\n-                   Mod => ident { repr: 53, ctxt: 0 },\n-                   Mut => ident { repr: 54, ctxt: 0 },\n-                   Once => ident { repr: 55, ctxt: 0 },\n-                   Priv => ident { repr: 56, ctxt: 0 },\n-                   Pub => ident { repr: 57, ctxt: 0 },\n-                   Pure => ident { repr: 58, ctxt: 0 },\n-                   Ref => ident { repr: 59, ctxt: 0 },\n-                   Return => ident { repr: 60, ctxt: 0 },\n-                   Static => ident { repr: 29, ctxt: 0 },\n-                   Self => ident { repr: 8, ctxt: 0 },\n-                   Struct => ident { repr: 61, ctxt: 0 },\n-                   Super => ident { repr: 62, ctxt: 0 },\n-                   True => ident { repr: 63, ctxt: 0 },\n-                   Trait => ident { repr: 64, ctxt: 0 },\n-                   Type => ident { repr: 65, ctxt: 0 },\n-                   Unsafe => ident { repr: 66, ctxt: 0 },\n-                   Use => ident { repr: 67, ctxt: 0 },\n-                   While => ident { repr: 68, ctxt: 0 },\n-                   Be => ident { repr: 69, ctxt: 0 },\n+                As => ident { name: 35, ctxt: 0 },\n+                   Break => ident { name: 36, ctxt: 0 },\n+                   Const => ident { name: 37, ctxt: 0 },\n+                   Copy => ident { name: 38, ctxt: 0 },\n+                   Do => ident { name: 39, ctxt: 0 },\n+                   Else => ident { name: 41, ctxt: 0 },\n+                   Enum => ident { name: 42, ctxt: 0 },\n+                   Extern => ident { name: 43, ctxt: 0 },\n+                   False => ident { name: 44, ctxt: 0 },\n+                   Fn => ident { name: 45, ctxt: 0 },\n+                   For => ident { name: 46, ctxt: 0 },\n+                   If => ident { name: 47, ctxt: 0 },\n+                   Impl => ident { name: 48, ctxt: 0 },\n+                   Let => ident { name: 49, ctxt: 0 },\n+                   __Log => ident { name: 50, ctxt: 0 },\n+                   Loop => ident { name: 51, ctxt: 0 },\n+                   Match => ident { name: 52, ctxt: 0 },\n+                   Mod => ident { name: 53, ctxt: 0 },\n+                   Mut => ident { name: 54, ctxt: 0 },\n+                   Once => ident { name: 55, ctxt: 0 },\n+                   Priv => ident { name: 56, ctxt: 0 },\n+                   Pub => ident { name: 57, ctxt: 0 },\n+                   Pure => ident { name: 58, ctxt: 0 },\n+                   Ref => ident { name: 59, ctxt: 0 },\n+                   Return => ident { name: 60, ctxt: 0 },\n+                   Static => ident { name: 29, ctxt: 0 },\n+                   Self => ident { name: 8, ctxt: 0 },\n+                   Struct => ident { name: 61, ctxt: 0 },\n+                   Super => ident { name: 62, ctxt: 0 },\n+                   True => ident { name: 63, ctxt: 0 },\n+                   Trait => ident { name: 64, ctxt: 0 },\n+                   Type => ident { name: 65, ctxt: 0 },\n+                   Unsafe => ident { name: 66, ctxt: 0 },\n+                   Use => ident { name: 67, ctxt: 0 },\n+                   While => ident { name: 68, ctxt: 0 },\n+                   Be => ident { name: 69, ctxt: 0 },\n             }\n         }\n     }\n }\n \n pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n     match *tok {\n-        token::IDENT(sid, false) => { kw.to_ident().repr == sid.repr }\n+        token::IDENT(sid, false) => { kw.to_ident().name == sid.name }\n         _ => { false }\n     }\n }\n \n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n-        token::IDENT(sid, false) => match sid.repr {\n+        token::IDENT(sid, false) => match sid.name {\n             8 | 29 | 35 .. 69 => true,\n             _ => false,\n         },\n@@ -652,7 +652,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n \n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n-        token::IDENT(sid, false) => match sid.repr {\n+        token::IDENT(sid, false) => match sid.name {\n             8 | 29 | 35 .. 68 => true,\n             _ => false,\n         },\n@@ -662,7 +662,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n \n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n-        token::IDENT(sid, false) => match sid.repr {\n+        token::IDENT(sid, false) => match sid.name {\n             69 => true,\n             _ => false,\n         },"}]}