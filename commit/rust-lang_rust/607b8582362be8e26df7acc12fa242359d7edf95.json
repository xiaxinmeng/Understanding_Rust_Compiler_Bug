{"sha": "607b8582362be8e26df7acc12fa242359d7edf95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwN2I4NTgyMzYyYmU4ZTI2ZGY3YWNjMTJmYTI0MjM1OWQ3ZWRmOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T09:50:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T09:50:30Z"}, "message": "Auto merge of #70803 - arlosi:hash-regression, r=eddyb\n\nFix performance regression in debuginfo file_metadata.\n\nFixes performance regression caused by #69718.\n\nFinding the `SourceFile` associated with a `FileName` called `get_source_file` on the `SourceMap`, which does a linear search through all files in the `SourceMap`.\n\nThis resolves the issue by passing the `SourceFile` in from the caller (which already had it available) instead of the `FileName`\n\nFixes #70785.", "tree": {"sha": "b1b7c9777d727e3581632cf2a101349bcee2e985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b7c9777d727e3581632cf2a101349bcee2e985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607b8582362be8e26df7acc12fa242359d7edf95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607b8582362be8e26df7acc12fa242359d7edf95", "html_url": "https://github.com/rust-lang/rust/commit/607b8582362be8e26df7acc12fa242359d7edf95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607b8582362be8e26df7acc12fa242359d7edf95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b657d340d715f48449189fea9d032350323a13f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b657d340d715f48449189fea9d032350323a13f", "html_url": "https://github.com/rust-lang/rust/commit/7b657d340d715f48449189fea9d032350323a13f"}, {"sha": "4cdceda5a355ab5c4732b425b4449d9707084fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cdceda5a355ab5c4732b425b4449d9707084fdc", "html_url": "https://github.com/rust-lang/rust/commit/4cdceda5a355ab5c4732b425b4449d9707084fdc"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "7f47b61de3f928277d0741f535c53961f3ad682a", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b8582362be8e26df7acc12fa242359d7edf95/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b8582362be8e26df7acc12fa242359d7edf95/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=607b8582362be8e26df7acc12fa242359d7edf95", "patch": "@@ -76,7 +76,7 @@ fn make_mir_scope(\n     }\n \n     let loc = cx.lookup_debug_loc(scope_data.span.lo());\n-    let file_metadata = file_metadata(cx, &loc.file.name, debug_context.defining_crate);\n+    let file_metadata = file_metadata(cx, &loc.file, debug_context.defining_crate);\n \n     let scope_metadata = unsafe {\n         Some(llvm::LLVMRustDIBuilderCreateLexicalBlock("}, {"sha": "82cd8589327470078847652b84390ab6667eaadf", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/607b8582362be8e26df7acc12fa242359d7edf95/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b8582362be8e26df7acc12fa242359d7edf95/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=607b8582362be8e26df7acc12fa242359d7edf95", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n-use rustc_span::{self, FileName, SourceFileHash, Span};\n+use rustc_span::{self, SourceFile, SourceFileHash, Span};\n use rustc_target::abi::{Abi, Align, DiscriminantKind, HasDataLayout, Integer, LayoutOf};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{Primitive, Size, VariantIdx, Variants};\n@@ -761,14 +761,13 @@ fn hex_encode(data: &[u8]) -> String {\n \n pub fn file_metadata(\n     cx: &CodegenCx<'ll, '_>,\n-    file_name: &FileName,\n+    source_file: &SourceFile,\n     defining_crate: CrateNum,\n ) -> &'ll DIFile {\n-    debug!(\"file_metadata: file_name: {}, defining_crate: {}\", file_name, defining_crate);\n+    debug!(\"file_metadata: file_name: {}, defining_crate: {}\", source_file.name, defining_crate);\n \n-    let source_file = cx.sess().source_map().get_source_file(file_name);\n-    let hash = source_file.as_ref().map(|f| &f.src_hash);\n-    let file_name = Some(file_name.to_string());\n+    let hash = Some(&source_file.src_hash);\n+    let file_name = Some(source_file.name.to_string());\n     let directory = if defining_crate == LOCAL_CRATE {\n         Some(cx.sess().working_dir.0.to_string_lossy().to_string())\n     } else {\n@@ -2331,7 +2330,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n \n     let (file_metadata, line_number) = if !span.is_dummy() {\n         let loc = cx.lookup_debug_loc(span.lo());\n-        (file_metadata(cx, &loc.file.name, LOCAL_CRATE), loc.line)\n+        (file_metadata(cx, &loc.file, LOCAL_CRATE), loc.line)\n     } else {\n         (unknown_file_metadata(cx), None)\n     };\n@@ -2440,6 +2439,6 @@ pub fn extend_scope_to_file(\n     file: &rustc_span::SourceFile,\n     defining_crate: CrateNum,\n ) -> &'ll DILexicalBlock {\n-    let file_metadata = file_metadata(cx, &file.name, defining_crate);\n+    let file_metadata = file_metadata(cx, &file, defining_crate);\n     unsafe { llvm::LLVMRustDIBuilderCreateLexicalBlockFile(DIB(cx), scope_metadata, file_metadata) }\n }"}, {"sha": "37f502c56a6d1aa321f697f00e4c274c2f0520aa", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b8582362be8e26df7acc12fa242359d7edf95/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b8582362be8e26df7acc12fa242359d7edf95/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=607b8582362be8e26df7acc12fa242359d7edf95", "patch": "@@ -249,7 +249,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let def_id = instance.def_id();\n         let containing_scope = get_containing_scope(self, instance);\n         let loc = self.lookup_debug_loc(span.lo());\n-        let file_metadata = file_metadata(self, &loc.file.name, def_id.krate);\n+        let file_metadata = file_metadata(self, &loc.file, def_id.krate);\n \n         let function_type_metadata = unsafe {\n             let fn_signature = get_function_signature(self, fn_abi);\n@@ -536,7 +536,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         span: Span,\n     ) -> &'ll DIVariable {\n         let loc = self.lookup_debug_loc(span.lo());\n-        let file_metadata = file_metadata(self, &loc.file.name, dbg_context.defining_crate);\n+        let file_metadata = file_metadata(self, &loc.file, dbg_context.defining_crate);\n \n         let type_metadata = type_metadata(self, variable_type, span);\n "}]}