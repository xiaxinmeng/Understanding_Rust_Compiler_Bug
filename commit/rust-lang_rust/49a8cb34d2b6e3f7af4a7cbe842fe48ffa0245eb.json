{"sha": "49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YThjYjM0ZDJiNmUzZjdhZjRhN2NiZTg0MmZlNDhmZmEwMjQ1ZWI=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-28T02:15:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-28T23:12:33Z"}, "message": "Removed dom_owned, splitting things between task_owned and kernel_owned. Had to re-xfail a few tests brson recently un-xfailed.", "tree": {"sha": "fb74a37b34ec7334f273e1bc59c18d2daf439583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb74a37b34ec7334f273e1bc59c18d2daf439583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "html_url": "https://github.com/rust-lang/rust/commit/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f945fed5c8d1061d80b444331910df29afa392", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f945fed5c8d1061d80b444331910df29afa392", "html_url": "https://github.com/rust-lang/rust/commit/f6f945fed5c8d1061d80b444331910df29afa392"}], "stats": {"total": 443, "additions": 217, "deletions": 226}, "files": [{"sha": "0239e40f997d9cbb44685369f9dbf01b1ac916b9", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -4,13 +4,14 @@\n \n #include \"rust_internal.h\"\n \n-circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n-    dom(dom),\n+circular_buffer::circular_buffer(rust_task *task, size_t unit_sz) :\n+    dom(task->dom),\n+    task(task),\n     unit_sz(unit_sz),\n     _buffer_sz(initial_size()),\n     _next(0),\n     _unread(0),\n-    _buffer((uint8_t *)dom->malloc(_buffer_sz)) {\n+    _buffer((uint8_t *)task->malloc(_buffer_sz)) {\n \n     A(dom, unit_sz, \"Unit size must be larger than zero.\");\n \n@@ -26,7 +27,7 @@ circular_buffer::~circular_buffer() {\n     I(dom, _buffer);\n     W(dom, _unread == 0,\n       \"freeing circular_buffer with %d unread bytes\", _unread);\n-    dom->free(_buffer);\n+    task->free(_buffer);\n }\n \n size_t\n@@ -141,9 +142,9 @@ circular_buffer::grow() {\n     size_t new_buffer_sz = _buffer_sz * 2;\n     I(dom, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n     DLOG(dom, mem, \"circular_buffer is growing to %d bytes\", new_buffer_sz);\n-    void *new_buffer = dom->malloc(new_buffer_sz);\n+    void *new_buffer = task->malloc(new_buffer_sz);\n     transfer(new_buffer);\n-    dom->free(_buffer);\n+    task->free(_buffer);\n     _buffer = (uint8_t *)new_buffer;\n     _next = 0;\n     _buffer_sz = new_buffer_sz;\n@@ -154,9 +155,9 @@ circular_buffer::shrink() {\n     size_t new_buffer_sz = _buffer_sz / 2;\n     I(dom, initial_size() <= new_buffer_sz);\n     DLOG(dom, mem, \"circular_buffer is shrinking to %d bytes\", new_buffer_sz);\n-    void *new_buffer = dom->malloc(new_buffer_sz);\n+    void *new_buffer = task->malloc(new_buffer_sz);\n     transfer(new_buffer);\n-    dom->free(_buffer);\n+    task->free(_buffer);\n     _buffer = (uint8_t *)new_buffer;\n     _next = 0;\n     _buffer_sz = new_buffer_sz;"}, {"sha": "1e686ea6f1461bd444aec45b93478011e8433ab6", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -6,15 +6,17 @@\n #define CIRCULAR_BUFFER_H\n \n class\n-circular_buffer : public dom_owned<circular_buffer> {\n+circular_buffer : public task_owned<circular_buffer> {\n     static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 8;\n     static const size_t MAX_CIRCULAR_BUFFER_SIZE = 1 << 24;\n \n-public:\n     rust_dom *dom;\n+\n+public:\n+    rust_task *task;\n     // Size of the data unit in bytes.\n     const size_t unit_sz;\n-    circular_buffer(rust_dom *dom, size_t unit_sz);\n+    circular_buffer(rust_task *task, size_t unit_sz);\n     ~circular_buffer();\n     void transfer(void *dst);\n     void enqueue(void *src);"}, {"sha": "d5e5a6eb1a7cc0e98d8ac9fea526cb78db2bf8b0", "filename": "src/rt/memory.h", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Fmemory.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Fmemory.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -1,54 +1,59 @@\n+// -*- c++ -*-\n #ifndef MEMORY_H\n #define MEMORY_H\n \n inline void *operator new(size_t size, void *mem) {\n     return mem;\n }\n \n-inline void *operator new(size_t size, rust_dom *dom) {\n-    return dom->malloc(size, memory_region::LOCAL);\n+inline void *operator new(size_t size, rust_kernel *kernel) {\n+    return kernel->malloc(size);\n }\n \n-inline void *operator new[](size_t size, rust_dom *dom) {\n-    return dom->malloc(size, memory_region::LOCAL);\n+inline void *operator new(size_t size, rust_task *task) {\n+    return task->malloc(size, memory_region::LOCAL);\n }\n \n-inline void *operator new(size_t size, rust_dom &dom) {\n-    return dom.malloc(size, memory_region::LOCAL);\n+inline void *operator new[](size_t size, rust_task *task) {\n+    return task->malloc(size, memory_region::LOCAL);\n }\n \n-inline void *operator new[](size_t size, rust_dom &dom) {\n-    return dom.malloc(size, memory_region::LOCAL);\n+inline void *operator new(size_t size, rust_task &task) {\n+    return task.malloc(size, memory_region::LOCAL);\n }\n \n-inline void *operator new(size_t size, rust_dom *dom,\n+inline void *operator new[](size_t size, rust_task &task) {\n+    return task.malloc(size, memory_region::LOCAL);\n+}\n+\n+inline void *operator new(size_t size, rust_task *task,\n     memory_region::memory_region_type type) {\n-    return dom->malloc(size, type);\n+    return task->malloc(size, type);\n }\n \n-inline void *operator new[](size_t size, rust_dom *dom,\n+inline void *operator new[](size_t size, rust_task *task,\n     memory_region::memory_region_type type) {\n-    return dom->malloc(size, type);\n+    return task->malloc(size, type);\n }\n \n-inline void *operator new(size_t size, rust_dom &dom,\n+inline void *operator new(size_t size, rust_task &task,\n     memory_region::memory_region_type type) {\n-    return dom.malloc(size, type);\n+    return task.malloc(size, type);\n }\n \n-inline void *operator new[](size_t size, rust_dom &dom,\n+inline void *operator new[](size_t size, rust_task &task,\n     memory_region::memory_region_type type) {\n-    return dom.malloc(size, type);\n+    return task.malloc(size, type);\n }\n \n-inline void operator delete(void *mem, rust_dom *dom) {\n-    dom->free(mem, memory_region::LOCAL);\n+inline void operator delete(void *mem, rust_task *task) {\n+    task->free(mem, memory_region::LOCAL);\n     return;\n }\n \n-inline void operator delete(void *mem, rust_dom *dom,\n+inline void operator delete(void *mem, rust_task *task,\n     memory_region::memory_region_type type) {\n-    dom->free(mem, type);\n+    task->free(mem, type);\n     return;\n }\n "}, {"sha": "293d8562e4b3c166e3c49a4666ac89a7e6690167", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -1,27 +1,29 @@\n #include \"rust_internal.h\"\n \n struct\n-command_line_args : public dom_owned<command_line_args>\n+command_line_args : public kernel_owned<command_line_args>\n {\n-    rust_dom *dom;\n+    rust_kernel *kernel;\n+    rust_task *task;\n     int argc;\n     char **argv;\n \n     // vec[str] passed to rust_task::start.\n     rust_vec *args;\n \n-    command_line_args(rust_dom *dom,\n+    command_line_args(rust_task *task,\n                       int sys_argc,\n                       char **sys_argv)\n-        : dom(dom),\n+        : kernel(task->kernel),\n+          task(task),\n           argc(sys_argc),\n           argv(sys_argv),\n           args(NULL)\n     {\n #if defined(__WIN32__)\n         LPCWSTR cmdline = GetCommandLineW();\n         LPWSTR *wargv = CommandLineToArgvW(cmdline, &argc);\n-        dom->win32_require(\"CommandLineToArgvW\", wargv != NULL);\n+        task->dom->win32_require(\"CommandLineToArgvW\", wargv != NULL);\n         argv = (char **) dom->malloc(sizeof(char*) * argc);\n         for (int i = 0; i < argc; ++i) {\n             int n_chars = WideCharToMultiByte(CP_UTF8, 0, wargv[i], -1,\n@@ -36,14 +38,14 @@ command_line_args : public dom_owned<command_line_args>\n #endif\n         size_t vec_fill = sizeof(rust_str *) * argc;\n         size_t vec_alloc = next_power_of_two(sizeof(rust_vec) + vec_fill);\n-        void *mem = dom->malloc(vec_alloc);\n-        args = new (mem) rust_vec(dom, vec_alloc, 0, NULL);\n+        void *mem = kernel->malloc(vec_alloc);\n+        args = new (mem) rust_vec(task->dom, vec_alloc, 0, NULL);\n         rust_str **strs = (rust_str**) &args->data[0];\n         for (int i = 0; i < argc; ++i) {\n             size_t str_fill = strlen(argv[i]) + 1;\n             size_t str_alloc = next_power_of_two(sizeof(rust_str) + str_fill);\n-            mem = dom->malloc(str_alloc);\n-            strs[i] = new (mem) rust_str(dom, str_alloc, str_fill,\n+            mem = kernel->malloc(str_alloc);\n+            strs[i] = new (mem) rust_str(task->dom, str_alloc, str_fill,\n                                          (uint8_t const *)argv[i]);\n         }\n         args->fill = vec_fill;\n@@ -58,15 +60,15 @@ command_line_args : public dom_owned<command_line_args>\n             // Drop the args we've had pinned here.\n             rust_str **strs = (rust_str**) &args->data[0];\n             for (int i = 0; i < argc; ++i)\n-                dom->free(strs[i]);\n-            dom->free(args);\n+                kernel->free(strs[i]);\n+            kernel->free(args);\n         }\n \n #ifdef __WIN32__\n         for (int i = 0; i < argc; ++i) {\n-            dom->free(argv[i]);\n+            task->free(argv[i]);\n         }\n-        dom->free(argv);\n+        task->free(argv);\n #endif\n     }\n };\n@@ -97,7 +99,8 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     rust_kernel *kernel = new rust_kernel(srv);\n     kernel->start();\n     rust_dom *dom = kernel->get_domain();\n-    command_line_args *args = new (dom) command_line_args(dom, argc, argv);\n+    command_line_args *args \n+        = new (kernel) command_line_args(dom->root_task, argc, argv);\n \n     DLOG(dom, dom, \"startup: %d args in 0x%\" PRIxPTR,\n              args->argc, (uintptr_t)args->args);"}, {"sha": "76455d0ca9980421a592fc585636d27317c5fefd", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -42,7 +42,7 @@ last_os_error(rust_task *task) {\n #endif\n     size_t fill = strlen(buf) + 1;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = dom->malloc(alloc, memory_region::LOCAL);\n+    void *mem = task->malloc(alloc, memory_region::LOCAL);\n     if (!mem) {\n         task->fail(1);\n         return NULL;\n@@ -73,7 +73,7 @@ rust_getcwd(rust_task *task) {\n \n     size_t fill = strlen(cbuf) + 1;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = dom->malloc(alloc, memory_region::LOCAL);\n+    void *mem = task->malloc(alloc, memory_region::LOCAL);\n     if (!mem) {\n         task->fail(1);\n         return NULL;\n@@ -200,7 +200,7 @@ vec_alloc_with_data(rust_task *task,\n {\n     rust_dom *dom = task->dom;\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + (n_elts * elt_size));\n-    void *mem = dom->malloc(alloc, memory_region::LOCAL);\n+    void *mem = task->malloc(alloc, memory_region::LOCAL);\n     if (!mem) return NULL;\n     return new (mem) rust_vec(dom, alloc, fill * elt_size, (uint8_t*)d);\n }"}, {"sha": "bf75c89057ba2310d3c8640f32f0268a11ffbe72", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -9,7 +9,7 @@ rust_chan::rust_chan(rust_task *task,\n                      size_t unit_sz) :\n                      task(task),\n                      port(port),\n-                     buffer(task->dom, unit_sz) {\n+                     buffer(task, unit_sz) {\n     ++task->ref_count;\n     if (port) {\n         associate(port);"}, {"sha": "70509dcae95feac8b99a4a556c4c5a11c4b11f87", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -16,7 +16,7 @@ rust_crate_cache::get_type_desc(size_t size,\n         return td;\n     }\n     DLOG(dom, cache, \"rust_crate_cache::get_type_desc miss\");\n-    td = (type_desc*) dom->malloc(sizeof(type_desc) + keysz);\n+    td = (type_desc*) dom->kernel->malloc(sizeof(type_desc) + keysz);\n     if (!td)\n         return NULL;\n     // By convention, desc 0 is the root descriptor.\n@@ -53,7 +53,7 @@ rust_crate_cache::flush() {\n         type_desc *d = type_descs;\n         HASH_DEL(type_descs, d);\n         DLOG(dom, mem, \"rust_crate_cache::flush() tydesc %\" PRIxPTR, d);\n-        dom->free(d);\n+        dom->kernel->free(d);\n     }\n }\n "}, {"sha": "d89cb181fb8ba82782aba19863d64f43cbb29fdc", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 2, "deletions": 66, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -10,8 +10,6 @@ rust_dom::rust_dom(rust_kernel *kernel,\n     _log(srv, this),\n     log_lvl(log_note),\n     srv(srv),\n-    local_region(&srv->local_region),\n-    synchronized_region(&srv->synchronized_region),\n     name(name),\n     newborn_tasks(this, \"newborn\"),\n     running_tasks(this, \"running\"),\n@@ -36,6 +34,7 @@ rust_dom::rust_dom(rust_kernel *kernel,\n \n rust_dom::~rust_dom() {\n     DLOG(this, dom, \"~rust_dom %s @0x%\" PRIxPTR, name, (uintptr_t)this);\n+\n     newborn_tasks.delete_all();\n     running_tasks.delete_all();\n     blocked_tasks.delete_all();\n@@ -75,69 +74,6 @@ rust_dom::fail() {\n     rval = 1;\n }\n \n-void *\n-rust_dom::malloc(size_t size) {\n-    return malloc(size, memory_region::LOCAL);\n-}\n-\n-void *\n-rust_dom::malloc(size_t size, memory_region::memory_region_type type) {\n-    if (type == memory_region::LOCAL) {\n-        return local_region.malloc(size);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        return synchronized_region.malloc(size);\n-    }\n-    I(this, false);\n-    return NULL;\n-}\n-\n-void *\n-rust_dom::calloc(size_t size) {\n-    return calloc(size, memory_region::LOCAL);\n-}\n-\n-void *\n-rust_dom::calloc(size_t size, memory_region::memory_region_type type) {\n-    if (type == memory_region::LOCAL) {\n-        return local_region.calloc(size);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        return synchronized_region.calloc(size);\n-    }\n-    return NULL;\n-}\n-\n-void *\n-rust_dom::realloc(void *mem, size_t size) {\n-    return realloc(mem, size, memory_region::LOCAL);\n-}\n-\n-void *\n-rust_dom::realloc(void *mem, size_t size,\n-    memory_region::memory_region_type type) {\n-    if (type == memory_region::LOCAL) {\n-        return local_region.realloc(mem, size);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        return synchronized_region.realloc(mem, size);\n-    }\n-    return NULL;\n-}\n-\n-void\n-rust_dom::free(void *mem) {\n-    free(mem, memory_region::LOCAL);\n-}\n-\n-void\n-rust_dom::free(void *mem, memory_region::memory_region_type type) {\n-    DLOG(this, mem, \"rust_dom::free(0x%\" PRIxPTR \")\", mem);\n-    if (type == memory_region::LOCAL) {\n-        local_region.free(mem);\n-    } else if (type == memory_region::SYNCHRONIZED) {\n-        synchronized_region.free(mem);\n-    }\n-    return;\n-}\n-\n #ifdef __WIN32__\n void\n rust_dom::win32_require(LPCTSTR fn, BOOL ok) {\n@@ -372,7 +308,7 @@ rust_dom::get_cache() {\n rust_task *\n rust_dom::create_task(rust_task *spawner, const char *name) {\n     rust_task *task =\n-        new (this) rust_task (this, &newborn_tasks, spawner, name);\n+        new (this->kernel) rust_task (this, &newborn_tasks, spawner, name);\n     DLOG(this, task, \"created task: \" PTR \", spawner: %s, name: %s\",\n                         task, spawner ? spawner->name : \"null\", name);\n     newborn_tasks.append(task);"}, {"sha": "b936a0e580aed9a12420b888aa16cd667833784e", "filename": "src/rt/rust_dom.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_dom.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_dom.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -35,8 +35,6 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n     rust_log _log;\n     uint32_t log_lvl;\n     rust_srv *srv;\n-    memory_region local_region;\n-    memory_region synchronized_region;\n     const char *const name;\n \n     rust_task_list newborn_tasks;\n@@ -74,15 +72,6 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n     void log(rust_task *task, uint32_t level, char const *fmt, ...);\n     rust_log & get_log();\n     void fail();\n-    void *malloc(size_t size);\n-    void *malloc(size_t size, memory_region::memory_region_type type);\n-    void *calloc(size_t size);\n-    void *calloc(size_t size, memory_region::memory_region_type type);\n-    void *realloc(void *mem, size_t size);\n-    void *realloc(void *mem, size_t size,\n-        memory_region::memory_region_type type);\n-    void free(void *mem);\n-    void free(void *mem, memory_region::memory_region_type type);\n \n     void drain_incoming_message_queue(bool process);\n "}, {"sha": "ac201fc799ccbbee479202b0ad386c6709070607", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -115,15 +115,9 @@ template <typename T> struct rc_base {\n     ~rc_base();\n };\n \n-template <typename T> struct dom_owned {\n-    void operator delete(void *ptr) {\n-        ((T *)ptr)->dom->free(ptr);\n-    }\n-};\n-\n template <typename T> struct task_owned {\n     void operator delete(void *ptr) {\n-        ((T *)ptr)->task->dom->free(ptr);\n+        ((T *)ptr)->task->free(ptr);\n     }\n };\n \n@@ -148,14 +142,14 @@ struct rust_cond { };\n \n // Helper class used regularly elsewhere.\n \n-template <typename T> class ptr_vec : public dom_owned<ptr_vec<T> > {\n+template <typename T> class ptr_vec : public task_owned<ptr_vec<T> > {\n     static const size_t INIT_SIZE = 8;\n-    rust_dom *dom;\n+    rust_task *task;\n     size_t alloc;\n     size_t fill;\n     T **data;\n public:\n-    ptr_vec(rust_dom *dom);\n+    ptr_vec(rust_task *task);\n     ~ptr_vec();\n \n     size_t length() {\n@@ -181,7 +175,6 @@ template <typename T> class ptr_vec : public dom_owned<ptr_vec<T> > {\n #include \"rust_kernel.h\"\n #include \"rust_message.h\"\n #include \"rust_dom.h\"\n-#include \"memory.h\"\n \n struct rust_timer {\n     // FIXME: This will probably eventually need replacement\n@@ -250,35 +243,11 @@ rust_alarm\n typedef ptr_vec<rust_alarm> rust_wait_queue;\n \n \n-struct stk_seg {\n-    unsigned int valgrind_id;\n-    uintptr_t limit;\n-    uint8_t data[];\n-};\n-\n-struct frame_glue_fns {\n-    uintptr_t mark_glue_off;\n-    uintptr_t drop_glue_off;\n-    uintptr_t reloc_glue_off;\n-};\n-\n-struct gc_alloc {\n-    gc_alloc *prev;\n-    gc_alloc *next;\n-    uintptr_t ctrl_word;\n-    uint8_t data[];\n-    bool mark() {\n-        if (ctrl_word & 1)\n-            return false;\n-        ctrl_word |= 1;\n-        return true;\n-    }\n-};\n-\n #include \"circular_buffer.h\"\n #include \"rust_task.h\"\n #include \"rust_chan.h\"\n #include \"rust_port.h\"\n+#include \"memory.h\"\n \n //\n // Local Variables:"}, {"sha": "5e03d8072d64fc5e75167135b67a0312bbb7e1b7", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -116,15 +116,6 @@ class rust_kernel : public rust_thread {\n     int start_task_threads(int num_threads);\n };\n \n-inline void *operator new(size_t size, rust_kernel *kernel) {\n-    return kernel->malloc(size);\n-}\n-\n-inline void *operator new(size_t size, rust_kernel &kernel) {\n-    return kernel.malloc(size);\n-}\n-\n-\n class rust_task_thread : public rust_thread {\n     int id;\n     rust_kernel *owner;"}, {"sha": "6d1b7c528d28290d59f622cbb2f3ba1f0d16b9ab", "filename": "src/rt/rust_message.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_message.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_message.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_message.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -109,9 +109,10 @@ void data_message::kernel_process() {\n \n }\n \n-rust_message_queue::rust_message_queue(rust_srv *srv, rust_kernel *kernel) :\n-                                       region (srv, true), kernel(kernel),\n-                                       dom_handle(NULL) {\n+rust_message_queue::rust_message_queue(rust_srv *srv, rust_kernel *kernel) \n+    : region(srv, true),\n+      kernel(kernel),\n+      dom_handle(NULL) {\n     // Nop.\n }\n "}, {"sha": "a2bd3b34c38dc5876144cd8f80489a36f41c5e90", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -3,14 +3,14 @@\n \n rust_port::rust_port(rust_task *task, size_t unit_sz) :\n                      maybe_proxy<rust_port>(this), task(task),\n-                     unit_sz(unit_sz), writers(task->dom), chans(task->dom) {\n+                     unit_sz(unit_sz), writers(task), chans(task) {\n \n     LOG(task, comm,\n         \"new rust_port(task=0x%\" PRIxPTR \", unit_sz=%d) -> port=0x%\"\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n \n     // Allocate a remote channel, for remote channel data.\n-    remote_channel = new (task->dom) rust_chan(task, this, unit_sz);\n+    remote_channel = new (task) rust_chan(task, this, unit_sz);\n }\n \n rust_port::~rust_port() {"}, {"sha": "52987c68d64627f5d43a42be16304c4d275beae5", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 69, "deletions": 17, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -20,28 +20,28 @@ static size_t const min_stk_bytes = 0x100000;\n // Task stack segments. Heap allocated and chained together.\n \n static stk_seg*\n-new_stk(rust_dom *dom, size_t minsz)\n+new_stk(rust_task *task, size_t minsz)\n {\n     if (minsz < min_stk_bytes)\n         minsz = min_stk_bytes;\n     size_t sz = sizeof(stk_seg) + minsz;\n-    stk_seg *stk = (stk_seg *)dom->malloc(sz);\n-    LOGPTR(dom, \"new stk\", (uintptr_t)stk);\n+    stk_seg *stk = (stk_seg *)task->malloc(sz);\n+    LOGPTR(task->dom, \"new stk\", (uintptr_t)stk);\n     memset(stk, 0, sizeof(stk_seg));\n     stk->limit = (uintptr_t) &stk->data[minsz];\n-    LOGPTR(dom, \"stk limit\", stk->limit);\n+    LOGPTR(task->dom, \"stk limit\", stk->limit);\n     stk->valgrind_id =\n         VALGRIND_STACK_REGISTER(&stk->data[0],\n                                 &stk->data[minsz]);\n     return stk;\n }\n \n static void\n-del_stk(rust_dom *dom, stk_seg *stk)\n+del_stk(rust_task *task, stk_seg *stk)\n {\n     VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n-    LOGPTR(dom, \"freeing stk segment\", (uintptr_t)stk);\n-    dom->free(stk);\n+    LOGPTR(task->dom, \"freeing stk segment\", (uintptr_t)stk);\n+    task->free(stk);\n }\n \n // Tasks\n@@ -55,9 +55,9 @@ size_t const callee_save_fp = 0;\n rust_task::rust_task(rust_dom *dom, rust_task_list *state,\n                      rust_task *spawner, const char *name) :\n     maybe_proxy<rust_task>(this),\n-    stk(new_stk(dom, 0)),\n+    stk(NULL),\n     runtime_sp(0),\n-    rust_sp(stk->limit),\n+    rust_sp(NULL),\n     gc_alloc_chain(0),\n     dom(dom),\n     cache(NULL),\n@@ -69,13 +69,17 @@ rust_task::rust_task(rust_dom *dom, rust_task_list *state,\n     supervisor(spawner),\n     list_index(-1),\n     rendezvous_ptr(0),\n-    alarm(this),\n     handle(NULL),\n-    active(false)\n+    active(false),\n+    local_region(&dom->srv->local_region),\n+    synchronized_region(&dom->srv->synchronized_region)\n {\n     LOGPTR(dom, \"new task\", (uintptr_t)this);\n     DLOG(dom, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);\n \n+    stk = new_stk(this, 0);\n+    rust_sp = stk->limit;\n+\n     if (spawner == NULL) {\n         ref_count = 0;\n     }\n@@ -111,7 +115,7 @@ rust_task::~rust_task()\n     I(dom, ref_count == 0 ||\n       (ref_count == 1 && this == dom->root_task));\n \n-    del_stk(dom, stk);\n+    del_stk(this, stk);\n }\n \n extern \"C\" void rust_new_exit_task_glue();\n@@ -352,7 +356,7 @@ rust_task::malloc(size_t sz, type_desc *td)\n     if (td) {\n         sz += sizeof(gc_alloc);\n     }\n-    void *mem = dom->malloc(sz);\n+    void *mem = malloc(sz, memory_region::LOCAL);\n     if (!mem)\n         return mem;\n     if (td) {\n@@ -379,7 +383,7 @@ rust_task::realloc(void *data, size_t sz, bool is_gc)\n         gc_alloc *gcm = (gc_alloc*)(((char *)data) - sizeof(gc_alloc));\n         unlink_gc(gcm);\n         sz += sizeof(gc_alloc);\n-        gcm = (gc_alloc*) dom->realloc((void*)gcm, sz);\n+        gcm = (gc_alloc*) realloc((void*)gcm, sz, memory_region::LOCAL);\n         DLOG(dom, task, \"task %s @0x%\" PRIxPTR\n              \" reallocated %d GC bytes = 0x%\" PRIxPTR,\n              name, (uintptr_t)this, sz, gcm);\n@@ -388,7 +392,7 @@ rust_task::realloc(void *data, size_t sz, bool is_gc)\n         link_gc(gcm);\n         data = (void*) &(gcm->data);\n     } else {\n-        data = dom->realloc(data, sz);\n+        data = realloc(data, sz, memory_region::LOCAL);\n     }\n     return data;\n }\n@@ -405,9 +409,9 @@ rust_task::free(void *p, bool is_gc)\n         DLOG(dom, mem,\n              \"task %s @0x%\" PRIxPTR \" freeing GC memory = 0x%\" PRIxPTR,\n              name, (uintptr_t)this, gcm);\n-        dom->free(gcm);\n+        free(gcm, memory_region::LOCAL);\n     } else {\n-        dom->free(p);\n+        free(p, memory_region::LOCAL);\n     }\n }\n \n@@ -492,6 +496,54 @@ bool rust_task::can_schedule()\n     return yield_timer.has_timed_out() && !active;\n }\n \n+void *\n+rust_task::malloc(size_t size, memory_region::memory_region_type type) {\n+    if (type == memory_region::LOCAL) {\n+        return local_region.malloc(size);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        return synchronized_region.malloc(size);\n+    }\n+    I(dom, false);\n+    return NULL;\n+}\n+\n+void *\n+rust_task::calloc(size_t size) {\n+    return calloc(size, memory_region::LOCAL);\n+}\n+\n+void *\n+rust_task::calloc(size_t size, memory_region::memory_region_type type) {\n+    if (type == memory_region::LOCAL) {\n+        return local_region.calloc(size);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        return synchronized_region.calloc(size);\n+    }\n+    return NULL;\n+}\n+\n+void *\n+rust_task::realloc(void *mem, size_t size,\n+    memory_region::memory_region_type type) {\n+    if (type == memory_region::LOCAL) {\n+        return local_region.realloc(mem, size);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        return synchronized_region.realloc(mem, size);\n+    }\n+    return NULL;\n+}\n+\n+void\n+rust_task::free(void *mem, memory_region::memory_region_type type) {\n+    DLOG(dom, mem, \"rust_task::free(0x%\" PRIxPTR \")\", mem);\n+    if (type == memory_region::LOCAL) {\n+        local_region.free(mem);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        synchronized_region.free(mem);\n+    }\n+    return;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "5e61306af2e01344baccfc8920ed833879d7d0f3", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -9,9 +9,34 @@\n \n #include \"context.h\"\n \n+struct stk_seg {\n+    unsigned int valgrind_id;\n+    uintptr_t limit;\n+    uint8_t data[];\n+};\n+\n+struct frame_glue_fns {\n+    uintptr_t mark_glue_off;\n+    uintptr_t drop_glue_off;\n+    uintptr_t reloc_glue_off;\n+};\n+\n+struct gc_alloc {\n+    gc_alloc *prev;\n+    gc_alloc *next;\n+    uintptr_t ctrl_word;\n+    uint8_t data[];\n+    bool mark() {\n+        if (ctrl_word & 1)\n+            return false;\n+        ctrl_word |= 1;\n+        return true;\n+    }\n+};\n+\n struct\n rust_task : public maybe_proxy<rust_task>,\n-            public dom_owned<rust_task>\n+            public kernel_owned<rust_task>\n {\n     // Fields known to the compiler.\n     stk_seg *stk;\n@@ -46,8 +71,6 @@ rust_task : public maybe_proxy<rust_task>,\n     // List of tasks waiting for this task to finish.\n     array_list<maybe_proxy<rust_task> *> tasks_waiting_to_join;\n \n-    rust_alarm alarm;\n-\n     rust_handle<rust_task> *handle;\n \n     context ctx;\n@@ -56,6 +79,9 @@ rust_task : public maybe_proxy<rust_task>,\n     // or is about to run this task.\n     volatile bool active;\n \n+    memory_region local_region;\n+    memory_region synchronized_region;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_dom *dom,\n               rust_task_list *state,\n@@ -118,6 +144,13 @@ rust_task : public maybe_proxy<rust_task>,\n     rust_crate_cache * get_crate_cache();\n \n     bool can_schedule();\n+\n+    void *malloc(size_t size, memory_region::memory_region_type type);\n+    void *calloc(size_t size);\n+    void *calloc(size_t size, memory_region::memory_region_type type);\n+    void *realloc(void *mem, size_t size,\n+        memory_region::memory_region_type type);\n+    void free(void *mem, memory_region::memory_region_type type);\n };\n \n //"}, {"sha": "479f9e936fbc864e117be1eeab509dc93f79a8bf", "filename": "src/rt/rust_task_list.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_task_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_task_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_list.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -1,11 +1,12 @@\n+// -*- c++-mode -*-\n #ifndef RUST_TASK_LIST_H\n #define RUST_TASK_LIST_H\n \n /**\n  * Used to indicate the state of a rust task.\n  */\n class rust_task_list : public indexed_list<rust_task>,\n-                       public dom_owned<rust_task_list> {\n+                       public kernel_owned<rust_task_list> {\n public:\n     rust_dom *dom;\n     const char* name;"}, {"sha": "ce349b18e9d3109f0f725e5be264fa623bbda984", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -74,11 +74,10 @@ upcall_trace_str(rust_task *task, char const *c) {\n extern \"C\" CDECL rust_port*\n upcall_new_port(rust_task *task, size_t unit_sz) {\n     LOG_UPCALL_ENTRY(task);\n-    rust_dom *dom = task->dom;\n     scoped_lock with(task->kernel->scheduler_lock);\n     LOG(task, comm, \"upcall_new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n-    return new (dom) rust_port(task, unit_sz);\n+    return new (task) rust_port(task, unit_sz);\n }\n \n extern \"C\" CDECL void\n@@ -101,7 +100,7 @@ upcall_new_chan(rust_task *task, rust_port *port) {\n         \"task=0x%\" PRIxPTR \" (%s), port=0x%\" PRIxPTR \")\",\n         (uintptr_t) task, task->name, port);\n     I(dom, port);\n-    return new (dom) rust_chan(task, port, port->unit_sz);\n+    return new (task) rust_chan(task, port, port->unit_sz);\n }\n \n /**\n@@ -181,7 +180,7 @@ upcall_clone_chan(rust_task *task, maybe_proxy<rust_task> *target,\n         port = proxy;\n         target_task = target->as_proxy()->handle()->referent();\n     }\n-    return new (target_task->dom) rust_chan(target_task, port, unit_sz);\n+    return new (target_task) rust_chan(target_task, port, unit_sz);\n }\n \n extern \"C\" CDECL void"}, {"sha": "260f7eb9d5df3d4289a39ee014d765ed9adab72b", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -1,6 +1,8 @@\n #ifndef RUST_UTIL_H\n #define RUST_UTIL_H\n \n+#include \"rust_task.h\"\n+\n // Reference counted objects\n \n template <typename T>\n@@ -17,45 +19,45 @@ rc_base<T>::~rc_base()\n // Utility type: pointer-vector.\n \n template <typename T>\n-ptr_vec<T>::ptr_vec(rust_dom *dom) :\n-    dom(dom),\n+ptr_vec<T>::ptr_vec(rust_task *task) :\n+    task(task),\n     alloc(INIT_SIZE),\n     fill(0),\n-    data(new (dom) T*[alloc])\n+    data(new (task) T*[alloc])\n {\n-    I(dom, data);\n-    DLOG(dom, mem, \"new ptr_vec(data=0x%\" PRIxPTR \") -> 0x%\" PRIxPTR,\n+    I(task->dom, data);\n+    DLOG(task->dom, mem, \"new ptr_vec(data=0x%\" PRIxPTR \") -> 0x%\" PRIxPTR,\n          (uintptr_t)data, (uintptr_t)this);\n }\n \n template <typename T>\n ptr_vec<T>::~ptr_vec()\n {\n-    I(dom, data);\n-    DLOG(dom, mem, \"~ptr_vec 0x%\" PRIxPTR \", data=0x%\" PRIxPTR,\n+    I(task->dom, data);\n+    DLOG(task->dom, mem, \"~ptr_vec 0x%\" PRIxPTR \", data=0x%\" PRIxPTR,\n          (uintptr_t)this, (uintptr_t)data);\n-    I(dom, fill == 0);\n-    dom->free(data);\n+    I(task->dom, fill == 0);\n+    task->free(data);\n }\n \n template <typename T> T *&\n ptr_vec<T>::operator[](size_t offset) {\n-    I(dom, data[offset]->idx == offset);\n+    I(task->dom, data[offset]->idx == offset);\n     return data[offset];\n }\n \n template <typename T>\n void\n ptr_vec<T>::push(T *p)\n {\n-    I(dom, data);\n-    I(dom, fill <= alloc);\n+    I(task->dom, data);\n+    I(task->dom, fill <= alloc);\n     if (fill == alloc) {\n         alloc *= 2;\n-        data = (T **)dom->realloc(data, alloc * sizeof(T*));\n-        I(dom, data);\n+        data = (T **)task->realloc(data, alloc * sizeof(T*));\n+        I(task->dom, data);\n     }\n-    I(dom, fill < alloc);\n+    I(task->dom, fill < alloc);\n     p->idx = fill;\n     data[fill++] = p;\n }\n@@ -78,13 +80,13 @@ template <typename T>\n void\n ptr_vec<T>::trim(size_t sz)\n {\n-    I(dom, data);\n+    I(task->dom, data);\n     if (sz <= (alloc / 4) &&\n         (alloc / 2) >= INIT_SIZE) {\n         alloc /= 2;\n-        I(dom, alloc >= fill);\n-        data = (T **)dom->realloc(data, alloc * sizeof(T*));\n-        I(dom, data);\n+        I(task->dom, alloc >= fill);\n+        data = (T **)task->realloc(data, alloc * sizeof(T*));\n+        I(task->dom, data);\n     }\n }\n \n@@ -93,9 +95,9 @@ void\n ptr_vec<T>::swap_delete(T *item)\n {\n     /* Swap the endpoint into i and decr fill. */\n-    I(dom, data);\n-    I(dom, fill > 0);\n-    I(dom, item->idx < fill);\n+    I(task->dom, data);\n+    I(task->dom, fill > 0);\n+    I(task->dom, item->idx < fill);\n     fill--;\n     if (fill > 0) {\n         T *subst = data[fill];\n@@ -155,7 +157,8 @@ isaac_init(rust_dom *dom, randctx *rctx)\n         } else {\n             int fd = open(\"/dev/urandom\", O_RDONLY);\n             I(dom, fd > 0);\n-            I(dom, read(fd, (void*) &rctx->randrsl, sizeof(rctx->randrsl))\n+            I(dom, \n+              read(fd, (void*) &rctx->randrsl, sizeof(rctx->randrsl))\n               == sizeof(rctx->randrsl));\n             I(dom, close(fd) == 0);\n         }"}, {"sha": "9cd3b67821b9388309f2913afd90599ae1b6a657", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -2,6 +2,8 @@\n \n \n // xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n // Reported as issue #126, child leaks the string.\n fn child2(str s) { }\n "}, {"sha": "0051b2ba14dbd34f2a9eaff2f2b4ce4226dfd6c9", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -5,6 +5,8 @@\n  */\n \n // xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n \n use std;\n "}, {"sha": "726dfa261e0a2bb21b58007d041f7554a70c9b75", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=49a8cb34d2b6e3f7af4a7cbe842fe48ffa0245eb", "patch": "@@ -1,4 +1,6 @@\n // xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n fn main() -> () {\n     spawn child(\"Hello\");\n }"}]}