{"sha": "81edd1796b463776d111cd4fe48e866dd716dfab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZWRkMTc5NmI0NjM3NzZkMTExY2Q0ZmU0OGU4NjZkZDcxNmRmYWI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-18T11:11:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-18T12:50:58Z"}, "message": "Check that the size optimisation is not redundant", "tree": {"sha": "3dae29deb22d6263fd6e9af100c28ad7cba2d3a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dae29deb22d6263fd6e9af100c28ad7cba2d3a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81edd1796b463776d111cd4fe48e866dd716dfab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81edd1796b463776d111cd4fe48e866dd716dfab", "html_url": "https://github.com/rust-lang/rust/commit/81edd1796b463776d111cd4fe48e866dd716dfab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81edd1796b463776d111cd4fe48e866dd716dfab/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9896b38f01c068abfe7170cb9ae2bfadb4aebbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9896b38f01c068abfe7170cb9ae2bfadb4aebbc4", "html_url": "https://github.com/rust-lang/rust/commit/9896b38f01c068abfe7170cb9ae2bfadb4aebbc4"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "2b4ce9fe49c8e6679f4881fd52786693bca1be6e", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81edd1796b463776d111cd4fe48e866dd716dfab/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81edd1796b463776d111cd4fe48e866dd716dfab/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=81edd1796b463776d111cd4fe48e866dd716dfab", "patch": "@@ -1384,8 +1384,8 @@ impl<T> [T] {\n                 let mut indices: Vec<_> =\n                     $slice.iter().map($f).enumerate().map(|(i, k)| (k, i as $t)).collect();\n                 // The elements of `indices` are unique, as they are indexed, so any sort will be\n-                // stable with respect to the original slice. We use `sort_unstable` here because it\n-                // requires less memory allocation.\n+                // stable with respect to the original slice. We use `sort_unstable` here because\n+                // it requires less memory allocation.\n                 indices.sort_unstable();\n                 for i in 0..$slice.len() {\n                     let mut index = indices[i].1;\n@@ -1398,10 +1398,15 @@ impl<T> [T] {\n             })\n         }\n \n+        let sz_u8    = mem::size_of::<(K, u8)>();\n+        let sz_u16   = mem::size_of::<(K, u16)>();\n+        let sz_u32   = mem::size_of::<(K, u32)>();\n+        let sz_usize = mem::size_of::<(K, usize)>();\n+\n         let len = self.len();\n-        if len <= ( u8::MAX as usize) { return sort_by_key!( u8, self, f) }\n-        if len <= (u16::MAX as usize) { return sort_by_key!(u16, self, f) }\n-        if len <= (u32::MAX as usize) { return sort_by_key!(u32, self, f) }\n+        if sz_u8  < sz_u16   && len <= ( u8::MAX as usize) { return sort_by_key!( u8, self, f) }\n+        if sz_u16 < sz_u32   && len <= (u16::MAX as usize) { return sort_by_key!(u16, self, f) }\n+        if sz_u32 < sz_usize && len <= (u32::MAX as usize) { return sort_by_key!(u32, self, f) }\n         sort_by_key!(usize, self, f)\n     }\n "}]}