{"sha": "c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1N2YwYTcyMDE4NjBlYjg3YWQ4ZGYxZjNlNjNlYTFlZDAzZGNiNDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-27T20:38:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-28T00:06:38Z"}, "message": "resolve: Desugar empty import groups into synthetic dummy imports\n\nso that they are correctly resolved on 2018 edition", "tree": {"sha": "0278291bd3295c6607751326de414ab220ae3d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0278291bd3295c6607751326de414ab220ae3d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "html_url": "https://github.com/rust-lang/rust/commit/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f257bd022389e21b8f165a055b854c7195d7e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f257bd022389e21b8f165a055b854c7195d7e45", "html_url": "https://github.com/rust-lang/rust/commit/1f257bd022389e21b8f165a055b854c7195d7e45"}], "stats": {"total": 149, "additions": 51, "deletions": 98}, "files": [{"sha": "9795c0cba61545a36015976b083cbae0a3d14b17", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -3133,7 +3133,8 @@ impl<'a> LoweringContext<'a> {\n                 // Privatize the degenerate import base, used only to check\n                 // the stability of `use a::{};`, to avoid it showing up as\n                 // a re-export by accident when `pub`, e.g. in documentation.\n-                let path = P(self.lower_path(id, &prefix, ParamMode::Explicit));\n+                let def = self.expect_full_def_from_use(id).next().unwrap_or(Def::Err);\n+                let path = P(self.lower_path_extra(def, &prefix, None, ParamMode::Explicit, None));\n                 *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }"}, {"sha": "bb451f554d697b6fce15b1cea5dfa9e11d8a8fcd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -253,6 +253,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             uniform_paths_canary_emitted = true;\n         }\n \n+        let empty_for_self = |prefix: &[Segment]| {\n+            prefix.is_empty() ||\n+            prefix.len() == 1 && prefix[0].ident.name == keywords::CrateRoot.name()\n+        };\n         match use_tree.kind {\n             ast::UseTreeKind::Simple(rename, ..) => {\n                 let mut ident = use_tree.ident();\n@@ -265,10 +269,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     if source.ident.name == keywords::SelfValue.name() {\n                         type_ns_only = true;\n \n-                        let empty_prefix = module_path.last().map_or(true, |seg| {\n-                            seg.ident.name == keywords::CrateRoot.name()\n-                        });\n-                        if empty_prefix {\n+                        if empty_for_self(&module_path) {\n                             resolve_error(\n                                 self,\n                                 use_tree.span,\n@@ -400,6 +401,30 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         parent_scope.clone(), item, vis, root_span,\n                     );\n                 }\n+\n+                // Empty groups `a::b::{}` are turned into synthetic `self` imports\n+                // `a::b::c::{self as _}`, so that their prefixes are correctly\n+                // resolved and checked for privacy/stability/etc.\n+                if items.is_empty() && !empty_for_self(&prefix) {\n+                    let new_span = prefix[prefix.len() - 1].ident.span;\n+                    let tree = ast::UseTree {\n+                        prefix: ast::Path::from_ident(\n+                            Ident::new(keywords::SelfValue.name(), new_span)\n+                        ),\n+                        kind: ast::UseTreeKind::Simple(\n+                            Some(Ident::new(keywords::Underscore.name().gensymed(), new_span)),\n+                            ast::DUMMY_NODE_ID,\n+                            ast::DUMMY_NODE_ID,\n+                        ),\n+                        span: use_tree.span,\n+                    };\n+                    self.build_reduced_graph_for_use_tree(\n+                        // This particular use tree\n+                        &tree, id, &prefix, true, uniform_paths_canary_emitted,\n+                        // The whole `use` item\n+                        parent_scope.clone(), item, ty::Visibility::Invisible, root_span,\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "ebd87e87ff60a4c2a72adefc9073d73ac31b5580", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 65, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -482,23 +482,21 @@ enum PathSource<'a> {\n     TraitItem(Namespace),\n     // Path in `pub(path)`\n     Visibility,\n-    // Path in `use a::b::{...};`\n-    ImportPrefix,\n }\n \n impl<'a> PathSource<'a> {\n     fn namespace(self) -> Namespace {\n         match self {\n             PathSource::Type | PathSource::Trait(_) | PathSource::Struct |\n-            PathSource::Visibility | PathSource::ImportPrefix => TypeNS,\n+            PathSource::Visibility => TypeNS,\n             PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct => ValueNS,\n             PathSource::TraitItem(ns) => ns,\n         }\n     }\n \n     fn global_by_default(self) -> bool {\n         match self {\n-            PathSource::Visibility | PathSource::ImportPrefix => true,\n+            PathSource::Visibility => true,\n             PathSource::Type | PathSource::Expr(..) | PathSource::Pat |\n             PathSource::Struct | PathSource::TupleStruct |\n             PathSource::Trait(_) | PathSource::TraitItem(..) => false,\n@@ -510,7 +508,7 @@ impl<'a> PathSource<'a> {\n             PathSource::Type | PathSource::Expr(..) | PathSource::Pat |\n             PathSource::Struct | PathSource::TupleStruct => true,\n             PathSource::Trait(_) | PathSource::TraitItem(..) |\n-            PathSource::Visibility | PathSource::ImportPrefix => false,\n+            PathSource::Visibility => false,\n         }\n     }\n \n@@ -522,7 +520,6 @@ impl<'a> PathSource<'a> {\n             PathSource::Struct => \"struct, variant or union type\",\n             PathSource::TupleStruct => \"tuple struct/variant\",\n             PathSource::Visibility => \"module\",\n-            PathSource::ImportPrefix => \"module or enum\",\n             PathSource::TraitItem(ns) => match ns {\n                 TypeNS => \"associated type\",\n                 ValueNS => \"method or associated constant\",\n@@ -587,10 +584,6 @@ impl<'a> PathSource<'a> {\n                 Def::AssociatedTy(..) if ns == TypeNS => true,\n                 _ => false,\n             },\n-            PathSource::ImportPrefix => match def {\n-                Def::Mod(..) | Def::Enum(..) => true,\n-                _ => false,\n-            },\n             PathSource::Visibility => match def {\n                 Def::Mod(..) => true,\n                 _ => false,\n@@ -626,8 +619,8 @@ impl<'a> PathSource<'a> {\n             (PathSource::Pat, false) | (PathSource::TupleStruct, false) => \"E0531\",\n             (PathSource::TraitItem(..), true) => \"E0575\",\n             (PathSource::TraitItem(..), false) => \"E0576\",\n-            (PathSource::Visibility, true) | (PathSource::ImportPrefix, true) => \"E0577\",\n-            (PathSource::Visibility, false) | (PathSource::ImportPrefix, false) => \"E0578\",\n+            (PathSource::Visibility, true) => \"E0577\",\n+            (PathSource::Visibility, false) => \"E0578\",\n         }\n     }\n }\n@@ -2350,66 +2343,15 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 });\n             }\n \n-            ItemKind::Use(ref use_tree) => {\n-                // Imports are resolved as global by default, add starting root segment.\n-                let path = Path {\n-                    segments: use_tree.prefix.make_root().into_iter().collect(),\n-                    span: use_tree.span,\n-                };\n-                self.resolve_use_tree(item.id, use_tree.span, item.id, use_tree, &path);\n-            }\n-\n-            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_) => {\n+            ItemKind::Use(..) | ItemKind::ExternCrate(..) |\n+            ItemKind::MacroDef(..) | ItemKind::GlobalAsm(..) => {\n                 // do nothing, these are just around to be encoded\n             }\n \n             ItemKind::Mac(_) => panic!(\"unexpanded macro in resolve!\"),\n         }\n     }\n \n-    /// For the most part, use trees are desugared into `ImportDirective` instances\n-    /// when building the reduced graph (see `build_reduced_graph_for_use_tree`). But\n-    /// there is one special case we handle here: an empty nested import like\n-    /// `a::{b::{}}`, which desugares into...no import directives.\n-    fn resolve_use_tree(\n-        &mut self,\n-        root_id: NodeId,\n-        root_span: Span,\n-        id: NodeId,\n-        use_tree: &ast::UseTree,\n-        prefix: &Path,\n-    ) {\n-        match use_tree.kind {\n-            ast::UseTreeKind::Nested(ref items) => {\n-                let path = Path {\n-                    segments: prefix.segments\n-                        .iter()\n-                        .chain(use_tree.prefix.segments.iter())\n-                        .cloned()\n-                        .collect(),\n-                    span: prefix.span.to(use_tree.prefix.span),\n-                };\n-\n-                if items.is_empty() {\n-                    // Resolve prefix of an import with empty braces (issue #28388).\n-                    self.smart_resolve_path_with_crate_lint(\n-                        id,\n-                        None,\n-                        &path,\n-                        PathSource::ImportPrefix,\n-                        CrateLint::UsePath { root_id, root_span },\n-                    );\n-                } else {\n-                    for &(ref tree, nested_id) in items {\n-                        self.resolve_use_tree(root_id, root_span, nested_id, tree, &path);\n-                    }\n-                }\n-            }\n-            ast::UseTreeKind::Simple(..) => {},\n-            ast::UseTreeKind::Glob => {},\n-        }\n-    }\n-\n     fn with_type_parameter_rib<'b, F>(&'b mut self, type_parameters: TypeParameters<'a, 'b>, f: F)\n         where F: FnOnce(&mut Resolver)\n     {"}, {"sha": "b0418a513e31c67680ff82db7b1970eefcab690e", "filename": "src/test/ui/issues/issue-28388-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fissues%2Fissue-28388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fissues%2Fissue-28388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28388-1.rs?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -10,6 +10,6 @@\n \n // Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n \n-use foo::{}; //~ ERROR cannot find module or enum `foo` in the crate root\n+use foo::{}; //~ ERROR unresolved import `foo`\n \n fn main() {}"}, {"sha": "f93252f1d7dec03292f98e20e61cd45677cc9dd2", "filename": "src/test/ui/issues/issue-28388-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fissues%2Fissue-28388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fissues%2Fissue-28388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28388-1.stderr?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -1,9 +1,9 @@\n-error[E0578]: cannot find module or enum `foo` in the crate root\n+error[E0432]: unresolved import `foo`\n   --> $DIR/issue-28388-1.rs:13:5\n    |\n-LL | use foo::{}; //~ ERROR cannot find module or enum `foo` in the crate root\n-   |     ^^^ not found in the crate root\n+LL | use foo::{}; //~ ERROR unresolved import `foo`\n+   |     ^^^^^^^ no `foo` in the root\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0578`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "5da5a8c3fef62c668378ccc8b430d1ca6b01c3fc", "filename": "src/test/ui/resolve/resolve-bad-import-prefix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-import-prefix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-import-prefix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-import-prefix.rs?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -17,8 +17,8 @@ use {}; // OK\n use ::{}; // OK\n use m::{}; // OK\n use E::{}; // OK\n-use S::{}; //~ ERROR expected module or enum, found struct `S`\n-use Tr::{}; //~ ERROR expected module or enum, found trait `Tr`\n-use Nonexistent::{}; //~ ERROR cannot find module or enum `Nonexistent` in the crate root\n+use S::{}; // FIXME, this and `use S::{self};` should be an error\n+use Tr::{}; // FIXME, this and `use Tr::{self};` should be an error\n+use Nonexistent::{}; //~ ERROR unresolved import `Nonexistent`\n \n fn main () {}"}, {"sha": "c4d9b1d0075d55e43258dce8346627c3ae4bd77b", "filename": "src/test/ui/resolve/resolve-bad-import-prefix.stderr", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-import-prefix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-import-prefix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-import-prefix.stderr?ref=c57f0a7201860eb87ad8df1f3e63ea1ed03dcb40", "patch": "@@ -1,24 +1,9 @@\n-error[E0577]: expected module or enum, found struct `S`\n-  --> $DIR/resolve-bad-import-prefix.rs:20:5\n-   |\n-LL | use S::{}; //~ ERROR expected module or enum, found struct `S`\n-   |     -^^^^\n-   |     |\n-   |     did you mean `E`?\n-\n-error[E0577]: expected module or enum, found trait `Tr`\n-  --> $DIR/resolve-bad-import-prefix.rs:21:5\n-   |\n-LL | use Tr::{}; //~ ERROR expected module or enum, found trait `Tr`\n-   |     ^^^^^^ not a module or enum\n-\n-error[E0578]: cannot find module or enum `Nonexistent` in the crate root\n+error[E0432]: unresolved import `Nonexistent`\n   --> $DIR/resolve-bad-import-prefix.rs:22:5\n    |\n-LL | use Nonexistent::{}; //~ ERROR cannot find module or enum `Nonexistent` in the crate root\n-   |     ^^^^^^^^^^^ not found in the crate root\n+LL | use Nonexistent::{}; //~ ERROR unresolved import `Nonexistent`\n+   |     ^^^^^^^^^^^^^^^ no `Nonexistent` in the root\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0577, E0578.\n-For more information about an error, try `rustc --explain E0577`.\n+For more information about this error, try `rustc --explain E0432`."}]}