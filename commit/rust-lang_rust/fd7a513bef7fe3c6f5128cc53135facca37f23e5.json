{"sha": "fd7a513bef7fe3c6f5128cc53135facca37f23e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkN2E1MTNiZWY3ZmUzYzZmNTEyOGNjNTMxMzVmYWNjYTM3ZjIzZTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-06T01:37:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-11T01:55:09Z"}, "message": "libstd: Remove `Cell` from the library.", "tree": {"sha": "be733adb0aa531f7d4e1885b234c0bc489f02948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be733adb0aa531f7d4e1885b234c0bc489f02948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7a513bef7fe3c6f5128cc53135facca37f23e5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7a513bef7fe3c6f5128cc53135facca37f23e5", "html_url": "https://github.com/rust-lang/rust/commit/fd7a513bef7fe3c6f5128cc53135facca37f23e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7a513bef7fe3c6f5128cc53135facca37f23e5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61135080554d35cca151614c93693cb524fdffe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61135080554d35cca151614c93693cb524fdffe0", "html_url": "https://github.com/rust-lang/rust/commit/61135080554d35cca151614c93693cb524fdffe0"}], "stats": {"total": 128, "additions": 37, "deletions": 91}, "files": [{"sha": "5a0db8313fb5cdf939c5110bc146863f7c9bcc31", "filename": "src/librustuv/async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fasync.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -152,6 +152,7 @@ mod test_remote {\n         let watcher = AsyncWatcher::new(local_loop(), cb as ~Callback);\n \n         let thread = do Thread::start {\n+            let mut watcher = watcher;\n             watcher.fire();\n         };\n "}, {"sha": "f68b1052492fb0ba460fd3f233b5f1ffe8c52583", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -395,13 +395,9 @@ fn local_loop() -> &'static mut Loop {\n     unsafe {\n         cast::transmute({\n             let mut sched = Local::borrow(None::<Scheduler>);\n-            let mut io = None;\n-            sched.get().event_loop.io(|i| {\n-                let (_vtable, uvio): (uint, &'static mut uvio::UvIoFactory) =\n-                    cast::transmute(i);\n-                io = Some(uvio);\n-            });\n-            io.unwrap()\n+            let (_vtable, uvio): (uint, &'static mut uvio::UvIoFactory) =\n+                cast::transmute(sched.get().event_loop.io().unwrap());\n+            uvio\n         }.uv_loop())\n     }\n }"}, {"sha": "c09383c2d8f5dbb99f4889e1805c4cf3388e3190", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -1073,15 +1073,16 @@ mod test {\n             let tasksFriendHandle = sched2.make_handle();\n \n             let on_exit: proc(UnwindResult) = proc(exit_status) {\n+                let mut handle1 = handle1;\n+                let mut handle2 = handle2;\n                 handle1.send(Shutdown);\n                 handle2.send(Shutdown);\n                 assert!(exit_status.is_success());\n             };\n \n             unsafe fn local_io() -> &'static mut IoFactory {\n                 let mut sched = Local::borrow(None::<Scheduler>);\n-                let mut io = None;\n-                sched.get().event_loop.io(|i| io = Some(i));\n+                let io = sched.get().event_loop.io();\n                 cast::transmute(io.unwrap())\n             }\n \n@@ -1121,9 +1122,13 @@ mod test {\n                 // nothing\n             };\n \n+            let main_task = main_task;\n+            let sched1 = sched1;\n             let thread1 = do Thread::start {\n                 sched1.bootstrap(main_task);\n             };\n+\n+            let sched2 = sched2;\n             let thread2 = do Thread::start {\n                 sched2.bootstrap(null_task);\n             };"}, {"sha": "e0011398aa104c1a2b6e647d5034e5038bd58c8b", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::c_str::CString;\n-use std::cast;\n use std::comm::SharedChan;\n use std::libc::c_int;\n use std::libc;\n@@ -162,11 +161,9 @@ impl EventLoop for UvEventLoop {\n         ~AsyncWatcher::new(self.uvio.uv_loop(), f) as ~RemoteCallback\n     }\n \n-    fn io(&mut self) -> &'static mut IoFactory:'static {\n-        unsafe {\n-            let factory = &mut self.uvio as &mut IoFactory;\n-            cast::transmute(factory)\n-        }\n+    fn io<'a>(&'a mut self) -> Option<&'a mut IoFactory> {\n+        let factory = &mut self.uvio as &mut IoFactory;\n+        Some(factory)\n     }\n }\n "}, {"sha": "280c79f1fd4c6bd0ba810a53ff5df0d9546fb6e6", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -14,66 +14,6 @@ use prelude::*;\n use cast;\n use util::NonCopyable;\n \n-\n-/*\n-A dynamic, mutable location.\n-\n-Similar to a mutable option type, but friendlier.\n-*/\n-\n-#[no_freeze]\n-#[deriving(Clone, DeepClone, Eq)]\n-#[allow(missing_doc)]\n-pub struct Cell<T> {\n-    priv value: Option<T>\n-}\n-\n-impl<T> Cell<T> {\n-    /// Creates a new full cell with the given value.\n-    pub fn new(value: T) -> Cell<T> {\n-        Cell { value: Some(value) }\n-    }\n-\n-    /// Yields the value, failing if the cell is empty.\n-    pub fn take(&self) -> T {\n-        let this = unsafe { cast::transmute_mut(self) };\n-        if this.is_empty() {\n-            fail!(\"attempt to take an empty cell\");\n-        }\n-\n-        this.value.take_unwrap()\n-    }\n-\n-    /// Yields the value if the cell is full, or `None` if it is empty.\n-    pub fn take_opt(&self) -> Option<T> {\n-        let this = unsafe { cast::transmute_mut(self) };\n-        this.value.take()\n-    }\n-\n-    /// Returns true if the cell is empty and false if the cell is full.\n-    pub fn is_empty(&self) -> bool {\n-        self.value.is_none()\n-    }\n-}\n-\n-#[test]\n-fn test_basic() {\n-    let value_cell = Cell::new(~10);\n-    assert!(!value_cell.is_empty());\n-    let value = value_cell.take();\n-    assert!(value == ~10);\n-    assert!(value_cell.is_empty());\n-}\n-\n-#[test]\n-#[should_fail]\n-fn test_take_empty() {\n-    let value_cell: Cell<~int> = Cell::new(~0);\n-    value_cell.take();\n-    value_cell.take();\n-}\n-\n-\n /// A mutable memory location with dynamically checked borrow rules\n #[no_freeze]\n pub struct RefCell<T> {"}, {"sha": "41337075aa9b96f28952e37b322464d1d5ba0980", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -31,7 +31,7 @@ use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n use io::buffered::LineBufferedWriter;\n-use rt::rtio::{IoFactory, RtioTTY, RtioFileStream, DontClose};\n+use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n use super::{Reader, Writer, io_error, IoError, OtherIoError,\n             standard_error, EndOfFile};\n "}, {"sha": "fa47ceb1c045385b54517cf897f65597b41b348b", "filename": "src/libstd/rt/basic.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Frt%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Frt%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbasic.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -159,11 +159,9 @@ impl EventLoop for BasicLoop {\n         ~BasicRemote::new(self.messages.clone(), id) as ~RemoteCallback\n     }\n \n-    fn io(&mut self) -> &'static mut IoFactory:'static {\n-        unsafe {\n-            let factory: &mut IoFactory = self.io;\n-            cast::transmute(factory)\n-        }\n+    fn io<'a>(&'a mut self) -> Option<&'a mut IoFactory> {\n+        let factory: &mut IoFactory = self.io;\n+        Some(factory)\n     }\n }\n "}, {"sha": "05cc051a23e643758cd270b0214be41fa71f1657", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -39,7 +39,7 @@ pub trait EventLoop {\n     fn remote_callback(&mut self, ~Callback) -> ~RemoteCallback;\n \n     /// The asynchronous I/O services. Not all event loops may provide one.\n-    fn io(&mut self) -> &'static mut IoFactory:'static;\n+    fn io<'a>(&'a mut self) -> Option<&'a mut IoFactory>;\n }\n \n pub trait RemoteCallback {\n@@ -78,19 +78,19 @@ pub enum CloseBehavior {\n     CloseAsynchronously,\n }\n \n-pub struct LocalIo {\n-    factory: &'static mut IoFactory:'static,\n+pub struct LocalIo<'a> {\n+    priv factory: &'a mut IoFactory,\n }\n \n #[unsafe_destructor]\n-impl Drop for LocalIo {\n+impl<'a> Drop for LocalIo<'a> {\n     fn drop(&mut self) {\n         // XXX(pcwalton): Do nothing here for now, but eventually we may want\n         // something. For now this serves to make `LocalIo` noncopyable.\n     }\n }\n \n-impl LocalIo {\n+impl<'a> LocalIo<'a> {\n     /// Returns the local I/O: either the local scheduler's I/O services or\n     /// the native I/O services.\n     pub fn borrow() -> LocalIo {\n@@ -102,8 +102,13 @@ impl LocalIo {\n             let sched: Option<*mut Scheduler> = Local::try_unsafe_borrow();\n             match sched {\n                 Some(sched) => {\n-                    return LocalIo {\n-                        factory: (*sched).event_loop.io(),\n+                    match (*sched).event_loop.io() {\n+                        Some(factory) => {\n+                            return LocalIo {\n+                                factory: factory,\n+                            }\n+                        }\n+                        None => {}\n                     }\n                 }\n                 None => {}\n@@ -120,7 +125,9 @@ impl LocalIo {\n \n     /// Returns the underlying I/O factory as a trait reference.\n     #[inline]\n-    pub fn get(&mut self) -> &'static mut IoFactory {\n+    pub fn get<'a>(&'a mut self) -> &'a mut IoFactory {\n+        // XXX(pcwalton): I think this is actually sound? Could borrow check\n+        // allow this safely?\n         unsafe {\n             cast::transmute_copy(&self.factory)\n         }"}, {"sha": "b148df248334d3329d7278aabd4ccaf33e85ee04", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -90,8 +90,9 @@ fn main() {\n     for i in range(1u, num_tasks) {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n+        let num_chan_2 = num_chan.clone();\n         let new_future = do Future::spawn() {\n-            thread_ring(i, msg_per_task, num_chan, num_port)\n+            thread_ring(i, msg_per_task, num_chan_2, num_port)\n         };\n         futures.push(new_future);\n         num_chan = new_chan;"}, {"sha": "ea241d267c7ce57edee404a7ee5aa5a5ae95d9c1", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a513bef7fe3c6f5128cc53135facca37f23e5/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=fd7a513bef7fe3c6f5128cc53135facca37f23e5", "patch": "@@ -86,8 +86,9 @@ fn main() {\n     for i in range(1u, num_tasks) {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n+        let num_chan_2 = num_chan.clone();\n         let new_future = do Future::spawn {\n-            thread_ring(i, msg_per_task, num_chan, num_port)\n+            thread_ring(i, msg_per_task, num_chan_2, num_port)\n         };\n         futures.push(new_future);\n         num_chan = new_chan;"}]}