{"sha": "17e1f23209439fda5b4fb47ab1eedc82524e786b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZTFmMjMyMDk0MzlmZGE1YjRmYjQ3YWIxZWVkYzgyNTI0ZTc4NmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-04T05:24:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-04T05:24:34Z"}, "message": "Rollup merge of #64817 - csmoe:closure, r=nikomatsakis\n\nReplace ClosureSubsts with SubstsRef\n\nAddresses https://github.com/rust-lang/rust/issues/42340 part 3\nhttps://github.com/rust-lang/rust/pull/59312 might benefit from this clean up.\nr? @nikomatsakis", "tree": {"sha": "f32af0602ad0eb0ef731a5da41b08e374d8dd171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32af0602ad0eb0ef731a5da41b08e374d8dd171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17e1f23209439fda5b4fb47ab1eedc82524e786b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlteSCRBK7hj4Ov3rIwAAdHIIAElVUYw+zzteie8mgKPaYF3e\nyG2t9KmHM+vCRpFjPSJEl3mdCPpMXgXaz3IyXLrnMh+7UOlEbplIeh5IuujCDVBX\nYE29BOlNgfG0IU7BkAstzJbZJbc6oFuiHilEvtmzVtXdVefPOCHKFqfDUm1EEFTd\nTJkpCpSBQzgsNtf4l6aJmFj1SSwjsHm1fFDtaeuA6SJl8lfx/PmJamhOPMLopMUA\nl0U92wcaG/t2QBwFAOZowI8GrgnfZcf9dX069vbfT6dkdXHnmnWOkPtMAIVd2DY2\nYCKyjthZwhxXJ+W1GYpRStaCh3+9Xlfmf3qWAlCVVwcAcskOc8enDHZofQG1UWI=\n=pQkj\n-----END PGP SIGNATURE-----\n", "payload": "tree f32af0602ad0eb0ef731a5da41b08e374d8dd171\nparent 314fbf48cf15bcddea29e17158996a56326aa264\nparent 9b91bef78b15dfecc5144b0575f40a2d84ea795a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570166674 +0200\ncommitter GitHub <noreply@github.com> 1570166674 +0200\n\nRollup merge of #64817 - csmoe:closure, r=nikomatsakis\n\nReplace ClosureSubsts with SubstsRef\n\nAddresses https://github.com/rust-lang/rust/issues/42340 part 3\nhttps://github.com/rust-lang/rust/pull/59312 might benefit from this clean up.\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17e1f23209439fda5b4fb47ab1eedc82524e786b", "html_url": "https://github.com/rust-lang/rust/commit/17e1f23209439fda5b4fb47ab1eedc82524e786b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17e1f23209439fda5b4fb47ab1eedc82524e786b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314fbf48cf15bcddea29e17158996a56326aa264", "url": "https://api.github.com/repos/rust-lang/rust/commits/314fbf48cf15bcddea29e17158996a56326aa264", "html_url": "https://github.com/rust-lang/rust/commit/314fbf48cf15bcddea29e17158996a56326aa264"}, {"sha": "9b91bef78b15dfecc5144b0575f40a2d84ea795a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91bef78b15dfecc5144b0575f40a2d84ea795a", "html_url": "https://github.com/rust-lang/rust/commit/9b91bef78b15dfecc5144b0575f40a2d84ea795a"}], "stats": {"total": 293, "additions": 151, "deletions": 142}, "files": [{"sha": "b89731273f7e22465ef00dc17e361a563d3970b8", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let ty_msg = match local_visitor.found_ty {\n             Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = substs.closure_sig(*def_id, self.tcx);\n+                let fn_sig = substs.as_closure().sig(*def_id, self.tcx);\n                 let args = closure_args(&fn_sig);\n                 let ret = fn_sig.output().skip_binder().to_string();\n                 format!(\" for the closure `fn({}) -> {}`\", args, ret)\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let suffix = match local_visitor.found_ty {\n             Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = substs.closure_sig(*def_id, self.tcx);\n+                let fn_sig = substs.as_closure().sig(*def_id, self.tcx);\n                 let ret = fn_sig.output().skip_binder().to_string();\n \n                 if let Some(ExprKind::Closure(_, decl, body_id, ..)) = local_visitor.found_closure {"}, {"sha": "ea9e931ad838e83c71ec470ace67064e717acb08", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1504,9 +1504,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn closure_kind(\n         &self,\n         closure_def_id: DefId,\n-        closure_substs: ty::ClosureSubsts<'tcx>,\n+        closure_substs: SubstsRef<'tcx>,\n     ) -> Option<ty::ClosureKind> {\n-        let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self.tcx);\n+        let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self.tcx);\n         let closure_kind_ty = self.shallow_resolve(closure_kind_ty);\n         closure_kind_ty.to_opt_closure_kind()\n     }\n@@ -1518,9 +1518,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn closure_sig(\n         &self,\n         def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> ty::PolyFnSig<'tcx> {\n-        let closure_sig_ty = substs.closure_sig_ty(def_id, self.tcx);\n+        let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n         let closure_sig_ty = self.shallow_resolve(closure_sig_ty);\n         closure_sig_ty.fn_sig(self.tcx)\n     }"}, {"sha": "e7205dd47a6172c657913b72673d90e1c34ca56c", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -722,11 +722,11 @@ where\n             ty::Closure(def_id, ref substs) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n \n-                for upvar_ty in substs.upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in substs.as_closure().upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.closure_sig_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_closure().sig_ty(def_id, self.tcx).visit_with(self);\n             }\n \n             ty::Generator(def_id, ref substs, _) => {\n@@ -886,7 +886,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n                 let generics = self.tcx.generics_of(def_id);\n                 let substs =\n-                    self.tcx.mk_substs(substs.substs.iter().enumerate().map(|(index, &kind)| {\n+                    self.tcx.mk_substs(substs.iter().enumerate().map(|(index, &kind)| {\n                         if index < generics.parent_count {\n                             // Accommodate missing regions in the parent kinds...\n                             self.fold_kind_mapping_missing_regions_to_empty(kind)\n@@ -896,7 +896,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                         }\n                     }));\n \n-                self.tcx.mk_closure(def_id, ty::ClosureSubsts { substs })\n+                self.tcx.mk_closure(def_id, substs)\n             }\n \n             ty::Generator(def_id, substs, movability) => {"}, {"sha": "355bf97e6ed6920ca5a02d79983f282b7bbe767e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -740,16 +740,18 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         let ty = self.node_ty(fn_hir_id)?;\n         let kind = match ty.kind {\n             ty::Generator(..) => ty::ClosureKind::FnOnce,\n-            ty::Closure(closure_def_id, closure_substs) => {\n+            ty::Closure(closure_def_id, substs) => {\n                 match self.infcx {\n                     // During upvar inference we may not know the\n                     // closure kind, just use the LATTICE_BOTTOM value.\n                     Some(infcx) =>\n-                        infcx.closure_kind(closure_def_id, closure_substs)\n-                             .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n+                        infcx.closure_kind(\n+                            closure_def_id,\n+                            substs\n+                        ).unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>\n-                        closure_substs.closure_kind(closure_def_id, self.tcx),\n+                        substs.as_closure().kind(closure_def_id, self.tcx),\n                 }\n             }\n             _ => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", ty),"}, {"sha": "59b4f24073398bfd2ae2f221793137b98aae414c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -15,7 +15,7 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{\n-    self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n+    self, AdtDef, CanonicalUserTypeAnnotations, GeneratorSubsts, Region, Ty, TyCtxt,\n     UserTypeAnnotationIndex,\n };\n \n@@ -2188,7 +2188,7 @@ pub enum AggregateKind<'tcx> {\n     /// active field index would identity the field `c`\n     Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n-    Closure(DefId, ClosureSubsts<'tcx>),\n+    Closure(DefId, SubstsRef<'tcx>),\n     Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n }\n "}, {"sha": "ed8086b8fafec5c200d9de0388681102237f9ce0", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Ty};\n+use crate::ty::{CanonicalUserTypeAnnotation, GeneratorSubsts, Ty};\n use crate::mir::*;\n use syntax_pos::Span;\n \n@@ -230,12 +230,6 @@ macro_rules! make_mir_visitor {\n                 self.super_substs(substs);\n             }\n \n-            fn visit_closure_substs(&mut self,\n-                                    substs: & $($mutability)? ClosureSubsts<'tcx>,\n-                                    _: Location) {\n-                self.super_closure_substs(substs);\n-            }\n-\n             fn visit_generator_substs(&mut self,\n                                       substs: & $($mutability)? GeneratorSubsts<'tcx>,\n                                     _: Location) {\n@@ -627,7 +621,7 @@ macro_rules! make_mir_visitor {\n                                 _,\n                                 closure_substs\n                             ) => {\n-                                self.visit_closure_substs(closure_substs, location);\n+                                self.visit_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(\n                                 _,\n@@ -856,10 +850,6 @@ macro_rules! make_mir_visitor {\n                                       _substs: & $($mutability)? GeneratorSubsts<'tcx>) {\n             }\n \n-            fn super_closure_substs(&mut self,\n-                                    _substs: & $($mutability)? ClosureSubsts<'tcx>) {\n-            }\n-\n             // Convenience methods\n \n             fn visit_location(&mut self, body: & $($mutability)? Body<'tcx>, location: Location) {"}, {"sha": "7f194c2fbbc0f1b6099d3d68aa1dd1108d73b44c", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -619,7 +619,7 @@ pub struct VtableGeneratorData<'tcx, N> {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct VtableClosureData<'tcx, N> {\n     pub closure_def_id: DefId,\n-    pub substs: ty::ClosureSubsts<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     /// Nested obligations. This can be non-empty if the closure\n     /// signature contains associated types.\n     pub nested: Vec<N>"}, {"sha": "a7bb29c699e0e59c7a50589806ef2577adba53b9", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1334,7 +1334,8 @@ fn confirm_closure_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n     let infcx = selcx.infcx();\n-    let closure_sig_ty = vtable.substs.closure_sig_ty(vtable.closure_def_id, tcx);\n+    let closure_sig_ty = vtable.substs\n+        .as_closure().sig_ty(vtable.closure_def_id, tcx);\n     let closure_sig = infcx.shallow_resolve(closure_sig_ty).fn_sig(tcx);\n     let Normalized {\n         value: closure_sig,"}, {"sha": "eaf5971e4592f32044765236d47701f36a4e49a6", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -213,6 +213,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         // check if *any* of those are trivial.\n         ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n         ty::Closure(def_id, ref substs) => substs\n+            .as_closure()\n             .upvar_tys(def_id, tcx)\n             .all(|t| trivial_dropck_outlives(tcx, t)),\n "}, {"sha": "1fae2a2fe8dbffc783595f05aacbf58e5f2541a7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -2051,7 +2051,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     \"assemble_unboxed_candidates: kind={:?} obligation={:?}\",\n                     kind, obligation\n                 );\n-                match self.infcx.closure_kind(closure_def_id, closure_substs) {\n+                match self.infcx.closure_kind(\n+                    closure_def_id,\n+                    closure_substs\n+                ) {\n                     Some(closure_kind) => {\n                         debug!(\n                             \"assemble_unboxed_candidates: closure_kind = {:?}\",\n@@ -2669,7 +2672,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Closure(def_id, substs) => {\n                 // (*) binder moved here\n                 Where(ty::Binder::bind(\n-                    substs.upvar_tys(def_id, self.tcx()).collect(),\n+                    substs.as_closure().upvar_tys(def_id, self.tcx()).collect(),\n                 ))\n             }\n \n@@ -2753,7 +2756,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 tys.iter().map(|k| k.expect_ty()).collect()\n             }\n \n-            ty::Closure(def_id, ref substs) => substs.upvar_tys(def_id, self.tcx()).collect(),\n+            ty::Closure(def_id, ref substs) => substs.as_closure()\n+                .upvar_tys(def_id, self.tcx())\n+                .collect(),\n \n             ty::Generator(def_id, ref substs, _) => {\n                 let witness = substs.witness(def_id, self.tcx());\n@@ -3370,17 +3375,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         )?);\n \n         // FIXME: chalk\n+\n         if !self.tcx().sess.opts.debugging_opts.chalk {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::Predicate::ClosureKind(closure_def_id, substs, kind),\n+                ty::Predicate::ClosureKind(\n+                    closure_def_id,\n+                    substs,\n+                    kind\n+                ),\n             ));\n         }\n \n         Ok(VtableClosureData {\n             closure_def_id,\n-            substs: substs.clone(),\n+            substs: substs,\n             nested: obligations,\n         })\n     }\n@@ -3869,7 +3879,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         closure_def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n         debug!(\n             \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\","}, {"sha": "5aad6c1dc18322825a760050565cb4701c5e0355", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -29,7 +29,7 @@ use crate::traits;\n use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n use crate::ty::{self, DefIdTree, Ty, TypeAndMut};\n use crate::ty::{TyS, TyKind, List};\n-use crate::ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n+use crate::ty::{AdtKind, AdtDef, GeneratorSubsts, Region, Const};\n use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use crate::ty::RegionKind;\n use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid, ConstVid};\n@@ -2502,7 +2502,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n     #[inline]\n-    pub fn mk_closure(self, closure_id: DefId, closure_substs: ClosureSubsts<'tcx>)\n+    pub fn mk_closure(self, closure_id: DefId, closure_substs: SubstsRef<'tcx>)\n                       -> Ty<'tcx> {\n         self.mk_ty(Closure(closure_id, closure_substs))\n     }"}, {"sha": "b513ef5a96670213afccf3b7a18f388526b0da18", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -106,7 +106,7 @@ impl FlagComputation {\n             &ty::Closure(_, ref substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n-                self.add_substs(&substs.substs);\n+                self.add_substs(substs);\n             }\n \n             &ty::Bound(debruijn, _) => {"}, {"sha": "34f806b15c0c6c32defa00f6855279fbab99eb36", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> Instance<'tcx> {\n             // Shims currently have type FnPtr. Not sure this should remain.\n             ty::FnPtr(_) => ty.fn_sig(tcx),\n             ty::Closure(def_id, substs) => {\n-                let sig = substs.closure_sig(def_id, tcx);\n+                let sig = substs.as_closure().sig(def_id, tcx);\n \n                 let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 sig.map_bound(|sig| tcx.mk_fn_sig(\n@@ -315,14 +315,14 @@ impl<'tcx> Instance<'tcx> {\n     pub fn resolve_closure(\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: ty::SubstsRef<'tcx>,\n         requested_kind: ty::ClosureKind,\n     ) -> Instance<'tcx> {\n-        let actual_kind = substs.closure_kind(def_id, tcx);\n+        let actual_kind = substs.as_closure().kind(def_id, tcx);\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n             Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n-            _ => Instance::new(def_id, substs.substs)\n+            _ => Instance::new(def_id, substs)\n         }\n     }\n \n@@ -335,7 +335,7 @@ impl<'tcx> Instance<'tcx> {\n     pub fn fn_once_adapter_instance(\n         tcx: TyCtxt<'tcx>,\n         closure_did: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: ty::SubstsRef<'tcx>,\n     ) -> Instance<'tcx> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n                closure_did,\n@@ -348,7 +348,7 @@ impl<'tcx> Instance<'tcx> {\n \n         let self_ty = tcx.mk_closure(closure_did, substs);\n \n-        let sig = substs.closure_sig(closure_did, tcx);\n+        let sig = substs.as_closure().sig(closure_did, tcx);\n         let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         assert_eq!(sig.inputs().len(), 1);\n         let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);"}, {"sha": "6e01e1bf26a53cd2363c61a91464b36888fce6d6", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -674,7 +674,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, &substs)?,\n \n             ty::Closure(def_id, ref substs) => {\n-                let tys = substs.upvar_tys(def_id, tcx);\n+                let tys = substs.as_closure().upvar_tys(def_id, tcx);\n                 univariant(&tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,\n                     &ReprOptions::default(),\n                     StructKind::AlwaysSized)?\n@@ -2147,7 +2147,7 @@ where\n \n             // Tuples, generators and closures.\n             ty::Closure(def_id, ref substs) => {\n-                substs.upvar_tys(def_id, tcx).nth(i).unwrap()\n+                substs.as_closure().upvar_tys(def_id, tcx).nth(i).unwrap()\n             }\n \n             ty::Generator(def_id, ref substs, _) => {"}, {"sha": "cfd859c33c2ef179c6242b0da1ed6d6e8cabf418", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1111,7 +1111,7 @@ pub enum Predicate<'tcx> {\n     /// No direct syntax. May be thought of as `where T: FnFoo<...>`\n     /// for some substitutions `...` and `T` being a closure type.\n     /// Satisfied (or refuted) once we know the closure's kind.\n-    ClosureKind(DefId, ClosureSubsts<'tcx>, ClosureKind),\n+    ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),\n \n     /// `T1 <: T2`\n     Subtype(PolySubtypePredicate<'tcx>),\n@@ -1458,7 +1458,7 @@ impl<'tcx> Predicate<'tcx> {\n                 WalkTysIter::None\n             }\n             ty::Predicate::ClosureKind(_closure_def_id, closure_substs, _kind) => {\n-                WalkTysIter::Types(closure_substs.substs.types())\n+                WalkTysIter::Types(closure_substs.types())\n             }\n             ty::Predicate::ConstEvaluatable(_, substs) => {\n                 WalkTysIter::Types(substs.types())"}, {"sha": "3ea767d5115984e067baf243e82c2d2bb95abb25", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // projection).\n         match ty.kind {\n             ty::Closure(def_id, ref substs) => {\n-                for upvar_ty in substs.upvar_tys(def_id, *self) {\n+                for upvar_ty in substs.as_closure().upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);\n                 }\n             }"}, {"sha": "21c018d9ee6de5a3e2719f52ceacd8221be5beda", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -8,7 +8,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::ConstValue;\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, ClosureSubsts, Const, GeneratorSubsts, Instance, Ty, TyCtxt};\n+use rustc::ty::{self, Const, GeneratorSubsts, Instance, Ty, TyCtxt};\n use rustc::{bug, hir};\n use std::fmt::Write;\n use std::iter;\n@@ -154,8 +154,8 @@ impl DefPathBasedNames<'tcx> {\n                     self.push_type_name(sig.output(), output, debug);\n                 }\n             }\n-            ty::Generator(def_id, GeneratorSubsts { ref substs }, _)\n-            | ty::Closure(def_id, ClosureSubsts { ref substs }) => {\n+            ty::Generator(def_id, GeneratorSubsts { substs }, _)\n+            | ty::Closure(def_id, substs) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n                 let substs = substs.truncate_to(self.tcx, generics);"}, {"sha": "ad4be788dae4e49cdde02124c17b5381d8b9c7a0", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -649,7 +649,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n-                let upvar_tys = substs.upvar_tys(did, self.tcx());\n+                let upvar_tys = substs.as_closure().upvar_tys(did, self.tcx());\n                 p!(write(\"[closure\"));\n \n                 // FIXME(eddyb) should use `def_span`.\n@@ -689,8 +689,8 @@ pub trait PrettyPrinter<'tcx>:\n                 if self.tcx().sess.verbose() {\n                     p!(write(\n                         \" closure_kind_ty={:?} closure_sig_ty={:?}\",\n-                        substs.closure_kind_ty(did, self.tcx()),\n-                        substs.closure_sig_ty(did, self.tcx())\n+                        substs.as_closure().kind(did, self.tcx()),\n+                        substs.as_closure().sig_ty(did, self.tcx())\n                     ));\n                 }\n "}, {"sha": "5489c6f5d5afba67540fe5e12aaad357c952cb7c", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -442,7 +442,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             // the (anonymous) type of the same closure expression. So\n             // all of their regions should be equated.\n             let substs = relation.relate(&a_substs, &b_substs)?;\n-            Ok(tcx.mk_closure(a_id, substs))\n+            Ok(tcx.mk_closure(a_id, &substs))\n         }\n \n         (&ty::RawPtr(ref a_mt), &ty::RawPtr(ref b_mt)) =>"}, {"sha": "3f09bf749edc8a6eb71b74c05c07b9bf488375c1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -159,7 +159,7 @@ pub enum TyKind<'tcx> {\n \n     /// The anonymous type of a closure. Used to represent the type of\n     /// `|a| a`.\n-    Closure(DefId, ClosureSubsts<'tcx>),\n+    Closure(DefId, SubstsRef<'tcx>),\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n@@ -305,8 +305,8 @@ static_assert_size!(TyKind<'_>, 24);\n /// type parameters is similar, but the role of CK and CS are\n /// different. CK represents the \"yield type\" and CS represents the\n /// \"return type\" of the generator.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with the types of the upvars.\n@@ -357,15 +357,15 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// Returns the closure kind for this closure; may return a type\n     /// variable during inference. To get the closure kind during\n     /// inference, use `infcx.closure_kind(def_id, substs)`.\n-    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+    pub fn kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n     /// Returns the type representing the closure signature for this\n     /// closure; may contain type variables during inference. To get\n     /// the closure signature during inference, use\n     /// `infcx.fn_sig(def_id)`.\n-    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+    pub fn sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n \n@@ -374,7 +374,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_kind()`.\n-    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n+    pub fn kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n \n@@ -383,8 +383,8 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_sig()`.\n-    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.closure_sig_ty(def_id, tcx);\n+    pub fn sig(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n+        let ty = self.sig_ty(def_id, tcx);\n         match ty.kind {\n             ty::FnPtr(sig) => sig,\n             _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.kind),\n@@ -569,7 +569,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n \n #[derive(Debug, Copy, Clone)]\n pub enum UpvarSubsts<'tcx> {\n-    Closure(ClosureSubsts<'tcx>),\n+    Closure(SubstsRef<'tcx>),\n     Generator(GeneratorSubsts<'tcx>),\n }\n \n@@ -578,10 +578,10 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     pub fn upvar_tys(\n         self,\n         def_id: DefId,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let upvar_kinds = match self {\n-            UpvarSubsts::Closure(substs) => substs.split(def_id, tcx).upvar_kinds,\n+            UpvarSubsts::Closure(substs) => substs.as_closure().split(def_id, tcx).upvar_kinds,\n             UpvarSubsts::Generator(substs) => substs.split(def_id, tcx).upvar_kinds,\n         };\n         upvar_kinds.iter().map(|t| {\n@@ -2148,7 +2148,7 @@ impl<'tcx> TyS<'tcx> {\n             Adt(_, substs) | Opaque(_, substs) => {\n                 out.extend(substs.regions())\n             }\n-            Closure(_, ClosureSubsts { ref substs }) |\n+            Closure(_, ref substs ) |\n             Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 out.extend(substs.regions())\n             }"}, {"sha": "537192b0a2e58dccf61c50aaa0a09a033b97ac46", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -5,6 +5,7 @@ use crate::infer::canonical::Canonical;\n use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n+use crate::ty::sty::ClosureSubsts;\n \n use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -183,6 +184,16 @@ pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;\n pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n \n impl<'a, 'tcx> InternalSubsts<'tcx> {\n+    /// Interpret these substitutions as the substitutions of a closure type.\n+    /// Closure substitutions have a particular structure controlled by the\n+    /// compiler that encodes information like the signature and closure kind;\n+    /// see `ty::ClosureSubsts` struct for more comments.\n+    pub fn as_closure(&'a self) -> ClosureSubsts<'a> {\n+        ClosureSubsts {\n+            substs: self,\n+        }\n+    }\n+\n     /// Creates a `InternalSubsts` that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| {"}, {"sha": "d0e95a18c59fcb046656a17cbe36d376b25530a0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -642,12 +642,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// wrapped in a binder.\n     pub fn closure_env_ty(self,\n                           closure_def_id: DefId,\n-                          closure_substs: ty::ClosureSubsts<'tcx>)\n+                          closure_substs: SubstsRef<'tcx>)\n                           -> Option<ty::Binder<Ty<'tcx>>>\n     {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n         let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-        let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self);\n+        let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self);\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {\n             ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),\n@@ -1108,7 +1108,9 @@ fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>\n         // Structural recursion.\n         ty::Array(ty, _) | ty::Slice(ty) => needs_drop(ty),\n \n-        ty::Closure(def_id, ref substs) => substs.upvar_tys(def_id, tcx).any(needs_drop),\n+        ty::Closure(def_id, ref substs) => {\n+            substs.as_closure().upvar_tys(def_id, tcx).any(needs_drop)\n+        }\n \n         // Pessimistically assume that all generators will require destructors\n         // as we don't know if a destructor is a noop or not until after the MIR"}, {"sha": "1895ab83674eb634384c0c53734db9fb1bfaa385", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -111,7 +111,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n             stack.extend(substs.types().rev());\n         }\n         ty::Closure(_, ref substs) => {\n-            stack.extend(substs.substs.types().rev());\n+            stack.extend(substs.types().rev());\n         }\n         ty::Generator(_, ref substs, _) => {\n             stack.extend(substs.substs.types().rev());"}, {"sha": "ecb075e30b14d11508499b0196fd5b43764071fe", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // anyway, except via auto trait matching (which\n                     // only inspects the upvar types).\n                     subtys.skip_current_subtree(); // subtree handled by compute_projection\n-                    for upvar_ty in substs.upvar_tys(def_id, self.infcx.tcx) {\n+                    for upvar_ty in substs.as_closure().upvar_tys(def_id, self.infcx.tcx) {\n                         self.compute(upvar_ty);\n                     }\n                 }"}, {"sha": "e69f4b6aca19a9e9d45b596e44966fe5dc25858b", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -6,7 +6,7 @@ use super::utils::{debug_context, DIB, span_start,\n                    get_namespace_for_item, create_DIArray, is_node_local_to_unit};\n use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n-use super::{CrateDebugContext};\n+use super::CrateDebugContext;\n use crate::abi;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n@@ -682,7 +682,7 @@ pub fn type_metadata(\n \n         }\n         ty::Closure(def_id, substs) => {\n-            let upvar_tys : Vec<_> = substs.upvar_tys(def_id, cx.tcx).collect();\n+            let upvar_tys : Vec<_> = substs.as_closure().upvar_tys(def_id, cx.tcx).collect();\n             let containing_scope = get_namespace_for_item(cx, def_id);\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "5787447d6230fc2aa100f72ff363a9afb7d05577", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -615,7 +615,8 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             };\n \n             let (def_id, upvar_substs) = match closure_layout.ty.kind {\n-                ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n+                ty::Closure(def_id, substs) => (def_id,\n+                    UpvarSubsts::Closure(substs)),\n                 ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n                 _ => bug!(\"upvar debuginfo with non-closure arg0 type `{}`\", closure_layout.ty)\n             };"}, {"sha": "6ffa561f3fecf456627d8b29474e15cd26c45d33", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -201,7 +201,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         match operand.layout.ty.kind {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = Instance::resolve_closure(\n-                                    bx.cx().tcx(), def_id, substs, ty::ClosureKind::FnOnce);\n+                                    bx.cx().tcx(),\n+                                    def_id,\n+                                    substs,\n+                                    ty::ClosureKind::FnOnce);\n                                 OperandValue::Immediate(bx.cx().get_fn(instance))\n                             }\n                             _ => {"}, {"sha": "5bcb3b4ceb3ba33f06d3bc0331e52fad0fe4e3a8", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -224,7 +224,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::Opaque(def_id, substs) |\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n-            ty::Closure(def_id, ty::ClosureSubsts { substs }) |\n+            ty::Closure(def_id, substs) |\n             ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n                 self.print_def_path(def_id, substs)\n             }"}, {"sha": "2ad699d7c6f08808ab46a3f060940556ca5e1d95", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -414,7 +414,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Opaque(def_id, substs) |\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n-            ty::Closure(def_id, ty::ClosureSubsts { substs }) |\n+            ty::Closure(def_id, substs) |\n             ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n             }"}, {"sha": "49577b56b148b11b5aad5f86f78c6b3d03f4302e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1437,7 +1437,7 @@ impl EncodeContext<'tcx> {\n             }\n \n             ty::Closure(def_id, substs) => {\n-                let sig = substs.closure_sig(def_id, self.tcx);\n+                let sig = substs.as_closure().sig(def_id, self.tcx);\n                 let data = ClosureData { sig: self.lazy(sig) };\n                 EntryKind::Closure(self.lazy(data))\n             }"}, {"sha": "431361fa5a87b09a984415d8ac764184a48aeebe", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -341,7 +341,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             ty::Closure(def_id, closure_substs)\n                 if def_id == self.mir_def_id && upvar_field.is_some()\n             => {\n-                let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.infcx.tcx);\n+                let closure_kind_ty = closure_substs\n+                    .as_closure().kind_ty(def_id, self.infcx.tcx);\n                 let closure_kind = closure_kind_ty.to_opt_closure_kind();\n                 let capture_description = match closure_kind {\n                     Some(ty::ClosureKind::Fn) => {"}, {"sha": "0e22ead62d1c0b747b6976e71b77ffab2ecd65b7", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n };\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n+use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'tcx>(\n@@ -98,13 +98,6 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         self.super_generator_substs(substs);\n     }\n \n-    /// We sometimes have `closure_substs` within an rvalue, or within a\n-    /// call. Make them live at the location where they appear.\n-    fn visit_closure_substs(&mut self, substs: &ClosureSubsts<'tcx>, location: Location) {\n-        self.add_regular_live_constraint(*substs, location);\n-        self.super_closure_substs(substs);\n-    }\n-\n     fn visit_statement(\n         &mut self,\n         statement: &Statement<'tcx>,"}, {"sha": "7362ae9c638b137504897716006d9bba859c8957", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -875,7 +875,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         if let Some(ty::ReFree(free_region)) = self.to_error_region(fr) {\n             if let ty::BoundRegion::BrEnv = free_region.bound_region {\n                 if let DefiningTy::Closure(def_id, substs) = self.universal_regions.defining_ty {\n-                    let closure_kind_ty = substs.closure_kind_ty(def_id, infcx.tcx);\n+                    let closure_kind_ty = substs.as_closure().kind_ty(def_id, infcx.tcx);\n                     return Some(ty::ClosureKind::FnMut) == closure_kind_ty.to_opt_closure_kind();\n                 }\n             }"}, {"sha": "6fb976e0d84b291f9a584454a5afb53ae0f33a92", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -300,7 +300,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         };\n                         let region_name = self.synthesize_region_name(renctx);\n \n-                        let closure_kind_ty = substs.closure_kind_ty(def_id, tcx);\n+                        let closure_kind_ty = substs.as_closure().kind_ty(def_id, tcx);\n                         let note = match closure_kind_ty.to_opt_closure_kind() {\n                             Some(ty::ClosureKind::Fn) => {\n                                 \"closure implements `Fn`, so references to captured variables \\"}, {"sha": "014335711a5114bba2f1ad119645a356c9cc2d39", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n+use rustc::ty::{self, GeneratorSubsts, Ty, TypeFoldable};\n use rustc::mir::{Location, Body, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -96,16 +96,4 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n \n         debug!(\"visit_generator_substs: substs={:?}\", substs);\n     }\n-\n-    fn visit_closure_substs(&mut self, substs: &mut ClosureSubsts<'tcx>, location: Location) {\n-        debug!(\n-            \"visit_closure_substs(substs={:?}, location={:?})\",\n-            substs,\n-            location\n-        );\n-\n-        *substs = self.renumber_regions(substs);\n-\n-        debug!(\"visit_closure_substs: substs={:?}\", substs);\n-    }\n }"}, {"sha": "f55889794c24db9e386ff86b9a7862702de5e877", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -781,10 +781,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 ty::Adt(adt_def, substs) if !adt_def.is_enum() =>\n                     (&adt_def.variants[VariantIdx::new(0)], substs),\n                 ty::Closure(def_id, substs) => {\n-                    return match substs.upvar_tys(def_id, tcx).nth(field.index()) {\n+                    return match substs.as_closure().upvar_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.upvar_tys(def_id, tcx).count(),\n+                            field_count: substs.as_closure().upvar_tys(def_id, tcx).count(),\n                         }),\n                     }\n                 }\n@@ -1952,10 +1952,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             AggregateKind::Closure(def_id, substs) => {\n-                match substs.upvar_tys(def_id, tcx).nth(field_index) {\n+                match substs.as_closure().upvar_tys(def_id, tcx).nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.upvar_tys(def_id, tcx).count(),\n+                        field_count: substs.as_closure().upvar_tys(def_id, tcx).count(),\n                     }),\n                 }\n             }\n@@ -2068,7 +2068,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(body, tcx).kind {\n                             ty::Closure(def_id, substs) => {\n-                                substs.closure_sig_ty(def_id, tcx).fn_sig(tcx)\n+                                substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx)\n                             }\n                             _ => bug!(),\n                         };\n@@ -2540,7 +2540,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // desugaring. A closure gets desugared to a struct, and\n             // these extra requirements are basically like where\n             // clauses on the struct.\n-            AggregateKind::Closure(def_id, ty::ClosureSubsts { substs })\n+            AggregateKind::Closure(def_id, substs)\n             | AggregateKind::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n                 self.prove_closure_bounds(tcx, *def_id, substs, location)\n             }"}, {"sha": "e3efacff66a2fa50b9afafe9b1461dcfc4fb4fda", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -19,7 +19,7 @@ use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{InternalSubsts, SubstsRef, Subst};\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n@@ -85,7 +85,7 @@ pub struct UniversalRegions<'tcx> {\n pub enum DefiningTy<'tcx> {\n     /// The MIR is a closure. The signature is found via\n     /// `ClosureSubsts::closure_sig_ty`.\n-    Closure(DefId, ty::ClosureSubsts<'tcx>),\n+    Closure(DefId, SubstsRef<'tcx>),\n \n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n@@ -109,7 +109,9 @@ impl<'tcx> DefiningTy<'tcx> {\n     /// match up with the upvar order in the HIR, typesystem, and MIR.\n     pub fn upvar_tys(self, tcx: TyCtxt<'tcx>) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self {\n-            DefiningTy::Closure(def_id, substs) => Either::Left(substs.upvar_tys(def_id, tcx)),\n+            DefiningTy::Closure(def_id, substs) => Either::Left(\n+                substs.as_closure().upvar_tys(def_id, tcx)\n+            ),\n             DefiningTy::Generator(def_id, substs, _) => {\n                 Either::Right(Either::Left(substs.upvar_tys(def_id, tcx)))\n             }\n@@ -312,7 +314,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 err.note(&format!(\n                     \"defining type: {:?} with closure substs {:#?}\",\n                     def_id,\n-                    &substs.substs[..]\n+                    &substs[..]\n                 ));\n \n                 // FIXME: It'd be nice to print the late-bound regions\n@@ -546,7 +548,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n         let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, ClosureSubsts { ref substs })\n+            DefiningTy::Closure(_, ref substs)\n             | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n@@ -582,7 +584,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let closure_sig = substs.closure_sig_ty(def_id, tcx).fn_sig(tcx);\n+                let closure_sig = substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx);\n                 let inputs_and_output = closure_sig.inputs_and_output();\n                 let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 ty::Binder::fuse("}, {"sha": "e6f7a042f1c2b2ef17ebadedbe393b54418dfa10", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -506,7 +506,8 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         hir::ExprKind::Closure(..) => {\n             let closure_ty = cx.tables().expr_ty(expr);\n             let (def_id, substs, movability) = match closure_ty.kind {\n-                ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),\n+                ty::Closure(def_id, substs) => (def_id,\n+                    UpvarSubsts::Closure(substs), None),\n                 ty::Generator(def_id, substs, movability) => {\n                     (def_id, UpvarSubsts::Generator(substs), Some(movability))\n                 }\n@@ -1011,7 +1012,7 @@ fn convert_var(\n                                                            });\n                         Expr {\n                             ty: closure_ty,\n-                            temp_lifetime: temp_lifetime,\n+                            temp_lifetime,\n                             span: expr.span,\n                             kind: ExprKind::Deref {\n                                 arg: Expr {"}, {"sha": "dc3b7694c35c9b3800f588fab44a00d8da7ec210", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::Closure(def_id, ty::ClosureSubsts { substs })\n+            | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, ty::GeneratorSubsts { substs }, _)\n             => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "3ac837dd330fd0ffe22adec26fcfadeca21613c0", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -581,7 +581,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 match source_ty.kind {\n                     ty::Closure(def_id, substs) => {\n                         let instance = Instance::resolve_closure(\n-                            self.tcx, def_id, substs, ty::ClosureKind::FnOnce);\n+                            self.tcx, def_id,\n+                            substs, ty::ClosureKind::FnOnce);\n                         if should_monomorphize_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(instance));\n                         }"}, {"sha": "d089eafbb0798138acd0a854cc4ac56221d7f697", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -320,7 +320,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n         ty::Closure(def_id, substs) => {\n             builder.tuple_like_shim(\n                 dest, src,\n-                substs.upvar_tys(def_id, tcx)\n+                substs.as_closure().upvar_tys(def_id, tcx)\n             )\n         }\n         ty::Tuple(..) => builder.tuple_like_shim(dest, src, self_ty.tuple_fields()),"}, {"sha": "bdbf040276d22eee0df4adcab73e994f1da244fd", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -788,7 +788,7 @@ where\n         let ty = self.place_ty(self.place);\n         match ty.kind {\n             ty::Closure(def_id, substs) => {\n-                let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n+                let tys : Vec<_> = substs.as_closure().upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             // Note that `elaborate_drops` only drops the upvars of a generator,"}, {"sha": "13bbe021ccf34417e89f74300a5dfd7fd4e31017", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -266,7 +266,10 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n             let closure_ty = generic_types::closure(tcx, def_id);\n             let upvar_tys: Vec<_> = match &closure_ty.kind {\n                 ty::Closure(_, substs) => {\n-                    substs.upvar_tys(def_id, tcx).map(|ty| GenericArg::from(ty)).collect()\n+                    substs.as_closure()\n+                          .upvar_tys(def_id, tcx)\n+                          .map(|ty| GenericArg::from(ty))\n+                          .collect()\n                 },\n                 _ => bug!(),\n             };"}, {"sha": "7db1a7413c7be27351560ea7a5555cdeda478388", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -193,7 +193,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty.expect_ty()))\n             .collect(),\n \n-        ty::Closure(def_id, substs) => substs\n+        ty::Closure(def_id, substs) => substs.as_closure()\n             .upvar_tys(def_id, tcx)\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n             .collect(),"}, {"sha": "91ca6415bdcb94b84e0d9307ebbbb0ce6aef6f51", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -69,9 +69,7 @@ crate fn fn_def(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n }\n \n crate fn closure(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n-    tcx.mk_closure(def_id, ty::ClosureSubsts {\n-        substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n-    })\n+    tcx.mk_closure(def_id, InternalSubsts::bound_vars_for_item(tcx, def_id))\n }\n \n crate fn generator(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {"}, {"sha": "300b730b5bbfad920eb9e02dcf475e3c06d95c12", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -7,6 +7,7 @@ use hir::def::Res;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::subst::SubstsRef;\n use rustc::{infer, traits};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_target::spec::abi;\n@@ -480,7 +481,7 @@ pub struct DeferredCallResolution<'tcx> {\n     adjustments: Vec<Adjustment<'tcx>>,\n     fn_sig: ty::FnSig<'tcx>,\n     closure_def_id: DefId,\n-    closure_substs: ty::ClosureSubsts<'tcx>,\n+    closure_substs: SubstsRef<'tcx>,\n }\n \n impl<'a, 'tcx> DeferredCallResolution<'tcx> {"}, {"sha": "03f0860c6605589637bcc7ba68bbd77621bc2a94", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -132,7 +132,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return self.tcx.mk_generator(expr_def_id, substs, movability);\n         }\n \n-        let substs = ty::ClosureSubsts { substs };\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n         debug!(\n@@ -161,14 +160,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype(\n             expr.span,\n             sig_fn_ptr_ty,\n-            substs.closure_sig_ty(expr_def_id, self.tcx),\n+            substs.as_closure().sig_ty(expr_def_id, self.tcx),\n         );\n \n         if let Some(kind) = opt_kind {\n             self.demand_eqtype(\n                 expr.span,\n                 kind.to_ty(self.tcx),\n-                substs.closure_kind_ty(expr_def_id, self.tcx),\n+                substs.as_closure().kind_ty(expr_def_id, self.tcx),\n             );\n         }\n "}, {"sha": "3a89cddda2362c8b47eff94d3e9d5cab6eef876f", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -61,7 +61,7 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n };\n-use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n+use rustc::ty::{self, TypeAndMut, Ty, subst::SubstsRef};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n@@ -727,7 +727,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn coerce_closure_to_fn(&self,\n                            a: Ty<'tcx>,\n                            def_id_a: DefId,\n-                           substs_a: ClosureSubsts<'tcx>,\n+                           substs_a: SubstsRef<'tcx>,\n                            b: Ty<'tcx>)\n                            -> CoerceResult<'tcx> {\n         //! Attempts to coerce from the type of a non-capturing closure"}, {"sha": "7380bf7536de587f76ddd6cebbb51cedd2b832cd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -4217,7 +4217,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Closure(def_id, substs) => {\n                 // We don't use `closure_sig` to account for malformed closures like\n                 // `|_: [_; continue]| {}` and instead we don't suggest anything.\n-                let closure_sig_ty = substs.closure_sig_ty(def_id, self.tcx);\n+                let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n                 (def_id, match closure_sig_ty.kind {\n                     ty::FnPtr(sig) => sig,\n                     _ => return false,"}, {"sha": "3f218e1d9fab1ee730c7299be294b8ef999f8d1b", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -96,7 +96,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Extract the type of the closure.\n         let ty = self.node_ty(closure_hir_id);\n         let (closure_def_id, substs) = match ty.kind {\n-            ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n+            ty::Closure(def_id, substs) => (\n+                def_id,\n+                UpvarSubsts::Closure(substs)\n+            ),\n             ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n             ty::Error => {\n                 // #51714: skip analysis when we have already encountered type errors\n@@ -190,7 +193,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Unify the (as yet unbound) type variable in the closure\n             // substs with the kind we inferred.\n             let inferred_kind = delegate.current_closure_kind;\n-            let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self.tcx);\n+            let closure_kind_ty = closure_substs\n+                .as_closure().kind_ty(closure_def_id, self.tcx);\n             self.demand_eqtype(span, inferred_kind.to_ty(self.tcx), closure_kind_ty);\n \n             // If we have an origin, store it."}, {"sha": "d973106058eafc37b5bc2ffe5ef615bf59780294", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e1f23209439fda5b4fb47ab1eedc82524e786b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=17e1f23209439fda5b4fb47ab1eedc82524e786b", "patch": "@@ -1362,10 +1362,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 return Some(tcx.typeck_tables_of(def_id).node_type(hir_id));\n             }\n \n-            let substs = ty::ClosureSubsts {\n-                substs: InternalSubsts::identity_for_item(tcx, def_id),\n-            };\n-\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             tcx.mk_closure(def_id, substs)\n         }\n \n@@ -1858,7 +1855,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             // the signature of a closure, you should use the\n             // `closure_sig` method on the `ClosureSubsts`:\n             //\n-            //    closure_substs.closure_sig(def_id, tcx)\n+            //    closure_substs.sig(def_id, tcx)\n             //\n             // or, inside of an inference context, you can use\n             //"}]}