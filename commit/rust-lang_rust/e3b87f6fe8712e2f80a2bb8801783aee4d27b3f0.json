{"sha": "e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYjg3ZjZmZTg3MTJlMmY4MGEyYmI4ODAxNzgzYWVlNGQyN2IzZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T06:40:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T06:40:23Z"}, "message": "Auto merge of #931 - RalfJung:retag-makes-my-head-hurt, r=RalfJung\n\nStacked Borrows: don't read from memory during retagging\n\nCurrently, retagging of a shared reference tries real hard to find the `UnsafeCell` and mark everything else as frozen. We even read enum discriminants to figure out the variant and determine if there is an `UnsafeCell` in there or not.\n\nUnfortunately, that leads to some very hard to analyze behavior: during retagging, we do read accesses, which are subject to the rules of Stacked Borrows and the existing tags! My head hurts when I try to think about this. It's just too recursive.\n\nThis PR simplifies the semantics by treating enums like unions: if any variant has an `UnsafeCell`, the entire thing behaves like an `UnsafeCell`. This means retagging no longer has to read from memory, the way it affects the stack is entirely determined by the type.", "tree": {"sha": "563b8e3a9868d043e82f4c7c5708798e0de2650a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563b8e3a9868d043e82f4c7c5708798e0de2650a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "html_url": "https://github.com/rust-lang/rust/commit/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26615807de144faefdea97ee4e7f4e024aa57d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/26615807de144faefdea97ee4e7f4e024aa57d9f", "html_url": "https://github.com/rust-lang/rust/commit/26615807de144faefdea97ee4e7f4e024aa57d9f"}, {"sha": "f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "html_url": "https://github.com/rust-lang/rust/commit/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "3eafb28b8949cffe50b439b92cb191f653b39f2f", "filename": "src/helpers.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "patch": "@@ -222,8 +222,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // This is `Freeze`, there cannot be an `UnsafeCell`\n                     Ok(())\n                 } else {\n-                    // Proceed further\n-                    self.walk_value(v)\n+                    // We want to not actually read from memory for this visit. So, before\n+                    // walking this value, we have to make sure it is not a\n+                    // `Variants::Multiple`.\n+                    match v.layout.variants {\n+                        layout::Variants::Multiple { .. } => {\n+                            // A multi-variant enum, or generator, or so.\n+                            // Treat this like a union: without reading from memory,\n+                            // we cannot determine the variant we are in. Reading from\n+                            // memory would be subject to Stacked Borrows rules, leading\n+                            // to all sorts of \"funny\" recursion.\n+                            // We only end up here if the type is *not* freeze, so we just call the\n+                            // `UnsafeCell` action.\n+                            (self.unsafe_cell_action)(v)\n+                        }\n+                        layout::Variants::Single { .. } => {\n+                            // Proceed further, try to find where exactly that `UnsafeCell`\n+                            // is hiding.\n+                            self.walk_value(v)\n+                        }\n+                    }\n                 }\n             }\n "}]}