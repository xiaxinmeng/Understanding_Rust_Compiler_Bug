{"sha": "68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "node_id": "C_kwDOAAsO6NoAKDY4Zjc3Mjk3YzBmMTk5ZTAwZmY5OGY0YjZiZDcxYTc0ZTc1ZWMwOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T13:19:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T13:19:36Z"}, "message": "Auto merge of #104102 - Dylan-DPC:rollup-0eakshe, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103757 (Mention const and lifetime parameters in error E0207)\n - #103986 (Don't silently eat label before block in block-like expr)\n - #104003 (Move some tests to more reasonable directories)\n - #104038 (Normalize types when deducing closure signature from supertraits)\n - #104052 (Fix `resolution_failure` ICE)\n - #104090 (Modify comment syntax error)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7af50e3e584c436407d65d26295f28e4f5cf3b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af50e3e584c436407d65d26295f28e4f5cf3b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "html_url": "https://github.com/rust-lang/rust/commit/68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "391ba78ab442610a63310b9a3d24646082628081", "url": "https://api.github.com/repos/rust-lang/rust/commits/391ba78ab442610a63310b9a3d24646082628081", "html_url": "https://github.com/rust-lang/rust/commit/391ba78ab442610a63310b9a3d24646082628081"}, {"sha": "81b8db2675330c5d7c0af2db2b90311bd1aec976", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b8db2675330c5d7c0af2db2b90311bd1aec976", "html_url": "https://github.com/rust-lang/rust/commit/81b8db2675330c5d7c0af2db2b90311bd1aec976"}], "stats": {"total": 364, "additions": 346, "deletions": 18}, "files": [{"sha": "95e7c9fc76ce2bf00c081a386e488c4dfcf05b6e", "filename": "compiler/rustc_error_codes/src/error_codes/E0207.md", "status": "modified", "additions": 71, "deletions": 4, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -1,4 +1,5 @@\n-A type parameter that is specified for `impl` is not constrained.\n+A type, const or lifetime parameter that is specified for `impl` is not\n+constrained.\n \n Erroneous code example:\n \n@@ -14,15 +15,18 @@ impl<T: Default> Foo {\n }\n ```\n \n-Any type parameter of an `impl` must meet at least one of\n-the following criteria:\n+Any type or const parameter of an `impl` must meet at least one of the\n+following criteria:\n \n  - it appears in the _implementing type_ of the impl, e.g. `impl<T> Foo<T>`\n  - for a trait impl, it appears in the _implemented trait_, e.g.\n    `impl<T> SomeTrait<T> for Foo`\n  - it is bound as an associated type, e.g. `impl<T, U> SomeTrait for T\n    where T: AnotherTrait<AssocType=U>`\n \n+Any unconstrained lifetime parameter of an `impl` is not supported if the\n+lifetime parameter is used by an associated type.\n+\n ### Error example 1\n \n Suppose we have a struct `Foo` and we would like to define some methods for it.\n@@ -32,7 +36,6 @@ The problem is that the parameter `T` does not appear in the implementing type\n (`Foo`) of the impl. In this case, we can fix the error by moving the type\n parameter from the `impl` to the method `get`:\n \n-\n ```\n struct Foo;\n \n@@ -128,6 +131,70 @@ impl<T: Default> Maker<Foo<T>> for FooMaker {\n }\n ```\n \n+### Error example 3\n+\n+Suppose we have a struct `Foo` and we would like to define some methods for it.\n+The following code example has a definition which leads to a compiler error:\n+\n+```compile_fail,E0207\n+struct Foo;\n+\n+impl<const T: i32> Foo {\n+    // error: the const parameter `T` is not constrained by the impl trait, self\n+    // type, or predicates [E0207]\n+    fn get(&self) -> i32 {\n+        i32::default()\n+    }\n+}\n+```\n+\n+The problem is that the const parameter `T` does not appear in the implementing\n+type (`Foo`) of the impl. In this case, we can fix the error by moving the type\n+parameter from the `impl` to the method `get`:\n+\n+\n+```\n+struct Foo;\n+\n+// Move the const parameter from the impl to the method\n+impl Foo {\n+    fn get<const T: i32>(&self) -> i32 {\n+        i32::default()\n+    }\n+}\n+```\n+\n+### Error example 4\n+\n+Suppose we have a struct `Foo` and a struct `Bar` that uses lifetime `'a`. We\n+would like to implement trait `Contains` for `Foo`. The trait `Contains` have\n+the associated type `B`. The following code example has a definition which\n+leads to a compiler error:\n+\n+```compile_fail,E0207\n+struct Foo;\n+struct Bar<'a>;\n+\n+trait Contains {\n+    type B;\n+\n+    fn get(&self) -> i32;\n+}\n+\n+impl<'a> Contains for Foo {\n+    type B = Bar<'a>;\n+\n+    // error: the lifetime parameter `'a` is not constrained by the impl trait,\n+    // self type, or predicates [E0207]\n+    fn get(&self) -> i32 {\n+        i32::default()\n+    }\n+}\n+```\n+\n+Please note that unconstrained lifetime parameters are not supported if they are\n+being used by an associated type.\n+\n ### Additional information\n \n For more information, please see [RFC 447]."}, {"sha": "3001e7994767296fc940ee2e653953c89b0dd1a3", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -10,6 +10,7 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n+use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty};\n@@ -22,7 +23,7 @@ use std::cmp;\n use std::iter;\n \n /// What signature do we *expect* the closure to have from context?\n-#[derive(Debug)]\n+#[derive(Debug, Clone, TypeFoldable, TypeVisitable)]\n struct ExpectedSig<'tcx> {\n     /// Span that gave us this expectation, if we know that.\n     cause_span: Option<Span>,\n@@ -241,9 +242,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if expected_sig.is_none()\n                 && let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder()\n             {\n-                expected_sig = self.deduce_sig_from_projection(\n+                expected_sig = self.normalize_associated_types_in(\n+                    obligation.cause.span,\n+                    self.deduce_sig_from_projection(\n                     Some(obligation.cause.span),\n-                    bound_predicate.rebind(proj_predicate),\n+                        bound_predicate.rebind(proj_predicate),\n+                    ),\n                 );\n             }\n "}, {"sha": "4612f54e4b17639292af0024191668a74d41f922", "filename": "compiler/rustc_macros/src/diagnostics/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -84,7 +84,7 @@ pub(crate) fn invalid_attr(attr: &Attribute, meta: &Meta) -> Diagnostic {\n     }\n }\n \n-/// Emit a error diagnostic for an invalid attribute (optionally performing additional decoration\n+/// Emit an error diagnostic for an invalid attribute (optionally performing additional decoration\n /// using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n ///\n /// For methods that return a `Result<_, DiagnosticDeriveError>`:\n@@ -126,7 +126,7 @@ pub(crate) fn invalid_nested_attr(attr: &Attribute, nested: &NestedMeta) -> Diag\n     }\n }\n \n-/// Emit a error diagnostic for an invalid nested attribute (optionally performing additional\n+/// Emit an error diagnostic for an invalid nested attribute (optionally performing additional\n /// decoration using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n ///\n /// For methods that return a `Result<_, DiagnosticDeriveError>`:"}, {"sha": "c609aa93da3a75b0d9cb50637ef85e18dce8bfe5", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -2468,11 +2468,15 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(crate) fn maybe_recover_unexpected_block_label(&mut self) -> bool {\n-        let Some(label) = self.eat_label().filter(|_| {\n-            self.eat(&token::Colon) && self.token.kind == token::OpenDelim(Delimiter::Brace)\n-        }) else {\n+        // Check for `'a : {`\n+        if !(self.check_lifetime()\n+            && self.look_ahead(1, |tok| tok.kind == token::Colon)\n+            && self.look_ahead(2, |tok| tok.kind == token::OpenDelim(Delimiter::Brace)))\n+        {\n             return false;\n-        };\n+        }\n+        let label = self.eat_label().expect(\"just checked if a label exists\");\n+        self.bump(); // eat `:`\n         let span = label.ident.span.to(self.prev_token.span);\n         let mut err = self.struct_span_err(span, \"block label not supported here\");\n         err.span_label(span, \"not supported here\");"}, {"sha": "3e0b0f735508e5859c382937b2bced3e8597eb95", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -139,7 +139,7 @@ impl Display for TryReserveError {\n                 \" because the computed capacity exceeded the collection's maximum\"\n             }\n             TryReserveErrorKind::AllocError { .. } => {\n-                \" because the memory allocator returned a error\"\n+                \" because the memory allocator returned an error\"\n             }\n         };\n         fmt.write_str(reason)"}, {"sha": "37a28b6b7bd84a17282686cdc40dc816d1e70ce6", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -402,6 +402,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })\n             .and_then(|self_id| match tcx.def_kind(self_id) {\n                 DefKind::Impl => self.def_id_to_res(self_id),\n+                DefKind::Use => None,\n                 def_kind => Some(Res::Def(def_kind, self_id)),\n             })\n     }\n@@ -1772,7 +1773,6 @@ fn resolution_failure(\n \n                     // Otherwise, it must be an associated item or variant\n                     let res = partial_res.expect(\"None case was handled by `last_found_module`\");\n-                    let name = res.name(tcx);\n                     let kind = match res {\n                         Res::Def(kind, _) => Some(kind),\n                         Res::Primitive(_) => None,\n@@ -1814,6 +1814,7 @@ fn resolution_failure(\n                     } else {\n                         \"associated item\"\n                     };\n+                    let name = res.name(tcx);\n                     let note = format!(\n                         \"the {} `{}` has no {} named `{}`\",\n                         res.descr(),"}, {"sha": "36f42fb15f7e426958718afb548ee4bc46528a91", "filename": "src/test/rustdoc-ui/issue-103997.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Frustdoc-ui%2Fissue-103997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Frustdoc-ui%2Fissue-103997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-103997.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+\n+pub fn foo() {}\n+\n+/// [`foo`](Self::foo) //~ WARNING unresolved link to `Self::foo`\n+pub use foo as bar;"}, {"sha": "c06db91496f86c4348487e55b8cc442a4d47fd10", "filename": "src/test/rustdoc-ui/issue-103997.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Frustdoc-ui%2Fissue-103997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Frustdoc-ui%2Fissue-103997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-103997.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -0,0 +1,10 @@\n+warning: unresolved link to `Self::foo`\n+  --> $DIR/issue-103997.rs:5:13\n+   |\n+LL | /// [`foo`](Self::foo)\n+   |             ^^^^^^^^^ no item named `Self` in scope\n+   |\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "270bf14c35eca445458fe31e2d86fe03db7ca954", "filename": "src/test/ui/closures/supertrait-hint-references-assoc-ty.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fclosures%2Fsupertrait-hint-references-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fclosures%2Fsupertrait-hint-references-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fsupertrait-hint-references-assoc-ty.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+pub trait Fn0: Fn(i32) -> Self::Out {\n+    type Out;\n+}\n+\n+impl<F: Fn(i32) -> ()> Fn0 for F {\n+    type Out = ();\n+}\n+\n+pub fn closure_typer(_: impl Fn0) {}\n+\n+fn main() {\n+    closure_typer(move |x| {\n+        let _: i64 = x.into();\n+    });\n+}"}, {"sha": "99a7949db173c862b45287a1794b5ff42a5be85b", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -46,7 +46,7 @@ const C: bool = true;\n trait Trait {}\n impl dyn Trait { fn existing() {} }\n \n-// FIXME: Should be a error for edition > 2015\n+// FIXME: Should be an error for edition > 2015\n #[cfg_accessible(Trait::existing)] //~ ERROR not sure\n const A: bool = true;\n #[cfg_accessible(Trait::unresolved)] //~ ERROR not sure"}, {"sha": "d4e1df22770948d7ecaba87a6fc9625b55d97c0f", "filename": "src/test/ui/consts/issue-54954.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-54954.rs"}, {"sha": "668985c2b5914c6bcc4c74d23c720cd8fce360c9", "filename": "src/test/ui/consts/issue-54954.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54954.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-54954.stderr"}, {"sha": "ec682d96081e3a750ece7b470048013657d4a2e2", "filename": "src/test/ui/dropck/issue-54943-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fdropck%2Fissue-54943-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fdropck%2Fissue-54943-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-54943-1.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-54943-1.rs"}, {"sha": "d400ae58db4a1653c78dc94dd33dea2003f0eba4", "filename": "src/test/ui/dropck/issue-54943-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fdropck%2Fissue-54943-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fdropck%2Fissue-54943-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-54943-2.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-54943-2.rs"}, {"sha": "b7f71dd1ce354c2500733bb364ec8b52ce265530", "filename": "src/test/ui/match/issue-12552.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fmatch%2Fissue-12552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fmatch%2Fissue-12552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-12552.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-12552.rs"}, {"sha": "4b027eba2c25ea43ed1b2f456669847b6b45b989", "filename": "src/test/ui/match/issue-12552.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fmatch%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fmatch%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-12552.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-12552.stderr"}, {"sha": "85722300bf0064160093dcb2d0676d551eedaf23", "filename": "src/test/ui/nll/issue-54943.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fnll%2Fissue-54943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fnll%2Fissue-54943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54943.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-54943.rs"}, {"sha": "59be0f983b9078fb7ed47495f96034d5256a7f93", "filename": "src/test/ui/nll/issue-54943.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fnll%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fnll%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54943.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-54943.stderr"}, {"sha": "55f3f8f9f5f036fadf7ddd210bd62a75fbede024", "filename": "src/test/ui/parser/label-after-block-like.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -0,0 +1,43 @@\n+fn a() {\n+    if let () = () 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn b() {\n+    if true 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn c() {\n+    loop 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn d() {\n+    while true 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn e() {\n+    while let () = () 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn f() {\n+    for _ in 0..0 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn g() {\n+    unsafe 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn main() {}"}, {"sha": "8ff50b124b32bc2c5282a7d08501a48222b2ed46", "filename": "src/test/ui/parser/label-after-block-like.stderr", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -0,0 +1,176 @@\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:2:20\n+   |\n+LL |     if let () = () 'a {}\n+   |                    ---^^\n+   |                    | |\n+   |                    | help: add `:` after the label\n+   |                    the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:2:20\n+   |\n+LL |     if let () = () 'a {}\n+   |                    ^^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/label-after-block-like.rs:2:8\n+   |\n+LL |     if let () = () 'a {}\n+   |        ^^^^^^^^^^^\n+help: try placing this code inside a block\n+   |\n+LL |     if let () = () { 'a {} }\n+   |                    +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:8:13\n+   |\n+LL |     if true 'a {}\n+   |             ---^^\n+   |             | |\n+   |             | help: add `:` after the label\n+   |             the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:8:13\n+   |\n+LL |     if true 'a {}\n+   |             ^^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/label-after-block-like.rs:8:8\n+   |\n+LL |     if true 'a {}\n+   |        ^^^^\n+help: try placing this code inside a block\n+   |\n+LL |     if true { 'a {} }\n+   |             +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:14:10\n+   |\n+LL |     loop 'a {}\n+   |          ---^^\n+   |          | |\n+   |          | help: add `:` after the label\n+   |          the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:14:10\n+   |\n+LL |     loop 'a {}\n+   |     ---- ^^ expected `{`\n+   |     |\n+   |     while parsing this `loop` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     loop { 'a {} }\n+   |          +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:20:16\n+   |\n+LL |     while true 'a {}\n+   |                ---^^\n+   |                | |\n+   |                | help: add `:` after the label\n+   |                the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:20:16\n+   |\n+LL |     while true 'a {}\n+   |     ----- ---- ^^ expected `{`\n+   |     |     |\n+   |     |     this `while` condition successfully parsed\n+   |     while parsing the body of this `while` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     while true { 'a {} }\n+   |                +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:26:23\n+   |\n+LL |     while let () = () 'a {}\n+   |                       ---^^\n+   |                       | |\n+   |                       | help: add `:` after the label\n+   |                       the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:26:23\n+   |\n+LL |     while let () = () 'a {}\n+   |     ----- ----------- ^^ expected `{`\n+   |     |     |\n+   |     |     this `while` condition successfully parsed\n+   |     while parsing the body of this `while` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     while let () = () { 'a {} }\n+   |                       +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:32:19\n+   |\n+LL |     for _ in 0..0 'a {}\n+   |                   ---^^\n+   |                   | |\n+   |                   | help: add `:` after the label\n+   |                   the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:32:19\n+   |\n+LL |     for _ in 0..0 'a {}\n+   |                   ^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     for _ in 0..0 { 'a {} }\n+   |                   +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:38:12\n+   |\n+LL |     unsafe 'a {}\n+   |            ---^^\n+   |            | |\n+   |            | help: add `:` after the label\n+   |            the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:38:12\n+   |\n+LL |     unsafe 'a {}\n+   |     ------ ^^ expected `{`\n+   |     |\n+   |     while parsing this `unsafe` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     unsafe { 'a {} }\n+   |            +       +\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "0b78fc1bb7fa2171e9410add6c211514ea7e9841", "filename": "src/test/ui/typeck/issue-10969.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-10969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-10969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-10969.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-10969.rs"}, {"sha": "f64b61aaeb05c942f3f5c6678e5d844c2d80ff38", "filename": "src/test/ui/typeck/issue-10969.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-10969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-10969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-10969.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-10969.stderr"}, {"sha": "7a8a12c2a93afb77069552dc1fedb5c327ea11c9", "filename": "src/test/ui/typeck/issue-50687-ice-on-borrow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-50687-ice-on-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-50687-ice-on-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-50687-ice-on-borrow.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-50687-ice-on-borrow.rs"}, {"sha": "e6a0edac4b1113d3c434532953901e7b6b195d57", "filename": "src/test/ui/typeck/issue-50687-ice-on-borrow.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-50687-ice-on-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftest%2Fui%2Ftypeck%2Fissue-50687-ice-on-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-50687-ice-on-borrow.stderr?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "previous_filename": "src/test/ui/issues/issue-50687-ice-on-borrow.stderr"}, {"sha": "2b82e9b3f998c246687eda81f96867d143b4b223", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f77297c0f199e00ff98f4b6bd71a74e75ec09c/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=68f77297c0f199e00ff98f4b6bd71a74e75ec09c", "patch": "@@ -9,8 +9,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 941;\n-const ISSUES_ENTRY_LIMIT: usize = 2117;\n+const ROOT_ENTRY_LIMIT: usize = 939;\n+const ISSUES_ENTRY_LIMIT: usize = 2105;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     for dir in Walk::new(&path.join(\"test/ui\")) {"}]}