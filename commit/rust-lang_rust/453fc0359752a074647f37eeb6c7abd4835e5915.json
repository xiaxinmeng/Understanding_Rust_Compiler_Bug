{"sha": "453fc0359752a074647f37eeb6c7abd4835e5915", "node_id": "C_kwDOAAsO6NoAKDQ1M2ZjMDM1OTc1MmEwNzQ2NDdmMzdlZWI2YzdhYmQ0ODM1ZTU5MTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-01T05:39:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-01T05:39:43Z"}, "message": "Rollup merge of #111892 - notriddle:notriddle/timeout-tooltip, r=me,GuillaumeGomez,Manishearth\n\nrustdoc: add interaction delays for tooltip popovers\n\nPreview:\n\n* [notable traits](http://notriddle.com/rustdoc-demo-html-3/delay-tooltip/testing/struct.Vec.html#method.iter)\n* [panicking code block](http://notriddle.com/rustdoc-demo-html-3/delay-tooltip/testing/struct.Vec.html#indexing)\n\nDesigning a good hover microinteraction is a matter of guessing user intent from what are, literally, vague gestures. In this case, guessing if hovering in our out of the tooltip base is intentional or not.\n\nTo figure this out, a few different techniques are used:\n\n* When the mouse pointer enters a tooltip anchor point, its hitbox is grown on the bottom, where the popover is/will appear. This was already there before this commit: search \"hover tunnel\" in rustdoc.css for the implementation.\n\n* This commit adds a delay when the mouse pointer enters the base anchor, in case the mouse pointer was just passing through and the user didn't want to open it.\n\n* This commit also adds a delay when the mouse pointer exits the tooltip's base anchor or its popover, before hiding it.\n\n* A fade-out animation is layered onto the pointer exit delay to immediately inform the user that they successfully dismissed the popover, while still providing a way for them to cancel it if it was a mistake and they still wanted to interact with it.\n\n* No animation is used for revealing it, because we don't want people to try to interact with an element while it's in the middle of fading in: either they're allowed to interact with it while it's fading in, meaning it can't serve as mistake- proofing for opening the popover, or they can't, but they might try and be frustrated.\n\nSee also:\n\n* https://www.nngroup.com/articles/timing-exposing-content/\n* https://www.nngroup.com/articles/tooltip-guidelines/\n* https://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown", "tree": {"sha": "022ca7f42e76e16d3759e1977d4c36d76f48030a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022ca7f42e76e16d3759e1977d4c36d76f48030a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/453fc0359752a074647f37eeb6c7abd4835e5915", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkeC8fCRBK7hj4Ov3rIwAAeVgIAFzr1wUSPyB6GSd+OjatxbJ/\nNf099rUe9AGQF85gljxs3Q3hj4KUHy0k3nXnf5pBNCCD64UyxRz44zw9UtwcobCf\nfQ9OMxdNOPpQKecdFxErXNX33JOsoalgyjFeOh0iu2eYNHom3RpPFgrsMrvWuoHP\n4P4ZWySxPk7aZ3D+9JPy7P2xpiDq2Pub/Xi6lrdpXAaBts8Dm0eHQ5AJCieuIAyb\nm/bfoboiX/Ld+N0hQ2k+dmtfgf3cu10G9E4d5yy5eE80h8dUbauVELfu0es46Ant\n3zHNpI4ZblUdOWaFnChHDwgqlNiyIvrcLjVxmwx5KSdrFjUlVR2AoIEd+wzGkAs=\n=+UGh\n-----END PGP SIGNATURE-----\n", "payload": "tree 022ca7f42e76e16d3759e1977d4c36d76f48030a\nparent 03d4299447c8e563d2d07dd2a8c618aa81f6700c\nparent d7d497a3c11ea7dc764d0f8d58a2a15cb395f5e9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1685597983 +0530\ncommitter GitHub <noreply@github.com> 1685597983 +0530\n\nRollup merge of #111892 - notriddle:notriddle/timeout-tooltip, r=me,GuillaumeGomez,Manishearth\n\nrustdoc: add interaction delays for tooltip popovers\n\nPreview:\n\n* [notable traits](http://notriddle.com/rustdoc-demo-html-3/delay-tooltip/testing/struct.Vec.html#method.iter)\n* [panicking code block](http://notriddle.com/rustdoc-demo-html-3/delay-tooltip/testing/struct.Vec.html#indexing)\n\nDesigning a good hover microinteraction is a matter of guessing user intent from what are, literally, vague gestures. In this case, guessing if hovering in our out of the tooltip base is intentional or not.\n\nTo figure this out, a few different techniques are used:\n\n* When the mouse pointer enters a tooltip anchor point, its hitbox is grown on the bottom, where the popover is/will appear. This was already there before this commit: search \"hover tunnel\" in rustdoc.css for the implementation.\n\n* This commit adds a delay when the mouse pointer enters the base anchor, in case the mouse pointer was just passing through and the user didn't want to open it.\n\n* This commit also adds a delay when the mouse pointer exits the tooltip's base anchor or its popover, before hiding it.\n\n* A fade-out animation is layered onto the pointer exit delay to immediately inform the user that they successfully dismissed the popover, while still providing a way for them to cancel it if it was a mistake and they still wanted to interact with it.\n\n* No animation is used for revealing it, because we don't want people to try to interact with an element while it's in the middle of fading in: either they're allowed to interact with it while it's fading in, meaning it can't serve as mistake- proofing for opening the popover, or they can't, but they might try and be frustrated.\n\nSee also:\n\n* https://www.nngroup.com/articles/timing-exposing-content/\n* https://www.nngroup.com/articles/tooltip-guidelines/\n* https://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/453fc0359752a074647f37eeb6c7abd4835e5915", "html_url": "https://github.com/rust-lang/rust/commit/453fc0359752a074647f37eeb6c7abd4835e5915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/453fc0359752a074647f37eeb6c7abd4835e5915/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d4299447c8e563d2d07dd2a8c618aa81f6700c", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d4299447c8e563d2d07dd2a8c618aa81f6700c", "html_url": "https://github.com/rust-lang/rust/commit/03d4299447c8e563d2d07dd2a8c618aa81f6700c"}, {"sha": "d7d497a3c11ea7dc764d0f8d58a2a15cb395f5e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d497a3c11ea7dc764d0f8d58a2a15cb395f5e9", "html_url": "https://github.com/rust-lang/rust/commit/d7d497a3c11ea7dc764d0f8d58a2a15cb395f5e9"}], "stats": {"total": 181, "additions": 169, "deletions": 12}, "files": [{"sha": "054cfe7597ea52fe6d5edcb8b10a4beb5e5d07a1", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/453fc0359752a074647f37eeb6c7abd4835e5915/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/453fc0359752a074647f37eeb6c7abd4835e5915/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=453fc0359752a074647f37eeb6c7abd4835e5915", "patch": "@@ -1179,6 +1179,10 @@ a.test-arrow:hover {\n \tposition: relative;\n }\n \n+.code-header a.tooltip:hover {\n+\tcolor: var(--link-color);\n+}\n+\n /* placeholder thunk so that the mouse can easily travel from \"(i)\" to popover\n \tthe resulting \"hover tunnel\" is a stepped triangle, approximating\n \thttps://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown */\n@@ -1191,6 +1195,14 @@ a.tooltip:hover::after {\n \tcontent: \"\\00a0\";\n }\n \n+/* This animation is layered onto the mistake-proofing delay for dismissing\n+\ta hovered tooltip, to ensure it feels responsive even with the delay.\n+\t*/\n+.fade-out {\n+\topacity: 0;\n+\ttransition: opacity 0.45s cubic-bezier(0, 0, 0.1, 1.0);\n+}\n+\n .popover.tooltip .content {\n \tmargin: 0.25em 0.5em;\n }"}, {"sha": "6da51ea0a55e7f58675dd0370972d48e3079450d", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 138, "deletions": 10, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/453fc0359752a074647f37eeb6c7abd4835e5915/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/453fc0359752a074647f37eeb6c7abd4835e5915/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=453fc0359752a074647f37eeb6c7abd4835e5915", "patch": "@@ -4,6 +4,13 @@\n \n \"use strict\";\n \n+// The amount of time that the cursor must remain still over a hover target before\n+// revealing a tooltip.\n+//\n+// https://www.nngroup.com/articles/timing-exposing-content/\n+window.RUSTDOC_TOOLTIP_HOVER_MS = 300;\n+window.RUSTDOC_TOOLTIP_HOVER_EXIT_MS = 450;\n+\n // Given a basename (e.g. \"storage\") and an extension (e.g. \".js\"), return a URL\n // for a resource under the root-path, with the resource-suffix.\n function resourcePath(basename, extension) {\n@@ -772,6 +779,13 @@ function preLoadCss(cssUrl) {\n         });\n     });\n \n+    /**\n+     * Show a tooltip immediately.\n+     *\n+     * @param {DOMElement} e - The tooltip's anchor point. The DOM is consulted to figure\n+     *                         out what the tooltip should contain, and where it should be\n+     *                         positioned.\n+     */\n     function showTooltip(e) {\n         const notable_ty = e.getAttribute(\"data-notable-ty\");\n         if (!window.NOTABLE_TRAITS && notable_ty) {\n@@ -782,20 +796,29 @@ function preLoadCss(cssUrl) {\n                 throw new Error(\"showTooltip() called with notable without any notable traits!\");\n             }\n         }\n+        // Make this function idempotent. If the tooltip is already shown, avoid doing extra work\n+        // and leave it alone.\n         if (window.CURRENT_TOOLTIP_ELEMENT && window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE === e) {\n-            // Make this function idempotent.\n+            clearTooltipHoverTimeout(window.CURRENT_TOOLTIP_ELEMENT);\n             return;\n         }\n         window.hideAllModals(false);\n         const wrapper = document.createElement(\"div\");\n         if (notable_ty) {\n             wrapper.innerHTML = \"<div class=\\\"content\\\">\" +\n                 window.NOTABLE_TRAITS[notable_ty] + \"</div>\";\n-        } else if (e.getAttribute(\"title\") !== undefined) {\n-            const titleContent = document.createElement(\"div\");\n-            titleContent.className = \"content\";\n-            titleContent.appendChild(document.createTextNode(e.getAttribute(\"title\")));\n-            wrapper.appendChild(titleContent);\n+        } else {\n+            // Replace any `title` attribute with `data-title` to avoid double tooltips.\n+            if (e.getAttribute(\"title\") !== null) {\n+                e.setAttribute(\"data-title\", e.getAttribute(\"title\"));\n+                e.removeAttribute(\"title\");\n+            }\n+            if (e.getAttribute(\"data-title\") !== null) {\n+                const titleContent = document.createElement(\"div\");\n+                titleContent.className = \"content\";\n+                titleContent.appendChild(document.createTextNode(e.getAttribute(\"data-title\")));\n+                wrapper.appendChild(titleContent);\n+            }\n         }\n         wrapper.className = \"tooltip popover\";\n         const focusCatcher = document.createElement(\"div\");\n@@ -824,17 +847,77 @@ function preLoadCss(cssUrl) {\n         wrapper.style.visibility = \"\";\n         window.CURRENT_TOOLTIP_ELEMENT = wrapper;\n         window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE = e;\n+        clearTooltipHoverTimeout(window.CURRENT_TOOLTIP_ELEMENT);\n+        wrapper.onpointerenter = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            clearTooltipHoverTimeout(e);\n+        };\n         wrapper.onpointerleave = function(ev) {\n             // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n             if (ev.pointerType !== \"mouse\") {\n                 return;\n             }\n-            if (!e.TOOLTIP_FORCE_VISIBLE && !elemIsInParent(event.relatedTarget, e)) {\n-                hideTooltip(true);\n+            if (!e.TOOLTIP_FORCE_VISIBLE && !elemIsInParent(ev.relatedTarget, e)) {\n+                // See \"Tooltip pointer leave gesture\" below.\n+                setTooltipHoverTimeout(e, false);\n+                addClass(wrapper, \"fade-out\");\n             }\n         };\n     }\n \n+    /**\n+     * Show or hide the tooltip after a timeout. If a timeout was already set before this function\n+     * was called, that timeout gets cleared. If the tooltip is already in the requested state,\n+     * this function will still clear any pending timeout, but otherwise do nothing.\n+     *\n+     * @param {DOMElement} element - The tooltip's anchor point. The DOM is consulted to figure\n+     *                               out what the tooltip should contain, and where it should be\n+     *                               positioned.\n+     * @param {boolean}    show    - If true, the tooltip will be made visible. If false, it will\n+     *                               be hidden.\n+     */\n+    function setTooltipHoverTimeout(element, show) {\n+        clearTooltipHoverTimeout(element);\n+        if (!show && !window.CURRENT_TOOLTIP_ELEMENT) {\n+            // To \"hide\" an already hidden element, just cancel its timeout.\n+            return;\n+        }\n+        if (show && window.CURRENT_TOOLTIP_ELEMENT) {\n+            // To \"show\" an already visible element, just cancel its timeout.\n+            return;\n+        }\n+        if (window.CURRENT_TOOLTIP_ELEMENT &&\n+            window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE !== element) {\n+            // Don't do anything if another tooltip is already visible.\n+            return;\n+        }\n+        element.TOOLTIP_HOVER_TIMEOUT = setTimeout(() => {\n+            if (show) {\n+                showTooltip(element);\n+            } else if (!element.TOOLTIP_FORCE_VISIBLE) {\n+                hideTooltip(false);\n+            }\n+        }, show ? window.RUSTDOC_TOOLTIP_HOVER_MS : window.RUSTDOC_TOOLTIP_HOVER_EXIT_MS);\n+    }\n+\n+    /**\n+     * If a show/hide timeout was set by `setTooltipHoverTimeout`, cancel it. If none exists,\n+     * do nothing.\n+     *\n+     * @param {DOMElement} element - The tooltip's anchor point,\n+     *                               as passed to `setTooltipHoverTimeout`.\n+     */\n+    function clearTooltipHoverTimeout(element) {\n+        if (element.TOOLTIP_HOVER_TIMEOUT !== undefined) {\n+            removeClass(window.CURRENT_TOOLTIP_ELEMENT, \"fade-out\");\n+            clearTimeout(element.TOOLTIP_HOVER_TIMEOUT);\n+            delete element.TOOLTIP_HOVER_TIMEOUT;\n+        }\n+    }\n+\n     function tooltipBlurHandler(event) {\n         if (window.CURRENT_TOOLTIP_ELEMENT &&\n             !elemIsInParent(document.activeElement, window.CURRENT_TOOLTIP_ELEMENT) &&\n@@ -854,6 +937,12 @@ function preLoadCss(cssUrl) {\n         }\n     }\n \n+    /**\n+     * Hide the current tooltip immediately.\n+     *\n+     * @param {boolean} focus - If set to `true`, move keyboard focus to the tooltip anchor point.\n+     *                          If set to `false`, leave keyboard focus alone.\n+     */\n     function hideTooltip(focus) {\n         if (window.CURRENT_TOOLTIP_ELEMENT) {\n             if (window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE.TOOLTIP_FORCE_VISIBLE) {\n@@ -864,6 +953,7 @@ function preLoadCss(cssUrl) {\n             }\n             const body = document.getElementsByTagName(\"body\")[0];\n             body.removeChild(window.CURRENT_TOOLTIP_ELEMENT);\n+            clearTooltipHoverTimeout(window.CURRENT_TOOLTIP_ELEMENT);\n             window.CURRENT_TOOLTIP_ELEMENT = null;\n         }\n     }\n@@ -886,7 +976,14 @@ function preLoadCss(cssUrl) {\n             if (ev.pointerType !== \"mouse\") {\n                 return;\n             }\n-            showTooltip(this);\n+            setTooltipHoverTimeout(this, true);\n+        };\n+        e.onpointermove = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            setTooltipHoverTimeout(this, true);\n         };\n         e.onpointerleave = function(ev) {\n             // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n@@ -895,7 +992,38 @@ function preLoadCss(cssUrl) {\n             }\n             if (!this.TOOLTIP_FORCE_VISIBLE &&\n                 !elemIsInParent(ev.relatedTarget, window.CURRENT_TOOLTIP_ELEMENT)) {\n-                hideTooltip(true);\n+                // Tooltip pointer leave gesture:\n+                //\n+                // Designing a good hover microinteraction is a matter of guessing user\n+                // intent from what are, literally, vague gestures. In this case, guessing if\n+                // hovering in or out of the tooltip base is intentional or not.\n+                //\n+                // To figure this out, a few different techniques are used:\n+                //\n+                // * When the mouse pointer enters a tooltip anchor point, its hitbox is grown\n+                //   on the bottom, where the popover is/will appear. Search \"hover tunnel\" in\n+                //   rustdoc.css for the implementation.\n+                // * There's a delay when the mouse pointer enters the popover base anchor, in\n+                //   case the mouse pointer was just passing through and the user didn't want\n+                //   to open it.\n+                // * Similarly, a delay is added when exiting the anchor, or the popover\n+                //   itself, before hiding it.\n+                // * A fade-out animation is layered onto the pointer exit delay to immediately\n+                //   inform the user that they successfully dismissed the popover, while still\n+                //   providing a way for them to cancel it if it was a mistake and they still\n+                //   wanted to interact with it.\n+                // * No animation is used for revealing it, because we don't want people to try\n+                //   to interact with an element while it's in the middle of fading in: either\n+                //   they're allowed to interact with it while it's fading in, meaning it can't\n+                //   serve as mistake-proofing for the popover, or they can't, but\n+                //   they might try and be frustrated.\n+                //\n+                // See also:\n+                // * https://www.nngroup.com/articles/timing-exposing-content/\n+                // * https://www.nngroup.com/articles/tooltip-guidelines/\n+                // * https://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown\n+                setTooltipHoverTimeout(e, false);\n+                addClass(window.CURRENT_TOOLTIP_ELEMENT, \"fade-out\");\n             }\n         };\n     });"}, {"sha": "7be5e39ba4727f87ee42622bcb84482078794cea", "filename": "tests/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/453fc0359752a074647f37eeb6c7abd4835e5915/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/453fc0359752a074647f37eeb6c7abd4835e5915/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=453fc0359752a074647f37eeb6c7abd4835e5915", "patch": "@@ -40,6 +40,7 @@ define-function: (\n             \"background-color\": |background|,\n             \"border-color\": |border|,\n         })\n+        click: \".docblock .example-wrap.compile_fail .tooltip\"\n \n         // should_panic block\n         assert-css: (\n@@ -71,6 +72,7 @@ define-function: (\n             \"background-color\": |background|,\n             \"border-color\": |border|,\n         })\n+        click: \".docblock .example-wrap.should_panic .tooltip\"\n \n         // ignore block\n         assert-css: ("}, {"sha": "371931d51fccc76ef7207072ee8af87ca70c7c4c", "filename": "tests/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/453fc0359752a074647f37eeb6c7abd4835e5915/tests%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/453fc0359752a074647f37eeb6c7abd4835e5915/tests%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fnotable-trait.goml?ref=453fc0359752a074647f37eeb6c7abd4835e5915", "patch": "@@ -122,7 +122,7 @@ assert-count: (\"//*[@class='tooltip popover']\", 0)\n // Now check the colors.\n define-function: (\n     \"check-colors\",\n-    (theme, header_color, content_color, type_color, trait_color),\n+    (theme, header_color, content_color, type_color, trait_color, link_color),\n     block {\n         go-to: \"file://\" + |DOC_PATH| + \"/test_docs/struct.NotableStructWithLongName.html\"\n         // This is needed to ensure that the text color is computed.\n@@ -133,8 +133,20 @@ define-function: (\n         // We reload the page so the local storage settings are being used.\n         reload:\n \n+        assert-css: (\n+             \"//*[@id='method.create_an_iterator_from_read']//*[@class='tooltip']\",\n+             {\"color\": |content_color|},\n+             ALL,\n+        )\n+\n         move-cursor-to: \"//*[@id='method.create_an_iterator_from_read']//*[@class='tooltip']\"\n-        assert-count: (\".tooltip.popover\", 1)\n+        wait-for-count: (\".tooltip.popover\", 1)\n+\n+        assert-css: (\n+             \"//*[@id='method.create_an_iterator_from_read']//*[@class='tooltip']\",\n+             {\"color\": |link_color|},\n+             ALL,\n+        )\n \n         assert-css: (\n              \".tooltip.popover h3\",\n@@ -163,6 +175,7 @@ call-function: (\n     \"check-colors\",\n     {\n         \"theme\": \"ayu\",\n+        \"link_color\": \"rgb(57, 175, 215)\",\n         \"content_color\": \"rgb(230, 225, 207)\",\n         \"header_color\": \"rgb(255, 255, 255)\",\n         \"type_color\": \"rgb(255, 160, 165)\",\n@@ -174,6 +187,7 @@ call-function: (\n     \"check-colors\",\n     {\n         \"theme\": \"dark\",\n+        \"link_color\": \"rgb(210, 153, 29)\",\n         \"content_color\": \"rgb(221, 221, 221)\",\n         \"header_color\": \"rgb(221, 221, 221)\",\n         \"type_color\": \"rgb(45, 191, 184)\",\n@@ -185,6 +199,7 @@ call-function: (\n     \"check-colors\",\n     {\n         \"theme\": \"light\",\n+        \"link_color\": \"rgb(56, 115, 173)\",\n         \"content_color\": \"rgb(0, 0, 0)\",\n         \"header_color\": \"rgb(0, 0, 0)\",\n         \"type_color\": \"rgb(173, 55, 138)\","}]}