{"sha": "4413141ea96cfe4edbe417f352b13160556bd48e", "node_id": "C_kwDOAAsO6NoAKDQ0MTMxNDFlYTk2Y2ZlNGVkYmU0MTdmMzUyYjEzMTYwNTU2YmQ0OGU", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-12-27T04:32:17Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-12-27T04:32:17Z"}, "message": "rustdoc: Fix ICE report", "tree": {"sha": "5f05ed97e878ae95e344c1a79dbbcefafded4611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f05ed97e878ae95e344c1a79dbbcefafded4611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4413141ea96cfe4edbe417f352b13160556bd48e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4413141ea96cfe4edbe417f352b13160556bd48e", "html_url": "https://github.com/rust-lang/rust/commit/4413141ea96cfe4edbe417f352b13160556bd48e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4413141ea96cfe4edbe417f352b13160556bd48e/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98309298d927307c5184f4869604bd068d26183", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98309298d927307c5184f4869604bd068d26183", "html_url": "https://github.com/rust-lang/rust/commit/e98309298d927307c5184f4869604bd068d26183"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "42a0ca3d052c709926b2e4a6123e82f4eb87a4da", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4413141ea96cfe4edbe417f352b13160556bd48e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4413141ea96cfe4edbe417f352b13160556bd48e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=4413141ea96cfe4edbe417f352b13160556bd48e", "patch": "@@ -64,7 +64,7 @@ pub const EXIT_FAILURE: i32 = 1;\n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/issues/new\\\n     ?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\";\n \n-const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"Z\", \"C\", \"crate-type\"];\n+const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"-Z\", \"-C\", \"--crate-type\"];\n \n const ICE_REPORT_COMPILER_FLAGS_EXCLUDE: &[&str] = &[\"metadata\", \"extra-filename\"];\n \n@@ -1108,31 +1108,31 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n /// debugging, since some ICEs only happens with non-default compiler flags\n /// (and the users don't always report them).\n fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n-    let args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).collect::<Vec<_>>();\n+    let mut args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).peekable();\n \n-    // Avoid printing help because of empty args. This can suggest the compiler\n-    // itself is not the program root (consider RLS).\n-    if args.len() < 2 {\n-        return None;\n-    }\n-\n-    let matches = handle_options(&args)?;\n     let mut result = Vec::new();\n     let mut excluded_cargo_defaults = false;\n-    for flag in ICE_REPORT_COMPILER_FLAGS {\n-        let prefix = if flag.len() == 1 { \"-\" } else { \"--\" };\n-\n-        for content in &matches.opt_strs(flag) {\n-            // Split always returns the first element\n-            let name = if let Some(first) = content.split('=').next() { first } else { &content };\n-\n-            let content =\n-                if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) { name } else { content };\n-\n-            if !ICE_REPORT_COMPILER_FLAGS_EXCLUDE.contains(&name) {\n-                result.push(format!(\"{}{} {}\", prefix, flag, content));\n+    while let Some(arg) = args.next() {\n+        if let Some(a) = ICE_REPORT_COMPILER_FLAGS.iter().find(|a| arg.starts_with(*a)) {\n+            let content = if arg.len() == a.len() {\n+                match args.next() {\n+                    Some(arg) => arg.to_string(),\n+                    None => continue,\n+                }\n+            } else if arg.get(a.len()..a.len() + 1) == Some(\"=\") {\n+                arg[a.len() + 1..].to_string()\n             } else {\n+                arg[a.len()..].to_string()\n+            };\n+            if ICE_REPORT_COMPILER_FLAGS_EXCLUDE.iter().any(|exc| content.starts_with(exc)) {\n                 excluded_cargo_defaults = true;\n+            } else {\n+                result.push(a.to_string());\n+                match ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.iter().find(|s| content.starts_with(*s))\n+                {\n+                    Some(s) => result.push(s.to_string()),\n+                    None => result.push(content),\n+                }\n             }\n         }\n     }"}]}