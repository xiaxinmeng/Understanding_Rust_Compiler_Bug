{"sha": "177b0d2f578353fe026c6fa4810bd9427e385a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3N2IwZDJmNTc4MzUzZmUwMjZjNmZhNDgxMGJkOTQyN2UzODVhOTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-14T20:13:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-14T20:13:40Z"}, "message": "Rustup to rustc 1.41.0-nightly (ded5ee001 2019-11-13)", "tree": {"sha": "cb58145f32ed99efd8dadba5ce54087e7f5bdf5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb58145f32ed99efd8dadba5ce54087e7f5bdf5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/177b0d2f578353fe026c6fa4810bd9427e385a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/177b0d2f578353fe026c6fa4810bd9427e385a99", "html_url": "https://github.com/rust-lang/rust/commit/177b0d2f578353fe026c6fa4810bd9427e385a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/177b0d2f578353fe026c6fa4810bd9427e385a99/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7507e014e3f334d8e61c39319181a424b0f6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7507e014e3f334d8e61c39319181a424b0f6ee", "html_url": "https://github.com/rust-lang/rust/commit/ff7507e014e3f334d8e61c39319181a424b0f6ee"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "2935a8bd3d3340fe3abc2ca6d8011d68a696f18c", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177b0d2f578353fe026c6fa4810bd9427e385a99/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/177b0d2f578353fe026c6fa4810bd9427e385a99/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=177b0d2f578353fe026c6fa4810bd9427e385a99", "patch": "@@ -5,7 +5,7 @@ version = \"0.0.0\"\n \n [dependencies]\n core = { path = \"./sysroot_src/src/libcore\" }\n-compiler_builtins = \"0.1\"\n+compiler_builtins = \"=0.1.20\" # FIXME use \"0.1\" once libstd has updated for the latest version\n alloc = { path = \"./sysroot_src/src/liballoc\" }\n std = { path = \"./sysroot_src/src/libstd\", features = [\"panic_unwind\", \"backtrace\"] }\n test = { path = \"./sysroot_src/src/libtest\" }"}, {"sha": "9e3e4f82a39b95556ba78afd6bbd9b2291d3a3ad", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=177b0d2f578353fe026c6fa4810bd9427e385a99", "patch": "@@ -581,7 +581,7 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n                         &ty::RegionKind::ReErased,\n                         TypeAndMut {\n                             ty,\n-                            mutbl: crate::rustc::hir::Mutability::MutMutable,\n+                            mutbl: crate::rustc::hir::Mutability::Mutable,\n                         },\n                     ),\n                 );"}, {"sha": "8031367b23bb214913d9479161062a4f7e3fe887", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=177b0d2f578353fe026c6fa4810bd9427e385a99", "patch": "@@ -20,7 +20,7 @@ pub fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) ->\n     });\n     if any_dynamic_crate {\n         false\n-    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n+    } else if let Some(kind) = tcx.allocator_kind() {\n         codegen_inner(tcx.sess, module, kind);\n         true\n     } else {"}, {"sha": "1bd8afed5087d03a8c282bbce6f5ab5eadb35e01", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=177b0d2f578353fe026c6fa4810bd9427e385a99", "patch": "@@ -72,7 +72,7 @@ pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types:\n \n /// Is a pointer to this type a fat ptr?\n pub fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc::hir::Mutability::MutImmutable });\n+    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc::hir::Mutability::Immutable });\n     match &tcx.layout_of(ParamEnv::reveal_all().and(ptr_ty)).unwrap().abi {\n         Abi::Scalar(_) => false,\n         Abi::ScalarPair(_, _) => true,"}, {"sha": "6ccc4692947fdc63cfc01166f7190cd03ebc8157", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=177b0d2f578353fe026c6fa4810bd9427e385a99", "patch": "@@ -6,6 +6,7 @@ use rustc::mir::interpret::{\n use rustc::ty::{layout::Align, Const};\n use rustc_mir::interpret::{\n     ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer, StackPopCleanup,\n+    StackPopInfo,\n };\n \n use cranelift_module::*;\n@@ -407,6 +408,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         _: &[OpTy<'tcx>],\n         _: Option<PlaceTy<'tcx>>,\n         _: Option<BasicBlock>,\n+        _: Option<BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir Body<'tcx>>> {\n         panic!();\n     }\n@@ -416,7 +418,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         _: Span,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n-        _: PlaceTy<'tcx>,\n+        _: Option<PlaceTy<'tcx>>,\n+        _: Option<BasicBlock>,\n+        _: Option<BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         panic!();\n     }\n@@ -469,8 +473,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         Ok(())\n     }\n \n-    fn stack_pop(_: &mut InterpCx<'mir, 'tcx, Self>, _: ()) -> InterpResult<'tcx> {\n-        Ok(())\n+    fn stack_pop(_: &mut InterpCx<'mir, 'tcx, Self>, _: (), _: bool) -> InterpResult<'tcx, StackPopInfo> {\n+        Ok(StackPopInfo::Normal)\n     }\n }\n "}, {"sha": "fcee67bfec6e40d6bb0bdbf20f9a2a029a844b33", "filename": "src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177b0d2f578353fe026c6fa4810bd9427e385a99/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=177b0d2f578353fe026c6fa4810bd9427e385a99", "patch": "@@ -351,14 +351,14 @@ impl<'tcx> CPlace<'tcx> {\n             to_ty: Ty<'tcx>,\n         ) {\n             match (&from_ty.kind, &to_ty.kind) {\n-                (ty::Ref(_, t, MutImmutable), ty::Ref(_, u, MutImmutable))\n-                | (ty::Ref(_, t, MutMutable), ty::Ref(_, u, MutImmutable))\n-                | (ty::Ref(_, t, MutMutable), ty::Ref(_, u, MutMutable)) => {\n+                (ty::Ref(_, t, Immutable), ty::Ref(_, u, Immutable))\n+                | (ty::Ref(_, t, Mutable), ty::Ref(_, u, Immutable))\n+                | (ty::Ref(_, t, Mutable), ty::Ref(_, u, Mutable)) => {\n                     assert_assignable(fx, t, u);\n                     // &mut T -> &T is allowed\n                     // &'a T -> &'b T is allowed\n                 }\n-                (ty::Ref(_, _, MutImmutable), ty::Ref(_, _, MutMutable)) => panic!(\n+                (ty::Ref(_, _, Immutable), ty::Ref(_, _, Mutable)) => panic!(\n                     \"Cant assign value of type {} to place of type {}\",\n                     from_ty, to_ty\n                 ),"}]}