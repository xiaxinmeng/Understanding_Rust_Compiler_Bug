{"sha": "05466c61380366cfd1969bb9f4eb26cff2acaedd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NDY2YzYxMzgwMzY2Y2ZkMTk2OWJiOWY0ZWIyNmNmZjJhY2FlZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-18T01:12:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T00:41:56Z"}, "message": "rt: Use an enum to represent the task state", "tree": {"sha": "bb3df337ad668f24337fbf586861d2decbcee4c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3df337ad668f24337fbf586861d2decbcee4c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05466c61380366cfd1969bb9f4eb26cff2acaedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05466c61380366cfd1969bb9f4eb26cff2acaedd", "html_url": "https://github.com/rust-lang/rust/commit/05466c61380366cfd1969bb9f4eb26cff2acaedd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05466c61380366cfd1969bb9f4eb26cff2acaedd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0201a03203b1961c96499c20025bf752a1b3ea6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0201a03203b1961c96499c20025bf752a1b3ea6a", "html_url": "https://github.com/rust-lang/rust/commit/0201a03203b1961c96499c20025bf752a1b3ea6a"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "ef41e248d5bf95901010d02ccedaf38301c1a4b4", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=05466c61380366cfd1969bb9f4eb26cff2acaedd", "patch": "@@ -61,7 +61,7 @@ extern \"C\" CDECL void\n record_sp(void *limit);\n \n // Tasks\n-rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n+rust_task::rust_task(rust_task_thread *thread, rust_task_state state,\n                      rust_task *spawner, const char *name,\n                      size_t init_stack_sz) :\n     ref_count(1),\n@@ -231,7 +231,7 @@ rust_task::start(spawn_fn spawnee_fn,\n \n void rust_task::start()\n {\n-    transition(&thread->newborn_tasks, &thread->running_tasks, NULL, \"none\");\n+    transition(task_state_newborn, task_state_running, NULL, \"none\");\n }\n \n bool\n@@ -350,14 +350,14 @@ bool\n rust_task::running()\n {\n     scoped_lock with(state_lock);\n-    return state == &thread->running_tasks;\n+    return state == task_state_running;\n }\n \n bool\n rust_task::blocked()\n {\n     scoped_lock with(state_lock);\n-    return state == &thread->blocked_tasks;\n+    return state == task_state_blocked;\n }\n \n bool\n@@ -371,7 +371,7 @@ bool\n rust_task::dead()\n {\n     scoped_lock with(state_lock);\n-    return state == &thread->dead_tasks;\n+    return state == task_state_dead;\n }\n \n void *\n@@ -393,13 +393,13 @@ rust_task::free(void *p)\n }\n \n void\n-rust_task::transition(rust_task_list *src, rust_task_list *dst,\n+rust_task::transition(rust_task_state src, rust_task_state dst,\n                       rust_cond *cond, const char* cond_name) {\n     thread->transition(this, src, dst, cond, cond_name);\n }\n \n void\n-rust_task::set_state(rust_task_list *state,\n+rust_task::set_state(rust_task_state state,\n                      rust_cond *cond, const char* cond_name) {\n     scoped_lock with(state_lock);\n     this->state = state;\n@@ -421,7 +421,7 @@ rust_task::block(rust_cond *on, const char* name) {\n     A(thread, cond == NULL, \"Cannot block an already blocked task.\");\n     A(thread, on != NULL, \"Cannot block on a NULL object.\");\n \n-    transition(&thread->running_tasks, &thread->blocked_tasks, on, name);\n+    transition(task_state_running, task_state_blocked, on, name);\n \n     return true;\n }\n@@ -433,12 +433,12 @@ rust_task::wakeup(rust_cond *from) {\n                         (uintptr_t) cond, (uintptr_t) from);\n     A(thread, cond == from, \"Cannot wake up blocked task on wrong condition.\");\n \n-    transition(&thread->blocked_tasks, &thread->running_tasks, NULL, \"none\");\n+    transition(task_state_blocked, task_state_running, NULL, \"none\");\n }\n \n void\n rust_task::die() {\n-    transition(&thread->running_tasks, &thread->dead_tasks, NULL, \"none\");\n+    transition(task_state_running, task_state_dead, NULL, \"none\");\n }\n \n void"}, {"sha": "b96cfea7795cedd0349ce13c5700806adfe9215f", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=05466c61380366cfd1969bb9f4eb26cff2acaedd", "patch": "@@ -90,7 +90,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     // Protects state, cond, cond_name\n     lock_and_signal state_lock;\n-    rust_task_list *state;\n+    rust_task_state state;\n     rust_cond *cond;\n     const char *cond_name;\n \n@@ -121,7 +121,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     void return_c_stack();\n \n-    void transition(rust_task_list *src, rust_task_list *dst,\n+    void transition(rust_task_state src, rust_task_state dst,\n                     rust_cond *cond, const char* cond_name);\n \n     bool must_fail_from_being_killed_unlocked();\n@@ -134,7 +134,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_task_thread *thread,\n-              rust_task_list *state,\n+              rust_task_state state,\n               rust_task *spawner,\n               const char *name,\n               size_t init_stack_sz);\n@@ -152,7 +152,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void *realloc(void *data, size_t sz);\n     void free(void *p);\n \n-    void set_state(rust_task_list *state,\n+    void set_state(rust_task_state state,\n                    rust_cond *cond, const char* cond_name);\n \n     bool block(rust_cond *on, const char* name);\n@@ -206,7 +206,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     rust_port_selector *get_port_selector() { return &port_selector; }\n \n-    rust_task_list *get_state() { return state; }\n+    rust_task_state get_state() { return state; }\n     rust_cond *get_cond() { return cond; }\n     const char *get_cond_name() { return cond_name; }\n };"}, {"sha": "0388d48c906b4754cc38a4f9543dec879adee7e5", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=05466c61380366cfd1969bb9f4eb26cff2acaedd", "patch": "@@ -27,13 +27,13 @@ rust_task_thread::rust_task_thread(rust_scheduler *sched,\n     id(id),\n     should_exit(false),\n     cached_c_stack(NULL),\n-    kernel(sched->kernel),\n-    sched(sched),\n-    srv(srv),\n     newborn_tasks(this, \"newborn\"),\n     running_tasks(this, \"running\"),\n     blocked_tasks(this, \"blocked\"),\n     dead_tasks(this, \"dead\"),\n+    kernel(sched->kernel),\n+    sched(sched),\n+    srv(srv),\n     log_lvl(log_debug),\n     min_stack_size(kernel->env->min_stack_size),\n     env(kernel->env),\n@@ -248,7 +248,7 @@ rust_task_thread::start_main_loop() {\n              \", state: %s\",\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n-             scheduled_task->get_state()->name);\n+             state_list(scheduled_task->get_state())->name);\n \n         place_task_in_tls(scheduled_task);\n \n@@ -262,7 +262,7 @@ rust_task_thread::start_main_loop() {\n              \" in state '%s', worker id=%d\" PRIxPTR,\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n-             scheduled_task->get_state()->name,\n+             state_list(scheduled_task->get_state())->name,\n              id);\n \n         reap_dead_tasks();\n@@ -289,7 +289,7 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n                             size_t init_stack_sz) {\n     rust_task *task =\n         new (this->kernel, \"rust_task\")\n-        rust_task (this, &newborn_tasks, spawner, name, init_stack_sz);\n+        rust_task (this, task_state_newborn, spawner, name, init_stack_sz);\n     DLOG(this, task, \"created task: \" PTR \", spawner: %s, name: %s\",\n                         task, spawner ? spawner->name : \"null\", name);\n \n@@ -302,18 +302,34 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n     return task;\n }\n \n+rust_task_list *\n+rust_task_thread::state_list(rust_task_state state) {\n+    switch (state) {\n+    case task_state_newborn:\n+        return &newborn_tasks;\n+    case task_state_running:\n+        return &running_tasks;\n+    case task_state_blocked:\n+        return &blocked_tasks;\n+    case task_state_dead:\n+        return &dead_tasks;\n+    }\n+}\n+\n void \n rust_task_thread::transition(rust_task *task,\n-                             rust_task_list *src, rust_task_list *dst,\n+                             rust_task_state src, rust_task_state dst,\n                              rust_cond *cond, const char* cond_name) {\n     scoped_lock with(lock);\n+    rust_task_list *src_list = state_list(src);\n+    rust_task_list *dst_list = state_list(dst);\n     DLOG(this, task,\n          \"task %s \" PTR \" state change '%s' -> '%s' while in '%s'\",\n-         name, (uintptr_t)this, src->name, dst->name,\n-         task->get_state()->name);\n+         name, (uintptr_t)this, src_list->name, dst_list->name,\n+         state_list(task->get_state())->name);\n     I(this, task->get_state() == src);\n-    src->remove(task);\n-    dst->append(task);\n+    src_list->remove(task);\n+    dst_list->append(task);\n     task->set_state(dst, cond, cond_name);\n \n     lock.signal();"}, {"sha": "190b3656cc596c6c2e7bb4e35cf6f62b1c52b458", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/05466c61380366cfd1969bb9f4eb26cff2acaedd/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=05466c61380366cfd1969bb9f4eb26cff2acaedd", "patch": "@@ -1,6 +1,7 @@\n #ifndef RUST_TASK_THREAD_H\n #define RUST_TASK_THREAD_H\n \n+#include \"rust_internal.h\"\n #include \"sync/rust_thread.h\"\n #include \"rust_stack.h\"\n #include \"context.h\"\n@@ -11,6 +12,13 @@\n #include <windows.h>\n #endif\n \n+enum rust_task_state {\n+    task_state_newborn,\n+    task_state_running,\n+    task_state_blocked,\n+    task_state_dead\n+};\n+\n struct rust_task_thread : public kernel_owned<rust_task_thread>,\n                         rust_thread\n {\n@@ -37,19 +45,21 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n     stk_seg *cached_c_stack;\n     stk_seg *extra_c_stack;\n \n+    rust_task_list newborn_tasks;\n+    rust_task_list running_tasks;\n+    rust_task_list blocked_tasks;\n+    rust_task_list dead_tasks;\n+\n     void prepare_c_stack(rust_task *task);\n     void unprepare_c_stack();\n \n+    rust_task_list *state_list(rust_task_state state);\n+\n public:\n     rust_kernel *kernel;\n     rust_scheduler *sched;\n     rust_srv *srv;\n \n-    rust_task_list newborn_tasks;\n-    rust_task_list running_tasks;\n-    rust_task_list blocked_tasks;\n-    rust_task_list dead_tasks;\n-\n     // NB: this is used to filter *runtime-originating* debug\n     // logging, on a per-scheduler basis. It's not likely what\n     // you want to expose to the user in terms of per-task\n@@ -90,7 +100,7 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n                            size_t init_stack_sz);\n \n     void transition(rust_task *task,\n-                    rust_task_list *src, rust_task_list *dst,\n+                    rust_task_state src, rust_task_state dst,\n                     rust_cond *cond, const char* cond_name);\n \n     virtual void run();"}]}