{"sha": "2532b86a3b89acaff5c7793d69bc159de8ddd214", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzJiODZhM2I4OWFjYWZmNWM3NzkzZDY5YmMxNTlkZThkZGQyMTQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-19T22:25:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-19T22:25:09Z"}, "message": "Propagate the return code from the `start` lang item\n\nFixes #1064\n\nThis ensures that we set the error code properly when a panic unwinds\npast `main`.\n\nI'm not sure what the best way to write a test for this is", "tree": {"sha": "0242dcd8e46ab8c6b6c9891a193d94a9b0e3999b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0242dcd8e46ab8c6b6c9891a193d94a9b0e3999b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2532b86a3b89acaff5c7793d69bc159de8ddd214", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3UbBYACgkQtAh+UQ6Y\nsWT24A/9HFUo2q1EswVm1eY8xTWn1YsUQDzUP5vzA4zu04XTtiVuO7Ee+mNynM+9\nbHZCz+6XRd56TKPUscujKAtD7zOCqcimtwX9rU9vwmki/BLkjh5QDMOvPOKDOPr4\namYB0ZNFZr/43cRurF6KQVDCL3ASG4i917Oqk3sXLT0+R7DI9YFNkoYpuWMfLNPF\nHIMI/AsNXZ8q5y6KuD1T3tLfCHmUIeGyFbf6ESs5khEcl0tMHLmZ1Pq8tvLjKICG\nAmYCzHYwUy0O3QNg5konfVDEKrwbC5jhIZc6nvTzSgyGP2T8GgN2m0+5IMem8pS0\n2Y8KbbTnyZlsTG862ROhtcKJT3JRYXWWGxM4byKWxRIfotkXH73PRDL3TotqVYxI\nMy5KCT2px38hzUeorl6pSG8NsgJh+sgAD4FaEZ/IQ54WGB2AJlYUkxAAyfTg65Jt\nq8Opp3yIntiSu2viXGUEJwLzuZ4JXIvznNlfVk2ziCsEfAgyvVJlCB8pixy3vVEn\nIeeu952qiZSbPe/Xy5FfGrp7e0FA5nw24ZtT30iB9ImUKnaZ1Ltgt4Av6aPjTqMk\nPfFNyyxLvHW9afK7UTyAK3kfNeUY+q+uEAuNtl7+YqY1Ek7Wdotsm2C7kYMfKfo6\nalnGMQy89JoPfju+IMn81lCZeTbesUuf9SHaFds6WmtAC9dCv0I=\n=Xy4Q\n-----END PGP SIGNATURE-----", "payload": "tree 0242dcd8e46ab8c6b6c9891a193d94a9b0e3999b\nparent e588d9535c014d078ccf785c18618cc765a93afe\nauthor Aaron Hill <aa1ronham@gmail.com> 1574202309 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1574202309 -0500\n\nPropagate the return code from the `start` lang item\n\nFixes #1064\n\nThis ensures that we set the error code properly when a panic unwinds\npast `main`.\n\nI'm not sure what the best way to write a test for this is\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2532b86a3b89acaff5c7793d69bc159de8ddd214", "html_url": "https://github.com/rust-lang/rust/commit/2532b86a3b89acaff5c7793d69bc159de8ddd214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2532b86a3b89acaff5c7793d69bc159de8ddd214/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e588d9535c014d078ccf785c18618cc765a93afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e588d9535c014d078ccf785c18618cc765a93afe", "html_url": "https://github.com/rust-lang/rust/commit/e588d9535c014d078ccf785c18618cc765a93afe"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "3dad5a0d8c73e2fac9ec29848702e2f154b1d0f2", "filename": "src/eval.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2532b86a3b89acaff5c7793d69bc159de8ddd214/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2532b86a3b89acaff5c7793d69bc159de8ddd214/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=2532b86a3b89acaff5c7793d69bc159de8ddd214", "patch": "@@ -11,7 +11,7 @@ use syntax::source_map::DUMMY_SP;\n use crate::{\n     EnvVars, Evaluator, FnVal, HelpersEvalContextExt, InterpCx, InterpError,\n     InterpResult, MemoryExtra, MiriMemoryKind, Pointer, Scalar, StackPopCleanup, Tag,\n-    TlsEvalContextExt,\n+    TlsEvalContextExt, MPlaceTy\n };\n \n /// Configuration needed to spawn a Miri instance.\n@@ -34,7 +34,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     tcx: TyCtxt<'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n-) -> InterpResult<'tcx, InterpCx<'mir, 'tcx, Evaluator<'tcx>>> {\n+) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, Evaluator<'tcx>>, MPlaceTy<'tcx, Tag>)> {\n     let mut ecx = InterpCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n@@ -170,27 +170,31 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);\n \n-    Ok(ecx)\n+    Ok((ecx, ret_ptr))\n }\n \n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n-    let mut ecx = match create_ecx(tcx, main_id, config) {\n-        Ok(ecx) => ecx,\n+    let (mut ecx, ret_ptr) = match create_ecx(tcx, main_id, config) {\n+        Ok(v) => v,\n         Err(mut err) => {\n             err.print_backtrace();\n             panic!(\"Miri initialziation error: {}\", err.kind)\n         }\n     };\n \n     // Perform the main execution.\n-    let res: InterpResult<'_> = (|| {\n+    let res: InterpResult<'_, i64> = (|| {\n         ecx.run()?;\n-        ecx.run_tls_dtors()\n+        // Read the return code pointer *before* we run TLS destructors, to assert\n+        // that it was written to by the time that `start` lang item returned.\n+        let return_code = ecx.read_scalar(ret_ptr.into())?.not_undef()?.to_machine_isize(&ecx)?;\n+        ecx.run_tls_dtors()?;\n+        Ok(return_code)\n     })();\n \n     // Process the result.\n     match res {\n-        Ok(()) => {\n+        Ok(return_code) => {\n             let leaks = ecx.memory.leak_report();\n             // Disable the leak test on some platforms where we do not\n             // correctly implement TLS destructors.\n@@ -199,6 +203,7 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n             if !ignore_leaks && leaks != 0 {\n                 tcx.sess.err(\"the evaluated program leaked memory\");\n             }\n+            std::process::exit(return_code as i32);\n         }\n         Err(mut e) => {\n             // Special treatment for some error kinds"}]}