{"sha": "2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODdlMDVmMTU4MjA3ZjYzZTJiYzRhYzg3YzBjMmZiYjdlNjEwMDI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-07T18:45:17Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-07T18:45:17Z"}, "message": "simplify", "tree": {"sha": "0a37f8a451dcd9cebc8024af9c2a9d98f0449312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a37f8a451dcd9cebc8024af9c2a9d98f0449312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "html_url": "https://github.com/rust-lang/rust/commit/2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29e8ed994c573273a8182efd9b74ec8c664a848", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29e8ed994c573273a8182efd9b74ec8c664a848", "html_url": "https://github.com/rust-lang/rust/commit/b29e8ed994c573273a8182efd9b74ec8c664a848"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "ba13d3707b8472dd04e25fbae197779d03376941", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "patch": "@@ -5,8 +5,8 @@ use std::iter;\n use syntax::{SyntaxKind, T};\n \n use crate::{\n-    patterns::ImmediateLocation, CompletionContext, CompletionItem, CompletionItemKind,\n-    CompletionKind, Completions,\n+    context::PathCompletionContext, patterns::ImmediateLocation, CompletionContext, CompletionItem,\n+    CompletionItemKind, CompletionKind, Completions,\n };\n \n pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -128,8 +128,15 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(\"mut\", \"mut \");\n     }\n \n-    if ctx.in_loop_body {\n-        if ctx.can_be_stmt() {\n+    let (can_be_stmt, in_loop_body) = match ctx.path_context {\n+        Some(PathCompletionContext {\n+            is_trivial_path: true, can_be_stmt, in_loop_body, ..\n+        }) => (can_be_stmt, in_loop_body),\n+        _ => return,\n+    };\n+\n+    if in_loop_body {\n+        if can_be_stmt {\n             add_keyword(\"continue\", \"continue;\");\n             add_keyword(\"break\", \"break;\");\n         } else {\n@@ -138,17 +145,14 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         }\n     }\n \n-    if !ctx.is_trivial_path() {\n-        return;\n-    }\n     let fn_def = match &ctx.function_def {\n         Some(it) => it,\n         None => return,\n     };\n \n     add_keyword(\n         \"return\",\n-        match (ctx.can_be_stmt(), fn_def.ret_type().is_some()) {\n+        match (can_be_stmt, fn_def.ret_type().is_some()) {\n             (true, true) => \"return $0;\",\n             (true, false) => \"return;\",\n             (false, true) => \"return $0\","}, {"sha": "b9862de677ff78b79b49bc9c069fc0027e2895a7", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "patch": "@@ -3,8 +3,8 @@\n use ide_db::helpers::SnippetCap;\n \n use crate::{\n-    item::Builder, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n-    Completions,\n+    context::PathCompletionContext, item::Builder, CompletionContext, CompletionItem,\n+    CompletionItemKind, CompletionKind, Completions,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n@@ -14,15 +14,21 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n }\n \n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_trivial_path() && ctx.function_def.is_some()) {\n+    if ctx.function_def.is_none() {\n         return;\n     }\n+\n+    let can_be_stmt = match ctx.path_context {\n+        Some(PathCompletionContext { is_trivial_path: true, can_be_stmt, .. }) => can_be_stmt,\n+        _ => return,\n+    };\n+\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n         None => return,\n     };\n \n-    if ctx.can_be_stmt() {\n+    if can_be_stmt {\n         snippet(ctx, cap, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n         snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n     }"}, {"sha": "a60e5f43c1c98513ecd9314712c1cfbd298303f9", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "patch": "@@ -34,20 +34,13 @@\n use hir::{self, HasAttrs, HasSource};\n use ide_db::{traits::get_missing_assoc_items, SymbolKind};\n use syntax::{\n-    ast::{self, edit, Impl},\n+    ast::{self, edit},\n     display::function_declaration,\n-    AstNode, SyntaxElement, SyntaxKind, SyntaxNode, TextRange, T,\n+    AstNode, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, T,\n };\n use text_edit::TextEdit;\n \n-use crate::{\n-    CompletionContext,\n-    CompletionItem,\n-    CompletionItemKind,\n-    CompletionKind,\n-    Completions,\n-    // display::function_declaration,\n-};\n+use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n \n #[derive(Debug, PartialEq, Eq)]\n enum ImplCompletionKind {\n@@ -58,7 +51,7 @@ enum ImplCompletionKind {\n }\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    if let Some((kind, trigger, impl_def)) = completion_match(ctx) {\n+    if let Some((kind, trigger, impl_def)) = completion_match(ctx.token.clone()) {\n         get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| match item {\n             hir::AssocItem::Function(fn_item)\n                 if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Fn =>\n@@ -80,8 +73,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     }\n }\n \n-fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, SyntaxNode, Impl)> {\n-    let mut token = ctx.token.clone();\n+fn completion_match(mut token: SyntaxToken) -> Option<(ImplCompletionKind, SyntaxNode, ast::Impl)> {\n     // For keyword without name like `impl .. { fn $0 }`, the current position is inside\n     // the whitespace token, which is outside `FN` syntax node.\n     // We need to follow the previous token in this case."}, {"sha": "6177caa12bb572c76df1672ba321a6e7041f9ba8", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "patch": "@@ -43,6 +43,7 @@ pub(crate) struct PathCompletionContext {\n     pub(super) can_be_stmt: bool,\n     /// `true` if we expect an expression at the cursor position.\n     pub(super) is_expr: bool,\n+    pub(super) in_loop_body: bool,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -94,7 +95,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) locals: Vec<(String, Local)>,\n \n-    pub(super) in_loop_body: bool,\n     pub(super) incomplete_let: bool,\n \n     no_completion_required: bool,\n@@ -160,7 +160,6 @@ impl<'a> CompletionContext<'a> {\n             path_context: None,\n             active_parameter: ActiveParameter::at(db, position),\n             locals,\n-            in_loop_body: false,\n             incomplete_let: false,\n             no_completion_required: false,\n         };\n@@ -324,10 +323,6 @@ impl<'a> CompletionContext<'a> {\n         self.path_context.as_ref().and_then(|it| it.path_qual.as_ref())\n     }\n \n-    pub(crate) fn can_be_stmt(&self) -> bool {\n-        self.path_context.as_ref().map_or(false, |it| it.can_be_stmt)\n-    }\n-\n     fn fill_impl_def(&mut self) {\n         self.impl_def = self\n             .sema\n@@ -453,7 +448,6 @@ impl<'a> CompletionContext<'a> {\n             let for_is_prev2 = for_is_prev2(syntax_element.clone());\n             (fn_is_prev && !inside_impl_trait_block) || for_is_prev2\n         };\n-        self.in_loop_body = is_in_loop_body(syntax_element.clone());\n \n         self.incomplete_let =\n             syntax_element.ancestors().take(6).find_map(ast::LetStmt::cast).map_or(false, |it| {\n@@ -584,7 +578,9 @@ impl<'a> CompletionContext<'a> {\n                 is_path_type: false,\n                 can_be_stmt: false,\n                 is_expr: false,\n+                in_loop_body: false,\n             });\n+            path_ctx.in_loop_body = is_in_loop_body(name_ref.syntax());\n             let path = segment.parent_path();\n \n             if let Some(p) = path.syntax().parent() {"}, {"sha": "ee87bf461444e046160b8df70884a6a895e35f70", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2987e05f158207f63e2bc4ac87c0c2fbb7e61002/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=2987e05f158207f63e2bc4ac87c0c2fbb7e61002", "patch": "@@ -272,9 +272,8 @@ fn test_for_is_prev2() {\n     check_pattern_is_applicable(r\"for i i$0\", for_is_prev2);\n }\n \n-pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {\n-    element\n-        .ancestors()\n+pub(crate) fn is_in_loop_body(node: &SyntaxNode) -> bool {\n+    node.ancestors()\n         .take_while(|it| it.kind() != FN && it.kind() != CLOSURE_EXPR)\n         .find_map(|it| {\n             let loop_body = match_ast! {\n@@ -285,7 +284,7 @@ pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {\n                     _ => None,\n                 }\n             };\n-            loop_body.filter(|it| it.syntax().text_range().contains_range(element.text_range()))\n+            loop_body.filter(|it| it.syntax().text_range().contains_range(node.text_range()))\n         })\n         .is_some()\n }"}]}