{"sha": "f1255d5f5d9c9d23d039ee3798af4e164563226f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMjU1ZDVmNWQ5YzlkMjNkMDM5ZWUzNzk4YWY0ZTE2NDU2MzIyNmY=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-22T00:44:05Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-22T00:46:22Z"}, "message": "Casts : work in progress handling *size separately", "tree": {"sha": "2ee3435bede6f9d9438f174244f21c7bbc549bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee3435bede6f9d9438f174244f21c7bbc549bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1255d5f5d9c9d23d039ee3798af4e164563226f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1255d5f5d9c9d23d039ee3798af4e164563226f", "html_url": "https://github.com/rust-lang/rust/commit/f1255d5f5d9c9d23d039ee3798af4e164563226f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1255d5f5d9c9d23d039ee3798af4e164563226f/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffe1ed3372860b7dfaa2609c7c2c9eaa5ca4041", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffe1ed3372860b7dfaa2609c7c2c9eaa5ca4041", "html_url": "https://github.com/rust-lang/rust/commit/6ffe1ed3372860b7dfaa2609c7c2c9eaa5ca4041"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "e8da11ecbe0a23bf64ab9548ad86d0af892de751", "filename": "src/types.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f1255d5f5d9c9d23d039ee3798af4e164563226f/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255d5f5d9c9d23d039ee3798af4e164563226f/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f1255d5f5d9c9d23d039ee3798af4e164563226f", "patch": "@@ -150,14 +150,21 @@ declare_lint!(pub CAST_POSSIBLE_TRUNCATION, Allow,\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: &ty::TyS) -> usize {\n     let n = match &typ.sty {\n-    &ty::TyInt(i) =>  4 << (i as usize),\n-    &ty::TyUint(u) => 4 << (u as usize),\n-    _ => 0\n+        &ty::TyInt(i) =>  4 << (i as usize),\n+        &ty::TyUint(u) => 4 << (u as usize),\n+        _ => 0\n     };\n     // n == 4 is the usize/isize case\n     if n == 4 { ::std::usize::BITS } else { n }\n }\n \n+fn is_isize_or_usize(typ: &ty::TyS) -> bool {\n+    match &typ.sty {\n+        &ty::TyInt(ast::TyIs) | &ty::TyUint(ast::TyUs) => true,\n+        _ => false\n+    }\n+}\n+\n impl LintPass for CastPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CAST_PRECISION_LOSS,\n@@ -178,15 +185,22 @@ impl LintPass for CastPass {\n                             _ => 0\n                         };\n                         if from_nbits != 0 {\n-                            if from_nbits >= to_nbits {\n+                            // When casting to f32, precision loss would occur regardless of the arch\n+                            if is_isize_or_usize(cast_from) && to_nbits == 64 {\n+                                span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n+                                          &format!(\"converting from {0} to f64, which causes a loss of precision on 64-bit architectures \\\n+                                          \t\t\t({0} is 64 bits wide, but f64's mantissa is only 52 bits wide)\",\n+                                                   cast_from));\n+                            }\n+                            else if from_nbits >= to_nbits {\n                                 span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n                                           &format!(\"converting from {0} to {1}, which causes a loss of precision \\\n                                           \t\t\t({0} is {2} bits wide, but {1}'s mantissa is only {3} bits wide)\",\n                                                    cast_from, cast_to, from_nbits, if to_nbits == 64 {52} else {23} ));\n                             }\n                         }\n                     },\n-                    (false, true) => {\n+                    (false, true) => { // Nothing to add there\n                         span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n                                   &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n                         if !cast_to.is_signed() {\n@@ -201,10 +215,15 @@ impl LintPass for CastPass {\n                         }\n                         let from_nbits = int_ty_to_nbits(cast_from);\n                         let to_nbits   = int_ty_to_nbits(cast_to);\n-                        if to_nbits < from_nbits ||\n-                           (!cast_from.is_signed() && cast_to.is_signed() && to_nbits <= from_nbits) {\n-                                span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n-                                          &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n+                        match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n+                            (true, true) | (false, false) =>\n+                                if to_nbits < from_nbits ||\n+                                   (!cast_from.is_signed() && cast_to.is_signed() && to_nbits <= from_nbits) {\n+                                        span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n+                                                  &format!(\"casting {} to {} may cause truncation of the value\", cast_from, cast_to));\n+                                },\n+                            (true, false) => (), // TODO\n+                            (false, true) => ()  // TODO\n                         }\n                     }\n                     (false, false) => {"}, {"sha": "8e854fb21f93a14f8f1d5d2eac04ed2d6922c2ed", "filename": "tests/compile-fail/cast.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f1255d5f5d9c9d23d039ee3798af4e164563226f/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1255d5f5d9c9d23d039ee3798af4e164563226f/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=f1255d5f5d9c9d23d039ee3798af4e164563226f", "patch": "@@ -32,26 +32,12 @@ fn main() {\n     i as u32; //~ERROR casting from i32 to u32 loses the sign of the value\n \n     // Extra checks for usize/isize\n-    let is : isize = -42;\n-    is as usize; //~ERROR casting from isize to usize loses the sign of the value\n-    is as i8; //~ERROR casting isize to i8 may cause truncation of the value\n-\n-    // FIXME : enable these checks when we figure out a way to make compiletest deal with conditional compilation\n     /*\n-    #[cfg(target_pointer_width = \"64\")]\n-    fn check_64() {\n-        let is : isize = -42;\n-        let us : usize = 42;\n-        is as f32; //ERROR converting from isize to f32, which causes a loss of precision (isize is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-        us as u32; //ERROR casting usize to u32 may cause truncation of the value\n-        us as u64; // Should not trigger any lint\n-    }\n-    #[cfg(target_pointer_width = \"32\")]\n-    fn check_32() {\n-        let is : isize = -42;\n-        let us : usize = 42;\n-        is as f32; //ERROR converting from isize to f32, which causes a loss of precision (isize is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-        us as u32; // Should not trigger any lint\n-        us as u64; // Should not trigger any lint\n-    }*/\n+    let is : isize = -42;\n+    let us : usize = 42;\n+    is as usize; //ERROR casting from isize to usize loses the sign of the value\n+    is as i8; //ERROR casting isize to i8 may cause truncation of the value\n+    is as f64; //ERROR converting from isize to f64, which causes a loss of precision on 64-bit architectures (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    us as f64; //ERROR converting from usize to f64, which causes a loss of precision on 64-bit architectures (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+    */\n }\n\\ No newline at end of file"}]}