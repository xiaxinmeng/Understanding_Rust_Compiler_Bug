{"sha": "2c9f1f5750fcd65e8979d15c5fb5a21185765dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOWYxZjU3NTBmY2Q2NWU4OTc5ZDE1YzVmYjVhMjExODU3NjVkYzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-07T13:28:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T13:28:37Z"}, "message": "Rollup merge of #58143 - GuillaumeGomez:sort-elements-in-sidebar, r=QuietMisdreavus\n\nSort elements in the sidebar\n\nFixes #57448.\n\nNot sorting fields or variants though.\n\nr? @QuietMisdreavus", "tree": {"sha": "1652dd2e2fe850152aa1e9d4bc60960a8624245f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1652dd2e2fe850152aa1e9d4bc60960a8624245f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c9f1f5750fcd65e8979d15c5fb5a21185765dc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcXDKFCRBK7hj4Ov3rIwAAdHIIADGrgiJCET/uX7k0Aqe68ZBy\noj9MmY376tvBdaAs7MwCXKyiomIxZJTiHXxYfXc/qt8O1db+l3w5UzkR7prQxlBX\nw2OLL+B8JYgNfXv+pz9rdzQChwuwlfZbLK/DiCx8fsijI7O3MAD+5o1i1jm5WF9q\n+tGpt/bc8RQHqoDkhzzzASnK8x6CeZSMTm8SgTeWW+QwRVNWvV0kkdpZ6CYOjrXp\n2x++lq6f/GB8LGQaZ7IHBowsXfyyb/sgpaVsXMy/3mHo+wcM7iqRJDl6OPcCW8Z5\nK13dxPgVei4dQHcAM9Zy5LJCHdi0JAHaVOrk2rDBPD3vlC3KFCKXIdy8IUo6tIo=\n=cdSd\n-----END PGP SIGNATURE-----\n", "payload": "tree 1652dd2e2fe850152aa1e9d4bc60960a8624245f\nparent f22c4450531e64aeb0d6c138c4d59abf2cea120f\nparent c40fa3271a939ee34662482052be64929978ca6a\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1549546117 +0100\ncommitter GitHub <noreply@github.com> 1549546117 +0100\n\nRollup merge of #58143 - GuillaumeGomez:sort-elements-in-sidebar, r=QuietMisdreavus\n\nSort elements in the sidebar\n\nFixes #57448.\n\nNot sorting fields or variants though.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9f1f5750fcd65e8979d15c5fb5a21185765dc7", "html_url": "https://github.com/rust-lang/rust/commit/2c9f1f5750fcd65e8979d15c5fb5a21185765dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c9f1f5750fcd65e8979d15c5fb5a21185765dc7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22c4450531e64aeb0d6c138c4d59abf2cea120f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22c4450531e64aeb0d6c138c4d59abf2cea120f", "html_url": "https://github.com/rust-lang/rust/commit/f22c4450531e64aeb0d6c138c4d59abf2cea120f"}, {"sha": "c40fa3271a939ee34662482052be64929978ca6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40fa3271a939ee34662482052be64929978ca6a", "html_url": "https://github.com/rust-lang/rust/commit/c40fa3271a939ee34662482052be64929978ca6a"}], "stats": {"total": 156, "additions": 84, "deletions": 72}, "files": [{"sha": "a85ac19286af533f6b320f69ab59eeaa7f67fddd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 84, "deletions": 72, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/2c9f1f5750fcd65e8979d15c5fb5a21185765dc7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9f1f5750fcd65e8979d15c5fb5a21185765dc7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2c9f1f5750fcd65e8979d15c5fb5a21185765dc7", "patch": "@@ -4480,15 +4480,17 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n \n         {\n             let used_links_bor = Rc::new(RefCell::new(&mut used_links));\n-            let ret = v.iter()\n-                       .filter(|i| i.inner_impl().trait_.is_none())\n-                       .flat_map(move |i| get_methods(i.inner_impl(),\n-                                                      false,\n-                                                      &mut used_links_bor.borrow_mut()))\n-                       .collect::<String>();\n+            let mut ret = v.iter()\n+                           .filter(|i| i.inner_impl().trait_.is_none())\n+                           .flat_map(move |i| get_methods(i.inner_impl(),\n+                                                          false,\n+                                                          &mut used_links_bor.borrow_mut()))\n+                           .collect::<Vec<_>>();\n+            // We want links' order to be reproducible so we don't use unstable sort.\n+            ret.sort();\n             if !ret.is_empty() {\n                 out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#methods\\\">Methods\\\n-                                       </a><div class=\\\"sidebar-links\\\">{}</div>\", ret));\n+                                       </a><div class=\\\"sidebar-links\\\">{}</div>\", ret.join(\"\")));\n             }\n         }\n \n@@ -4512,40 +4514,47 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                                                      impl_.inner_impl().trait_.as_ref().unwrap())),\n                                               Escape(&format!(\"{:#}\", target))));\n                         out.push_str(\"</a>\");\n-                        let ret = impls.iter()\n-                                       .filter(|i| i.inner_impl().trait_.is_none())\n-                                       .flat_map(|i| get_methods(i.inner_impl(),\n-                                                                 true,\n-                                                                 &mut used_links))\n-                                       .collect::<String>();\n-                        out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", ret));\n+                        let mut ret = impls.iter()\n+                                           .filter(|i| i.inner_impl().trait_.is_none())\n+                                           .flat_map(|i| get_methods(i.inner_impl(),\n+                                                                     true,\n+                                                                     &mut used_links))\n+                                           .collect::<Vec<_>>();\n+                        // We want links' order to be reproducible so we don't use unstable sort.\n+                        ret.sort();\n+                        if !ret.is_empty() {\n+                            out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\",\n+                                                  ret.join(\"\")));\n+                        }\n                     }\n                 }\n             }\n             let format_impls = |impls: Vec<&Impl>| {\n                 let mut links = FxHashSet::default();\n \n-                impls.iter()\n-                     .filter_map(|i| {\n-                         let is_negative_impl = is_negative_impl(i.inner_impl());\n-                         if let Some(ref i) = i.inner_impl().trait_ {\n-                             let i_display = format!(\"{:#}\", i);\n-                             let out = Escape(&i_display);\n-                             let encoded = small_url_encode(&format!(\"{:#}\", i));\n-                             let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n-                                                     encoded,\n-                                                     if is_negative_impl { \"!\" } else { \"\" },\n-                                                     out);\n-                             if links.insert(generated.clone()) {\n-                                 Some(generated)\n-                             } else {\n-                                 None\n-                             }\n-                         } else {\n-                             None\n-                         }\n-                     })\n-                     .collect::<String>()\n+                let mut ret = impls.iter()\n+                    .filter_map(|i| {\n+                        let is_negative_impl = is_negative_impl(i.inner_impl());\n+                        if let Some(ref i) = i.inner_impl().trait_ {\n+                            let i_display = format!(\"{:#}\", i);\n+                            let out = Escape(&i_display);\n+                            let encoded = small_url_encode(&format!(\"{:#}\", i));\n+                            let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n+                                                    encoded,\n+                                                    if is_negative_impl { \"!\" } else { \"\" },\n+                                                    out);\n+                            if links.insert(generated.clone()) {\n+                                Some(generated)\n+                            } else {\n+                                None\n+                            }\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                    .collect::<Vec<String>>();\n+                ret.sort();\n+                ret.join(\"\")\n             };\n \n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) = v\n@@ -4647,29 +4656,29 @@ fn sidebar_trait(fmt: &mut fmt::Formatter, it: &clean::Item,\n                       }\n                   })\n                   .collect::<String>();\n-    let required = t.items\n-                    .iter()\n-                    .filter_map(|m| {\n-                        match m.name {\n-                            Some(ref name) if m.is_ty_method() => {\n-                                Some(format!(\"<a href=\\\"#tymethod.{name}\\\">{name}</a>\",\n-                                             name=name))\n+    let mut required = t.items\n+                        .iter()\n+                        .filter_map(|m| {\n+                            match m.name {\n+                                Some(ref name) if m.is_ty_method() => {\n+                                    Some(format!(\"<a href=\\\"#tymethod.{name}\\\">{name}</a>\",\n+                                                 name=name))\n+                                }\n+                                _ => None,\n                             }\n-                            _ => None,\n-                        }\n-                    })\n-                    .collect::<String>();\n-    let provided = t.items\n-                    .iter()\n-                    .filter_map(|m| {\n-                        match m.name {\n-                            Some(ref name) if m.is_method() => {\n-                                Some(format!(\"<a href=\\\"#method.{name}\\\">{name}</a>\", name=name))\n+                        })\n+                        .collect::<Vec<String>>();\n+    let mut provided = t.items\n+                        .iter()\n+                        .filter_map(|m| {\n+                            match m.name {\n+                                Some(ref name) if m.is_method() => {\n+                                    Some(format!(\"<a href=\\\"#method.{0}\\\">{0}</a>\", name))\n+                                }\n+                                _ => None,\n                             }\n-                            _ => None,\n-                        }\n-                    })\n-                    .collect::<String>();\n+                        })\n+                        .collect::<Vec<String>>();\n \n     if !types.is_empty() {\n         sidebar.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#associated-types\\\">\\\n@@ -4682,38 +4691,41 @@ fn sidebar_trait(fmt: &mut fmt::Formatter, it: &clean::Item,\n                                   consts));\n     }\n     if !required.is_empty() {\n+        required.sort();\n         sidebar.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#required-methods\\\">\\\n                                    Required Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n-                                  required));\n+                                  required.join(\"\")));\n     }\n     if !provided.is_empty() {\n+        provided.sort();\n         sidebar.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#provided-methods\\\">\\\n                                    Provided Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n-                                  provided));\n+                                  provided.join(\"\")));\n     }\n \n     let c = cache();\n \n     if let Some(implementors) = c.implementors.get(&it.def_id) {\n-        let res = implementors.iter()\n-                              .filter(|i| i.inner_impl().for_.def_id()\n-                              .map_or(false, |d| !c.paths.contains_key(&d)))\n-                              .filter_map(|i| {\n-                                  match extract_for_impl_name(&i.impl_item) {\n-                                      Some((ref name, ref url)) => {\n-                                          Some(format!(\"<a href=\\\"#impl-{}\\\">{}</a>\",\n-                                                      small_url_encode(url),\n-                                                      Escape(name)))\n+        let mut res = implementors.iter()\n+                                  .filter(|i| i.inner_impl().for_.def_id()\n+                                  .map_or(false, |d| !c.paths.contains_key(&d)))\n+                                  .filter_map(|i| {\n+                                      match extract_for_impl_name(&i.impl_item) {\n+                                          Some((ref name, ref url)) => {\n+                                              Some(format!(\"<a href=\\\"#impl-{}\\\">{}</a>\",\n+                                                          small_url_encode(url),\n+                                                          Escape(name)))\n+                                          }\n+                                          _ => None,\n                                       }\n-                                      _ => None,\n-                                  }\n-                              })\n-                              .collect::<String>();\n+                                  })\n+                                  .collect::<Vec<String>>();\n         if !res.is_empty() {\n+            res.sort();\n             sidebar.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#foreign-impls\\\">\\\n                                        Implementations on Foreign Types</a><div \\\n                                        class=\\\"sidebar-links\\\">{}</div>\",\n-                                      res));\n+                                      res.join(\"\")));\n         }\n     }\n "}]}