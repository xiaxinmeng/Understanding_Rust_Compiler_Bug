{"sha": "d5b760ba62b40dd770c09e704b8a3af64c1fd058", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Yjc2MGJhNjJiNDBkZDc3MGMwOWU3MDRiOGEzYWY2NGMxZmQwNTg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-09T17:00:45Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-02-02T14:09:52Z"}, "message": "Bump rustfmt version\n\nAlso switches on formatting of the mir build module", "tree": {"sha": "e15b2809a9c9447c7cee05932f04cd4e9fd10792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15b2809a9c9447c7cee05932f04cd4e9fd10792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b760ba62b40dd770c09e704b8a3af64c1fd058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b760ba62b40dd770c09e704b8a3af64c1fd058", "html_url": "https://github.com/rust-lang/rust/commit/d5b760ba62b40dd770c09e704b8a3af64c1fd058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b760ba62b40dd770c09e704b8a3af64c1fd058/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6cb45ad01a4518f615926f39801996622f46179", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cb45ad01a4518f615926f39801996622f46179", "html_url": "https://github.com/rust-lang/rust/commit/f6cb45ad01a4518f615926f39801996622f46179"}], "stats": {"total": 388, "additions": 224, "deletions": 164}, "files": [{"sha": "ac76b42c57d12e853f8f48691329a752b7006b17", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -506,7 +506,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         let count = generics\n                             .params\n                             .iter()\n-                            .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))\n+                            .filter(|param| {\n+                                matches!(param.kind, ast::GenericParamKind::Lifetime { .. })\n+                            })\n                             .count();\n                         self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n                     }"}, {"sha": "fa3c958c9fe787ba2d305f512b1e60bdb35dc94f", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -598,7 +598,7 @@ impl<'a> TraitDef<'a> {\n \n             let mut ty_params = params\n                 .iter()\n-                .filter(|param| matches!(param.kind,  ast::GenericParamKind::Type{..}))\n+                .filter(|param| matches!(param.kind, ast::GenericParamKind::Type { .. }))\n                 .peekable();\n \n             if ty_params.peek().is_some() {"}, {"sha": "c09cce21bf24c6cd3162fdc532dfc91676e4e330", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -36,7 +36,7 @@ macro_rules! forward_inner_docs {\n     ($e:expr => $i:item) => {\n         #[doc = $e]\n         $i\n-    }\n+    };\n }\n \n /// In general, the `DiagnosticBuilder` uses deref to allow access to"}, {"sha": "acb88e57db5eea7c8558e019106f2743982ff501", "filename": "compiler/rustc_errors/src/snippet.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -122,11 +122,13 @@ impl Annotation {\n     }\n \n     pub fn is_multiline(&self) -> bool {\n-        matches!(self.annotation_type,\n+        matches!(\n+            self.annotation_type,\n             AnnotationType::Multiline(_)\n-            | AnnotationType::MultilineStart(_)\n-            | AnnotationType::MultilineLine(_)\n-            | AnnotationType::MultilineEnd(_))\n+                | AnnotationType::MultilineStart(_)\n+                | AnnotationType::MultilineLine(_)\n+                | AnnotationType::MultilineEnd(_)\n+        )\n     }\n \n     pub fn len(&self) -> usize {\n@@ -158,7 +160,10 @@ impl Annotation {\n \n     pub fn takes_space(&self) -> bool {\n         // Multiline annotations always have to keep vertical space.\n-        matches!(self.annotation_type, AnnotationType::MultilineStart(_) | AnnotationType::MultilineEnd(_))\n+        matches!(\n+            self.annotation_type,\n+            AnnotationType::MultilineStart(_) | AnnotationType::MultilineEnd(_)\n+        )\n     }\n }\n "}, {"sha": "1c16dc026670bbc4b45347fd7c065fe7386f898e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -1543,10 +1543,10 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n             **qpath,\n             QPath::LangItem(\n                 LangItem::Range\n-                | LangItem::RangeTo\n-                | LangItem::RangeFrom\n-                | LangItem::RangeFull\n-                | LangItem::RangeToInclusive,\n+                    | LangItem::RangeTo\n+                    | LangItem::RangeFrom\n+                    | LangItem::RangeFull\n+                    | LangItem::RangeToInclusive,\n                 _,\n             )\n         ),"}, {"sha": "61c8113d052874c0874d8cdefdead70585c1fc15", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -132,7 +132,12 @@ impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n                 [segment]\n                     if segment\n                         .res\n-                        .map(|res| matches!(res, Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _)))\n+                        .map(|res| {\n+                            matches!(\n+                                res,\n+                                Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _)\n+                            )\n+                        })\n                         .unwrap_or(false) =>\n                 {\n                     self.types.push(path.span);"}, {"sha": "ee12c0e786d41078d1a7791435c5b30110420b3e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -569,9 +569,9 @@ impl<'hir> Map<'hir> {\n             self.find(self.get_parent_node(id)),\n             Some(\n                 Node::Item(_)\n-                | Node::TraitItem(_)\n-                | Node::ImplItem(_)\n-                | Node::Expr(Expr { kind: ExprKind::Closure(..), .. }),\n+                    | Node::TraitItem(_)\n+                    | Node::ImplItem(_)\n+                    | Node::Expr(Expr { kind: ExprKind::Closure(..), .. }),\n             )\n         )\n     }"}, {"sha": "718e81c84edddbbdef8bc0c3a465c62812e76cfc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -962,8 +962,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n-                })\n-                | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n+                }) | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n             )))\n         )\n     }\n@@ -980,8 +979,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n-                })\n-                | BindingForm::ImplicitSelf(_),\n+                }) | BindingForm::ImplicitSelf(_),\n             )))\n         )\n     }"}, {"sha": "4a131a4ec058121b55b1b50daa32ecccc04bb817", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -12,13 +12,17 @@ impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         matches!(\n             self.kind(),\n-            Bool | Char | Str | Int(_) | Uint(_) | Float(_)\n-            | Infer(\n-                InferTy::IntVar(_)\n-                | InferTy::FloatVar(_)\n-                | InferTy::FreshIntTy(_)\n-                | InferTy::FreshFloatTy(_)\n-            )\n+            Bool | Char\n+                | Str\n+                | Int(_)\n+                | Uint(_)\n+                | Float(_)\n+                | Infer(\n+                    InferTy::IntVar(_)\n+                        | InferTy::FloatVar(_)\n+                        | InferTy::FreshIntTy(_)\n+                        | InferTy::FreshFloatTy(_)\n+                )\n         )\n     }\n "}, {"sha": "1669c59d7f1b9759ddfbb993bd71903b715d5902", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -646,11 +646,14 @@ impl<T> Trait<T> for X {\n         let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n \n         // We don't want to suggest calling an assoc fn in a scope where that isn't feasible.\n-        let callable_scope = matches!(body_owner, Some(\n+        let callable_scope = matches!(\n+            body_owner,\n+            Some(\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })\n-                | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n-                | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }),\n-            ));\n+                    | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n+                    | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }),\n+            )\n+        );\n         let impl_comparison = matches!(\n             cause_code,\n             ObligationCauseCode::CompareImplMethodObligation { .. }"}, {"sha": "6b4f08d9f93354848cf5b8edee543299f28e4d94", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -1871,8 +1871,14 @@ impl<'tcx> TyS<'tcx> {\n     pub fn is_scalar(&self) -> bool {\n         matches!(\n             self.kind(),\n-            Bool | Char | Int(_) | Float(_) | Uint(_) | FnDef(..) | FnPtr(_) | RawPtr(_)\n-            | Infer(IntVar(_) | FloatVar(_))\n+            Bool | Char\n+                | Int(_)\n+                | Float(_)\n+                | Uint(_)\n+                | FnDef(..)\n+                | FnPtr(_)\n+                | RawPtr(_)\n+                | Infer(IntVar(_) | FloatVar(_))\n         )\n     }\n "}, {"sha": "3308a243a3afb5a0cc802d746886fd9b843b66fc", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -6,8 +6,8 @@ use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::thir::*;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n-use rustc_middle::middle::region;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n+use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind::BoundsCheck;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n@@ -57,7 +57,8 @@ crate enum PlaceBase {\n         /// DefId of the closure\n         closure_def_id: DefId,\n         /// The trait closure implements, `Fn`, `FnMut`, `FnOnce`\n-        closure_kind: ty::ClosureKind },\n+        closure_kind: ty::ClosureKind,\n+    },\n }\n \n /// `PlaceBuilder` is used to create places during MIR construction. It allows you to \"build up\" a\n@@ -81,8 +82,7 @@ crate struct PlaceBuilder<'tcx> {\n fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n     mir_projections: &[PlaceElem<'tcx>],\n ) -> Vec<HirProjectionKind> {\n-\n-    let mut hir_projections  = Vec::new();\n+    let mut hir_projections = Vec::new();\n \n     for mir_projection in mir_projections {\n         let hir_projection = match mir_projection {\n@@ -91,20 +91,20 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n                 // We will never encouter this for multivariant enums,\n                 // read the comment for `Downcast`.\n                 HirProjectionKind::Field(field.index() as u32, VariantIdx::new(0))\n-            },\n+            }\n             ProjectionElem::Downcast(..) => {\n                 // This projections exist only for enums that have\n                 // multiple variants. Since such enums that are captured\n                 // completely, we can stop here.\n-                break\n-            },\n+                break;\n+            }\n             ProjectionElem::Index(..)\n             | ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. } => {\n                 // We don't capture array-access projections.\n                 // We can stop here as arrays are captured completely.\n-                break\n-            },\n+                break;\n+            }\n         };\n \n         hir_projections.push(hir_projection);\n@@ -181,9 +181,9 @@ fn find_capture_matching_projections<'a, 'tcx>(\n     // If an ancestor is found, `idx` is the index within the list of captured places\n     // for root variable `var_hir_id` and `capture` is the `ty::CapturedPlace` itself.\n     let (idx, capture) = root_variable_min_captures.iter().enumerate().find(|(_, capture)| {\n-            let possible_ancestor_proj_kinds =\n-                capture.place.projections.iter().map(|proj| proj.kind).collect();\n-            is_ancestor_or_same_capture(&possible_ancestor_proj_kinds, &hir_projections)\n+        let possible_ancestor_proj_kinds =\n+            capture.place.projections.iter().map(|proj| proj.kind).collect();\n+        is_ancestor_or_same_capture(&possible_ancestor_proj_kinds, &hir_projections)\n     })?;\n \n     // Convert index to be from the presepective of the entire closure_min_captures map\n@@ -213,35 +213,34 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n                 ty::ClosureKind::FnOnce => {}\n             }\n \n-            let (capture_index, capture) =\n-                if let Some(capture_details) = find_capture_matching_projections(\n+            let (capture_index, capture) = if let Some(capture_details) =\n+                find_capture_matching_projections(\n                     typeck_results,\n                     var_hir_id,\n                     closure_def_id,\n                     &from_builder.projection,\n                 ) {\n-                    capture_details\n-                } else {\n-                    if !tcx.features().capture_disjoint_fields {\n-                        bug!(\n-                            \"No associated capture found for {:?}[{:#?}] even though \\\n+                capture_details\n+            } else {\n+                if !tcx.features().capture_disjoint_fields {\n+                    bug!(\n+                        \"No associated capture found for {:?}[{:#?}] even though \\\n                             capture_disjoint_fields isn't enabled\",\n-                            var_hir_id,\n-                            from_builder.projection\n-                        )\n-                    } else {\n-                        // FIXME(project-rfc-2229#24): Handle this case properly\n-                        debug!(\n-                            \"No associated capture found for {:?}[{:#?}]\",\n-                            var_hir_id,\n-                            from_builder.projection,\n-                        );\n-                    }\n-                    return Err(var_hir_id);\n-                };\n+                        var_hir_id,\n+                        from_builder.projection\n+                    )\n+                } else {\n+                    // FIXME(project-rfc-2229#24): Handle this case properly\n+                    debug!(\n+                        \"No associated capture found for {:?}[{:#?}]\",\n+                        var_hir_id, from_builder.projection,\n+                    );\n+                }\n+                return Err(var_hir_id);\n+            };\n \n-            let closure_ty =\n-                typeck_results.node_type(tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local()));\n+            let closure_ty = typeck_results\n+                .node_type(tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local()));\n \n             let substs = match closure_ty.kind() {\n                 ty::Closure(_, substs) => ty::UpvarSubsts::Closure(substs),\n@@ -256,7 +255,8 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n             // we know that the capture exists and is the `capture_index`-th capture.\n             let var_ty = substs.tupled_upvars_ty().tuple_element_ty(capture_index).unwrap();\n \n-            upvar_resolved_place_builder = upvar_resolved_place_builder.field(Field::new(capture_index), var_ty);\n+            upvar_resolved_place_builder =\n+                upvar_resolved_place_builder.field(Field::new(capture_index), var_ty);\n \n             // If the variable is captured via ByRef(Immutable/Mutable) Borrow,\n             // we need to deref it\n@@ -270,8 +270,9 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n \n             // We used some of the projections to build the capture itself,\n             // now we apply the remaining to the upvar resolved place.\n-            upvar_resolved_place_builder.projection.extend(\n-                curr_projections.drain(next_projection..));\n+            upvar_resolved_place_builder\n+                .projection\n+                .extend(curr_projections.drain(next_projection..));\n \n             Ok(upvar_resolved_place_builder)\n         }\n@@ -356,7 +357,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n     /// intermediate `Place` values until we know the full set of projections.\n-    crate fn as_place_builder<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<PlaceBuilder<'tcx>>\n+    crate fn as_place_builder<M>(\n+        &mut self,\n+        block: BasicBlock,\n+        expr: M,\n+    ) -> BlockAnd<PlaceBuilder<'tcx>>\n     where\n         M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n@@ -627,7 +632,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         if is_outermost_index {\n             self.read_fake_borrows(block, fake_borrow_temps, source_info)\n         } else {\n-            base_place = base_place.expect_upvars_resolved(self.hir.tcx(), self.hir.typeck_results());\n+            base_place =\n+                base_place.expect_upvars_resolved(self.hir.tcx(), self.hir.typeck_results());\n             self.add_fake_borrows_of_base(\n                 &base_place,\n                 block,\n@@ -679,7 +685,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let tcx = self.hir.tcx();\n         let local = match base_place.base {\n             PlaceBase::Local(local) => local,\n-            PlaceBase::Upvar { .. } => bug!(\"Expected PlacseBase::Local found Upvar\")\n+            PlaceBase::Upvar { .. } => bug!(\"Expected PlacseBase::Local found Upvar\"),\n         };\n \n         let place_ty = Place::ty_from(local, &base_place.projection, &self.local_decls, tcx);"}, {"sha": "c95fc969797b41215215a6aefe30231afe79c817", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -2,9 +2,9 @@\n \n use rustc_index::vec::Idx;\n \n+use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use crate::build::expr::as_place::PlaceBase;\n use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind;\n@@ -274,7 +274,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::ValueTypeAscription { .. } => {\n                 // these do not have corresponding `Rvalue` variants,\n                 // so make an operand and then return that\n-                debug_assert!(!matches!(Category::of(&expr.kind), Some(Category::Rvalue(RvalueFunc::AsRvalue))));\n+                debug_assert!(!matches!(\n+                    Category::of(&expr.kind),\n+                    Some(Category::Rvalue(RvalueFunc::AsRvalue))\n+                ));\n                 let operand = unpack!(block = this.as_operand(block, scope, expr));\n                 block.and(Rvalue::Use(operand))\n             }\n@@ -401,34 +404,39 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // We are capturing a path that starts off a local variable in the parent.\n             // The mutability of the current capture is same as the mutability\n             // of the local declaration in the parent.\n-            PlaceBase::Local(local) =>  this.local_decls[local].mutability,\n+            PlaceBase::Local(local) => this.local_decls[local].mutability,\n             // Parent is a closure and we are capturing a path that is captured\n             // by the parent itself. The mutability of the current capture\n             // is same as that of the capture in the parent closure.\n             PlaceBase::Upvar { .. } => {\n-                let enclosing_upvars_resolved = arg_place_builder.clone().into_place(\n-                    this.hir.tcx(),\n-                    this.hir.typeck_results());\n+                let enclosing_upvars_resolved =\n+                    arg_place_builder.clone().into_place(this.hir.tcx(), this.hir.typeck_results());\n \n                 match enclosing_upvars_resolved.as_ref() {\n-                    PlaceRef { local, projection: &[ProjectionElem::Field(upvar_index, _), ..] }\n+                    PlaceRef {\n+                        local,\n+                        projection: &[ProjectionElem::Field(upvar_index, _), ..],\n+                    }\n                     | PlaceRef {\n                         local,\n-                        projection: &[ProjectionElem::Deref, ProjectionElem::Field(upvar_index, _), ..] } => {\n-                            // Not in a closure\n-                            debug_assert!(\n-                                local == Local::new(1),\n-                                \"Expected local to be Local(1), found {:?}\",\n-                                local\n-                            );\n-                            // Not in a closure\n-                            debug_assert!(\n-                                this.upvar_mutbls.len() > upvar_index.index(),\n-                                \"Unexpected capture place, upvar_mutbls={:#?}, upvar_index={:?}\",\n-                                this.upvar_mutbls, upvar_index\n-                            );\n-                            this.upvar_mutbls[upvar_index.index()]\n-                        }\n+                        projection:\n+                            &[ProjectionElem::Deref, ProjectionElem::Field(upvar_index, _), ..],\n+                    } => {\n+                        // Not in a closure\n+                        debug_assert!(\n+                            local == Local::new(1),\n+                            \"Expected local to be Local(1), found {:?}\",\n+                            local\n+                        );\n+                        // Not in a closure\n+                        debug_assert!(\n+                            this.upvar_mutbls.len() > upvar_index.index(),\n+                            \"Unexpected capture place, upvar_mutbls={:#?}, upvar_index={:?}\",\n+                            this.upvar_mutbls,\n+                            upvar_index\n+                        );\n+                        this.upvar_mutbls[upvar_index.index()]\n+                    }\n                     _ => bug!(\"Unexpected capture place\"),\n                 }\n             }\n@@ -439,9 +447,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },\n         };\n \n-        let arg_place = arg_place_builder.into_place(\n-                    this.hir.tcx(),\n-                    this.hir.typeck_results());\n+        let arg_place = arg_place_builder.into_place(this.hir.tcx(), this.hir.typeck_results());\n \n         this.cfg.push_assign(\n             block,"}, {"sha": "18ebf334404a9b5a2c0ae554a8bdfc68b6e533eb", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{CanonicalUserTypeAnnotation};\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n use std::slice;\n \n@@ -38,7 +38,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n \n-        let expr_is_block_or_scope = matches!(expr.kind, ExprKind::Block { .. } | ExprKind::Scope { .. });\n+        let expr_is_block_or_scope =\n+            matches!(expr.kind, ExprKind::Block { .. } | ExprKind::Scope { .. });\n \n         let schedule_drop = move |this: &mut Self| {\n             if let Some(drop_scope) = scope {\n@@ -68,7 +69,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.match_expr(destination, scope, expr_span, block, scrutinee, arms)\n             }\n             ExprKind::If { cond, then, else_opt } => {\n-                let place = unpack!(block = this.as_temp(block, Some(this.local_scope()), cond, Mutability::Mut));\n+                let place = unpack!(\n+                    block = this.as_temp(block, Some(this.local_scope()), cond, Mutability::Mut)\n+                );\n                 let operand = Operand::Move(Place::from(place));\n \n                 let mut then_block = this.cfg.start_new_block();\n@@ -100,14 +103,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n \n                 join_block.unit()\n-            },\n+            }\n             ExprKind::NeverToAny { source } => {\n                 let source = this.hir.mirror(source);\n-                let is_call = matches!(source.kind, ExprKind::Call { .. } | ExprKind::InlineAsm { .. });\n+                let is_call =\n+                    matches!(source.kind, ExprKind::Call { .. } | ExprKind::InlineAsm { .. });\n \n                 // (#66975) Source could be a const of type `!`, so has to\n                 // exist in the generated MIR.\n-                unpack!(block = this.as_temp(block, Some(this.local_scope()), source, Mutability::Mut,));\n+                unpack!(\n+                    block = this.as_temp(block, Some(this.local_scope()), source, Mutability::Mut,)\n+                );\n \n                 // This is an optimization. If the expression was a call then we already have an\n                 // unreachable block. Don't bother to terminate it and create a new one.\n@@ -313,7 +319,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                         .field(n, ty)\n                                         .into_place(this.hir.tcx(), this.hir.typeck_results()),\n                                 )\n-                            },\n+                            }\n                         })\n                         .collect()\n                 } else {"}, {"sha": "205ba0d2579f6543e97f4d961fc7e821848cc889", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -1692,15 +1692,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let e = self.hir.mirror(e.clone());\n                     let source_info = self.source_info(e.span);\n                     (e.span, self.test_bool(block, e, source_info))\n-                },\n+                }\n                 Guard::IfLet(pat, scrutinee) => {\n                     let scrutinee_span = scrutinee.span();\n-                    let scrutinee_place = unpack!(block = self.lower_scrutinee(block, scrutinee.clone(), scrutinee_span));\n+                    let scrutinee_place = unpack!(\n+                        block = self.lower_scrutinee(block, scrutinee.clone(), scrutinee_span)\n+                    );\n                     let mut guard_candidate = Candidate::new(scrutinee_place, &pat, false);\n                     let wildcard = Pat::wildcard_from_ty(pat.ty);\n                     let mut otherwise_candidate = Candidate::new(scrutinee_place, &wildcard, false);\n-                    let fake_borrow_temps =\n-                        self.lower_match_tree(block, pat.span, false, &mut [&mut guard_candidate, &mut otherwise_candidate]);\n+                    let fake_borrow_temps = self.lower_match_tree(\n+                        block,\n+                        pat.span,\n+                        false,\n+                        &mut [&mut guard_candidate, &mut otherwise_candidate],\n+                    );\n                     self.declare_bindings(\n                         None,\n                         pat.span.to(arm_span.unwrap()),"}, {"sha": "db1f678a5c68d46a535f9acf8d907ffceb5e043b", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -32,9 +32,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) {\n         let tcx = self.hir.tcx();\n         let (min_length, exact_size) = match place.ty(&self.local_decls, tcx).ty.kind() {\n-            ty::Array(_, length) => {\n-                (length.eval_usize(tcx, self.hir.param_env), true)\n-            }\n+            ty::Array(_, length) => (length.eval_usize(tcx, self.hir.param_env), true),\n             _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n         };\n "}, {"sha": "8c1f73f4235c09019e1b11edcb7c8e2c5743d633", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -838,17 +838,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 _ => span_bug!(self.fn_span, \"upvars with non-closure env ty {:?}\", closure_ty),\n             };\n             let capture_tys = upvar_substs.upvar_tys();\n-            let captures_with_tys = hir_typeck_results\n-                .closure_min_captures_flattened(fn_def_id)\n-                .zip(capture_tys);\n+            let captures_with_tys =\n+                hir_typeck_results.closure_min_captures_flattened(fn_def_id).zip(capture_tys);\n \n             self.upvar_mutbls = captures_with_tys\n                 .enumerate()\n                 .map(|(i, (captured_place, ty))| {\n                     let capture = captured_place.info.capture_kind;\n                     let var_id = match captured_place.place.base {\n                         HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n-                        _ => bug!(\"Expected an upvar\")\n+                        _ => bug!(\"Expected an upvar\"),\n                     };\n \n                     let mutability = captured_place.mutability;"}, {"sha": "cbc20c6153a56ecef84bd5b65885c7c6d94efa72", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -931,10 +931,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let local_scope = self.local_scope();\n         let scope = self.scopes.scopes.last_mut().unwrap();\n \n-        assert_eq!(\n-            scope.region_scope, local_scope,\n-            \"local scope is not the topmost scope!\",\n-        );\n+        assert_eq!(scope.region_scope, local_scope, \"local scope is not the topmost scope!\",);\n \n         // look for moves of a local variable, like `MOVE(_X)`\n         let locals_moved = operands\n@@ -1046,9 +1043,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             matches!(\n                 self.cfg.block_data(start).terminator().kind,\n                 TerminatorKind::Assert { .. }\n-                | TerminatorKind::Call {..}\n-                | TerminatorKind::DropAndReplace { .. }\n-                | TerminatorKind::FalseUnwind { .. }\n+                    | TerminatorKind::Call { .. }\n+                    | TerminatorKind::DropAndReplace { .. }\n+                    | TerminatorKind::FalseUnwind { .. }\n             ),\n             \"diverge_from called on block with terminator that cannot unwind.\"\n         );"}, {"sha": "6e25209f0905ebe9222be9744a5273ce44f13a06", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -41,13 +41,16 @@ impl<'a> Parser<'a> {\n             },\n             NonterminalKind::Block => match token.kind {\n                 token::OpenDelim(token::Brace) => true,\n-                token::Interpolated(ref nt) => !matches!(**nt, token::NtItem(_)\n-                    | token::NtPat(_)\n-                    | token::NtTy(_)\n-                    | token::NtIdent(..)\n-                    | token::NtMeta(_)\n-                    | token::NtPath(_)\n-                    | token::NtVis(_)),\n+                token::Interpolated(ref nt) => !matches!(\n+                    **nt,\n+                    token::NtItem(_)\n+                        | token::NtPat(_)\n+                        | token::NtTy(_)\n+                        | token::NtIdent(..)\n+                        | token::NtMeta(_)\n+                        | token::NtPath(_)\n+                        | token::NtVis(_)\n+                ),\n                 _ => false,\n             },\n             NonterminalKind::Path | NonterminalKind::Meta => match token.kind {"}, {"sha": "e1d03e3504800c17d87bccdc7e04e38ad03f3f9c", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -553,7 +553,8 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         // optional. They inherit stability from their parents when unannotated.\n         if !matches!(\n             i.kind,\n-            hir::ItemKind::Impl(hir::Impl { of_trait: None, .. }) | hir::ItemKind::ForeignMod { .. }\n+            hir::ItemKind::Impl(hir::Impl { of_trait: None, .. })\n+                | hir::ItemKind::ForeignMod { .. }\n         ) {\n             self.check_missing_stability(i.hir_id, i.span);\n         }"}, {"sha": "9c90388d24aaa3fd42e853abda283b536ea50a7c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -1659,12 +1659,15 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             match missing {\n                 MissingLifetimeSpot::Generics(generics) => {\n                     let (span, sugg) = if let Some(param) = generics.params.iter().find(|p| {\n-                        !matches!(p.kind, hir::GenericParamKind::Type {\n-                            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                            ..\n-                        } | hir::GenericParamKind::Lifetime {\n-                            kind: hir::LifetimeParamKind::Elided,\n-                        })\n+                        !matches!(\n+                            p.kind,\n+                            hir::GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                ..\n+                            } | hir::GenericParamKind::Lifetime {\n+                                kind: hir::LifetimeParamKind::Elided,\n+                            }\n+                        )\n                     }) {\n                         (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n                     } else {\n@@ -1844,10 +1847,13 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         msg = \"consider introducing a named lifetime parameter\".to_string();\n                         should_break = true;\n                         if let Some(param) = generics.params.iter().find(|p| {\n-                            !matches!(p.kind, hir::GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            })\n+                            !matches!(\n+                                p.kind,\n+                                hir::GenericParamKind::Type {\n+                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                    ..\n+                                }\n+                            )\n                         }) {\n                             (param.span.shrink_to_lo(), \"'a, \".to_string())\n                         } else {"}, {"sha": "cb37a4b231b40d03100fe185e023a9a26519bf7d", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -526,7 +526,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n     }\n \n     pub fn is_indirect(&self) -> bool {\n-        matches!(self.mode, PassMode::Indirect {..})\n+        matches!(self.mode, PassMode::Indirect { .. })\n     }\n \n     pub fn is_sized_indirect(&self) -> bool {"}, {"sha": "d3b3403ac3e735bb3f978696cfe03672be4d3219", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -1190,9 +1190,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty, data.ty\n                 );\n \n-                let is_normalized_ty_expected = !matches!(obligation.cause.code, ObligationCauseCode::ItemObligation(_)\n-                    | ObligationCauseCode::BindingObligation(_, _)\n-                    | ObligationCauseCode::ObjectCastObligation(_));\n+                let is_normalized_ty_expected = !matches!(\n+                    obligation.cause.code,\n+                    ObligationCauseCode::ItemObligation(_)\n+                        | ObligationCauseCode::BindingObligation(_, _)\n+                        | ObligationCauseCode::ObjectCastObligation(_)\n+                );\n \n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n                     is_normalized_ty_expected,"}, {"sha": "218280061643c5504c16a7dffa56e0274927f758", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -290,9 +290,9 @@ fn suggest_restriction(\n             generics\n                 .params\n                 .iter()\n-                .filter(\n-                    |p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), ..}),\n-                )\n+                .filter(|p| {\n+                    !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), .. })\n+                })\n                 .next(),\n             super_traits,\n         ) {"}, {"sha": "67e37ca8d8e49560aae4aa28d436f655b6532d9d", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -496,14 +496,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ) -> bool {\n         let explicit = !seg.infer_args;\n         let impl_trait = generics.params.iter().any(|param| {\n-            matches!(param.kind, ty::GenericParamDefKind::Type {\n-                synthetic:\n-                    Some(\n-                        hir::SyntheticTyParamKind::ImplTrait\n-                        | hir::SyntheticTyParamKind::FromAttr,\n+            matches!(\n+                param.kind,\n+                ty::GenericParamDefKind::Type {\n+                    synthetic: Some(\n+                        hir::SyntheticTyParamKind::ImplTrait | hir::SyntheticTyParamKind::FromAttr,\n                     ),\n-                ..\n-            })\n+                    ..\n+                }\n+            )\n         });\n \n         if explicit && impl_trait {"}, {"sha": "bc1a07801ae87d807f750638eaa1b7be8bf2042e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -274,10 +274,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let autoborrow_mut = adj.iter().any(|adj| {\n-            matches!(adj, &Adjustment {\n-                kind: Adjust::Borrow(AutoBorrow::Ref(_, AutoBorrowMutability::Mut { .. })),\n-                ..\n-            })\n+            matches!(\n+                adj,\n+                &Adjustment {\n+                    kind: Adjust::Borrow(AutoBorrow::Ref(_, AutoBorrowMutability::Mut { .. })),\n+                    ..\n+                }\n+            )\n         });\n \n         match self.typeck_results.borrow_mut().adjustments_mut().entry(expr.hir_id) {"}, {"sha": "28ec3279459ab24154415b6956d3592f80f8da52", "filename": "library/core/src/default.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -173,9 +173,11 @@ macro_rules! default_impl {\n         impl Default for $t {\n             #[inline]\n             #[doc = $doc]\n-            fn default() -> $t { $v }\n+            fn default() -> $t {\n+                $v\n+            }\n         }\n-    }\n+    };\n }\n \n default_impl! { (), (), \"Returns the default value of `()`\" }"}, {"sha": "af807aa6f739e75c4e61d7cefd61f89df4487296", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -6,7 +6,7 @@ merge_derives = false\n # by default we ignore everything in the repository\n # tidy only checks files which are not ignored, each entry follows gitignore style\n ignore = [\n-    \"build\",\n+    \"/build/\",\n     \"/vendor/\",\n \n     # tests for now are not formatted, as they are sometimes pretty-printing constrained"}, {"sha": "a32a4a7fe56c2814bbd781340287fa0f5c23a1c9", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -15,7 +15,7 @@ fn main() {\n \n     // check_version warnings are not printed during setup\n     let changelog_suggestion =\n-        if matches!(config.cmd, Subcommand::Setup {..}) { None } else { check_version(&config) };\n+        if matches!(config.cmd, Subcommand::Setup { .. }) { None } else { check_version(&config) };\n \n     // NOTE: Since `./configure` generates a `config.toml`, distro maintainers will see the\n     // changelog warning, not the `x.py setup` message."}, {"sha": "d3c76eb282a7e80b55d7dbb8edf5966bc42af0be", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b760ba62b40dd770c09e704b8a3af64c1fd058/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d5b760ba62b40dd770c09e704b8a3af64c1fd058/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=d5b760ba62b40dd770c09e704b8a3af64c1fd058", "patch": "@@ -19,7 +19,7 @@ rustc: beta\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-11-19\n+rustfmt: nightly-2021-01-28\n \n # When making a stable release the process currently looks like:\n #"}]}