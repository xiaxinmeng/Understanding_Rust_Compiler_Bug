{"sha": "b8533413cf082f2d942b78af841e3895db252106", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTMzNDEzY2YwODJmMmQ5NDJiNzhhZjg0MWUzODk1ZGIyNTIxMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-02T20:11:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-02T20:11:27Z"}, "message": "Move Source to hir_expand", "tree": {"sha": "605fd62c88d8ec612c8bcc42dbf0f0206272f633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605fd62c88d8ec612c8bcc42dbf0f0206272f633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8533413cf082f2d942b78af841e3895db252106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8533413cf082f2d942b78af841e3895db252106", "html_url": "https://github.com/rust-lang/rust/commit/b8533413cf082f2d942b78af841e3895db252106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8533413cf082f2d942b78af841e3895db252106/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d142a17efed6a1445cdc86f2f4abb329f54a140", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d142a17efed6a1445cdc86f2f4abb329f54a140", "html_url": "https://github.com/rust-lang/rust/commit/2d142a17efed6a1445cdc86f2f4abb329f54a140"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "bd0c3c226aa474ebe284668c2251343bc832ee8e", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=b8533413cf082f2d942b78af841e3895db252106", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n-pub use hir_def::Source;\n+pub use hir_expand::Source;\n \n pub trait HasSource {\n     type Ast;"}, {"sha": "0ba17e5710d307e31d43d068fa4fe5313d2a3fe1", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=b8533413cf082f2d942b78af841e3895db252106", "patch": "@@ -62,7 +62,7 @@ pub use crate::{\n     adt::VariantDef,\n     code_model::{\n         docs::{DocDef, Docs, Documentation},\n-        src::{HasBodySource, HasSource, Source},\n+        src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n         EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n         ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n@@ -85,4 +85,4 @@ pub use hir_def::{\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };\n-pub use hir_expand::{either::Either, name::Name};\n+pub use hir_expand::{either::Either, name::Name, Source};"}, {"sha": "6d66f481d3f81de2bccebdda7612ca5cec044ed2", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=b8533413cf082f2d942b78af841e3895db252106", "patch": "@@ -19,19 +19,13 @@ pub mod nameres;\n \n use std::hash::{Hash, Hasher};\n \n-use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId};\n+use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, Source};\n use ra_arena::{impl_arena_id, RawId};\n use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n \n use crate::{builtin_type::BuiltinType, db::InternDatabase};\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub struct Source<T> {\n-    pub file_id: HirFileId,\n-    pub ast: T,\n-}\n-\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),\n     Module(ast::Module),\n@@ -94,15 +88,6 @@ impl ModuleSource {\n     }\n }\n \n-impl<T> Source<T> {\n-    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source { file_id: self.file_id, ast: f(self.ast) }\n-    }\n-    pub fn file_syntax(&self, db: &impl AstDatabase) -> SyntaxNode {\n-        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     pub krate: CrateId,"}, {"sha": "85c2b22ace5a50bf566c44f5c8437072140973af", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8533413cf082f2d942b78af841e3895db252106/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=b8533413cf082f2d942b78af841e3895db252106", "patch": "@@ -13,7 +13,10 @@ pub mod hygiene;\n use std::hash::{Hash, Hasher};\n \n use ra_db::{salsa, CrateId, FileId};\n-use ra_syntax::ast::{self, AstNode};\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    SyntaxNode,\n+};\n \n use crate::ast_id_map::FileAstId;\n \n@@ -151,3 +154,18 @@ impl<N: AstNode> AstId<N> {\n         db.ast_id_map(self.file_id).get(self.file_ast_id).to_node(&root)\n     }\n }\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub struct Source<T> {\n+    pub file_id: HirFileId,\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+    pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n+        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n+    }\n+}"}]}