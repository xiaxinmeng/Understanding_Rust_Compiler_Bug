{"sha": "a1cabac72707020e30a787f44740b855583fc341", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExY2FiYWM3MjcwNzAyMGUzMGE3ODdmNDQ3NDBiODU1NTgzZmMzNDE=", "commit": {"author": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-06-16T00:33:18Z"}, "committer": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-07-20T15:23:51Z"}, "message": "Fix use of deprecated `check_no_isolation` in posix fs ops\n\nUpdate posix fs shims to use new API `reject_in_isolation`, which\nallows rejection with error code instead of always forcing abort.\nError code chosen for each op is the most appropriate one from the\nlist in corresponding syscall's manual.\n\nUpdated helper APIs to not use quotes (`) around input name while\npreparing the message. This allows callers to pass multi-word string\nlike -- \"`read` from stdin\".", "tree": {"sha": "016dd9c6ad024f2a745a3383024f9f92f30b69af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/016dd9c6ad024f2a745a3383024f9f92f30b69af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1cabac72707020e30a787f44740b855583fc341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cabac72707020e30a787f44740b855583fc341", "html_url": "https://github.com/rust-lang/rust/commit/a1cabac72707020e30a787f44740b855583fc341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1cabac72707020e30a787f44740b855583fc341/comments", "author": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2872a3f2a26154b91a6a6085d56016509803c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2872a3f2a26154b91a6a6085d56016509803c61", "html_url": "https://github.com/rust-lang/rust/commit/e2872a3f2a26154b91a6a6085d56016509803c61"}], "stats": {"total": 167, "additions": 140, "deletions": 27}, "files": [{"sha": "f66f66e0088ffbfdf7583d24d14941e399061e1d", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1cabac72707020e30a787f44740b855583fc341/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cabac72707020e30a787f44740b855583fc341/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=a1cabac72707020e30a787f44740b855583fc341", "patch": "@@ -328,7 +328,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     CreatedAlloc(AllocId(id)) => format!(\"created allocation with id {}\", id),\n                     FreedAlloc(AllocId(id)) => format!(\"freed allocation with id {}\", id),\n                     RejectedIsolatedOp(ref op) =>\n-                        format!(\"`{}` was made to return an error due to isolation\", op),\n+                        format!(\"{} was made to return an error due to isolation\", op),\n                 };\n \n                 let (title, diag_level) = match e {"}, {"sha": "e09ef2865fb2b2b1e0c57ebb9758e6cf4c9f361a", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1cabac72707020e30a787f44740b855583fc341/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cabac72707020e30a787f44740b855583fc341/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a1cabac72707020e30a787f44740b855583fc341", "patch": "@@ -409,7 +409,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             RejectOpWith::WarningWithoutBacktrace => {\n                 this.tcx\n                     .sess\n-                    .warn(&format!(\"`{}` was made to return an error due to isolation\", op_name));\n+                    .warn(&format!(\"{} was made to return an error due to isolation\", op_name));\n                 Ok(())\n             }\n             RejectOpWith::Warning => {"}, {"sha": "9290ec022b57f12d78695ae07ae80386ba3ba748", "filename": "src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1cabac72707020e30a787f44740b855583fc341/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cabac72707020e30a787f44740b855583fc341/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=a1cabac72707020e30a787f44740b855583fc341", "patch": "@@ -322,7 +322,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let size = this.read_scalar(&size_op)?.to_machine_usize(&*this.tcx)?;\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"getcwd\", reject_with)?;\n+            this.reject_in_isolation(\"`getcwd`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n             return Ok(Pointer::null());\n         }\n@@ -355,7 +355,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.read_pointer(buf_op)?;\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"GetCurrentDirectoryW\", reject_with)?;\n+            this.reject_in_isolation(\"`GetCurrentDirectoryW`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n             return Ok(0);\n         }\n@@ -380,7 +380,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"chdir\", reject_with)?;\n+            this.reject_in_isolation(\"`chdir`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n \n             return Ok(-1);\n@@ -408,7 +408,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let path = this.read_path_from_wide_str(this.read_pointer(path_op)?)?;\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"SetCurrentDirectoryW\", reject_with)?;\n+            this.reject_in_isolation(\"`SetCurrentDirectoryW`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n \n             return Ok(0);"}, {"sha": "3653fc43ebb1ce8c6bfda0d0b16a901fa3eab998", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 134, "deletions": 21, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a1cabac72707020e30a787f44740b855583fc341/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cabac72707020e30a787f44740b855583fc341/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=a1cabac72707020e30a787f44740b855583fc341", "patch": "@@ -4,7 +4,7 @@ use std::convert::{TryFrom, TryInto};\n use std::fs::{\n     read_dir, remove_dir, remove_file, rename, DirBuilder, File, FileType, OpenOptions, ReadDir,\n };\n-use std::io::{self, Read, Seek, SeekFrom, Write};\n+use std::io::{self, ErrorKind, Read, Seek, SeekFrom, Write};\n use std::path::Path;\n use std::time::SystemTime;\n \n@@ -504,7 +504,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`open`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`open`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         let flag = this.read_scalar(flag_op)?.to_i32()?;\n \n@@ -594,7 +599,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn fcntl(&mut self, args: &[OpTy<'tcx, Tag>]) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`fcntl`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`fcntl`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         if args.len() < 2 {\n             throw_ub_format!(\n@@ -785,7 +795,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn unlink(&mut self, path_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`unlink`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`unlink`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n@@ -811,7 +826,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`symlink`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`symlink`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         let target = this.read_path_from_c_str(this.read_pointer(target_op)?)?;\n         let linkpath = this.read_path_from_c_str(this.read_pointer(linkpath_op)?)?;\n@@ -827,7 +847,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"stat\");\n-        this.check_no_isolation(\"`stat`\")?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`stat`\", reject_with)?;\n+            // macos stat never sets \"EPERM\". Set error code \"ENOENT\".\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            return Ok(-1);\n+        }\n+\n         // `stat` always follows symlinks.\n         this.macos_stat_or_lstat(true, path_op, buf_op)\n     }\n@@ -840,7 +868,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"lstat\");\n-        this.check_no_isolation(\"`lstat`\")?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`lstat`\", reject_with)?;\n+            // macos lstat never sets \"EPERM\". Set error code \"ENOENT\".\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            return Ok(-1);\n+        }\n+\n         this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n \n@@ -852,7 +888,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"macos\", \"fstat\");\n-        this.check_no_isolation(\"`fstat`\")?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`fstat`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -874,7 +916,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"linux\", \"statx\");\n-        this.check_no_isolation(\"`statx`\")?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`statx`\", reject_with)?;\n+            // statx never sets \"EPERM\". Set error code \"ENOENT\".\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            return Ok(-1);\n+        }\n \n         let statxbuf_ptr = this.read_pointer(statxbuf_op)?;\n         let pathname_ptr = this.read_pointer(pathname_op)?;\n@@ -1032,7 +1081,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`rename`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`rename`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         let oldpath_ptr = this.read_pointer(oldpath_op)?;\n         let newpath_ptr = this.read_pointer(newpath_op)?;\n@@ -1058,7 +1112,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`mkdir`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`mkdir`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         #[cfg_attr(not(unix), allow(unused_variables))]\n         let mode = if this.tcx.sess.target.os == \"macos\" {\n@@ -1088,7 +1147,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn rmdir(&mut self, path_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`rmdir`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`rmdir`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n@@ -1100,7 +1164,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn opendir(&mut self, name_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`opendir`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`opendir`\", reject_with)?;\n+            // opendir function never sets \"EPERM\". Set \"ENOENT\".\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            return Ok(Scalar::null_ptr(this));\n+        }\n \n         let name = this.read_path_from_c_str(this.read_pointer(name_op)?)?;\n \n@@ -1131,7 +1201,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"linux\", \"readdir64_r\");\n-        this.check_no_isolation(\"`readdir64_r`\")?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`readdir64_r`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -1224,7 +1300,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"macos\", \"readdir_r\");\n-        this.check_no_isolation(\"`readdir_r`\")?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`readdir_r`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -1313,7 +1395,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn closedir(&mut self, dirp_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`closedir`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`closedir`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -1332,7 +1419,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`ftruncate64`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`ftruncate64`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let length = this.read_scalar(length_op)?.to_i64()?;\n@@ -1367,7 +1459,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`fsync`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`fsync`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n@@ -1383,7 +1480,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn fdatasync(&mut self, fd_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`fdatasync`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`fdatasync`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n@@ -1405,7 +1507,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"`sync_file_range`\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`sync_file_range`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let offset = this.read_scalar(offset_op)?.to_i64()?;\n@@ -1444,7 +1551,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i64> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"readlink\")?;\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`readlink`\", reject_with)?;\n+            // readlink never sets \"EPERM\". Set \"ENOENT\".\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n+            return Ok(-1);\n+        }\n \n         let pathname = this.read_path_from_c_str(this.read_pointer(pathname_op)?)?;\n         let buf = this.read_pointer(buf_op)?;"}]}