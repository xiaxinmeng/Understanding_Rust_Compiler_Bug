{"sha": "e390b91e5717a338db20360a1ddffa23ba66701d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOTBiOTFlNTcxN2EzMzhkYjIwMzYwYTFkZGZmYTIzYmE2NjcwMWQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-13T11:06:42Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-13T11:06:42Z"}, "message": "Use TraitQueryMode::Canonical when testing predicates in const prop", "tree": {"sha": "77041173e827cc828dd49fe064389b96b799bf9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77041173e827cc828dd49fe064389b96b799bf9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e390b91e5717a338db20360a1ddffa23ba66701d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl4cT1oACgkQtAh+UQ6Y\nsWTR1RAAgUqGm+QcZv1V/6mXknz0cRaOVT+3n12rxKYjDTYvpRJ3Xez0SS+rw/0o\nPh3uGII36CS7wWipKRsaBmgbgbZXDx7TaisldWalvS6t3MG15BpTgoks94dpLegP\nMfmaErV6wHKXOPOky1UrPbDpoXz3AXWtg4MxznQd22/l7Hfe9iuTsXFMEXv0cdHv\nxNI+EHL+BtUDlkSgOYS0+YKFoM8LAHPW2tHhNPR7rWr/MfI9uROvafKHStgUkfoZ\n5VlL9E3XAHhXfwzOoCqL3pvy6raB2+SpvEAsuypOxyAPmQgNjFum5PMtbReF1iUe\nYWqzWMM+cwJIA/1IyzXuRVBCzVzmD5V/Q6VwNizV6zAiEZkb1xiBid3A+/0SWB1k\nw9OU1j5b4yz4Tt4nGQFXuwMAkXaw3IxwXf3iFItCRe2ejMf4/nAs24HmJaxdW8O0\nmBdGBVMZXK12xpOky/1aEdQ4e0o8T1HMc4jzZnZ+KElZ7RrbMN5Eu9Azi6JQtQmO\n+3dXS/u6eluzO9fUpqx4O7qqnjqCjltODPyG91KjXn4SOdmvh4dFO5J/C9YkaZjo\nArexfgmd7X2626N+ZSIT4Ts89/O74WpiGlZSgSPbvS3XeSCYsFFiMYoK02+9GO3d\nzB7ItZe4LyQr+1ogvpW9rsz32VCBQVw86j42ULwYwTkdKxBIQKo=\n=Q74c\n-----END PGP SIGNATURE-----", "payload": "tree 77041173e827cc828dd49fe064389b96b799bf9b\nparent 6a0bb1867b2026e05982f865bb48857d7e492cd7\nauthor Aaron Hill <aa1ronham@gmail.com> 1578913602 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1578913602 -0500\n\nUse TraitQueryMode::Canonical when testing predicates in const prop\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e390b91e5717a338db20360a1ddffa23ba66701d", "html_url": "https://github.com/rust-lang/rust/commit/e390b91e5717a338db20360a1ddffa23ba66701d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e390b91e5717a338db20360a1ddffa23ba66701d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0bb1867b2026e05982f865bb48857d7e492cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0bb1867b2026e05982f865bb48857d7e492cd7", "html_url": "https://github.com/rust-lang/rust/commit/6a0bb1867b2026e05982f865bb48857d7e492cd7"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "e7a4c5b5921052aa9ba41d3c713e3db873d63b05", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=e390b91e5717a338db20360a1ddffa23ba66701d", "patch": "@@ -1,6 +1,7 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n+use crate::traits::TraitQueryMode;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_data_structures::base_n;\n@@ -167,7 +168,9 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(..) => return true,\n         };\n \n-        tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n+        // We shouldn't encounter any overflow here, so we use TraitQueryMode::Standard\\\n+        // to report an error if overflow somehow occurs.\n+        tcx.substitute_normalize_and_test_predicates((def_id, &substs, TraitQueryMode::Standard))\n     }\n \n     pub fn to_string(&self, tcx: TyCtxt<'tcx>, debug: bool) -> String {"}, {"sha": "669ba4abfadd8ae994ba9dc165443aefa05a6bd3", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=e390b91e5717a338db20360a1ddffa23ba66701d", "patch": "@@ -1141,11 +1141,11 @@ rustc_queries! {\n             desc { \"normalizing `{:?}`\", goal }\n         }\n \n-        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n+        query substitute_normalize_and_test_predicates(key: (DefId, SubstsRef<'tcx>, traits::TraitQueryMode)) -> bool {\n             no_force\n             desc { |tcx|\n-                \"testing substituted normalized predicates:`{}`\",\n-                tcx.def_path_str(key.0)\n+                \"testing substituted normalized predicates in mode {:?}:`{}`\",\n+                key.2, tcx.def_path_str(key.0)\n             }\n         }\n "}, {"sha": "9e5abc80822c7cf5d5653355bfc25acc4e7b289f", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=e390b91e5717a338db20360a1ddffa23ba66701d", "patch": "@@ -16,6 +16,7 @@ use super::CodeSelectionError;\n use super::{ConstEvalFailure, Unimplemented};\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n+use crate::traits::TraitQueryMode;\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     type Predicate = ty::Predicate<'tcx>;\n@@ -62,6 +63,9 @@ pub struct FulfillmentContext<'tcx> {\n     // a snapshot (they don't *straddle* a snapshot, so there\n     // is no trouble there).\n     usable_in_snapshot: bool,\n+\n+    // The `TraitQueryMode` used when constructing a `SelectionContext`\n+    query_mode: TraitQueryMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -75,12 +79,26 @@ pub struct PendingPredicateObligation<'tcx> {\n static_assert_size!(PendingPredicateObligation<'_>, 136);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n-    /// Creates a new fulfillment context.\n+    /// Creates a new fulfillment context with `TraitQueryMode::Standard`\n+    /// You almost always want to use this instead of `with_query_mode`\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: false,\n+            query_mode: TraitQueryMode::Standard,\n+        }\n+    }\n+\n+    /// Creates a new fulfillment context with the specified query mode.\n+    /// This should only be used when you want to ignore overflow,\n+    /// rather than reporting it as an error.\n+    pub fn with_query_mode(query_mode: TraitQueryMode) -> FulfillmentContext<'tcx> {\n+        FulfillmentContext {\n+            predicates: ObligationForest::new(),\n+            register_region_obligations: true,\n+            usable_in_snapshot: false,\n+            query_mode,\n         }\n     }\n \n@@ -89,6 +107,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: true,\n             usable_in_snapshot: true,\n+            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -97,6 +116,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             predicates: ObligationForest::new(),\n             register_region_obligations: false,\n             usable_in_snapshot: false,\n+            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -217,7 +237,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n-        let mut selcx = SelectionContext::new(infcx);\n+        let mut selcx = SelectionContext::with_query_mode(infcx, self.query_mode);\n         self.select(&mut selcx)\n     }\n "}, {"sha": "31de5409fc8be9389b6b3cfc953cc34f3661d1bb", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e390b91e5717a338db20360a1ddffa23ba66701d", "patch": "@@ -95,7 +95,7 @@ pub enum IntercrateMode {\n }\n \n /// The mode that trait queries run in.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, HashStable)]\n pub enum TraitQueryMode {\n     // Standard/un-canonicalized queries get accurate\n     // spans etc. passed in and hence can do reasonable\n@@ -1017,13 +1017,14 @@ where\n fn normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n+    mode: TraitQueryMode,\n ) -> bool {\n-    debug!(\"normalize_and_test_predicates(predicates={:?})\", predicates);\n+    debug!(\"normalize_and_test_predicates(predicates={:?}, mode={:?})\", predicates, mode);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n         let param_env = ty::ParamEnv::reveal_all();\n-        let mut selcx = SelectionContext::new(&infcx);\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut selcx = SelectionContext::with_query_mode(&infcx, mode);\n+        let mut fulfill_cx = FulfillmentContext::with_query_mode(mode);\n         let cause = ObligationCause::dummy();\n         let Normalized { value: predicates, obligations } =\n             normalize(&mut selcx, param_env, cause.clone(), &predicates);\n@@ -1043,12 +1044,12 @@ fn normalize_and_test_predicates<'tcx>(\n \n fn substitute_normalize_and_test_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    key: (DefId, SubstsRef<'tcx>),\n+    key: (DefId, SubstsRef<'tcx>, TraitQueryMode),\n ) -> bool {\n     debug!(\"substitute_normalize_and_test_predicates(key={:?})\", key);\n \n     let predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    let result = normalize_and_test_predicates(tcx, predicates);\n+    let result = normalize_and_test_predicates(tcx, predicates, key.2);\n \n     debug!(\"substitute_normalize_and_test_predicates(key={:?}) = {:?}\", key, result);\n     result\n@@ -1101,7 +1102,10 @@ fn vtable_methods<'tcx>(\n             // Note that this method could then never be called, so we\n             // do not want to try and codegen it, in that case (see #23435).\n             let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n+            // We don't expect overflow here, so report an error if it somehow ends\n+            // up happening.\n+            if !normalize_and_test_predicates(tcx, predicates.predicates, TraitQueryMode::Standard)\n+            {\n                 debug!(\"vtable_methods: predicates do not hold\");\n                 return None;\n             }"}, {"sha": "20f8e7f564abd6b407a4915dcf7416cfad6052fb", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=e390b91e5717a338db20360a1ddffa23ba66701d", "patch": "@@ -115,6 +115,15 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for (DefId, SubstsRef<'tcx>, traits::TraitQueryMode) {\n+    fn query_crate(&self) -> CrateNum {\n+        self.0.krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.default_span(tcx)\n+    }\n+}\n+\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate"}, {"sha": "90c97480c756221ebd7164a1696fde8f3d428c81", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e390b91e5717a338db20360a1ddffa23ba66701d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e390b91e5717a338db20360a1ddffa23ba66701d", "patch": "@@ -14,6 +14,7 @@ use rustc::mir::{\n     SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n     UnOp, RETURN_PLACE,\n };\n+use rustc::traits::TraitQueryMode;\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n };\n@@ -88,9 +89,24 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         // sure that it even makes sense to try to evaluate the body.\n         // If there are unsatisfiable where clauses, then all bets are\n         // off, and we just give up.\n+        //\n+        // Note that we use TraitQueryMode::Canonical here, which causes\n+        // us to treat overflow like any other error. This is because we\n+        // are \"speculatively\" evaluating this item with the default substs.\n+        // While this usually succeeds, it may fail with tricky impls\n+        // (e.g. the typenum crate). Const-propagation is fundamentally\n+        // \"best-effort\", and does not affect correctness in any way.\n+        // Therefore, it's perfectly fine to just \"give up\" if we're\n+        // unable to check the bounds with the default substs.\n+        //\n+        // False negatives (failing to run const-prop on something when we actually\n+        // could) are fine. However, false positives (running const-prop on\n+        // an item with unsatisfiable bounds) can lead to us generating invalid\n+        // MIR.\n         if !tcx.substitute_normalize_and_test_predicates((\n             source.def_id(),\n             InternalSubsts::identity_for_item(tcx, source.def_id()),\n+            TraitQueryMode::Canonical,\n         )) {\n             trace!(\n                 \"ConstProp skipped for item with unsatisfiable predicates: {:?}\","}]}