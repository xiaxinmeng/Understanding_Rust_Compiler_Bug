{"sha": "6b749b011350830f47a93f1efce986b3c02c4342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzQ5YjAxMTM1MDgzMGY0N2E5M2YxZWZjZTk4NmIzYzAyYzQzNDI=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-30T11:36:46Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-30T11:36:46Z"}, "message": "Clean up the other Slice*Inclusive impls for str\n\nA previous PR fixed one method that was legitimately buggy;\nthis cleans up the rest to be less diverse, mirroring the\ncorresponding impls on [T] to the greatest extent possible\nwithout introducing any unnecessary UTF-8 boundary checks at 0.", "tree": {"sha": "80676e8bf0a5a208ae718f4a5f5932fbafa8c84b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80676e8bf0a5a208ae718f4a5f5932fbafa8c84b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b749b011350830f47a93f1efce986b3c02c4342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b749b011350830f47a93f1efce986b3c02c4342", "html_url": "https://github.com/rust-lang/rust/commit/6b749b011350830f47a93f1efce986b3c02c4342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b749b011350830f47a93f1efce986b3c02c4342/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab4c811caba9cfac1488919efae6c6675e68e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab4c811caba9cfac1488919efae6c6675e68e4c", "html_url": "https://github.com/rust-lang/rust/commit/5ab4c811caba9cfac1488919efae6c6675e68e4c"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "df7b2f25a86df19820db40788ec3b27f53e4e33a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6b749b011350830f47a93f1efce986b3c02c4342/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b749b011350830f47a93f1efce986b3c02c4342/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=6b749b011350830f47a93f1efce986b3c02c4342", "patch": "@@ -2035,19 +2035,13 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            if let Some(end) = self.end.checked_add(1) {\n-                (self.start..end).get(slice)\n-            } else {\n-                None\n-            }\n+            if self.end == usize::max_value() { None }\n+            else { (self.start..self.end+1).get(slice) }\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            if let Some(end) = self.end.checked_add(1) {\n-                (self.start..end).get_mut(slice)\n-            } else {\n-                None\n-            }\n+            if self.end == usize::max_value() { None }\n+            else { (self.start..self.end+1).get_mut(slice) }\n         }\n         #[inline]\n         unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n@@ -2076,29 +2070,21 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            if self.end < usize::max_value() && slice.is_char_boundary(self.end + 1) {\n-                Some(unsafe { self.get_unchecked(slice) })\n-            } else {\n-                None\n-            }\n+            if self.end == usize::max_value() { None }\n+            else { (..self.end+1).get(slice) }\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            if self.end < usize::max_value() && slice.is_char_boundary(self.end + 1) {\n-                Some(unsafe { self.get_unchecked_mut(slice) })\n-            } else {\n-                None\n-            }\n+            if self.end == usize::max_value() { None }\n+            else { (..self.end+1).get_mut(slice) }\n         }\n         #[inline]\n         unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n-            let ptr = slice.as_ptr();\n-            super::from_utf8_unchecked(slice::from_raw_parts(ptr, self.end + 1))\n+            (..self.end+1).get_unchecked(slice)\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr();\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, self.end + 1))\n+            (..self.end+1).get_unchecked_mut(slice)\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {"}]}