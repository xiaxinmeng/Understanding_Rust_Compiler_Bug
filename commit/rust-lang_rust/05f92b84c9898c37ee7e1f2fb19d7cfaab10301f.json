{"sha": "05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjkyYjg0Yzk4OThjMzdlZTdlMWYyZmIxOWQ3Y2ZhYWIxMDMwMWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-05T08:41:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-05T08:41:00Z"}, "message": "Merge pull request #2507 from ordovicia/redundant_field_names_range\n\nDon't lint range syntax with var name `start` and/or `end`", "tree": {"sha": "6e4830c3760d90c409e6e6b00f011a98cf03530d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4830c3760d90c409e6e6b00f011a98cf03530d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJanQKcCRBK7hj4Ov3rIwAAdHIIAA5AqUrXmdXviKMZLafxVXja\nDSgyTBa32eKZ8TUBiS11t5hl5owekVu3jX4pkWNWSMdLLoeLQX9K13VJu5/HyVg+\ngHC0BYfB1rzxY6vTLbHY/JhGGZcKmAOy+BI8Feog8tmuTGyJEY02ocZSaXXuKDlO\nKQZ2UZ/AMcHdIQj33a9JC224bxhWnmug3EL0NZU1IPX7p8t3aneG38qEvOaKMBxv\n+OvUs8KRDda2TToQss2cNVnyccCYSrw7vXpg6kUK9qf2t7LSoMonFU+DtG0w4v00\nI5TPn1sfYDkO3Imj/nX1PPRQZPTLMWxwa7JG2hgWYExxCXqGmAVwUApPErtHpvQ=\n=Yvy1\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e4830c3760d90c409e6e6b00f011a98cf03530d\nparent 40ebff8c7a01eb9ff32b559bc54f58000f5a8611\nparent cdb60c6547fd83f5c11019dbc88346694f1bee17\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1520239260 +0100\ncommitter GitHub <noreply@github.com> 1520239260 +0100\n\nMerge pull request #2507 from ordovicia/redundant_field_names_range\n\nDon't lint range syntax with var name `start` and/or `end`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "html_url": "https://github.com/rust-lang/rust/commit/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ebff8c7a01eb9ff32b559bc54f58000f5a8611", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ebff8c7a01eb9ff32b559bc54f58000f5a8611", "html_url": "https://github.com/rust-lang/rust/commit/40ebff8c7a01eb9ff32b559bc54f58000f5a8611"}, {"sha": "cdb60c6547fd83f5c11019dbc88346694f1bee17", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb60c6547fd83f5c11019dbc88346694f1bee17", "html_url": "https://github.com/rust-lang/rust/commit/cdb60c6547fd83f5c11019dbc88346694f1bee17"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "885e1aa9f8d192842215ccd5f256f2d674376f3e", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{span_lint_and_sugg, match_var};\n+use utils::{is_range_expression, match_var, span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used.\n@@ -36,10 +36,17 @@ impl LintPass for RedundantFieldNames {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprStruct(_, ref fields, _) = expr.node {\n+        if let ExprStruct(ref path, ref fields, _) = expr.node {\n             for field in fields {\n                 let name = field.name.node;\n \n+                // Do not care about range expressions.\n+                // They could have redundant field name when desugared to structs.\n+                // e.g. `start..end` is desugared to `Range { start: start, end: end }`\n+                if is_range_expression(expr.span) {\n+                    continue;\n+                }\n+\n                 if match_var(&field.expr, name) && !field.is_shorthand {\n                     span_lint_and_sugg (\n                         cx,"}, {"sha": "2f2f0c04054f916223de4202c97a8dd6e9ae4994", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "patch": "@@ -64,6 +64,16 @@ pub fn in_macro(span: Span) -> bool {\n     })\n }\n \n+/// Returns true if `expn_info` was expanded by range expressions.\n+pub fn is_range_expression(span: Span) -> bool {\n+    span.ctxt().outer().expn_info().map_or(false, |info| {\n+        match info.callee.format {\n+            ExpnFormat::CompilerDesugaring(CompilerDesugaringKind::DotFill) => true,\n+            _ => false,\n+        }\n+    })\n+}\n+\n /// Returns true if the macro that expanded the crate was outside of the\n /// current crate or was a\n /// compiler plugin."}, {"sha": "cb49283010ba0ca03c78b0a626f9a727369eb246", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "patch": "@@ -1,5 +1,8 @@\n #![warn(redundant_field_names)]\n #![allow(unused_variables)]\n+#![feature(inclusive_range, inclusive_range_syntax)]\n+\n+use std::ops::{Range, RangeFrom, RangeTo, RangeInclusive, RangeToInclusive};\n \n mod foo {\n     pub const BAR: u8 = 0;\n@@ -27,4 +30,21 @@ fn main() {\n         buzz: fizz, //should be ok\n         foo: foo::BAR, //should be ok\n     };\n+\n+    // Range expressions\n+    let (start, end) = (0, 0);\n+\n+    let _ = start..;\n+    let _ = ..end;\n+    let _ = start..end;\n+\n+    let _ = ..=end;\n+    let _ = start..=end;\n+\n+    // hand-written Range family structs are linted\n+    let _ = RangeFrom { start: start };\n+    let _ = RangeTo { end: end };\n+    let _ = Range { start: start, end: end };\n+    let _ = RangeInclusive { start: start, end: end };\n+    let _ = RangeToInclusive { end: end };\n }"}, {"sha": "40315c6ffac2b3b48664c867d9ff377bef22dc16", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05f92b84c9898c37ee7e1f2fb19d7cfaab10301f/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=05f92b84c9898c37ee7e1f2fb19d7cfaab10301f", "patch": "@@ -1,16 +1,58 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:23:9\n+  --> $DIR/redundant_field_names.rs:26:9\n    |\n-23 |         gender: gender,\n+26 |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:24:9\n+  --> $DIR/redundant_field_names.rs:27:9\n    |\n-24 |         age: age,\n+27 |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n-error: aborting due to 2 previous errors\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:45:25\n+   |\n+45 |     let _ = RangeFrom { start: start };\n+   |                         ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:46:23\n+   |\n+46 |     let _ = RangeTo { end: end };\n+   |                       ^^^^^^^^ help: replace it with: `end`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:47:21\n+   |\n+47 |     let _ = Range { start: start, end: end };\n+   |                     ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:47:35\n+   |\n+47 |     let _ = Range { start: start, end: end };\n+   |                                   ^^^^^^^^ help: replace it with: `end`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:48:30\n+   |\n+48 |     let _ = RangeInclusive { start: start, end: end };\n+   |                              ^^^^^^^^^^^^ help: replace it with: `start`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:48:44\n+   |\n+48 |     let _ = RangeInclusive { start: start, end: end };\n+   |                                            ^^^^^^^^ help: replace it with: `end`\n+\n+error: redundant field names in struct initialization\n+  --> $DIR/redundant_field_names.rs:49:32\n+   |\n+49 |     let _ = RangeToInclusive { end: end };\n+   |                                ^^^^^^^^ help: replace it with: `end`\n+\n+error: aborting due to 9 previous errors\n "}]}