{"sha": "65220b5ba9a055d7dbf66859f862a8fa6b274d64", "node_id": "C_kwDOAAsO6NoAKDY1MjIwYjViYTlhMDU1ZDdkYmY2Njg1OWY4NjJhOGZhNmIyNzRkNjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-25T02:37:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-25T02:37:10Z"}, "message": "Rollup merge of #109484 - fortanix:raoul/bugfix_libtest_json_output, r=pietroalbini\n\nBugfix: avoid panic on invalid json output from libtest\n\n#108659 introduces a custom test display implementation. It does so by using libtest to output json. The stdout is read and parsed; The code trims the line read and checks whether it starts with a `{` and ends with a `}`. If so, it concludes that it must be a json encoded `Message`. Unfortunately, this does not work in all cases:\n\n- This assumes that tests running with `--nocapture` will never start and end lines with `{` and `}` characters\n- Output is generated by issuing multiple `write_message` [statements](https://github.com/rust-lang/rust/blob/master/library/test/src/formatters/json.rs#L33-L60). Where only the last one issues a `\\n`. This likely results in a race condition as we see multiple json outputs on the same line when running tests for the `x86_64-fortanix-unknown-sgx` target:\n```\n10:21:04 \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m tests/run-time-detect.rs (build/x86_64-unknown-linux-gnu/stage1-std/x86_64-fortanix-unknown-sgx/release/deps/run_time_detect-8c66026bd4b1871a)\n10:21:04\n10:21:04 running 1 tests\n10:21:04 test x86_all ... ok\n10:21:04 \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m tests/thread.rs (build/x86_64-unknown-linux-gnu/stage1-std/x86_64-fortanix-unknown-sgx/release/deps/thread-ed5456a7d80a6193)\n10:21:04 thread 'main' panicked at 'failed to parse libtest json output; error: trailing characters at line 1 column 135, line: \"{ \\\"type\\\": \\\"suite\\\", \\\"event\\\": \\\"ok\\\", \\\"passed\\\": 1, \\\"failed\\\": 0, \\\"ignored\\\": 0, \\\"measured\\\": 0, \\\"filtered_out\\\": 0, \\\"exec_time\\\": 0.000725911 }{ \\\"type\\\": \\\"suite\\\", \\\"event\\\": \\\"started\\\", \\\"test_count\\\": 1 }\\n\"', render_tests.rs:108:25\n```\n\nThis PR implements a partial fix by being much more conservative of what it asserts is a valid json encoded `Message`. This prevents panics, but still does not resolve the race condition. A discussion is needed where this race condition comes from exactly and how it best can be avoided.\n\ncc: `@jethrogb,` `@pietroalbini`", "tree": {"sha": "c3f48e6261481b3ac29c7b8b65cae187c7825b1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f48e6261481b3ac29c7b8b65cae187c7825b1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65220b5ba9a055d7dbf66859f862a8fa6b274d64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHl5WCRBK7hj4Ov3rIwAAa9kIABX/UMy6m0aXaHr7SoCXdZvr\n0ntKOn/7+WhikHiOnAgWrSGKq9S6XDpZWx2Rx2A9l8kaQdW6cssXndjoUS93as7o\nhf85Ry7s79vx6Xl7rEIkHdziqZaejDEpy9+N7ONAYkOYtIYPFcHoyGsV5fqb4TIc\ncV/alAEgl/wwumOHgq+gFLD/tLL/RDPRq+mVwkdd5wAHJFxZ+O+ecpKLKAOSOa4M\nNDt872jikIm33SZp/87THJOr7+nYSlJjVR/qjoILbzdephRPo5t65JLmTTvwfbKa\nDfBUrHy5jQWVb54SNNpDz3I8LkAtdpRw94iEjLMeSnGayqMhmEbIrRBuPcyZGss=\n=Q/Tv\n-----END PGP SIGNATURE-----\n", "payload": "tree c3f48e6261481b3ac29c7b8b65cae187c7825b1d\nparent f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e\nparent 0d1a0540e46b504597497c1db3e2a4d0d89ee550\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679711830 +0100\ncommitter GitHub <noreply@github.com> 1679711830 +0100\n\nRollup merge of #109484 - fortanix:raoul/bugfix_libtest_json_output, r=pietroalbini\n\nBugfix: avoid panic on invalid json output from libtest\n\n#108659 introduces a custom test display implementation. It does so by using libtest to output json. The stdout is read and parsed; The code trims the line read and checks whether it starts with a `{` and ends with a `}`. If so, it concludes that it must be a json encoded `Message`. Unfortunately, this does not work in all cases:\n\n- This assumes that tests running with `--nocapture` will never start and end lines with `{` and `}` characters\n- Output is generated by issuing multiple `write_message` [statements](https://github.com/rust-lang/rust/blob/master/library/test/src/formatters/json.rs#L33-L60). Where only the last one issues a `\\n`. This likely results in a race condition as we see multiple json outputs on the same line when running tests for the `x86_64-fortanix-unknown-sgx` target:\n```\n10:21:04 \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m tests/run-time-detect.rs (build/x86_64-unknown-linux-gnu/stage1-std/x86_64-fortanix-unknown-sgx/release/deps/run_time_detect-8c66026bd4b1871a)\n10:21:04\n10:21:04 running 1 tests\n10:21:04 test x86_all ... ok\n10:21:04 \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m tests/thread.rs (build/x86_64-unknown-linux-gnu/stage1-std/x86_64-fortanix-unknown-sgx/release/deps/thread-ed5456a7d80a6193)\n10:21:04 thread 'main' panicked at 'failed to parse libtest json output; error: trailing characters at line 1 column 135, line: \"{ \\\"type\\\": \\\"suite\\\", \\\"event\\\": \\\"ok\\\", \\\"passed\\\": 1, \\\"failed\\\": 0, \\\"ignored\\\": 0, \\\"measured\\\": 0, \\\"filtered_out\\\": 0, \\\"exec_time\\\": 0.000725911 }{ \\\"type\\\": \\\"suite\\\", \\\"event\\\": \\\"started\\\", \\\"test_count\\\": 1 }\\n\"', render_tests.rs:108:25\n```\n\nThis PR implements a partial fix by being much more conservative of what it asserts is a valid json encoded `Message`. This prevents panics, but still does not resolve the race condition. A discussion is needed where this race condition comes from exactly and how it best can be avoided.\n\ncc: `@jethrogb,` `@pietroalbini`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65220b5ba9a055d7dbf66859f862a8fa6b274d64", "html_url": "https://github.com/rust-lang/rust/commit/65220b5ba9a055d7dbf66859f862a8fa6b274d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65220b5ba9a055d7dbf66859f862a8fa6b274d64/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "html_url": "https://github.com/rust-lang/rust/commit/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e"}, {"sha": "0d1a0540e46b504597497c1db3e2a4d0d89ee550", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1a0540e46b504597497c1db3e2a4d0d89ee550", "html_url": "https://github.com/rust-lang/rust/commit/0d1a0540e46b504597497c1db3e2a4d0d89ee550"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "19019ad2c089dc0f73bbd65f320857f83aa674fe", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65220b5ba9a055d7dbf66859f862a8fa6b274d64/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65220b5ba9a055d7dbf66859f862a8fa6b274d64/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=65220b5ba9a055d7dbf66859f862a8fa6b274d64", "patch": "@@ -100,18 +100,13 @@ impl<'a> Renderer<'a> {\n                 break;\n             }\n \n-            let trimmed = line.trim();\n-            if trimmed.starts_with(\"{\") && trimmed.ends_with(\"}\") {\n-                self.render_message(match serde_json::from_str(&trimmed) {\n-                    Ok(parsed) => parsed,\n-                    Err(err) => {\n-                        panic!(\"failed to parse libtest json output; error: {err}, line: {line:?}\");\n-                    }\n-                });\n-            } else {\n-                // Handle non-JSON output, for example when --nocapture is passed.\n-                print!(\"{line}\");\n-                let _ = std::io::stdout().flush();\n+            match serde_json::from_str(&line) {\n+                Ok(parsed) => self.render_message(parsed),\n+                Err(_err) => {\n+                    // Handle non-JSON output, for example when --nocapture is passed.\n+                    print!(\"{line}\");\n+                    let _ = std::io::stdout().flush();\n+                }\n             }\n         }\n     }"}]}