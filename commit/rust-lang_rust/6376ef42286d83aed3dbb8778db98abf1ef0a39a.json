{"sha": "6376ef42286d83aed3dbb8778db98abf1ef0a39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzZlZjQyMjg2ZDgzYWVkM2RiYjg3NzhkYjk4YWJmMWVmMGEzOWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-17T13:21:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-17T13:21:01Z"}, "message": "run the *compiled* run-pass tests on the host machine", "tree": {"sha": "f136e47bbfac79aa1bc9339380576cd11d03f025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f136e47bbfac79aa1bc9339380576cd11d03f025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6376ef42286d83aed3dbb8778db98abf1ef0a39a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIbBAABAgAGBQJXY/k9AAoJEFbW7qD8Z6xGfMcP9jBEjFwOWKC3EugffDQ1nImI\nGTlatBpYYLv3OlP/FIJiQCGPf4iKWCAJOjxtm+Y2pId8acDkXc02ZjaJBuacjgGU\nfTt9z3/7YITJHgIzGDB+n72Bi4aSui5/Ow8Exz3VazhjK7+BpcvHaTsz9/lC4j1B\nHlnBDOu81/X8UuqoAeIV2CCClp8YSK+ODMtTrJV/NjW6AlHllPVXhbOdk3KqbrNQ\nMi5HjwQdErkklPRcHUMv6Gzex+qLNH6srfze1dbnAur7tvKPTpFpnqMwzmIsos2G\nUQtImXV2dxTzIiXtnu6spQswMamAhbkZ3amI+5HY7Kq60TKfwfcdfgGN0G2iHxRb\njUXvOGowYWzXi791R8vlZwWdZno0/DoRG4T6vQd6x0QC8HwBmIlPqsm1mnMCqA/G\nzD2AaTZMATBIgDLMV9qS5g4WlPBqcqXqNvsU5nBMlaX7/Y81Hadmo43TVQ0SXWwE\nPORmTsoJrQpgrA/wvS5TcPxc0r6AG4UhYcrII/yjXnySmvXTlu8Qk4vdWBEox1ut\nWRnIuTNd7iX9YxE0ISIQX/Nb8a5wxjpPuguZd3ZAM09LtpqW/Vu0BnZVmMfcHnum\npsu78Qa8qAWbkPr833B8+ceBe+4CyLooStIiageNZTjvMvdjPpuBNdC8bb1CUAy4\n+RnM+CzEs229Ost724A=\n=VrBn\n-----END PGP SIGNATURE-----", "payload": "tree f136e47bbfac79aa1bc9339380576cd11d03f025\nparent 3ba4f6db04487929b2eecfc645fa9f4d8c54dfea\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466169661 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466169661 +0200\n\nrun the *compiled* run-pass tests on the host machine"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6376ef42286d83aed3dbb8778db98abf1ef0a39a", "html_url": "https://github.com/rust-lang/rust/commit/6376ef42286d83aed3dbb8778db98abf1ef0a39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6376ef42286d83aed3dbb8778db98abf1ef0a39a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba4f6db04487929b2eecfc645fa9f4d8c54dfea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba4f6db04487929b2eecfc645fa9f4d8c54dfea", "html_url": "https://github.com/rust-lang/rust/commit/3ba4f6db04487929b2eecfc645fa9f4d8c54dfea"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "e57869766bec36d16d28f0d8439d79302fc9a5d3", "filename": "tests/compiletest.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6376ef42286d83aed3dbb8778db98abf1ef0a39a/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6376ef42286d83aed3dbb8778db98abf1ef0a39a/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=6376ef42286d83aed3dbb8778db98abf1ef0a39a", "patch": "@@ -3,23 +3,32 @@ extern crate compiletest_rs as compiletest;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n \n-fn run_mode(dir: &'static str, mode: &'static str, sysroot: &str) {\n+fn compile_fail(sysroot: &str) {\n     // Disable rustc's new error fomatting. It breaks these tests.\n     std::env::remove_var(\"RUST_NEW_ERROR_FORMAT\");\n     let flags = format!(\"--sysroot {} -Dwarnings\", sysroot);\n     for_all_targets(sysroot, |target| {\n         let mut config = compiletest::default_config();\n         config.host_rustcflags = Some(flags.clone());\n-        config.mode = mode.parse().expect(\"Invalid mode\");\n+        config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n         config.run_lib_path = Path::new(sysroot).join(\"lib\").join(\"rustlib\").join(&target).join(\"lib\");\n         config.rustc_path = \"target/debug/miri\".into();\n-        config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n+        config.src_base = PathBuf::from(\"tests/compile-fail\".to_string());\n         config.target = target.to_owned();\n         config.target_rustcflags = Some(flags.clone());\n         compiletest::run_tests(&config);\n     });\n }\n \n+fn run_pass() {\n+    // Disable rustc's new error fomatting. It breaks these tests.\n+    std::env::remove_var(\"RUST_NEW_ERROR_FORMAT\");\n+    let mut config = compiletest::default_config();\n+    config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n+    config.src_base = PathBuf::from(\"tests/run-pass\".to_string());\n+    compiletest::run_tests(&config);\n+}\n+\n fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n     for target in std::fs::read_dir(format!(\"{}/lib/rustlib/\", sysroot)).unwrap() {\n         let target = target.unwrap();\n@@ -47,7 +56,8 @@ fn compile_test() {\n             .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n             .to_owned(),\n     };\n-    run_mode(\"compile-fail\", \"compile-fail\", &sysroot);\n+    compile_fail(&sysroot);\n+    run_pass();\n     for_all_targets(&sysroot, |target| {\n         for file in std::fs::read_dir(\"tests/run-pass\").unwrap() {\n             let file = file.unwrap();"}]}