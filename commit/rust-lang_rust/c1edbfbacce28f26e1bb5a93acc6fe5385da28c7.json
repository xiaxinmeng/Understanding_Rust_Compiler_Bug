{"sha": "c1edbfbacce28f26e1bb5a93acc6fe5385da28c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWRiZmJhY2NlMjhmMjZlMWJiNWE5M2FjYzZmZTUzODVkYTI4Yzc=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-22T08:01:16Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-22T08:01:16Z"}, "message": "better assist label", "tree": {"sha": "10fad46bf95cc8975a62d2af2cea99a522698544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10fad46bf95cc8975a62d2af2cea99a522698544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1edbfbacce28f26e1bb5a93acc6fe5385da28c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1edbfbacce28f26e1bb5a93acc6fe5385da28c7", "html_url": "https://github.com/rust-lang/rust/commit/c1edbfbacce28f26e1bb5a93acc6fe5385da28c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1edbfbacce28f26e1bb5a93acc6fe5385da28c7/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50923ad741e3734e06a0d48845b334ba5b8565cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/50923ad741e3734e06a0d48845b334ba5b8565cb", "html_url": "https://github.com/rust-lang/rust/commit/50923ad741e3734e06a0d48845b334ba5b8565cb"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "6e5d78b1ea5814f2e152e4ef665a60dda3fb962a", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c1edbfbacce28f26e1bb5a93acc6fe5385da28c7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edbfbacce28f26e1bb5a93acc6fe5385da28c7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=c1edbfbacce28f26e1bb5a93acc6fe5385da28c7", "patch": "@@ -88,7 +88,8 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let (target, file, insert_offset) = get_fn_target(ctx, &target_module, call.clone())?;\n     let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module, target)?;\n     let target = call.syntax().text_range();\n-    add_func_to_accumulator(acc, ctx, target, function_builder, insert_offset, file, None)\n+    let label = format!(\"Generate {} function\", function_builder.fn_name.clone());\n+    add_func_to_accumulator(acc, ctx, target, function_builder, insert_offset, file, None, label)\n }\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -114,6 +115,7 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         FunctionBuilder::from_method_call(ctx, &call, &fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n     let adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n+    let label = format!(\"Generate {} method\", function_builder.fn_name.clone());\n     add_func_to_accumulator(\n         acc,\n         ctx,\n@@ -122,6 +124,7 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         insert_offset,\n         range.file_id,\n         adt_name,\n+        label,\n     )\n }\n \n@@ -133,24 +136,20 @@ fn add_func_to_accumulator(\n     insert_offset: TextSize,\n     file: FileId,\n     adt_name: Option<hir::Name>,\n+    label: String,\n ) -> Option<()> {\n-    acc.add(\n-        AssistId(\"generate_function\", AssistKind::Generate),\n-        format!(\"Generate `{}` method\", function_builder.fn_name),\n-        text_range,\n-        |builder| {\n-            let function_template = function_builder.render();\n-            let mut func = function_template.to_string(ctx.config.snippet_cap);\n-            if let Some(name) = adt_name {\n-                func = format!(\"\\nimpl {} {{\\n{}\\n}}\", name, func);\n-            }\n-            builder.edit_file(file);\n-            match ctx.config.snippet_cap {\n-                Some(cap) => builder.insert_snippet(cap, insert_offset, func),\n-                None => builder.insert(insert_offset, func),\n-            }\n-        },\n-    )\n+    acc.add(AssistId(\"generate_function\", AssistKind::Generate), label, text_range, |builder| {\n+        let function_template = function_builder.render();\n+        let mut func = function_template.to_string(ctx.config.snippet_cap);\n+        if let Some(name) = adt_name {\n+            func = format!(\"\\nimpl {} {{\\n{}\\n}}\", name, func);\n+        }\n+        builder.edit_file(file);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, insert_offset, func),\n+            None => builder.insert(insert_offset, func),\n+        }\n+    })\n }\n \n fn current_module(current_node: &SyntaxNode, ctx: &AssistContext) -> Option<Module> {"}]}