{"sha": "f5c55ff379913b7acca2ae032120e74aaa4dd822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YzU1ZmYzNzk5MTNiN2FjY2EyYWUwMzIxMjBlNzRhYWE0ZGQ4MjI=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-10-12T17:38:44Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-07T17:42:29Z"}, "message": "    support `default impl` for specialization\n\n    a `default impl` need not include all items from the trait\n    a `default impl` alone does not mean that a type implements the trait", "tree": {"sha": "2e9a56c461b7aab73a1c6a6e371dbeb3c25660df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e9a56c461b7aab73a1c6a6e371dbeb3c25660df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c55ff379913b7acca2ae032120e74aaa4dd822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c55ff379913b7acca2ae032120e74aaa4dd822", "html_url": "https://github.com/rust-lang/rust/commit/f5c55ff379913b7acca2ae032120e74aaa4dd822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c55ff379913b7acca2ae032120e74aaa4dd822/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "html_url": "https://github.com/rust-lang/rust/commit/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c"}], "stats": {"total": 903, "additions": 870, "deletions": 33}, "files": [{"sha": "42724274eb701b685452731f7addc9a3183f99d1", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -218,7 +218,8 @@ impl_stable_hash_for!(enum ty::Visibility {\n });\n \n impl_stable_hash_for!(struct ty::TraitRef<'tcx> { def_id, substs });\n-impl_stable_hash_for!(struct ty::TraitPredicate<'tcx> { trait_ref });\n+impl_stable_hash_for!(enum ty::DefaultImplCheck { Yes, No });\n+impl_stable_hash_for!(struct ty::TraitPredicate<'tcx> { trait_ref, default_impl_check });\n impl_stable_hash_for!(tuple_struct ty::EquatePredicate<'tcx> { t1, t2 });\n impl_stable_hash_for!(struct ty::SubtypePredicate<'tcx> { a_is_expected, a, b });\n "}, {"sha": "ee6bf4180ddab1fabfb4c0236497895b0da53436", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1083,12 +1083,39 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     }\n \n     // Treat negative impls as unimplemented\n-    fn filter_negative_impls(&self, candidate: SelectionCandidate<'tcx>)\n-                             -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n+    fn filter_negative_and_default_impls<'o>(&self,\n+                                             candidate: SelectionCandidate<'tcx>,\n+                                             stack: &TraitObligationStack<'o, 'tcx>)\n+                                             -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n+\n         if let ImplCandidate(def_id) = candidate {\n             if self.tcx().impl_polarity(def_id) == hir::ImplPolarity::Negative {\n                 return Err(Unimplemented)\n             }\n+\n+            // if def_id is a default impl and it doesn't implement all the trait items,\n+            // the impl doesn't implement the trait.\n+            // An `Unimplemented` error is returned only if the default_impl_check is\n+            // applicable to the trait predicate or the cause of the predicate is an\n+            // `ObjectCastObligation`\n+            if self.tcx().impl_is_default(def_id) &&\n+               !self.tcx().default_impl_implement_all_methods(def_id){\n+                match stack.obligation.cause.code {\n+                    ObligationCauseCode::ObjectCastObligation(_) =>  {\n+                        return Err(Unimplemented)\n+                    },\n+                    ObligationCauseCode::ItemObligation(..) |\n+                    ObligationCauseCode::MiscObligation =>  {\n+                        if let ty::DefaultImplCheck::Yes = stack.obligation\n+                                                                .predicate\n+                                                                .skip_binder()\n+                                                                .default_impl_check {\n+                            return Err(Unimplemented)\n+                        }\n+                    },\n+                    _ => {}\n+                }\n+            }\n         }\n         Ok(Some(candidate))\n     }\n@@ -1178,9 +1205,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // Instead, we select the right impl now but report `Bar does\n         // not implement Clone`.\n         if candidates.len() == 1 {\n-            return self.filter_negative_impls(candidates.pop().unwrap());\n+            return self.filter_negative_and_default_impls(candidates.pop().unwrap(), stack);\n         }\n-\n         // Winnow, but record the exact outcome of evaluation, which\n         // is needed for specialization.\n         let mut candidates: Vec<_> = candidates.into_iter().filter_map(|c| {\n@@ -1239,7 +1265,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         // Just one candidate left.\n-        self.filter_negative_impls(candidates.pop().unwrap().candidate)\n+        self.filter_negative_and_default_impls(candidates.pop().unwrap().candidate, stack)\n     }\n \n     fn is_knowable<'o>(&mut self,"}, {"sha": "9e0859c67a0adfcce45c9f11b7c3b82460329728", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -22,8 +22,11 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                        pred: &ty::Predicate<'tcx>)\n                                        -> ty::Predicate<'tcx> {\n     match *pred {\n-        ty::Predicate::Trait(ref data) =>\n-            ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data)),\n+        ty::Predicate::Trait(ref data) => {\n+            let anonymized_pred = ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data));\n+            anonymized_pred.change_default_impl_check(ty::DefaultImplCheck::No)\n+                           .unwrap_or(anonymized_pred)\n+        }\n \n         ty::Predicate::Equate(ref data) =>\n             ty::Predicate::Equate(tcx.anonymize_late_bound_regions(data)),\n@@ -554,6 +557,24 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn impl_item_is_final(self, node_item: &NodeItem<hir::Defaultness>) -> bool {\n         node_item.item.is_final() && !self.impl_is_default(node_item.node.def_id())\n     }\n+\n+    pub fn default_impl_implement_all_methods(self, node_item_def_id: DefId) -> bool {\n+        if let Some(impl_trait_ref) = self.impl_trait_ref(node_item_def_id) {\n+            let trait_def = self.trait_def(impl_trait_ref.def_id);\n+            for trait_item in self.associated_items(impl_trait_ref.def_id) {\n+                let is_implemented = trait_def.ancestors(self, node_item_def_id)\n+                    .defs(self, trait_item.name, trait_item.kind, impl_trait_ref.def_id)\n+                    .next()\n+                    .map(|node_item| !node_item.node.is_from_trait())\n+                    .unwrap_or(false);\n+\n+                if !is_implemented {\n+                    return false;\n+                }\n+            }\n+        }\n+        true\n+    }\n }\n \n pub enum TupleArgumentsFlag { Yes, No }"}, {"sha": "0bc092d99eba1cef464e87514db77ad0b3e39534", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -9,14 +9,19 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n-use ty::subst::Kind;\n+use ty::{self, Ty, TypeFoldable, Substs, TyCtxt, AssociatedKind, AssociatedItemContainer};\n+use ty::subst::{Kind, Subst};\n use traits;\n use syntax::abi::Abi;\n use util::ppaux;\n \n use std::fmt;\n \n+use syntax_pos::{BytePos, Span};\n+use syntax::ext::hygiene::SyntaxContext;\n+use hir::map::Node::NodeTraitItem;\n+use hir;\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Instance<'tcx> {\n     pub def: InstanceDef<'tcx>,\n@@ -260,6 +265,13 @@ fn resolve_associated_item<'a, 'tcx>(\n         traits::VtableImpl(impl_data) => {\n             let (def_id, substs) = traits::find_associated_item(\n                 tcx, trait_item, rcvr_substs, &impl_data);\n+\n+            check_unimplemented_trait_item(tcx,\n+                                           impl_data.impl_def_id,\n+                                           def_id,\n+                                           trait_id,\n+                                           trait_item);\n+\n             let substs = tcx.erase_regions(&substs);\n             Some(ty::Instance::new(def_id, substs))\n         }\n@@ -363,3 +375,108 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n     Instance { def, substs }\n }\n+\n+fn check_unimplemented_trait_item<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    impl_def_id: DefId,\n+    trait_item_def_id: DefId,\n+    trait_id: DefId,\n+    trait_item: &ty::AssociatedItem)\n+{\n+    // if trait_item_def_id is a trait item and it doesn't have a default trait implementation\n+    // the resolution has found an unimplemented trait item inside a default impl\n+    if tcx.impl_is_default(impl_def_id) {\n+        let is_unimplemented_trait_item = match tcx.hir.as_local_node_id(trait_item_def_id) {\n+            Some(node_id) =>\n+                match tcx.hir.find(node_id) {\n+                    Some(NodeTraitItem(item)) => {\n+                        if let hir::TraitItemKind::Method(_,\n+                                                          hir::TraitMethod::Provided(_))\n+                                                          = item.node {\n+                            false\n+                        } else {\n+                            true\n+                        }\n+                    },\n+                    _ => false\n+                }\n+            None => {\n+                let item = tcx.global_tcx().associated_item(trait_item_def_id);\n+                match item.kind {\n+                    AssociatedKind::Method => match item.container {\n+                        AssociatedItemContainer::TraitContainer(_) => {\n+                            !item.defaultness.has_value()\n+                        }\n+                        _ => false\n+                    }\n+                    _ => false\n+                }\n+            }\n+        };\n+\n+        if is_unimplemented_trait_item {\n+            let mut err = tcx.sess.struct_err(&format!(\"the trait method `{}` \\\n+                                                        is not implemented\",\n+                                               trait_item.name));\n+\n+            let mut help_messages = Vec::new();\n+            help_messages.push(\n+                if impl_def_id.is_local() {\n+                    let item = tcx.hir\n+                                  .expect_item(\n+                                    tcx.hir\n+                                       .as_local_node_id(impl_def_id).unwrap()\n+                                  );\n+                    (item.span, format!(\"implement it inside this `default impl`\"))\n+                } else {\n+                    (Span::new (\n+                        BytePos(0),\n+                        BytePos(0),\n+                        SyntaxContext::empty()\n+                    ),\n+                    format!(\"implement it inside the {} `default impl`\",\n+                            tcx.item_path_str(impl_def_id)))\n+                }\n+            );\n+\n+            help_messages.push(\n+                if trait_id.is_local() {\n+                    let trait_item = tcx.hir\n+                                        .expect_item(\n+                                          tcx.hir\n+                                             .as_local_node_id(trait_id).unwrap()\n+                                        );\n+                    (trait_item.span, format!(\"provide a default method implementation \\\n+                                             inside this `trait`\"))\n+                } else {\n+                    (Span::new (\n+                        BytePos(0),\n+                        BytePos(0),\n+                        SyntaxContext::empty()\n+                    ),\n+                    format!(\"provide a default method implementation \\\n+                             inside the {} `trait`\",\n+                            tcx.item_path_str(trait_id)))\n+                }\n+            );\n+\n+            help_messages.sort_by(|&(a,_), &(b,_)| a.partial_cmp(&b).unwrap());\n+\n+            let mut cnjs = vec![\"or \", \"either \"];\n+            help_messages.iter().for_each(|&(span, ref msg)| {\n+                let mut help_msg = String::from(cnjs.pop().unwrap_or(\"\"));\n+                help_msg.push_str(&msg);\n+\n+                if span.data().lo == BytePos(0) && span.data().hi == BytePos(0) {\n+                    err.help(&help_msg);\n+                } else {\n+                    err.span_help(span, &help_msg);\n+                }\n+            });\n+\n+            err.note(&format!(\"a `default impl` doesn't need to include all \\\n+                               items from the trait\"));\n+            err.emit();\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "31cb4a64286955e7d9c2a23d9cbd341d111f3c42", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1070,9 +1070,13 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum DefaultImplCheck { Yes, No, }\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct TraitPredicate<'tcx> {\n-    pub trait_ref: TraitRef<'tcx>\n+    pub trait_ref: TraitRef<'tcx>,\n+    pub default_impl_check: DefaultImplCheck\n }\n pub type PolyTraitPredicate<'tcx> = ty::Binder<TraitPredicate<'tcx>>;\n \n@@ -1180,7 +1184,8 @@ impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> {\n         assert!(!self.has_escaping_regions());\n \n         ty::Predicate::Trait(ty::Binder(ty::TraitPredicate {\n-            trait_ref: self.clone()\n+            trait_ref: self.clone(),\n+            default_impl_check: DefaultImplCheck::No\n         }))\n     }\n }\n@@ -1298,6 +1303,36 @@ impl<'tcx> Predicate<'tcx> {\n             }\n         }\n     }\n+\n+    pub fn change_default_impl_check(&self, default_impl_check: ty::DefaultImplCheck)\n+        -> Option<Predicate<'tcx>> {\n+        match *self {\n+            Predicate::Trait(ref t) => {\n+                if t.skip_binder().default_impl_check != default_impl_check {\n+                    Some(\n+                        Predicate::Trait(ty::Binder(ty::TraitPredicate {\n+                            trait_ref: t.skip_binder().trait_ref,\n+                            default_impl_check: default_impl_check\n+                        }))\n+                    )\n+                } else {\n+                    None\n+                }\n+            }\n+            Predicate::Trait(..) |\n+            Predicate::Projection(..) |\n+            Predicate::Equate(..) |\n+            Predicate::Subtype(..) |\n+            Predicate::RegionOutlives(..) |\n+            Predicate::WellFormed(..) |\n+            Predicate::ObjectSafe(..) |\n+            Predicate::ClosureKind(..) |\n+            Predicate::TypeOutlives(..) |\n+            Predicate::ConstEvaluatable(..) => {\n+                None\n+            }\n+        }\n+    }\n }\n \n /// Represents the bounds declared on a particular set of type"}, {"sha": "122a76ca6253c2924a0fa66868d7d27c95bb53b6", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -278,7 +278,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<ty::TraitPredicate<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n-            trait_ref,\n+            trait_ref: trait_ref,\n+            default_impl_check: self.default_impl_check\n         })\n     }\n }\n@@ -1127,7 +1128,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::SubtypePredicate<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TraitPredicate {\n-            trait_ref: self.trait_ref.fold_with(folder)\n+            trait_ref: self.trait_ref.fold_with(folder),\n+            default_impl_check: self.default_impl_check\n         }\n     }\n "}, {"sha": "542bf12ecddc29343588d8b325c3a9eb4910a69c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -582,7 +582,10 @@ impl<'tcx> PolyTraitRef<'tcx> {\n \n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         // Note that we preserve binding levels\n-        Binder(ty::TraitPredicate { trait_ref: self.0.clone() })\n+        Binder(ty::TraitPredicate {\n+            trait_ref: self.0.clone(),\n+            default_impl_check: ty::DefaultImplCheck::No\n+        })\n     }\n }\n "}, {"sha": "8b7c9d505bc5bb8106dda640e7e6dc218a2dcd45", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1230,8 +1230,12 @@ define_print! {\n define_print! {\n     ('tcx) ty::TraitPredicate<'tcx>, (self, f, cx) {\n         debug {\n-            write!(f, \"TraitPredicate({:?})\",\n-                   self.trait_ref)\n+            let default_impl_check_value = match self.default_impl_check {\n+                ty::DefaultImplCheck::Yes => \"default_impl_check: yes\",\n+                ty::DefaultImplCheck::No => \"default_impl_check: no\",\n+            };\n+            write!(f, \"TraitPredicate({:?}, {})\",\n+               self.trait_ref, default_impl_check_value)\n         }\n         display {\n             print!(f, cx, print(self.trait_ref.self_ty()), write(\": \"), print(self.trait_ref))"}, {"sha": "0851075a0924f9e4cfce7650ca65c16a28f00043", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -618,6 +618,18 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                        self.output);\n                 } else {\n                     visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n+\n+                    if tcx.sess.has_errors() {\n+                        match func {\n+                            &mir::Operand::Consume(_) => {}\n+                            &mir::Operand::Constant(ref cst) => {\n+                                tcx.sess\n+                                   .span_note_without_error(cst.span,\n+                                                            \"the function call is here\");\n+                            }\n+                        }\n+                        tcx.sess.abort_if_errors();\n+                    }\n                 }\n             }\n             mir::TerminatorKind::Drop { ref location, .. } |\n@@ -678,7 +690,10 @@ fn visit_fn_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              ty::ParamEnv::empty(traits::Reveal::All),\n                                              def_id,\n                                              substs).unwrap();\n-        visit_instance_use(tcx, instance, is_direct_call, output);\n+        if !tcx.sess.has_errors() {\n+            // continue only if no errors are encountered during monomorphization\n+            visit_instance_use(tcx, instance, is_direct_call, output);\n+        }\n     }\n }\n "}, {"sha": "dc42aa8dc1a544cc84ef4166e00b43b4793316ed", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1378,7 +1378,10 @@ pub struct Bounds<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n-    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, param_ty: Ty<'tcx>)\n+    pub fn predicates(&self,\n+                      tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                      param_ty: Ty<'tcx>,\n+                      default_impl_check: ty::DefaultImplCheck)\n                       -> Vec<ty::Predicate<'tcx>>\n     {\n         let mut vec = Vec::new();\n@@ -1402,7 +1405,16 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n         }\n \n         for bound_trait_ref in &self.trait_bounds {\n-            vec.push(bound_trait_ref.to_predicate());\n+            vec.push(\n+                if bound_trait_ref.skip_binder().def_id !=\n+                   tcx.lang_items().sized_trait().unwrap() {\n+                    bound_trait_ref.to_predicate()\n+                                   .change_default_impl_check(default_impl_check)\n+                                   .unwrap_or(bound_trait_ref.to_predicate())\n+                } else {\n+                    bound_trait_ref.to_predicate()\n+                }\n+            );\n         }\n \n         for projection in &self.projection_bounds {"}, {"sha": "d4180183aeffd0e49695bf4a80b82f40319ea7b1", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -189,7 +189,13 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n     let generic_assumptions = tcx.predicates_of(self_type_did);\n \n     let assumptions_in_impl_context = generic_assumptions.instantiate(tcx, &self_to_impl_substs);\n-    let assumptions_in_impl_context = assumptions_in_impl_context.predicates;\n+    let assumptions_in_impl_context: Vec<ty::Predicate> =\n+        assumptions_in_impl_context.predicates\n+                                   .iter()\n+                                   .map(|predicate| {\n+                                       predicate.change_default_impl_check(ty::DefaultImplCheck::No)\n+                                                .unwrap_or(predicate.clone())\n+                                   }).collect();\n \n     // An earlier version of this code attempted to do this checking\n     // via the traits::fulfill machinery. However, it ran into trouble\n@@ -211,7 +217,9 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n         // the analysis together via the fulfill , rather than the\n         // repeated `contains` calls.\n \n-        if !assumptions_in_impl_context.contains(&predicate) {\n+        if !assumptions_in_impl_context.contains(\n+                &predicate.change_default_impl_check(ty::DefaultImplCheck::No)\n+                          .unwrap_or(predicate.clone())) {\n             let item_span = tcx.hir.span(self_type_node_id);\n             struct_span_err!(tcx.sess, drop_impl_span, E0367,\n                              \"The requirement `{}` is added only by the Drop impl.\", predicate)"}, {"sha": "4fe2f5b574e67d6c040b183c93cc0b9799754260", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1395,7 +1395,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             .map(|node_item| !node_item.node.is_from_trait())\n             .unwrap_or(false);\n \n-        if !is_implemented {\n+        if !is_implemented && !tcx.impl_is_default(impl_id) {\n             if !trait_item.defaultness.has_value() {\n                 missing_items.push(trait_item);\n             } else if associated_type_overridden {"}, {"sha": "9c233a7a15d246160c15326a4b010a24eed15f6d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -25,6 +25,7 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n \n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n+use rustc::ty::TypeFoldable;\n \n pub struct CheckTypeWellFormedVisitor<'a, 'tcx:'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -343,8 +344,36 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                                   fcx.body_id,\n                                                   &trait_ref,\n                                                   ast_trait_ref.path.span);\n+\n+                    // not registering predicates associcated with a `default impl`\n+                    // that doesn't implement all the trait items.\n+                    // it's left to the trait selection to select those trait predicates\n+                    // and trigger an `Unimplemented` error in case the defaul_impl_check\n+                    // is applicable\n+                    let impl_not_implement_trait =\n+                        if fcx.tcx.impl_is_default(item_def_id) &&\n+                           !fcx.tcx.default_impl_implement_all_methods(item_def_id) {\n+                            true\n+                        } else {\n+                            false\n+                        };\n+\n                     for obligation in obligations {\n-                        fcx.register_predicate(obligation);\n+                        let register = match obligation.predicate {\n+                            ty::Predicate::Trait(..)  => {\n+                                if impl_not_implement_trait &&\n+                                   !obligation.predicate.has_param_types() {\n+                                    false\n+                                } else {\n+                                    true\n+                                }\n+                            }\n+                            _ => true\n+                        };\n+\n+                        if register {\n+                            fcx.register_predicate(obligation);\n+                        }\n                     }\n                 }\n                 None => {"}, {"sha": "40d69855c49a9530eafd04f83e0768073118f88b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -677,7 +677,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       SizedByDefault::No,\n                                       item.span);\n \n-    let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n+    let superbounds1 = superbounds1.predicates(tcx, self_param_ty, ty::DefaultImplCheck::No);\n \n     // Convert any explicit superbounds in the where clause,\n     // e.g. `trait Foo where Self : Bar`:\n@@ -694,7 +694,11 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     ty::GenericPredicates {\n         parent: None,\n-        predicates: superbounds\n+        predicates: superbounds.iter()\n+                               .map(|predicate| {\n+                                   predicate.change_default_impl_check(ty::DefaultImplCheck::Yes)\n+                                            .unwrap_or(predicate.clone())\n+                                }).collect()\n     }\n }\n \n@@ -1364,17 +1368,39 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node = tcx.hir.get(node_id);\n \n     let mut is_trait = None;\n+    let mut default_impl_check = ty::DefaultImplCheck::No;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => &item.generics,\n-        NodeImplItem(item) => &item.generics,\n+        NodeTraitItem(item) => {\n+            match item.node {\n+                TraitItemKind::Method(ref sig, _) => {\n+                    default_impl_check = ty::DefaultImplCheck::Yes;\n+                    &item.generics\n+                },\n+                _ => &item.generics\n+            }\n+        }\n+        NodeImplItem(item) => {\n+            match item.node {\n+                ImplItemKind::Method(ref sig, _) => {\n+                    default_impl_check = ty::DefaultImplCheck::Yes;\n+                    &item.generics\n+                },\n+                _ => &item.generics\n+            }\n+        }\n \n         NodeItem(item) => {\n             match item.node {\n                 ItemFn(.., ref generics, _) |\n                 ItemImpl(_, _, _, ref generics, ..) |\n+                ItemStruct(_, ref generics) => {\n+                    default_impl_check = ty::DefaultImplCheck::Yes;\n+                    generics\n+                }\n+\n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n@@ -1415,7 +1441,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             debug!(\"explicit_predicates_of: bounds={:?}\", bounds);\n \n-            let predicates = bounds.predicates(tcx, anon_ty);\n+            let predicates = bounds.predicates(tcx, anon_ty, ty::DefaultImplCheck::No);\n \n             debug!(\"explicit_predicates_of: predicates={:?}\", predicates);\n \n@@ -1476,7 +1502,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     &param.bounds,\n                                     SizedByDefault::Yes,\n                                     param.span);\n-        predicates.extend(bounds.predicates(tcx, param_ty));\n+        predicates.extend(bounds.predicates(tcx, param_ty, default_impl_check));\n     }\n \n     // Add in the bounds that appear in the where-clause\n@@ -1496,8 +1522,16 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                                     poly_trait_ref,\n                                                                     ty,\n                                                                     &mut projections);\n-\n-                            predicates.push(trait_ref.to_predicate());\n+                            predicates.push(\n+                               if trait_ref.skip_binder().def_id !=\n+                                  tcx.lang_items().sized_trait().unwrap() {\n+                                   trait_ref.to_predicate()\n+                                            .change_default_impl_check(default_impl_check)\n+                                            .unwrap_or(trait_ref.to_predicate())\n+                               } else {\n+                                   trait_ref.to_predicate()\n+                               }\n+                            );\n \n                             for projection in &projections {\n                                 predicates.push(projection.to_predicate());\n@@ -1552,7 +1586,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         SizedByDefault::Yes,\n                                         trait_item.span);\n \n-            bounds.predicates(tcx, assoc_ty).into_iter()\n+            bounds.predicates(tcx, assoc_ty, ty::DefaultImplCheck::No).into_iter()\n         }))\n     }\n "}, {"sha": "263f316f3c8f14b607ce25ffa184ae15f74f318a", "filename": "src/test/compile-fail/specialization/defaultimpl/auxiliary/foo_trait.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}"}, {"sha": "cee6fcf7d9ad091f68bc5c0034565ac838457693", "filename": "src/test/compile-fail/specialization/defaultimpl/auxiliary/foo_trait_default_impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait_default_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait_default_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait_default_impl.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}"}, {"sha": "54f6690aa9f19992a842efa304a79cebfb09ed1d", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-method-not-implemented-cross-crate-impl.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate-impl.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:foo_trait_default_impl.rs\n+\n+#![feature(specialization)]\n+\n+extern crate foo_trait_default_impl;\n+\n+use foo_trait_default_impl::*;\n+\n+struct MyStruct;\n+\n+fn main() {\n+    MyStruct.foo_two(); //~ NOTE the function call is here\n+}"}, {"sha": "8e2de42a09953c6107a2310fbf51072f7f3067e6", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-method-not-implemented-cross-crate.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:foo_trait.rs\n+\n+#![feature(specialization)]\n+\n+extern crate foo_trait;\n+\n+use foo_trait::{Foo};\n+\n+struct MyStruct;\n+\n+default impl Foo for MyStruct {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+//~^^^^^ HELP implement it inside this `default impl`\n+\n+fn main() {\n+    MyStruct.foo_two(); //~ NOTE the function call is here\n+}"}, {"sha": "d0db6e996d81d1de4e7f25d0dae91eabee3c4ecf", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-method-not-implemented.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+//~^^^^ HELP provide a default method implementation inside this `trait`\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+//~^^^^^ HELP implement it inside this `default impl`\n+\n+struct MyStruct;\n+\n+fn  main() {\n+    MyStruct.foo_two(); //~ NOTE the function call is here\n+}"}, {"sha": "81b85f58998cbe019eb5b75d4018b1212b61f0b1", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-casting.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-casting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-casting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-casting.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: the trait bound `MyStruct: Draw` is not satisfied\n+\n+#![feature(specialization)]\n+\n+trait Draw {\n+    fn draw(&self);\n+    fn draw2(&self);\n+}\n+\n+struct Screen {\n+    pub components: Vec<Box<Draw>>,\n+}\n+\n+impl Screen {\n+    pub fn run(&self) {\n+        for component in self.components.iter() {\n+            component.draw();\n+        }\n+    }\n+}\n+\n+default impl<T> Draw for T {\n+    fn draw(&self) {\n+        println!(\"draw\");\n+    }\n+}\n+\n+struct MyStruct;\n+\n+fn main() {\n+    let screen = Screen {\n+        components: vec![\n+            Box::new(MyStruct)\n+        ]\n+    };\n+    screen.run();\n+}"}, {"sha": "00cceeb4db3ef3a7502283ab65b873424759f6de", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-fn.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-fn.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: the trait bound `MyStruct: Foo` is not satisfied\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+fn foo<T: Foo>(x: T) -> &'static str {\n+    x.foo_one()\n+}\n+\n+struct MyStruct;\n+\n+fn main() {\n+    println!(\"{:?}\", foo(MyStruct));\n+}"}, {"sha": "51a6a9e2c6bfb56d56c9dad6d81ff21f0d0217f5", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-impl-item.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-impl-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-impl-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-impl-item.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: the trait bound `MyStruct: Foo` is not satisfied\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+struct FooS;\n+\n+impl FooS{\n+    fn foo<T: Foo>(&self, x: T) -> &'static str{\n+        x.foo_one()\n+    }\n+}\n+\n+struct MyStruct;\n+\n+fn main() {\n+    println!(\"{:?}\", FooS.foo(MyStruct));\n+}\n\\ No newline at end of file"}, {"sha": "3444dea39c20bcc281bedccb472c0d75575a4004", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-super-trait.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-super-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-super-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-super-trait.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: the trait bound `MyStruct: SuperFoo` is not satisfied\n+\n+#![feature(specialization)]\n+\n+trait SuperFoo {\n+    fn super_foo_one(&self) -> &'static str;\n+    fn super_foo_two(&self) -> &'static str;\n+}\n+\n+trait Foo: SuperFoo {\n+    fn foo(&self) -> &'static str;\n+}\n+\n+default impl<T> SuperFoo for T {\n+    fn super_foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+struct MyStruct;\n+\n+impl Foo for MyStruct {\n+    fn foo(&self) -> &'static str {\n+        \"foo\"\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", MyStruct.foo());\n+}\n\\ No newline at end of file"}, {"sha": "6af69e89316a0951f9bf138f37fb1c86c7536e01", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-trait-item.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-trait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-trait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-trait-item.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Foo<T> {\n+    fn dummy(&self, t: T);\n+}\n+\n+trait Bar<A> {\n+    fn method<B>(&self) where A: Foo<B>;\n+}\n+\n+struct S;\n+struct X;\n+\n+default impl Foo<X> for X {}\n+\n+impl Bar<X> for isize {\n+    fn method<U>(&self) where X: Foo<U> {\n+    }\n+}\n+\n+fn main() {\n+    1.method::<X>();\n+    //~^ ERROR the trait bound `X: Foo<X>` is not satisfied\n+}"}, {"sha": "a2ea087220fbc2ea81bbccbcbc324fc441f411e9", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-vec.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-vec.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: the trait bound `MyStruct: Draw` is not satisfied\n+\n+#![feature(specialization)]\n+\n+trait Draw {\n+    fn draw(&self);\n+    fn draw2(&self);\n+}\n+\n+struct Screen<T: Draw> {\n+    pub components: Vec<T>,\n+}\n+\n+impl<T> Screen<T>\n+    where T: Draw {\n+    pub fn run(&self) {\n+        for component in self.components.iter() {\n+            component.draw();\n+        }\n+    }\n+}\n+\n+default impl Draw for MyStruct {\n+    fn draw(&self) {\n+        println!(\"draw\");\n+    }\n+}\n+\n+struct MyStruct;\n+\n+fn main() {\n+    let screen = Screen {\n+        components: vec![\n+            MyStruct\n+        ]\n+    };\n+    screen.run();\n+}"}, {"sha": "752b0190ea6c0b5deb960013e387723993d94c56", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/foo_trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str {\n+        \"generic Trait\"\n+    }\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for T {\n+    fn foo_two(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "4ed37b311ef022259de35c2b5035a421b023284a", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-trait-bounds.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic one\"\n+    }\n+    fn foo_two(&self) -> &'static str {\n+        \"generic two\"\n+    }\n+}\n+\n+fn foo_one<T: Foo>(x: T) -> &'static str {\n+    x.foo_one()\n+}\n+\n+fn foo_two<T: Foo>(x: T) -> &'static str {\n+    x.foo_two()\n+}\n+\n+struct MyStruct;\n+\n+fn main() {\n+    assert!(foo_one(MyStruct) == \"generic one\");\n+    assert!(foo_two(MyStruct) == \"generic two\");\n+}"}, {"sha": "5c0547b034147481e7296b00843b00c3040c1f13", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-traits-impl-default-method-cross-crate.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method-cross-crate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:foo_trait.rs\n+\n+#![feature(specialization)]\n+\n+extern crate foo_trait;\n+\n+use foo_trait::*;\n+\n+struct MyStruct;\n+\n+fn  main() {\n+    assert!(MyStruct.foo_one() == \"generic\");\n+    assert!(0u8.foo_two() == \"generic Clone\");\n+    assert!(MyStruct.foo_two() == \"generic Trait\");\n+}"}, {"sha": "254d3bebb90325dd2468ec39c8034ec1ac955956", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-traits-impl-default-method.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str {\n+        \"generic Trait\"\n+    }\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for T {\n+    fn foo_two(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+struct MyStruct;\n+\n+fn  main() {\n+    assert!(MyStruct.foo_one() == \"generic\");\n+    assert!(0u8.foo_two() == \"generic Clone\");\n+    assert!(MyStruct.foo_two() == \"generic Trait\");\n+}"}, {"sha": "409d2c78e775aa30e269d6f4ec1c9ab70419f222", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-traits-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+default impl<T: Clone> Foo for T {\n+    fn foo_two(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+struct MyStruct;\n+\n+fn  main() {\n+    assert!(MyStruct.foo_one() == \"generic\");\n+    assert!(0u8.foo_two() == \"generic Clone\");\n+}"}]}