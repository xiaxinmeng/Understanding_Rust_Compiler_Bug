{"sha": "32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyOTg4ZGIyYmQ4MmVkYzkyZjU0YzJkMzJmZGNiZDc0OGFiNzhjZDQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T21:41:15Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T21:41:36Z"}, "message": "heap: add a way to print allocator statistics", "tree": {"sha": "1c6fe7c4ae230a77926d9108604867269a1ddaac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c6fe7c4ae230a77926d9108604867269a1ddaac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "html_url": "https://github.com/rust-lang/rust/commit/32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32988db2bd82edc92f54c2d32fdcbd748ab78cd4/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3de28a920b9a9f2b9418b305dfeb30995d2c6d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3de28a920b9a9f2b9418b305dfeb30995d2c6d4", "html_url": "https://github.com/rust-lang/rust/commit/f3de28a920b9a9f2b9418b305dfeb30995d2c6d4"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "b56ba75e38502a31762a6a24372d7f45cf98fbba", "filename": "src/libstd/rt/heap.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32988db2bd82edc92f54c2d32fdcbd748ab78cd4/src%2Flibstd%2Frt%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32988db2bd82edc92f54c2d32fdcbd748ab78cd4/src%2Flibstd%2Frt%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fheap.rs?ref=32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "patch": "@@ -12,8 +12,9 @@\n // FIXME: #13996: need a way to mark the `allocate` and `reallocate` return values as `noalias`\n \n use intrinsics::{abort, cttz32};\n-use libc::{c_int, c_void, size_t};\n-use ptr::RawPtr;\n+use libc::{c_char, c_int, c_void, size_t};\n+use ptr::{RawPtr, mut_null, null};\n+use option::{None, Option};\n \n #[link(name = \"jemalloc\", kind = \"static\")]\n extern {\n@@ -22,6 +23,9 @@ extern {\n     fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n     fn je_dallocx(ptr: *mut c_void, flags: c_int);\n     fn je_nallocx(size: size_t, flags: c_int) -> size_t;\n+    fn je_malloc_stats_print(write_cb: Option<extern \"C\" fn(cbopaque: *mut c_void, *c_char)>,\n+                             cbopaque: *mut c_void,\n+                             opts: *c_char);\n }\n \n // -lpthread needs to occur after -ljemalloc, the earlier argument isn't enough\n@@ -99,6 +103,16 @@ pub fn usable_size(size: uint, align: uint) -> uint {\n     unsafe { je_nallocx(size as size_t, mallocx_align(align)) as uint }\n }\n \n+/// Print implementation-defined allocator statistics.\n+///\n+/// These statistics may be inconsistent if other threads use the allocator during the call.\n+#[unstable]\n+pub fn stats_print() {\n+    unsafe {\n+        je_malloc_stats_print(None, mut_null(), null())\n+    }\n+}\n+\n /// The allocator for unique pointers.\n #[cfg(stage0)]\n #[lang=\"exchange_malloc\"]"}]}