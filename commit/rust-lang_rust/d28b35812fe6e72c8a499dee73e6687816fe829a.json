{"sha": "d28b35812fe6e72c8a499dee73e6687816fe829a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOGIzNTgxMmZlNmU3MmM4YTQ5OWRlZTczZTY2ODc4MTZmZTgyOWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-15T08:45:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-15T08:45:38Z"}, "message": "Rollup merge of #64069 - danielhenrymantilla:feature/cstring_from_vec_of_nonzerou8, r=KodrAus\n\nAdded From<Vec<NonZeroU8>> for CString\n\nAdded a `From<Vec<NonZeroU8>>` `impl` for `CString`\n\n# Rationale\n\n  - `CString::from_vec_unchecked` is a subtle function, that makes `unsafe` code harder to audit when the generated `Vec`'s creation is non-trivial. This `impl` allows to write safer `unsafe` code thanks to the very explicit semantics of the `Vec<NonZeroU8>` type.\n\n  - One such situation is when trying to `.read()` a `CString`, see issue #59229.\n\n      - this lead to a PR: #59314, that was closed for being too specific / narrow (it only targetted being able to `.read()` a `CString`, when this pattern could have been generalized).\n\n     - the issue suggested another route, based on `From<Vec<NonZeroU8>>`, which is indeed a less general and more concise code pattern.\n\n  - quoting @shnatsel:\n\n      - >  For me the main thing about making this safe is simplifying auditing - people have spent like an hour looking at just this one unsafe block in libflate because it's not clear what exactly is unchecked, so you have to look it up when auditing anyway. This has distracted us from much more serious memory safety issues the library had.\nHaving this trivial impl in stdlib would turn this into safe code with compiler more or less guaranteeing that it's fine, and save anyone auditing the code a whole lot of time.", "tree": {"sha": "f82d061b47974ca98fbe81e5754c6d6a2b1cb70a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82d061b47974ca98fbe81e5754c6d6a2b1cb70a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28b35812fe6e72c8a499dee73e6687816fe829a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeR6+zCRBK7hj4Ov3rIwAAdHIIAH+bceBDgIhMNfngiRGkGO6d\nut1pu+C+KLjScr/CHUeuLU4lcWFpAdokXnsO5yJKbT+yJ6ZS5AwBgyRHibyRq37q\ngUQxVU4yqs9BBX7qIMS775sNzv+64rCIQ7jcR6OgI71AYfo6LWRXQCY4BKlja3nU\nJxuyZigKCjiAG88Zp1DnkaLavLfzO1Mm0bLcdn5vYipNIdTE7RirDZGyGL+nim++\n3K9vp9wOuF+bYInB4K3ZSf2tBdQL6nSAAyzVdcw7//NtLsH1NRMu11vbb74AZgS2\nDGMt11L+VjGoN3eU3QdS2jt+wt83xsCKAk22rCAjpit1uDuKzdoBt8iKNjq0jx8=\n=dLCd\n-----END PGP SIGNATURE-----\n", "payload": "tree f82d061b47974ca98fbe81e5754c6d6a2b1cb70a\nparent 19288ddfd6b3448c2c221d75610bff722a6582e8\nparent 60274a95fef57a18113f7c48be68be31ece860eb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581756338 +0100\ncommitter GitHub <noreply@github.com> 1581756338 +0100\n\nRollup merge of #64069 - danielhenrymantilla:feature/cstring_from_vec_of_nonzerou8, r=KodrAus\n\nAdded From<Vec<NonZeroU8>> for CString\n\nAdded a `From<Vec<NonZeroU8>>` `impl` for `CString`\n\n# Rationale\n\n  - `CString::from_vec_unchecked` is a subtle function, that makes `unsafe` code harder to audit when the generated `Vec`'s creation is non-trivial. This `impl` allows to write safer `unsafe` code thanks to the very explicit semantics of the `Vec<NonZeroU8>` type.\n\n  - One such situation is when trying to `.read()` a `CString`, see issue #59229.\n\n      - this lead to a PR: #59314, that was closed for being too specific / narrow (it only targetted being able to `.read()` a `CString`, when this pattern could have been generalized).\n\n     - the issue suggested another route, based on `From<Vec<NonZeroU8>>`, which is indeed a less general and more concise code pattern.\n\n  - quoting @shnatsel:\n\n      - >  For me the main thing about making this safe is simplifying auditing - people have spent like an hour looking at just this one unsafe block in libflate because it's not clear what exactly is unchecked, so you have to look it up when auditing anyway. This has distracted us from much more serious memory safety issues the library had.\nHaving this trivial impl in stdlib would turn this into safe code with compiler more or less guaranteeing that it's fine, and save anyone auditing the code a whole lot of time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28b35812fe6e72c8a499dee73e6687816fe829a", "html_url": "https://github.com/rust-lang/rust/commit/d28b35812fe6e72c8a499dee73e6687816fe829a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28b35812fe6e72c8a499dee73e6687816fe829a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19288ddfd6b3448c2c221d75610bff722a6582e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/19288ddfd6b3448c2c221d75610bff722a6582e8", "html_url": "https://github.com/rust-lang/rust/commit/19288ddfd6b3448c2c221d75610bff722a6582e8"}, {"sha": "60274a95fef57a18113f7c48be68be31ece860eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/60274a95fef57a18113f7c48be68be31ece860eb", "html_url": "https://github.com/rust-lang/rust/commit/60274a95fef57a18113f7c48be68be31ece860eb"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "04eaba515ff22081bf137b840bc46970375b2301", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d28b35812fe6e72c8a499dee73e6687816fe829a/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28b35812fe6e72c8a499dee73e6687816fe829a/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=d28b35812fe6e72c8a499dee73e6687816fe829a", "patch": "@@ -6,6 +6,7 @@ use crate::fmt::{self, Write};\n use crate::io;\n use crate::mem;\n use crate::memchr;\n+use crate::num::NonZeroU8;\n use crate::ops;\n use crate::os::raw::c_char;\n use crate::ptr;\n@@ -741,6 +742,32 @@ impl From<Box<CStr>> for CString {\n     }\n }\n \n+#[stable(feature = \"cstring_from_vec_of_nonzerou8\", since = \"1.43.0\")]\n+impl From<Vec<NonZeroU8>> for CString {\n+    /// Converts a [`Vec`]`<`[`NonZeroU8`]`>` into a [`CString`] without\n+    /// copying nor checking for inner null bytes.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`NonZeroU8`]: ../num/struct.NonZeroU8.html\n+    /// [`Vec`]: ../vec/struct.Vec.html\n+    #[inline]\n+    fn from(v: Vec<NonZeroU8>) -> CString {\n+        unsafe {\n+            // Transmute `Vec<NonZeroU8>` to `Vec<u8>`.\n+            let v: Vec<u8> = {\n+                // Safety:\n+                //   - transmuting between `NonZeroU8` and `u8` is sound;\n+                //   - `alloc::Layout<NonZeroU8> == alloc::Layout<u8>`.\n+                let (ptr, len, cap): (*mut NonZeroU8, _, _) = Vec::into_raw_parts(v);\n+                Vec::from_raw_parts(ptr.cast::<u8>(), len, cap)\n+            };\n+            // Safety: `v` cannot contain null bytes, given the type-level\n+            // invariant of `NonZeroU8`.\n+            CString::from_vec_unchecked(v)\n+        }\n+    }\n+}\n+\n #[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]\n impl Clone for Box<CStr> {\n     #[inline]"}, {"sha": "799585ffc0acf451325d17e952cd3267186bf6bd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d28b35812fe6e72c8a499dee73e6687816fe829a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28b35812fe6e72c8a499dee73e6687816fe829a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d28b35812fe6e72c8a499dee73e6687816fe829a", "patch": "@@ -309,6 +309,7 @@\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n+#![feature(vec_into_raw_parts)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n "}]}