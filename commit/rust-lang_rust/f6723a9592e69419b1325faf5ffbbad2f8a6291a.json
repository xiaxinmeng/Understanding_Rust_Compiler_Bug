{"sha": "f6723a9592e69419b1325faf5ffbbad2f8a6291a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzIzYTk1OTJlNjk0MTliMTMyNWZhZjVmZmJiYWQyZjhhNjI5MWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-12T19:21:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T17:20:28Z"}, "message": "improve comments on `safe_to_unsafe_fn_ty` and `coerce_closure_fn_ty`", "tree": {"sha": "9c4eb1ae363695b248fe14b6280a135eff5cfbe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4eb1ae363695b248fe14b6280a135eff5cfbe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6723a9592e69419b1325faf5ffbbad2f8a6291a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6723a9592e69419b1325faf5ffbbad2f8a6291a", "html_url": "https://github.com/rust-lang/rust/commit/f6723a9592e69419b1325faf5ffbbad2f8a6291a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6723a9592e69419b1325faf5ffbbad2f8a6291a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a20a3f1619db092ac935a247ff06c6e03f20255", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a20a3f1619db092ac935a247ff06c6e03f20255", "html_url": "https://github.com/rust-lang/rust/commit/7a20a3f1619db092ac935a247ff06c6e03f20255"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "1d538e1c16750bee321855999b796336035c6b1e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f6723a9592e69419b1325faf5ffbbad2f8a6291a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6723a9592e69419b1325faf5ffbbad2f8a6291a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f6723a9592e69419b1325faf5ffbbad2f8a6291a", "patch": "@@ -1708,7 +1708,9 @@ slice_interners!(\n );\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    /// Create an unsafe fn ty based on a safe fn ty.\n+    /// Given a `fn` type, returns an equivalent `unsafe fn` type;\n+    /// that is, a `fn` type that is equivalent in every way for being\n+    /// unsafe.\n     pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         assert_eq!(sig.unsafety(), hir::Unsafety::Normal);\n         self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig {\n@@ -1717,7 +1719,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }))\n     }\n \n-    /// Create an unsafe fn ty based on a safe fn ty.\n+    /// Given a closure signature `sig`, returns an equivalent `fn`\n+    /// type with the same signature. Detuples and so forth -- so\n+    /// e.g. if we have a sig with `Fn<(u32, i32)>` then you would get\n+    /// a `fn(u32, i32)`.\n     pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         let converted_sig = sig.map_bound(|s| {\n             let params_iter = match s.inputs()[0].sty {\n@@ -1731,8 +1736,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 s.output(),\n                 s.variadic,\n                 hir::Unsafety::Normal,\n-                abi::Abi::Rust\n-                )\n+                abi::Abi::Rust,\n+            )\n         });\n \n         self.mk_fn_ptr(converted_sig)"}]}