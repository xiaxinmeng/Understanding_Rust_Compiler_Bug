{"sha": "f808430497525663dd3f62c294a3ae1762abdc22", "node_id": "C_kwDOAAsO6NoAKGY4MDg0MzA0OTc1MjU2NjNkZDNmNjJjMjk0YTNhZTE3NjJhYmRjMjI", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-26T21:18:39Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-29T21:04:10Z"}, "message": "Factor out ITEM_REFS", "tree": {"sha": "944be0d79aa8946ff64887ca35c1f1adbe7f2f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944be0d79aa8946ff64887ca35c1f1adbe7f2f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f808430497525663dd3f62c294a3ae1762abdc22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f808430497525663dd3f62c294a3ae1762abdc22", "html_url": "https://github.com/rust-lang/rust/commit/f808430497525663dd3f62c294a3ae1762abdc22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f808430497525663dd3f62c294a3ae1762abdc22/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebfa1f018567932cc460eb1c293ceaac104f8451", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa1f018567932cc460eb1c293ceaac104f8451", "html_url": "https://github.com/rust-lang/rust/commit/ebfa1f018567932cc460eb1c293ceaac104f8451"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "9d1d84e32bbbebc39f3a87e15ec45ee1d3257b3b", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f808430497525663dd3f62c294a3ae1762abdc22/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f808430497525663dd3f62c294a3ae1762abdc22/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=f808430497525663dd3f62c294a3ae1762abdc22", "patch": "@@ -12,14 +12,11 @@ use crate::errors::LangItemError;\n use crate::{MethodKind, Target};\n \n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use std::sync::LazyLock;\n-\n pub enum LangItemGroup {\n     Op,\n     Fn,\n@@ -104,6 +101,14 @@ macro_rules! language_item_table {\n                 }\n             }\n \n+            /// Opposite of [`LangItem::name`]\n+            pub fn from_name(name: Symbol) -> Option<Self> {\n+                match name {\n+                    $( $module::$name => Some(LangItem::$variant), )*\n+                    _ => None,\n+                }\n+            }\n+\n             /// The [group](LangItemGroup) that this lang item belongs to,\n             /// or `None` if it doesn't belong to a group.\n             pub fn group(self) -> Option<LangItemGroup> {\n@@ -113,6 +118,12 @@ macro_rules! language_item_table {\n                 }\n             }\n \n+            pub fn target(self) -> Target {\n+                match self {\n+                    $( LangItem::$variant => $target, )*\n+                }\n+            }\n+\n             pub fn required_generics(&self) -> GenericRequirement {\n                 match self {\n                     $( LangItem::$variant => $generics, )*\n@@ -145,15 +156,6 @@ macro_rules! language_item_table {\n                 }\n             )*\n         }\n-\n-        /// A mapping from the name of the lang item to its order and the form it must be of.\n-        pub static ITEM_REFS: LazyLock<FxIndexMap<Symbol, (usize, Target)>> = LazyLock::new(|| {\n-            let mut item_refs = FxIndexMap::default();\n-            $( item_refs.insert($module::$name, (LangItem::$variant as usize, $target)); )*\n-            item_refs\n-        });\n-\n-// End of the macro\n     }\n }\n "}, {"sha": "54be30d9fe55e198ef330ca3b07537978f772b40", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f808430497525663dd3f62c294a3ae1762abdc22/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f808430497525663dd3f62c294a3ae1762abdc22/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=f808430497525663dd3f62c294a3ae1762abdc22", "patch": "@@ -16,7 +16,7 @@ use crate::weak_lang_items;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{extract, GenericRequirement, ITEM_REFS};\n+use rustc_hir::lang_items::{extract, GenericRequirement};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cstore::ExternCrate;\n@@ -43,17 +43,17 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n     fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId) {\n         let attrs = self.tcx.hir().attrs(hir_id);\n         if let Some((name, span)) = extract(&attrs) {\n-            match ITEM_REFS.get(&name).cloned() {\n+            match LangItem::from_name(name) {\n                 // Known lang item with attribute on correct target.\n-                Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    self.collect_item_extended(item_index, hir_id, span);\n+                Some(lang_item) if actual_target == lang_item.target() => {\n+                    self.collect_item_extended(lang_item, hir_id, span);\n                 }\n                 // Known lang item with attribute on incorrect target.\n-                Some((_, expected_target)) => {\n+                Some(lang_item) => {\n                     self.tcx.sess.emit_err(LangItemOnIncorrectTarget {\n                         span,\n                         name,\n-                        expected_target,\n+                        expected_target: lang_item.target(),\n                         actual_target,\n                     });\n                 }\n@@ -147,9 +147,8 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n \n     // Like collect_item() above, but also checks whether the lang item is declared\n     // with the right number of generic arguments.\n-    fn collect_item_extended(&mut self, item_index: usize, hir_id: HirId, span: Span) {\n+    fn collect_item_extended(&mut self, lang_item: LangItem, hir_id: HirId, span: Span) {\n         let item_def_id = self.tcx.hir().local_def_id(hir_id).to_def_id();\n-        let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n         let name = lang_item.name();\n \n         // Now check whether the lang_item has the expected number of generic"}]}