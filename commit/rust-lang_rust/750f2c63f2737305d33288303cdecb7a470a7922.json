{"sha": "750f2c63f2737305d33288303cdecb7a470a7922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MGYyYzYzZjI3MzczMDVkMzMyODgzMDNjZGVjYjdhNDcwYTc5MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-10T05:32:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-10T05:32:20Z"}, "message": "Auto merge of #25262 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25200, #25242, #25248, #25249, #25251, #25252, #25261\n- Failed merges: #25255", "tree": {"sha": "c4b7b0a038d5c0d9e83ac7ba40ad9332b5273b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b7b0a038d5c0d9e83ac7ba40ad9332b5273b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750f2c63f2737305d33288303cdecb7a470a7922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750f2c63f2737305d33288303cdecb7a470a7922", "html_url": "https://github.com/rust-lang/rust/commit/750f2c63f2737305d33288303cdecb7a470a7922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750f2c63f2737305d33288303cdecb7a470a7922/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "html_url": "https://github.com/rust-lang/rust/commit/dc630d01e3eae8ba05db98383119bc2ddbbb01c1"}, {"sha": "2274bf126ae5aa9c3d010b5117118d61bda64972", "url": "https://api.github.com/repos/rust-lang/rust/commits/2274bf126ae5aa9c3d010b5117118d61bda64972", "html_url": "https://github.com/rust-lang/rust/commit/2274bf126ae5aa9c3d010b5117118d61bda64972"}], "stats": {"total": 358, "additions": 77, "deletions": 281}, "files": [{"sha": "16fdcfa301392532ddf1444044adf1f8f7417bb8", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -2028,7 +2028,7 @@ makes it possible to declare these operations. For example, the `str` module\n in the Rust standard library defines the string equality function:\n \n ```{.ignore}\n-#[lang=\"str_eq\"]\n+#[lang = \"str_eq\"]\n pub fn eq_slice(a: &str, b: &str) -> bool {\n     // details elided\n }"}, {"sha": "95b39a660636ad39b55d7d40d0b57c2b15d7103e", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -214,7 +214,7 @@ we can use the `unwrap()` method:\n io::stdin().read_line(&mut buffer).unwrap();\n ```\n \n-`unwrap()` will `panic!` if the `Option` is `None`. This basically says \"Give\n+`unwrap()` will `panic!` if the `Result` is `Err`. This basically says \"Give\n me the value, and if something goes wrong, just crash.\" This is less reliable\n than matching the error and attempting to recover, but is also significantly\n shorter. Sometimes, just crashing is appropriate."}, {"sha": "50767b603c46c3d0ff6b1af8b2e11e481604ef06", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -131,7 +131,9 @@ prints a [string][strings] to the screen.\n     let mut guess = String::new();\n ```\n \n-Now we\u2019re getting interesting! There\u2019s a lot going on in this little line. The first thing to notice is that this is a [let statement][let], which is used to create \u2018variable bindings\u2019. They take this form:\n+Now we\u2019re getting interesting! There\u2019s a lot going on in this little line.\n+The first thing to notice is that this is a [let statement][let], which is\n+used to create \u2018variable bindings\u2019. They take this form:\n \n ```rust,ignore\n let foo = bar;\n@@ -171,7 +173,7 @@ bound to: `String::new()`.\n \n [string]: ../std/string/struct.String.html\n \n-The `::new()` syntax is uses `::` because this is an \u2018associated function\u2019 of\n+The `::new()` syntax uses `::` because this is an \u2018associated function\u2019 of\n a particular type. That is to say, it\u2019s associated with `String` itself,\n rather than a particular instance of a `String`. Some languages call this a\n \u2018static method\u2019."}, {"sha": "4808ad6ff1febb22e55291320747f7a6c10f1b15", "filename": "src/doc/trpl/lang-items.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Ftrpl%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fdoc%2Ftrpl%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flang-items.md?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -7,7 +7,7 @@\n The `rustc` compiler has certain pluggable operations, that is,\n functionality that isn't hard-coded into the language, but is\n implemented in libraries, with a special marker to tell the compiler\n-it exists. The marker is the attribute `#[lang=\"...\"]` and there are\n+it exists. The marker is the attribute `#[lang = \"...\"]` and there are\n various different values of `...`, i.e. various different 'lang\n items'.\n \n@@ -28,7 +28,7 @@ extern {\n #[lang = \"owned_box\"]\n pub struct Box<T>(*mut T);\n \n-#[lang=\"exchange_malloc\"]\n+#[lang = \"exchange_malloc\"]\n unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n     let p = libc::malloc(size as libc::size_t) as *mut u8;\n \n@@ -39,7 +39,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n \n     p\n }\n-#[lang=\"exchange_free\"]\n+#[lang = \"exchange_free\"]\n unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n     libc::free(ptr as *mut libc::c_void)\n }"}, {"sha": "83795a24c816066f17ed1997c7ca77e6aad03706", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -95,7 +95,7 @@ pub const EMPTY: *mut () = 0x1 as *mut ();\n \n /// The allocator for unique pointers.\n #[cfg(not(test))]\n-#[lang=\"exchange_malloc\"]\n+#[lang = \"exchange_malloc\"]\n #[inline]\n unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n     if size == 0 {\n@@ -108,7 +108,7 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n }\n \n #[cfg(not(test))]\n-#[lang=\"exchange_free\"]\n+#[lang = \"exchange_free\"]\n #[inline]\n unsafe fn exchange_free(ptr: *mut u8, old_size: usize, align: usize) {\n     deallocate(ptr, old_size, align);"}, {"sha": "bf5fdb973eb768a84672f87f7b18bda1dfcca26e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -634,7 +634,7 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n ///\n /// **NOTE:** `UnsafeCell<T>`'s fields are public to allow static initializers. It is not\n /// recommended to access its fields directly, `get` should be used instead.\n-#[lang=\"unsafe_cell\"]\n+#[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct UnsafeCell<T: ?Sized> {\n     /// Wrapped value"}, {"sha": "dab549f784cf82bf68a175fa0d67b7423729b8c8", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -41,7 +41,7 @@ use option::Option::{self, Some, None};\n /// PartialEq only requires the `eq` method to be implemented; `ne` is defined in terms of it by\n /// default. Any manual implementation of `ne` *must* respect the rule that `eq` is a strict\n /// inverse of `ne`; that is, `!(a == b)` if and only if `a != b`.\n-#[lang=\"eq\"]\n+#[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used by `==`.\n@@ -222,7 +222,7 @@ impl PartialOrd for Ordering {\n /// However it remains possible to implement the others separately for types which do not have a\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n-#[lang=\"ord\"]\n+#[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists."}, {"sha": "e4d2ab198630a4fd5ed8875e82333d72739d0fe0", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -82,7 +82,7 @@ fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n /// is returned. A concrete Iterator implementation may choose to behave however\n /// it wishes, either by returning `None` infinitely, or by doing something\n /// else.\n-#[lang=\"iterator\"]\n+#[lang = \"iterator\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n                             `.iter()` or a similar method\"]"}, {"sha": "3aaedaeb813e38a1186848dddb09932ddfa59564", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -33,7 +33,7 @@ use hash::Hasher;\n \n /// Types able to be transferred across thread boundaries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"send\"]\n+#[lang = \"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n pub unsafe trait Send {\n     // empty.\n@@ -46,7 +46,7 @@ impl<T> !Send for *mut T { }\n \n /// Types with a constant size known at compile-time.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"sized\"]\n+#[lang = \"sized\"]\n #[rustc_on_unimplemented = \"`{Self}` does not have a constant size known at compile-time\"]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n pub trait Sized {\n@@ -154,7 +154,7 @@ pub trait Sized {\n /// then it might be prudent to not implement `Copy`. This is because removing `Copy` is a breaking\n /// change: that second example would fail to compile if we made `Foo` non-`Copy`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"copy\"]\n+#[lang = \"copy\"]\n pub trait Copy : Clone {\n     // Empty.\n }\n@@ -201,7 +201,7 @@ pub trait Copy : Clone {\n /// reference; not doing this is undefined behaviour (for example,\n /// `transmute`-ing from `&T` to `&mut T` is illegal).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang=\"sync\"]\n+#[lang = \"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n pub unsafe trait Sync {\n     // Empty\n@@ -217,7 +217,7 @@ impl<T> !Sync for *mut T { }\n /// ensure that they are never copied, even if they lack a destructor.\n #[unstable(feature = \"core\",\n            reason = \"likely to change with new variance strategy\")]\n-#[lang=\"no_copy_bound\"]\n+#[lang = \"no_copy_bound\"]\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct NoCopy;\n \n@@ -359,7 +359,7 @@ macro_rules! impls{\n /// better to use a reference type, like `PhantomData<&'a T>`\n /// (ideally) or `PhantomData<*const T>` (if no lifetime applies), so\n /// as not to indicate ownership.\n-#[lang=\"phantom_data\"]\n+#[lang = \"phantom_data\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;\n "}, {"sha": "13b6468105dcf9d88a0c8c3db50bd33cdc6b1221", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -31,7 +31,7 @@ unsafe impl Zeroable for u64 {}\n \n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n-#[lang=\"non_zero\"]\n+#[lang = \"non_zero\"]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n #[unstable(feature = \"core\")]\n pub struct NonZero<T: Zeroable>(T);"}, {"sha": "55c4264b10c7063cd343c9bed2b37daf73cf2abb", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -91,7 +91,7 @@ use fmt;\n ///     let _x = HasDrop;\n /// }\n /// ```\n-#[lang=\"drop\"]\n+#[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {\n     /// The `drop` method, called when the value goes out of scope.\n@@ -181,7 +181,7 @@ macro_rules! forward_ref_binop {\n ///     Foo + Foo;\n /// }\n /// ```\n-#[lang=\"add\"]\n+#[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator\n@@ -235,7 +235,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo - Foo;\n /// }\n /// ```\n-#[lang=\"sub\"]\n+#[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator\n@@ -289,7 +289,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo * Foo;\n /// }\n /// ```\n-#[lang=\"mul\"]\n+#[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator\n@@ -343,7 +343,7 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo / Foo;\n /// }\n /// ```\n-#[lang=\"div\"]\n+#[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator\n@@ -397,7 +397,7 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo % Foo;\n /// }\n /// ```\n-#[lang=\"rem\"]\n+#[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator\n@@ -470,7 +470,7 @@ rem_float_impl! { f64, fmod }\n ///     -Foo;\n /// }\n /// ```\n-#[lang=\"neg\"]\n+#[lang = \"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Neg {\n     /// The resulting type after applying the `-` operator\n@@ -541,7 +541,7 @@ neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n ///     !Foo;\n /// }\n /// ```\n-#[lang=\"not\"]\n+#[lang = \"not\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Not {\n     /// The resulting type after applying the `!` operator\n@@ -595,7 +595,7 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     Foo & Foo;\n /// }\n /// ```\n-#[lang=\"bitand\"]\n+#[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitAnd<RHS=Self> {\n     /// The resulting type after applying the `&` operator\n@@ -649,7 +649,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     Foo | Foo;\n /// }\n /// ```\n-#[lang=\"bitor\"]\n+#[lang = \"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitOr<RHS=Self> {\n     /// The resulting type after applying the `|` operator\n@@ -703,7 +703,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     Foo ^ Foo;\n /// }\n /// ```\n-#[lang=\"bitxor\"]\n+#[lang = \"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitXor<RHS=Self> {\n     /// The resulting type after applying the `^` operator\n@@ -757,7 +757,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     Foo << Foo;\n /// }\n /// ```\n-#[lang=\"shl\"]\n+#[lang = \"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Shl<RHS> {\n     /// The resulting type after applying the `<<` operator\n@@ -829,7 +829,7 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     Foo >> Foo;\n /// }\n /// ```\n-#[lang=\"shr\"]\n+#[lang = \"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Shr<RHS> {\n     /// The resulting type after applying the `>>` operator\n@@ -902,7 +902,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     Foo[Bar];\n /// }\n /// ```\n-#[lang=\"index\"]\n+#[lang = \"index\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Index<Idx: ?Sized> {\n@@ -949,7 +949,7 @@ pub trait Index<Idx: ?Sized> {\n ///     &mut Foo[Bar];\n /// }\n /// ```\n-#[lang=\"index_mut\"]\n+#[lang = \"index_mut\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n@@ -960,7 +960,7 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n \n /// An unbounded range.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[lang=\"range_full\"]\n+#[lang = \"range_full\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n@@ -973,7 +973,7 @@ impl fmt::Debug for RangeFull {\n \n /// A (half-open) range which is bounded at both ends.\n #[derive(Clone, PartialEq, Eq)]\n-#[lang=\"range\"]\n+#[lang = \"range\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -993,7 +993,7 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n \n /// A range which is only bounded below.\n #[derive(Clone, PartialEq, Eq)]\n-#[lang=\"range_from\"]\n+#[lang = \"range_from\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1010,7 +1010,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n \n /// A range which is only bounded above.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[lang=\"range_to\"]\n+#[lang = \"range_to\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive).\n@@ -1053,7 +1053,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n ///     assert_eq!('a', *x);\n /// }\n /// ```\n-#[lang=\"deref\"]\n+#[lang = \"deref\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Deref {\n     /// The resulting type after dereferencing\n@@ -1114,7 +1114,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n ///     assert_eq!('b', *x);\n /// }\n /// ```\n-#[lang=\"deref_mut\"]\n+#[lang = \"deref_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait DerefMut: Deref {\n     /// The method called to mutably dereference a value\n@@ -1128,7 +1128,7 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n }\n \n /// A version of the call operator that takes an immutable receiver.\n-#[lang=\"fn\"]\n+#[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n@@ -1138,7 +1138,7 @@ pub trait Fn<Args> : FnMut<Args> {\n }\n \n /// A version of the call operator that takes a mutable receiver.\n-#[lang=\"fn_mut\"]\n+#[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n@@ -1148,7 +1148,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n }\n \n /// A version of the call operator that takes a by-value receiver.\n-#[lang=\"fn_once\"]\n+#[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n #[fundamental] // so that regex can rely that `&str: !FnMut`"}, {"sha": "635150c088688f3c98b5a17aea9c1f6694787e92", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -33,7 +33,7 @@\n use fmt;\n \n #[cold] #[inline(never)] // this is the slow path, always\n-#[lang=\"panic\"]\n+#[lang = \"panic\"]\n pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n@@ -46,7 +46,7 @@ pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n }\n \n #[cold] #[inline(never)]\n-#[lang=\"panic_bounds_check\"]\n+#[lang = \"panic_bounds_check\"]\n fn panic_bounds_check(file_line: &(&'static str, u32),\n                      index: usize, len: usize) -> ! {\n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\","}, {"sha": "4d39607b16e92a140e3000b942f2a9c18c45f74a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -1185,7 +1185,7 @@ fn eq_slice_(a: &str, b: &str) -> bool {\n /// Bytewise slice equality\n /// NOTE: This function is (ab)used in rustc::middle::trans::_match\n /// to compare &[u8] byte slices that are not necessarily valid UTF-8.\n-#[lang=\"str_eq\"]\n+#[lang = \"str_eq\"]\n #[inline]\n fn eq_slice(a: &str, b: &str) -> bool {\n     eq_slice_(a, b)"}, {"sha": "aaf615ee404095c07d84aae94d46fecd6299b65a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -271,6 +271,12 @@ fn main() {\n See also http://doc.rust-lang.org/book/unsafe.html\n \"##,\n \n+E0137: r##\"\n+This error indicates that the compiler found multiple functions with the\n+#[main] attribute. This is an error because there must be a unique entry point\n+into a Rust program.\n+\"##,\n+\n E0152: r##\"\n Lang items are already implemented in the standard library. Unless you are\n writing a free-standing application (e.g. a kernel), you do not need to provide\n@@ -800,7 +806,6 @@ register_diagnostics! {\n     E0134,\n     E0135,\n     E0136,\n-    E0137,\n     E0138,\n     E0139,\n     E0261, // use of undeclared lifetime name"}, {"sha": "500255db330c5c62df937621f324f8e1b7a9e3c0", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -273,7 +273,6 @@ impl<T> VecPerParamSpace<T> {\n \n     /// `t` is the type space.\n     /// `s` is the self space.\n-    /// `a` is the assoc space.\n     /// `f` is the fn space.\n     pub fn new(t: Vec<T>, s: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> {\n         let type_limit = t.len();"}, {"sha": "0073c0b061039806ff2503071d7eb167b18b8108", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -872,11 +872,8 @@ pub fn collect_crate_types(session: &Session,\n                     None\n                 }\n                 _ => {\n-                    session.add_lint(lint::builtin::UNKNOWN_CRATE_TYPES,\n-                                     ast::CRATE_NODE_ID,\n-                                     a.span,\n-                                     \"`crate_type` requires a \\\n-                                      value\".to_string());\n+                    session.span_err(a.span, \"`crate_type` requires a value\");\n+                    session.note(\"for example: `#![crate_type=\\\"lib\\\"]`\");\n                     None\n                 }\n             }"}, {"sha": "0e6386618f17bfbea39bd8d320fe44db0fecc9a9", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -34,6 +34,18 @@ let x_is_nonzero = x as bool;\n ```\n \"##,\n \n+E0062: r##\"\n+This error indicates that during an attempt to build a struct or struct-like\n+enum variant, one of the fields was specified more than once. Each field should\n+be specified exactly one time.\n+\"##,\n+\n+E0063: r##\"\n+This error indicates that during an attempt to build a struct or struct-like\n+enum variant, one of the fields was not provided. Each field should be specified\n+exactly once.\n+\"##,\n+\n E0081: r##\"\n Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n@@ -136,8 +148,6 @@ register_diagnostics! {\n     E0059,\n     E0060,\n     E0061,\n-    E0062,\n-    E0063,\n     E0066,\n     E0067,\n     E0068,"}, {"sha": "b24099505ed896a7207760b3c4139bf7e23f141c", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -238,7 +238,7 @@ pub mod eabi {\n             -> uw::_Unwind_Reason_Code;\n     }\n \n-    #[lang=\"eh_personality\"]\n+    #[lang = \"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n     #[allow(private_no_mangle_fns)]\n     extern fn rust_eh_personality(\n@@ -292,7 +292,7 @@ pub mod eabi {\n             -> uw::_Unwind_Reason_Code;\n     }\n \n-    #[lang=\"eh_personality\"]\n+    #[lang = \"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n     pub extern \"C\" fn rust_eh_personality(\n         version: c_int,\n@@ -345,7 +345,7 @@ pub mod eabi {\n             -> uw::_Unwind_Reason_Code;\n     }\n \n-    #[lang=\"eh_personality\"]\n+    #[lang = \"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n     #[allow(private_no_mangle_fns)]\n     extern \"C\" fn rust_eh_personality(\n@@ -432,7 +432,7 @@ pub mod eabi {\n         ) -> EXCEPTION_DISPOSITION;\n     }\n \n-    #[lang=\"eh_personality\"]\n+    #[lang = \"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n     #[allow(private_no_mangle_fns)]\n     extern \"C\" fn rust_eh_personality("}, {"sha": "6a11465b27ca077b67f55619e4f981847040dfcf", "filename": "src/test/auxiliary/crateresolve3-2.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"crateresolve3#0.2\"]\n-\n-#![crate_type = \"lib\"]\n-\n-pub fn g() -> isize { 20 }"}, {"sha": "eaec37ed417d06afe8bcfee37d338d28a170515e", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"crateresolve5#0.1\"]\n-\n-#![crate_type = \"lib\"]\n-\n-pub struct NameVal { pub name: String, pub val: isize }\n-\n-pub fn struct_nameval() -> NameVal {\n-    NameVal { name: \"crateresolve5\".to_string(), val: 10 }\n-}\n-\n-pub enum e {\n-    e_val\n-}\n-\n-pub fn nominal() -> e { e_val }\n-\n-pub fn nominal_eq(_e1: e, _e2: e) -> bool { true }\n-\n-impl PartialEq for e {\n-    fn eq(&self, other: &e) -> bool { nominal_eq(*self, *other) }\n-    fn ne(&self, other: &e) -> bool { !nominal_eq(*self, *other) }\n-}\n-\n-pub fn f() -> isize { 10 }"}, {"sha": "14d28c709cdb56f8a08ed738b2aaf9485285ef74", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"crateresolve5#0.2\"]\n-\n-#![crate_type = \"lib\"]\n-\n-pub struct NameVal { pub name: String, pub val: isize }\n-pub fn struct_nameval() -> NameVal {\n-    NameVal { name: \"crateresolve5\".to_string(), val: 10 }\n-}\n-\n-pub enum e {\n-    e_val\n-}\n-\n-impl PartialEq for e {\n-    fn eq(&self, other: &e) -> bool { !nominal_neq(*self, *other) }\n-    fn ne(&self, other: &e) -> bool { nominal_neq(*self, *other) }\n-}\n-\n-pub fn nominal() -> e { e_val }\n-\n-pub fn nominal_neq(_e1: e, _e2: e) -> bool { false }\n-\n-pub fn f() -> isize { 20 }"}, {"sha": "c05d292eaea47a395c115d08b5b1e6290da89061", "filename": "src/test/auxiliary/crateresolve7x.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve_calories-1.rs\n-// aux-build:crateresolve_calories-2.rs\n-\n-// These both have the same version but differ in other metadata\n-pub mod a {\n-    extern crate cr_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");\n-    pub fn f() -> isize { cr_1::f() }\n-}\n-\n-pub mod b {\n-    extern crate cr_2 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"200\");\n-    pub fn f() -> isize { cr_2::f() }\n-}"}, {"sha": "bc2a2d83bfec120db02d76c7d53bff421bdab85d", "filename": "src/test/auxiliary/crateresolve8-1.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve8-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve8-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve8-1.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// default link meta for 'package_id' will be equal to filestem\n-#![crate_name=\"crateresolve8#0.1\"]\n-\n-#![crate_type = \"lib\"]\n-\n-pub fn f() -> isize { 20 }"}, {"sha": "c1705d687abb00bf6fbdad445cc6151b77b0c23c", "filename": "src/test/auxiliary/crateresolve_calories-1.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"crateresolve_calories#0.1\"]\n-#![crate_type = \"lib\"]\n-\n-pub fn f() -> isize { 100 }"}, {"sha": "2ae87daab4e29b63f4498b9c0ac40678a752564e", "filename": "src/test/auxiliary/crateresolve_calories-2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"crateresolve_calories#0.1\"]\n-#![crate_type = \"lib\"]\n-\n-pub fn f() -> isize { 200 }"}, {"sha": "6f5ddfd37a5c221e6585c1b13562e9374177bd8a", "filename": "src/test/auxiliary/inherit_struct_lib.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Finherit_struct_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Finherit_struct_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherit_struct_lib.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test struct inheritance on structs from another crate.\n-#![feature(struct_inherit)]\n-\n-pub virtual struct S1 {\n-    pub f1: isize,\n-}\n-\n-pub struct S2 : S1 {\n-    pub f2: isize,\n-}\n-\n-pub fn test_s2(s2: S2) {\n-    assert!(s2.f1 == 115);\n-    assert!(s2.f2 == 113);\n-}\n-\n-pub static glob_s: S2 = S2 { f1: 32, f2: -45 };"}, {"sha": "33b6d116c8a2d54926472a615d491e0581d289ec", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"a#0.1\"]\n-#![crate_type = \"lib\"]\n-\n-trait to_strz {\n-    fn to_strz() -> String;\n-}\n-\n-impl to_strz for String {\n-    fn to_strz() -> String { self.clone() }\n-}"}, {"sha": "31d119b20beaabf8d29dc7d05e524ad963cba00d", "filename": "src/test/auxiliary/issue_2242_c.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc630d01e3eae8ba05db98383119bc2ddbbb01c1/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs?ref=dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"c#0.1\"]\n-#![crate_type = \"lib\"]\n-\n-extern crate a;\n-\n-use a::to_strz;\n-\n-impl to_strz for bool {\n-    fn to_strz() -> String { fmt!(\"%b\", self) }\n-}"}, {"sha": "6d42515704ea117a95e42655de397df4602bcf7c", "filename": "src/test/compile-fail/invalid_crate_type_syntax.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/750f2c63f2737305d33288303cdecb7a470a7922/src%2Ftest%2Fcompile-fail%2Finvalid_crate_type_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f2c63f2737305d33288303cdecb7a470a7922/src%2Ftest%2Fcompile-fail%2Finvalid_crate_type_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid_crate_type_syntax.rs?ref=750f2c63f2737305d33288303cdecb7a470a7922", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name=\"crateresolve3#0.1\"]\n+// regression test for issue 16974\n+#![crate_type(lib)]  //~ ERROR `crate_type` requires a value\n \n-#![crate_type = \"lib\"]\n-\n-pub fn f() -> isize { 10 }\n+fn my_lib_fn() {}", "previous_filename": "src/test/auxiliary/crateresolve3-1.rs"}]}