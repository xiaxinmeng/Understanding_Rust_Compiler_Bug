{"sha": "885399992c4c1dde37b506b8507a7d69415646b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NTM5OTk5MmM0YzFkZGUzN2I1MDZiODUwN2E3ZDY5NDE1NjQ2Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T19:31:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T19:31:24Z"}, "message": "Auto merge of #86636 - wesleywiser:misc_enum_improvements, r=michaelwoerister\n\n[msvc] Consistently show active variant and fix visualization for single variant enums\n\nPrior to this change, there were a few cases where inspecting an enum in either WinDbg or Visual Studio would not show the active variant name. After these changes, we now consistently show the active variant name as `[variant]` in the debugger.\n\nWe also didn't handle single variant enums very well. That is now also resolved.\n\nBefore:\n![image](https://user-images.githubusercontent.com/831192/123480097-dc8b5f00-d5cf-11eb-93a8-9fc05a97029b.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/831192/123479966-aa79fd00-d5cf-11eb-955e-9798616a8829.png)\n\nr? `@michaelwoerister`", "tree": {"sha": "5deed964fe74eee58a066e286008dbdb1bed8743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5deed964fe74eee58a066e286008dbdb1bed8743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/885399992c4c1dde37b506b8507a7d69415646b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/885399992c4c1dde37b506b8507a7d69415646b9", "html_url": "https://github.com/rust-lang/rust/commit/885399992c4c1dde37b506b8507a7d69415646b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/885399992c4c1dde37b506b8507a7d69415646b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "238fd72880776c5dbd3b067acb096562e6af5399", "url": "https://api.github.com/repos/rust-lang/rust/commits/238fd72880776c5dbd3b067acb096562e6af5399", "html_url": "https://github.com/rust-lang/rust/commit/238fd72880776c5dbd3b067acb096562e6af5399"}, {"sha": "457165e1ed283a1c86db55ab926bc2166c4a8ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/457165e1ed283a1c86db55ab926bc2166c4a8ee9", "html_url": "https://github.com/rust-lang/rust/commit/457165e1ed283a1c86db55ab926bc2166c4a8ee9"}], "stats": {"total": 233, "additions": 112, "deletions": 121}, "files": [{"sha": "7e136c1b24cb26e8a26dcdf53c2339f3f35a70b4", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 35, "deletions": 90, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -1,4 +1,3 @@\n-use self::EnumTagInfo::*;\n use self::MemberDescriptionFactory::*;\n use self::RecursiveTypeDescription::*;\n \n@@ -28,7 +27,7 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n-use rustc_middle::mir::{self, Field, GeneratorLayout};\n+use rustc_middle::mir::{self, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::Instance;\n@@ -1188,7 +1187,7 @@ enum MemberDescriptionFactory<'ll, 'tcx> {\n     TupleMDF(TupleMemberDescriptionFactory<'tcx>),\n     EnumMDF(EnumMemberDescriptionFactory<'ll, 'tcx>),\n     UnionMDF(UnionMemberDescriptionFactory<'tcx>),\n-    VariantMDF(VariantMemberDescriptionFactory<'ll, 'tcx>),\n+    VariantMDF(VariantMemberDescriptionFactory<'tcx>),\n }\n \n impl MemberDescriptionFactory<'ll, 'tcx> {\n@@ -1505,14 +1504,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 }\n \n                 let variant_info = variant_info_for(index);\n-                let (variant_type_metadata, member_description_factory) = describe_enum_variant(\n-                    cx,\n-                    self.layout,\n-                    variant_info,\n-                    None,\n-                    self_metadata,\n-                    self.span,\n-                );\n+                let (variant_type_metadata, member_description_factory) =\n+                    describe_enum_variant(cx, self.layout, variant_info, self_metadata, self.span);\n \n                 let member_descriptions = member_description_factory.create_member_descriptions(cx);\n \n@@ -1524,7 +1517,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     Some(&self.common_members),\n                 );\n                 vec![MemberDescription {\n-                    name: if fallback { String::new() } else { variant_info.variant_name() },\n+                    name: variant_info.variant_name(),\n                     type_metadata: variant_type_metadata,\n                     offset: Size::ZERO,\n                     size: self.layout.size,\n@@ -1540,28 +1533,38 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 ref variants,\n                 ..\n             } => {\n-                let tag_info = if fallback {\n-                    // For MSVC, we generate a union of structs for each variant with an explicit\n-                    // discriminant field roughly equivalent to the following C:\n+                let fallback_discr_variant = if fallback {\n+                    // For MSVC, we generate a union of structs for each variant and an\n+                    // explicit discriminant field roughly equivalent to the following C:\n                     // ```c\n                     // union enum$<{name}> {\n                     //   struct {variant 0 name} {\n-                    //     tag$ variant$;\n                     //     <variant 0 fields>\n                     //   } variant0;\n                     //   <other variant structs>\n+                    //   {name} discriminant;\n                     // }\n                     // ```\n-                    // The natvis in `intrinsic.nativs` then matches on `this.variant0.variant$` to\n+                    // The natvis in `intrinsic.natvis` then matches on `this.discriminant` to\n                     // determine which variant is active and then displays it.\n-                    Some(DirectTag {\n-                        tag_field: Field::from(tag_field),\n-                        tag_type_metadata: self.tag_type_metadata.unwrap(),\n+                    let enum_layout = self.layout;\n+                    let offset = enum_layout.fields.offset(tag_field);\n+                    let discr_ty = enum_layout.field(cx, tag_field).ty;\n+                    let (size, align) = cx.size_and_align_of(discr_ty);\n+                    Some(MemberDescription {\n+                        name: \"discriminant\".into(),\n+                        type_metadata: self.tag_type_metadata.unwrap(),\n+                        offset,\n+                        size,\n+                        align,\n+                        flags: DIFlags::FlagZero,\n+                        discriminant: None,\n+                        source_info: None,\n                     })\n                 } else {\n-                    // This doesn't matter in this case.\n                     None\n                 };\n+\n                 variants\n                     .iter_enumerated()\n                     .map(|(i, _)| {\n@@ -1571,7 +1574,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             cx,\n                             variant,\n                             variant_info,\n-                            tag_info,\n                             self_metadata,\n                             self.span,\n                         );\n@@ -1605,6 +1607,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             source_info: variant_info.source_info(cx),\n                         }\n                     })\n+                    .chain(fallback_discr_variant.into_iter())\n                     .collect()\n             }\n             Variants::Multiple {\n@@ -1702,7 +1705,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         cx,\n                         dataful_variant_layout,\n                         variant_info,\n-                        Some(NicheTag),\n                         self_metadata,\n                         self.span,\n                     );\n@@ -1754,7 +1756,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                     cx,\n                                     variant,\n                                     variant_info,\n-                                    Some(NicheTag),\n                                     self_metadata,\n                                     self.span,\n                                 );\n@@ -1791,39 +1792,27 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n }\n \n // Creates `MemberDescription`s for the fields of a single enum variant.\n-struct VariantMemberDescriptionFactory<'ll, 'tcx> {\n+struct VariantMemberDescriptionFactory<'tcx> {\n     /// Cloned from the `layout::Struct` describing the variant.\n     offsets: Vec<Size>,\n     args: Vec<(String, Ty<'tcx>)>,\n-    tag_type_metadata: Option<&'ll DIType>,\n     span: Span,\n }\n \n-impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n+impl VariantMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions(&self, cx: &CodegenCx<'ll, 'tcx>) -> Vec<MemberDescription<'ll>> {\n         self.args\n             .iter()\n             .enumerate()\n             .map(|(i, &(ref name, ty))| {\n-                // Discriminant is always the first field of our variant\n-                // when using the enum fallback.\n-                let is_artificial_discr = use_enum_fallback(cx) && i == 0;\n                 let (size, align) = cx.size_and_align_of(ty);\n                 MemberDescription {\n                     name: name.to_string(),\n-                    type_metadata: if is_artificial_discr {\n-                        self.tag_type_metadata.unwrap_or_else(|| type_metadata(cx, ty, self.span))\n-                    } else {\n-                        type_metadata(cx, ty, self.span)\n-                    },\n+                    type_metadata: type_metadata(cx, ty, self.span),\n                     offset: self.offsets[i],\n                     size,\n                     align,\n-                    flags: if is_artificial_discr {\n-                        DIFlags::FlagArtificial\n-                    } else {\n-                        DIFlags::FlagZero\n-                    },\n+                    flags: DIFlags::FlagZero,\n                     discriminant: None,\n                     source_info: None,\n                 }\n@@ -1832,12 +1821,6 @@ impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-enum EnumTagInfo<'ll> {\n-    DirectTag { tag_field: Field, tag_type_metadata: &'ll DIType },\n-    NicheTag,\n-}\n-\n #[derive(Copy, Clone)]\n enum VariantInfo<'a, 'tcx> {\n     Adt(&'tcx ty::VariantDef),\n@@ -1916,7 +1899,6 @@ fn describe_enum_variant(\n     cx: &CodegenCx<'ll, 'tcx>,\n     layout: layout::TyAndLayout<'tcx>,\n     variant: VariantInfo<'_, 'tcx>,\n-    discriminant_info: Option<EnumTagInfo<'ll>>,\n     containing_scope: &'ll DIScope,\n     span: Span,\n ) -> (&'ll DICompositeType, MemberDescriptionFactory<'ll, 'tcx>) {\n@@ -1935,50 +1917,13 @@ fn describe_enum_variant(\n         )\n     });\n \n-    // Build an array of (field name, field type) pairs to be captured in the factory closure.\n-    let (offsets, args) = if use_enum_fallback(cx) {\n-        // If this is not a univariant enum, there is also the discriminant field.\n-        let (discr_offset, discr_arg) = match discriminant_info {\n-            Some(DirectTag { tag_field, .. }) => {\n-                // We have the layout of an enum variant, we need the layout of the outer enum\n-                let enum_layout = cx.layout_of(layout.ty);\n-                let offset = enum_layout.fields.offset(tag_field.as_usize());\n-                let args = (\"variant$\".to_owned(), enum_layout.field(cx, tag_field.as_usize()).ty);\n-                (Some(offset), Some(args))\n-            }\n-            _ => (None, None),\n-        };\n-        (\n-            discr_offset\n-                .into_iter()\n-                .chain((0..layout.fields.count()).map(|i| layout.fields.offset(i)))\n-                .collect(),\n-            discr_arg\n-                .into_iter()\n-                .chain(\n-                    (0..layout.fields.count())\n-                        .map(|i| (variant.field_name(i), layout.field(cx, i).ty)),\n-                )\n-                .collect(),\n-        )\n-    } else {\n-        (\n-            (0..layout.fields.count()).map(|i| layout.fields.offset(i)).collect(),\n-            (0..layout.fields.count())\n-                .map(|i| (variant.field_name(i), layout.field(cx, i).ty))\n-                .collect(),\n-        )\n-    };\n+    let offsets = (0..layout.fields.count()).map(|i| layout.fields.offset(i)).collect();\n+    let args = (0..layout.fields.count())\n+        .map(|i| (variant.field_name(i), layout.field(cx, i).ty))\n+        .collect();\n \n-    let member_description_factory = VariantMDF(VariantMemberDescriptionFactory {\n-        offsets,\n-        args,\n-        tag_type_metadata: match discriminant_info {\n-            Some(DirectTag { tag_type_metadata, .. }) => Some(tag_type_metadata),\n-            _ => None,\n-        },\n-        span,\n-    });\n+    let member_description_factory =\n+        VariantMDF(VariantMemberDescriptionFactory { offsets, args, span });\n \n     (metadata_stub, member_description_factory)\n }"}, {"sha": "b3c14d9072ccec77a517d02b581039bfe187bf71", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -367,6 +367,10 @@ pub fn push_debuginfo_type_name<'tcx>(\n     ) {\n         let layout = tcx.layout_of(tcx.param_env(def.did).and(ty)).expect(\"layout error\");\n \n+        output.push_str(\"enum$<\");\n+        push_item_name(tcx, def.did, true, output);\n+        push_generic_params_internal(tcx, substs, output, visited);\n+\n         if let Variants::Multiple {\n             tag_encoding: TagEncoding::Niche { dataful_variant, .. },\n             tag,\n@@ -386,19 +390,19 @@ pub fn push_debuginfo_type_name<'tcx>(\n             let max = dataful_discriminant_range.end();\n             let max = tag.value.size(&tcx).truncate(*max);\n \n-            output.push_str(\"enum$<\");\n-            push_item_name(tcx, def.did, true, output);\n-            push_generic_params_internal(tcx, substs, output, visited);\n-\n             let dataful_variant_name = def.variants[*dataful_variant].ident.as_str();\n \n-            output.push_str(&format!(\", {}, {}, {}>\", min, max, dataful_variant_name));\n-        } else {\n-            output.push_str(\"enum$<\");\n-            push_item_name(tcx, def.did, true, output);\n-            push_generic_params_internal(tcx, substs, output, visited);\n-            push_close_angle_bracket(tcx, output);\n+            output.push_str(&format!(\", {}, {}, {}\", min, max, dataful_variant_name));\n+        } else if let Variants::Single { index: variant_idx } = &layout.variants {\n+            // Uninhabited enums can't be constructed and should never need to be visualized so\n+            // skip this step for them.\n+            if def.variants.len() != 0 {\n+                let variant = def.variants[*variant_idx].ident.as_str();\n+\n+                output.push_str(&format!(\", {}\", variant));\n+            }\n         }\n+        push_close_angle_bracket(tcx, output);\n     }\n }\n "}, {"sha": "52e5d37c83fbdc5fa5b02147239cde29392c3a26", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -149,8 +149,10 @@\n       <Synthetic Name=\"[...]\"><DisplayString>...</DisplayString></Synthetic>\n     </Expand>\n   </Type>\n+\n+  <!-- Directly tagged enums. $T1 is the type name -->\n   <Type Name=\"enum$&lt;*&gt;\">\n-    <Intrinsic Name=\"tag\" Expression=\"variant0.variant$\" />\n+    <Intrinsic Name=\"tag\" Expression=\"discriminant\" />\n     <DisplayString Condition=\"tag() == 0\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 1\" Optional=\"true\">{tag(),en}</DisplayString>\n     <DisplayString Condition=\"tag() == 2\" Optional=\"true\">{tag(),en}</DisplayString>\n@@ -169,6 +171,9 @@\n     <DisplayString Condition=\"tag() == 15\" Optional=\"true\">{tag(),en}</DisplayString>\n \n     <Expand>\n+      <Synthetic Name=\"[variant]\">\n+        <DisplayString>{tag(),en}</DisplayString>\n+      </Synthetic>\n       <ExpandedItem Condition=\"tag() == 0\">variant0</ExpandedItem>\n       <ExpandedItem Condition=\"tag() == 1\" Optional=\"true\">variant1</ExpandedItem>\n       <ExpandedItem Condition=\"tag() == 2\" Optional=\"true\">variant2</ExpandedItem>\n@@ -188,8 +193,20 @@\n     </Expand>\n   </Type>\n \n-  <!-- $T1 is the name of the enum, $T2 is the low value of the dataful variant tag,\n-       $T3 is the high value of the dataful variant tag, $T4 is the name of the dataful variant -->\n+  <!-- Single variant enums. $T1 is the name of the enum, $T2 is the name of the variant -->\n+  <Type Name=\"enum$&lt;*, *&gt;\">\n+    <DisplayString>{\"$T2\",sb}</DisplayString>\n+    <Expand>\n+      <Synthetic Name=\"[variant]\">\n+        <DisplayString>{\"$T2\",sb}</DisplayString>\n+      </Synthetic>\n+      <ExpandedItem>$T2</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <!-- Niche-layout enums. $T1 is the name of the enum, $T2 is the low value of the dataful\n+       variant tag, $T3 is the high value of the dataful variant tag, $T4 is the name of\n+       the dataful variant -->\n   <Type Name=\"enum$&lt;*, *, *, *&gt;\">\n     <Intrinsic Name=\"tag\" Expression=\"discriminant\" />\n     <Intrinsic Name=\"is_dataful\" Expression=\"tag() &gt;= $T2 &amp;&amp; tag() &lt;= $T3\" />\n@@ -200,6 +217,9 @@\n       <Synthetic Condition=\"is_dataful()\" Name=\"[variant]\">\n         <DisplayString>{\"$T4\",sb}</DisplayString>\n       </Synthetic>\n+      <Synthetic Condition=\"!is_dataful()\" Name=\"[variant]\">\n+        <DisplayString>{discriminant,en}</DisplayString>\n+      </Synthetic>\n     </Expand>\n   </Type>\n </AutoVisualizer>"}, {"sha": "c8196d5c713b200547c43540330c1f09da520e48", "filename": "src/etc/natvis/libcore.natvis", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -14,14 +14,6 @@\n     </Expand>\n   </Type>\n \n-  <Type Name=\"core::option::Option&lt;*&gt;\" Priority=\"MediumLow\">\n-    <DisplayString Condition=\"*(void**)this == nullptr\">None</DisplayString>\n-    <DisplayString>Some({($T1 *)this})</DisplayString>\n-    <Expand>\n-      <Item Name=\"Some\" ExcludeView=\"simple\" Condition=\"*(void**)this != nullptr\">($T1 *)this</Item>\n-    </Expand>\n-  </Type>\n-\n   <Type Name=\"core::ptr::non_null::NonNull&lt;*&gt;\">\n     <DisplayString>{(void*) pointer}</DisplayString>\n     <Expand>"}, {"sha": "0c16b9ad3ab510fa70fa22c4886d28bb922debdd", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -43,11 +43,11 @@ async fn async_fn_test() {\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant$\", scope: [[S1]],\n-// CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"discriminant\", scope: [[GEN]],\n+// CHECK-NOT: flags: DIFlagArtificial\n \n fn main() {\n     let _dummy = async_fn_test();"}, {"sha": "68d138f8df2f062536d188b464315011299539b2", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -47,11 +47,11 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant$\", scope: [[S1]],\n-// CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"discriminant\", scope: [[GEN]],\n+// CHECK-NOT: flags: DIFlagArtificial\n \n fn main() {\n     let _dummy = generator_test();"}, {"sha": "f248fcd839122d4006df757e2c691932149bcbd1", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -1,10 +1,14 @@\n // only-cdb\n+// ignore-tidy-linelength\n // compile-flags:-g\n \n // cdb-command: g\n \n // Note: The natvis used to visualize niche-layout enums don't work correctly in cdb\n-//       so the best we can do is to make sure we are generating the right debuginfo\n+//       so the best we can do is to make sure we are generating the right debuginfo.\n+//       Therefore, we use the `!` [format specifier](https://docs.microsoft.com/en-us/visualstudio/debugger/format-specifiers-in-cpp?view=vs-2019#BKMK_Visual_Studio_2012_format_specifiers)\n+//       to disable the natvis for a given expression. We also provide the `-r2` flag\n+//       to expand the expression 2 levels.\n \n // cdb-command: dx -r2 a,!\n // cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n@@ -48,14 +52,30 @@\n // cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n // cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n \n+// cdb-command: dx -r2 h,!\n+// cdb-check:h,!              : Some [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [+0x000] variant0         [Type: enum$<core::option::Option<u32> >::None]\n+// cdb-check:    [+0x000] variant1         [Type: enum$<core::option::Option<u32> >::Some]\n+// cdb-check:        [+0x004] __0              : 0xc [Type: unsigned int]\n+// cdb-check:    [+0x000] discriminant     : Some (0x1) [Type: core::option::Option]\n+\n // cdb-command: dx h\n // cdb-check:h                : Some [Type: enum$<core::option::Option<u32> >]\n-// cdb-check:    [+0x000] variant$         : Some (0x1) [Type: core::option::Option]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [variant]        : Some\n // cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n \n+// cdb-command: dx -r2 i,!\n+// cdb-check:i,!              : None [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [+0x000] variant0         [Type: enum$<core::option::Option<u32> >::None]\n+// cdb-check:    [+0x000] variant1         [Type: enum$<core::option::Option<u32> >::Some]\n+// cdb-check:        [+0x004] __0              : 0x[...] [Type: unsigned int]\n+// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: core::option::Option]\n+\n // cdb-command: dx i\n // cdb-check:i                : None [Type: enum$<core::option::Option<u32> >]\n-// cdb-check:    [+0x000] variant$         : None (0x0) [Type: core::option::Option]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [variant]        : None\n \n // cdb-command: dx j\n // cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n@@ -66,6 +86,11 @@\n // cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n // cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Discriminant$]\n \n+// cdb-command: dx -r2 l,!\n+// cdb-check:l,!              : $T2 [Type: enum$<core::result::Result<u32, enum$<msvc_pretty_enums::Empty> >, Ok>]\n+// cdb-check:    [+0x000] Ok               [Type: enum$<core::result::Result<u32, enum$<msvc_pretty_enums::Empty> >, Ok>::Ok]\n+// cdb-check:        [+0x000] __0              : 0x2a [Type: unsigned int]\n+\n pub enum CStyleEnum {\n     Low = 2,\n     High = 16,\n@@ -77,6 +102,8 @@ pub enum NicheLayoutEnum {\n     Tag2,\n }\n \n+pub enum Empty { }\n+\n fn main() {\n     let a = Some(CStyleEnum::Low);\n     let b = Option::<CStyleEnum>::None;\n@@ -89,6 +116,7 @@ fn main() {\n     let i = Option::<u32>::None;\n     let j = CStyleEnum::High;\n     let k = Some(\"IAMA optional string!\".to_string());\n+    let l = Result::<u32, Empty>::Ok(42);\n \n     zzz(); // #break\n }"}, {"sha": "7ed76beb8c6d91b0717de2c37f8ba747a7e89ee2", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885399992c4c1dde37b506b8507a7d69415646b9/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=885399992c4c1dde37b506b8507a7d69415646b9", "patch": "@@ -116,12 +116,14 @@\n \n // cdb-command: dx some\n // cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n-// cdb-check:    [...] variant$         : Some (0x1) [Type: core::option::Option]\n-// cdb-check:    [...] __0              : 8 [Type: short]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<i16> >]\n+// cdb-check:    [variant]        : Some\n+// cdb-check:    [+0x002] __0              : 8 [Type: short]\n \n // cdb-command: dx none\n // cdb-check:none             : None [Type: enum$<core::option::Option<i64> >]\n-// cdb-check:    [...] variant$         : None (0x0) [Type: core::option::Option]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<i64> >]\n+// cdb-check:    [variant]        : None\n \n // cdb-command: dx some_string\n // NOTE: cdb fails to interpret debug info of Option enums on i686."}]}