{"sha": "c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YjZkNWIyM2NjOGIyZDQzZWNlOWYwNjI1MmM3ZTk4MjgwZmI4ZTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-07-13T18:35:00Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T17:57:18Z"}, "message": "Implement `repr(simd)` as an alias for `#[simd]`.", "tree": {"sha": "f7440965a23467b40bd55227c4093cc7b27dc2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7440965a23467b40bd55227c4093cc7b27dc2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "html_url": "https://github.com/rust-lang/rust/commit/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e822a18ae7d55cefc332c6598a607cef0554ec77", "url": "https://api.github.com/repos/rust-lang/rust/commits/e822a18ae7d55cefc332c6598a607cef0554ec77", "html_url": "https://github.com/rust-lang/rust/commit/e822a18ae7d55cefc332c6598a607cef0554ec77"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "d7a58f4cdd08c80bfaa34a2757cc1e11f6ec1971", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -3312,10 +3312,10 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n            variants: Vec<VariantDefData<'tcx, 'container>>) -> Self {\n         let mut flags = AdtFlags::NO_ADT_FLAGS;\n         let attrs = tcx.get_attrs(did);\n-        if attrs.iter().any(|item| item.check_name(\"fundamental\")) {\n+        if attr::contains_name(&attrs, \"fundamental\") {\n             flags = flags | AdtFlags::IS_FUNDAMENTAL;\n         }\n-        if attrs.iter().any(|item| item.check_name(\"simd\")) {\n+        if tcx.lookup_simd(did) {\n             flags = flags | AdtFlags::IS_SIMD;\n         }\n         if Some(did) == tcx.lang_items.phantom_data() {\n@@ -6116,6 +6116,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// Determine whether an item is annotated with `#[simd]`\n     pub fn lookup_simd(&self, did: DefId) -> bool {\n         self.has_attr(did, \"simd\")\n+            || self.lookup_repr_hints(did).contains(&attr::ReprSimd)\n     }\n \n     /// Obtain the representation annotation for a struct definition."}, {"sha": "0d34cce919a64993b5208924be3b5366f80be141", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -615,6 +615,9 @@ fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntTyp\n         attr::ReprPacked => {\n             cx.tcx().sess.bug(\"range_to_inttype: found ReprPacked on an enum\");\n         }\n+        attr::ReprSimd => {\n+            cx.tcx().sess.bug(\"range_to_inttype: found ReprSimd on an enum\");\n+        }\n     }\n     for &ity in attempts {\n         if bounds_usable(cx, ity, bounds) {"}, {"sha": "e32964db7486a51d4612e617c01050325179d982", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -4421,6 +4421,9 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                             \"discriminant type specified here\");\n                     }\n                 }\n+                attr::ReprSimd => {\n+                    ccx.tcx.sess.bug(\"range_to_inttype: found ReprSimd on an enum\");\n+                }\n                 attr::ReprPacked => {\n                     ccx.tcx.sess.bug(\"range_to_inttype: found ReprPacked on an enum\");\n                 }"}, {"sha": "3de9ba5197489931eb64de491f651ad9387c4b33", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -579,6 +579,7 @@ pub fn find_repr_attrs(diagnostic: &SpanHandler, attr: &Attribute) -> Vec<ReprAt\n                             // Can't use \"extern\" because it's not a lexical identifier.\n                             \"C\" => Some(ReprExtern),\n                             \"packed\" => Some(ReprPacked),\n+                            \"simd\" => Some(ReprSimd),\n                             _ => match int_type_of_word(&word) {\n                                 Some(ity) => Some(ReprInt(item.span, ity)),\n                                 None => {\n@@ -628,6 +629,7 @@ pub enum ReprAttr {\n     ReprInt(Span, IntType),\n     ReprExtern,\n     ReprPacked,\n+    ReprSimd,\n }\n \n impl ReprAttr {\n@@ -636,7 +638,8 @@ impl ReprAttr {\n             ReprAny => false,\n             ReprInt(_sp, ity) => ity.is_ffi_safe(),\n             ReprExtern => true,\n-            ReprPacked => false\n+            ReprPacked => false,\n+            ReprSimd => true,\n         }\n     }\n }"}, {"sha": "f8f63e94ee574b04472e1e69af9476ff9f9d0a14", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -739,7 +739,7 @@ fn find_repr_type_name(diagnostic: &SpanHandler,\n     for a in type_attrs {\n         for r in &attr::find_repr_attrs(diagnostic, a) {\n             repr_type_name = match *r {\n-                attr::ReprAny | attr::ReprPacked => continue,\n+                attr::ReprAny | attr::ReprPacked | attr::ReprSimd => continue,\n                 attr::ReprExtern => \"i32\",\n \n                 attr::ReprInt(_, attr::SignedInt(ast::TyIs)) => \"isize\","}, {"sha": "a12291161f74f657d2bacc5288cabdab42cc6cc5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -177,6 +177,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // Allows macros to appear in the type position.\n \n     (\"type_macros\", \"1.3.0\", Active),\n+\n+    // allow `repr(simd)`, and importing the various simd intrinsics\n+    (\"simd_basics\", \"1.3.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -359,6 +362,7 @@ pub struct Features {\n     pub allow_box: bool,\n     pub allow_pushpop_unsafe: bool,\n     pub simd_ffi: bool,\n+    pub simd_basics: bool,\n     pub unmarked_api: bool,\n     pub negate_unsigned: bool,\n     /// spans of #![feature] attrs for stable language features. for error reporting\n@@ -388,6 +392,7 @@ impl Features {\n             allow_box: false,\n             allow_pushpop_unsafe: false,\n             simd_ffi: false,\n+            simd_basics: false,\n             unmarked_api: false,\n             negate_unsigned: false,\n             declared_stable_lang_features: Vec::new(),\n@@ -660,6 +665,20 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 if attr::contains_name(&i.attrs[..], \"simd\") {\n                     self.gate_feature(\"simd\", i.span,\n                                       \"SIMD types are experimental and possibly buggy\");\n+                    self.context.span_handler.span_warn(i.span,\n+                                                        \"the `#[simd]` attribute is deprecated, \\\n+                                                         use `#[repr(simd)]` instead\");\n+                }\n+                for attr in &i.attrs {\n+                    if attr.name() == \"repr\" {\n+                        for item in attr.meta_item_list().unwrap_or(&[]) {\n+                            if item.name() == \"simd\" {\n+                                self.gate_feature(\"simd_basics\", i.span,\n+                                                  \"SIMD types are experimental and possibly buggy\");\n+\n+                            }\n+                        }\n+                    }\n                 }\n             }\n \n@@ -892,6 +911,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         allow_box: cx.has_feature(\"box_syntax\"),\n         allow_pushpop_unsafe: cx.has_feature(\"pushpop_unsafe\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n+        simd_basics: cx.has_feature(\"simd_basics\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n         negate_unsigned: cx.has_feature(\"negate_unsigned\"),\n         declared_stable_lang_features: accepted_features,"}, {"sha": "fdafb2ad950c9bc037c2bc3c6e69cca80bf60529", "filename": "src/test/compile-fail/feature-gate-repr-simd.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr-simd.rs?ref=c8b6d5b23cc8b2d43ece9f06252c7e98280fb8e5", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(simd)]\n+struct Foo(u64, u64); //~ error: SIMD types are experimental\n+\n+fn main() {}"}]}