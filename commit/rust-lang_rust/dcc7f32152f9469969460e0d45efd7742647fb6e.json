{"sha": "dcc7f32152f9469969460e0d45efd7742647fb6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYzdmMzIxNTJmOTQ2OTk2OTQ2MGUwZDQ1ZWZkNzc0MjY0N2ZiNmU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-04T06:25:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-04T10:37:24Z"}, "message": "Format source codes", "tree": {"sha": "8bf1008cd61599075b4f878172992298dd2632b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bf1008cd61599075b4f878172992298dd2632b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcc7f32152f9469969460e0d45efd7742647fb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc7f32152f9469969460e0d45efd7742647fb6e", "html_url": "https://github.com/rust-lang/rust/commit/dcc7f32152f9469969460e0d45efd7742647fb6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcc7f32152f9469969460e0d45efd7742647fb6e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49269ad399e33c5c5ea2cd9a01376221ea2c62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49269ad399e33c5c5ea2cd9a01376221ea2c62e", "html_url": "https://github.com/rust-lang/rust/commit/b49269ad399e33c5c5ea2cd9a01376221ea2c62e"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "015cb5b4eef88a5cc40eea3706661acb8467205d", "filename": "src/items.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dcc7f32152f9469969460e0d45efd7742647fb6e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc7f32152f9469969460e0d45efd7742647fb6e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=dcc7f32152f9469969460e0d45efd7742647fb6e", "patch": "@@ -1161,21 +1161,23 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n         .unwrap_or(0);\n     let type_indent = indent + line_width;\n     // Try to fit the type on the same line\n-    let ty_str = try_opt!(ty.rewrite(context, Shape::legacy(budget, type_indent))\n-        .or_else(|| {\n-            // The line was too short, try to put the type on the next line\n-\n-            // Remove the space after '='\n-            result.pop();\n-            let type_indent = indent.block_indent(context.config);\n-            result.push('\\n');\n-            result.push_str(&type_indent.to_string(context.config));\n-            let budget = try_opt!(context\n-                                      .config\n-                                      .max_width()\n-                                      .checked_sub(type_indent.width() + \";\".len()));\n-            ty.rewrite(context, Shape::legacy(budget, type_indent))\n-        }));\n+    let ty_str = try_opt!(\n+        ty.rewrite(context, Shape::legacy(budget, type_indent))\n+            .or_else(|| {\n+                // The line was too short, try to put the type on the next line\n+\n+                // Remove the space after '='\n+                result.pop();\n+                let type_indent = indent.block_indent(context.config);\n+                result.push('\\n');\n+                result.push_str(&type_indent.to_string(context.config));\n+                let budget = try_opt!(context\n+                                          .config\n+                                          .max_width()\n+                                          .checked_sub(type_indent.width() + \";\".len()));\n+                ty.rewrite(context, Shape::legacy(budget, type_indent))\n+            })\n+    );\n     result.push_str(&ty_str);\n     result.push_str(\";\");\n     Some(result)"}, {"sha": "bec23579cda0b43982bbe59c410fa42915776ecf", "filename": "src/types.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dcc7f32152f9469969460e0d45efd7742647fb6e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc7f32152f9469969460e0d45efd7742647fb6e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=dcc7f32152f9469969460e0d45efd7742647fb6e", "patch": "@@ -376,13 +376,15 @@ impl Rewrite for ast::WherePredicate {\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(bounds\n-                        .iter()\n-                        .map(|ty_bound| {\n-                            ty_bound\n-                                .rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n-                        })\n-                        .collect::<Option<Vec<_>>>())\n+                    let bounds_str: String = try_opt!(\n+                        bounds\n+                            .iter()\n+                            .map(|ty_bound| {\n+                                ty_bound.rewrite(context,\n+                                                 Shape::legacy(budget, shape.indent + used_width))\n+                            })\n+                            .collect::<Option<Vec<_>>>()\n+                    )\n                         .join(joiner);\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n@@ -401,13 +403,15 @@ impl Rewrite for ast::WherePredicate {\n                     };\n                     let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(bounds\n-                        .iter()\n-                        .map(|ty_bound| {\n-                            ty_bound\n-                                .rewrite(context, Shape::legacy(budget, shape.indent + used_width))\n-                        })\n-                        .collect::<Option<Vec<_>>>())\n+                    let bounds_str: String = try_opt!(\n+                        bounds\n+                            .iter()\n+                            .map(|ty_bound| {\n+                                ty_bound.rewrite(context,\n+                                                 Shape::legacy(budget, shape.indent + used_width))\n+                            })\n+                            .collect::<Option<Vec<_>>>()\n+                    )\n                         .join(joiner);\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n@@ -701,15 +705,16 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n         // 6 = \"for<> \".len(), 4 = \"for<\".\n         // This doesn't work out so nicely for mutliline situation with lots of\n         // rightward drift. If that is a problem, we could use the list stuff.\n-        result.push_str(&try_opt!(bare_fn\n-            .lifetimes\n-            .iter()\n-            .map(|l| {\n-                l.rewrite(context,\n-                          Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n-            })\n-            .collect::<Option<Vec<_>>>())\n-            .join(\", \"));\n+        result.push_str(&try_opt!(\n+            bare_fn\n+                .lifetimes\n+                .iter()\n+                .map(|l| {\n+                    l.rewrite(context,\n+                              Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n+                })\n+                .collect::<Option<Vec<_>>>()\n+        ).join(\", \"));\n         result.push_str(\"> \");\n     }\n "}]}