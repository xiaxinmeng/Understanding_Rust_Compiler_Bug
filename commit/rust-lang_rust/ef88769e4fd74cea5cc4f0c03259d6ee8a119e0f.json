{"sha": "ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODg3NjllNGZkNzRjZWE1Y2M0ZjBjMDMyNTlkNmVlOGExMTllMGY=", "commit": {"author": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-04-02T21:09:01Z"}, "committer": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-04-07T15:09:01Z"}, "message": "--bless all mir-opt tests.", "tree": {"sha": "487d2ee3c0f293e3ec836d982dd4ad43207b609d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487d2ee3c0f293e3ec836d982dd4ad43207b609d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "html_url": "https://github.com/rust-lang/rust/commit/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/comments", "author": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0", "html_url": "https://github.com/rust-lang/rust/commit/39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0"}], "stats": {"total": 9618, "additions": 6572, "deletions": 3046}, "files": [{"sha": "6cd14ccf434f2ee8bdb6f260638b2b4899b004f0", "filename": "src/test/mir-opt/address-of.rs", "status": "modified", "additions": 3, "deletions": 68, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Faddress-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Faddress-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,3 +1,5 @@\n+// EMIT_MIR rustc.address_of_reborrow.SimplifyCfg-initial.after.mir\n+\n fn address_of_reborrow() {\n     let y = &[0; 10];\n     let mut z = &mut [0; 10];\n@@ -35,78 +37,11 @@ fn address_of_reborrow() {\n }\n \n // The normal borrows here should be preserved\n+// EMIT_MIR rustc.borrow_and_cast.SimplifyCfg-initial.after.mir\n fn borrow_and_cast(mut x: i32) {\n     let p = &x as *const i32;\n     let q = &mut x as *const i32;\n     let r = &mut x as *mut i32;\n }\n \n fn main() {}\n-\n-// START rustc.address_of_reborrow.SimplifyCfg-initial.after.mir\n-// bb0: {\n-//  ...\n-//  _5 = &raw const (*_1); // & to *const casts\n-//  ...\n-//  _7 = &raw const (*_1);\n-//  ...\n-//  _11 = &raw const (*_1);\n-//  ...\n-//  _14 = &raw const (*_1);\n-//  ...\n-//  _16 = &raw const (*_1);\n-//  ...\n-//  _17 = &raw const (*_1); // & to *const coercions\n-//  ...\n-//  _18 = &raw const (*_1);\n-//  ...\n-//  _20 = &raw const (*_1);\n-//  ...\n-//  _22 = &raw const (*_1);\n-// ...\n-//  _24 = &raw const (*_2); // &mut to *const casts\n-// ...\n-//  _26 = &raw const (*_2);\n-// ...\n-//  _30 = &raw const (*_2);\n-// ...\n-//  _33 = &raw const (*_2);\n-// ...\n-//  _34 = &raw const (*_2); // &mut to *const coercions\n-// ...\n-//  _35 = &raw const (*_2);\n-// ...\n-//  _37 = &raw const (*_2);\n-// ...\n-//  _39 = &raw const (*_2);\n-// ...\n-//  _41 = &raw mut (*_2); // &mut to *mut casts\n-// ...\n-//  _43 = &raw mut (*_2);\n-// ...\n-//  _47 = &raw mut (*_2);\n-// ...\n-//  _50 = &raw mut (*_2);\n-// ...\n-//  _51 = &raw mut (*_2); // &mut to *mut coercions\n-// ...\n-//  _52 = &raw mut (*_2);\n-// ...\n-//  _54 = &raw mut (*_2);\n-// ...\n-//  _56 = &raw mut (*_2);\n-// ...\n-// }\n-// END rustc.address_of_reborrow.SimplifyCfg-initial.after.mir\n-\n-// START rustc.borrow_and_cast.EraseRegions.after.mir\n-// bb0: {\n-//  ...\n-//  _4 = &_1;\n-//  ...\n-//  _7 = &mut _1;\n-//  ...\n-//  _10 = &mut _1;\n-//  ...\n-// }\n-// END rustc.borrow_and_cast.EraseRegions.after.mir"}, {"sha": "af07da4cfe0a8713f1e9c39e5ea394d85084b420", "filename": "src/test/mir-opt/address-of/rustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "added", "additions": 320, "deletions": 0, "changes": 320, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,320 @@\n+// MIR for `address_of_reborrow` after SimplifyCfg-initial\n+\n+| User Type Annotations\n+| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:7:5: 7:18\n+| 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:9:5: 9:25\n+| 2: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:13:12: 13:20\n+| 3: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:13:12: 13:20\n+| 4: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:14:12: 14:28\n+| 5: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:14:12: 14:28\n+| 6: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:15:12: 15:27\n+| 7: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:15:12: 15:27\n+| 8: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:16:12: 16:24\n+| 9: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:16:12: 16:24\n+| 10: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:18:5: 18:18\n+| 11: Canonical { max_universe: U3, variables: [CanonicalVarInfo { kind: Region(U3) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:20:5: 20:25\n+| 12: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:23:12: 23:20\n+| 13: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) } at $DIR/address-of.rs:23:12: 23:20\n+| 14: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:24:12: 24:28\n+| 15: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) } at $DIR/address-of.rs:24:12: 24:28\n+| 16: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:25:12: 25:27\n+| 17: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) } at $DIR/address-of.rs:25:12: 25:27\n+| 18: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:26:12: 26:24\n+| 19: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) } at $DIR/address-of.rs:26:12: 26:24\n+| 20: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:28:5: 28:16\n+| 21: Canonical { max_universe: U6, variables: [CanonicalVarInfo { kind: Region(U6) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:30:5: 30:23\n+| 22: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:33:12: 33:18\n+| 23: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) } at $DIR/address-of.rs:33:12: 33:18\n+| 24: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) } at $DIR/address-of.rs:34:12: 34:26\n+| 25: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) } at $DIR/address-of.rs:34:12: 34:26\n+| 26: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:35:12: 35:25\n+| 27: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) } at $DIR/address-of.rs:35:12: 35:25\n+| 28: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) } at $DIR/address-of.rs:36:12: 36:22\n+| 29: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) } at $DIR/address-of.rs:36:12: 36:22\n+|\n+fn address_of_reborrow() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:3:26: 3:26\n+    let _1: &[i32; 10];                  // in scope 0 at $DIR/address-of.rs:4:9: 4:10\n+    let _2: [i32; 10];                   // in scope 0 at $DIR/address-of.rs:4:14: 4:21\n+    let mut _4: [i32; 10];               // in scope 0 at $DIR/address-of.rs:5:22: 5:29\n+    let _5: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:7:5: 7:18\n+    let mut _6: *const [i32; 10];        // in scope 0 at $DIR/address-of.rs:7:5: 7:18\n+    let _7: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:8:5: 8:26\n+    let _8: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:9:5: 9:25\n+    let mut _9: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:9:5: 9:25\n+    let mut _10: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:9:5: 9:6\n+    let _11: *const [i32];               // in scope 0 at $DIR/address-of.rs:10:5: 10:22\n+    let mut _12: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:10:5: 10:6\n+    let _13: *const i32;                 // in scope 0 at $DIR/address-of.rs:11:5: 11:20\n+    let mut _14: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:11:5: 11:6\n+    let mut _18: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:15:30: 15:31\n+    let mut _20: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:16:27: 16:28\n+    let _21: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:18:5: 18:18\n+    let mut _22: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:18:5: 18:18\n+    let _23: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:19:5: 19:26\n+    let _24: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:20:5: 20:25\n+    let mut _25: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:20:5: 20:25\n+    let mut _26: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:20:5: 20:6\n+    let _27: *const [i32];               // in scope 0 at $DIR/address-of.rs:21:5: 21:22\n+    let mut _28: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:21:5: 21:6\n+    let mut _32: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:25:30: 25:31\n+    let mut _34: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:26:27: 26:28\n+    let _35: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:28:5: 28:16\n+    let mut _36: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:28:5: 28:16\n+    let _37: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:29:5: 29:24\n+    let _38: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:30:5: 30:23\n+    let mut _39: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:30:5: 30:23\n+    let mut _40: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:30:5: 30:6\n+    let _41: *mut [i32];                 // in scope 0 at $DIR/address-of.rs:31:5: 31:20\n+    let mut _42: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:31:5: 31:6\n+    let mut _46: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:35:28: 35:29\n+    let mut _48: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:36:25: 36:26\n+    scope 1 {\n+        debug y => _1;                   // in scope 1 at $DIR/address-of.rs:4:9: 4:10\n+        let mut _3: &mut [i32; 10];      // in scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        scope 2 {\n+            debug z => _3;               // in scope 2 at $DIR/address-of.rs:5:9: 5:14\n+            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 2 at $DIR/address-of.rs:13:9: 13:10\n+            scope 3 {\n+                debug p => _15;          // in scope 3 at $DIR/address-of.rs:13:9: 13:10\n+                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] }; // in scope 3 at $DIR/address-of.rs:14:9: 14:10\n+                scope 4 {\n+                    debug p => _16;      // in scope 4 at $DIR/address-of.rs:14:9: 14:10\n+                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] }; // in scope 4 at $DIR/address-of.rs:15:9: 15:10\n+                    scope 5 {\n+                        debug p => _17;  // in scope 5 at $DIR/address-of.rs:15:9: 15:10\n+                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] }; // in scope 5 at $DIR/address-of.rs:16:9: 16:10\n+                        scope 6 {\n+                            debug p => _19; // in scope 6 at $DIR/address-of.rs:16:9: 16:10\n+                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] }; // in scope 6 at $DIR/address-of.rs:23:9: 23:10\n+                            scope 7 {\n+                                debug p => _29; // in scope 7 at $DIR/address-of.rs:23:9: 23:10\n+                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] }; // in scope 7 at $DIR/address-of.rs:24:9: 24:10\n+                                scope 8 {\n+                                    debug p => _30; // in scope 8 at $DIR/address-of.rs:24:9: 24:10\n+                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] }; // in scope 8 at $DIR/address-of.rs:25:9: 25:10\n+                                    scope 9 {\n+                                        debug p => _31; // in scope 9 at $DIR/address-of.rs:25:9: 25:10\n+                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] }; // in scope 9 at $DIR/address-of.rs:26:9: 26:10\n+                                        scope 10 {\n+                                            debug p => _33; // in scope 10 at $DIR/address-of.rs:26:9: 26:10\n+                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] }; // in scope 10 at $DIR/address-of.rs:33:9: 33:10\n+                                            scope 11 {\n+                                                debug p => _43; // in scope 11 at $DIR/address-of.rs:33:9: 33:10\n+                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] }; // in scope 11 at $DIR/address-of.rs:34:9: 34:10\n+                                                scope 12 {\n+                                                    debug p => _44; // in scope 12 at $DIR/address-of.rs:34:9: 34:10\n+                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] }; // in scope 12 at $DIR/address-of.rs:35:9: 35:10\n+                                                    scope 13 {\n+                                                        debug p => _45; // in scope 13 at $DIR/address-of.rs:35:9: 35:10\n+                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] }; // in scope 13 at $DIR/address-of.rs:36:9: 36:10\n+                                                        scope 14 {\n+                                                            debug p => _47; // in scope 14 at $DIR/address-of.rs:36:9: 36:10\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/address-of.rs:4:14: 4:21\n+        _2 = [const 0i32; 10];           // bb0[2]: scope 0 at $DIR/address-of.rs:4:14: 4:21\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/address-of.rs:4:15: 4:16\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        _1 = &_2;                        // bb0[3]: scope 0 at $DIR/address-of.rs:4:13: 4:21\n+        FakeRead(ForLet, _1);            // bb0[4]: scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        StorageLive(_3);                 // bb0[5]: scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        StorageLive(_4);                 // bb0[6]: scope 1 at $DIR/address-of.rs:5:22: 5:29\n+        _4 = [const 0i32; 10];           // bb0[7]: scope 1 at $DIR/address-of.rs:5:22: 5:29\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/address-of.rs:5:23: 5:24\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        _3 = &mut _4;                    // bb0[8]: scope 1 at $DIR/address-of.rs:5:17: 5:29\n+        FakeRead(ForLet, _3);            // bb0[9]: scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        StorageLive(_5);                 // bb0[10]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        StorageLive(_6);                 // bb0[11]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        _6 = &raw const (*_1);           // bb0[12]: scope 2 at $DIR/address-of.rs:7:5: 7:6\n+        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // bb0[13]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        _5 = _6;                         // bb0[14]: scope 2 at $DIR/address-of.rs:7:5: 7:18\n+        StorageDead(_6);                 // bb0[15]: scope 2 at $DIR/address-of.rs:7:18: 7:19\n+        StorageDead(_5);                 // bb0[16]: scope 2 at $DIR/address-of.rs:7:18: 7:19\n+        StorageLive(_7);                 // bb0[17]: scope 2 at $DIR/address-of.rs:8:5: 8:26\n+        _7 = &raw const (*_1);           // bb0[18]: scope 2 at $DIR/address-of.rs:8:5: 8:6\n+        StorageDead(_7);                 // bb0[19]: scope 2 at $DIR/address-of.rs:8:26: 8:27\n+        StorageLive(_8);                 // bb0[20]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        StorageLive(_9);                 // bb0[21]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        StorageLive(_10);                // bb0[22]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        _10 = &raw const (*_1);          // bb0[23]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[24]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        StorageDead(_10);                // bb0[25]: scope 2 at $DIR/address-of.rs:9:5: 9:6\n+        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // bb0[26]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        _8 = _9;                         // bb0[27]: scope 2 at $DIR/address-of.rs:9:5: 9:25\n+        StorageDead(_9);                 // bb0[28]: scope 2 at $DIR/address-of.rs:9:25: 9:26\n+        StorageDead(_8);                 // bb0[29]: scope 2 at $DIR/address-of.rs:9:25: 9:26\n+        StorageLive(_11);                // bb0[30]: scope 2 at $DIR/address-of.rs:10:5: 10:22\n+        StorageLive(_12);                // bb0[31]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        _12 = &raw const (*_1);          // bb0[32]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        _11 = move _12 as *const [i32] (Pointer(Unsize)); // bb0[33]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        StorageDead(_12);                // bb0[34]: scope 2 at $DIR/address-of.rs:10:5: 10:6\n+        StorageDead(_11);                // bb0[35]: scope 2 at $DIR/address-of.rs:10:22: 10:23\n+        StorageLive(_13);                // bb0[36]: scope 2 at $DIR/address-of.rs:11:5: 11:20\n+        StorageLive(_14);                // bb0[37]: scope 2 at $DIR/address-of.rs:11:5: 11:6\n+        _14 = &raw const (*_1);          // bb0[38]: scope 2 at $DIR/address-of.rs:11:5: 11:6\n+        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // bb0[39]: scope 2 at $DIR/address-of.rs:11:5: 11:20\n+        StorageDead(_14);                // bb0[40]: scope 2 at $DIR/address-of.rs:11:19: 11:20\n+        StorageDead(_13);                // bb0[41]: scope 2 at $DIR/address-of.rs:11:20: 11:21\n+        StorageLive(_15);                // bb0[42]: scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        _15 = &raw const (*_1);          // bb0[43]: scope 2 at $DIR/address-of.rs:13:23: 13:24\n+        FakeRead(ForLet, _15);           // bb0[44]: scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // bb0[45]: scope 2 at $DIR/address-of.rs:13:12: 13:20\n+        StorageLive(_16);                // bb0[46]: scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        _16 = &raw const (*_1);          // bb0[47]: scope 3 at $DIR/address-of.rs:14:31: 14:32\n+        FakeRead(ForLet, _16);           // bb0[48]: scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // bb0[49]: scope 3 at $DIR/address-of.rs:14:12: 14:28\n+        StorageLive(_17);                // bb0[50]: scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        StorageLive(_18);                // bb0[51]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        _18 = &raw const (*_1);          // bb0[52]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[53]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        StorageDead(_18);                // bb0[54]: scope 4 at $DIR/address-of.rs:15:30: 15:31\n+        FakeRead(ForLet, _17);           // bb0[55]: scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // bb0[56]: scope 4 at $DIR/address-of.rs:15:12: 15:27\n+        StorageLive(_19);                // bb0[57]: scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        StorageLive(_20);                // bb0[58]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        _20 = &raw const (*_1);          // bb0[59]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        _19 = move _20 as *const [i32] (Pointer(Unsize)); // bb0[60]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        StorageDead(_20);                // bb0[61]: scope 5 at $DIR/address-of.rs:16:27: 16:28\n+        FakeRead(ForLet, _19);           // bb0[62]: scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // bb0[63]: scope 5 at $DIR/address-of.rs:16:12: 16:24\n+        StorageLive(_21);                // bb0[64]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        StorageLive(_22);                // bb0[65]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        _22 = &raw const (*_3);          // bb0[66]: scope 6 at $DIR/address-of.rs:18:5: 18:6\n+        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // bb0[67]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        _21 = _22;                       // bb0[68]: scope 6 at $DIR/address-of.rs:18:5: 18:18\n+        StorageDead(_22);                // bb0[69]: scope 6 at $DIR/address-of.rs:18:18: 18:19\n+        StorageDead(_21);                // bb0[70]: scope 6 at $DIR/address-of.rs:18:18: 18:19\n+        StorageLive(_23);                // bb0[71]: scope 6 at $DIR/address-of.rs:19:5: 19:26\n+        _23 = &raw const (*_3);          // bb0[72]: scope 6 at $DIR/address-of.rs:19:5: 19:6\n+        StorageDead(_23);                // bb0[73]: scope 6 at $DIR/address-of.rs:19:26: 19:27\n+        StorageLive(_24);                // bb0[74]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        StorageLive(_25);                // bb0[75]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        StorageLive(_26);                // bb0[76]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        _26 = &raw const (*_3);          // bb0[77]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[78]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        StorageDead(_26);                // bb0[79]: scope 6 at $DIR/address-of.rs:20:5: 20:6\n+        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // bb0[80]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        _24 = _25;                       // bb0[81]: scope 6 at $DIR/address-of.rs:20:5: 20:25\n+        StorageDead(_25);                // bb0[82]: scope 6 at $DIR/address-of.rs:20:25: 20:26\n+        StorageDead(_24);                // bb0[83]: scope 6 at $DIR/address-of.rs:20:25: 20:26\n+        StorageLive(_27);                // bb0[84]: scope 6 at $DIR/address-of.rs:21:5: 21:22\n+        StorageLive(_28);                // bb0[85]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        _28 = &raw const (*_3);          // bb0[86]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        _27 = move _28 as *const [i32] (Pointer(Unsize)); // bb0[87]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        StorageDead(_28);                // bb0[88]: scope 6 at $DIR/address-of.rs:21:5: 21:6\n+        StorageDead(_27);                // bb0[89]: scope 6 at $DIR/address-of.rs:21:22: 21:23\n+        StorageLive(_29);                // bb0[90]: scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        _29 = &raw const (*_3);          // bb0[91]: scope 6 at $DIR/address-of.rs:23:23: 23:24\n+        FakeRead(ForLet, _29);           // bb0[92]: scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // bb0[93]: scope 6 at $DIR/address-of.rs:23:12: 23:20\n+        StorageLive(_30);                // bb0[94]: scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        _30 = &raw const (*_3);          // bb0[95]: scope 7 at $DIR/address-of.rs:24:31: 24:32\n+        FakeRead(ForLet, _30);           // bb0[96]: scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // bb0[97]: scope 7 at $DIR/address-of.rs:24:12: 24:28\n+        StorageLive(_31);                // bb0[98]: scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        StorageLive(_32);                // bb0[99]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        _32 = &raw const (*_3);          // bb0[100]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // bb0[101]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        StorageDead(_32);                // bb0[102]: scope 8 at $DIR/address-of.rs:25:30: 25:31\n+        FakeRead(ForLet, _31);           // bb0[103]: scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // bb0[104]: scope 8 at $DIR/address-of.rs:25:12: 25:27\n+        StorageLive(_33);                // bb0[105]: scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        StorageLive(_34);                // bb0[106]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        _34 = &raw const (*_3);          // bb0[107]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        _33 = move _34 as *const [i32] (Pointer(Unsize)); // bb0[108]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        StorageDead(_34);                // bb0[109]: scope 9 at $DIR/address-of.rs:26:27: 26:28\n+        FakeRead(ForLet, _33);           // bb0[110]: scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // bb0[111]: scope 9 at $DIR/address-of.rs:26:12: 26:24\n+        StorageLive(_35);                // bb0[112]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        StorageLive(_36);                // bb0[113]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        _36 = &raw mut (*_3);            // bb0[114]: scope 10 at $DIR/address-of.rs:28:5: 28:6\n+        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // bb0[115]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        _35 = _36;                       // bb0[116]: scope 10 at $DIR/address-of.rs:28:5: 28:16\n+        StorageDead(_36);                // bb0[117]: scope 10 at $DIR/address-of.rs:28:16: 28:17\n+        StorageDead(_35);                // bb0[118]: scope 10 at $DIR/address-of.rs:28:16: 28:17\n+        StorageLive(_37);                // bb0[119]: scope 10 at $DIR/address-of.rs:29:5: 29:24\n+        _37 = &raw mut (*_3);            // bb0[120]: scope 10 at $DIR/address-of.rs:29:5: 29:6\n+        StorageDead(_37);                // bb0[121]: scope 10 at $DIR/address-of.rs:29:24: 29:25\n+        StorageLive(_38);                // bb0[122]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        StorageLive(_39);                // bb0[123]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        StorageLive(_40);                // bb0[124]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        _40 = &raw mut (*_3);            // bb0[125]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // bb0[126]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        StorageDead(_40);                // bb0[127]: scope 10 at $DIR/address-of.rs:30:5: 30:6\n+        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // bb0[128]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        _38 = _39;                       // bb0[129]: scope 10 at $DIR/address-of.rs:30:5: 30:23\n+        StorageDead(_39);                // bb0[130]: scope 10 at $DIR/address-of.rs:30:23: 30:24\n+        StorageDead(_38);                // bb0[131]: scope 10 at $DIR/address-of.rs:30:23: 30:24\n+        StorageLive(_41);                // bb0[132]: scope 10 at $DIR/address-of.rs:31:5: 31:20\n+        StorageLive(_42);                // bb0[133]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        _42 = &raw mut (*_3);            // bb0[134]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // bb0[135]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        StorageDead(_42);                // bb0[136]: scope 10 at $DIR/address-of.rs:31:5: 31:6\n+        StorageDead(_41);                // bb0[137]: scope 10 at $DIR/address-of.rs:31:20: 31:21\n+        StorageLive(_43);                // bb0[138]: scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        _43 = &raw mut (*_3);            // bb0[139]: scope 10 at $DIR/address-of.rs:33:21: 33:22\n+        FakeRead(ForLet, _43);           // bb0[140]: scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // bb0[141]: scope 10 at $DIR/address-of.rs:33:12: 33:18\n+        StorageLive(_44);                // bb0[142]: scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        _44 = &raw mut (*_3);            // bb0[143]: scope 11 at $DIR/address-of.rs:34:29: 34:30\n+        FakeRead(ForLet, _44);           // bb0[144]: scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // bb0[145]: scope 11 at $DIR/address-of.rs:34:12: 34:26\n+        StorageLive(_45);                // bb0[146]: scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        StorageLive(_46);                // bb0[147]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        _46 = &raw mut (*_3);            // bb0[148]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // bb0[149]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        StorageDead(_46);                // bb0[150]: scope 12 at $DIR/address-of.rs:35:28: 35:29\n+        FakeRead(ForLet, _45);           // bb0[151]: scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // bb0[152]: scope 12 at $DIR/address-of.rs:35:12: 35:25\n+        StorageLive(_47);                // bb0[153]: scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        StorageLive(_48);                // bb0[154]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        _48 = &raw mut (*_3);            // bb0[155]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // bb0[156]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        StorageDead(_48);                // bb0[157]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n+        FakeRead(ForLet, _47);           // bb0[158]: scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // bb0[159]: scope 13 at $DIR/address-of.rs:36:12: 36:22\n+        _0 = ();                         // bb0[160]: scope 0 at $DIR/address-of.rs:3:26: 37:2\n+        StorageDead(_47);                // bb0[161]: scope 13 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_45);                // bb0[162]: scope 12 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_44);                // bb0[163]: scope 11 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_43);                // bb0[164]: scope 10 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_33);                // bb0[165]: scope 9 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_31);                // bb0[166]: scope 8 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_30);                // bb0[167]: scope 7 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_29);                // bb0[168]: scope 6 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_19);                // bb0[169]: scope 5 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_17);                // bb0[170]: scope 4 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_16);                // bb0[171]: scope 3 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_15);                // bb0[172]: scope 2 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_4);                 // bb0[173]: scope 1 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_3);                 // bb0[174]: scope 1 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_2);                 // bb0[175]: scope 0 at $DIR/address-of.rs:37:1: 37:2\n+        StorageDead(_1);                 // bb0[176]: scope 0 at $DIR/address-of.rs:37:1: 37:2\n+        return;                          // bb0[177]: scope 0 at $DIR/address-of.rs:37:2: 37:2\n+    }\n+}"}, {"sha": "29ccff492027a4abc6f2ce1d2e7c8be5ed5cc873", "filename": "src/test/mir-opt/address-of/rustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,47 @@\n+// MIR for `borrow_and_cast` after SimplifyCfg-initial\n+\n+fn borrow_and_cast(_1: i32) -> () {\n+    debug x => _1;                       // in scope 0 at $DIR/address-of.rs:41:20: 41:25\n+    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:41:32: 41:32\n+    let _2: *const i32;                  // in scope 0 at $DIR/address-of.rs:42:9: 42:10\n+    let _3: &i32;                        // in scope 0 at $DIR/address-of.rs:42:13: 42:15\n+    let _5: &mut i32;                    // in scope 0 at $DIR/address-of.rs:43:13: 43:19\n+    let mut _7: &mut i32;                // in scope 0 at $DIR/address-of.rs:44:13: 44:19\n+    scope 1 {\n+        debug p => _2;                   // in scope 1 at $DIR/address-of.rs:42:9: 42:10\n+        let _4: *const i32;              // in scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        scope 2 {\n+            debug q => _4;               // in scope 2 at $DIR/address-of.rs:43:9: 43:10\n+            let _6: *mut i32;            // in scope 2 at $DIR/address-of.rs:44:9: 44:10\n+            scope 3 {\n+                debug r => _6;           // in scope 3 at $DIR/address-of.rs:44:9: 44:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/address-of.rs:42:13: 42:15\n+        _3 = &_1;                        // bb0[2]: scope 0 at $DIR/address-of.rs:42:13: 42:15\n+        _2 = &raw const (*_3);           // bb0[3]: scope 0 at $DIR/address-of.rs:42:13: 42:15\n+        FakeRead(ForLet, _2);            // bb0[4]: scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/address-of.rs:42:29: 42:30\n+        StorageLive(_4);                 // bb0[6]: scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        StorageLive(_5);                 // bb0[7]: scope 1 at $DIR/address-of.rs:43:13: 43:19\n+        _5 = &mut _1;                    // bb0[8]: scope 1 at $DIR/address-of.rs:43:13: 43:19\n+        _4 = &raw const (*_5);           // bb0[9]: scope 1 at $DIR/address-of.rs:43:13: 43:19\n+        FakeRead(ForLet, _4);            // bb0[10]: scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        StorageDead(_5);                 // bb0[11]: scope 1 at $DIR/address-of.rs:43:33: 43:34\n+        StorageLive(_6);                 // bb0[12]: scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        StorageLive(_7);                 // bb0[13]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n+        _7 = &mut _1;                    // bb0[14]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n+        _6 = &raw mut (*_7);             // bb0[15]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n+        FakeRead(ForLet, _6);            // bb0[16]: scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        StorageDead(_7);                 // bb0[17]: scope 2 at $DIR/address-of.rs:44:31: 44:32\n+        _0 = ();                         // bb0[18]: scope 0 at $DIR/address-of.rs:41:32: 45:2\n+        StorageDead(_6);                 // bb0[19]: scope 2 at $DIR/address-of.rs:45:1: 45:2\n+        StorageDead(_4);                 // bb0[20]: scope 1 at $DIR/address-of.rs:45:1: 45:2\n+        StorageDead(_2);                 // bb0[21]: scope 0 at $DIR/address-of.rs:45:1: 45:2\n+        return;                          // bb0[22]: scope 0 at $DIR/address-of.rs:45:2: 45:2\n+    }\n+}"}, {"sha": "cd10772a52ff41f8f68fad7a8bf5fcf287653f45", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -7,35 +7,10 @@ unsafe fn foo(z: *mut usize) -> u32 {\n     99\n }\n \n+// EMIT_MIR rustc.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = [42, 43, 44];\n     let mut y = 1;\n     let z: *mut usize = &mut y;\n     x[y] = unsafe { foo(z) };\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n-//     bb0: {\n-//         ...\n-//         _4 = &mut _2;\n-//         _3 = &raw mut (*_4);\n-//         ...\n-//         _6 = _3;\n-//         _5 = const foo(move _6) -> bb1;\n-//     }\n-//\n-//     bb1: {\n-//         ...\n-//         _7 = _2;\n-//         _8 = Len(_1);\n-//         _9 = Lt(_7, _8);\n-//         assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2;\n-//     }\n-//\n-//     bb2: {\n-//         _1[_7] = move _5;\n-//         ...\n-//         return;\n-//     }\n-// END rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "6b77a5b80c4508042306991239e7b8e08dcd2e92", "filename": "src/test/mir-opt/array-index-is-temporary/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,91 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:11:11: 11:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:12:9: 12:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:15:12: 15:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:15:25: 15:26\n+    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:15:7: 15:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:12:9: 12:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+            let _3: *mut usize as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:14:9: 14:10\n+                scope 4 {\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array-index-is-temporary.rs:12:9: 12:14\n+        _1 = [const 42u32, const 43u32, const 44u32]; // bb0[1]: scope 0 at $DIR/array-index-is-temporary.rs:12:17: 12:29\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:12:18: 12:20\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002b))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:12:22: 12:24\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002b)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002c))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:12:26: 12:28\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        _2 = const 1usize;               // bb0[3]: scope 1 at $DIR/array-index-is-temporary.rs:13:17: 13:18\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:17: 13:18\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:10\n+        StorageLive(_4);                 // bb0[5]: scope 2 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n+        _4 = &mut _2;                    // bb0[6]: scope 2 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n+        _3 = &raw mut (*_4);             // bb0[7]: scope 2 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n+        StorageDead(_4);                 // bb0[8]: scope 2 at $DIR/array-index-is-temporary.rs:14:31: 14:32\n+        StorageLive(_5);                 // bb0[9]: scope 3 at $DIR/array-index-is-temporary.rs:15:12: 15:29\n+        StorageLive(_6);                 // bb0[10]: scope 4 at $DIR/array-index-is-temporary.rs:15:25: 15:26\n+        _6 = _3;                         // bb0[11]: scope 4 at $DIR/array-index-is-temporary.rs:15:25: 15:26\n+        _5 = const foo(move _6) -> bb1;  // bb0[12]: scope 4 at $DIR/array-index-is-temporary.rs:15:21: 15:27\n+                                         // ty::Const\n+                                         // + ty: unsafe fn(*mut usize) -> u32 {foo}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:15:21: 15:24\n+                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_6);                 // bb1[0]: scope 4 at $DIR/array-index-is-temporary.rs:15:26: 15:27\n+        StorageLive(_7);                 // bb1[1]: scope 3 at $DIR/array-index-is-temporary.rs:15:7: 15:8\n+        _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:15:7: 15:8\n+        _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+        _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+    }\n+\n+    bb2: {\n+        _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:29\n+        StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:15:28: 15:29\n+        StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:15:29: 15:30\n+        _0 = ();                         // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:11:11: 16:2\n+        StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:16:1: 16:2\n+        StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:16:1: 16:2\n+        StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:16:1: 16:2\n+        return;                          // bb2[7]: scope 0 at $DIR/array-index-is-temporary.rs:16:2: 16:2\n+    }\n+}"}, {"sha": "beaf0baf12c0ba93ec2cc80fd6bfc566a3d1c66c", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(box_syntax)]\n \n+// EMIT_MIR rustc.main.ElaborateDrops.before.mir\n fn main() {\n     let x = box S::new();\n     drop(x);\n@@ -18,60 +19,3 @@ impl Drop for S {\n         println!(\"splat!\");\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ElaborateDrops.before.mir\n-//     let mut _0: ();\n-//     let _1: std::boxed::Box<S>;\n-//     let mut _2: std::boxed::Box<S>;\n-//     let _3: ();\n-//     let mut _4: std::boxed::Box<S>;\n-//     scope 1 {\n-//         debug x => _1;\n-//     }\n-//     bb0: {\n-//         StorageLive(_1);\n-//         StorageLive(_2);\n-//         _2 = Box(S);\n-//         (*_2) = const S::new() -> [return: bb2, unwind: bb3];\n-//     }\n-//\n-//     bb1 (cleanup): {\n-//         resume;\n-//     }\n-//\n-//     bb2: {\n-//         _1 = move _2;\n-//         drop(_2) -> bb4;\n-//     }\n-//\n-//     bb3 (cleanup): {\n-//         drop(_2) -> bb1;\n-//     }\n-//\n-//     bb4: {\n-//         StorageDead(_2);\n-//         StorageLive(_3);\n-//         StorageLive(_4);\n-//         _4 = move _1;\n-//         _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7];\n-//     }\n-//\n-//     bb5: {\n-//         StorageDead(_4);\n-//         StorageDead(_3);\n-//         _0 = ();\n-//         drop(_1) -> bb8;\n-//     }\n-//     bb6 (cleanup): {\n-//         drop(_1) -> bb1;\n-//     }\n-//     bb7 (cleanup): {\n-//         drop(_4) -> bb6;\n-//     }\n-//     bb8: {\n-//         StorageDead(_1);\n-//         return;\n-//     }\n-// }\n-// END rustc.main.ElaborateDrops.before.mir"}, {"sha": "61986535dd3f948093597b2bb346eb635cbb9244", "filename": "src/test/mir-opt/box_expr/rustc.main.ElaborateDrops.before.mir", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,72 @@\n+// MIR for `main` before ElaborateDrops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:6:11: 6:11\n+    let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:7:9: 7:10\n+    let mut _2: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let _3: ();                          // in scope 0 at $DIR/box_expr.rs:8:5: 8:12\n+    let mut _4: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:8:10: 8:11\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:7:9: 7:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/box_expr.rs:7:9: 7:10\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        _2 = Box(S);                     // bb0[2]: scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // bb0[3]: scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+                                         // ty::Const\n+                                         // + ty: fn() -> S {S::new}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:7:17: 7:23\n+                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/box_expr.rs:6:1: 9:2\n+    }\n+\n+    bb2: {\n+        _1 = move _2;                    // bb2[0]: scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_2) -> bb4;                 // bb2[1]: scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_2) -> bb1;                 // bb3[0]: scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb4: {\n+        StorageDead(_2);                 // bb4[0]: scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        StorageLive(_3);                 // bb4[1]: scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        StorageLive(_4);                 // bb4[2]: scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _4 = move _1;                    // bb4[3]: scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // bb4[4]: scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+                                         // ty::Const\n+                                         // + ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:8:5: 8:9\n+                                         // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb5: {\n+        StorageDead(_4);                 // bb5[0]: scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        StorageDead(_3);                 // bb5[1]: scope 1 at $DIR/box_expr.rs:8:12: 8:13\n+        _0 = ();                         // bb5[2]: scope 0 at $DIR/box_expr.rs:6:11: 9:2\n+        drop(_1) -> bb8;                 // bb5[3]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_1) -> bb1;                 // bb6[0]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_4) -> bb6;                 // bb7[0]: scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+    }\n+\n+    bb8: {\n+        StorageDead(_1);                 // bb8[0]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        return;                          // bb8[1]: scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+    }\n+}"}, {"sha": "317e96d6f52d6ad77d12276554118d0b4650f81e", "filename": "src/test/mir-opt/byte_slice.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,15 +1,7 @@\n // compile-flags: -Z mir-opt-level=0\n \n+// EMIT_MIR rustc.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let x = b\"foo\";\n     let y = [5u8, b'x'];\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n-// ...\n-// _1 = const b\"foo\";\n-// ...\n-// _2 = [const 5u8, const 120u8];\n-// ...\n-// END rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "14be9c990bd506bfa4405bc8fd30a0fe43445f01", "filename": "src/test/mir-opt/byte_slice/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,46 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/byte_slice.rs:4:11: 4:11\n+    let _1: &[u8; 3];                    // in scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/byte_slice.rs:5:9: 5:10\n+        let _2: [u8; 2];                 // in scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/byte_slice.rs:6:9: 6:10\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n+        _1 = const b\"foo\";               // bb0[1]: scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n+                                         // ty::Const\n+                                         // + ty: &[u8; 3]\n+                                         // + val: Value(Scalar(alloc0+0))\n+                                         // mir::Constant\n+                                         // + span: $DIR/byte_slice.rs:5:13: 5:19\n+                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0+0)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n+        _2 = [const 5u8, const 120u8];   // bb0[3]: scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n+                                         // ty::Const\n+                                         // + ty: u8\n+                                         // + val: Value(Scalar(0x05))\n+                                         // mir::Constant\n+                                         // + span: $DIR/byte_slice.rs:6:14: 6:17\n+                                         // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }\n+                                         // ty::Const\n+                                         // + ty: u8\n+                                         // + val: Value(Scalar(0x78))\n+                                         // mir::Constant\n+                                         // + span: $DIR/byte_slice.rs:6:19: 6:23\n+                                         // + literal: Const { ty: u8, val: Value(Scalar(0x78)) }\n+        _0 = ();                         // bb0[4]: scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n+        StorageDead(_2);                 // bb0[5]: scope 1 at $DIR/byte_slice.rs:7:1: 7:2\n+        StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/byte_slice.rs:7:1: 7:2\n+        return;                          // bb0[7]: scope 0 at $DIR/byte_slice.rs:7:2: 7:2\n+    }\n+}\n+\n+alloc0 (size: 3, align: 1) {\n+    66 6f 6f                                        \u2502 foo\n+}"}, {"sha": "ec4438c197a0996bbb66fc1ed26001e9257ebc38", "filename": "src/test/mir-opt/combine_array_len.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,3 +1,5 @@\n+// EMIT_MIR rustc.norm2.InstCombine.diff\n+\n fn norm2(x: [f32; 2]) -> f32 {\n     let a = x[0];\n     let b = x[1];\n@@ -7,17 +9,3 @@ fn norm2(x: [f32; 2]) -> f32 {\n fn main() {\n     assert_eq!(norm2([3.0, 4.0]), 5.0*5.0);\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.norm2.InstCombine.before.mir\n-//     _4 = Len(_1);\n-//     ...\n-//     _8 = Len(_1);\n-// END rustc.norm2.InstCombine.before.mir\n-\n-// START rustc.norm2.InstCombine.after.mir\n-//     _4 = const 2usize;\n-//     ...\n-//     _8 = const 2usize;\n-// END rustc.norm2.InstCombine.after.mir"}, {"sha": "ec0b0a5709355c35cce0fe180c149124273bf7d2", "filename": "src/test/mir-opt/combine_array_len/rustc.norm2.InstCombine.diff", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2Frustc.norm2.InstCombine.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,101 @@\n+- // MIR for `norm2` before InstCombine\n++ // MIR for `norm2` after InstCombine\n+  \n+  fn norm2(_1: [f32; 2]) -> f32 {\n+      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:3:10: 3:11\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:3:26: 3:29\n+      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:4:9: 4:10\n+      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:4:15: 4:16\n+      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:5: 6:8\n+      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:5: 6:6\n+      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:7: 6:8\n+      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:11: 6:14\n+      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:11: 6:12\n+      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:14\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:4:9: 4:10\n+          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n+          scope 2 {\n+              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:5:9: 5:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/combine_array_len.rs:4:9: 4:10\n+          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/combine_array_len.rs:4:15: 4:16\n+          _3 = const 0usize;               // bb0[2]: scope 0 at $DIR/combine_array_len.rs:4:15: 4:16\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_array_len.rs:4:15: 4:16\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+-         _4 = Len(_1);                    // bb0[3]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n++         _4 = const 2usize;               // bb0[3]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/combine_array_len.rs:4:13: 4:17\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+          _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+      }\n+  \n+      bb1: {\n+          _2 = _1[_3];                     // bb1[0]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/combine_array_len.rs:4:17: 4:18\n+          StorageLive(_6);                 // bb1[2]: scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n+          StorageLive(_7);                 // bb1[3]: scope 1 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _7 = const 1usize;               // bb1[4]: scope 1 at $DIR/combine_array_len.rs:5:15: 5:16\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_array_len.rs:5:15: 5:16\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+-         _8 = Len(_1);                    // bb1[5]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _8 = const 2usize;               // bb1[5]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+          _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n+      }\n+  \n+      bb2: {\n+          _6 = _1[_7];                     // bb2[0]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageDead(_7);                 // bb2[1]: scope 1 at $DIR/combine_array_len.rs:5:17: 5:18\n+          StorageLive(_10);                // bb2[2]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:8\n+          StorageLive(_11);                // bb2[3]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:6\n+          _11 = _2;                        // bb2[4]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:6\n+          StorageLive(_12);                // bb2[5]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n+          _12 = _2;                        // bb2[6]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n+          _10 = Mul(move _11, move _12);   // bb2[7]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:8\n+          StorageDead(_12);                // bb2[8]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n+          StorageDead(_11);                // bb2[9]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n+          StorageLive(_13);                // bb2[10]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:14\n+          StorageLive(_14);                // bb2[11]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:12\n+          _14 = _6;                        // bb2[12]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:12\n+          StorageLive(_15);                // bb2[13]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n+          _15 = _6;                        // bb2[14]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n+          _13 = Mul(move _14, move _15);   // bb2[15]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:14\n+          StorageDead(_15);                // bb2[16]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n+          StorageDead(_14);                // bb2[17]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n+          _0 = Add(move _10, move _13);    // bb2[18]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:14\n+          StorageDead(_13);                // bb2[19]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n+          StorageDead(_10);                // bb2[20]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n+          StorageDead(_6);                 // bb2[21]: scope 1 at $DIR/combine_array_len.rs:7:1: 7:2\n+          StorageDead(_2);                 // bb2[22]: scope 0 at $DIR/combine_array_len.rs:7:1: 7:2\n+          return;                          // bb2[23]: scope 0 at $DIR/combine_array_len.rs:7:2: 7:2\n+      }\n+  }\n+  "}, {"sha": "b5db5497d4823828678a1f7d29457abf23805887", "filename": "src/test/mir-opt/copy_propagation.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,3 +1,5 @@\n+// EMIT_MIR rustc.test.CopyPropagation.diff\n+\n fn test(x: u32) -> u32 {\n     let y = x;\n     y\n@@ -7,23 +9,3 @@ fn main() {\n     // Make sure the function actually gets instantiated.\n     test(0);\n }\n-\n-// END RUST SOURCE\n-// START rustc.test.CopyPropagation.before.mir\n-//  bb0: {\n-//      ...\n-//      _2 = _1;\n-//      ...\n-//      _0 = _2;\n-//      ...\n-//      return;\n-//  }\n-// END rustc.test.CopyPropagation.before.mir\n-// START rustc.test.CopyPropagation.after.mir\n-//  bb0: {\n-//      ...\n-//      _0 = _1;\n-//      ...\n-//      return;\n-//  }\n-// END rustc.test.CopyPropagation.after.mir"}, {"sha": "4e9d4c56cd6efc85c5594162d2a0d39adeafde08", "filename": "src/test/mir-opt/copy_propagation/rustc.test.CopyPropagation.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation%2Frustc.test.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation%2Frustc.test.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation%2Frustc.test.CopyPropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `test` before CopyPropagation\n++ // MIR for `test` after CopyPropagation\n+  \n+  fn test(_1: u32) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation.rs:3:9: 3:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/copy_propagation.rs:3:20: 3:23\n+      let _2: u32;                         // in scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/copy_propagation.rs:4:9: 4:10\n++         debug y => _1;                   // in scope 1 at $DIR/copy_propagation.rs:4:9: 4:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n+-         _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n+-         _0 = _2;                         // bb0[2]: scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n+-         StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n++         nop;                             // bb0[0]: scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n++         nop;                             // bb0[1]: scope 0 at $DIR/copy_propagation.rs:4:13: 4:14\n++         _0 = _1;                         // bb0[2]: scope 1 at $DIR/copy_propagation.rs:5:5: 5:6\n++         nop;                             // bb0[3]: scope 0 at $DIR/copy_propagation.rs:6:1: 6:2\n+          return;                          // bb0[4]: scope 0 at $DIR/copy_propagation.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "c4858be7f2b8cecb43e30e2ec069543aa1b01d1b", "filename": "src/test/mir-opt/copy_propagation_arg.rs", "status": "modified", "additions": 4, "deletions": 97, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -5,21 +5,25 @@ fn dummy(x: u8) -> u8 {\n     x\n }\n \n+// EMIT_MIR rustc.foo.CopyPropagation.diff\n fn foo(mut x: u8) {\n     // calling `dummy` to make an use of `x` that copyprop cannot eliminate\n     x = dummy(x); // this will assign a local to `x`\n }\n \n+// EMIT_MIR rustc.bar.CopyPropagation.diff\n fn bar(mut x: u8) {\n     dummy(x);\n     x = 5;\n }\n \n+// EMIT_MIR rustc.baz.CopyPropagation.diff\n fn baz(mut x: i32) {\n     // self-assignment to a function argument should be eliminated\n     x = x;\n }\n \n+// EMIT_MIR rustc.arg_src.CopyPropagation.diff\n fn arg_src(mut x: i32) -> i32 {\n     let y = x;\n     x = 123; // Don't propagate this assignment to `y`\n@@ -33,100 +37,3 @@ fn main() {\n     baz(0);\n     arg_src(0);\n }\n-\n-// END RUST SOURCE\n-// START rustc.foo.CopyPropagation.before.mir\n-// bb0: {\n-//     ...\n-//     _3 = _1;\n-//     _2 = const dummy(move _3) -> bb1;\n-// }\n-// bb1: {\n-//     ...\n-//     _1 = move _2;\n-//     ...\n-// }\n-// END rustc.foo.CopyPropagation.before.mir\n-// START rustc.foo.CopyPropagation.after.mir\n-// bb0: {\n-//     ...\n-//     _3 = _1;\n-//     _2 = const dummy(move _3) -> bb1;\n-// }\n-// bb1: {\n-//     ...\n-//     _1 = move _2;\n-//     ...\n-// }\n-// END rustc.foo.CopyPropagation.after.mir\n-// START rustc.bar.CopyPropagation.before.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     StorageLive(_3);\n-//     _3 = _1;\n-//     _2 = const dummy(move _3) -> bb1;\n-// }\n-// bb1: {\n-//     StorageDead(_3);\n-//     StorageDead(_2);\n-//     _1 = const 5u8;\n-//     ...\n-//     return;\n-// }\n-// END rustc.bar.CopyPropagation.before.mir\n-// START rustc.bar.CopyPropagation.after.mir\n-// bb0: {\n-//     ...\n-//     _3 = _1;\n-//     _2 = const dummy(move _3) -> bb1;\n-// }\n-// bb1: {\n-//     ...\n-//     _1 = const 5u8;\n-//     ...\n-//     return;\n-// }\n-// END rustc.bar.CopyPropagation.after.mir\n-// START rustc.baz.CopyPropagation.before.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     _2 = _1;\n-//     _1 = move _2;\n-//     StorageDead(_2);\n-//     ...\n-//     return;\n-// }\n-// END rustc.baz.CopyPropagation.before.mir\n-// START rustc.baz.CopyPropagation.after.mir\n-// bb0: {\n-//     ...\n-//     _2 = _1;\n-//     _1 = move _2;\n-//     ...\n-//     return;\n-// }\n-// END rustc.baz.CopyPropagation.after.mir\n-// START rustc.arg_src.CopyPropagation.before.mir\n-// bb0: {\n-//      ...\n-//      _2 = _1;\n-//      ...\n-//      _1 = const 123i32;\n-//      ...\n-//      _0 = _2;\n-//      ...\n-//      return;\n-//  }\n-// END rustc.arg_src.CopyPropagation.before.mir\n-// START rustc.arg_src.CopyPropagation.after.mir\n-// bb0: {\n-//     ...\n-//     _2 = _1;\n-//     ...\n-//     _1 = const 123i32;\n-//     ...\n-//     _0 = _2;\n-//     ...\n-//     return;\n-// }\n-// END rustc.arg_src.CopyPropagation.after.mir"}, {"sha": "db3f588d999875176f4c8da85778245b1b1acdf7", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.arg_src.CopyPropagation.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.arg_src.CopyPropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `arg_src` before CopyPropagation\n++ // MIR for `arg_src` after CopyPropagation\n+  \n+  fn arg_src(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:27:12: 27:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:27:27: 27:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+      scope 1 {\n+          debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+          _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n+          _1 = const 123i32;               // bb0[2]: scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000007b))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:29:5: 29:12\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000007b)) }\n+          _0 = _2;                         // bb0[3]: scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n+          StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n+          return;                          // bb0[5]: scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2\n+      }\n+  }\n+  "}, {"sha": "8bdc91109b30fa7f21b01e4766e708e08f84289e", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.bar.CopyPropagation.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `bar` before CopyPropagation\n++ // MIR for `bar` after CopyPropagation\n+  \n+  fn bar(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:15:8: 15:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:15:19: 15:19\n+      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n+          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n+          _3 = _1;                         // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n+          _2 = const dummy(move _3) -> bb1; // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n+                                           // ty::Const\n+                                           // + ty: fn(u8) -> u8 {dummy}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n+          StorageDead(_2);                 // bb1[1]: scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n+          _1 = const 5u8;                  // bb1[2]: scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x05))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }\n+          nop;                             // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n+          return;                          // bb1[4]: scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n+      }\n+  }\n+  "}, {"sha": "10f2a98b206184c7ec4ddded55110f43f377f866", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.baz.CopyPropagation.diff", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,18 @@\n+- // MIR for `baz` before CopyPropagation\n++ // MIR for `baz` after CopyPropagation\n+  \n+  fn baz(_1: i32) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:21:8: 21:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:21:20: 21:20\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          _1 = move _2;                    // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n+          StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          nop;                             // bb0[4]: scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n+          return;                          // bb0[5]: scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n+      }\n+  }\n+  "}, {"sha": "a47880c540e2e8c14f247196c5e7511065b95f51", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.foo.CopyPropagation.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `foo` before CopyPropagation\n++ // MIR for `foo` after CopyPropagation\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:9:8: 9:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:9:19: 9:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n+          _3 = _1;                         // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n+          _2 = const dummy(move _3) -> bb1; // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+                                           // ty::Const\n+                                           // + ty: fn(u8) -> u8 {dummy}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+          _1 = move _2;                    // bb1[1]: scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+          nop;                             // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n+          return;                          // bb1[4]: scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "9004a6312910070b6c3cd939319c315f74dfcdac", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -4,6 +4,7 @@ struct Baz {\n     z: bool,\n }\n \n+// EMIT_MIR rustc.bar.Deaggregator.diff\n fn bar(a: usize) -> Baz {\n     Baz { x: a, y: 0.0, z: false }\n }\n@@ -12,27 +13,3 @@ fn main() {\n     // Make sure the function actually gets instantiated.\n     bar(0);\n }\n-\n-// END RUST SOURCE\n-// START rustc.bar.Deaggregator.before.mir\n-// bb0: {\n-//     ...\n-//     _2 = _1;\n-//     ...\n-//     _0 = Baz { x: move _2, y: const 0f32, z: const false };\n-//     ...\n-//     return;\n-// }\n-// END rustc.bar.Deaggregator.before.mir\n-// START rustc.bar.Deaggregator.after.mir\n-// bb0: {\n-//     ...\n-//     _2 = _1;\n-//     ...\n-//     (_0.0: usize) = move _2;\n-//     (_0.1: f32) = const 0f32;\n-//     (_0.2: bool) = const false;\n-//     ...\n-//     return;\n-// }\n-// END rustc.bar.Deaggregator.after.mir"}, {"sha": "082f05a50c10bf47b0047f0c47b6aba51f087ffa", "filename": "src/test/mir-opt/deaggregator_test/rustc.bar.Deaggregator.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test%2Frustc.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test%2Frustc.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test%2Frustc.bar.Deaggregator.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `bar` before Deaggregator\n++ // MIR for `bar` after Deaggregator\n+  \n+  fn bar(_1: usize) -> Baz {\n+      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test.rs:8:8: 8:9\n+      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test.rs:8:21: 8:24\n+      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n+          _2 = _1;                         // bb0[1]: scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n+-         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // bb0[2]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         (_0.0: usize) = move _2;         // bb0[2]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n++         (_0.1: f32) = const 0f32;        // bb0[3]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n+                                           // ty::Const\n+                                           // + ty: f32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/deaggregator_test.rs:9:20: 9:23\n+                                           // + literal: Const { ty: f32, val: Value(Scalar(0x00000000)) }\n++         (_0.2: bool) = const false;      // bb0[4]: scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/deaggregator_test.rs:9:28: 9:33\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+-         StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n+-         return;                          // bb0[4]: scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n++         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n++         return;                          // bb0[6]: scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n+      }\n+  }\n+  "}, {"sha": "e74eafd011fe398e0c6fe6fa509307477424fc02", "filename": "src/test/mir-opt/deaggregator_test_enum.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -3,6 +3,7 @@ enum Baz {\n     Foo { x: usize },\n }\n \n+// EMIT_MIR rustc.bar.Deaggregator.diff\n fn bar(a: usize) -> Baz {\n     Baz::Foo { x: a }\n }\n@@ -14,24 +15,3 @@ fn main() {\n         Baz::Foo { x } => println!(\"{}\", x),\n     };\n }\n-\n-// END RUST SOURCE\n-// START rustc.bar.Deaggregator.before.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     _2 = _1;\n-//     _0 = Baz::Foo { x: move _2 };\n-//     StorageDead(_2);\n-//     return;\n-// }\n-// END rustc.bar.Deaggregator.before.mir\n-// START rustc.bar.Deaggregator.after.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     _2 = _1;\n-//     ((_0 as Foo).0: usize) = move _2;\n-//     discriminant(_0) = 1;\n-//     StorageDead(_2);\n-//     return;\n-// }\n-// END rustc.bar.Deaggregator.after.mir"}, {"sha": "b1839ef7e0e16cf57ed23320a17f44bfb0388a85", "filename": "src/test/mir-opt/deaggregator_test_enum/rustc.bar.Deaggregator.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum%2Frustc.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum%2Frustc.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum%2Frustc.bar.Deaggregator.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `bar` before Deaggregator\n++ // MIR for `bar` after Deaggregator\n+  \n+  fn bar(_1: usize) -> Baz {\n+      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test_enum.rs:7:8: 7:9\n+      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test_enum.rs:7:21: 7:24\n+      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n+          _2 = _1;                         // bb0[1]: scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n+-         _0 = Baz::Foo { x: move _2 };    // bb0[2]: scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n+-         StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22\n+-         return;                          // bb0[4]: scope 0 at $DIR/deaggregator_test_enum.rs:9:2: 9:2\n++         ((_0 as Foo).0: usize) = move _2; // bb0[2]: scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n++         discriminant(_0) = 1;            // bb0[3]: scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n++         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22\n++         return;                          // bb0[5]: scope 0 at $DIR/deaggregator_test_enum.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "d5201ed72a8d957a25ace7453e151994d855e859", "filename": "src/test/mir-opt/deaggregator_test_enum_2.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -5,6 +5,7 @@ enum Foo {\n     B(i32),\n }\n \n+// EMIT_MIR rustc.test1.Deaggregator.diff\n fn test1(x: bool, y: i32) -> Foo {\n     if x {\n         Foo::A(y)\n@@ -17,40 +18,3 @@ fn main() {\n     // Make sure the function actually gets instantiated.\n     test1(false, 0);\n }\n-\n-// END RUST SOURCE\n-// START rustc.test1.Deaggregator.before.mir\n-//  bb1: {\n-//      StorageLive(_5);\n-//      _5 = _2;\n-//      _0 = Foo::B(move _5,);\n-//      StorageDead(_5);\n-//      goto -> bb3;\n-//  }\n-//  bb2: {\n-//      StorageLive(_4);\n-//      _4 = _2;\n-//      _0 = Foo::A(move _4,);\n-//      StorageDead(_4);\n-//      goto -> bb3;\n-//  }\n-// END rustc.test1.Deaggregator.before.mir\n-// START rustc.test1.Deaggregator.after.mir\n-//  bb1: {\n-//      StorageLive(_5);\n-//      _5 = _2;\n-//      ((_0 as B).0: i32) = move _5;\n-//      discriminant(_0) = 1;\n-//      StorageDead(_5);\n-//      goto -> bb3;\n-//  }\n-//  bb2: {\n-//      StorageLive(_4);\n-//      _4 = _2;\n-//      ((_0 as A).0: i32) = move _4;\n-//      discriminant(_0) = 0;\n-//      StorageDead(_4);\n-//      goto -> bb3;\n-//  }\n-// END rustc.test1.Deaggregator.after.mir\n-//"}, {"sha": "a72a679b2090ce3904fab2607743d68177d86de1", "filename": "src/test/mir-opt/deaggregator_test_enum_2/rustc.test1.Deaggregator.diff", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2%2Frustc.test1.Deaggregator.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,47 @@\n+- // MIR for `test1` before Deaggregator\n++ // MIR for `test1` after Deaggregator\n+  \n+  fn test1(_1: bool, _2: i32) -> Foo {\n+      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:9:10: 9:11\n+      debug y => _2;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:9:19: 9:20\n+      let mut _0: Foo;                     // return place in scope 0 at $DIR/deaggregator_test_enum_2.rs:9:30: 9:33\n+      let mut _3: bool;                    // in scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+      let mut _4: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+  \n+      bb0: {\n+          StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          _3 = _1;                         // bb0[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          switchInt(_3) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // bb1[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+          _5 = _2;                         // bb1[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+-         _0 = Foo::B(move _5,);           // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n+-         StorageDead(_5);                 // bb1[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n+-         goto -> bb3;                     // bb1[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n++         ((_0 as B).0: i32) = move _5;    // bb1[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         discriminant(_0) = 1;            // bb1[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n++         StorageDead(_5);                 // bb1[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n++         goto -> bb3;                     // bb1[5]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+      }\n+  \n+      bb2: {\n+          StorageLive(_4);                 // bb2[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+          _4 = _2;                         // bb2[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+-         _0 = Foo::A(move _4,);           // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n+-         StorageDead(_4);                 // bb2[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n+-         goto -> bb3;                     // bb2[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n++         ((_0 as A).0: i32) = move _4;    // bb2[2]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         discriminant(_0) = 0;            // bb2[3]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         StorageDead(_4);                 // bb2[4]: scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n++         goto -> bb3;                     // bb2[5]: scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_3);                 // bb3[0]: scope 0 at $DIR/deaggregator_test_enum_2.rs:15:1: 15:2\n+          return;                          // bb3[1]: scope 0 at $DIR/deaggregator_test_enum_2.rs:15:2: 15:2\n+      }\n+  }\n+  "}, {"sha": "824a970ce2fd3ffe57e259f43606cb15aa7f2a17", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -5,6 +5,7 @@ enum Foo {\n     B,\n }\n \n+// EMIT_MIR rustc.test.Deaggregator.diff\n fn test(x: i32) -> [Foo; 2] {\n     [Foo::A(x), Foo::A(x)]\n }\n@@ -13,37 +14,3 @@ fn main() {\n     // Make sure the function actually gets instantiated.\n     test(0);\n }\n-\n-// END RUST SOURCE\n-// START rustc.test.Deaggregator.before.mir\n-// bb0: {\n-//     ...\n-//     _3 = _1;\n-//     ...\n-//     _2 = Foo::A(move _3,);\n-//     ...\n-//     _5 = _1;\n-//     _4 = Foo::A(move _5,);\n-//     ...\n-//     _0 = [move _2, move _4];\n-//     ...\n-//     return;\n-// }\n-// END rustc.test.Deaggregator.before.mir\n-// START rustc.test.Deaggregator.after.mir\n-// bb0: {\n-//     ...\n-//     _3 = _1;\n-//     ...\n-//     ((_2 as A).0: i32) = move _3;\n-//     discriminant(_2) = 0;\n-//     ...\n-//     _5 = _1;\n-//     ((_4 as A).0: i32) = move _5;\n-//     discriminant(_4) = 0;\n-//     ...\n-//     _0 = [move _2, move _4];\n-//     ...\n-//     return;\n-// }\n-// END rustc.test.Deaggregator.after.mir"}, {"sha": "126dfc1ac91a6fc70a8d12f066272179dfcd4f63", "filename": "src/test/mir-opt/deaggregator_test_multiple/rustc.test.Deaggregator.diff", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple%2Frustc.test.Deaggregator.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,42 @@\n+- // MIR for `test` before Deaggregator\n++ // MIR for `test` after Deaggregator\n+  \n+  fn test(_1: i32) -> [Foo; 2] {\n+      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_multiple.rs:9:9: 9:10\n+      let mut _0: [Foo; 2];                // return place in scope 0 at $DIR/deaggregator_test_multiple.rs:9:20: 9:28\n+      let mut _2: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n+      let mut _3: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n+      let mut _4: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n+      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n+          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n+          _3 = _1;                         // bb0[2]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n+-         _2 = Foo::A(move _3,);           // bb0[3]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n+-         StorageDead(_3);                 // bb0[4]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n+-         StorageLive(_4);                 // bb0[5]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n+-         StorageLive(_5);                 // bb0[6]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n+-         _5 = _1;                         // bb0[7]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n+-         _4 = Foo::A(move _5,);           // bb0[8]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n+-         StorageDead(_5);                 // bb0[9]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n+-         _0 = [move _2, move _4];         // bb0[10]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n+-         StorageDead(_4);                 // bb0[11]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n+-         StorageDead(_2);                 // bb0[12]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n+-         return;                          // bb0[13]: scope 0 at $DIR/deaggregator_test_multiple.rs:11:2: 11:2\n++         ((_2 as A).0: i32) = move _3;    // bb0[3]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n++         discriminant(_2) = 0;            // bb0[4]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n++         StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n++         StorageLive(_4);                 // bb0[6]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         StorageLive(_5);                 // bb0[7]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n++         _5 = _1;                         // bb0[8]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n++         ((_4 as A).0: i32) = move _5;    // bb0[9]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         discriminant(_4) = 0;            // bb0[10]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n++         StorageDead(_5);                 // bb0[11]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n++         _0 = [move _2, move _4];         // bb0[12]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n++         StorageDead(_4);                 // bb0[13]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n++         StorageDead(_2);                 // bb0[14]: scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n++         return;                          // bb0[15]: scope 0 at $DIR/deaggregator_test_multiple.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "9fce7928f6a97a04d89eb7a4f781be2c258449d3", "filename": "src/test/mir-opt/exponential-or.rs", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fexponential-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fexponential-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,9 +1,8 @@\n // Test that simple or-patterns don't get expanded to exponentially large CFGs\n \n-// ignore-tidy-linelength\n-\n #![feature(or_patterns)]\n \n+// EMIT_MIR rustc.match_tuple.SimplifyCfg-initial.after.mir\n fn match_tuple(x: (u32, bool, Option<i32>, u32)) -> u32 {\n     match x {\n         (y @ (1 | 4), true | false, Some(1 | 8) | None, z @ (6..=9 | 13..=16)) => y ^ z,\n@@ -12,65 +11,3 @@ fn match_tuple(x: (u32, bool, Option<i32>, u32)) -> u32 {\n }\n \n fn main() {}\n-\n-// END RUST SOURCE\n-\n-// START rustc.match_tuple.SimplifyCfg-initial.after.mir\n-// scope 1 {\n-//     debug y => _7;\n-//     debug z => _8;\n-// }\n-// bb0: {\n-//     FakeRead(ForMatchedPlace, _1);\n-//     switchInt((_1.0: u32)) -> [1u32: bb2, 4u32: bb2, otherwise: bb1];\n-// }\n-// bb1: {\n-//     _0 = const 0u32;\n-//     goto -> bb10;\n-// }\n-// bb2: {\n-//     _2 = discriminant((_1.2: std::option::Option<i32>));\n-//     switchInt(move _2) -> [0isize: bb4, 1isize: bb3, otherwise: bb1];\n-// }\n-// bb3: {\n-//     switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1i32: bb4, 8i32: bb4, otherwise: bb1];\n-// }\n-// bb4: {\n-//     _5 = Le(const 6u32, (_1.3: u32));\n-//     switchInt(move _5) -> [false: bb6, otherwise: bb5];\n-// }\n-// bb5: {\n-//     _6 = Le((_1.3: u32), const 9u32);\n-//     switchInt(move _6) -> [false: bb6, otherwise: bb8];\n-// }\n-// bb6: {\n-//     _3 = Le(const 13u32, (_1.3: u32));\n-//     switchInt(move _3) -> [false: bb1, otherwise: bb7];\n-// }\n-// bb7: {\n-//     _4 = Le((_1.3: u32), const 16u32);\n-//     switchInt(move _4) -> [false: bb1, otherwise: bb8];\n-// }\n-// bb8: {\n-//     falseEdges -> [real: bb9, imaginary: bb1];\n-// }\n-// bb9: {\n-//     StorageLive(_7);\n-//     _7 = (_1.0: u32);\n-//     StorageLive(_8);\n-//     _8 = (_1.3: u32);\n-//     StorageLive(_9);\n-//     _9 = _7;\n-//     StorageLive(_10);\n-//     _10 = _8;\n-//     _0 = BitXor(move _9, move _10);\n-//     StorageDead(_10);\n-//     StorageDead(_9);\n-//     StorageDead(_8);\n-//     StorageDead(_7);\n-//     goto -> bb10;\n-// }\n-// bb10: {\n-//     return;\n-// }\n-// END rustc.match_tuple.SimplifyCfg-initial.after.mir"}, {"sha": "192ec1bbe2187e48dfed2fe7776bccd17725043b", "filename": "src/test/mir-opt/exponential-or/rustc.match_tuple.SimplifyCfg-initial.after.mir", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or%2Frustc.match_tuple.SimplifyCfg-initial.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,113 @@\n+// MIR for `match_tuple` after SimplifyCfg-initial\n+\n+fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:6:16: 6:17\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:6:53: 6:56\n+    let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+    let mut _3: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+    let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+    let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+    let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n+    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n+    let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:8:83: 8:84\n+    let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:8:87: 8:88\n+    scope 1 {\n+        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:8:10: 8:21\n+        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:8:57: 8:78\n+    }\n+\n+    bb0: {\n+        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/exponential-or.rs:7:11: 7:12\n+        switchInt((_1.0: u32)) -> [1u32: bb2, 4u32: bb2, otherwise: bb1]; // bb0[1]: scope 0 at $DIR/exponential-or.rs:8:15: 8:16\n+    }\n+\n+    bb1: {\n+        _0 = const 0u32;                 // bb1[0]: scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/exponential-or.rs:9:14: 9:15\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+        goto -> bb10;                    // bb1[1]: scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n+    }\n+\n+    bb2: {\n+        _2 = discriminant((_1.2: std::option::Option<i32>)); // bb2[0]: scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+        switchInt(move _2) -> [0isize: bb4, 1isize: bb3, otherwise: bb1]; // bb2[1]: scope 0 at $DIR/exponential-or.rs:8:37: 8:48\n+    }\n+\n+    bb3: {\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1i32: bb4, 8i32: bb4, otherwise: bb1]; // bb3[0]: scope 0 at $DIR/exponential-or.rs:8:42: 8:43\n+    }\n+\n+    bb4: {\n+        _5 = Le(const 6u32, (_1.3: u32)); // bb4[0]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000006))\n+                                         // mir::Constant\n+                                         // + span: $DIR/exponential-or.rs:8:62: 8:67\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000006)) }\n+        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // bb4[1]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+    }\n+\n+    bb5: {\n+        _6 = Le((_1.3: u32), const 9u32); // bb5[0]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000009))\n+                                         // mir::Constant\n+                                         // + span: $DIR/exponential-or.rs:8:62: 8:67\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000009)) }\n+        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // bb5[1]: scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n+    }\n+\n+    bb6: {\n+        _3 = Le(const 13u32, (_1.3: u32)); // bb6[0]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000000d))\n+                                         // mir::Constant\n+                                         // + span: $DIR/exponential-or.rs:8:70: 8:77\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000000d)) }\n+        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // bb6[1]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+    }\n+\n+    bb7: {\n+        _4 = Le((_1.3: u32), const 16u32); // bb7[0]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000010))\n+                                         // mir::Constant\n+                                         // + span: $DIR/exponential-or.rs:8:70: 8:77\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000010)) }\n+        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // bb7[1]: scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n+    }\n+\n+    bb8: {\n+        falseEdges -> [real: bb9, imaginary: bb1]; // bb8[0]: scope 0 at $DIR/exponential-or.rs:8:9: 8:79\n+    }\n+\n+    bb9: {\n+        StorageLive(_7);                 // bb9[0]: scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n+        _7 = (_1.0: u32);                // bb9[1]: scope 0 at $DIR/exponential-or.rs:8:10: 8:21\n+        StorageLive(_8);                 // bb9[2]: scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n+        _8 = (_1.3: u32);                // bb9[3]: scope 0 at $DIR/exponential-or.rs:8:57: 8:78\n+        StorageLive(_9);                 // bb9[4]: scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n+        _9 = _7;                         // bb9[5]: scope 1 at $DIR/exponential-or.rs:8:83: 8:84\n+        StorageLive(_10);                // bb9[6]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        _10 = _8;                        // bb9[7]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        _0 = BitXor(move _9, move _10);  // bb9[8]: scope 1 at $DIR/exponential-or.rs:8:83: 8:88\n+        StorageDead(_10);                // bb9[9]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        StorageDead(_9);                 // bb9[10]: scope 1 at $DIR/exponential-or.rs:8:87: 8:88\n+        StorageDead(_8);                 // bb9[11]: scope 0 at $DIR/exponential-or.rs:8:88: 8:89\n+        StorageDead(_7);                 // bb9[12]: scope 0 at $DIR/exponential-or.rs:8:88: 8:89\n+        goto -> bb10;                    // bb9[13]: scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n+    }\n+\n+    bb10: {\n+        return;                          // bb10[0]: scope 0 at $DIR/exponential-or.rs:11:2: 11:2\n+    }\n+}"}, {"sha": "1c3025d5e3faf4fb0bdbc84084b48018e1f39ebe", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -3,45 +3,9 @@\n // Regression test for #58892, generator drop shims should not have blocks\n // spuriously marked as cleanup\n \n+// EMIT_MIR rustc.main-{{closure}}.generator_drop.0.mir\n fn main() {\n     let gen = || {\n         yield;\n     };\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.main-{{closure}}.generator_drop.0.mir\n-// bb0: {\n-//     _7 = discriminant((*_1));\n-//     switchInt(move _7) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n-// }\n-// bb1: {\n-//     StorageDead(_4);\n-//     StorageDead(_3);\n-//     goto -> bb5;\n-// }\n-// bb2: {\n-//     return;\n-// }\n-// bb3: {\n-//     return;\n-// }\n-// bb4: {\n-//     goto -> bb6;\n-// }\n-// bb5: {\n-//     goto -> bb2;\n-// }\n-// bb6: {\n-//     goto -> bb3;\n-// }\n-// bb7: {\n-//     StorageLive(_3);\n-//     StorageLive(_4);\n-//     goto -> bb1;\n-// }\n-// bb8: {\n-//     return;\n-// }\n-// END rustc.main-{{closure}}.generator_drop.0.mir"}, {"sha": "05ed0a641afe3f375687cddc03a93a7df2285e70", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,53 @@\n+// MIR for `main::{{closure}}#0` 0 generator_drop\n+// generator_layout = GeneratorLayout { field_tys: [], variant_fields: [[], [], [], []], storage_conflicts: BitMatrix { num_rows: 0, num_columns: 0, words: [], marker: PhantomData } }\n+\n+fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:8:15: 10:6 {()}]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    let _3: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:9:9: 9:14\n+    let mut _4: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:9:9: 9:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:8:18: 8:18\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    let mut _7: isize;                   // in scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+\n+    bb0: {\n+        _7 = discriminant((*_1));        // bb0[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        switchInt(move _7) -> [0u32: bb4, 3u32: bb7, otherwise: bb8]; // bb0[1]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // bb1[0]: scope 0 at $DIR/generator-drop-cleanup.rs:9:13: 9:14\n+        StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/generator-drop-cleanup.rs:9:14: 9:15\n+        goto -> bb5;                     // bb1[2]: scope 0 at $DIR/generator-drop-cleanup.rs:10:5: 10:6\n+    }\n+\n+    bb2: {\n+        return;                          // bb2[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+\n+    bb3: {\n+        return;                          // bb3[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+\n+    bb4: {\n+        goto -> bb6;                     // bb4[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+\n+    bb5: {\n+        goto -> bb2;                     // bb5[0]: scope 0 at $DIR/generator-drop-cleanup.rs:10:5: 10:6\n+    }\n+\n+    bb6: {\n+        goto -> bb3;                     // bb6[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+\n+    bb7: {\n+        StorageLive(_3);                 // bb7[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        StorageLive(_4);                 // bb7[1]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+        goto -> bb1;                     // bb7[2]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+\n+    bb8: {\n+        return;                          // bb8[0]: scope 0 at $DIR/generator-drop-cleanup.rs:8:15: 10:6\n+    }\n+}"}, {"sha": "abfb39c77d6e97fffa4d40a61b937fb2cbeedb1f", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 86, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -17,6 +17,7 @@ struct Bar(i32);\n \n fn take<T>(_x: T) {}\n \n+// EMIT_MIR rustc.main-{{closure}}.StateTransform.before.mir\n fn main() {\n     let _gen = || {\n         let a = Foo(5);\n@@ -26,89 +27,3 @@ fn main() {\n         take(b);\n     };\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.main-{{closure}}.StateTransform.before.mir\n-// ...\n-// let _3: Foo;\n-// ...\n-// let mut _8: Foo;\n-// ...\n-// let mut _10: Bar;\n-// scope 1 {\n-//     debug a => _3;\n-//     let _4: Bar;\n-//     scope 2 {\n-//         debug b => _4;\n-//     }\n-// }\n-// bb0: {\n-//     StorageLive(_3);\n-//     _3 = Foo(const 5i32,);\n-//     StorageLive(_4);\n-//     _4 = Bar(const 6i32,);\n-//     ...\n-//     _5 = yield(move _6) -> [resume: bb2, drop: bb4];\n-// }\n-// bb1 (cleanup): {\n-//     resume;\n-// }\n-// bb2: {\n-//     ...\n-//     StorageLive(_7);\n-//     StorageLive(_8);\n-//     _8 = move _3;\n-//     _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9];\n-// }\n-// bb3 (cleanup): {\n-//     StorageDead(_3);\n-//     drop(_1) -> bb1;\n-// }\n-// bb4: {\n-//     ...\n-//     StorageDead(_4);\n-//     drop(_3) -> [return: bb5, unwind: bb3];\n-// }\n-// bb5: {\n-//     StorageDead(_3);\n-//     drop(_1) -> [return: bb6, unwind: bb1];\n-// }\n-// bb6: {\n-//     generator_drop;\n-// }\n-// bb7: {\n-//     StorageDead(_8);\n-//     StorageDead(_7);\n-//     StorageLive(_9);\n-//     StorageLive(_10);\n-//     _10 = move _4;\n-//     _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11];\n-// }\n-// bb8 (cleanup): {\n-//     StorageDead(_4);\n-//     StorageDead(_3);\n-//     drop(_1) -> bb1;\n-// }\n-// bb9 (cleanup): {\n-//     StorageDead(_8);\n-//     StorageDead(_7);\n-//     goto -> bb8;\n-// }\n-// bb10: {\n-//     StorageDead(_10);\n-//     StorageDead(_9);\n-//     ...\n-//     StorageDead(_4);\n-//     StorageDead(_3);\n-//     drop(_1) -> [return: bb12, unwind: bb1];\n-// }\n-// bb11 (cleanup): {\n-//     StorageDead(_10);\n-//     StorageDead(_9);\n-//     goto -> bb8;\n-// }\n-// bb12: {\n-//     return;\n-// }\n-// END rustc.main-{{closure}}.StateTransform.before.mir"}, {"sha": "cc22982a5155f352ac3d4fa3dfbfce6ebc7db43a", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,130 @@\n+// MIR for `main::{{closure}}#0` before StateTransform\n+\n+fn main::{{closure}}#0(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}], _2: ()) -> ()\n+yields ()\n+ {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+    scope 1 {\n+        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        scope 2 {\n+            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        _3 = Foo(const 5i32,);           // bb0[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000005))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:23:21: 23:22\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+        StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        _4 = Bar(const 6i32,);           // bb0[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000006))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:24:21: 24:22\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000006)) }\n+        StorageLive(_5);                 // bb0[4]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_6);                 // bb0[5]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _6 = ();                         // bb0[6]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // bb0[7]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+    }\n+\n+    bb2: {\n+        StorageDead(_6);                 // bb2[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // bb2[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageLive(_7);                 // bb2[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+        _8 = move _3;                    // bb2[4]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+        _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // bb2[5]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+                                         // ty::Const\n+                                         // + ty: fn(Foo) {take::<Foo>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n+                                         // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3 (cleanup): {\n+        StorageDead(_3);                 // bb3[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    }\n+\n+    bb4: {\n+        StorageDead(_6);                 // bb4[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // bb4[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb5, unwind: bb3]; // bb4[3]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_3);                 // bb5[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb6, unwind: bb1]; // bb5[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    }\n+\n+    bb6: {\n+        generator_drop;                  // bb6[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+    }\n+\n+    bb7: {\n+        StorageDead(_8);                 // bb7[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // bb7[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // bb7[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // bb7[3]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // bb7[4]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // bb7[5]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+                                         // ty::Const\n+                                         // + ty: fn(Bar) {take::<Bar>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb8 (cleanup): {\n+        StorageDead(_4);                 // bb8[0]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // bb8[1]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // bb8[2]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    }\n+\n+    bb9 (cleanup): {\n+        StorageDead(_8);                 // bb9[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // bb9[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        goto -> bb8;                     // bb9[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+    }\n+\n+    bb10: {\n+        StorageDead(_10);                // bb10[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // bb10[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = ();                         // bb10[2]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+        StorageDead(_4);                 // bb10[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // bb10[4]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb12, unwind: bb1]; // bb10[5]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    }\n+\n+    bb11 (cleanup): {\n+        StorageDead(_10);                // bb11[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // bb11[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        goto -> bb8;                     // bb11[2]: scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+    }\n+\n+    bb12: {\n+        return;                          // bb12[0]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n+    }\n+}"}, {"sha": "b537263dd1b72586455bddf0b6b8c91b3dc61ebb", "filename": "src/test/mir-opt/generator-tiny.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -13,6 +13,7 @@ impl Drop for HasDrop {\n \n fn callee() {}\n \n+// EMIT_MIR rustc.main-{{closure}}.generator_resume.0.mir\n fn main() {\n     let _gen = |_x: u8| {\n         let _d = HasDrop;\n@@ -22,13 +23,3 @@ fn main() {\n         }\n     };\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.main-{{closure}}.generator_resume.0.mir\n-// bb0: {\n-//     ...\n-//     switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6];\n-// }\n-// ...\n-// END rustc.main-{{closure}}.generator_resume.0.mir"}, {"sha": "a79f0d53f3c6d8ef5e7f5512215f49e74ae671ae", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,72 @@\n+// MIR for `main::{{closure}}#0` 0 generator_resume\n+// generator_layout = GeneratorLayout { field_tys: [HasDrop], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+\n+fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n+    debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:18:17: 18:19\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:19:13: 19:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:20:9: 23:10\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:21:13: 21:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:21:13: 21:18\n+    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:18:25: 18:25\n+    let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:18:17: 18:19\n+    let mut _11: isize;                  // in scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+    scope 1 {\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:19:13: 19:15\n+    }\n+\n+    bb0: {\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))); // bb0[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        switchInt(move _11) -> [0u32: bb1, 3u32: bb5, otherwise: bb6]; // bb0[1]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+    }\n+\n+    bb1: {\n+        _10 = move _2;                   // bb1[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        nop;                             // bb1[1]: scope 0 at $DIR/generator-tiny.rs:19:13: 19:15\n+        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop) = HasDrop; // bb1[2]: scope 0 at $DIR/generator-tiny.rs:19:18: 19:25\n+        StorageLive(_4);                 // bb1[3]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+        goto -> bb2;                     // bb1[4]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+    }\n+\n+    bb2: {\n+        StorageLive(_6);                 // bb2[0]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        StorageLive(_7);                 // bb2[1]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        _7 = ();                         // bb2[2]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7,); // bb2[3]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:18:16: 24:6 {u8, HasDrop, ()}]))) = 3; // bb2[4]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+        return;                          // bb2[5]: scope 1 at $DIR/generator-tiny.rs:21:13: 21:18\n+    }\n+\n+    bb3: {\n+        StorageDead(_7);                 // bb3[0]: scope 1 at $DIR/generator-tiny.rs:21:17: 21:18\n+        StorageDead(_6);                 // bb3[1]: scope 1 at $DIR/generator-tiny.rs:21:18: 21:19\n+        StorageLive(_8);                 // bb3[2]: scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n+        _8 = const callee() -> bb4;      // bb3[3]: scope 1 at $DIR/generator-tiny.rs:22:13: 22:21\n+                                         // ty::Const\n+                                         // + ty: fn() {callee}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-tiny.rs:22:13: 22:19\n+                                         // + literal: Const { ty: fn() {callee}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb4: {\n+        StorageDead(_8);                 // bb4[0]: scope 1 at $DIR/generator-tiny.rs:22:21: 22:22\n+        _5 = ();                         // bb4[1]: scope 1 at $DIR/generator-tiny.rs:20:14: 23:10\n+        goto -> bb2;                     // bb4[2]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n+    }\n+\n+    bb5: {\n+        StorageLive(_4);                 // bb5[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        StorageLive(_6);                 // bb5[1]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        StorageLive(_7);                 // bb5[2]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        _6 = move _2;                    // bb5[3]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+        goto -> bb3;                     // bb5[4]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+    }\n+\n+    bb6: {\n+        unreachable;                     // bb6[0]: scope 0 at $DIR/generator-tiny.rs:18:16: 24:6\n+    }\n+}"}, {"sha": "b1c0f0dd3c8303c201c70c3e182759fafdad482e", "filename": "src/test/mir-opt/graphviz.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,20 +1,5 @@\n // Test graphviz output\n // compile-flags: -Z dump-mir-graphviz\n \n-// ignore-tidy-linelength\n-\n+// EMIT_MIR rustc.main.mir_map.0.dot\n fn main() {}\n-\n-// END RUST SOURCE\n-// START rustc.main.mir_map.0.dot\n-// digraph Mir_0_3 { // The name here MUST be an ASCII identifier.\n-//     graph [fontname=\"monospace\"];\n-//     node [fontname=\"monospace\"];\n-//     edge [fontname=\"monospace\"];\n-//     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-//     bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n-//     bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n-//     bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n-//     bb0__0_3 -> bb2__0_3 [label=\"\"];\n-// }\n-// END rustc.main.mir_map.0.dot"}, {"sha": "2caef3459b85d95c2918a374b0bb56e6d2abb085", "filename": "src/test/mir-opt/graphviz/rustc.main.mir_map.0.dot", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,10 @@\n+digraph Mir_0_3 {\n+    graph [fontname=\"monospace\"];\n+    node [fontname=\"monospace\"];\n+    edge [fontname=\"monospace\"];\n+    label=<fn main() -&gt; ()<br align=\"left\"/>>;\n+    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n+    bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n+    bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+    bb0__0_3 -> bb2__0_3 [label=\"\"];\n+}"}, {"sha": "f6883ac80861e5e6200959805a089e434b1aed7f", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,5 +1,6 @@\n // check that we don't StorageDead booleans before they are used\n \n+// EMIT_MIR rustc.main.SimplifyCfg-initial.after.mir\n fn main() {\n     let mut should_break = false;\n     loop {\n@@ -9,42 +10,3 @@ fn main() {\n         should_break = true;\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-initial.after.mir\n-//     bb0: {\n-//         StorageLive(_1);\n-//         _1 = const false;\n-//         FakeRead(ForLet, _1);\n-//         goto -> bb2;\n-//     }\n-//     bb1 (cleanup): {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         falseUnwind -> [real: bb3, cleanup: bb1];\n-//     }\n-//     bb3: {\n-//         StorageLive(_3);\n-//         StorageLive(_4);\n-//         _4 = _1;\n-//         FakeRead(ForMatchedPlace, _4);\n-//         switchInt(_4) -> [false: bb5, otherwise: bb4];\n-//     }\n-//     ...\n-//     bb5: {\n-//         _3 = ();\n-//         StorageDead(_4);\n-//         StorageDead(_3);\n-//         _1 = const true;\n-//         _2 = ();\n-//         goto -> bb2;\n-//     }\n-//     bb6: {\n-//         _0 = ();\n-//         StorageDead(_4);\n-//         StorageDead(_3);\n-//         StorageDead(_1);\n-//         return;\n-//     }\n-// END rustc.main.SimplifyCfg-initial.after.mir"}, {"sha": "5144cdd3dabf30c5b8f70de4fe0ff12558a3d0df", "filename": "src/test/mir-opt/issue-38669/rustc.main.SimplifyCfg-initial.after.mir", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,69 @@\n+// MIR for `main` after SimplifyCfg-initial\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-38669.rs:4:11: 4:11\n+    let mut _1: bool;                    // in scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+    let mut _2: ();                      // in scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+    let _3: ();                          // in scope 0 at $DIR/issue-38669.rs:7:9: 9:10\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue-38669.rs:7:12: 7:24\n+    let mut _5: !;                       // in scope 0 at $DIR/issue-38669.rs:7:25: 9:10\n+    scope 1 {\n+        debug should_break => _1;        // in scope 1 at $DIR/issue-38669.rs:5:9: 5:25\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        _1 = const false;                // bb0[1]: scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-38669.rs:5:28: 5:33\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        goto -> bb2;                     // bb0[3]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+    }\n+\n+    bb2: {\n+        falseUnwind -> [real: bb3, cleanup: bb1]; // bb2[0]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    }\n+\n+    bb3: {\n+        StorageLive(_3);                 // bb3[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        StorageLive(_4);                 // bb3[1]: scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        _4 = _1;                         // bb3[2]: scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        FakeRead(ForMatchedPlace, _4);   // bb3[3]: scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        switchInt(_4) -> [false: bb5, otherwise: bb4]; // bb3[4]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+    }\n+\n+    bb4: {\n+        falseEdges -> [real: bb6, imaginary: bb5]; // bb4[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+    }\n+\n+    bb5: {\n+        _3 = ();                         // bb5[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        StorageDead(_4);                 // bb5[1]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_3);                 // bb5[2]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        _1 = const true;                 // bb5[3]: scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-38669.rs:10:24: 10:28\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _2 = ();                         // bb5[4]: scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n+        goto -> bb2;                     // bb5[5]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    }\n+\n+    bb6: {\n+        _0 = ();                         // bb6[0]: scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n+        StorageDead(_4);                 // bb6[1]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n+        StorageDead(_1);                 // bb6[3]: scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n+        return;                          // bb6[4]: scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n+    }\n+}"}, {"sha": "cc35b8785a733da20878bf29720140d3c8552b37", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -2,12 +2,15 @@\n \n // check that we don't emit multiple drop flags when they are not needed.\n \n+\n+// EMIT_MIR rustc.main.ElaborateDrops.after.mir\n fn main() {\n     let x = S.other(S.id());\n }\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n+// EMIT_MIR rustc.test.ElaborateDrops.after.mir\n pub fn test() {\n     let u = S;\n     let mut v = S;\n@@ -25,34 +28,3 @@ impl S {\n     fn id(self) -> Self { self }\n     fn other(self, s: Self) {}\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ElaborateDrops.after.mir\n-//    let mut _0: ();\n-//    let _1: ();\n-//    let mut _2: S;\n-//    let mut _3: S;\n-//    let mut _4: S;\n-//    let mut _5: bool;\n-//    scope 1 {\n-//        debug x => _1;\n-//    }\n-//    ...\n-//    bb0: {\n-// END rustc.main.ElaborateDrops.after.mir\n-// START rustc.test.ElaborateDrops.after.mir\n-//    let mut _0: ();\n-//    let _1: S;\n-//    let _3: ();\n-//    let mut _4: S;\n-//    let mut _5: S;\n-//    let mut _6: bool;\n-//    ...\n-//    debug u => _1;\n-//    ...\n-//    let mut _2: S;\n-//    ...\n-//    debug v => _2;\n-//    ...\n-//    bb0: {\n-// END rustc.test.ElaborateDrops.after.mir"}, {"sha": "0499054c329b26d0319bdc9ca65e42c68fc54867", "filename": "src/test/mir-opt/issue-41110/rustc.main.ElaborateDrops.after.mir", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,111 @@\n+// MIR for `main` after ElaborateDrops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-41110.rs:7:11: 7:11\n+    let _1: ();                          // in scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n+    let mut _2: S;                       // in scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+    let mut _3: S;                       // in scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+    let mut _4: S;                       // in scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n+    let mut _5: bool;                    // in scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/issue-41110.rs:8:9: 8:10\n+    }\n+\n+    bb0: {\n+        _5 = const false;                // bb0[0]: scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        StorageLive(_1);                 // bb0[1]: scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n+        StorageLive(_2);                 // bb0[2]: scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+        _5 = const true;                 // bb0[3]: scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:13: 8:14\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _2 = S;                          // bb0[4]: scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n+        StorageLive(_3);                 // bb0[5]: scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        StorageLive(_4);                 // bb0[6]: scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n+        _4 = S;                          // bb0[7]: scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n+        _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // bb0[8]: scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+                                         // ty::Const\n+                                         // + ty: fn(S) -> S {S::id}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:23: 8:25\n+                                         // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_4);                 // bb2[0]: scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+        _5 = const false;                // bb2[1]: scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:13: 8:28\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // bb2[2]: scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+                                         // ty::Const\n+                                         // + ty: fn(S, S) {S::other}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:15: 8:20\n+                                         // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3 (cleanup): {\n+        goto -> bb9;                     // bb3[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb3;                     // bb4[0]: scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+    }\n+\n+    bb5 (cleanup): {\n+        goto -> bb3;                     // bb5[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb6: {\n+        StorageDead(_3);                 // bb6[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // bb6[1]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:27: 8:28\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        StorageDead(_2);                 // bb6[2]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _0 = ();                         // bb6[3]: scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n+        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n+        return;                          // bb6[5]: scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_2) -> bb1;                 // bb7[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb8 (cleanup): {\n+        _5 = const false;                // bb8[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:27: 8:28\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb7;                     // bb8[1]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb9 (cleanup): {\n+        switchInt(_5) -> [false: bb1, otherwise: bb8]; // bb9[0]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+}"}, {"sha": "b6623fcd4d9496639763810923af3dcf38e52d47", "filename": "src/test/mir-opt/issue-41110/rustc.test.ElaborateDrops.after.mir", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,139 @@\n+// MIR for `test` after ElaborateDrops\n+\n+fn test() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-41110.rs:14:15: 14:15\n+    let _1: S;                           // in scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n+    let _3: ();                          // in scope 0 at $DIR/issue-41110.rs:17:5: 17:12\n+    let mut _4: S;                       // in scope 0 at $DIR/issue-41110.rs:17:10: 17:11\n+    let mut _5: S;                       // in scope 0 at $DIR/issue-41110.rs:18:9: 18:10\n+    let mut _6: bool;                    // in scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    scope 1 {\n+        debug u => _1;                   // in scope 1 at $DIR/issue-41110.rs:15:9: 15:10\n+        let mut _2: S;                   // in scope 1 at $DIR/issue-41110.rs:16:9: 16:14\n+        scope 2 {\n+            debug v => _2;               // in scope 2 at $DIR/issue-41110.rs:16:9: 16:14\n+        }\n+    }\n+\n+    bb0: {\n+        _6 = const false;                // bb0[0]: scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:15:9: 15:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        StorageLive(_1);                 // bb0[1]: scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n+        _6 = const true;                 // bb0[2]: scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:15:13: 15:14\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _1 = S;                          // bb0[3]: scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n+        StorageLive(_2);                 // bb0[4]: scope 1 at $DIR/issue-41110.rs:16:9: 16:14\n+        _2 = S;                          // bb0[5]: scope 1 at $DIR/issue-41110.rs:16:17: 16:18\n+        StorageLive(_3);                 // bb0[6]: scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n+        _4 = move _2;                    // bb0[8]: scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n+        _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // bb0[9]: scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+                                         // ty::Const\n+                                         // + ty: fn(S) {std::mem::drop::<S>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:17:5: 17:9\n+                                         // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_4);                 // bb2[0]: scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+        StorageDead(_3);                 // bb2[1]: scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n+        StorageLive(_5);                 // bb2[2]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        _6 = const false;                // bb2[3]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:18:9: 18:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _5 = move _1;                    // bb2[4]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        goto -> bb12;                    // bb2[5]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+    }\n+\n+    bb3 (cleanup): {\n+        goto -> bb15;                    // bb3[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb3;                     // bb4[0]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb5 (cleanup): {\n+        goto -> bb4;                     // bb5[0]: scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+    }\n+\n+    bb6: {\n+        goto -> bb8;                     // bb6[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    }\n+\n+    bb7 (cleanup): {\n+        goto -> bb4;                     // bb7[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    }\n+\n+    bb8: {\n+        StorageDead(_5);                 // bb8[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        _0 = ();                         // bb8[1]: scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n+        drop(_2) -> [return: bb9, unwind: bb3]; // bb8[2]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb9: {\n+        StorageDead(_2);                 // bb9[0]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb10;                    // bb9[1]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb10: {\n+        _6 = const false;                // bb10[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:19:1: 19:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        StorageDead(_1);                 // bb10[1]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        return;                          // bb10[2]: scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n+    }\n+\n+    bb11 (cleanup): {\n+        _2 = move _5;                    // bb11[0]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb7;                     // bb11[1]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+    }\n+\n+    bb12: {\n+        _2 = move _5;                    // bb12[0]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // bb12[1]: scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+    }\n+\n+    bb13 (cleanup): {\n+        drop(_1) -> bb1;                 // bb13[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb14 (cleanup): {\n+        _6 = const false;                // bb14[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:19:1: 19:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb13;                    // bb14[1]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb15 (cleanup): {\n+        switchInt(_6) -> [false: bb1, otherwise: bb14]; // bb15[0]: scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+}"}, {"sha": "4ab25fbe860b93ce5338d134bee62e561aaf28e8", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -13,7 +13,8 @@ trait Foo {\n     fn get(&self) -> [u8; 2];\n }\n \n-impl Foo for [u8; 2] {\n+// EMIT_MIR rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir\n+impl Foo for [u8; 1+1] {\n     fn get(&self) -> [u8; 2] {\n         *self\n     }"}, {"sha": "595015acbbd2fe59bda7a831382df11709a2bb6c", "filename": "src/test/mir-opt/issue-41697/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41697%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41697%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,32 @@\n+// MIR for `<impl at $DIR/issue-41697.rs:17:1: 21:2>::{{constant}}#0` after SimplifyCfg-qualify-consts\n+\n+<impl at $DIR/issue-41697.rs:17:1: 21:2>::{{constant}}#0: usize = {\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+\n+    bb0: {\n+        _1 = CheckedAdd(const 1usize, const 1usize); // bb0[0]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:17:19: 17:20\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:17:21: 17:22\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // bb0[1]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+    }\n+\n+    bb2: {\n+        _0 = move (_1.0: usize);         // bb2[0]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+        return;                          // bb2[1]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+    }\n+}"}, {"sha": "2c90f35ea6a4941731322295f6dfd47f3cb8fc7b", "filename": "src/test/mir-opt/issue-41888.rs", "status": "modified", "additions": 1, "deletions": 156, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,6 +1,7 @@\n // check that we clear the \"ADT master drop flag\" even when there are\n // no fields to be dropped.\n \n+// EMIT_MIR rustc.main.ElaborateDrops.after.mir\n fn main() {\n     let e;\n     if cond() {\n@@ -20,159 +21,3 @@ enum E {\n     F(K),\n     G(Box<E>)\n }\n-\n-// END RUST SOURCE\n-// fn main() -> () {\n-//     let mut _0: ();\n-//     scope 1 {\n-//         let _1: E;\n-//         debug e => _1;\n-//         scope 2 {\n-//             let _6: K;\n-//             debug _k => _6;\n-//         }\n-//     }\n-//     let mut _2: bool;\n-//     let mut _3: ();\n-//     let mut _4: E;\n-//     let mut _5: K;\n-//     let mut _7: isize;\n-//     let mut _8: bool; // drop flag for `e`\n-//     let mut _9: bool;\n-//     let mut _10: bool;\n-//     let mut _11: isize;\n-//     let mut _12: isize;\n-//\n-//     bb0: {\n-//         _8 = const false;\n-//         _10 = const false;\n-//         _9 = const false;\n-//         StorageLive(_1);\n-//         StorageLive(_2);\n-//         _2 = const cond() -> [return: bb3, unwind: bb2];\n-//     }\n-//\n-//     bb1: {\n-//         resume;\n-//     }\n-//\n-//     bb2: {\n-//         goto -> bb1;\n-//     }\n-//\n-//     bb3: {\n-//         switchInt(_2) -> [0u8: bb5, otherwise: bb4];\n-//     }\n-//\n-//     bb4: {\n-//         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = K::{{constructor}};\n-//         _4 = E::F(_5,);\n-//         StorageDead(_5);\n-//         goto -> bb15;\n-//     }\n-//\n-//     bb5: {\n-//         _0 = ();\n-//         goto -> bb12;\n-//     }\n-//\n-//     bb6: {\n-//         goto -> bb2;\n-//     }\n-//\n-//     bb7: {\n-//         goto -> bb8;\n-//     }\n-//\n-//     bb8: {\n-//         StorageDead(_4);\n-//         _7 = discriminant(_1);\n-//         switchInt(_7) -> [0isize: bb10, otherwise: bb9];\n-//     }\n-//\n-//     bb9: {\n-//         _0 = ();\n-//         goto -> bb11;\n-//     }\n-//\n-//     bb10: {\n-//         StorageLive(_6);\n-//         _10 = const false;\n-//         _6 = ((_1 as F).0: K);\n-//         _0 = ();\n-//         goto -> bb11;\n-//     }\n-//\n-//     bb11: {\n-//         StorageDead(_6);\n-//         goto -> bb12;\n-//     }\n-//\n-//     bb12: {\n-//         StorageDead(_2);\n-//         goto -> bb22;\n-//     }\n-//\n-//     bb13: {\n-//         StorageDead(_1);\n-//         return;\n-//     }\n-//\n-//     bb14: {\n-//         _8 = const true;\n-//         _9 = const true;\n-//         _10 = const true;\n-//         _1 = _4;\n-//         goto -> bb6;\n-//     }\n-//\n-//     bb15: {\n-//         _8 = const true;\n-//         _9 = const true;\n-//         _10 = const true;\n-//         _1 = _4;\n-//         goto -> bb7;\n-//     }\n-//\n-//     bb16: {\n-//         _8 = const false; // clear the drop flag - must always be reached\n-//         goto -> bb13;\n-//     }\n-//\n-//     bb17: {\n-//         _8 = const false;\n-//         goto -> bb1;\n-//     }\n-//\n-//     bb18: {\n-//         goto -> bb17;\n-//     }\n-//\n-//     bb19: {\n-//         drop(_1) -> [return: bb16, unwind: bb17];\n-//     }\n-//\n-//     bb20: {\n-//         drop(_1) -> bb17;\n-//     }\n-//\n-//     bb21: {\n-//         _11 = discriminant(_1);\n-//         switchInt(_11) -> [0isize: bb16, otherwise: bb19];\n-//     }\n-//\n-//     bb22: {\n-//         switchInt(_8) -> [0u8: bb16, otherwise: bb21];\n-//     }\n-//\n-//     bb23: {\n-//         _12 = discriminant(_1);\n-//         switchInt(_12) -> [0isize: bb18, otherwise: bb20];\n-//     }\n-//\n-//     bb24: {\n-//         switchInt(_8) -> [0u8: bb17, otherwise: bb23];\n-//     }\n-// }"}, {"sha": "ba2f65be3652fa6f1c764803501a7644ca95c216", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "added", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,250 @@\n+// MIR for `main` after ElaborateDrops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-41888.rs:5:11: 5:11\n+    let _1: E;                           // in scope 0 at $DIR/issue-41888.rs:6:9: 6:10\n+    let mut _2: bool;                    // in scope 0 at $DIR/issue-41888.rs:7:8: 7:14\n+    let mut _3: E;                       // in scope 0 at $DIR/issue-41888.rs:8:13: 8:20\n+    let mut _4: K;                       // in scope 0 at $DIR/issue-41888.rs:8:18: 8:19\n+    let mut _5: isize;                   // in scope 0 at $DIR/issue-41888.rs:9:16: 9:24\n+    let mut _7: bool;                    // in scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    let mut _9: bool;                    // in scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    let mut _10: isize;                  // in scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    let mut _11: isize;                  // in scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    scope 1 {\n+        debug e => _1;                   // in scope 1 at $DIR/issue-41888.rs:6:9: 6:10\n+        let _6: K;                       // in scope 1 at $DIR/issue-41888.rs:9:21: 9:23\n+        scope 2 {\n+            debug _k => _6;              // in scope 2 at $DIR/issue-41888.rs:9:21: 9:23\n+        }\n+    }\n+\n+    bb0: {\n+        _9 = const false;                // bb0[0]: scope 0 at $DIR/issue-41888.rs:6:9: 6:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:6:9: 6:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _7 = const false;                // bb0[1]: scope 0 at $DIR/issue-41888.rs:6:9: 6:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:6:9: 6:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _8 = const false;                // bb0[2]: scope 0 at $DIR/issue-41888.rs:6:9: 6:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:6:9: 6:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        StorageLive(_1);                 // bb0[3]: scope 0 at $DIR/issue-41888.rs:6:9: 6:10\n+        StorageLive(_2);                 // bb0[4]: scope 1 at $DIR/issue-41888.rs:7:8: 7:14\n+        _2 = const cond() -> [return: bb2, unwind: bb3]; // bb0[5]: scope 1 at $DIR/issue-41888.rs:7:8: 7:14\n+                                         // ty::Const\n+                                         // + ty: fn() -> bool {cond}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:7:8: 7:12\n+                                         // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-41888.rs:5:1: 14:2\n+    }\n+\n+    bb2: {\n+        switchInt(_2) -> [false: bb4, otherwise: bb5]; // bb2[0]: scope 1 at $DIR/issue-41888.rs:7:5: 13:6\n+    }\n+\n+    bb3 (cleanup): {\n+        goto -> bb1;                     // bb3[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb4: {\n+        _0 = ();                         // bb4[0]: scope 1 at $DIR/issue-41888.rs:7:5: 13:6\n+        goto -> bb11;                    // bb4[1]: scope 1 at $DIR/issue-41888.rs:7:5: 13:6\n+    }\n+\n+    bb5: {\n+        StorageLive(_3);                 // bb5[0]: scope 1 at $DIR/issue-41888.rs:8:13: 8:20\n+        StorageLive(_4);                 // bb5[1]: scope 1 at $DIR/issue-41888.rs:8:18: 8:19\n+        _4 = K;                          // bb5[2]: scope 1 at $DIR/issue-41888.rs:8:18: 8:19\n+        _3 = E::F(move _4,);             // bb5[3]: scope 1 at $DIR/issue-41888.rs:8:13: 8:20\n+        StorageDead(_4);                 // bb5[4]: scope 1 at $DIR/issue-41888.rs:8:19: 8:20\n+        goto -> bb14;                    // bb5[5]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+    }\n+\n+    bb6: {\n+        goto -> bb8;                     // bb6[0]: scope 1 at $DIR/issue-41888.rs:8:19: 8:20\n+    }\n+\n+    bb7 (cleanup): {\n+        goto -> bb3;                     // bb7[0]: scope 1 at $DIR/issue-41888.rs:8:19: 8:20\n+    }\n+\n+    bb8: {\n+        StorageDead(_3);                 // bb8[0]: scope 1 at $DIR/issue-41888.rs:8:19: 8:20\n+        _5 = discriminant(_1);           // bb8[1]: scope 1 at $DIR/issue-41888.rs:9:16: 9:24\n+        switchInt(move _5) -> [0isize: bb10, otherwise: bb9]; // bb8[2]: scope 1 at $DIR/issue-41888.rs:9:16: 9:24\n+    }\n+\n+    bb9: {\n+        _0 = ();                         // bb9[0]: scope 1 at $DIR/issue-41888.rs:9:9: 12:10\n+        goto -> bb11;                    // bb9[1]: scope 1 at $DIR/issue-41888.rs:9:9: 12:10\n+    }\n+\n+    bb10: {\n+        StorageLive(_6);                 // bb10[0]: scope 1 at $DIR/issue-41888.rs:9:21: 9:23\n+        _9 = const false;                // bb10[1]: scope 1 at $DIR/issue-41888.rs:9:21: 9:23\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:9:21: 9:23\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _6 = move ((_1 as F).0: K);      // bb10[2]: scope 1 at $DIR/issue-41888.rs:9:21: 9:23\n+        _0 = ();                         // bb10[3]: scope 2 at $DIR/issue-41888.rs:9:29: 12:10\n+        StorageDead(_6);                 // bb10[4]: scope 1 at $DIR/issue-41888.rs:12:9: 12:10\n+        goto -> bb11;                    // bb10[5]: scope 1 at $DIR/issue-41888.rs:9:9: 12:10\n+    }\n+\n+    bb11: {\n+        goto -> bb21;                    // bb11[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb12: {\n+        _7 = const false;                // bb12[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:14:1: 14:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _8 = const false;                // bb12[1]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:14:1: 14:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        _9 = const false;                // bb12[2]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:14:1: 14:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        StorageDead(_1);                 // bb12[3]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+        StorageDead(_2);                 // bb12[4]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+        return;                          // bb12[5]: scope 0 at $DIR/issue-41888.rs:14:2: 14:2\n+    }\n+\n+    bb13 (cleanup): {\n+        _7 = const true;                 // bb13[0]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _8 = const true;                 // bb13[1]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _9 = const true;                 // bb13[2]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _1 = move _3;                    // bb13[3]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+        goto -> bb7;                     // bb13[4]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+    }\n+\n+    bb14: {\n+        _7 = const true;                 // bb14[0]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _8 = const true;                 // bb14[1]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _9 = const true;                 // bb14[2]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:9: 8:10\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        _1 = move _3;                    // bb14[3]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+        goto -> bb6;                     // bb14[4]: scope 1 at $DIR/issue-41888.rs:8:9: 8:10\n+    }\n+\n+    bb15: {\n+        _7 = const false;                // bb15[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:14:1: 14:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb12;                    // bb15[1]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb16 (cleanup): {\n+        _7 = const false;                // bb16[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:14:1: 14:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb1;                     // bb16[1]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb17 (cleanup): {\n+        goto -> bb16;                    // bb17[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb18: {\n+        drop(_1) -> [return: bb15, unwind: bb16]; // bb18[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb19 (cleanup): {\n+        drop(_1) -> bb16;                // bb19[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb20: {\n+        _10 = discriminant(_1);          // bb20[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+        switchInt(move _10) -> [0isize: bb15, otherwise: bb18]; // bb20[1]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb21: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb20]; // bb21[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb22 (cleanup): {\n+        _11 = discriminant(_1);          // bb22[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+        switchInt(move _11) -> [0isize: bb17, otherwise: bb19]; // bb22[1]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+\n+    bb23 (cleanup): {\n+        switchInt(_7) -> [false: bb16, otherwise: bb22]; // bb23[0]: scope 0 at $DIR/issue-41888.rs:14:1: 14:2\n+    }\n+}"}, {"sha": "7d308980b9071947aa4f6cd5a9cc4c2c100c568c", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 1, "deletions": 79, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,6 +1,7 @@\n // We must mark a variable whose initialization fails due to an\n // abort statement as StorageDead.\n \n+// EMIT_MIR rustc.main.mir_map.0.mir\n fn main() {\n     loop {\n         let beacon = {\n@@ -12,82 +13,3 @@ fn main() {\n         drop(&beacon);\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.mir_map.0.mir\n-// fn main() -> (){\n-//     let mut _0: ();\n-//     let mut _1: ();\n-//     let _2: i32;\n-//     let mut _3: bool;\n-//     let mut _4: !;\n-//     let _5: ();\n-//     let mut _6: &i32;\n-//     scope 1 {\n-//         debug beacon => _2;\n-//     }\n-//     bb0: {\n-//         goto -> bb1;\n-//     }\n-//     bb1: {\n-//         falseUnwind -> [real: bb3, cleanup: bb4];\n-//     }\n-//     bb2: {\n-//         goto -> bb14;\n-//     }\n-//     bb3: {\n-//         StorageLive(_2);\n-//         StorageLive(_3);\n-//         _3 = const true;\n-//         FakeRead(ForMatchedPlace, _3);\n-//         switchInt(_3) -> [false: bb5, otherwise: bb6];\n-//     }\n-//     bb4 (cleanup): {\n-//         resume;\n-//     }\n-//     bb5: {\n-//         falseEdges -> [real: bb7, imaginary: bb6];\n-//     }\n-//     bb6: {\n-//         _0 = ();\n-//         goto -> bb8;\n-//     }\n-//     bb7: {\n-//         _2 = const 4i32;\n-//         goto -> bb12;\n-//     }\n-//     bb8: {\n-//         StorageDead(_3);\n-//         goto -> bb9;\n-//     }\n-//     bb9: {\n-//         StorageDead(_2);\n-//         goto -> bb2;\n-//     }\n-//     bb10: {\n-//         _4 = ();\n-//         unreachable;\n-//     }\n-//     bb11: {\n-//         goto -> bb12;\n-//     }\n-//     bb12: {\n-//         FakeRead(ForLet, _2);\n-//         StorageDead(_3);\n-//         StorageLive(_5);\n-//         StorageLive(_6);\n-//         _6 = &_2;\n-//         _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4];\n-//     }\n-//     bb13: {\n-//         StorageDead(_6);\n-//         StorageDead(_5);\n-//         _1 = ();\n-//         StorageDead(_2);\n-//         goto -> bb1;\n-//     }\n-//     bb14: {\n-//         return;\n-//     }\n-// }\n-// END rustc.main.mir_map.0.mir"}, {"sha": "03815d58bbc75ec3dbb4eaebe7976d31655e7367", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,110 @@\n+// MIR for `main` 0 mir_map\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-49232.rs:5:11: 5:11\n+    let mut _1: ();                      // in scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+    let _2: i32;                         // in scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+    let mut _3: bool;                    // in scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+    let mut _4: !;                       // in scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    let _5: ();                          // in scope 0 at $DIR/issue-49232.rs:13:9: 13:22\n+    let mut _6: &i32;                    // in scope 0 at $DIR/issue-49232.rs:13:14: 13:21\n+    scope 1 {\n+        debug beacon => _2;              // in scope 1 at $DIR/issue-49232.rs:7:13: 7:19\n+    }\n+\n+    bb0: {\n+        goto -> bb1;                     // bb0[0]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+    }\n+\n+    bb1: {\n+        falseUnwind -> [real: bb3, cleanup: bb4]; // bb1[0]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+    }\n+\n+    bb2: {\n+        goto -> bb14;                    // bb2[0]: scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n+    }\n+\n+    bb3: {\n+        StorageLive(_2);                 // bb3[0]: scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        StorageLive(_3);                 // bb3[1]: scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        _3 = const true;                 // bb3[2]: scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-49232.rs:8:19: 8:23\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        FakeRead(ForMatchedPlace, _3);   // bb3[3]: scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        switchInt(_3) -> [false: bb5, otherwise: bb6]; // bb3[4]: scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+    }\n+\n+    bb4 (cleanup): {\n+        resume;                          // bb4[0]: scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+    }\n+\n+    bb5: {\n+        falseEdges -> [real: bb7, imaginary: bb6]; // bb5[0]: scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+    }\n+\n+    bb6: {\n+        _0 = ();                         // bb6[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb8;                     // bb6[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb7: {\n+        _2 = const 4i32;                 // bb7[0]: scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-49232.rs:9:26: 9:27\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+        goto -> bb12;                    // bb7[1]: scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+    }\n+\n+    bb8: {\n+        StorageDead(_3);                 // bb8[0]: scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        goto -> bb9;                     // bb8[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb9: {\n+        StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+        goto -> bb2;                     // bb9[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb10: {\n+        _4 = ();                         // bb10[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        unreachable;                     // bb10[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb11: {\n+        goto -> bb12;                    // bb11[0]: scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+    }\n+\n+    bb12: {\n+        FakeRead(ForLet, _2);            // bb12[0]: scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        StorageDead(_3);                 // bb12[1]: scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        StorageLive(_5);                 // bb12[2]: scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        StorageLive(_6);                 // bb12[3]: scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n+        _6 = &_2;                        // bb12[4]: scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n+        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // bb12[5]: scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+                                         // ty::Const\n+                                         // + ty: fn(&i32) {std::mem::drop::<&i32>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-49232.rs:13:9: 13:13\n+                                         // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb13: {\n+        StorageDead(_6);                 // bb13[0]: scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n+        StorageDead(_5);                 // bb13[1]: scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n+        _1 = ();                         // bb13[2]: scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n+        StorageDead(_2);                 // bb13[3]: scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+        goto -> bb1;                     // bb13[4]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+    }\n+\n+    bb14: {\n+        return;                          // bb14[0]: scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n+    }\n+}"}, {"sha": "f0d57c572b343d80422d95bd0898deddb529681d", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 1, "deletions": 78, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,91 +1,14 @@\n // check that we don't forget to drop the Box if we early return before\n // initializing it\n-// ignore-tidy-linelength\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n \n+// EMIT_MIR rustc.test.ElaborateDrops.before.mir\n fn test() -> Option<Box<u32>> {\n     Some(box (None?))\n }\n \n fn main() {\n     test();\n }\n-\n-// END RUST SOURCE\n-// START rustc.test.ElaborateDrops.before.mir\n-// fn test() -> std::option::Option<std::boxed::Box<u32>> {\n-//     ...\n-//     bb0: {\n-//         StorageLive(_1);\n-//         StorageLive(_2);\n-//         _2 = Box(u32);\n-//         StorageLive(_3);\n-//         StorageLive(_4);\n-//         _4 = std::option::Option::<u32>::None;\n-//         _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3];\n-//     }\n-//     bb1 (cleanup): {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_4);\n-//         _5 = discriminant(_3);\n-//         switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5];\n-//     }\n-//     bb3 (cleanup): {\n-//         drop(_2) -> bb1;\n-//     }\n-//     bb4: {\n-//         StorageLive(_10);\n-//         _10 = ((_3 as Ok).0: u32);\n-//         (*_2) = _10;\n-//         StorageDead(_10);\n-//         _1 = move _2;\n-//         drop(_2) -> [return: bb12, unwind: bb11];\n-//     }\n-//     bb5: {\n-//         unreachable;\n-//     }\n-//     bb6: {\n-//         StorageLive(_6);\n-//         _6 = ((_3 as Err).0: std::option::NoneError);\n-//         StorageLive(_8);\n-//         StorageLive(_9);\n-//         _9 = _6;\n-//         _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3];\n-//     }\n-//     bb7: {\n-//         return;\n-//     }\n-//     bb8: {\n-//         StorageDead(_9);\n-//         _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3];\n-//     }\n-//     bb9: {\n-//         StorageDead(_8);\n-//         StorageDead(_6);\n-//         drop(_2) -> bb10;\n-//     }\n-//     bb10: {\n-//         StorageDead(_2);\n-//         StorageDead(_1);\n-//         StorageDead(_3);\n-//         goto -> bb7;\n-//     }\n-//     bb11 (cleanup): {\n-//         drop(_1) -> bb1;\n-//     }\n-//     bb12: {\n-//         StorageDead(_2);\n-//         _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1,);\n-//         drop(_1) -> bb13;\n-//     }\n-//     bb13: {\n-//         StorageDead(_1);\n-//         StorageDead(_3);\n-//         goto -> bb7;\n-//     }\n-// }\n-// END rustc.test.ElaborateDrops.before.mir"}, {"sha": "c2f91980021170e713ddb453c9c9226400e6b343", "filename": "src/test/mir-opt/issue-62289/rustc.test.ElaborateDrops.before.mir", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,127 @@\n+// MIR for `test` before ElaborateDrops\n+\n+fn test() -> std::option::Option<std::boxed::Box<u32>> {\n+    let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:8:14: 8:30\n+    let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _3: std::result::Result<u32, std::option::NoneError>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+    let mut _5: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _6: std::option::NoneError;      // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _7: !;                       // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _8: std::option::NoneError;  // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _9: std::option::NoneError;  // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _10: u32;                        // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    scope 1 {\n+        debug err => _6;                 // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n+        scope 2 {\n+        }\n+    }\n+    scope 3 {\n+        debug val => _10;                // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n+        scope 4 {\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        _2 = Box(u32);                   // bb0[2]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _4 = std::option::Option::<u32>::None; // bb0[5]: scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // bb0[6]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+                                         // ty::Const\n+                                         // + ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n+                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_4);                 // bb2[0]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _5 = discriminant(_3);           // bb2[1]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // bb2[2]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_2) -> bb1;                 // bb3[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _10 = ((_3 as Ok).0: u32);       // bb4[1]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        (*_2) = _10;                     // bb4[2]: scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageDead(_10);                // bb4[3]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _1 = move _2;                    // bb4[4]: scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        drop(_2) -> [return: bb12, unwind: bb11]; // bb4[5]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb5: {\n+        unreachable;                     // bb5[0]: scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    }\n+\n+    bb6: {\n+        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _6 = ((_3 as Err).0: std::option::NoneError); // bb6[1]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_8);                 // bb6[2]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_9);                 // bb6[3]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _9 = _6;                         // bb6[4]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // bb6[5]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+                                         // ty::Const\n+                                         // + ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:19: 9:20\n+                                         // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb7: {\n+        return;                          // bb7[0]: scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+\n+    bb8: {\n+        StorageDead(_9);                 // bb8[0]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // bb8[1]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+                                         // ty::Const\n+                                         // + ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n+                                         // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb9: {\n+        StorageDead(_8);                 // bb9[0]: scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_6);                 // bb9[1]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        drop(_2) -> bb10;                // bb9[2]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb10: {\n+        StorageDead(_2);                 // bb10[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_1);                 // bb10[1]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // bb10[2]: scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb7;                     // bb10[3]: scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    }\n+\n+    bb11 (cleanup): {\n+        drop(_1) -> bb1;                 // bb11[0]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    }\n+\n+    bb12: {\n+        StorageDead(_2);                 // bb12[0]: scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1,); // bb12[1]: scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb13;                // bb12[2]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    }\n+\n+    bb13: {\n+        StorageDead(_1);                 // bb13[0]: scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // bb13[1]: scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb7;                     // bb13[2]: scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+}"}, {"sha": "cb23a4c671b2248f4804b4ca63b536d40849b941", "filename": "src/test/mir-opt/loop_test.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -2,6 +2,7 @@\n \n // Tests to make sure we correctly generate falseUnwind edges in loops\n \n+// EMIT_MIR rustc.main.SimplifyCfg-qualify-consts.after.mir\n fn main() {\n     // Exit early at runtime. Since only care about the generated MIR\n     // and not the runtime behavior (which is exercised by other tests)\n@@ -14,31 +15,3 @@ fn main() {\n         continue;\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-qualify-consts.after.mir\n-//    ...\n-//    bb1 (cleanup): {\n-//        resume;\n-//    }\n-//    ...\n-//    bb3: { // Entry into the loop\n-//        _1 = ();\n-//        StorageDead(_2);\n-//        StorageDead(_1);\n-//        StorageLive(_4);\n-//        goto -> bb5;\n-//    }\n-//    ...\n-//    bb5: { // The loop_block\n-//        falseUnwind -> [real: bb6, cleanup: bb1];\n-//    }\n-//    bb6: { // The loop body (body_block)\n-//        StorageLive(_6);\n-//        _6 = const 1i32;\n-//        FakeRead(ForLet, _6);\n-//        StorageDead(_6);\n-//        goto -> bb5;\n-//    }\n-//    ...\n-// END rustc.main.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "c458592e920b084bf2a08047ca34cfb460844ed8", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,69 @@\n+// MIR for `main` after SimplifyCfg-qualify-consts\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loop_test.rs:6:11: 6:11\n+    let _1: ();                          // in scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    let mut _2: bool;                    // in scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+    let mut _3: !;                       // in scope 0 at $DIR/loop_test.rs:10:13: 12:6\n+    let mut _4: !;                       // in scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    let mut _5: ();                      // in scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+    let _6: i32;                         // in scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+    scope 1 {\n+        debug x => _6;                   // in scope 1 at $DIR/loop_test.rs:14:13: 14:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+        _2 = const true;                 // bb0[2]: scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/loop_test.rs:10:8: 10:12\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+        switchInt(_2) -> [false: bb3, otherwise: bb2]; // bb0[4]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    }\n+\n+    bb3: {\n+        _1 = ();                         // bb3[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        StorageDead(_2);                 // bb3[1]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageDead(_1);                 // bb3[2]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageLive(_4);                 // bb3[3]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb5;                     // bb3[4]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    }\n+\n+    bb4: {\n+        _0 = ();                         // bb4[0]: scope 0 at $DIR/loop_test.rs:11:9: 11:15\n+        StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        StorageDead(_1);                 // bb4[2]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n+        return;                          // bb4[3]: scope 0 at $DIR/loop_test.rs:17:2: 17:2\n+    }\n+\n+    bb5: {\n+        falseUnwind -> [real: bb6, cleanup: bb1]; // bb5[0]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    }\n+\n+    bb6: {\n+        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        _6 = const 1i32;                 // bb6[1]: scope 0 at $DIR/loop_test.rs:14:17: 14:18\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/loop_test.rs:14:17: 14:18\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        FakeRead(ForLet, _6);            // bb6[2]: scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        StorageDead(_6);                 // bb6[3]: scope 0 at $DIR/loop_test.rs:16:5: 16:6\n+        goto -> bb5;                     // bb6[4]: scope 0 at $DIR/loop_test.rs:15:9: 15:17\n+    }\n+}"}, {"sha": "8efca2dd7abb523685204b770759c153ef2cc550", "filename": "src/test/mir-opt/match-arm-scopes.rs", "status": "modified", "additions": 2, "deletions": 196, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -8,6 +8,8 @@\n //   all of the bindings for that scope.\n // * No drop flags are used.\n \n+// EMIT_MIR rustc.complicated_match.SimplifyCfg-initial.after.mir\n+// EMIT_MIR rustc.complicated_match.ElaborateDrops.after.mir\n fn complicated_match(cond: bool, items: (bool, bool, String)) -> i32 {\n     match items {\n         (false, a, s) | (a, false, s) if if cond { return 3 } else { a } => 1,\n@@ -31,199 +33,3 @@ fn main() {\n         assert_eq!(complicated_match(cond, (items_1, items_2, String::new())), result,);\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.complicated_match.SimplifyCfg-initial.after.mir\n-// let mut _0: i32;\n-// let mut _3: &bool;                   // Temp for fake borrow of `items.0`\n-// let mut _4: &bool;                   // Temp for fake borrow of `items.1`\n-// let _5: bool;                        // `a` in arm\n-// let _6: &bool;                       // `a` in guard\n-// let _7: std::string::String;         // `s` in arm\n-// let _8: &std::string::String;        // `s` in guard\n-// let mut _9: bool;                    // `if cond { return 3 } else { a }`\n-// let mut _10: bool;                   // `cond`\n-// let mut _11: !;                      // `return 3`\n-// let mut _12: bool;                   // `if cond { return 3 } else { a }`\n-// let mut _13: bool;                   // `cond`\n-// let mut _14: !;                      // `return 3`\n-// let _15: bool;                       // `b`\n-// let _16: std::string::String;        // `t`\n-// scope 1 {\n-//     debug a => _5;\n-//     debug a => _6;\n-//     debug s => _7;\n-//     debug s => _8;\n-// }\n-// scope 2 {\n-//     debug b => _15;\n-//     debug t => _16;\n-// }\n-// bb0: {\n-//     FakeRead(ForMatchedPlace, _2);\n-//     switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3];\n-// }\n-// bb1 (cleanup): {\n-//     resume;\n-// }\n-// bb2: {                               // pre-binding for arm 1 first pattern\n-//     falseEdges -> [real: bb9, imaginary: bb4];\n-// }\n-// bb3: {\n-//     switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5];\n-// }\n-// bb4: {                               // pre-binding for arm 1 second pattern\n-//     falseEdges -> [real: bb18, imaginary: bb6];\n-// }\n-// bb5: {\n-//     switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6];\n-// }\n-// bb6: {                               // pre-binding for arm 2 first pattern\n-//     falseEdges -> [real: bb26, imaginary: bb7];\n-// }\n-// bb7: {                               // bindings for arm 2 - second pattern\n-//     StorageLive(_15);\n-//     _15 = (_2.1: bool);\n-//     StorageLive(_16);\n-//     _16 = move (_2.2: std::string::String);\n-//     goto -> bb25;\n-// }\n-// bb8: {                               // arm 1\n-//     _0 = const 1i32;\n-//     drop(_7) -> [return: bb24, unwind: bb14];\n-// }\n-// bb9: {                               // guard - first time\n-//     StorageLive(_6);\n-//     _6 = &(_2.1: bool);\n-//     StorageLive(_8);\n-//     _8 = &(_2.2: std::string::String);\n-//     _3 = &shallow (_2.0: bool);\n-//     _4 = &shallow (_2.1: bool);\n-//     StorageLive(_9);\n-//     StorageLive(_10);\n-//     _10 = _1;\n-//     FakeRead(ForMatchedPlace, _10);\n-//     switchInt(_10) -> [false: bb11, otherwise: bb10];\n-// }\n-// bb10: {\n-//     falseEdges -> [real: bb12, imaginary: bb11];\n-// }\n-// bb11: {                              // `else` block - first time\n-//     _9 = (*_6);\n-//     StorageDead(_10);\n-//     switchInt(move _9) -> [false: bb17, otherwise: bb16];\n-// }\n-// bb12: {                              // `return 3` - first time\n-//     _0 = const 3i32;\n-//     StorageDead(_10);\n-//     StorageDead(_9);\n-//     StorageDead(_8);\n-//     StorageDead(_6);\n-//     goto -> bb15;\n-// }\n-// bb13: {\n-//     return;\n-// }\n-// bb14 (cleanup): {\n-//     drop(_2) -> bb1;\n-// }\n-// bb15: {\n-//     drop(_2) -> [return: bb13, unwind: bb1];\n-// }\n-// bb16: {\n-//     StorageDead(_9);\n-//     FakeRead(ForMatchGuard, _3);\n-//     FakeRead(ForMatchGuard, _4);\n-//     FakeRead(ForGuardBinding, _6);\n-//     FakeRead(ForGuardBinding, _8);\n-//     StorageLive(_5);\n-//     _5 = (_2.1: bool);\n-//     StorageLive(_7);\n-//     _7 = move (_2.2: std::string::String);\n-//     goto -> bb8;\n-// }\n-// bb17: {                              // guard otherwise case - first time\n-//     StorageDead(_9);\n-//     StorageDead(_8);\n-//     StorageDead(_6);\n-//     falseEdges -> [real: bb3, imaginary: bb4];\n-// }\n-// bb18: {                              // guard - second time\n-//     StorageLive(_6);\n-//     _6 = &(_2.0: bool);\n-//     StorageLive(_8);\n-//     _8 = &(_2.2: std::string::String);\n-//     _3 = &shallow (_2.0: bool);\n-//     _4 = &shallow (_2.1: bool);\n-//     StorageLive(_12);\n-//     StorageLive(_13);\n-//     _13 = _1;\n-//     FakeRead(ForMatchedPlace, _13);\n-//     switchInt(_13) -> [false: bb20, otherwise: bb19];\n-// }\n-// bb19: {\n-//     falseEdges -> [real: bb21, imaginary: bb20];\n-// }\n-// bb20: {                              // `else` block - second time\n-//     _12 = (*_6);\n-//     StorageDead(_13);\n-//     switchInt(move _12) -> [false: bb23, otherwise: bb22];\n-// }\n-// bb21: {\n-//     _0 = const 3i32;\n-//     StorageDead(_13);\n-//     StorageDead(_12);\n-//     StorageDead(_8);\n-//     StorageDead(_6);\n-//     goto -> bb15;\n-// }\n-// bb22: {                              // bindings for arm 1\n-//     StorageDead(_12);\n-//     FakeRead(ForMatchGuard, _3);\n-//     FakeRead(ForMatchGuard, _4);\n-//     FakeRead(ForGuardBinding, _6);\n-//     FakeRead(ForGuardBinding, _8);\n-//     StorageLive(_5);\n-//     _5 = (_2.0: bool);\n-//     StorageLive(_7);\n-//     _7 = move (_2.2: std::string::String);\n-//     goto -> bb8;\n-// }\n-// bb23: {                              // Guard otherwise case - second time\n-//     StorageDead(_12);\n-//     StorageDead(_8);\n-//     StorageDead(_6);\n-//     falseEdges -> [real: bb5, imaginary: bb6];\n-// }\n-// bb24: {                              // rest of arm 1\n-//     StorageDead(_7);\n-//     StorageDead(_5);\n-//     StorageDead(_8);\n-//     StorageDead(_6);\n-//     goto -> bb28;\n-// }\n-// bb25: {                              // arm 2\n-//     _0 = const 2i32;\n-//     drop(_16) -> [return: bb27, unwind: bb14];\n-// }\n-// bb26: {                              // bindings for arm 2 - first pattern\n-//     StorageLive(_15);\n-//     _15 = (_2.1: bool);\n-//     StorageLive(_16);\n-//     _16 = move (_2.2: std::string::String);\n-//     goto -> bb25;\n-// }\n-\n-// bb27: {                              // rest of arm 2\n-//     StorageDead(_16);\n-//     StorageDead(_15);\n-//     goto -> bb28;\n-// }\n-// bb28: {\n-//     drop(_2) -> [return: bb13, unwind: bb1];\n-// }\n-// END rustc.complicated_match.SimplifyCfg-initial.after.mir\n-// START rustc.complicated_match.ElaborateDrops.after.mir\n-// let _16: std::string::String;      // No drop flags, which would come after this.\n-// scope 1 {\n-// END rustc.complicated_match.ElaborateDrops.after.mir"}, {"sha": "807df5be31ade1bf4197da8d3716a7fee116ee56", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.ElaborateDrops.after.mir", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,235 @@\n+// MIR for `complicated_match` after ElaborateDrops\n+\n+fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n+    debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:13:22: 13:26\n+    debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:13:34: 13:39\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:13:66: 13:69\n+    let mut _3: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+    let mut _4: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+    let _5: bool;                        // in scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+    let _6: &bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+    let _7: std::string::String;         // in scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+    let _8: &std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+    let mut _9: bool;                    // in scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    let mut _10: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+    let mut _11: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    let mut _12: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    let mut _13: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+    let mut _14: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    let _15: bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+    let _16: std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+    scope 1 {\n+        debug a => _5;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        debug a => _6;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        debug s => _7;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+    }\n+    scope 2 {\n+        debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+        debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+    }\n+\n+    bb0: {\n+        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // bb0[0]: scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n+    }\n+\n+    bb2: {\n+        switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n+    }\n+\n+    bb3: {\n+        switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // bb3[0]: scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+    }\n+\n+    bb4: {\n+        StorageLive(_15);                // bb4[0]: scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+        _15 = (_2.1: bool);              // bb4[1]: scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+        StorageLive(_16);                // bb4[2]: scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+        _16 = move (_2.2: std::string::String); // bb4[3]: scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+        goto -> bb20;                    // bb4[4]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb5: {\n+        _0 = const 1i32;                 // bb5[0]: scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:15:77: 15:78\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        drop(_7) -> [return: bb19, unwind: bb10]; // bb5[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+    }\n+\n+    bb6: {\n+        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        _6 = &(_2.1: bool);              // bb6[1]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        StorageLive(_8);                 // bb6[2]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        _8 = &(_2.2: std::string::String); // bb6[3]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        StorageLive(_9);                 // bb6[4]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+        StorageLive(_10);                // bb6[5]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        _10 = _1;                        // bb6[6]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        switchInt(_10) -> [false: bb7, otherwise: bb8]; // bb6[7]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb7: {\n+        _9 = (*_6);                      // bb7[0]: scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+        StorageDead(_10);                // bb7[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // bb7[2]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb8: {\n+        _0 = const 3i32;                 // bb8[0]: scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_10);                // bb8[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        StorageDead(_9);                 // bb8[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb8[3]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb8[4]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb11;                    // bb8[5]: scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    }\n+\n+    bb9: {\n+        return;                          // bb9[0]: scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n+    }\n+\n+    bb10 (cleanup): {\n+        goto -> bb25;                    // bb10[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb11: {\n+        drop(_2) -> [return: bb9, unwind: bb1]; // bb11[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb12: {\n+        StorageDead(_9);                 // bb12[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageLive(_5);                 // bb12[1]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        _5 = (_2.1: bool);               // bb12[2]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        StorageLive(_7);                 // bb12[3]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        _7 = move (_2.2: std::string::String); // bb12[4]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        goto -> bb5;                     // bb12[5]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb13: {\n+        StorageDead(_9);                 // bb13[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb13[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb13[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb2;                     // bb13[3]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb14: {\n+        StorageLive(_6);                 // bb14[0]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        _6 = &(_2.0: bool);              // bb14[1]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        StorageLive(_8);                 // bb14[2]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        _8 = &(_2.2: std::string::String); // bb14[3]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        StorageLive(_12);                // bb14[4]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+        StorageLive(_13);                // bb14[5]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        _13 = _1;                        // bb14[6]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        switchInt(_13) -> [false: bb15, otherwise: bb16]; // bb14[7]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb15: {\n+        _12 = (*_6);                     // bb15[0]: scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+        StorageDead(_13);                // bb15[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        switchInt(move _12) -> [false: bb18, otherwise: bb17]; // bb15[2]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb16: {\n+        _0 = const 3i32;                 // bb16[0]: scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_13);                // bb16[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        StorageDead(_12);                // bb16[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb16[3]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb16[4]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb11;                    // bb16[5]: scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    }\n+\n+    bb17: {\n+        StorageDead(_12);                // bb17[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageLive(_5);                 // bb17[1]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        _5 = (_2.0: bool);               // bb17[2]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        StorageLive(_7);                 // bb17[3]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        _7 = move (_2.2: std::string::String); // bb17[4]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        goto -> bb5;                     // bb17[5]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb18: {\n+        StorageDead(_12);                // bb18[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb18[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb18[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb3;                     // bb18[3]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb19: {\n+        StorageDead(_7);                 // bb19[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_5);                 // bb19[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb19[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb19[3]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb23;                    // bb19[4]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb20: {\n+        _0 = const 2i32;                 // bb20[0]: scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:16:41: 16:42\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        drop(_16) -> [return: bb22, unwind: bb10]; // bb20[1]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:43\n+    }\n+\n+    bb21: {\n+        StorageLive(_15);                // bb21[0]: scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+        _15 = (_2.1: bool);              // bb21[1]: scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+        StorageLive(_16);                // bb21[2]: scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+        _16 = move (_2.2: std::string::String); // bb21[3]: scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+        goto -> bb20;                    // bb21[4]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb22: {\n+        StorageDead(_16);                // bb22[0]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:43\n+        StorageDead(_15);                // bb22[1]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:43\n+        goto -> bb23;                    // bb22[2]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb23: {\n+        goto -> bb29;                    // bb23[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb24 (cleanup): {\n+        goto -> bb1;                     // bb24[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb25 (cleanup): {\n+        goto -> bb24;                    // bb25[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb26: {\n+        goto -> bb9;                     // bb26[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb27 (cleanup): {\n+        goto -> bb1;                     // bb27[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb28 (cleanup): {\n+        goto -> bb27;                    // bb28[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb29: {\n+        goto -> bb26;                    // bb29[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+}"}, {"sha": "ad42a85317435b785c707f8137ff04a8eb65fbb1", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,246 @@\n+// MIR for `complicated_match` after SimplifyCfg-initial\n+\n+fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n+    debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:13:22: 13:26\n+    debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:13:34: 13:39\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:13:66: 13:69\n+    let mut _3: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+    let mut _4: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+    let _5: bool;                        // in scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+    let _6: &bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+    let _7: std::string::String;         // in scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+    let _8: &std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+    let mut _9: bool;                    // in scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    let mut _10: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+    let mut _11: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    let mut _12: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    let mut _13: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+    let mut _14: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    let _15: bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+    let _16: std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+    scope 1 {\n+        debug a => _5;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        debug a => _6;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        debug s => _7;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+    }\n+    scope 2 {\n+        debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+        debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+    }\n+\n+    bb0: {\n+        FakeRead(ForMatchedPlace, _2);   // bb0[0]: scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+        switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // bb0[1]: scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb9, imaginary: bb4]; // bb2[0]: scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n+    }\n+\n+    bb3: {\n+        switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // bb3[0]: scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n+    }\n+\n+    bb4: {\n+        falseEdges -> [real: bb18, imaginary: bb6]; // bb4[0]: scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n+    }\n+\n+    bb5: {\n+        switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // bb5[0]: scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+    }\n+\n+    bb6: {\n+        falseEdges -> [real: bb26, imaginary: bb7]; // bb6[0]: scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n+    }\n+\n+    bb7: {\n+        StorageLive(_15);                // bb7[0]: scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+        _15 = (_2.1: bool);              // bb7[1]: scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+        StorageLive(_16);                // bb7[2]: scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+        _16 = move (_2.2: std::string::String); // bb7[3]: scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+        goto -> bb25;                    // bb7[4]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb8: {\n+        _0 = const 1i32;                 // bb8[0]: scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:15:77: 15:78\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        drop(_7) -> [return: bb24, unwind: bb14]; // bb8[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+    }\n+\n+    bb9: {\n+        StorageLive(_6);                 // bb9[0]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        _6 = &(_2.1: bool);              // bb9[1]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        StorageLive(_8);                 // bb9[2]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        _8 = &(_2.2: std::string::String); // bb9[3]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        _3 = &shallow (_2.0: bool);      // bb9[4]: scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+        _4 = &shallow (_2.1: bool);      // bb9[5]: scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+        StorageLive(_9);                 // bb9[6]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+        StorageLive(_10);                // bb9[7]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        _10 = _1;                        // bb9[8]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        FakeRead(ForMatchedPlace, _10);  // bb9[9]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        switchInt(_10) -> [false: bb11, otherwise: bb10]; // bb9[10]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb10: {\n+        falseEdges -> [real: bb12, imaginary: bb11]; // bb10[0]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb11: {\n+        _9 = (*_6);                      // bb11[0]: scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+        StorageDead(_10);                // bb11[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        switchInt(move _9) -> [false: bb17, otherwise: bb16]; // bb11[2]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb12: {\n+        _0 = const 3i32;                 // bb12[0]: scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_10);                // bb12[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        StorageDead(_9);                 // bb12[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb12[3]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb12[4]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb15;                    // bb12[5]: scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    }\n+\n+    bb13: {\n+        return;                          // bb13[0]: scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n+    }\n+\n+    bb14 (cleanup): {\n+        drop(_2) -> bb1;                 // bb14[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb15: {\n+        drop(_2) -> [return: bb13, unwind: bb1]; // bb15[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+\n+    bb16: {\n+        StorageDead(_9);                 // bb16[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        FakeRead(ForMatchGuard, _3);     // bb16[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        FakeRead(ForMatchGuard, _4);     // bb16[2]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        FakeRead(ForGuardBinding, _6);   // bb16[3]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        FakeRead(ForGuardBinding, _8);   // bb16[4]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        StorageLive(_5);                 // bb16[5]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        _5 = (_2.1: bool);               // bb16[6]: scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+        StorageLive(_7);                 // bb16[7]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        _7 = move (_2.2: std::string::String); // bb16[8]: scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+        goto -> bb8;                     // bb16[9]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb17: {\n+        StorageDead(_9);                 // bb17[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb17[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb17[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        falseEdges -> [real: bb3, imaginary: bb4]; // bb17[3]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb18: {\n+        StorageLive(_6);                 // bb18[0]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        _6 = &(_2.0: bool);              // bb18[1]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        StorageLive(_8);                 // bb18[2]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        _8 = &(_2.2: std::string::String); // bb18[3]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        _3 = &shallow (_2.0: bool);      // bb18[4]: scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+        _4 = &shallow (_2.1: bool);      // bb18[5]: scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+        StorageLive(_12);                // bb18[6]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+        StorageLive(_13);                // bb18[7]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        _13 = _1;                        // bb18[8]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        FakeRead(ForMatchedPlace, _13);  // bb18[9]: scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+        switchInt(_13) -> [false: bb20, otherwise: bb19]; // bb18[10]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb19: {\n+        falseEdges -> [real: bb21, imaginary: bb20]; // bb19[0]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb20: {\n+        _12 = (*_6);                     // bb20[0]: scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+        StorageDead(_13);                // bb20[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        switchInt(move _12) -> [false: bb23, otherwise: bb22]; // bb20[2]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb21: {\n+        _0 = const 3i32;                 // bb21[0]: scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_13);                // bb21[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        StorageDead(_12);                // bb21[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb21[3]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb21[4]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb15;                    // bb21[5]: scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+    }\n+\n+    bb22: {\n+        StorageDead(_12);                // bb22[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        FakeRead(ForMatchGuard, _3);     // bb22[1]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        FakeRead(ForMatchGuard, _4);     // bb22[2]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        FakeRead(ForGuardBinding, _6);   // bb22[3]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        FakeRead(ForGuardBinding, _8);   // bb22[4]: scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+        StorageLive(_5);                 // bb22[5]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        _5 = (_2.0: bool);               // bb22[6]: scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+        StorageLive(_7);                 // bb22[7]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        _7 = move (_2.2: std::string::String); // bb22[8]: scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+        goto -> bb8;                     // bb22[9]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb23: {\n+        StorageDead(_12);                // bb23[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb23[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb23[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        falseEdges -> [real: bb5, imaginary: bb6]; // bb23[3]: scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+    }\n+\n+    bb24: {\n+        StorageDead(_7);                 // bb24[0]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_5);                 // bb24[1]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_8);                 // bb24[2]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        StorageDead(_6);                 // bb24[3]: scope 0 at $DIR/match-arm-scopes.rs:15:78: 15:79\n+        goto -> bb28;                    // bb24[4]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb25: {\n+        _0 = const 2i32;                 // bb25[0]: scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match-arm-scopes.rs:16:41: 16:42\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        drop(_16) -> [return: bb27, unwind: bb14]; // bb25[1]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:43\n+    }\n+\n+    bb26: {\n+        StorageLive(_15);                // bb26[0]: scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+        _15 = (_2.1: bool);              // bb26[1]: scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+        StorageLive(_16);                // bb26[2]: scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+        _16 = move (_2.2: std::string::String); // bb26[3]: scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+        goto -> bb25;                    // bb26[4]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb27: {\n+        StorageDead(_16);                // bb27[0]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:43\n+        StorageDead(_15);                // bb27[1]: scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:43\n+        goto -> bb28;                    // bb27[2]: scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+    }\n+\n+    bb28: {\n+        drop(_2) -> [return: bb13, unwind: bb1]; // bb28[0]: scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+    }\n+}"}, {"sha": "91f4aad165edd13f7cbe9397fa29e09252aa5e57", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 3, "deletions": 242, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -10,6 +10,7 @@ fn guard2(_: i32) -> bool {\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n+// EMIT_MIR rustc.full_tested_match.PromoteTemps.after.mir\n pub fn full_tested_match() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n@@ -20,6 +21,7 @@ pub fn full_tested_match() {\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n+// EMIT_MIR rustc.full_tested_match2.PromoteTemps.before.mir\n pub fn full_tested_match2() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n@@ -28,6 +30,7 @@ pub fn full_tested_match2() {\n     };\n }\n \n+// EMIT_MIR rustc.main.PromoteTemps.before.mir\n fn main() {\n     let _ = match Some(1) {\n         Some(_w) if guard() => 1,\n@@ -36,245 +39,3 @@ fn main() {\n         _z => 4,\n     };\n }\n-\n-// END RUST SOURCE\n-//\n-// START rustc.full_tested_match.PromoteTemps.after.mir\n-//  bb0: {\n-//      ...\n-//      _2 = std::option::Option::<i32>::Some(const 42i32,);\n-//      FakeRead(ForMatchedPlace, _2);\n-//      _3 = discriminant(_2);\n-//      switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5];\n-//  }\n-//  bb1 (cleanup): {\n-//      resume;\n-//  }\n-//  bb2: {  // pre_binding3 and arm3\n-//      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n-//  }\n-//  bb3: {\n-//      falseEdges -> [real: bb6, imaginary: bb4]; //pre_binding1\n-//  }\n-//  bb4: {\n-//      falseEdges -> [real: bb10, imaginary: bb2]; //pre_binding2\n-//  }\n-//  bb5: {\n-//      unreachable;\n-//  }\n-//  bb6: { // binding1 and guard\n-//      StorageLive(_6);\n-//      _11 = const full_tested_match::promoted[0];\n-//      _6 = &(((*_11) as Some).0: i32);\n-//      _4 = &shallow _2;\n-//      StorageLive(_7);\n-//      _7 = const guard() -> [return: bb7, unwind: bb1];\n-//  }\n-//  bb7: { // end of guard\n-//      switchInt(move _7) -> [false: bb9, otherwise: bb8];\n-//  }\n-//  bb8: { // arm1\n-//      StorageDead(_7);\n-//      FakeRead(ForMatchGuard, _4);\n-//      FakeRead(ForGuardBinding, _6);\n-//      StorageLive(_5);\n-//      _5 = ((_2 as Some).0: i32);\n-//      StorageLive(_8);\n-//      _8 = _5;\n-//      _1 = (const 1i32, move _8);\n-//      StorageDead(_8);\n-//      StorageDead(_5);\n-//      StorageDead(_6);\n-//      goto -> bb11;\n-//  }\n-//  bb9: { // to pre_binding2\n-//      StorageDead(_7);\n-//      StorageDead(_6);\n-//      goto -> bb4;\n-//  }\n-//  bb10: { // arm2\n-//      StorageLive(_9);\n-//      _9 = ((_2 as Some).0: i32);\n-//      StorageLive(_10);\n-//      _10 = _9;\n-//      _1 = (const 2i32, move _10);\n-//      StorageDead(_10);\n-//      StorageDead(_9);\n-//      goto -> bb11;\n-//  }\n-//  bb11: {\n-//      StorageDead(_2);\n-//      StorageDead(_1);\n-//      _0 = ();\n-//      return;\n-//  }\n-// END rustc.full_tested_match.PromoteTemps.after.mir\n-//\n-// START rustc.full_tested_match2.PromoteTemps.before.mir\n-//  bb0: {\n-//      ...\n-//      _2 = std::option::Option::<i32>::Some(const 42i32,);\n-//      FakeRead(ForMatchedPlace, _2);\n-//      _3 = discriminant(_2);\n-//      switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5];\n-//  }\n-//  bb1 (cleanup): {\n-//      resume;\n-//  }\n-//  bb2: { // pre_binding2\n-//      falseEdges -> [real: bb10, imaginary: bb4];\n-//  }\n-//  bb3: { // pre_binding1\n-//      falseEdges -> [real: bb6, imaginary: bb2];\n-//  }\n-//  bb4: { // binding3 and arm3\n-//      StorageLive(_9);\n-//      _9 = ((_2 as Some).0: i32);\n-//      StorageLive(_10);\n-//      _10 = _9;\n-//      _1 = (const 2i32, move _10);\n-//      StorageDead(_10);\n-//      StorageDead(_9);\n-//      goto -> bb11;\n-//  }\n-//  bb5: {\n-//      unreachable;\n-//  }\n-//  bb6: {\n-//      StorageLive(_6);\n-//      _6 = &((_2 as Some).0: i32);\n-//      _4 = &shallow _2;\n-//      StorageLive(_7);\n-//      _7 = const guard() -> [return: bb7, unwind: bb1];\n-//  }\n-//  bb7: { // end of guard\n-//      switchInt(move _7) -> [false: bb9, otherwise: bb8];\n-//  }\n-//  bb8: {\n-//      StorageDead(_7);\n-//      FakeRead(ForMatchGuard, _4);\n-//      FakeRead(ForGuardBinding, _6);\n-//      StorageLive(_5);\n-//      _5 = ((_2 as Some).0: i32);\n-//      StorageLive(_8);\n-//      _8 = _5;\n-//      _1 = (const 1i32, move _8);\n-//      StorageDead(_8);\n-//      StorageDead(_5);\n-//      StorageDead(_6);\n-//      goto -> bb11;\n-//  }\n-//  bb9: { // to pre_binding3 (can skip 2 since this is `Some`)\n-//      StorageDead(_7);\n-//      StorageDead(_6);\n-//      falseEdges -> [real: bb4, imaginary: bb2];\n-//  }\n-//  bb10: { // arm2\n-//      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n-//  }\n-//  bb11: {\n-//      StorageDead(_2);\n-//      StorageDead(_1);\n-//      _0 = ();\n-//      return;\n-//  }\n-// END rustc.full_tested_match2.PromoteTemps.before.mir\n-//\n-// START rustc.main.PromoteTemps.before.mir\n-//  bb0: {\n-//     ...\n-//      _2 = std::option::Option::<i32>::Some(const 1i32,);\n-//      FakeRead(ForMatchedPlace, _2);\n-//      _4 = discriminant(_2);\n-//      switchInt(move _4) -> [1isize: bb3, otherwise: bb2];\n-//  }\n-//  bb1 (cleanup): {\n-//      resume;\n-//  }\n-//  bb2: {\n-//      falseEdges -> [real: bb10, imaginary: bb5];\n-//  }\n-//  bb3: {\n-//      falseEdges -> [real: bb6, imaginary: bb2];\n-//  }\n-//  bb4: {\n-//      StorageLive(_14);\n-//      _14 = _2;\n-//      _1 = const 4i32;\n-//      StorageDead(_14);\n-//      goto -> bb15;\n-//  }\n-//  bb5: {\n-//      falseEdges -> [real: bb11, imaginary: bb4];\n-//  }\n-//  bb6: { //end of guard1\n-//      StorageLive(_7);\n-//      _7 = &((_2 as Some).0: i32);\n-//      _5 = &shallow _2;\n-//      StorageLive(_8);\n-//      _8 = const guard() -> [return: bb7, unwind: bb1];\n-//  }\n-//  bb7: {\n-//      switchInt(move _8) -> [false: bb9, otherwise: bb8];\n-//  }\n-//  bb8: {\n-//      StorageDead(_8);\n-//      FakeRead(ForMatchGuard, _5);\n-//      FakeRead(ForGuardBinding, _7);\n-//      StorageLive(_6);\n-//      _6 = ((_2 as Some).0: i32);\n-//      _1 = const 1i32;\n-//      StorageDead(_6);\n-//      StorageDead(_7);\n-//      goto -> bb15;\n-//  }\n-//  bb9: {\n-//      StorageDead(_8);\n-//      StorageDead(_7);\n-//      falseEdges -> [real: bb2, imaginary: bb2];\n-//  }\n-//  bb10: {  // binding2 & arm2\n-//      StorageLive(_9);\n-//      _9 = _2;\n-//      _1 = const 2i32;\n-//      StorageDead(_9);\n-//      goto -> bb15;\n-//  }\n-//  bb11: { // binding3: Some(y) if guard2(y)\n-//      StorageLive(_11);\n-//      _11 = &((_2 as Some).0: i32);\n-//      _5 = &shallow _2;\n-//      StorageLive(_12);\n-//      StorageLive(_13);\n-//      _13 = (*_11);\n-//      _12 = const guard2(move _13) -> [return: bb12, unwind: bb1];\n-//  }\n-//  bb12: { // end of guard2\n-//      StorageDead(_13);\n-//      switchInt(move _12) -> [false: bb14, otherwise: bb13];\n-//  }\n-//  bb13: { // binding4 & arm4\n-//      StorageDead(_12);\n-//      FakeRead(ForMatchGuard, _5);\n-//      FakeRead(ForGuardBinding, _11);\n-//      StorageLive(_10);\n-//      _10 = ((_2 as Some).0: i32);\n-//      _1 = const 3i32;\n-//      StorageDead(_10);\n-//      StorageDead(_11);\n-//      goto -> bb15;\n-//  }\n-//  bb14: {\n-//      StorageDead(_12);\n-//      StorageDead(_11);\n-//      falseEdges -> [real: bb4, imaginary: bb4];\n-//  }\n-//  bb15: {\n-//      StorageDead(_2);\n-//      StorageDead(_1);\n-//      _0 = ();\n-//      return;\n-//  }\n-// END rustc.main.PromoteTemps.before.mir"}, {"sha": "acc03cce46eb212a15fd2bea951af72eb9cf8240", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,149 @@\n+// MIR for `full_tested_match` after PromoteTemps\n+\n+fn full_tested_match() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:14:28: 14:28\n+    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:16:35: 16:36\n+    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n+    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:17:24: 17:25\n+    let mut _11: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+    scope 1 {\n+    }\n+    scope 2 {\n+        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:16:14: 16:15\n+        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:16:14: 16:15\n+    }\n+    scope 3 {\n+        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:17:14: 17:15\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _2 = std::option::Option::<i32>::Some(const 42i32,); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x0000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:15:24: 15:26\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        _3 = discriminant(_2);           // bb0[4]: scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // bb0[5]: scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    }\n+\n+    bb2: {\n+        _1 = (const 3i32, const 3i32);   // bb2[0]: scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:18:18: 18:19\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:18:21: 18:22\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        goto -> bb11;                    // bb2[1]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+    }\n+\n+    bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb4]; // bb3[0]: scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+    }\n+\n+    bb4: {\n+        falseEdges -> [real: bb10, imaginary: bb2]; // bb4[0]: scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n+    }\n+\n+    bb5: {\n+        unreachable;                     // bb5[0]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+    }\n+\n+    bb6: {\n+        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        _11 = const full_tested_match::promoted[0]; // bb6[1]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+                                         // ty::Const\n+                                         // + ty: &std::option::Option<i32>\n+                                         // + val: Unevaluated(DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), [], Some(promoted[0]))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:16:14: 16:15\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), [], Some(promoted[0])) }\n+        _6 = &(((*_11) as Some).0: i32); // bb6[2]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        _4 = &shallow _2;                // bb6[3]: scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        StorageLive(_7);                 // bb6[4]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // bb6[5]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+                                         // ty::Const\n+                                         // + ty: fn() -> bool {guard}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:16:20: 16:25\n+                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb7: {\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // bb7[0]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    }\n+\n+    bb8: {\n+        StorageDead(_7);                 // bb8[0]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        FakeRead(ForMatchGuard, _4);     // bb8[1]: scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n+        FakeRead(ForGuardBinding, _6);   // bb8[2]: scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n+        StorageLive(_5);                 // bb8[3]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        _5 = ((_2 as Some).0: i32);      // bb8[4]: scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        StorageLive(_8);                 // bb8[5]: scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n+        _8 = _5;                         // bb8[6]: scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n+        _1 = (const 1i32, move _8);      // bb8[7]: scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:16:32: 16:33\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        StorageDead(_8);                 // bb8[8]: scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n+        StorageDead(_5);                 // bb8[9]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        StorageDead(_6);                 // bb8[10]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        goto -> bb11;                    // bb8[11]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+    }\n+\n+    bb9: {\n+        StorageDead(_7);                 // bb9[0]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        StorageDead(_6);                 // bb9[1]: scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n+        goto -> bb4;                     // bb9[2]: scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    }\n+\n+    bb10: {\n+        StorageLive(_9);                 // bb10[0]: scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n+        _9 = ((_2 as Some).0: i32);      // bb10[1]: scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n+        StorageLive(_10);                // bb10[2]: scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n+        _10 = _9;                        // bb10[3]: scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n+        _1 = (const 2i32, move _10);     // bb10[4]: scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:17:21: 17:22\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        StorageDead(_10);                // bb10[5]: scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n+        StorageDead(_9);                 // bb10[6]: scope 0 at $DIR/match_false_edges.rs:17:26: 17:27\n+        goto -> bb11;                    // bb10[7]: scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+    }\n+\n+    bb11: {\n+        StorageDead(_2);                 // bb11[0]: scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n+        StorageDead(_1);                 // bb11[1]: scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n+        _0 = ();                         // bb11[2]: scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n+        return;                          // bb11[3]: scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n+    }\n+}"}, {"sha": "cc1fa56264570cef8b101296f168c878ff1c12b0", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,141 @@\n+// MIR for `full_tested_match2` before PromoteTemps\n+\n+fn full_tested_match2() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:25:29: 25:29\n+    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:27:35: 27:36\n+    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n+    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:29:24: 29:25\n+    scope 1 {\n+    }\n+    scope 2 {\n+        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:27:14: 27:15\n+        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:27:14: 27:15\n+    }\n+    scope 3 {\n+        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:29:14: 29:15\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _2 = std::option::Option::<i32>::Some(const 42i32,); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x0000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:26:24: 26:26\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        _3 = discriminant(_2);           // bb0[4]: scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // bb0[5]: scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb10, imaginary: bb4]; // bb2[0]: scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+    }\n+\n+    bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb2]; // bb3[0]: scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+    }\n+\n+    bb4: {\n+        StorageLive(_9);                 // bb4[0]: scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n+        _9 = ((_2 as Some).0: i32);      // bb4[1]: scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n+        StorageLive(_10);                // bb4[2]: scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n+        _10 = _9;                        // bb4[3]: scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n+        _1 = (const 2i32, move _10);     // bb4[4]: scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:29:21: 29:22\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        StorageDead(_10);                // bb4[5]: scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n+        StorageDead(_9);                 // bb4[6]: scope 0 at $DIR/match_false_edges.rs:29:26: 29:27\n+        goto -> bb11;                    // bb4[7]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+    }\n+\n+    bb5: {\n+        unreachable;                     // bb5[0]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+    }\n+\n+    bb6: {\n+        StorageLive(_6);                 // bb6[0]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _6 = &((_2 as Some).0: i32);     // bb6[1]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _4 = &shallow _2;                // bb6[2]: scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        StorageLive(_7);                 // bb6[3]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // bb6[4]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+                                         // ty::Const\n+                                         // + ty: fn() -> bool {guard}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:27:20: 27:25\n+                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb7: {\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // bb7[0]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    }\n+\n+    bb8: {\n+        StorageDead(_7);                 // bb8[0]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        FakeRead(ForMatchGuard, _4);     // bb8[1]: scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n+        FakeRead(ForGuardBinding, _6);   // bb8[2]: scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n+        StorageLive(_5);                 // bb8[3]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _5 = ((_2 as Some).0: i32);      // bb8[4]: scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        StorageLive(_8);                 // bb8[5]: scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n+        _8 = _5;                         // bb8[6]: scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n+        _1 = (const 1i32, move _8);      // bb8[7]: scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:27:32: 27:33\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        StorageDead(_8);                 // bb8[8]: scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n+        StorageDead(_5);                 // bb8[9]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        StorageDead(_6);                 // bb8[10]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        goto -> bb11;                    // bb8[11]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+    }\n+\n+    bb9: {\n+        StorageDead(_7);                 // bb9[0]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        StorageDead(_6);                 // bb9[1]: scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n+        falseEdges -> [real: bb4, imaginary: bb2]; // bb9[2]: scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    }\n+\n+    bb10: {\n+        _1 = (const 3i32, const 3i32);   // bb10[0]: scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:28:18: 28:19\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:28:21: 28:22\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        goto -> bb11;                    // bb10[1]: scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+    }\n+\n+    bb11: {\n+        StorageDead(_2);                 // bb11[0]: scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n+        StorageDead(_1);                 // bb11[1]: scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n+        _0 = ();                         // bb11[2]: scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n+        return;                          // bb11[3]: scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n+    }\n+}"}, {"sha": "fce497df982a8e7b9111f0c33210edc9bebdcd38", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,188 @@\n+// MIR for `main` before PromoteTemps\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:34:11: 34:11\n+    let mut _1: i32;                     // in scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+    let mut _4: isize;                   // in scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+    let mut _5: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+    let _6: i32;                         // in scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+    let _7: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+    let mut _8: bool;                    // in scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    let _9: std::option::Option<i32>;    // in scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+    let _10: i32;                        // in scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+    let _11: &i32;                       // in scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+    let mut _12: bool;                   // in scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+    let mut _13: i32;                    // in scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n+    let _14: std::option::Option<i32>;   // in scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n+    scope 1 {\n+    }\n+    scope 2 {\n+        debug _w => _6;                  // in scope 2 at $DIR/match_false_edges.rs:36:14: 36:16\n+        debug _w => _7;                  // in scope 2 at $DIR/match_false_edges.rs:36:14: 36:16\n+    }\n+    scope 3 {\n+        debug _x => _9;                  // in scope 3 at $DIR/match_false_edges.rs:37:9: 37:11\n+    }\n+    scope 4 {\n+        debug y => _10;                  // in scope 4 at $DIR/match_false_edges.rs:38:14: 38:15\n+        debug y => _11;                  // in scope 4 at $DIR/match_false_edges.rs:38:14: 38:15\n+    }\n+    scope 5 {\n+        debug _z => _14;                 // in scope 5 at $DIR/match_false_edges.rs:39:9: 39:11\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _2 = std::option::Option::<i32>::Some(const 1i32,); // bb0[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:35:24: 35:25\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        FakeRead(ForMatchedPlace, _2);   // bb0[3]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        _4 = discriminant(_2);           // bb0[4]: scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1isize: bb3, otherwise: bb2]; // bb0[5]: scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb10, imaginary: bb5]; // bb2[0]: scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+    }\n+\n+    bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb2]; // bb3[0]: scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+    }\n+\n+    bb4: {\n+        StorageLive(_14);                // bb4[0]: scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n+        _14 = _2;                        // bb4[1]: scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n+        _1 = const 4i32;                 // bb4[2]: scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:39:15: 39:16\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+        StorageDead(_14);                // bb4[3]: scope 0 at $DIR/match_false_edges.rs:39:16: 39:17\n+        goto -> bb15;                    // bb4[4]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+    }\n+\n+    bb5: {\n+        falseEdges -> [real: bb11, imaginary: bb4]; // bb5[0]: scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+    }\n+\n+    bb6: {\n+        StorageLive(_7);                 // bb6[0]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _7 = &((_2 as Some).0: i32);     // bb6[1]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _5 = &shallow _2;                // bb6[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        StorageLive(_8);                 // bb6[3]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        _8 = const guard() -> [return: bb7, unwind: bb1]; // bb6[4]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+                                         // ty::Const\n+                                         // + ty: fn() -> bool {guard}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:36:21: 36:26\n+                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb7: {\n+        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // bb7[0]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    }\n+\n+    bb8: {\n+        StorageDead(_8);                 // bb8[0]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        FakeRead(ForMatchGuard, _5);     // bb8[1]: scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+        FakeRead(ForGuardBinding, _7);   // bb8[2]: scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+        StorageLive(_6);                 // bb8[3]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _6 = ((_2 as Some).0: i32);      // bb8[4]: scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n+        _1 = const 1i32;                 // bb8[5]: scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:36:32: 36:33\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        StorageDead(_6);                 // bb8[6]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        StorageDead(_7);                 // bb8[7]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        goto -> bb15;                    // bb8[8]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+    }\n+\n+    bb9: {\n+        StorageDead(_8);                 // bb9[0]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        StorageDead(_7);                 // bb9[1]: scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        falseEdges -> [real: bb2, imaginary: bb2]; // bb9[2]: scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    }\n+\n+    bb10: {\n+        StorageLive(_9);                 // bb10[0]: scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        _9 = _2;                         // bb10[1]: scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        _1 = const 2i32;                 // bb10[2]: scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:37:15: 37:16\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        StorageDead(_9);                 // bb10[3]: scope 0 at $DIR/match_false_edges.rs:37:16: 37:17\n+        goto -> bb15;                    // bb10[4]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+    }\n+\n+    bb11: {\n+        StorageLive(_11);                // bb11[0]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _11 = &((_2 as Some).0: i32);    // bb11[1]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _5 = &shallow _2;                // bb11[2]: scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        StorageLive(_12);                // bb11[3]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageLive(_13);                // bb11[4]: scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n+        _13 = (*_11);                    // bb11[5]: scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n+        _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // bb11[6]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+                                         // ty::Const\n+                                         // + ty: fn(i32) -> bool {guard2}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:38:20: 38:26\n+                                         // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb12: {\n+        StorageDead(_13);                // bb12[0]: scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n+        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // bb12[1]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+    }\n+\n+    bb13: {\n+        StorageDead(_12);                // bb13[0]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        FakeRead(ForMatchGuard, _5);     // bb13[1]: scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n+        FakeRead(ForGuardBinding, _11);  // bb13[2]: scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n+        StorageLive(_10);                // bb13[3]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _10 = ((_2 as Some).0: i32);     // bb13[4]: scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n+        _1 = const 3i32;                 // bb13[5]: scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:38:33: 38:34\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_10);                // bb13[6]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        StorageDead(_11);                // bb13[7]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        goto -> bb15;                    // bb13[8]: scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+    }\n+\n+    bb14: {\n+        StorageDead(_12);                // bb14[0]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        StorageDead(_11);                // bb14[1]: scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n+        falseEdges -> [real: bb4, imaginary: bb4]; // bb14[2]: scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+    }\n+\n+    bb15: {\n+        StorageDead(_2);                 // bb15[0]: scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n+        StorageDead(_1);                 // bb15[1]: scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n+        _0 = ();                         // bb15[2]: scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n+        return;                          // bb15[3]: scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n+    }\n+}"}, {"sha": "c3b07d42f5e62b3edb0634f12fd274b2f584af15", "filename": "src/test/mir-opt/match_test.rs", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(exclusive_range_pattern)]\n \n+// EMIT_MIR rustc.main.SimplifyCfg-initial.after.mir\n fn main() {\n     let x = 3;\n     let b = true;\n@@ -15,70 +16,3 @@ fn main() {\n         _ => 3,\n     };\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-initial.after.mir\n-//    bb0: {\n-//        ...\n-//        switchInt(move _6) -> [false: bb4, otherwise: bb1];\n-//    }\n-//    bb1: {\n-//        _7 = Lt(_1, const 10i32);\n-//        switchInt(move _7) -> [false: bb4, otherwise: bb2];\n-//    }\n-//    bb2: {\n-//        falseEdges -> [real: bb9, imaginary: bb6];\n-//    }\n-//    bb3: {\n-//        _3 = const 3i32;\n-//        goto -> bb14;\n-//    }\n-//    bb4: {\n-//        _4 = Le(const 10i32, _1);\n-//        switchInt(move _4) -> [false: bb7, otherwise: bb5];\n-//    }\n-//    bb5: {\n-//        _5 = Le(_1, const 20i32);\n-//        switchInt(move _5) -> [false: bb7, otherwise: bb6];\n-//    }\n-//    bb6: {\n-//        falseEdges -> [real: bb12, imaginary: bb8];\n-//    }\n-//    bb7: {\n-//        switchInt(_1) -> [-1i32: bb8, otherwise: bb3];\n-//    }\n-//    bb8: {\n-//        falseEdges -> [real: bb13, imaginary: bb3];\n-//    }\n-//    bb9: {\n-//        _8 = &shallow _1;\n-//        StorageLive(_9);\n-//        _9 = _2;\n-//        switchInt(move _9) -> [false: bb11, otherwise: bb10];\n-//    }\n-//    bb10: {\n-//        StorageDead(_9);\n-//        FakeRead(ForMatchGuard, _8);\n-//        _3 = const 0i32;\n-//        goto -> bb14;\n-//    }\n-//    bb11: {\n-//        StorageDead(_9);\n-//        falseEdges -> [real: bb3, imaginary: bb6];\n-//    }\n-//    bb12: {\n-//        _3 = const 1i32;\n-//        goto -> bb14;\n-//    }\n-//    bb13: {\n-//        _3 = const 2i32;\n-//        goto -> bb14;\n-//    }\n-//    bb14: {\n-//        StorageDead(_3);\n-//        _0 = ();\n-//        StorageDead(_2);\n-//        StorageDead(_1);\n-//        return;\n-//    }\n-// END rustc.main.SimplifyCfg-initial.after.mir"}, {"sha": "ef5feb79beca9520592332c8c9b20334aed1110f", "filename": "src/test/mir-opt/match_test/rustc.main.SimplifyCfg-initial.after.mir", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,166 @@\n+// MIR for `main` after SimplifyCfg-initial\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_test.rs:6:11: 6:11\n+    let _1: i32;                         // in scope 0 at $DIR/match_test.rs:7:9: 7:10\n+    let _3: i32;                         // in scope 0 at $DIR/match_test.rs:12:5: 17:6\n+    let mut _4: bool;                    // in scope 0 at $DIR/match_test.rs:14:9: 14:16\n+    let mut _5: bool;                    // in scope 0 at $DIR/match_test.rs:14:9: 14:16\n+    let mut _6: bool;                    // in scope 0 at $DIR/match_test.rs:13:9: 13:14\n+    let mut _7: bool;                    // in scope 0 at $DIR/match_test.rs:13:9: 13:14\n+    let mut _8: &i32;                    // in scope 0 at $DIR/match_test.rs:12:11: 12:12\n+    let mut _9: bool;                    // in scope 0 at $DIR/match_test.rs:13:18: 13:19\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/match_test.rs:7:9: 7:10\n+        let _2: bool;                    // in scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        scope 2 {\n+            debug b => _2;               // in scope 2 at $DIR/match_test.rs:8:9: 8:10\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        _1 = const 3i32;                 // bb0[1]: scope 0 at $DIR/match_test.rs:7:13: 7:14\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:7:13: 7:14\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        _2 = const true;                 // bb0[4]: scope 1 at $DIR/match_test.rs:8:13: 8:17\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:8:13: 8:17\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        FakeRead(ForLet, _2);            // bb0[5]: scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        StorageLive(_3);                 // bb0[6]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        FakeRead(ForMatchedPlace, _1);   // bb0[7]: scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        _6 = Le(const 0i32, _1);         // bb0[8]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:13:9: 13:14\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        switchInt(move _6) -> [false: bb4, otherwise: bb1]; // bb0[9]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+    }\n+\n+    bb1: {\n+        _7 = Lt(_1, const 10i32);        // bb1[0]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x0000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:13:9: 13:14\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n+        switchInt(move _7) -> [false: bb4, otherwise: bb2]; // bb1[1]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb9, imaginary: bb6]; // bb2[0]: scope 2 at $DIR/match_test.rs:13:9: 13:14\n+    }\n+\n+    bb3: {\n+        _3 = const 3i32;                 // bb3[0]: scope 2 at $DIR/match_test.rs:16:14: 16:15\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:16:14: 16:15\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        goto -> bb14;                    // bb3[1]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+    }\n+\n+    bb4: {\n+        _4 = Le(const 10i32, _1);        // bb4[0]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x0000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:14:9: 14:16\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n+        switchInt(move _4) -> [false: bb7, otherwise: bb5]; // bb4[1]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+    }\n+\n+    bb5: {\n+        _5 = Le(_1, const 20i32);        // bb5[0]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000014))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:14:9: 14:16\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000014)) }\n+        switchInt(move _5) -> [false: bb7, otherwise: bb6]; // bb5[1]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+    }\n+\n+    bb6: {\n+        falseEdges -> [real: bb12, imaginary: bb8]; // bb6[0]: scope 2 at $DIR/match_test.rs:14:9: 14:16\n+    }\n+\n+    bb7: {\n+        switchInt(_1) -> [-1i32: bb8, otherwise: bb3]; // bb7[0]: scope 2 at $DIR/match_test.rs:15:9: 15:11\n+    }\n+\n+    bb8: {\n+        falseEdges -> [real: bb13, imaginary: bb3]; // bb8[0]: scope 2 at $DIR/match_test.rs:15:9: 15:11\n+    }\n+\n+    bb9: {\n+        _8 = &shallow _1;                // bb9[0]: scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        StorageLive(_9);                 // bb9[1]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        _9 = _2;                         // bb9[2]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        switchInt(move _9) -> [false: bb11, otherwise: bb10]; // bb9[3]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+    }\n+\n+    bb10: {\n+        StorageDead(_9);                 // bb10[0]: scope 2 at $DIR/match_test.rs:13:24: 13:25\n+        FakeRead(ForMatchGuard, _8);     // bb10[1]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+        _3 = const 0i32;                 // bb10[2]: scope 2 at $DIR/match_test.rs:13:23: 13:24\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:13:23: 13:24\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        goto -> bb14;                    // bb10[3]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+    }\n+\n+    bb11: {\n+        StorageDead(_9);                 // bb11[0]: scope 2 at $DIR/match_test.rs:13:24: 13:25\n+        falseEdges -> [real: bb3, imaginary: bb6]; // bb11[1]: scope 2 at $DIR/match_test.rs:13:18: 13:19\n+    }\n+\n+    bb12: {\n+        _3 = const 1i32;                 // bb12[0]: scope 2 at $DIR/match_test.rs:14:20: 14:21\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:14:20: 14:21\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        goto -> bb14;                    // bb12[1]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+    }\n+\n+    bb13: {\n+        _3 = const 2i32;                 // bb13[0]: scope 2 at $DIR/match_test.rs:15:15: 15:16\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:15:15: 15:16\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        goto -> bb14;                    // bb13[1]: scope 2 at $DIR/match_test.rs:12:5: 17:6\n+    }\n+\n+    bb14: {\n+        StorageDead(_3);                 // bb14[0]: scope 2 at $DIR/match_test.rs:17:6: 17:7\n+        _0 = ();                         // bb14[1]: scope 0 at $DIR/match_test.rs:6:11: 18:2\n+        StorageDead(_2);                 // bb14[2]: scope 1 at $DIR/match_test.rs:18:1: 18:2\n+        StorageDead(_1);                 // bb14[3]: scope 0 at $DIR/match_test.rs:18:1: 18:2\n+        return;                          // bb14[4]: scope 0 at $DIR/match_test.rs:18:2: 18:2\n+    }\n+}"}, {"sha": "cf6426b878a3c1a0d0101e08aa21b52503990560", "filename": "src/test/mir-opt/no-drop-for-inactive-variant.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -3,6 +3,7 @@\n // Ensure that there are no drop terminators in `unwrap<T>` (except the one along the cleanup\n // path).\n \n+// EMIT_MIR rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir\n fn unwrap<T>(opt: Option<T>) -> T {\n     match opt {\n         Some(x) => x,\n@@ -13,31 +14,3 @@ fn unwrap<T>(opt: Option<T>) -> T {\n fn main() {\n     let _ = unwrap(Some(1i32));\n }\n-\n-// END RUST SOURCE\n-// START rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir\n-// fn unwrap(_1: std::option::Option<T>) -> T {\n-//     ...\n-//     bb0: {\n-//         ...\n-//         switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3];\n-//     }\n-//     bb1 (cleanup): {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         ...\n-//         const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5;\n-//     }\n-//     bb3: {\n-//         unreachable;\n-//     }\n-//     bb4: {\n-//         ...\n-//         return;\n-//     }\n-//     bb5 (cleanup): {\n-//         drop(_1) -> bb1;\n-//     }\n-// }\n-// END rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "b60d2d032d31cc4489836f32f30e1aef35673f58", "filename": "src/test/mir-opt/no-drop-for-inactive-variant/rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,57 @@\n+// MIR for `unwrap` after SimplifyCfg-elaborate-drops\n+\n+fn unwrap(_1: std::option::Option<T>) -> T {\n+    debug opt => _1;                     // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:14: 7:17\n+    let mut _0: T;                       // return place in scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:33: 7:34\n+    let mut _2: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+    let _3: T;                           // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n+    let mut _4: !;                       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL: 13:52\n+    let mut _5: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+    let mut _6: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+    scope 1 {\n+        debug x => _3;                   // in scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n+    }\n+\n+    bb0: {\n+        _2 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // bb0[1]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n+    }\n+\n+    bb2: {\n+        StorageLive(_4);                 // bb2[0]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL: 13:52\n+        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5; // bb2[1]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL: 13:52\n+                                         // ty::Const\n+                                         // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libstd/macros.rs:LL:COL: 13:46\n+                                         // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libstd/macros.rs:LL:COL: 12:45\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+    }\n+\n+    bb3: {\n+        unreachable;                     // bb3[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n+    }\n+\n+    bb4: {\n+        StorageLive(_3);                 // bb4[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n+        _3 = move ((_1 as Some).0: T);   // bb4[1]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n+        _0 = move _3;                    // bb4[2]: scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n+        StorageDead(_3);                 // bb4[3]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:21: 9:22\n+        _5 = discriminant(_1);           // bb4[4]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        return;                          // bb4[5]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_1) -> bb1;                 // bb5[0]: scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+    }\n+}"}, {"sha": "ab58654e07c0520d3a20787bdef8e8f9ef5396e9", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -4,21 +4,7 @@\n // MIR drop of the argument. (We used to have a `DROP(_2)` in the code\n // below, as part of bb3.)\n \n+// EMIT_MIR rustc.main.ElaborateDrops.before.mir\n fn main() {\n     std::mem::drop(\"\".to_string());\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ElaborateDrops.before.mir\n-//    bb2: {\n-//        StorageDead(_3);\n-//        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4];\n-//    }\n-//    bb3: {\n-//        StorageDead(_2);\n-//        StorageDead(_4);\n-//        StorageDead(_1);\n-//        _0 = ();\n-//        return;\n-//    }\n-// END rustc.main.ElaborateDrops.before.mir"}, {"sha": "b65bc76033003491575dfa92c2eb32a29acf8686", "filename": "src/test/mir-opt/no-spurious-drop-after-call/rustc.main.ElaborateDrops.before.mir", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,58 @@\n+// MIR for `main` before ElaborateDrops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 8:11\n+    let _1: ();                          // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+    let mut _2: std::string::String;     // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+    let mut _3: &str;                    // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+    let _4: &str;                        // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        _4 = const \"\";                   // bb0[4]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n+        _3 = &(*_4);                     // bb0[5]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // bb0[6]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+                                         // ty::Const\n+                                         // + ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n+                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // bb2[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n+        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // bb2[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+                                         // ty::Const\n+                                         // + ty: fn(std::string::String) {std::mem::drop::<std::string::String>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n+                                         // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_2);                 // bb3[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+        StorageDead(_4);                 // bb3[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n+        StorageDead(_1);                 // bb3[2]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n+        _0 = ();                         // bb3[3]: scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n+        return;                          // bb3[4]: scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n+    }\n+\n+    bb4 (cleanup): {\n+        drop(_2) -> bb1;                 // bb4[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+    }\n+}"}, {"sha": "7178c74df51adcadc02a6ce6022882fef73310fc", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,5 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n+// EMIT_MIR rustc.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));\n     x.0 = Aligned(Droppy(0));\n@@ -13,47 +14,3 @@ struct Droppy(usize);\n impl Drop for Droppy {\n     fn drop(&mut self) {}\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n-// fn main() -> () {\n-//     let mut _0: ();\n-//     let mut _1: Packed;\n-//     let mut _2: Aligned;\n-//     let mut _3: Droppy;\n-//     let mut _4: Aligned;\n-//     let mut _5: Droppy;\n-//     let mut _6: Aligned;\n-//     scope 1 {\n-//         debug x => _1;\n-//     }\n-//\n-//     bb0: {\n-//         StorageLive(_1);\n-//         ...\n-//         _1 = Packed(move _2,);\n-//         ...\n-//         StorageLive(_6);\n-//         _6 = move (_1.0: Aligned);\n-//         drop(_6) -> [return: bb4, unwind: bb3];\n-//     }\n-//     bb1 (cleanup): {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_1);\n-//         return;\n-//     }\n-//     bb3 (cleanup): {\n-//         (_1.0: Aligned) = move _4;\n-//         drop(_1) -> bb1;\n-//     }\n-//     bb4: {\n-//         StorageDead(_6);\n-//         (_1.0: Aligned) = move _4;\n-//         StorageDead(_4);\n-//         _0 = ();\n-//         drop(_1) -> [return: bb2, unwind: bb1];\n-//     }\n-// }\n-// END rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "e8d19b30263edb35380a8da3e089a0ccc4ce1138", "filename": "src/test/mir-opt/packed-struct-drop-aligned/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,67 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:4:11: 4:11\n+    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:9: 5:14\n+    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:24: 5:42\n+    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:32: 5:41\n+    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:11: 6:29\n+    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:19: 6:28\n+    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:5:9: 5:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:9: 5:14\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:24: 5:42\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:32: 5:41\n+        _3 = Droppy(const 0usize,);      // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:32: 5:41\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:5:39: 5:40\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _2 = Aligned(move _3,);          // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:24: 5:42\n+        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:41: 5:42\n+        _1 = Packed(move _2,);           // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:17: 5:43\n+        StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:42: 5:43\n+        StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:11: 6:29\n+        StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:19: 6:28\n+        _5 = Droppy(const 0usize,);      // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:19: 6:28\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:6:26: 6:27\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _4 = Aligned(move _5,);          // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:11: 6:29\n+        StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:28: 6:29\n+        StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+        _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+        drop(_6) -> [return: bb4, unwind: bb3]; // bb0[15]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:4:1: 7:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:1: 7:2\n+        return;                          // bb2[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:2: 7:2\n+    }\n+\n+    bb3 (cleanup): {\n+        (_1.0: Aligned) = move _4;       // bb3[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:1: 7:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+        (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:28: 6:29\n+        _0 = ();                         // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:4:11: 7:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:1: 7:2\n+    }\n+}"}, {"sha": "fd2f1d0dbffc6c584f5b5e5236f040b24907cf5e", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 94, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -2,6 +2,7 @@\n \n // ignore-wasm32-bare compiled with panic=abort by default\n \n+// EMIT_MIR rustc.match_guard.CleanupNonCodegenStatements.diff\n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {\n         Some(0) if c => 0,\n@@ -12,97 +13,3 @@ fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n fn main() {\n     match_guard(None, true);\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.match_guard.CleanupNonCodegenStatements.before.mir\n-// bb0: {\n-//     FakeRead(ForMatchedPlace, _1);\n-//     _3 = discriminant(_1);\n-//     switchInt(move _3) -> [1isize: bb2, otherwise: bb1];\n-// }\n-// bb1: {\n-//     _0 = const 1i32;\n-//     goto -> bb7;\n-// }\n-// bb2: {\n-//     switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1];\n-// }\n-// bb3: {\n-//     goto -> bb4;\n-// }\n-// bb4: {\n-//     _4 = &shallow _1;\n-//     _5 = &shallow ((_1 as Some).0: &&i32);\n-//     _6 = &shallow (*((_1 as Some).0: &&i32));\n-//     _7 = &shallow (*(*((_1 as Some).0: &&i32)));\n-//     StorageLive(_8);\n-//     _8 = _2;\n-//     switchInt(move _8) -> [false: bb6, otherwise: bb5];\n-// }\n-// bb5: {\n-//     StorageDead(_8);\n-//     FakeRead(ForMatchGuard, _4);\n-//     FakeRead(ForMatchGuard, _5);\n-//     FakeRead(ForMatchGuard, _6);\n-//     FakeRead(ForMatchGuard, _7);\n-//     _0 = const 0i32;\n-//     goto -> bb7;\n-// }\n-// bb6: {\n-//     StorageDead(_8);\n-//     goto -> bb1;\n-// }\n-// bb7: {\n-//     return;\n-// }\n-// bb8 (cleanup): {\n-//     resume;\n-// }\n-// END rustc.match_guard.CleanupNonCodegenStatements.before.mir\n-\n-// START rustc.match_guard.CleanupNonCodegenStatements.after.mir\n-// bb0: {\n-//     nop;\n-//     _3 = discriminant(_1);\n-//     switchInt(move _3) -> [1isize: bb2, otherwise: bb1];\n-// }\n-// bb1: {\n-//     _0 = const 1i32;\n-//     goto -> bb7;\n-// }\n-// bb2: {\n-//     switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1];\n-// }\n-// bb3: {\n-//     goto -> bb4;\n-// }\n-// bb4: {\n-//     nop;\n-//     nop;\n-//     nop;\n-//     nop;\n-//     StorageLive(_8);\n-//     _8 = _2;\n-//     switchInt(move _8) -> [false: bb6, otherwise: bb5];\n-// }\n-// bb5: {\n-//     StorageDead(_8);\n-//     nop;\n-//     nop;\n-//     nop;\n-//     nop;\n-//     _0 = const 0i32;\n-//     goto -> bb7;\n-// }\n-// bb6: {\n-//     StorageDead(_8);\n-//     goto -> bb1;\n-// }\n-// bb7: {\n-//     return;\n-// }\n-// bb8 (cleanup): {\n-//     resume;\n-// }\n-// END rustc.match_guard.CleanupNonCodegenStatements.after.mir"}, {"sha": "c915554a127be37d39c3e9ba3c38c6bf87b76074", "filename": "src/test/mir-opt/remove_fake_borrows/rustc.match_guard.CleanupNonCodegenStatements.diff", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows%2Frustc.match_guard.CleanupNonCodegenStatements.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,88 @@\n+- // MIR for `match_guard` before CleanupNonCodegenStatements\n++ // MIR for `match_guard` after CleanupNonCodegenStatements\n+  \n+  fn match_guard(_1: std::option::Option<&&i32>, _2: bool) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/remove_fake_borrows.rs:6:16: 6:17\n+      debug c => _2;                       // in scope 0 at $DIR/remove_fake_borrows.rs:6:34: 6:35\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/remove_fake_borrows.rs:6:46: 6:49\n+      let mut _3: isize;                   // in scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+      let mut _4: &std::option::Option<&&i32>; // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+      let mut _5: &&&i32;                  // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+      let mut _6: &&i32;                   // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+      let mut _7: &i32;                    // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+      let mut _8: bool;                    // in scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+  \n+      bb0: {\n+-         FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // bb0[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+          _3 = discriminant(_1);           // bb0[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+          switchInt(move _3) -> [1isize: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+      }\n+  \n+      bb1: {\n+          _0 = const 1i32;                 // bb1[0]: scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/remove_fake_borrows.rs:9:14: 9:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          goto -> bb7;                     // bb1[1]: scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n+      }\n+  \n+      bb2: {\n+          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1]; // bb2[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:14: 8:15\n+      }\n+  \n+      bb3: {\n+          goto -> bb4;                     // bb3[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+      }\n+  \n+      bb4: {\n+-         _4 = &shallow _1;                // bb4[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _5 = &shallow ((_1 as Some).0: &&i32); // bb4[1]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _6 = &shallow (*((_1 as Some).0: &&i32)); // bb4[2]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _7 = &shallow (*(*((_1 as Some).0: &&i32))); // bb4[3]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // bb4[0]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // bb4[1]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // bb4[2]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n++         nop;                             // bb4[3]: scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+          StorageLive(_8);                 // bb4[4]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          _8 = _2;                         // bb4[5]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          switchInt(move _8) -> [false: bb6, otherwise: bb5]; // bb4[6]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+      }\n+  \n+      bb5: {\n+          StorageDead(_8);                 // bb5[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:26: 8:27\n+-         FakeRead(ForMatchGuard, _4);     // bb5[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         FakeRead(ForMatchGuard, _5);     // bb5[2]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         FakeRead(ForMatchGuard, _6);     // bb5[3]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+-         FakeRead(ForMatchGuard, _7);     // bb5[4]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // bb5[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // bb5[2]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // bb5[3]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n++         nop;                             // bb5[4]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+          _0 = const 0i32;                 // bb5[5]: scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/remove_fake_borrows.rs:8:25: 8:26\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          goto -> bb7;                     // bb5[6]: scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_8);                 // bb6[0]: scope 0 at $DIR/remove_fake_borrows.rs:8:26: 8:27\n+          goto -> bb1;                     // bb6[1]: scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n+      }\n+  \n+      bb7: {\n+          return;                          // bb7[0]: scope 0 at $DIR/remove_fake_borrows.rs:11:2: 11:2\n+      }\n+  \n+      bb8 (cleanup): {\n+          resume;                          // bb8[0]: scope 0 at $DIR/remove_fake_borrows.rs:6:1: 11:2\n+      }\n+  }\n+  "}, {"sha": "eba0f567c4a0897e901b483c4f482d5619bf4a67", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 6, "deletions": 91, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -6,6 +6,8 @@\n \n struct Test(i32);\n \n+// EMIT_MIR rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir\n+// EMIT_MIR rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n impl Test {\n     // Make sure we run the pass on a method, not just on bare functions.\n     fn foo<'x>(&self, x: &'x mut i32) -> &'x mut i32 {\n@@ -16,10 +18,14 @@ impl Test {\n     }\n }\n \n+// EMIT_MIR rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir\n+\n impl Drop for Test {\n     fn drop(&mut self) {}\n }\n \n+// EMIT_MIR rustc.main.SimplifyCfg-elaborate-drops.after.mir\n+// EMIT_MIR rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = 0;\n     {\n@@ -43,94 +49,3 @@ fn main() {\n     // escape-to-raw (shr)\n     let _w = _w as *const _;\n }\n-\n-// END RUST SOURCE\n-// START rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir\n-//     bb0: {\n-//         Retag([fn entry] _1);\n-//         Retag([fn entry] _2);\n-//         ...\n-//         _0 = &mut (*_3);\n-//         Retag(_0);\n-//         ...\n-//         return;\n-//     }\n-// END rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir\n-// START rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n-//     bb0: {\n-//         Retag([fn entry] _1);\n-//         Retag([fn entry] _2);\n-//         ...\n-//         _0 = _2;\n-//         Retag(_0);\n-//         ...\n-//         return;\n-//     }\n-// END rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n-// START rustc.main.SimplifyCfg-elaborate-drops.after.mir\n-// fn main() -> () {\n-//     ...\n-//     bb0: {\n-//         ...\n-//         _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3];\n-//     }\n-//\n-//     ...\n-//\n-//     bb2: {\n-//         Retag(_3);\n-//         ...\n-//         _9 = move _3;\n-//         Retag(_9);\n-//         _8 = &mut (*_9);\n-//         Retag(_8);\n-//         StorageDead(_9);\n-//         StorageLive(_10);\n-//         _10 = move _8;\n-//         Retag(_10);\n-//         ...\n-//         _12 = &raw mut (*_10);\n-//         Retag([raw] _12);\n-//         ...\n-//         _15 = move _16(move _17) -> bb5;\n-//     }\n-//\n-//     bb5: {\n-//         Retag(_15);\n-//         ...\n-//         _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7];\n-//     }\n-//\n-//     ...\n-// }\n-// END rustc.main.SimplifyCfg-elaborate-drops.after.mir\n-// START rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n-// fn main::{{closure}}#0(_1: &[closure@main::{{closure}}#0], _2: &i32) -> &i32 {\n-//     ...\n-//     bb0: {\n-//         Retag([fn entry] _1);\n-//         Retag([fn entry] _2);\n-//         StorageLive(_3);\n-//         _3 = _2;\n-//         Retag(_3);\n-//         _0 = _2;\n-//         Retag(_0);\n-//         StorageDead(_3);\n-//         return;\n-//     }\n-// }\n-// END rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n-// START rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir\n-// fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n-//     ...\n-//     bb0: {\n-//         Retag([raw] _1);\n-//         _2 = &mut (*_1);\n-//         _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1;\n-//     }\n-//\n-//     bb1: {\n-//         return;\n-//     }\n-// }\n-// END rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir"}, {"sha": "5aa2510f3449e0a46c848f46648cf7604aa52f60", "filename": "src/test/mir-opt/retag/rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main-%7B%7Bclosure%7D%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main-%7B%7Bclosure%7D%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main-%7B%7Bclosure%7D%7D.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,22 @@\n+// MIR for `main::{{closure}}#0` after SimplifyCfg-elaborate-drops\n+\n+fn main::{{closure}}#0(_1: &[closure@main::{{closure}}#0], _2: &i32) -> &i32 {\n+    debug x => _2;                       // in scope 0 at $DIR/retag.rs:40:32: 40:33\n+    let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:40:44: 40:48\n+    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:41:13: 41:15\n+    scope 1 {\n+        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:41:13: 41:15\n+    }\n+\n+    bb0: {\n+        Retag([fn entry] _1);            // bb0[0]: scope 0 at $DIR/retag.rs:40:31: 43:6\n+        Retag([fn entry] _2);            // bb0[1]: scope 0 at $DIR/retag.rs:40:31: 43:6\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/retag.rs:41:13: 41:15\n+        _3 = _2;                         // bb0[3]: scope 0 at $DIR/retag.rs:41:18: 41:19\n+        Retag(_3);                       // bb0[4]: scope 0 at $DIR/retag.rs:41:18: 41:19\n+        _0 = _2;                         // bb0[5]: scope 1 at $DIR/retag.rs:42:9: 42:10\n+        Retag(_0);                       // bb0[6]: scope 1 at $DIR/retag.rs:42:9: 42:10\n+        StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/retag.rs:43:5: 43:6\n+        return;                          // bb0[8]: scope 0 at $DIR/retag.rs:43:6: 43:6\n+    }\n+}"}, {"sha": "780cb9d4ad51ae0ae903bfff99fdad86d5d6f738", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,227 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/retag.rs:29:11: 29:11\n+    let mut _1: i32;                     // in scope 0 at $DIR/retag.rs:30:9: 30:14\n+    let _2: ();                          // in scope 0 at $DIR/retag.rs:31:5: 37:6\n+    let mut _4: &Test;                   // in scope 0 at $DIR/retag.rs:32:17: 32:24\n+    let _5: Test;                        // in scope 0 at $DIR/retag.rs:32:17: 32:24\n+    let mut _6: &mut i32;                // in scope 0 at $DIR/retag.rs:32:29: 32:35\n+    let mut _7: &mut i32;                // in scope 0 at $DIR/retag.rs:32:29: 32:35\n+    let mut _9: &mut i32;                // in scope 0 at $DIR/retag.rs:33:19: 33:20\n+    let mut _12: *mut i32;               // in scope 0 at $DIR/retag.rs:36:18: 36:29\n+    let mut _14: [closure@main::{{closure}}#0]; // in scope 0 at $DIR/retag.rs:40:31: 43:6\n+    let mut _16: for<'r> fn(&'r i32) -> &'r i32; // in scope 0 at $DIR/retag.rs:44:14: 44:15\n+    let mut _17: &i32;                   // in scope 0 at $DIR/retag.rs:44:16: 44:18\n+    let _18: &i32;                       // in scope 0 at $DIR/retag.rs:44:16: 44:18\n+    let _19: &i32;                       // in scope 0 at $DIR/retag.rs:47:5: 47:24\n+    let mut _20: &Test;                  // in scope 0 at $DIR/retag.rs:47:5: 47:12\n+    let _21: Test;                       // in scope 0 at $DIR/retag.rs:47:5: 47:12\n+    let mut _22: &i32;                   // in scope 0 at $DIR/retag.rs:47:21: 47:23\n+    let _23: &i32;                       // in scope 0 at $DIR/retag.rs:47:21: 47:23\n+    let _24: i32;                        // in scope 0 at $DIR/retag.rs:47:22: 47:23\n+    let mut _26: *const i32;             // in scope 0 at $DIR/retag.rs:50:14: 50:28\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/retag.rs:30:9: 30:14\n+        let _3: &mut i32;                // in scope 1 at $DIR/retag.rs:32:13: 32:14\n+        let _13: for<'r> fn(&'r i32) -> &'r i32 as UserTypeProjection { base: UserType(1), projs: [] }; // in scope 1 at $DIR/retag.rs:40:9: 40:10\n+        scope 2 {\n+            debug v => _3;               // in scope 2 at $DIR/retag.rs:32:13: 32:14\n+            let _8: &mut i32;            // in scope 2 at $DIR/retag.rs:33:13: 33:14\n+            scope 3 {\n+                debug w => _8;           // in scope 3 at $DIR/retag.rs:33:13: 33:14\n+                let _10: &mut i32;       // in scope 3 at $DIR/retag.rs:34:13: 34:14\n+                scope 4 {\n+                    debug w => _10;      // in scope 4 at $DIR/retag.rs:34:13: 34:14\n+                    let _11: *mut i32;   // in scope 4 at $DIR/retag.rs:36:13: 36:15\n+                    scope 5 {\n+                        debug _w => _11; // in scope 5 at $DIR/retag.rs:36:13: 36:15\n+                    }\n+                }\n+            }\n+        }\n+        scope 6 {\n+            debug c => _13;              // in scope 6 at $DIR/retag.rs:40:9: 40:10\n+            let _15: &i32;               // in scope 6 at $DIR/retag.rs:44:9: 44:11\n+            scope 7 {\n+                debug _w => _15;         // in scope 7 at $DIR/retag.rs:44:9: 44:11\n+                let _25: *const i32;     // in scope 7 at $DIR/retag.rs:50:9: 50:11\n+                let mut _27: &i32;       // in scope 7 at $DIR/retag.rs:47:21: 47:23\n+                scope 8 {\n+                    debug _w => _25;     // in scope 8 at $DIR/retag.rs:50:9: 50:11\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/retag.rs:30:9: 30:14\n+        _1 = const 0i32;                 // bb0[1]: scope 0 at $DIR/retag.rs:30:17: 30:18\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:30:17: 30:18\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/retag.rs:31:5: 37:6\n+        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/retag.rs:32:13: 32:14\n+        StorageLive(_4);                 // bb0[4]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+        StorageLive(_5);                 // bb0[5]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+        _5 = Test(const 0i32,);          // bb0[6]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:32:22: 32:23\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        _4 = &_5;                        // bb0[7]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+        Retag(_4);                       // bb0[8]: scope 1 at $DIR/retag.rs:32:17: 32:24\n+        StorageLive(_6);                 // bb0[9]: scope 1 at $DIR/retag.rs:32:29: 32:35\n+        StorageLive(_7);                 // bb0[10]: scope 1 at $DIR/retag.rs:32:29: 32:35\n+        _7 = &mut _1;                    // bb0[11]: scope 1 at $DIR/retag.rs:32:29: 32:35\n+        Retag(_7);                       // bb0[12]: scope 1 at $DIR/retag.rs:32:29: 32:35\n+        _6 = &mut (*_7);                 // bb0[13]: scope 1 at $DIR/retag.rs:32:29: 32:35\n+        Retag([2phase] _6);              // bb0[14]: scope 1 at $DIR/retag.rs:32:29: 32:35\n+        _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // bb0[15]: scope 1 at $DIR/retag.rs:32:17: 32:36\n+                                         // ty::Const\n+                                         // + ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:32:25: 32:28\n+                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/retag.rs:29:1: 51:2\n+    }\n+\n+    bb2: {\n+        Retag(_3);                       // bb2[0]: scope 1 at $DIR/retag.rs:32:17: 32:36\n+        StorageDead(_6);                 // bb2[1]: scope 1 at $DIR/retag.rs:32:35: 32:36\n+        StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/retag.rs:32:35: 32:36\n+        StorageDead(_7);                 // bb2[3]: scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb4, unwind: bb1]; // bb2[4]: scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_5) -> bb1;                 // bb3[0]: scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb4: {\n+        StorageDead(_5);                 // bb4[0]: scope 1 at $DIR/retag.rs:32:36: 32:37\n+        StorageLive(_8);                 // bb4[1]: scope 2 at $DIR/retag.rs:33:13: 33:14\n+        StorageLive(_9);                 // bb4[2]: scope 2 at $DIR/retag.rs:33:19: 33:20\n+        _9 = move _3;                    // bb4[3]: scope 2 at $DIR/retag.rs:33:19: 33:20\n+        Retag(_9);                       // bb4[4]: scope 2 at $DIR/retag.rs:33:19: 33:20\n+        _8 = &mut (*_9);                 // bb4[5]: scope 2 at $DIR/retag.rs:33:19: 33:20\n+        Retag(_8);                       // bb4[6]: scope 2 at $DIR/retag.rs:33:19: 33:20\n+        StorageDead(_9);                 // bb4[7]: scope 2 at $DIR/retag.rs:33:22: 33:23\n+        StorageLive(_10);                // bb4[8]: scope 3 at $DIR/retag.rs:34:13: 34:14\n+        _10 = move _8;                   // bb4[9]: scope 3 at $DIR/retag.rs:34:17: 34:18\n+        Retag(_10);                      // bb4[10]: scope 3 at $DIR/retag.rs:34:17: 34:18\n+        StorageLive(_11);                // bb4[11]: scope 4 at $DIR/retag.rs:36:13: 36:15\n+        StorageLive(_12);                // bb4[12]: scope 4 at $DIR/retag.rs:36:18: 36:29\n+        _12 = &raw mut (*_10);           // bb4[13]: scope 4 at $DIR/retag.rs:36:18: 36:19\n+        Retag([raw] _12);                // bb4[14]: scope 4 at $DIR/retag.rs:36:18: 36:19\n+        _11 = _12;                       // bb4[15]: scope 4 at $DIR/retag.rs:36:18: 36:29\n+        StorageDead(_12);                // bb4[16]: scope 4 at $DIR/retag.rs:36:29: 36:30\n+        _2 = ();                         // bb4[17]: scope 1 at $DIR/retag.rs:31:5: 37:6\n+        StorageDead(_11);                // bb4[18]: scope 4 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_10);                // bb4[19]: scope 3 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_8);                 // bb4[20]: scope 2 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_3);                 // bb4[21]: scope 1 at $DIR/retag.rs:37:5: 37:6\n+        StorageDead(_2);                 // bb4[22]: scope 1 at $DIR/retag.rs:37:5: 37:6\n+        StorageLive(_13);                // bb4[23]: scope 1 at $DIR/retag.rs:40:9: 40:10\n+        StorageLive(_14);                // bb4[24]: scope 1 at $DIR/retag.rs:40:31: 43:6\n+        _14 = [closure@main::{{closure}}#0]; // bb4[25]: scope 1 at $DIR/retag.rs:40:31: 43:6\n+                                         // closure\n+                                         // + def_id: DefId(0:14 ~ retag[317d]::main[0]::{{closure}}[0])\n+                                         // + substs: [\n+                                         //     i8,\n+                                         //     for<'r> extern \"rust-call\" fn((&'r i32,)) -> &'r i32,\n+                                         //     (),\n+                                         // ]\n+        Retag(_14);                      // bb4[26]: scope 1 at $DIR/retag.rs:40:31: 43:6\n+        _13 = move _14 as for<'r> fn(&'r i32) -> &'r i32 (Pointer(ClosureFnPointer(Normal))); // bb4[27]: scope 1 at $DIR/retag.rs:40:31: 43:6\n+        StorageDead(_14);                // bb4[28]: scope 1 at $DIR/retag.rs:43:5: 43:6\n+        StorageLive(_15);                // bb4[29]: scope 6 at $DIR/retag.rs:44:9: 44:11\n+        StorageLive(_16);                // bb4[30]: scope 6 at $DIR/retag.rs:44:14: 44:15\n+        _16 = _13;                       // bb4[31]: scope 6 at $DIR/retag.rs:44:14: 44:15\n+        StorageLive(_17);                // bb4[32]: scope 6 at $DIR/retag.rs:44:16: 44:18\n+        StorageLive(_18);                // bb4[33]: scope 6 at $DIR/retag.rs:44:16: 44:18\n+        _18 = &_1;                       // bb4[34]: scope 6 at $DIR/retag.rs:44:16: 44:18\n+        Retag(_18);                      // bb4[35]: scope 6 at $DIR/retag.rs:44:16: 44:18\n+        _17 = &(*_18);                   // bb4[36]: scope 6 at $DIR/retag.rs:44:16: 44:18\n+        Retag(_17);                      // bb4[37]: scope 6 at $DIR/retag.rs:44:16: 44:18\n+        _15 = move _16(move _17) -> bb5; // bb4[38]: scope 6 at $DIR/retag.rs:44:14: 44:19\n+    }\n+\n+    bb5: {\n+        Retag(_15);                      // bb5[0]: scope 6 at $DIR/retag.rs:44:14: 44:19\n+        StorageDead(_17);                // bb5[1]: scope 6 at $DIR/retag.rs:44:18: 44:19\n+        StorageDead(_16);                // bb5[2]: scope 6 at $DIR/retag.rs:44:18: 44:19\n+        StorageDead(_18);                // bb5[3]: scope 6 at $DIR/retag.rs:44:19: 44:20\n+        StorageLive(_19);                // bb5[4]: scope 7 at $DIR/retag.rs:47:5: 47:24\n+        StorageLive(_20);                // bb5[5]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+        StorageLive(_21);                // bb5[6]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+        _21 = Test(const 0i32,);         // bb5[7]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:47:10: 47:11\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        _20 = &_21;                      // bb5[8]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+        Retag(_20);                      // bb5[9]: scope 7 at $DIR/retag.rs:47:5: 47:12\n+        StorageLive(_22);                // bb5[10]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        StorageLive(_23);                // bb5[11]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _27 = const main::promoted[0];   // bb5[12]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+                                         // ty::Const\n+                                         // + ty: &i32\n+                                         // + val: Unevaluated(DefId(0:13 ~ retag[317d]::main[0]), [], Some(promoted[0]))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:47:21: 47:23\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:13 ~ retag[317d]::main[0]), [], Some(promoted[0])) }\n+        Retag(_27);                      // bb5[13]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _23 = &(*_27);                   // bb5[14]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        Retag(_23);                      // bb5[15]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _22 = &(*_23);                   // bb5[16]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        Retag(_22);                      // bb5[17]: scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // bb5[18]: scope 7 at $DIR/retag.rs:47:5: 47:24\n+                                         // ty::Const\n+                                         // + ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:47:13: 47:20\n+                                         // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb6: {\n+        Retag(_19);                      // bb6[0]: scope 7 at $DIR/retag.rs:47:5: 47:24\n+        StorageDead(_22);                // bb6[1]: scope 7 at $DIR/retag.rs:47:23: 47:24\n+        StorageDead(_20);                // bb6[2]: scope 7 at $DIR/retag.rs:47:23: 47:24\n+        StorageDead(_23);                // bb6[3]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb8, unwind: bb1]; // bb6[4]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_21) -> bb1;                // bb7[0]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+    }\n+\n+    bb8: {\n+        StorageDead(_21);                // bb8[0]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+        StorageDead(_19);                // bb8[1]: scope 7 at $DIR/retag.rs:47:24: 47:25\n+        StorageLive(_25);                // bb8[2]: scope 7 at $DIR/retag.rs:50:9: 50:11\n+        StorageLive(_26);                // bb8[3]: scope 7 at $DIR/retag.rs:50:14: 50:28\n+        _26 = &raw const (*_15);         // bb8[4]: scope 7 at $DIR/retag.rs:50:14: 50:16\n+        Retag([raw] _26);                // bb8[5]: scope 7 at $DIR/retag.rs:50:14: 50:16\n+        _25 = _26;                       // bb8[6]: scope 7 at $DIR/retag.rs:50:14: 50:28\n+        StorageDead(_26);                // bb8[7]: scope 7 at $DIR/retag.rs:50:28: 50:29\n+        _0 = ();                         // bb8[8]: scope 0 at $DIR/retag.rs:29:11: 51:2\n+        StorageDead(_25);                // bb8[9]: scope 7 at $DIR/retag.rs:51:1: 51:2\n+        StorageDead(_15);                // bb8[10]: scope 6 at $DIR/retag.rs:51:1: 51:2\n+        StorageDead(_13);                // bb8[11]: scope 1 at $DIR/retag.rs:51:1: 51:2\n+        StorageDead(_1);                 // bb8[12]: scope 0 at $DIR/retag.rs:51:1: 51:2\n+        return;                          // bb8[13]: scope 0 at $DIR/retag.rs:51:2: 51:2\n+    }\n+}"}, {"sha": "8d891b8933212434aae40095c1af1ea8668607f6", "filename": "src/test/mir-opt/retag/rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,23 @@\n+// MIR for `std::intrinsics::drop_in_place` after SimplifyCfg-make_shim\n+\n+fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _2: &mut Test;               // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+\n+    bb0: {\n+        Retag([raw] _1);                 // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _2 = &mut (*_1);                 // bb0[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1; // bb0[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+}"}, {"sha": "265a4bdd8224321f5c6158b8588403d68e02ecb6", "filename": "src/test/mir-opt/retag/rustc.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `<impl at $DIR/retag.rs:11:1: 19:2>::foo` after SimplifyCfg-elaborate-drops\n+\n+fn <impl at $DIR/retag.rs:11:1: 19:2>::foo(_1: &Test, _2: &mut i32) -> &mut i32 {\n+    debug self => _1;                    // in scope 0 at $DIR/retag.rs:13:16: 13:21\n+    debug x => _2;                       // in scope 0 at $DIR/retag.rs:13:23: 13:24\n+    let mut _0: &mut i32;                // return place in scope 0 at $DIR/retag.rs:13:42: 13:53\n+    let mut _3: &mut i32;                // in scope 0 at $DIR/retag.rs:14:9: 14:10\n+\n+    bb0: {\n+        Retag([fn entry] _1);            // bb0[0]: scope 0 at $DIR/retag.rs:13:5: 15:6\n+        Retag([fn entry] _2);            // bb0[1]: scope 0 at $DIR/retag.rs:13:5: 15:6\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/retag.rs:14:9: 14:10\n+        _3 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/retag.rs:14:9: 14:10\n+        Retag(_3);                       // bb0[4]: scope 0 at $DIR/retag.rs:14:9: 14:10\n+        _0 = &mut (*_3);                 // bb0[5]: scope 0 at $DIR/retag.rs:14:9: 14:10\n+        Retag(_0);                       // bb0[6]: scope 0 at $DIR/retag.rs:14:9: 14:10\n+        StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/retag.rs:15:5: 15:6\n+        return;                          // bb0[8]: scope 0 at $DIR/retag.rs:15:6: 15:6\n+    }\n+}"}, {"sha": "edf1058e4574ee6b6cb2a8b64e272d72c488fa04", "filename": "src/test/mir-opt/retag/rustc.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.%7B%7Bimpl%7D%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,15 @@\n+// MIR for `<impl at $DIR/retag.rs:11:1: 19:2>::foo_shr` after SimplifyCfg-elaborate-drops\n+\n+fn <impl at $DIR/retag.rs:11:1: 19:2>::foo_shr(_1: &Test, _2: &i32) -> &i32 {\n+    debug self => _1;                    // in scope 0 at $DIR/retag.rs:16:20: 16:25\n+    debug x => _2;                       // in scope 0 at $DIR/retag.rs:16:27: 16:28\n+    let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:16:42: 16:49\n+\n+    bb0: {\n+        Retag([fn entry] _1);            // bb0[0]: scope 0 at $DIR/retag.rs:16:5: 18:6\n+        Retag([fn entry] _2);            // bb0[1]: scope 0 at $DIR/retag.rs:16:5: 18:6\n+        _0 = _2;                         // bb0[2]: scope 0 at $DIR/retag.rs:17:9: 17:10\n+        Retag(_0);                       // bb0[3]: scope 0 at $DIR/retag.rs:17:9: 17:10\n+        return;                          // bb0[4]: scope 0 at $DIR/retag.rs:18:6: 18:6\n+    }\n+}"}, {"sha": "af1077e6334cc96db16b2dffc70d0e260bf896d7", "filename": "src/test/mir-opt/retain-never-const.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -14,17 +14,9 @@ impl<T> PrintName<T> {\n     const VOID: ! = panic!();\n }\n \n+// EMIT_MIR rustc.no_codegen.PreCodegen.after.mir\n fn no_codegen<T>() {\n     let _ = PrintName::<T>::VOID;\n }\n \n fn main() {}\n-\n-// END RUST SOURCE\n-// START rustc.no_codegen.PreCodegen.after.mir\n-// bb0: {\n-//     StorageLive(_1);\n-//     _1 = const PrintName::<T>::VOID;\n-//     unreachable;\n-// }\n-// END rustc.no_codegen.PreCodegen.after.mir"}, {"sha": "2d7a79ee44c07163ea5a9c57679be7bb0bae82be", "filename": "src/test/mir-opt/retain-never-const/rustc.no_codegen.PreCodegen.after.mir", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretain-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fretain-never-const%2Frustc.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretain-never-const%2Frustc.no_codegen.PreCodegen.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,21 @@\n+// MIR for `no_codegen` after PreCodegen\n+\n+fn no_codegen() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/retain-never-const.rs:18:20: 18:20\n+    let mut _1: !;                       // in scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n+    scope 1 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n+        _1 = const PrintName::<T>::VOID; // bb0[1]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n+                                         // ty::Const\n+                                         // + ty: !\n+                                         // + val: Unevaluated(DefId(0:9 ~ retain_never_const[317d]::{{impl}}[0]::VOID[0]), [T], None)\n+                                         // mir::Constant\n+                                         // + span: $DIR/retain-never-const.rs:19:13: 19:33\n+                                         // + user_ty: UserType(0)\n+                                         // + literal: Const { ty: !, val: Unevaluated(DefId(0:9 ~ retain_never_const[317d]::{{impl}}[0]::VOID[0]), [T], None) }\n+        unreachable;                     // bb0[2]: scope 0 at $DIR/retain-never-const.rs:19:13: 19:33\n+    }\n+}"}, {"sha": "398fd868734f5ec68d45ecce448e9a4f9438f8e7", "filename": "src/test/mir-opt/simple-match.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,5 +1,6 @@\n // Test that we don't generate unnecessarily large MIR for very simple matches\n \n+// EMIT_MIR rustc.match_bool.mir_map.0.mir\n fn match_bool(x: bool) -> usize {\n     match x {\n         true => 10,\n@@ -8,32 +9,3 @@ fn match_bool(x: bool) -> usize {\n }\n \n fn main() {}\n-\n-\n-// END RUST SOURCE\n-// START rustc.match_bool.mir_map.0.mir\n-// bb0: {\n-//     FakeRead(ForMatchedPlace, _1);\n-//     switchInt(_1) -> [false: bb3, otherwise: bb2];\n-// }\n-// bb1 (cleanup): {\n-//     resume;\n-// }\n-// bb2: {\n-//     falseEdges -> [real: bb4, imaginary: bb3];\n-// }\n-// bb3: {\n-//     _0 = const 20usize;\n-//     goto -> bb5;\n-// }\n-// bb4: {\n-//     _0 = const 10usize;\n-//     goto -> bb5;\n-// }\n-// bb5: {\n-//     goto -> bb6;\n-// }\n-// bb6: {\n-//     return;\n-// }\n-// END rustc.match_bool.mir_map.0.mir"}, {"sha": "e66130b70fbbd5ef6e25f90d2689b0afad21b11f", "filename": "src/test/mir-opt/simple-match/rustc.match_bool.mir_map.0.mir", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimple-match%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimple-match%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2Frustc.match_bool.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,49 @@\n+// MIR for `match_bool` 0 mir_map\n+\n+fn match_bool(_1: bool) -> usize {\n+    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:4:15: 4:16\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:4:27: 4:32\n+\n+    bb0: {\n+        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/simple-match.rs:5:11: 5:12\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simple-match.rs:6:9: 6:13\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/simple-match.rs:4:1: 9:2\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/simple-match.rs:6:9: 6:13\n+    }\n+\n+    bb3: {\n+        _0 = const 20usize;              // bb3[0]: scope 0 at $DIR/simple-match.rs:7:14: 7:16\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000014))\n+                                         // mir::Constant\n+                                         // + span: $DIR/simple-match.rs:7:14: 7:16\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000014)) }\n+        goto -> bb5;                     // bb3[1]: scope 0 at $DIR/simple-match.rs:5:5: 8:6\n+    }\n+\n+    bb4: {\n+        _0 = const 10usize;              // bb4[0]: scope 0 at $DIR/simple-match.rs:6:17: 6:19\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x000000000000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/simple-match.rs:6:17: 6:19\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x000000000000000a)) }\n+        goto -> bb5;                     // bb4[1]: scope 0 at $DIR/simple-match.rs:5:5: 8:6\n+    }\n+\n+    bb5: {\n+        goto -> bb6;                     // bb5[0]: scope 0 at $DIR/simple-match.rs:9:2: 9:2\n+    }\n+\n+    bb6: {\n+        return;                          // bb6[0]: scope 0 at $DIR/simple-match.rs:9:2: 9:2\n+    }\n+}"}, {"sha": "cc6aab7523f009e8064518ecbd79ca142e00bf33", "filename": "src/test/mir-opt/simplify-arm-identity.rs", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -12,64 +12,11 @@ enum Dst {\n     Foo(u8),\n }\n \n+// EMIT_MIR rustc.main.SimplifyArmIdentity.diff\n fn main() {\n     let e: Src = Src::Foo(0);\n     let _: Dst = match e {\n         Src::Foo(x) => Dst::Foo(x),\n         Src::Bar => Dst::Foo(0),\n     };\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyArmIdentity.before.mir\n-// fn main() -> () {\n-//     ...\n-//     bb0: {\n-//         StorageLive(_1);\n-//         ((_1 as Foo).0: u8) = const 0u8;\n-//         discriminant(_1) = 0;\n-//         StorageLive(_2);\n-//         _3 = discriminant(_1);\n-//         switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2];\n-//     }\n-//     bb1: {\n-//         ((_2 as Foo).0: u8) = const 0u8;\n-//         discriminant(_2) = 0;\n-//         goto -> bb4;\n-//     }\n-//     ...\n-//     bb3: {\n-//         _4 = ((_1 as Foo).0: u8);\n-//         ((_2 as Foo).0: u8) = move _4;\n-//         discriminant(_2) = 0;\n-//         goto -> bb4;\n-//     }\n-//     ...\n-// }\n-// END rustc.main.SimplifyArmIdentity.before.mir\n-// START rustc.main.SimplifyArmIdentity.after.mir\n-// fn main() -> () {\n-//     ...\n-//     bb0: {\n-//         StorageLive(_1);\n-//         ((_1 as Foo).0: u8) = const 0u8;\n-//         discriminant(_1) = 0;\n-//         StorageLive(_2);\n-//         _3 = discriminant(_1);\n-//         switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2];\n-//     }\n-//     bb1: {\n-//         ((_2 as Foo).0: u8) = const 0u8;\n-//         discriminant(_2) = 0;\n-//         goto -> bb4;\n-//     }\n-//     ...\n-//     bb3: {\n-//         _4 = ((_1 as Foo).0: u8);\n-//         ((_2 as Foo).0: u8) = move _4;\n-//         discriminant(_2) = 0;\n-//         goto -> bb4;\n-//     }\n-//     ...\n-// }\n-// END rustc.main.SimplifyArmIdentity.after.mir"}, {"sha": "32338127923fa62523c8e519c5a585ec8a1ccdca", "filename": "src/test/mir-opt/simplify-arm-identity/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,64 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-arm-identity.rs:16:11: 16:11\n+      let _1: Src as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/simplify-arm-identity.rs:17:9: 17:10\n+      let mut _2: Dst;                     // in scope 0 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+      let mut _3: isize;                   // in scope 0 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n+      let mut _5: u8;                      // in scope 0 at $DIR/simplify-arm-identity.rs:19:33: 19:34\n+      scope 1 {\n+          debug e => _1;                   // in scope 1 at $DIR/simplify-arm-identity.rs:17:9: 17:10\n+          let _4: u8;                      // in scope 1 at $DIR/simplify-arm-identity.rs:19:18: 19:19\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug x => _4;               // in scope 3 at $DIR/simplify-arm-identity.rs:19:18: 19:19\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify-arm-identity.rs:17:9: 17:10\n+          ((_1 as Foo).0: u8) = const 0u8; // bb0[1]: scope 0 at $DIR/simplify-arm-identity.rs:17:18: 17:29\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:17:27: 17:28\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_1) = 0;            // bb0[2]: scope 0 at $DIR/simplify-arm-identity.rs:17:18: 17:29\n+          StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+          _3 = discriminant(_1);           // bb0[4]: scope 1 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n+          switchInt(move _3) -> [0isize: bb3, 1isize: bb1, otherwise: bb2]; // bb0[5]: scope 1 at $DIR/simplify-arm-identity.rs:19:9: 19:20\n+      }\n+  \n+      bb1: {\n+          ((_2 as Foo).0: u8) = const 0u8; // bb1[0]: scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:20:30: 20:31\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_2) = 0;            // bb1[1]: scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n+          goto -> bb4;                     // bb1[2]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // bb2[0]: scope 1 at $DIR/simplify-arm-identity.rs:18:24: 18:25\n+      }\n+  \n+      bb3: {\n+          _4 = ((_1 as Foo).0: u8);        // bb3[0]: scope 1 at $DIR/simplify-arm-identity.rs:19:18: 19:19\n+          ((_2 as Foo).0: u8) = move _4;   // bb3[1]: scope 3 at $DIR/simplify-arm-identity.rs:19:24: 19:35\n+          discriminant(_2) = 0;            // bb3[2]: scope 3 at $DIR/simplify-arm-identity.rs:19:24: 19:35\n+          goto -> bb4;                     // bb3[3]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_2);                 // bb4[0]: scope 1 at $DIR/simplify-arm-identity.rs:21:6: 21:7\n+          StorageDead(_1);                 // bb4[1]: scope 0 at $DIR/simplify-arm-identity.rs:22:1: 22:2\n+          return;                          // bb4[2]: scope 0 at $DIR/simplify-arm-identity.rs:22:2: 22:2\n+      }\n+  }\n+  "}, {"sha": "48cee3c30d2da8e9876f5f547805b135742f864d", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs", "status": "modified", "additions": 1, "deletions": 73, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -8,82 +8,10 @@ struct Temp {\n \n fn use_u8(_: u8) {}\n \n+// EMIT_MIR rustc.main.SimplifyLocals.diff\n fn main() {\n     let ((), ()) = ((), ());\n     use_zst(((), ()));\n \n     use_u8((Temp { x: 40 }).x + 2);\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.main.SimplifyLocals.before.mir\n-// let mut _0: ();\n-// let mut _1: ((), ());\n-// let mut _2: ();\n-// let mut _3: ();\n-// let _4: ();\n-// let mut _5: ((), ());\n-// let mut _6: ();\n-// let mut _7: ();\n-// let _8: ();\n-// let mut _9: u8;\n-// let mut _10: u8;\n-// let mut _11: Temp;\n-// scope 1 {\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   StorageLive(_2);\n-//   _2 = const ();\n-//   StorageLive(_3);\n-//   _3 = const ();\n-//   _1 = const {transmute(()): ((), ())};\n-//   StorageDead(_3);\n-//   StorageDead(_2);\n-//   StorageDead(_1);\n-//   StorageLive(_4);\n-//   StorageLive(_6);\n-//   _6 = const ();\n-//   StorageLive(_7);\n-//   _7 = const ();\n-//   StorageDead(_7);\n-//   StorageDead(_6);\n-//   _4 = const use_zst(const {transmute(()): ((), ())}) -> bb1;\n-// }\n-// bb1: {\n-//   StorageDead(_4);\n-//   StorageLive(_8);\n-//   StorageLive(_10);\n-//   StorageLive(_11);\n-//   _11 = const {transmute(0x28) : Temp};\n-//   _10 = const 40u8;\n-//   StorageDead(_10);\n-//   _8 = const use_u8(const 42u8) -> bb2;\n-// }\n-// bb2: {\n-//   StorageDead(_11);\n-//   StorageDead(_8);\n-//   return;\n-// }\n-// END rustc.main.SimplifyLocals.before.mir\n-// START rustc.main.SimplifyLocals.after.mir\n-// let mut _0: ();\n-// let _1: ();\n-// let _2: ();\n-// scope 1 {\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   _1 = const use_zst(const {transmute(()): ((), ())}) -> bb1;\n-// }\n-// bb1: {\n-//   StorageDead(_1);\n-//   StorageLive(_2);\n-//   _2 = const use_u8(const 42u8) -> bb2;\n-// }\n-// bb2: {\n-//   StorageDead(_2);\n-//   return;\n-// }\n-// END rustc.main.SimplifyLocals.after.mir"}, {"sha": "15deb3e31bd5b068ffa8ed0beae3f5d1a1760152", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,132 @@\n+- // MIR for `main` before SimplifyLocals\n++ // MIR for `main` after SimplifyLocals\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 12:11\n+-     let mut _1: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-     let mut _2: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n+-     let mut _3: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-     let _4: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-     let mut _5: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+-     let mut _6: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n+-     let mut _7: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-     let _8: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-     let mut _9: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+-     let mut _10: u8;                     // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-     let mut _11: Temp;                   // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n++     let _1: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++     let _2: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-         StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n+-         _2 = const ();                   // bb0[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n++         StorageLive(_1);                 // bb0[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         _1 = const use_zst(const {transmute(()): ((), ())}) -> bb1; // bb0[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+                                           // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-         _3 = const ();                   // bb0[4]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-                                          // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         _1 = const {transmute(()): ((), ())}; // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-                                          // ty::Const\n+-                                          // + ty: ((), ())\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n+-                                          // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n+-         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n+-         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n+-         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n+-         StorageLive(_4);                 // bb0[9]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         StorageLive(_6);                 // bb0[10]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n+-         _6 = const ();                   // bb0[11]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n+-                                          // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         StorageLive(_7);                 // bb0[12]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-         _7 = const ();                   // bb0[13]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-                                          // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         StorageDead(_7);                 // bb0[14]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n+-         StorageDead(_6);                 // bb0[15]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n+-         _4 = const use_zst(const {transmute(()): ((), ())}) -> bb1; // bb0[16]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-                                          // ty::Const\n+                                           // + ty: fn(((), ())) {use_zst}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n+                                           // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: ((), ())\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+                                           // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_4);                 // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n+-         StorageLive(_8);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         StorageLive(_10);                // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-         StorageLive(_11);                // bb1[3]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         _11 = const {transmute(0x28): Temp}; // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n++         StorageDead(_1);                 // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n++         StorageLive(_2);                 // bb1[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         _2 = const use_u8(const 42u8) -> bb2; // bb1[2]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+                                           // ty::Const\n+-                                          // + ty: Temp\n+-                                          // + val: Value(Scalar(0x28))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-                                          // + literal: Const { ty: Temp, val: Value(Scalar(0x28)) }\n+-         _10 = const 40u8;                // bb1[5]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-                                          // ty::Const\n+-                                          // + ty: u8\n+-                                          // + val: Value(Scalar(0x28))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n+-                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n+-         StorageDead(_10);                // bb1[6]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n+-         _8 = const use_u8(const 42u8) -> bb2; // bb1[7]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-                                          // ty::Const\n+                                           // + ty: fn(u8) {use_u8}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n+                                           // + literal: Const { ty: fn(u8) {use_u8}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x2a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n+      }\n+  \n+      bb2: {\n+-         StorageDead(_11);                // bb2[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n+-         StorageDead(_8);                 // bb2[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n+-         return;                          // bb2[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n++         StorageDead(_2);                 // bb2[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n++         return;                          // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n+      }\n+  }\n+  "}, {"sha": "8d588a39d651b1789f739d44e0b38070fd67ae11", "filename": "src/test/mir-opt/simplify_cfg.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,5 +1,7 @@\n // Test that the goto chain starting from bb0 is collapsed.\n \n+// EMIT_MIR rustc.main.SimplifyCfg-initial.diff\n+// EMIT_MIR rustc.main.SimplifyCfg-early-opt.diff\n fn main() {\n     loop {\n         if bar() {\n@@ -12,43 +14,3 @@ fn main() {\n fn bar() -> bool {\n     true\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyCfg-initial.before.mir\n-//     bb0: {\n-//         goto -> bb1;\n-//     }\n-//     bb1: {\n-//         falseUnwind -> [real: bb3, cleanup: bb4];\n-//     }\n-//     ...\n-//     bb11: {\n-//         ...\n-//         goto -> bb1;\n-//     }\n-// END rustc.main.SimplifyCfg-initial.before.mir\n-// START rustc.main.SimplifyCfg-initial.after.mir\n-//     bb0: {\n-//         falseUnwind -> [real: bb1, cleanup: bb2];\n-//     }\n-//     ...\n-//     bb5: {\n-//         ...\n-//         goto -> bb0;\n-//     }\n-// END rustc.main.SimplifyCfg-initial.after.mir\n-// START rustc.main.SimplifyCfg-early-opt.before.mir\n-//     bb0: {\n-//         goto -> bb1;\n-//     }\n-//     bb1: {\n-//         StorageLive(_2);\n-//         _2 = const bar() -> bb3;\n-//     }\n-// END rustc.main.SimplifyCfg-early-opt.before.mir\n-// START rustc.main.SimplifyCfg-early-opt.after.mir\n-//     bb0: {\n-//         StorageLive(_2);\n-//         _2 = const bar() -> bb1;\n-//     }\n-// END rustc.main.SimplifyCfg-early-opt.after.mir"}, {"sha": "9225bcd0b6520a958e88ae98681204a7ce3ee4c9", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-early-opt.diff", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,62 @@\n+- // MIR for `main` before SimplifyCfg-early-opt\n++ // MIR for `main` after SimplifyCfg-early-opt\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_cfg.rs:5:11: 5:11\n+      let mut _1: ();                      // in scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+      let mut _2: bool;                    // in scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+      let mut _3: !;                       // in scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n+  \n+      bb0: {\n+-         goto -> bb1;                     // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-     }\n+- \n+-     bb1: {\n+-         StorageLive(_2);                 // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> bb3;         // bb1[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = const bar() -> bb1;         // bb0[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+                                           // ty::Const\n+                                           // + ty: fn() -> bool {bar}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n+                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+-     bb2 (cleanup): {\n+-         resume;                          // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n++     bb1: {\n++         switchInt(_2) -> [false: bb2, otherwise: bb3]; // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+      }\n+  \n+-     bb3: {\n+-         nop;                             // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb5, otherwise: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++     bb2: {\n++         _1 = ();                         // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n++         goto -> bb0;                     // bb2[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+      }\n+  \n+-     bb4: {\n+-         goto -> bb6;                     // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     }\n+- \n+-     bb5: {\n+-         _1 = ();                         // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-     }\n+- \n+-     bb6: {\n+-         _0 = ();                         // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         StorageDead(_2);                 // bb6[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         return;                          // bb6[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n++     bb3: {\n++         _0 = ();                         // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n++         StorageDead(_2);                 // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n++         return;                          // bb3[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "856ee3508cbead6bf4c46f7e79206691e48416a5", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-initial.diff", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,96 @@\n+- // MIR for `main` before SimplifyCfg-initial\n++ // MIR for `main` after SimplifyCfg-initial\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_cfg.rs:5:11: 5:11\n+      let mut _1: ();                      // in scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+      let mut _2: bool;                    // in scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+      let mut _3: !;                       // in scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n+  \n+      bb0: {\n+-         goto -> bb1;                     // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb2]; // bb0[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+      }\n+  \n+      bb1: {\n+-         falseUnwind -> [real: bb3, cleanup: bb4]; // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-     }\n+- \n+-     bb2: {\n+-         goto -> bb13;                    // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-     }\n+- \n+-     bb3: {\n+-         StorageLive(_2);                 // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> [return: bb5, unwind: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         StorageLive(_2);                 // bb1[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = const bar() -> [return: bb3, unwind: bb2]; // bb1[1]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+                                           // ty::Const\n+                                           // + ty: fn() -> bool {bar}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n+                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+-     bb4 (cleanup): {\n+-         resume;                          // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n++     bb2 (cleanup): {\n++         resume;                          // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+      }\n+  \n+-     bb5: {\n+-         FakeRead(ForMatchedPlace, _2);   // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb7, otherwise: bb6]; // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++     bb3: {\n++         FakeRead(ForMatchedPlace, _2);   // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         switchInt(_2) -> [false: bb5, otherwise: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+      }\n+  \n+-     bb6: {\n+-         falseEdges -> [real: bb8, imaginary: bb7]; // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++     bb4: {\n++         falseEdges -> [real: bb6, imaginary: bb5]; // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+      }\n+  \n+-     bb7: {\n+-         _1 = ();                         // bb7[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb12;                    // bb7[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++     bb5: {\n++         _1 = ();                         // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n++         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+      }\n+  \n+-     bb8: {\n+-         _0 = ();                         // bb8[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb9;                     // bb8[1]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-     }\n+- \n+-     bb9: {\n+-         StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb2;                     // bb9[1]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-     }\n+- \n+-     bb10: {\n+-         unreachable;                     // bb10[0]: scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n+-     }\n+- \n+-     bb11: {\n+-         goto -> bb12;                    // bb11[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     }\n+- \n+-     bb12: {\n+-         StorageDead(_2);                 // bb12[0]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb1;                     // bb12[1]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-     }\n+- \n+-     bb13: {\n+-         return;                          // bb13[0]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n++     bb6: {\n++         _0 = ();                         // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n++         StorageDead(_2);                 // bb6[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n++         return;                          // bb6[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "e2d3ebe69c4a4e9c31bcc26621c1cfb3c9b80359", "filename": "src/test/mir-opt/simplify_if.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,19 +1,9 @@\n+#[inline(never)]\n+fn noop() {}\n+\n+// EMIT_MIR rustc.main.SimplifyBranches-after-const-prop.diff\n fn main() {\n     if false {\n-        println!(\"hello world!\");\n+        noop();\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyBranches-after-const-prop.before.mir\n-// bb0: {\n-//     ...\n-//     switchInt(const false) -> [false: bb1, otherwise: bb2];\n-// }\n-// END rustc.main.SimplifyBranches-after-const-prop.before.mir\n-// START rustc.main.SimplifyBranches-after-const-prop.after.mir\n-// bb0: {\n-//     ...\n-//     goto -> bb1;\n-// }\n-// END rustc.main.SimplifyBranches-after-const-prop.after.mir"}, {"sha": "9e53a0f18af35594f82882e80a8b734f60f572c1", "filename": "src/test/mir-opt/simplify_if/rustc.main.SimplifyBranches-after-const-prop.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `main` before SimplifyBranches-after-const-prop\n++ // MIR for `main` after SimplifyBranches-after-const-prop\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_if.rs:5:11: 5:11\n+      let mut _1: bool;                    // in scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n+      let _2: ();                          // in scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n+          _1 = const false;                // bb0[1]: scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_if.rs:6:8: 6:13\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+-         switchInt(const false) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x00))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify_if.rs:6:5: 8:6\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         goto -> bb1;                     // bb0[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+      }\n+  \n+      bb1: {\n+          _0 = ();                         // bb1[0]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+      }\n+  \n+      bb2: {\n+          StorageLive(_2);                 // bb2[0]: scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+          _2 = const noop() -> bb3;        // bb2[1]: scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+                                           // ty::Const\n+                                           // + ty: fn() {noop}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_if.rs:7:9: 7:13\n+                                           // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // bb3[0]: scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n+          _0 = ();                         // bb3[1]: scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n+          goto -> bb4;                     // bb3[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_1);                 // bb4[0]: scope 0 at $DIR/simplify_if.rs:9:1: 9:2\n+          return;                          // bb4[1]: scope 0 at $DIR/simplify_if.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "233f9ff4c400bb5662a12285b1f72a649d77640e", "filename": "src/test/mir-opt/simplify_match.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,22 +1,10 @@\n+#[inline(never)]\n+fn noop() {}\n+\n+// EMIT_MIR rustc.main.SimplifyBranches-after-copy-prop.diff\n fn main() {\n     match { let x = false; x } {\n-        true => println!(\"hello world!\"),\n+        true => noop(),\n         false => {},\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.SimplifyBranches-after-copy-prop.before.mir\n-// bb0: {\n-//     ...\n-//     switchInt(const false) -> [false: bb1, otherwise: bb2];\n-// }\n-// bb1: {\n-// END rustc.main.SimplifyBranches-after-copy-prop.before.mir\n-// START rustc.main.SimplifyBranches-after-copy-prop.after.mir\n-// bb0: {\n-//     ...\n-//     goto -> bb1;\n-// }\n-// bb1: {\n-// END rustc.main.SimplifyBranches-after-copy-prop.after.mir"}, {"sha": "5429032b099c2733f82a0f97df334865919b6376", "filename": "src/test/mir-opt/simplify_match/rustc.main.SimplifyBranches-after-copy-prop.diff", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,48 @@\n+- // MIR for `main` before SimplifyBranches-after-copy-prop\n++ // MIR for `main` after SimplifyBranches-after-copy-prop\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_match.rs:5:11: 5:11\n+      let mut _1: bool;                    // in scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n+      let _2: bool;                        // in scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/simplify_match.rs:6:17: 6:18\n+      }\n+  \n+      bb0: {\n+          nop;                             // bb0[0]: scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n+          nop;                             // bb0[1]: scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n+          nop;                             // bb0[2]: scope 0 at $DIR/simplify_match.rs:6:21: 6:26\n+          nop;                             // bb0[3]: scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n+          nop;                             // bb0[4]: scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n+-         switchInt(const false) -> [false: bb1, otherwise: bb2]; // bb0[5]: scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x00))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify_match.rs:6:21: 6:26\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         goto -> bb1;                     // bb0[5]: scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n+      }\n+  \n+      bb1: {\n+          nop;                             // bb1[0]: scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n+          goto -> bb3;                     // bb1[1]: scope 0 at $DIR/simplify_match.rs:6:5: 9:6\n+      }\n+  \n+      bb2: {\n+          _0 = const noop() -> bb3;        // bb2[0]: scope 0 at $DIR/simplify_match.rs:7:17: 7:23\n+                                           // ty::Const\n+                                           // + ty: fn() {noop}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_match.rs:7:17: 7:21\n+                                           // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb3: {\n+          nop;                             // bb3[0]: scope 0 at $DIR/simplify_match.rs:10:1: 10:2\n+          return;                          // bb3[1]: scope 0 at $DIR/simplify_match.rs:10:2: 10:2\n+      }\n+  }\n+  "}, {"sha": "88a0451a76f67e1b32f7c34d23c85a92b3a0c07f", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 4, "deletions": 207, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,3 +1,7 @@\n+// EMIT_MIR rustc.try_identity.SimplifyArmIdentity.diff\n+// EMIT_MIR rustc.try_identity.SimplifyBranchSame.after.mir\n+// EMIT_MIR rustc.try_identity.SimplifyLocals.after.mir\n+\n fn try_identity(x: Result<u32, i32>) -> Result<u32, i32> {\n     let y = x?;\n     Ok(y)\n@@ -6,210 +10,3 @@ fn try_identity(x: Result<u32, i32>) -> Result<u32, i32> {\n fn main() {\n     let _ = try_identity(Ok(0));\n }\n-\n-// END RUST SOURCE\n-// START rustc.try_identity.SimplifyArmIdentity.before.mir\n-// fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-//     debug x => _1;\n-//     let mut _0: std::result::Result<u32, i32>;\n-//     let _2: u32;\n-//     let mut _3: std::result::Result<u32, i32>;\n-//     let mut _4: std::result::Result<u32, i32>;\n-//     let mut _5: isize;\n-//     let _6: i32;\n-//     let mut _7: !;\n-//     let mut _8: i32;\n-//     let mut _9: i32;\n-//     let _10: u32;\n-//     let mut _11: u32;\n-//     scope 1 {\n-//         debug y => _10;\n-//     }\n-//     scope 2 {\n-//         debug err => _6;\n-//         scope 3 {\n-//             scope 7 {\n-//                 debug t => _6;\n-//             }\n-//             scope 8 {\n-//                 debug v => _6;\n-//                 let mut _12: i32;\n-//             }\n-//         }\n-//     }\n-//     scope 4 {\n-//         debug val => _10;\n-//         scope 5 {\n-//         }\n-//     }\n-//     scope 6 {\n-//         debug self => _1;\n-//     }\n-//     bb0: {\n-//         _5 = discriminant(_1);\n-//         switchInt(move _5) -> [0isize: bb1, otherwise: bb2];\n-//     }\n-//     bb1: {\n-//         _10 = ((_1 as Ok).0: u32);\n-//         ((_0 as Ok).0: u32) = move _10;\n-//         discriminant(_0) = 0;\n-//         goto -> bb3;\n-//     }\n-//     bb2: {\n-//         _6 = ((_1 as Err).0: i32);\n-//         ((_0 as Err).0: i32) = move _6;\n-//         discriminant(_0) = 1;\n-//         goto -> bb3;\n-//     }\n-//     bb3: {\n-//         return;\n-//     }\n-// }\n-// END rustc.try_identity.SimplifyArmIdentity.before.mir\n-\n-// START rustc.try_identity.SimplifyArmIdentity.after.mir\n-// fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-//     debug x => _1;\n-//     let mut _0: std::result::Result<u32, i32>;\n-//     let _2: u32;\n-//     let mut _3: std::result::Result<u32, i32>;\n-//     let mut _4: std::result::Result<u32, i32>;\n-//     let mut _5: isize;\n-//     let _6: i32;\n-//     let mut _7: !;\n-//     let mut _8: i32;\n-//     let mut _9: i32;\n-//     let _10: u32;\n-//     let mut _11: u32;\n-//     scope 1 {\n-//         debug y => _10;\n-//     }\n-//     scope 2 {\n-//         debug err => _6;\n-//         scope 3 {\n-//             scope 7 {\n-//                 debug t => _6;\n-//             }\n-//             scope 8 {\n-//                 debug v => _6;\n-//                 let mut _12: i32;\n-//             }\n-//         }\n-//     }\n-//     scope 4 {\n-//         debug val => _10;\n-//         scope 5 {\n-//         }\n-//     }\n-//     scope 6 {\n-//         debug self => _1;\n-//     }\n-//     bb0: {\n-//         _5 = discriminant(_1);\n-//         switchInt(move _5) -> [0isize: bb1, otherwise: bb2];\n-//     }\n-//     bb1: {\n-//         _0 = move _1;\n-//         nop;\n-//         nop;\n-//         goto -> bb3;\n-//     }\n-//     bb2: {\n-//         _0 = move _1;\n-//         nop;\n-//         nop;\n-//         goto -> bb3;\n-//     }\n-//     bb3: {\n-//         return;\n-//     }\n-// }\n-// END rustc.try_identity.SimplifyArmIdentity.after.mir\n-\n-// START rustc.try_identity.SimplifyBranchSame.after.mir\n-// fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-//     debug x => _1;\n-//     let mut _0: std::result::Result<u32, i32>;\n-//     let _2: u32;\n-//     let mut _3: std::result::Result<u32, i32>;\n-//     let mut _4: std::result::Result<u32, i32>;\n-//     let mut _5: isize;\n-//     let _6: i32;\n-//     let mut _7: !;\n-//     let mut _8: i32;\n-//     let mut _9: i32;\n-//     let _10: u32;\n-//     let mut _11: u32;\n-//     scope 1 {\n-//         debug y => _10;\n-//     }\n-//     scope 2 {\n-//         debug err => _6;\n-//         scope 3 {\n-//             scope 7 {\n-//                 debug t => _6;\n-//             }\n-//             scope 8 {\n-//                 debug v => _6;\n-//                 let mut _12: i32;\n-//             }\n-//         }\n-//     }\n-//     scope 4 {\n-//         debug val => _10;\n-//         scope 5 {\n-//         }\n-//     }\n-//     scope 6 {\n-//         debug self => _1;\n-//     }\n-//     bb0: {\n-//         _5 = discriminant(_1);\n-//         goto -> bb1;\n-//     }\n-//     bb1: {\n-//         _0 = move _1;\n-//         nop;\n-//         nop;\n-//         goto -> bb2;\n-//     }\n-//     bb2: {\n-//         return;\n-//     }\n-// }\n-// END rustc.try_identity.SimplifyBranchSame.after.mir\n-\n-// START rustc.try_identity.SimplifyLocals.after.mir\n-// fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-//     debug x => _1;\n-//     let mut _0: std::result::Result<u32, i32>;\n-//     let _2: i32;\n-//     let _3: u32;\n-//     scope 1 {\n-//         debug y => _3;\n-//     }\n-//     scope 2 {\n-//         debug err => _2;\n-//         scope 3 {\n-//             scope 7 {\n-//                 debug t => _2;\n-//             }\n-//             scope 8 {\n-//                 debug v => _2;\n-//             }\n-//         }\n-//     }\n-//     scope 4 {\n-//         debug val => _3;\n-//         scope 5 {\n-//         }\n-//     }\n-//     scope 6 {\n-//         debug self => _1;\n-//     }\n-//     bb0: {\n-//         _0 = move _1;\n-//         return;\n-//     }\n-// }\n-// END rustc.try_identity.SimplifyLocals.after.mir"}, {"sha": "7ae5891977208475be2cf3f825593828889f90a7", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,70 @@\n+- // MIR for `try_identity` before SimplifyArmIdentity\n++ // MIR for `try_identity` after SimplifyArmIdentity\n+  \n+  fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:6:13: 6:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n+      scope 1 {\n+          debug y => _10;                  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+      }\n+      scope 2 {\n+          debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+          scope 3 {\n+              scope 7 {\n+                  debug t => _6;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL: 566:14\n+              }\n+              scope 8 {\n+                  debug v => _6;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1555:20\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n+              }\n+          }\n+      }\n+      scope 4 {\n+          debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+          scope 5 {\n+          }\n+      }\n+      scope 6 {\n+          debug self => _1;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL: 1545:24\n+      }\n+  \n+      bb0: {\n+          _5 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+          switchInt(move _5) -> [0isize: bb1, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      }\n+  \n+      bb1: {\n+-         _10 = ((_1 as Ok).0: u32);       // bb1[0]: scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+-         ((_0 as Ok).0: u32) = move _10;  // bb1[1]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+-         discriminant(_0) = 0;            // bb1[2]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n++         _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n++         nop;                             // bb1[1]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n++         nop;                             // bb1[2]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+          goto -> bb3;                     // bb1[3]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+      }\n+  \n+      bb2: {\n+-         _6 = ((_1 as Err).0: i32);       // bb2[0]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+-         ((_0 as Err).0: i32) = move _6;  // bb2[1]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1556:15\n+-         discriminant(_0) = 1;            // bb2[2]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1556:15\n++         _0 = move _1;                    // bb2[0]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1556:15\n++         nop;                             // bb2[1]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1556:15\n++         nop;                             // bb2[2]: scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1556:15\n+          goto -> bb3;                     // bb2[3]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+      }\n+  \n+      bb3: {\n+          return;                          // bb3[0]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "7d8cfe1d2eed1ca40376c1e5685588db33ba298b", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,55 @@\n+// MIR for `try_identity` after SimplifyBranchSame\n+\n+fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n+    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:6:13: 6:14\n+    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n+    scope 1 {\n+        debug y => _10;                  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+    }\n+    scope 2 {\n+        debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        scope 3 {\n+            scope 7 {\n+                debug t => _6;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL: 566:14\n+            }\n+            scope 8 {\n+                debug v => _6;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1555:20\n+                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n+            }\n+        }\n+    }\n+    scope 4 {\n+        debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        scope 5 {\n+        }\n+    }\n+    scope 6 {\n+        debug self => _1;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL: 1545:24\n+    }\n+\n+    bb0: {\n+        _5 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+        goto -> bb1;                     // bb0[1]: scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    }\n+\n+    bb1: {\n+        _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        nop;                             // bb1[1]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        nop;                             // bb1[2]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        goto -> bb2;                     // bb1[3]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+    }\n+\n+    bb2: {\n+        return;                          // bb2[0]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+    }\n+}"}, {"sha": "6757883309832096baf063b9cc08a4d5f78021c4", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,35 @@\n+// MIR for `try_identity` after SimplifyLocals\n+\n+fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n+    let _2: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n+    let _3: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n+    scope 1 {\n+        debug y => _3;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+    }\n+    scope 2 {\n+        debug err => _2;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        scope 3 {\n+            scope 7 {\n+                debug t => _2;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL: 566:14\n+            }\n+            scope 8 {\n+                debug v => _2;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL: 1555:20\n+            }\n+        }\n+    }\n+    scope 4 {\n+        debug val => _3;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        scope 5 {\n+        }\n+    }\n+    scope 6 {\n+        debug self => _1;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL: 1545:24\n+    }\n+\n+    bb0: {\n+        _0 = move _1;                    // bb0[0]: scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n+        return;                          // bb0[1]: scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+    }\n+}"}, {"sha": "bf965bd18e82f11295f2e031f4e0b8bba0996917", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 1, "deletions": 85, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,90 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n \n+// EMIT_MIR rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir\n fn main() {\n     let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir\n-// let mut _2: usize;\n-// let mut _3: usize;\n-// let mut _4: usize;\n-// let mut _5: *mut std::string::String;\n-// let mut _6: bool;\n-// let mut _7: *mut std::string::String;\n-// let mut _8: bool;\n-// let mut _9: *mut std::string::String;\n-// let mut _10: *mut std::string::String;\n-// let mut _11: *mut std::string::String;\n-// let mut _12: bool;\n-// let mut _13: *mut std::string::String;\n-// let mut _14: bool;\n-// let mut _15: *mut [std::string::String];\n-// bb0: {\n-//     goto -> bb15;\n-// }\n-// bb1: {\n-//     return;\n-// }\n-// bb2 (cleanup): {\n-//     resume;\n-// }\n-// bb3 (cleanup): {\n-//     _5 = &raw mut (*_1)[_4];\n-//     _4 = Add(move _4, const 1usize);\n-//     drop((*_5)) -> bb4;\n-// }\n-// bb4 (cleanup): {\n-//     _6 = Eq(_4, _3);\n-//     switchInt(move _6) -> [false: bb3, otherwise: bb2];\n-// }\n-// bb5: {\n-//     _7 = &raw mut (*_1)[_4];\n-//     _4 = Add(move _4, const 1usize);\n-//     drop((*_7)) -> [return: bb6, unwind: bb4];\n-// }\n-// bb6: {\n-//     _8 = Eq(_4, _3);\n-//     switchInt(move _8) -> [false: bb5, otherwise: bb1];\n-// }\n-// bb7: {\n-//     _4 = const 0usize;\n-//     goto -> bb6;\n-// }\n-// bb8: {\n-//     goto -> bb7;\n-// }\n-// bb9 (cleanup): {\n-//     _11 = _9;\n-//     _9 = Offset(move _9, const 1usize);\n-//     drop((*_11)) -> bb10;\n-// }\n-// bb10 (cleanup): {\n-//     _12 = Eq(_9, _10);\n-//     switchInt(move _12) -> [false: bb9, otherwise: bb2];\n-// }\n-// bb11: {\n-//     _13 = _9;\n-//     _9 = Offset(move _9, const 1usize);\n-//     drop((*_13)) -> [return: bb12, unwind: bb10];\n-// }\n-// bb12: {\n-//     _14 = Eq(_9, _10);\n-//     switchInt(move _14) -> [false: bb11, otherwise: bb1];\n-// }\n-// bb13: {\n-//     _15 = &raw mut (*_1);\n-//     _9 = move _15 as *mut std::string::String (Misc);\n-//     _10 = Offset(_9, move _3);\n-//     goto -> bb12;\n-// }\n-// bb14: {\n-//     goto -> bb13;\n-// }\n-// bb15: {\n-//     _2 = SizeOf(std::string::String);\n-//     _3 = Len((*_1));\n-//     switchInt(move _2) -> [0usize: bb8, otherwise: bb14];\n-// }\n-// END rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir"}, {"sha": "13178d94f170ab6cec3b79dd20eb7a911181134e", "filename": "src/test/mir-opt/slice-drop-shim/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,131 @@\n+// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+\n+fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _2: usize;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _3: usize;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _4: usize;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _5: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _6: bool;                    // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _7: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _8: bool;                    // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _9: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _10: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _11: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _12: bool;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _13: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _14: bool;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+\n+    bb0: {\n+        goto -> bb15;                    // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb1: {\n+        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb3 (cleanup): {\n+        _5 = &raw mut (*_1)[_4];         // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _4 = Add(move _4, const 1usize); // bb3[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        drop((*_5)) -> bb4;              // bb3[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb4 (cleanup): {\n+        _6 = Eq(_4, _3);                 // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // bb4[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb5: {\n+        _7 = &raw mut (*_1)[_4];         // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _4 = Add(move _4, const 1usize); // bb5[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        drop((*_7)) -> [return: bb6, unwind: bb4]; // bb5[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb6: {\n+        _8 = Eq(_4, _3);                 // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // bb6[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb7: {\n+        _4 = const 0usize;               // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        goto -> bb6;                     // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb8: {\n+        goto -> bb7;                     // bb8[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb9 (cleanup): {\n+        _11 = _9;                        // bb9[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _9 = Offset(move _9, const 1usize); // bb9[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        drop((*_11)) -> bb10;            // bb9[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb10 (cleanup): {\n+        _12 = Eq(_9, _10);               // bb10[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // bb10[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb11: {\n+        _13 = _9;                        // bb11[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _9 = Offset(move _9, const 1usize); // bb11[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+        drop((*_13)) -> [return: bb12, unwind: bb10]; // bb11[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb12: {\n+        _14 = Eq(_9, _10);               // bb12[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // bb12[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb13: {\n+        _15 = &raw mut (*_1);            // bb13[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _9 = move _15 as *mut std::string::String (Misc); // bb13[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _10 = Offset(_9, move _3);       // bb13[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        goto -> bb12;                    // bb13[3]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb14: {\n+        goto -> bb13;                    // bb14[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb15: {\n+        _2 = SizeOf(std::string::String); // bb15[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _3 = Len((*_1));                 // bb15[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // bb15[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+}"}, {"sha": "a269914f2620d7b332ee774813342758ac36405e", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 1, "deletions": 158, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,8 +1,7 @@\n // Check that when we compile the static `XXX` into MIR, we do not\n // generate `StorageStart` or `StorageEnd` statements.\n \n-// ignore-tidy-linelength\n-\n+// EMIT_MIR rustc.XXX.mir_map.0.mir\n static XXX: &'static Foo = &Foo {\n     tup: \"hi\",\n     data: &[\n@@ -32,159 +31,3 @@ struct Foo {\n fn main() {\n     println!(\"{:?}\", XXX);\n }\n-\n-// END RUST SOURCE\n-// START rustc.XXX.mir_map.0.mir\n-//    let mut _0: &Foo;\n-//    let _1: &Foo;\n-//    let _2: Foo;\n-//    let mut _3: &[(u32, u32)];\n-//    let mut _4: &[(u32, u32); 42];\n-//    let _5: &[(u32, u32); 42];\n-//    let _6: [(u32, u32); 42];\n-//    let mut _7: (u32, u32);\n-//    let mut _8: (u32, u32);\n-//    let mut _9: (u32, u32);\n-//    let mut _10: (u32, u32);\n-//    let mut _11: (u32, u32);\n-//    let mut _12: (u32, u32);\n-//    let mut _13: (u32, u32);\n-//    let mut _14: (u32, u32);\n-//    let mut _15: (u32, u32);\n-//    let mut _16: (u32, u32);\n-//    let mut _17: (u32, u32);\n-//    let mut _18: (u32, u32);\n-//    let mut _19: (u32, u32);\n-//    let mut _20: (u32, u32);\n-//    let mut _21: (u32, u32);\n-//    let mut _22: (u32, u32);\n-//    let mut _23: (u32, u32);\n-//    let mut _24: (u32, u32);\n-//    let mut _25: (u32, u32);\n-//    let mut _26: (u32, u32);\n-//    let mut _27: (u32, u32);\n-//    let mut _28: (u32, u32);\n-//    let mut _29: (u32, u32);\n-//    let mut _30: (u32, u32);\n-//    let mut _31: (u32, u32);\n-//    let mut _32: (u32, u32);\n-//    let mut _33: (u32, u32);\n-//    let mut _34: (u32, u32);\n-//    let mut _35: (u32, u32);\n-//    let mut _36: (u32, u32);\n-//    let mut _37: (u32, u32);\n-//    let mut _38: (u32, u32);\n-//    let mut _39: (u32, u32);\n-//    let mut _40: (u32, u32);\n-//    let mut _41: (u32, u32);\n-//    let mut _42: (u32, u32);\n-//    let mut _43: (u32, u32);\n-//    let mut _44: (u32, u32);\n-//    let mut _45: (u32, u32);\n-//    let mut _46: (u32, u32);\n-//    let mut _47: (u32, u32);\n-//    let mut _48: (u32, u32);\n-//    bb0: {\n-//        StorageLive(_1);\n-//        StorageLive(_2);\n-//        StorageLive(_3);\n-//        StorageLive(_4);\n-//        StorageLive(_5);\n-//        StorageLive(_6);\n-//        StorageLive(_7);\n-//        _7 = (const 0u32, const 1u32);\n-//        StorageLive(_8);\n-//        _8 = (const 0u32, const 2u32);\n-//        StorageLive(_9);\n-//        _9 = (const 0u32, const 3u32);\n-//        StorageLive(_10);\n-//        _10 = (const 0u32, const 1u32);\n-//        StorageLive(_11);\n-//        _11 = (const 0u32, const 2u32);\n-//        StorageLive(_12);\n-//        _12 = (const 0u32, const 3u32);\n-//        StorageLive(_13);\n-//        _13 = (const 0u32, const 1u32);\n-//        StorageLive(_14);\n-//        _14 = (const 0u32, const 2u32);\n-//        StorageLive(_15);\n-//        _15 = (const 0u32, const 3u32);\n-//        StorageLive(_16);\n-//        _16 = (const 0u32, const 1u32);\n-//        StorageLive(_17);\n-//        _17 = (const 0u32, const 2u32);\n-//        StorageLive(_18);\n-//        _18 = (const 0u32, const 3u32);\n-//        StorageLive(_19);\n-//        _19 = (const 0u32, const 1u32);\n-//        StorageLive(_20);\n-//        _20 = (const 0u32, const 2u32);\n-//        StorageLive(_21);\n-//        _21 = (const 0u32, const 3u32);\n-//        StorageLive(_22);\n-//        _22 = (const 0u32, const 1u32);\n-//        StorageLive(_23);\n-//        _23 = (const 0u32, const 2u32);\n-//        StorageLive(_24);\n-//        _24 = (const 0u32, const 3u32);\n-//        StorageLive(_25);\n-//        _25 = (const 0u32, const 1u32);\n-//        StorageLive(_26);\n-//        _26 = (const 0u32, const 2u32);\n-//        StorageLive(_27);\n-//        _27 = (const 0u32, const 3u32);\n-//        StorageLive(_28);\n-//        _28 = (const 0u32, const 1u32);\n-//        StorageLive(_29);\n-//        _29 = (const 0u32, const 2u32);\n-//        StorageLive(_30);\n-//        _30 = (const 0u32, const 3u32);\n-//        StorageLive(_31);\n-//        _31 = (const 0u32, const 1u32);\n-//        StorageLive(_32);\n-//        _32 = (const 0u32, const 2u32);\n-//        StorageLive(_33);\n-//        _33 = (const 0u32, const 3u32);\n-//        StorageLive(_34);\n-//        _34 = (const 0u32, const 1u32);\n-//        StorageLive(_35);\n-//        _35 = (const 0u32, const 2u32);\n-//        StorageLive(_36);\n-//        _36 = (const 0u32, const 3u32);\n-//        StorageLive(_37);\n-//        _37 = (const 0u32, const 1u32);\n-//        StorageLive(_38);\n-//        _38 = (const 0u32, const 2u32);\n-//        StorageLive(_39);\n-//        _39 = (const 0u32, const 3u32);\n-//        StorageLive(_40);\n-//        _40 = (const 0u32, const 1u32);\n-//        StorageLive(_41);\n-//        _41 = (const 0u32, const 2u32);\n-//        StorageLive(_42);\n-//        _42 = (const 0u32, const 3u32);\n-//        StorageLive(_43);\n-//        _43 = (const 0u32, const 1u32);\n-//        StorageLive(_44);\n-//        _44 = (const 0u32, const 2u32);\n-//        StorageLive(_45);\n-//        _45 = (const 0u32, const 3u32);\n-//        StorageLive(_46);\n-//        _46 = (const 0u32, const 1u32);\n-//        StorageLive(_47);\n-//        _47 = (const 0u32, const 2u32);\n-//        StorageLive(_48);\n-//        _48 = (const 0u32, const 3u32);\n-//        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48];\n-//        _5 = &_6;\n-//        _4 = &(*_5);\n-//        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize));\n-//        _2 = Foo { tup: const \"hi\", data: move _3 };\n-//        _1 = &_2;\n-//        _0 = &(*_1);\n-//        StorageDead(_5);\n-//        StorageDead(_1);\n-//        return;\n-//    }\n-//}\n-// END rustc.XXX.mir_map.0.mir"}, {"sha": "5ea1e431d192b987f8472cce45638e386b3824d5", "filename": "src/test/mir-opt/storage_live_dead_in_statics/rustc.XXX.mir_map.0.mir", "status": "added", "additions": 670, "deletions": 0, "changes": 670, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,670 @@\n+// MIR for `XXX` 0 mir_map\n+\n+static XXX: &Foo = {\n+    let mut _0: &Foo;                    // return place in scope 0 at $DIR/storage_live_dead_in_statics.rs:5:13: 5:25\n+    let _1: &Foo;                        // in scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+    let _2: Foo;                         // in scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n+    let mut _3: &[(u32, u32)];           // in scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+    let mut _4: &[(u32, u32); 42];       // in scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+    let _5: &[(u32, u32); 42];           // in scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+    let _6: [(u32, u32); 42];            // in scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n+    let mut _7: (u32, u32);              // in scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n+    let mut _8: (u32, u32);              // in scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n+    let mut _9: (u32, u32);              // in scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n+    let mut _10: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n+    let mut _11: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n+    let mut _12: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n+    let mut _13: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n+    let mut _14: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n+    let mut _15: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n+    let mut _16: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n+    let mut _17: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n+    let mut _18: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n+    let mut _19: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n+    let mut _20: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n+    let mut _21: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n+    let mut _22: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n+    let mut _23: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n+    let mut _24: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n+    let mut _25: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n+    let mut _26: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n+    let mut _27: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n+    let mut _28: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n+    let mut _29: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n+    let mut _30: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n+    let mut _31: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n+    let mut _32: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n+    let mut _33: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n+    let mut _34: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n+    let mut _35: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n+    let mut _36: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n+    let mut _37: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n+    let mut _38: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n+    let mut _39: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n+    let mut _40: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n+    let mut _41: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n+    let mut _42: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n+    let mut _43: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n+    let mut _44: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n+    let mut _45: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n+    let mut _46: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n+    let mut _47: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n+    let mut _48: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageLive(_5);                 // bb0[4]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageLive(_6);                 // bb0[5]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n+        StorageLive(_7);                 // bb0[6]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n+        _7 = (const 0u32, const 1u32);   // bb0[7]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:10: 8:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:13: 8:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_8);                 // bb0[8]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n+        _8 = (const 0u32, const 2u32);   // bb0[9]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:18: 8:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:21: 8:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_9);                 // bb0[10]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n+        _9 = (const 0u32, const 3u32);   // bb0[11]: scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:26: 8:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:29: 8:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_10);                // bb0[12]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n+        _10 = (const 0u32, const 1u32);  // bb0[13]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:10: 9:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:13: 9:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_11);                // bb0[14]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n+        _11 = (const 0u32, const 2u32);  // bb0[15]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:18: 9:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:21: 9:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_12);                // bb0[16]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n+        _12 = (const 0u32, const 3u32);  // bb0[17]: scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:26: 9:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:29: 9:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_13);                // bb0[18]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n+        _13 = (const 0u32, const 1u32);  // bb0[19]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:10: 10:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:13: 10:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_14);                // bb0[20]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n+        _14 = (const 0u32, const 2u32);  // bb0[21]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:18: 10:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:21: 10:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_15);                // bb0[22]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n+        _15 = (const 0u32, const 3u32);  // bb0[23]: scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:26: 10:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:29: 10:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_16);                // bb0[24]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n+        _16 = (const 0u32, const 1u32);  // bb0[25]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:10: 11:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:13: 11:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_17);                // bb0[26]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n+        _17 = (const 0u32, const 2u32);  // bb0[27]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:18: 11:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:21: 11:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_18);                // bb0[28]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n+        _18 = (const 0u32, const 3u32);  // bb0[29]: scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:26: 11:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:29: 11:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_19);                // bb0[30]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n+        _19 = (const 0u32, const 1u32);  // bb0[31]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:10: 12:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:13: 12:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_20);                // bb0[32]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n+        _20 = (const 0u32, const 2u32);  // bb0[33]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:18: 12:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:21: 12:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_21);                // bb0[34]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n+        _21 = (const 0u32, const 3u32);  // bb0[35]: scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:26: 12:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:29: 12:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_22);                // bb0[36]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n+        _22 = (const 0u32, const 1u32);  // bb0[37]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:10: 13:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:13: 13:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_23);                // bb0[38]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n+        _23 = (const 0u32, const 2u32);  // bb0[39]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:18: 13:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:21: 13:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_24);                // bb0[40]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n+        _24 = (const 0u32, const 3u32);  // bb0[41]: scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:26: 13:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:29: 13:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_25);                // bb0[42]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n+        _25 = (const 0u32, const 1u32);  // bb0[43]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:10: 14:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:13: 14:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_26);                // bb0[44]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n+        _26 = (const 0u32, const 2u32);  // bb0[45]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:18: 14:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:21: 14:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_27);                // bb0[46]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n+        _27 = (const 0u32, const 3u32);  // bb0[47]: scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:26: 14:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:29: 14:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_28);                // bb0[48]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n+        _28 = (const 0u32, const 1u32);  // bb0[49]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:10: 15:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:13: 15:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_29);                // bb0[50]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n+        _29 = (const 0u32, const 2u32);  // bb0[51]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:18: 15:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:21: 15:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_30);                // bb0[52]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n+        _30 = (const 0u32, const 3u32);  // bb0[53]: scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:26: 15:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:29: 15:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_31);                // bb0[54]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n+        _31 = (const 0u32, const 1u32);  // bb0[55]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:10: 16:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:13: 16:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_32);                // bb0[56]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n+        _32 = (const 0u32, const 2u32);  // bb0[57]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:18: 16:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:21: 16:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_33);                // bb0[58]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n+        _33 = (const 0u32, const 3u32);  // bb0[59]: scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:26: 16:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:29: 16:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_34);                // bb0[60]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n+        _34 = (const 0u32, const 1u32);  // bb0[61]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:10: 17:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:13: 17:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_35);                // bb0[62]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n+        _35 = (const 0u32, const 2u32);  // bb0[63]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:18: 17:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:21: 17:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_36);                // bb0[64]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n+        _36 = (const 0u32, const 3u32);  // bb0[65]: scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:26: 17:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:29: 17:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_37);                // bb0[66]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n+        _37 = (const 0u32, const 1u32);  // bb0[67]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:10: 18:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:13: 18:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_38);                // bb0[68]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n+        _38 = (const 0u32, const 2u32);  // bb0[69]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:18: 18:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:21: 18:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_39);                // bb0[70]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n+        _39 = (const 0u32, const 3u32);  // bb0[71]: scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:26: 18:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:29: 18:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_40);                // bb0[72]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n+        _40 = (const 0u32, const 1u32);  // bb0[73]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:10: 19:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:13: 19:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_41);                // bb0[74]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n+        _41 = (const 0u32, const 2u32);  // bb0[75]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:18: 19:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:21: 19:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_42);                // bb0[76]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n+        _42 = (const 0u32, const 3u32);  // bb0[77]: scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:26: 19:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:29: 19:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_43);                // bb0[78]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n+        _43 = (const 0u32, const 1u32);  // bb0[79]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:10: 20:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:13: 20:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_44);                // bb0[80]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n+        _44 = (const 0u32, const 2u32);  // bb0[81]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:18: 20:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:21: 20:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_45);                // bb0[82]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n+        _45 = (const 0u32, const 3u32);  // bb0[83]: scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:26: 20:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:29: 20:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        StorageLive(_46);                // bb0[84]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n+        _46 = (const 0u32, const 1u32);  // bb0[85]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:10: 21:11\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:13: 21:14\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_47);                // bb0[86]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n+        _47 = (const 0u32, const 2u32);  // bb0[87]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:18: 21:19\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:21: 21:22\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+        StorageLive(_48);                // bb0[88]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n+        _48 = (const 0u32, const 3u32);  // bb0[89]: scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:26: 21:27\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:29: 21:30\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48]; // bb0[90]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n+        _5 = &_6;                        // bb0[91]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        _4 = &(*_5);                     // bb0[92]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize)); // bb0[93]: scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        _2 = Foo { tup: const \"hi\", data: move _3 }; // bb0[94]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n+        _1 = &_2;                        // bb0[95]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+        _0 = &(*_1);                     // bb0[96]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n+        StorageDead(_5);                 // bb0[97]: scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n+        StorageDead(_1);                 // bb0[98]: scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n+        return;                          // bb0[99]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+    }\n+}"}, {"sha": "7b3c77aca27ebe0561557b4a09f1118c25af57dd", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,36 +1,9 @@\n+// EMIT_MIR rustc.main.nll.0.mir\n+\n fn main() {\n     let a = 0;\n     {\n         let b = &Some(a);\n     }\n     let c = 1;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.nll.0.mir\n-//     bb0: {\n-//         StorageLive(_1);\n-//         _1 = const 0i32;\n-//         FakeRead(ForLet, _1);\n-//         StorageLive(_2);\n-//         StorageLive(_3);\n-//         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = _1;\n-//         _4 = std::option::Option::<i32>::Some(move _5,);\n-//         StorageDead(_5);\n-//         _3 = &_4;\n-//         FakeRead(ForLet, _3);\n-//         _2 = ();\n-//         StorageDead(_4);\n-//         StorageDead(_3);\n-//         StorageDead(_2);\n-//         StorageLive(_6);\n-//         _6 = const 1i32;\n-//         FakeRead(ForLet, _6);\n-//         _0 = ();\n-//         StorageDead(_6);\n-//         StorageDead(_1);\n-//         return;\n-//      }\n-// END rustc.main.nll.0.mir"}, {"sha": "57ec47346e8cc48dbd2abdafd4d4533181a81ab7", "filename": "src/test/mir-opt/storage_ranges/rustc.main.nll.0.mir", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,75 @@\n+// MIR for `main` 0 nll\n+\n+| Free Region Mapping\n+| '_#0r | Global | ['_#0r, '_#1r]\n+| '_#1r | Local | ['_#1r]\n+|\n+| Inferred Region Values\n+| '_#0r | U0 | {bb0[0..=22], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=22], '_#1r}\n+| '_#2r | U0 | {bb0[10..=11]}\n+| '_#3r | U0 | {bb0[11]}\n+|\n+| Inference Constraints\n+| '_#0r live at {bb0[0..=22]}\n+| '_#1r live at {bb0[0..=22]}\n+| '_#2r live at {bb0[10]}\n+| '_#3r live at {bb0[11]}\n+| '_#2r: '_#3r due to Assignment at Single(bb0[10])\n+|\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/storage_ranges.rs:3:11: 3:11\n+    let _1: i32;                         // in scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+    let _2: ();                          // in scope 0 at $DIR/storage_ranges.rs:5:5: 7:6\n+    let _4: std::option::Option<i32>;    // in scope 0 at $DIR/storage_ranges.rs:6:18: 6:25\n+    let mut _5: i32;                     // in scope 0 at $DIR/storage_ranges.rs:6:23: 6:24\n+    scope 1 {\n+        debug a => _1;                   // in scope 1 at $DIR/storage_ranges.rs:4:9: 4:10\n+        let _3: &std::option::Option<i32>; // in scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        let _6: i32;                     // in scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        scope 2 {\n+            debug b => _3;               // in scope 2 at $DIR/storage_ranges.rs:6:13: 6:14\n+        }\n+        scope 3 {\n+            debug c => _6;               // in scope 3 at $DIR/storage_ranges.rs:8:9: 8:10\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        _1 = const 0i32;                 // bb0[1]: scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_ranges.rs:4:13: 4:14\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        StorageLive(_4);                 // bb0[5]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n+        StorageLive(_5);                 // bb0[6]: scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n+        _5 = _1;                         // bb0[7]: scope 1 at $DIR/storage_ranges.rs:6:23: 6:24\n+        _4 = std::option::Option::<i32>::Some(move _5,); // bb0[8]: scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n+        StorageDead(_5);                 // bb0[9]: scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n+        _3 = &_4;                        // bb0[10]: scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n+        FakeRead(ForLet, _3);            // bb0[11]: scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        _2 = ();                         // bb0[12]: scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n+        StorageDead(_4);                 // bb0[13]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n+        StorageDead(_3);                 // bb0[14]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n+        StorageDead(_2);                 // bb0[15]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n+        StorageLive(_6);                 // bb0[16]: scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        _6 = const 1i32;                 // bb0[17]: scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_ranges.rs:8:13: 8:14\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        FakeRead(ForLet, _6);            // bb0[18]: scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        _0 = ();                         // bb0[19]: scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n+        StorageDead(_6);                 // bb0[20]: scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n+        StorageDead(_1);                 // bb0[21]: scope 0 at $DIR/storage_ranges.rs:9:1: 9:2\n+        return;                          // bb0[22]: scope 0 at $DIR/storage_ranges.rs:9:2: 9:2\n+    }\n+}"}, {"sha": "c1b7ebdbc3ab97952de3ae3b5b3712717050504f", "filename": "src/test/mir-opt/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,10 +1,12 @@\n #![feature(box_syntax)]\n \n+// EMIT_MIR rustc.move_out_from_end.mir_map.0.mir\n fn move_out_from_end() {\n     let a = [box 1, box 2];\n     let [.., _y] = a;\n }\n \n+// EMIT_MIR rustc.move_out_by_subslice.mir_map.0.mir\n fn move_out_by_subslice() {\n     let a = [box 1, box 2];\n     let [_y @ ..] = a;\n@@ -14,15 +16,3 @@ fn main() {\n     move_out_by_subslice();\n     move_out_from_end();\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.move_out_from_end.mir_map.0.mir\n-//      _6 = move _1[1 of 2];\n-//      _0 = ();\n-// END rustc.move_out_from_end.mir_map.0.mir\n-\n-// START rustc.move_out_by_subslice.mir_map.0.mir\n-//     _6 = move _1[0..2];\n-//     _0 = ();\n-// END rustc.move_out_by_subslice.mir_map.0.mir"}, {"sha": "5dbee8f7b3ddab63da534bfb518e39474323da01", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_by_subslice.mir_map.0.mir", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,111 @@\n+// MIR for `move_out_by_subslice` 0 mir_map\n+\n+fn move_out_by_subslice() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:10:27: 10:27\n+    let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _5: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    scope 1 {\n+        debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        let _6: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        scope 2 {\n+            debug _y => _6;              // in scope 2 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _3 = Box(i32);                   // bb0[3]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        (*_3) = const 1i32;              // bb0[4]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:11:18: 11:19\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        _2 = move _3;                    // bb0[5]: scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // bb0[6]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n+    }\n+\n+    bb2 (cleanup): {\n+        drop(_2) -> bb1;                 // bb2[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_3) -> bb2;                 // bb3[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+    }\n+\n+    bb4: {\n+        StorageDead(_3);                 // bb4[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        StorageLive(_4);                 // bb4[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        StorageLive(_5);                 // bb4[2]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _5 = Box(i32);                   // bb4[3]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        (*_5) = const 2i32;              // bb4[4]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:11:25: 11:26\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        _4 = move _5;                    // bb4[5]: scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // bb4[6]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb2;                 // bb5[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_5) -> bb5;                 // bb6[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+    }\n+\n+    bb7: {\n+        StorageDead(_5);                 // bb7[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _1 = [move _2, move _4];         // bb7[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // bb7[2]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb8: {\n+        StorageDead(_4);                 // bb8[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // bb8[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb9: {\n+        StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        FakeRead(ForLet, _1);            // bb9[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        StorageLive(_6);                 // bb9[2]: scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        _6 = move _1[0..2];              // bb9[3]: scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        _0 = ();                         // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // bb9[5]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    }\n+\n+    bb10 (cleanup): {\n+        drop(_1) -> bb1;                 // bb10[0]: scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    }\n+\n+    bb11 (cleanup): {\n+        drop(_6) -> bb10;                // bb11[0]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    }\n+\n+    bb12: {\n+        StorageDead(_6);                 // bb12[0]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // bb12[1]: scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    }\n+\n+    bb13: {\n+        StorageDead(_1);                 // bb13[0]: scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        goto -> bb14;                    // bb13[1]: scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    }\n+\n+    bb14: {\n+        return;                          // bb14[0]: scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    }\n+}"}, {"sha": "4a5cd625c9d393a595949e38280e66d25cf06a2c", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_from_end.mir_map.0.mir", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,111 @@\n+// MIR for `move_out_from_end` 0 mir_map\n+\n+fn move_out_from_end() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:4:24: 4:24\n+    let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _5: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    scope 1 {\n+        debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        let _6: std::boxed::Box<i32>;    // in scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        scope 2 {\n+            debug _y => _6;              // in scope 2 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _3 = Box(i32);                   // bb0[3]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        (*_3) = const 1i32;              // bb0[4]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:5:18: 5:19\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        _2 = move _3;                    // bb0[5]: scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // bb0[6]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n+    }\n+\n+    bb2 (cleanup): {\n+        drop(_2) -> bb1;                 // bb2[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_3) -> bb2;                 // bb3[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+    }\n+\n+    bb4: {\n+        StorageDead(_3);                 // bb4[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        StorageLive(_4);                 // bb4[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        StorageLive(_5);                 // bb4[2]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _5 = Box(i32);                   // bb4[3]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        (*_5) = const 2i32;              // bb4[4]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:5:25: 5:26\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        _4 = move _5;                    // bb4[5]: scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // bb4[6]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb2;                 // bb5[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_5) -> bb5;                 // bb6[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+    }\n+\n+    bb7: {\n+        StorageDead(_5);                 // bb7[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _1 = [move _2, move _4];         // bb7[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // bb7[2]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb8: {\n+        StorageDead(_4);                 // bb8[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // bb8[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb9: {\n+        StorageDead(_2);                 // bb9[0]: scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        FakeRead(ForLet, _1);            // bb9[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        StorageLive(_6);                 // bb9[2]: scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        _6 = move _1[1 of 2];            // bb9[3]: scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        _0 = ();                         // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // bb9[5]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    }\n+\n+    bb10 (cleanup): {\n+        drop(_1) -> bb1;                 // bb10[0]: scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    }\n+\n+    bb11 (cleanup): {\n+        drop(_6) -> bb10;                // bb11[0]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    }\n+\n+    bb12: {\n+        StorageDead(_6);                 // bb12[0]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // bb12[1]: scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    }\n+\n+    bb13: {\n+        StorageDead(_1);                 // bb13[0]: scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        goto -> bb14;                    // bb13[1]: scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    }\n+\n+    bb14: {\n+        return;                          // bb14[0]: scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    }\n+}"}, {"sha": "6503e193608365105b09c2ca580c91f71683246d", "filename": "src/test/mir-opt/uninhabited-enum.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -2,11 +2,13 @@\n \n pub enum Void {}\n \n+// EMIT_MIR rustc.process_never.SimplifyLocals.after.mir\n #[no_mangle]\n pub fn process_never(input: *const !) {\n    let _input = unsafe { &*input };\n }\n \n+// EMIT_MIR rustc.process_void.SimplifyLocals.after.mir\n #[no_mangle]\n pub fn process_void(input: *const Void) {\n    let _input = unsafe { &*input };\n@@ -15,23 +17,3 @@ pub fn process_void(input: *const Void) {\n }\n \n fn main() {}\n-\n-// END RUST SOURCE\n-//\n-// START rustc.process_never.SimplifyLocals.after.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     _2 = &(*_1);\n-//     StorageDead(_2);\n-//     unreachable;\n-// }\n-// END rustc.process_never.SimplifyLocals.after.mir\n-//\n-// START rustc.process_void.SimplifyLocals.after.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     _2 = &(*_1);\n-//     StorageDead(_2);\n-//     return;\n-// }\n-// END rustc.process_void.SimplifyLocals.after.mir"}, {"sha": "f2c87336608739275f03a247411f6951d1052622", "filename": "src/test/mir-opt/uninhabited-enum/rustc.process_never.SimplifyLocals.after.mir", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_never.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_never.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_never.SimplifyLocals.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,19 @@\n+// MIR for `process_never` after SimplifyLocals\n+\n+fn process_never(_1: *const !) -> () {\n+    debug input => _1;                   // in scope 0 at $DIR/uninhabited-enum.rs:7:22: 7:27\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited-enum.rs:7:39: 7:39\n+    let _2: &!;                          // in scope 0 at $DIR/uninhabited-enum.rs:8:8: 8:14\n+    scope 1 {\n+        debug _input => _2;              // in scope 1 at $DIR/uninhabited-enum.rs:8:8: 8:14\n+    }\n+    scope 2 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/uninhabited-enum.rs:8:8: 8:14\n+        _2 = &(*_1);                     // bb0[1]: scope 2 at $DIR/uninhabited-enum.rs:8:26: 8:33\n+        StorageDead(_2);                 // bb0[2]: scope 0 at $DIR/uninhabited-enum.rs:9:1: 9:2\n+        unreachable;                     // bb0[3]: scope 0 at $DIR/uninhabited-enum.rs:7:39: 9:2\n+    }\n+}"}, {"sha": "2eb820bbdc3c5407ba715cf38b88a3ed678abb40", "filename": "src/test/mir-opt/uninhabited-enum/rustc.process_void.SimplifyLocals.after.mir", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,19 @@\n+// MIR for `process_void` after SimplifyLocals\n+\n+fn process_void(_1: *const Void) -> () {\n+    debug input => _1;                   // in scope 0 at $DIR/uninhabited-enum.rs:13:21: 13:26\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited-enum.rs:13:41: 13:41\n+    let _2: &Void;                       // in scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n+    scope 1 {\n+        debug _input => _2;              // in scope 1 at $DIR/uninhabited-enum.rs:14:8: 14:14\n+    }\n+    scope 2 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n+        _2 = &(*_1);                     // bb0[1]: scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n+        StorageDead(_2);                 // bb0[2]: scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n+        return;                          // bb0[3]: scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n+    }\n+}"}, {"sha": "daf1156d20ebf9994af05d9522654d38e2038e96", "filename": "src/test/mir-opt/uninhabited_enum_branching.rs", "status": "modified", "additions": 2, "deletions": 175, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -14,6 +14,8 @@ enum Test2 {\n     E = 5,\n }\n \n+// EMIT_MIR rustc.main.UninhabitedEnumBranching.diff\n+// EMIT_MIR rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir\n fn main() {\n     match Test1::C {\n         Test1::A(_) => \"A(Empty)\",\n@@ -26,178 +28,3 @@ fn main() {\n         Test2::E => \"E\",\n     };\n }\n-\n-// END RUST SOURCE\n-//\n-// START rustc.main.UninhabitedEnumBranching.before.mir\n-// let mut _0: ();\n-// let _1: &str;\n-// let mut _2: Test1;\n-// let mut _3: isize;\n-// let _4: &str;\n-// let _5: &str;\n-// let _6: &str;\n-// let mut _7: Test2;\n-// let mut _8: isize;\n-// let _9: &str;\n-// bb0: {\n-//   StorageLive(_1);\n-//   StorageLive(_2);\n-//   _2 = Test1::C;\n-//   _3 = discriminant(_2);\n-//   switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb1];\n-// }\n-// bb1: {\n-//   StorageLive(_5);\n-//   _5 = const \"C\";\n-//   _1 = &(*_5);\n-//   StorageDead(_5);\n-//   goto -> bb4;\n-// }\n-// bb2: {\n-//   _1 = const \"A(Empty)\";\n-//   goto -> bb4;\n-// }\n-// bb3: {\n-//   StorageLive(_4);\n-//   _4 = const \"B(Empty)\";\n-//   _1 = &(*_4);\n-//   StorageDead(_4);\n-//   goto -> bb4;\n-// }\n-// bb4: {\n-//   StorageDead(_2);\n-//   StorageDead(_1);\n-//   StorageLive(_6);\n-//   StorageLive(_7);\n-//   _7 = Test2::D;\n-//   _8 = discriminant(_7);\n-//   switchInt(move _8) -> [4isize: bb6, otherwise: bb5];\n-// }\n-// bb5: {\n-//   StorageLive(_9);\n-//   _9 = const \"E\";\n-//   _6 = &(*_9);\n-//   StorageDead(_9);\n-//   goto -> bb7;\n-// }\n-// bb6: {\n-//   _6 = const \"D\";\n-//   goto -> bb7;\n-// }\n-// bb7: {\n-//   StorageDead(_7);\n-//   StorageDead(_6);\n-//   _0 = ();\n-//   return;\n-// }\n-// END rustc.main.UninhabitedEnumBranching.before.mir\n-// START rustc.main.UninhabitedEnumBranching.after.mir\n-// let mut _0: ();\n-// let _1: &str;\n-// let mut _2: Test1;\n-// let mut _3: isize;\n-// let _4: &str;\n-// let _5: &str;\n-// let _6: &str;\n-// let mut _7: Test2;\n-// let mut _8: isize;\n-// let _9: &str;\n-// bb0: {\n-//   StorageLive(_1);\n-//   StorageLive(_2);\n-//   _2 = Test1::C;\n-//   _3 = discriminant(_2);\n-//   switchInt(move _3) -> bb1;\n-// }\n-// bb1: {\n-//   StorageLive(_5);\n-//   _5 = const \"C\";\n-//   _1 = &(*_5);\n-//   StorageDead(_5);\n-//   goto -> bb4;\n-// }\n-// bb2: {\n-//   _1 = const \"A(Empty)\";\n-//   goto -> bb4;\n-// }\n-// bb3: {\n-//   StorageLive(_4);\n-//   _4 = const \"B(Empty)\";\n-//   _1 = &(*_4);\n-//   StorageDead(_4);\n-//   goto -> bb4;\n-// }\n-// bb4: {\n-//   StorageDead(_2);\n-//   StorageDead(_1);\n-//   StorageLive(_6);\n-//   StorageLive(_7);\n-//   _7 = Test2::D;\n-//   _8 = discriminant(_7);\n-//   switchInt(move _8) -> [4isize: bb6, otherwise: bb5];\n-// }\n-// bb5: {\n-//   StorageLive(_9);\n-//   _9 = const \"E\";\n-//   _6 = &(*_9);\n-//   StorageDead(_9);\n-//   goto -> bb7;\n-// }\n-// bb6: {\n-//   _6 = const \"D\";\n-//   goto -> bb7;\n-// }\n-// bb7: {\n-//   StorageDead(_7);\n-//   StorageDead(_6);\n-//   _0 = ();\n-//   return;\n-// }\n-// END rustc.main.UninhabitedEnumBranching.after.mir\n-// START rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir\n-// let mut _0: ();\n-// let _1: &str;\n-// let mut _2: Test1;\n-// let mut _3: isize;\n-// let _4: &str;\n-// let _5: &str;\n-// let _6: &str;\n-// let mut _7: Test2;\n-// let mut _8: isize;\n-// let _9: &str;\n-// bb0: {\n-//   StorageLive(_1);\n-//   StorageLive(_2);\n-//   _2 = Test1::C;\n-//   _3 = discriminant(_2);\n-//   StorageLive(_5);\n-//   _5 = const \"C\";\n-//   _1 = &(*_5);\n-//   StorageDead(_5);\n-//   StorageDead(_2);\n-//   StorageDead(_1);\n-//   StorageLive(_6);\n-//   StorageLive(_7);\n-//   _7 = Test2::D;\n-//   _8 = discriminant(_7);\n-//   switchInt(move _8) -> [4isize: bb2, otherwise: bb1];\n-// }\n-// bb1: {\n-//   StorageLive(_9);\n-//   _9 = const \"E\";\n-//   _6 = &(*_9);\n-//   StorageDead(_9);\n-//   goto -> bb3;\n-// }\n-// bb2: {\n-//   _6 = const \"D\";\n-//   goto -> bb3;\n-// }\n-// bb3: {\n-//   StorageDead(_7);\n-//   StorageDead(_6);\n-//   _0 = ();\n-//   return;\n-// }\n-// END rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir"}, {"sha": "c8dde4d360cc0268f7b78f2042581dd85dbe202e", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,70 @@\n+// MIR for `main` after SimplifyCfg-after-uninhabited-enum-branching\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 19:11\n+    let _1: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+    let mut _2: Test1;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+    let mut _3: isize;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+    let _4: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+    let _5: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+    let _6: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+    let mut _7: Test2;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+    let mut _8: isize;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+    let _9: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        _2 = Test1::C;                   // bb0[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        _3 = discriminant(_2);           // bb0[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+        StorageLive(_5);                 // bb0[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+        _5 = const \"C\";                  // bb0[5]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+        _1 = &(*_5);                     // bb0[6]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+        StorageDead(_5);                 // bb0[7]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n+        StorageDead(_2);                 // bb0[8]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+        StorageLive(_6);                 // bb0[10]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+        StorageLive(_7);                 // bb0[11]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        _7 = Test2::D;                   // bb0[12]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        _8 = discriminant(_7);           // bb0[13]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+        switchInt(move _8) -> [4isize: bb2, otherwise: bb1]; // bb0[14]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+    }\n+\n+    bb1: {\n+        StorageLive(_9);                 // bb1[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+        _9 = const \"E\";                  // bb1[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+        _6 = &(*_9);                     // bb1[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+        StorageDead(_9);                 // bb1[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n+        goto -> bb3;                     // bb1[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+    }\n+\n+    bb2: {\n+        _6 = const \"D\";                  // bb2[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+        goto -> bb3;                     // bb2[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+    }\n+\n+    bb3: {\n+        StorageDead(_7);                 // bb3[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+        StorageDead(_6);                 // bb3[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+        _0 = ();                         // bb3[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+        return;                          // bb3[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n+    }\n+}"}, {"sha": "cccd6aa323006223be4fd80cffe3b9918b120059", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.UninhabitedEnumBranching.diff", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,106 @@\n+- // MIR for `main` before UninhabitedEnumBranching\n++ // MIR for `main` after UninhabitedEnumBranching\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 19:11\n+      let _1: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+      let mut _2: Test1;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+      let mut _3: isize;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+      let _4: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+      let _5: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+      let _6: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+      let mut _7: Test2;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+      let mut _8: isize;                   // in scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+      let _9: &str;                        // in scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          _2 = Test1::C;                   // bb0[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          _3 = discriminant(_2);           // bb0[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+-         switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb1]; // bb0[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n++         switchInt(move _3) -> bb1;       // bb0[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // bb1[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+          _5 = const \"C\";                  // bb1[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+          _1 = &(*_5);                     // bb1[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n+          StorageDead(_5);                 // bb1[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n+          goto -> bb4;                     // bb1[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+      }\n+  \n+      bb2: {\n+          _1 = const \"A(Empty)\";           // bb2[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+          goto -> bb4;                     // bb2[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // bb3[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+          _4 = const \"B(Empty)\";           // bb3[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+          _1 = &(*_4);                     // bb3[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n+          StorageDead(_4);                 // bb3[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n+          goto -> bb4;                     // bb3[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_2);                 // bb4[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+          StorageDead(_1);                 // bb4[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n+          StorageLive(_6);                 // bb4[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+          StorageLive(_7);                 // bb4[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          _7 = Test2::D;                   // bb4[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          _8 = discriminant(_7);           // bb4[5]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+          switchInt(move _8) -> [4isize: bb6, otherwise: bb5]; // bb4[6]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+      }\n+  \n+      bb5: {\n+          StorageLive(_9);                 // bb5[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+          _9 = const \"E\";                  // bb5[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+          _6 = &(*_9);                     // bb5[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n+          StorageDead(_9);                 // bb5[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n+          goto -> bb7;                     // bb5[4]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+      }\n+  \n+      bb6: {\n+          _6 = const \"D\";                  // bb6[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+          goto -> bb7;                     // bb6[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+      }\n+  \n+      bb7: {\n+          StorageDead(_7);                 // bb7[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+          StorageDead(_6);                 // bb7[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n+          _0 = ();                         // bb7[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+          return;                          // bb7[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n+      }\n+  }\n+  "}, {"sha": "6f0c4ca3cf5aea64afa6708ac69a934d1dd3e9ff", "filename": "src/test/mir-opt/unreachable.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -4,6 +4,7 @@ fn empty() -> Option<Empty> {\n     None\n }\n \n+// EMIT_MIR rustc.main.UnreachablePropagation.diff\n fn main() {\n     if let Some(_x) = empty() {\n         let mut _y;\n@@ -17,62 +18,3 @@ fn main() {\n         match _x { }\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.UnreachablePropagation.before.mir\n-//      bb0: {\n-//          StorageLive(_1);\n-//          _1 = const empty() -> bb1;\n-//      }\n-//      bb1: {\n-//          _2 = discriminant(_1);\n-//          switchInt(move _2) -> [1isize: bb3, otherwise: bb2];\n-//      }\n-//      bb2: {\n-//          _0 = ();\n-//          StorageDead(_1);\n-//          return;\n-//      }\n-//      bb3: {\n-//          StorageLive(_3);\n-//          _3 = move ((_1 as Some).0: Empty);\n-//          StorageLive(_4);\n-//          StorageLive(_5);\n-//          StorageLive(_6);\n-//          _6 = const true;\n-//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n-//      }\n-//      bb4: {\n-//          _4 = const 42i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb5: {\n-//          _4 = const 21i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb6: {\n-//          StorageDead(_6);\n-//          StorageDead(_5);\n-//          StorageLive(_7);\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.before.mir\n-// START rustc.main.UnreachablePropagation.after.mir\n-//      bb0: {\n-//          StorageLive(_1);\n-//          _1 = const empty() -> bb1;\n-//      }\n-//      bb1: {\n-//          _2 = discriminant(_1);\n-//          goto -> bb2;\n-//      }\n-//      bb2: {\n-//          _0 = ();\n-//          StorageDead(_1);\n-//          return;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "3a239c6e3b05f53c72388fcdbf31bb93b64dba1e", "filename": "src/test/mir-opt/unreachable/rustc.main.UnreachablePropagation.diff", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,90 @@\n+- // MIR for `main` before UnreachablePropagation\n++ // MIR for `main` after UnreachablePropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable.rs:8:11: 8:11\n+      let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+      let mut _2: isize;                   // in scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+      let _3: Empty;                       // in scope 0 at $DIR/unreachable.rs:9:17: 9:19\n+      let _5: ();                          // in scope 0 at $DIR/unreachable.rs:12:9: 16:10\n+      let mut _6: bool;                    // in scope 0 at $DIR/unreachable.rs:12:12: 12:16\n+      let mut _7: !;                       // in scope 0 at $DIR/unreachable.rs:18:9: 18:21\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n+          let mut _4: i32;                 // in scope 1 at $DIR/unreachable.rs:10:13: 10:19\n+          scope 2 {\n+              debug _y => _4;              // in scope 2 at $DIR/unreachable.rs:10:13: 10:19\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+          _1 = const empty() -> bb1;       // bb0[1]: scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+                                           // ty::Const\n+                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable.rs:9:23: 9:28\n+                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _2 = discriminant(_1);           // bb1[0]: scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+-         switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/unreachable.rs:9:12: 9:20\n++         goto -> bb2;                     // bb1[1]: scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+      }\n+  \n+      bb2: {\n+          _0 = ();                         // bb2[0]: scope 0 at $DIR/unreachable.rs:9:5: 19:6\n+          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable.rs:20:1: 20:2\n+          return;                          // bb2[2]: scope 0 at $DIR/unreachable.rs:20:2: 20:2\n+-     }\n+- \n+-     bb3: {\n+-         StorageLive(_3);                 // bb3[0]: scope 0 at $DIR/unreachable.rs:9:17: 9:19\n+-         _3 = move ((_1 as Some).0: Empty); // bb3[1]: scope 0 at $DIR/unreachable.rs:9:17: 9:19\n+-         StorageLive(_4);                 // bb3[2]: scope 1 at $DIR/unreachable.rs:10:13: 10:19\n+-         StorageLive(_5);                 // bb3[3]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-         StorageLive(_6);                 // bb3[4]: scope 2 at $DIR/unreachable.rs:12:12: 12:16\n+-         _6 = const true;                 // bb3[5]: scope 2 at $DIR/unreachable.rs:12:12: 12:16\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x01))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:12:12: 12:16\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+-         switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[6]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-     }\n+- \n+-     bb4: {\n+-         _4 = const 42i32;                // bb4[0]: scope 2 at $DIR/unreachable.rs:15:13: 15:20\n+-                                          // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x0000002a))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:15:18: 15:20\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+-         _5 = ();                         // bb4[1]: scope 2 at $DIR/unreachable.rs:14:16: 16:10\n+-         goto -> bb6;                     // bb4[2]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-     }\n+- \n+-     bb5: {\n+-         _4 = const 21i32;                // bb5[0]: scope 2 at $DIR/unreachable.rs:13:13: 13:20\n+-                                          // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000015))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:13:18: 13:20\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n+-         _5 = ();                         // bb5[1]: scope 2 at $DIR/unreachable.rs:12:17: 14:10\n+-         goto -> bb6;                     // bb5[2]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n+-     }\n+- \n+-     bb6: {\n+-         StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable.rs:16:9: 16:10\n+-         StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable.rs:16:9: 16:10\n+-         StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable.rs:18:9: 18:21\n+-         unreachable;                     // bb6[3]: scope 2 at $DIR/unreachable.rs:18:15: 18:17\n+      }\n+  }\n+  "}, {"sha": "4bbf22b82275642d9871445deb15f37f1c84a073", "filename": "src/test/mir-opt/unreachable_asm.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![feature(llvm_asm)]\n \n enum Empty {}\n@@ -7,6 +6,7 @@ fn empty() -> Option<Empty> {\n     None\n }\n \n+// EMIT_MIR rustc.main.UnreachablePropagation.diff\n fn main() {\n     if let Some(_x) = empty() {\n         let mut _y;\n@@ -22,51 +22,3 @@ fn main() {\n         match _x { }\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.UnreachablePropagation.before.mir\n-//      bb4: {\n-//          _4 = const 42i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb5: {\n-//          _4 = const 21i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb6: {\n-//          StorageDead(_6);\n-//          StorageDead(_5);\n-//          StorageLive(_7);\n-//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n-//          _7 = ();\n-//          StorageDead(_7);\n-//          StorageLive(_8);\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.before.mir\n-// START rustc.main.UnreachablePropagation.after.mir\n-//      bb4: {\n-//          _4 = const 42i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb5: {\n-//          _4 = const 21i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb6: {\n-//          StorageDead(_6);\n-//          StorageDead(_5);\n-//          StorageLive(_7);\n-//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n-//          _7 = ();\n-//          StorageDead(_7);\n-//          StorageLive(_8);\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "c32165a3893c745f4272da04fc91e45f3561a187", "filename": "src/test/mir-opt/unreachable_asm/rustc.main.UnreachablePropagation.diff", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,96 @@\n+- // MIR for `main` before UnreachablePropagation\n++ // MIR for `main` after UnreachablePropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable_asm.rs:10:11: 10:11\n+      let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n+      let mut _2: isize;                   // in scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+      let _3: Empty;                       // in scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n+      let _5: ();                          // in scope 0 at $DIR/unreachable_asm.rs:14:9: 18:10\n+      let mut _6: bool;                    // in scope 0 at $DIR/unreachable_asm.rs:14:12: 14:16\n+      let _7: ();                          // in scope 0 at $DIR/unreachable_asm.rs:21:9: 21:37\n+      let mut _8: !;                       // in scope 0 at $DIR/unreachable_asm.rs:22:9: 22:21\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/unreachable_asm.rs:11:17: 11:19\n+          let mut _4: i32;                 // in scope 1 at $DIR/unreachable_asm.rs:12:13: 12:19\n+          scope 2 {\n+              debug _y => _4;              // in scope 2 at $DIR/unreachable_asm.rs:12:13: 12:19\n+              scope 3 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n+          _1 = const empty() -> bb1;       // bb0[1]: scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n+                                           // ty::Const\n+                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:11:23: 11:28\n+                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _2 = discriminant(_1);           // bb1[0]: scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n+      }\n+  \n+      bb2: {\n+          _0 = ();                         // bb2[0]: scope 0 at $DIR/unreachable_asm.rs:11:5: 23:6\n+          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n+          return;                          // bb2[2]: scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n+      }\n+  \n+      bb3: {\n+          StorageLive(_3);                 // bb3[0]: scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n+          _3 = move ((_1 as Some).0: Empty); // bb3[1]: scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n+          StorageLive(_4);                 // bb3[2]: scope 1 at $DIR/unreachable_asm.rs:12:13: 12:19\n+          StorageLive(_5);                 // bb3[3]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+          StorageLive(_6);                 // bb3[4]: scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n+          _6 = const true;                 // bb3[5]: scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:14:12: 14:16\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[6]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+      }\n+  \n+      bb4: {\n+          _4 = const 42i32;                // bb4[0]: scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:17:18: 17:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          _5 = ();                         // bb4[1]: scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n+          goto -> bb6;                     // bb4[2]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+      }\n+  \n+      bb5: {\n+          _4 = const 21i32;                // bb5[0]: scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000015))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:15:18: 15:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n+          _5 = ();                         // bb5[1]: scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n+          goto -> bb6;                     // bb5[2]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n+      }\n+  \n+      bb6: {\n+          StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n+          StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n+          StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb6[3]: scope 3 at $DIR/unreachable_asm.rs:21:18: 21:35\n+          _7 = ();                         // bb6[4]: scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n+          StorageDead(_7);                 // bb6[5]: scope 2 at $DIR/unreachable_asm.rs:21:36: 21:37\n+          StorageLive(_8);                 // bb6[6]: scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n+          unreachable;                     // bb6[7]: scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17\n+      }\n+  }\n+  "}, {"sha": "f1610db999ecb7418424e67abd9db7b657835705", "filename": "src/test/mir-opt/unreachable_asm_2.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![feature(llvm_asm)]\n \n enum Empty {}\n@@ -7,6 +6,7 @@ fn empty() -> Option<Empty> {\n     None\n }\n \n+// EMIT_MIR rustc.main.UnreachablePropagation.diff\n fn main() {\n     if let Some(_x) = empty() {\n         let mut _y;\n@@ -24,61 +24,3 @@ fn main() {\n         match _x { }\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.UnreachablePropagation.before.mir\n-//      bb3: {\n-//          ...\n-//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n-//      }\n-//      bb4: {\n-//          StorageLive(_8);\n-//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n-//          _8 = ();\n-//          StorageDead(_8);\n-//          _4 = const 42i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//          bb5: {\n-//          StorageLive(_7);\n-//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n-//          _7 = ();\n-//          StorageDead(_7);\n-//          _4 = const 21i32;\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb6: {\n-//          StorageDead(_6);\n-//          StorageDead(_5);\n-//          StorageLive(_9);\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.before.mir\n-// START rustc.main.UnreachablePropagation.after.mir\n-//      bb3: {\n-//          ...\n-//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n-//      }\n-//      bb4: {\n-//          StorageLive(_8);\n-//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n-//          _8 = ();\n-//          StorageDead(_8);\n-//          _4 = const 42i32;\n-//          _5 = ();\n-//          unreachable;\n-//      }\n-//          bb5: {\n-//          StorageLive(_7);\n-//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n-//          _7 = ();\n-//          StorageDead(_7);\n-//          _4 = const 21i32;\n-//          _5 = ();\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "a374178756658563f254c10ea9dd0fc164510367", "filename": "src/test/mir-opt/unreachable_asm_2/rustc.main.UnreachablePropagation.diff", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,105 @@\n+- // MIR for `main` before UnreachablePropagation\n++ // MIR for `main` after UnreachablePropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable_asm_2.rs:10:11: 10:11\n+      let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n+      let mut _2: isize;                   // in scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+      let _3: Empty;                       // in scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n+      let _5: ();                          // in scope 0 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+      let mut _6: bool;                    // in scope 0 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n+      let _7: ();                          // in scope 0 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+      let _8: ();                          // in scope 0 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+      let mut _9: !;                       // in scope 0 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n+          let mut _4: i32;                 // in scope 1 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n+          scope 2 {\n+              debug _y => _4;              // in scope 2 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n+              scope 3 {\n+              }\n+              scope 4 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n+          _1 = const empty() -> bb1;       // bb0[1]: scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n+                                           // ty::Const\n+                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:11:23: 11:28\n+                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _2 = discriminant(_1);           // bb1[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+          switchInt(move _2) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n+      }\n+  \n+      bb2: {\n+          _0 = ();                         // bb2[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:5: 25:6\n+          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n+          return;                          // bb2[2]: scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n+      }\n+  \n+      bb3: {\n+          StorageLive(_3);                 // bb3[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n+          _3 = move ((_1 as Some).0: Empty); // bb3[1]: scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n+          StorageLive(_4);                 // bb3[2]: scope 1 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n+          StorageLive(_5);                 // bb3[3]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+          StorageLive(_6);                 // bb3[4]: scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n+          _6 = const true;                 // bb3[5]: scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:14:12: 14:16\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+      }\n+  \n+      bb4: {\n+          StorageLive(_8);                 // bb4[0]: scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb4[1]: scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n+          _8 = ();                         // bb4[2]: scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          StorageDead(_8);                 // bb4[3]: scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n+          _4 = const 42i32;                // bb4[4]: scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:21:18: 21:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          _5 = ();                         // bb4[5]: scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n+-         goto -> bb6;                     // bb4[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n++         unreachable;                     // bb4[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+      }\n+  \n+      bb5: {\n+          StorageLive(_7);                 // bb5[0]: scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb5[1]: scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n+          _7 = ();                         // bb5[2]: scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+          StorageDead(_7);                 // bb5[3]: scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n+          _4 = const 21i32;                // bb5[4]: scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000015))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:17:18: 17:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n+          _5 = ();                         // bb5[5]: scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n+-         goto -> bb6;                     // bb5[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+-     }\n+- \n+-     bb6: {\n+-         StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n+-         StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n+-         StorageLive(_9);                 // bb6[2]: scope 2 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n+-         unreachable;                     // bb6[3]: scope 2 at $DIR/unreachable_asm_2.rs:24:15: 24:17\n++         unreachable;                     // bb5[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n+      }\n+  }\n+  "}, {"sha": "53c753f717bd0d75b81bae63d4bb51270520cacc", "filename": "src/test/mir-opt/unreachable_diverging.rs", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -8,6 +8,7 @@ fn loop_forever() {\n     loop {}\n }\n \n+// EMIT_MIR rustc.main.UnreachablePropagation.diff\n fn main() {\n     let x = true;\n     if let Some(bomb) = empty() {\n@@ -17,49 +18,3 @@ fn main() {\n         match bomb {}\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.UnreachablePropagation.before.mir\n-//      bb3: {\n-//          StorageLive(_4);\n-//          _4 = move ((_2 as Some).0: Empty);\n-//          StorageLive(_5);\n-//          StorageLive(_6);\n-//          _6 = _1;\n-//          switchInt(_6) -> [false: bb4, otherwise: bb5];\n-//      }\n-//      bb4: {\n-//          _5 = ();\n-//          goto -> bb6;\n-//      }\n-//      bb5: {\n-//          _5 = const loop_forever() -> bb6;\n-//      }\n-//      bb6: {\n-//          StorageDead(_6);\n-//          StorageDead(_5);\n-//          StorageLive(_7);\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.before.mir\n-// START rustc.main.UnreachablePropagation.after.mir\n-//      bb3: {\n-//          StorageLive(_4);\n-//          _4 = move ((_2 as Some).0: Empty);\n-//          StorageLive(_5);\n-//          StorageLive(_6);\n-//          _6 = _1;\n-//          goto -> bb4;\n-//      }\n-//      bb4: {\n-//          _5 = const loop_forever() -> bb5;\n-//      }\n-//      bb5: {\n-//          StorageDead(_6);\n-//          StorageDead(_5);\n-//          StorageLive(_7);\n-//          unreachable;\n-//      }\n-//  }\n-// END rustc.main.UnreachablePropagation.after.mir"}, {"sha": "8d1d137f192ec9b0f36870c8667154cd6807842c", "filename": "src/test/mir-opt/unreachable_diverging/rustc.main.UnreachablePropagation.diff", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,89 @@\n+- // MIR for `main` before UnreachablePropagation\n++ // MIR for `main` after UnreachablePropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable_diverging.rs:12:11: 12:11\n+      let _1: bool;                        // in scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n+      let mut _2: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+      let mut _3: isize;                   // in scope 0 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+      let _5: ();                          // in scope 0 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+      let mut _6: bool;                    // in scope 0 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+      let mut _7: !;                       // in scope 0 at $DIR/unreachable_diverging.rs:18:9: 18:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/unreachable_diverging.rs:13:9: 13:10\n+          let _4: Empty;                   // in scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          scope 2 {\n+              debug bomb => _4;            // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n+          _1 = const true;                 // bb0[1]: scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_diverging.rs:13:13: 13:17\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          _2 = const empty() -> bb1;       // bb0[3]: scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+                                           // ty::Const\n+                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n+                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _3 = discriminant(_2);           // bb1[0]: scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+          switchInt(move _3) -> [1isize: bb3, otherwise: bb2]; // bb1[1]: scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+      }\n+  \n+      bb2: {\n+          _0 = ();                         // bb2[0]: scope 1 at $DIR/unreachable_diverging.rs:14:5: 19:6\n+          StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n+          StorageDead(_2);                 // bb2[2]: scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n+          return;                          // bb2[3]: scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // bb3[0]: scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          _4 = move ((_2 as Some).0: Empty); // bb3[1]: scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          StorageLive(_5);                 // bb3[2]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+          StorageLive(_6);                 // bb3[3]: scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+          _6 = _1;                         // bb3[4]: scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+-         switchInt(_6) -> [false: bb4, otherwise: bb5]; // bb3[5]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n++         goto -> bb4;                     // bb3[5]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+      }\n+  \n+      bb4: {\n+-         _5 = ();                         // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         goto -> bb6;                     // bb4[1]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-     }\n+- \n+-     bb5: {\n+-         _5 = const loop_forever() -> bb6; // bb5[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n++         _5 = const loop_forever() -> bb5; // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+                                           // ty::Const\n+                                           // + ty: fn() {loop_forever}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n+                                           // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+-     bb6: {\n+-         StorageDead(_6);                 // bb6[0]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+-         StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+-         StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n+-         unreachable;                     // bb6[3]: scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n++     bb5: {\n++         StorageDead(_6);                 // bb5[0]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n++         StorageDead(_5);                 // bb5[1]: scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n++         StorageLive(_7);                 // bb5[2]: scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n++         unreachable;                     // bb5[3]: scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n+      }\n+  }\n+  "}, {"sha": "73a01b1f471a93a617de1a4b8c21c24ad0151107", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 4, "deletions": 63, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -1,86 +1,27 @@\n // Test that we don't ICE when trying to dump MIR for unusual item types and\n // that we don't create filenames containing `<` and `>`\n-// ignore-tidy-linelength\n \n struct A;\n \n+// EMIT_MIR rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir\n impl A {\n     const ASSOCIATED_CONSTANT: i32 = 2;\n }\n \n // See #59021\n+// EMIT_MIR rustc.Test-X-{{constructor}}.mir_map.0.mir\n enum Test {\n     X(usize),\n     Y { a: usize },\n }\n \n+// EMIT_MIR rustc.E-V-{{constant}}.mir_map.0.mir\n enum E {\n     V = 5,\n }\n \n fn main() {\n     let f = Test::X as fn(usize) -> Test;\n+// EMIT_MIR rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir\n     let v = Vec::<i32>::new();\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir\n-// bb0: {\n-//     _0 = const 2i32;\n-//     return;\n-// }\n-// bb1 (cleanup): {\n-//     resume;\n-// }\n-// END rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir\n-\n-// START rustc.E-V-{{constant}}.mir_map.0.mir\n-// bb0: {\n-//     _0 = const 5isize;\n-//     return;\n-// }\n-// bb1 (cleanup): {\n-//     resume;\n-// }\n-// END rustc.E-V-{{constant}}.mir_map.0.mir\n-\n-// START rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir\n-//     bb0: {\n-//     goto -> bb7;\n-// }\n-// bb1: {\n-//     return;\n-// }\n-// bb2 (cleanup): {\n-//     resume;\n-// }\n-// bb3: {\n-//     goto -> bb1;\n-// }\n-// bb4 (cleanup): {\n-//     goto -> bb2;\n-// }\n-// bb5 (cleanup): {\n-//     drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4;\n-// }\n-// bb6: {\n-//     drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4];\n-// }\n-// bb7: {\n-//     _2 = &mut (*_1);\n-//     _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5];\n-// }\n-// END rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir\n-\n-// START rustc.Test-X-{{constructor}}.mir_map.0.mir\n-// fn Test::X(_1: usize) -> Test {\n-//     let mut _0: Test;\n-//\n-//     bb0: {\n-//         ((_0 as X).0: usize) = move _1;\n-//         discriminant(_0) = 0;\n-//         return;\n-//     }\n-// }\n-// END rustc.Test-X-{{constructor}}.mir_map.0.mir"}, {"sha": "10c5f8b7fedb6d91025d7fe8718c61f897e943b0", "filename": "src/test/mir-opt/unusual-item-types/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `E::V::{{constant}}#0` 0 mir_map\n+\n+E::V::{{constant}}#0: isize = {\n+    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+\n+    bb0: {\n+        _0 = const 5isize;               // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+                                         // ty::Const\n+                                         // + ty: isize\n+                                         // + val: Value(Scalar(0x0000000000000005))\n+                                         // mir::Constant\n+                                         // + span: $DIR/unusual-item-types.rs:20:9: 20:10\n+                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000005)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+    }\n+}"}, {"sha": "12765ac51abfc99af0af869d1cc1e799af24e25e", "filename": "src/test/mir-opt/unusual-item-types/rustc.Test-X-{{constructor}}.mir_map.0.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `Test::X` 0 mir_map\n+\n+fn Test::X(_1: usize) -> Test {\n+    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n+\n+    bb0: {\n+        ((_0 as X).0: usize) = move _1;  // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n+        discriminant(_0) = 0;            // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n+        return;                          // bb0[2]: scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n+    }\n+}"}, {"sha": "473c72a342e5205b27ac7c4aa00121816425ebdd", "filename": "src/test/mir-opt/unusual-item-types/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,46 @@\n+// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+\n+fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+\n+    bb0: {\n+        goto -> bb7;                     // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb1: {\n+        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb3: {\n+        goto -> bb1;                     // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb2;                     // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb6: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb7: {\n+        _2 = &mut (*_1);                 // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+    }\n+}"}, {"sha": "2a87294f1c8060aa851ce685f17fe1bb335d7432", "filename": "src/test/mir-opt/unusual-item-types/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `<impl at $DIR/unusual-item-types.rs:7:1: 9:2>::ASSOCIATED_CONSTANT` 0 mir_map\n+\n+const <impl at $DIR/unusual-item-types.rs:7:1: 9:2>::ASSOCIATED_CONSTANT: i32 = {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:8:32: 8:35\n+\n+    bb0: {\n+        _0 = const 2i32;                 // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:8:38: 8:39\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/unusual-item-types.rs:8:38: 8:39\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:8:5: 8:40\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:8:5: 8:40\n+    }\n+}"}, {"sha": "56f6c3380a719b0c7e2c591939ed723513a4fa2c", "filename": "src/test/mir-opt/while-storage.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fwhile-storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fwhile-storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage.rs?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -5,6 +5,7 @@ fn get_bool(c: bool) -> bool {\n     c\n }\n \n+// EMIT_MIR rustc.while_loop.PreCodegen.after.mir\n fn while_loop(c: bool) {\n     while get_bool(c) {\n         if get_bool(c) {\n@@ -16,41 +17,3 @@ fn while_loop(c: bool) {\n fn main() {\n     while_loop(false);\n }\n-\n-// END RUST SOURCE\n-\n-// START rustc.while_loop.PreCodegen.after.mir\n-// bb0: {\n-//     StorageLive(_2);\n-//     StorageLive(_3);\n-//     _3 = _1;\n-//     _2 = const get_bool(move _3) -> bb1;\n-// }\n-// bb1: {\n-//     StorageDead(_3);\n-//     switchInt(_2) -> [false: bb6, otherwise: bb2];\n-// }\n-// bb2: {\n-//      StorageLive(_4);\n-//      StorageLive(_5);\n-//      _5 = _1;\n-//      _4 = const get_bool(move _5) -> bb3;\n-// }\n-// bb3: {\n-//      StorageDead(_5);\n-//      switchInt(_4) -> [false: bb4, otherwise: bb5];\n-// }\n-// bb4: {\n-//      StorageDead(_4);\n-//      StorageDead(_2);\n-//      goto -> bb0;\n-// }\n-//  bb5: {\n-//      StorageDead(_4);\n-//      goto -> bb6;\n-//  }\n-//  bb6: {\n-//      StorageDead(_2);\n-//      return;\n-//  }\n-// END rustc.while_loop.PreCodegen.after.mir"}, {"sha": "8fadcb8c12f30f32bf188062106b75c042c77fb7", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "patch": "@@ -0,0 +1,62 @@\n+// MIR for `while_loop` after PreCodegen\n+\n+fn while_loop(_1: bool) -> () {\n+    debug c => _1;                       // in scope 0 at $DIR/while-storage.rs:9:15: 9:16\n+    let mut _0: ();                      // return place in scope 0 at $DIR/while-storage.rs:9:24: 9:24\n+    let mut _2: bool;                    // in scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+    let mut _3: bool;                    // in scope 0 at $DIR/while-storage.rs:10:20: 10:21\n+    let mut _4: bool;                    // in scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+    let mut _5: bool;                    // in scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+\n+    bb0: {\n+        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/while-storage.rs:10:20: 10:21\n+        _3 = _1;                         // bb0[2]: scope 0 at $DIR/while-storage.rs:10:20: 10:21\n+        _2 = const get_bool(move _3) -> bb1; // bb0[3]: scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+                                         // ty::Const\n+                                         // + ty: fn(bool) -> bool {get_bool}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while-storage.rs:10:11: 10:19\n+                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        switchInt(_2) -> [false: bb6, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+    }\n+\n+    bb2: {\n+        StorageLive(_4);                 // bb2[0]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageLive(_5);                 // bb2[1]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+        _5 = _1;                         // bb2[2]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+        _4 = const get_bool(move _5) -> bb3; // bb2[3]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+                                         // ty::Const\n+                                         // + ty: fn(bool) -> bool {get_bool}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while-storage.rs:11:12: 11:20\n+                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // bb3[0]: scope 0 at $DIR/while-storage.rs:11:22: 11:23\n+        switchInt(_4) -> [false: bb4, otherwise: bb5]; // bb3[1]: scope 0 at $DIR/while-storage.rs:11:9: 13:10\n+    }\n+\n+    bb4: {\n+        StorageDead(_4);                 // bb4[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        goto -> bb0;                     // bb4[2]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_4);                 // bb5[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        goto -> bb6;                     // bb5[1]: scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+    }\n+\n+    bb6: {\n+        StorageDead(_2);                 // bb6[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        return;                          // bb6[1]: scope 0 at $DIR/while-storage.rs:15:2: 15:2\n+    }\n+}"}]}