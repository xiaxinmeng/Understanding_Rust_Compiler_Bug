{"sha": "4b2985a23e341e43c49a6865648f94607e11113a", "node_id": "C_kwDOAAsO6NoAKDRiMjk4NWEyM2UzNDFlNDNjNDlhNjg2NTY0OGY5NDYwN2UxMTExM2E", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-16T11:21:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-16T12:19:26Z"}, "message": "Infer the array size for slice patterns", "tree": {"sha": "ae6a33498903c100fcc0212cbf2d02fa70d5334d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae6a33498903c100fcc0212cbf2d02fa70d5334d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b2985a23e341e43c49a6865648f94607e11113a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2985a23e341e43c49a6865648f94607e11113a", "html_url": "https://github.com/rust-lang/rust/commit/4b2985a23e341e43c49a6865648f94607e11113a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b2985a23e341e43c49a6865648f94607e11113a/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0210f8a43efefef93dcb9ce0cf34b083fd3d51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0210f8a43efefef93dcb9ce0cf34b083fd3d51a", "html_url": "https://github.com/rust-lang/rust/commit/f0210f8a43efefef93dcb9ce0cf34b083fd3d51a"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "9821815ca33c3f28d59472f734d0a1f6f4266798", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b2985a23e341e43c49a6865648f94607e11113a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2985a23e341e43c49a6865648f94607e11113a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=4b2985a23e341e43c49a6865648f94607e11113a", "patch": "@@ -6,6 +6,7 @@ use chalk_ir::Mutability;\n use hir_def::{\n     expr::{BindingAnnotation, Expr, Literal, Pat, PatId, RecordFieldPat},\n     path::Path,\n+    type_ref::ConstScalar,\n };\n use hir_expand::name::Name;\n \n@@ -14,7 +15,8 @@ use crate::{\n         Adjust, Adjustment, AutoBorrow, BindingMode, Expectation, InferenceContext, TypeMismatch,\n     },\n     lower::lower_to_chalk_mutability,\n-    static_lifetime, Interner, Substitution, Ty, TyBuilder, TyExt, TyKind,\n+    static_lifetime, ConcreteConst, ConstValue, Interner, Substitution, Ty, TyBuilder, TyExt,\n+    TyKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -232,16 +234,28 @@ impl<'a> InferenceContext<'a> {\n                     self.infer_pat(pat_id, &elem_ty, default_bm);\n                 }\n \n-                let pat_ty = match expected.kind(Interner) {\n-                    TyKind::Array(_, const_) => TyKind::Array(elem_ty, const_.clone()),\n-                    _ => TyKind::Slice(elem_ty),\n-                }\n-                .intern(Interner);\n                 if let &Some(slice_pat_id) = slice {\n-                    self.infer_pat(slice_pat_id, &pat_ty, default_bm);\n+                    let rest_pat_ty = match expected.kind(Interner) {\n+                        TyKind::Array(_, length) => {\n+                            let length = match length.data(Interner).value {\n+                                ConstValue::Concrete(ConcreteConst {\n+                                    interned: ConstScalar::Usize(length),\n+                                }) => length.checked_sub((prefix.len() + suffix.len()) as u64),\n+                                _ => None,\n+                            };\n+                            TyKind::Array(elem_ty.clone(), crate::consteval::usize_const(length))\n+                        }\n+                        _ => TyKind::Slice(elem_ty.clone()),\n+                    }\n+                    .intern(Interner);\n+                    self.infer_pat(slice_pat_id, &rest_pat_ty, default_bm);\n                 }\n \n-                pat_ty\n+                match expected.kind(Interner) {\n+                    TyKind::Array(_, const_) => TyKind::Array(elem_ty, const_.clone()),\n+                    _ => TyKind::Slice(elem_ty),\n+                }\n+                .intern(Interner)\n             }\n             Pat::Wild => expected.clone(),\n             Pat::Range { start, end } => {"}, {"sha": "5b08d65c4671cfc4934333560218f8a8148511e2", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b2985a23e341e43c49a6865648f94607e11113a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2985a23e341e43c49a6865648f94607e11113a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=4b2985a23e341e43c49a6865648f94607e11113a", "patch": "@@ -890,6 +890,32 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn slice_pattern_correctly_handles_array_length() {\n+    check_infer(\n+        r#\"\n+fn main() {\n+    let [head, middle @ .., tail, tail2] = [1, 2, 3, 4, 5];\n+}\n+    \"#,\n+        expect![[r#\"\n+            10..73 '{     ... 5]; }': ()\n+            20..52 '[head,...tail2]': [i32; 5]\n+            21..25 'head': i32\n+            27..38 'middle @ ..': [i32; 2]\n+            36..38 '..': [i32; 2]\n+            40..44 'tail': i32\n+            46..51 'tail2': i32\n+            55..70 '[1, 2, 3, 4, 5]': [i32; 5]\n+            56..57 '1': i32\n+            59..60 '2': i32\n+            62..63 '3': i32\n+            65..66 '4': i32\n+            68..69 '5': i32\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn pattern_lookup_in_value_ns() {\n     check_types("}]}