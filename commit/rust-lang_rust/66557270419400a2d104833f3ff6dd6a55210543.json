{"sha": "66557270419400a2d104833f3ff6dd6a55210543", "node_id": "C_kwDOAAsO6NoAKDY2NTU3MjcwNDE5NDAwYTJkMTA0ODMzZjNmZjZkZDZhNTUyMTA1NDM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-11-12T12:15:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-11-12T12:15:14Z"}, "message": "rustc_feature: Convert `BuiltinAttribute` from tuple to a struct", "tree": {"sha": "631b73a25e051c4f6f4829de554add92f50374e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631b73a25e051c4f6f4829de554add92f50374e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66557270419400a2d104833f3ff6dd6a55210543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66557270419400a2d104833f3ff6dd6a55210543", "html_url": "https://github.com/rust-lang/rust/commit/66557270419400a2d104833f3ff6dd6a55210543", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66557270419400a2d104833f3ff6dd6a55210543/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c23daeb461ac02413eb36c8cefcc5530638a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c23daeb461ac02413eb36c8cefcc5530638a05", "html_url": "https://github.com/rust-lang/rust/commit/e4c23daeb461ac02413eb36c8cefcc5530638a05"}], "stats": {"total": 106, "additions": 62, "deletions": 44}, "files": [{"sha": "b011a2e8117af32bad24e55ed9bdb9082016a9f6", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=66557270419400a2d104833f3ff6dd6a55210543", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n use rustc_errors::struct_span_err;\n-use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue};\n use rustc_session::parse::{feature_err, feature_err_issue};\n use rustc_session::Session;\n@@ -301,11 +301,14 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        let attr_info =\n-            attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+        let attr_info = attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name));\n         // Check feature gates for built-in attributes.\n-        if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n-            gate_feature_fn!(self, has_feature, attr.span, name, descr);\n+        if let Some(BuiltinAttribute {\n+            gate: AttributeGate::Gated(_, name, descr, has_feature),\n+            ..\n+        }) = attr_info\n+        {\n+            gate_feature_fn!(self, has_feature, attr.span, *name, descr);\n         }\n         // Check unstable flavors of the `#[doc]` attribute.\n         if attr.has_name(sym::doc) {"}, {"sha": "7212bbf38c7f215555ef2a3c086e2b20b3dfaa3d", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=66557270419400a2d104833f3ff6dd6a55210543", "patch": "@@ -115,16 +115,26 @@ macro_rules! template {\n \n macro_rules! ungated {\n     ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl, Ungated)\n+        BuiltinAttribute { name: sym::$attr, type_: $typ, template: $tpl, gate: Ungated }\n     };\n }\n \n macro_rules! gated {\n     ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl, Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)))\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)),\n+        }\n     };\n     ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n-        (sym::$attr, $typ, $tpl, Gated(Stability::Unstable, sym::$attr, $msg, cfg_fn!($attr)))\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Gated(Stability::Unstable, sym::$attr, $msg, cfg_fn!($attr)),\n+        }\n     };\n }\n \n@@ -143,12 +153,12 @@ macro_rules! rustc_attr {\n         )\n     };\n     ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n-        (\n-            sym::$attr,\n-            $typ,\n-            $tpl,\n-            Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)),\n-        )\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)),\n+        }\n     };\n }\n \n@@ -161,7 +171,12 @@ macro_rules! experimental {\n const IMPL_DETAIL: &str = \"internal implementation detail\";\n const INTERNAL_UNSTABLE: &str = \"this is an internal attribute that will never be stable\";\n \n-pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n+pub struct BuiltinAttribute {\n+    pub name: Symbol,\n+    pub type_: AttributeType,\n+    pub template: AttributeTemplate,\n+    pub gate: AttributeGate,\n+}\n \n /// Attributes that have a special meaning to rustc or rustdoc.\n #[rustfmt::skip]\n@@ -290,18 +305,20 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Plugins:\n-    (\n-        sym::plugin, CrateLevel, template!(List: \"name\"),\n-        Gated(\n+    BuiltinAttribute {\n+        name: sym::plugin,\n+        type_: CrateLevel,\n+        template: template!(List: \"name\"),\n+        gate: Gated(\n             Stability::Deprecated(\n                 \"https://github.com/rust-lang/rust/pull/64675\",\n                 Some(\"may be removed in a future compiler version\"),\n             ),\n             sym::plugin,\n             \"compiler plugins are deprecated\",\n             cfg_fn!(plugin)\n-        )\n-    ),\n+        ),\n+    },\n \n     // Testing:\n     gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n@@ -497,17 +514,17 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n         \"language items are subject to change\",\n     ),\n-    (\n-        sym::rustc_diagnostic_item,\n-        Normal,\n-        template!(NameValueStr: \"name\"),\n-        Gated(\n+    BuiltinAttribute {\n+        name: sym::rustc_diagnostic_item,\n+        type_: Normal,\n+        template: template!(NameValueStr: \"name\"),\n+        gate: Gated(\n             Stability::Unstable,\n             sym::rustc_attrs,\n             \"diagnostic items compiler internal support for linting\",\n             cfg_fn!(rustc_attrs),\n         ),\n-    ),\n+    },\n     gated!(\n         // Used in resolve:\n         prelude_import, Normal, template!(Word),\n@@ -601,7 +618,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n ];\n \n pub fn deprecated_attributes() -> Vec<&'static BuiltinAttribute> {\n-    BUILTIN_ATTRIBUTES.iter().filter(|(.., gate)| gate.is_deprecated()).collect()\n+    BUILTIN_ATTRIBUTES.iter().filter(|attr| attr.gate.is_deprecated()).collect()\n }\n \n pub fn is_builtin_attr_name(name: Symbol) -> bool {\n@@ -612,8 +629,8 @@ pub static BUILTIN_ATTRIBUTE_MAP: SyncLazy<FxHashMap<Symbol, &BuiltinAttribute>>\n     SyncLazy::new(|| {\n         let mut map = FxHashMap::default();\n         for attr in BUILTIN_ATTRIBUTES.iter() {\n-            if map.insert(attr.0, attr).is_some() {\n-                panic!(\"duplicate builtin attribute `{}`\", attr.0);\n+            if map.insert(attr.name, attr).is_some() {\n+                panic!(\"duplicate builtin attribute `{}`\", attr.name);\n             }\n         }\n         map"}, {"sha": "f2e4e70a197796923fb8eae72e799cb39d829d74", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=66557270419400a2d104833f3ff6dd6a55210543", "patch": "@@ -32,8 +32,7 @@ use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n-use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n-use rustc_feature::{GateIssue, Stability};\n+use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n@@ -959,7 +958,7 @@ impl EarlyLintPass for AnonymousParameters {\n pub struct DeprecatedAttr {\n     // This is not free to compute, so we want to keep it around, rather than\n     // compute it for every attribute.\n-    depr_attrs: Vec<&'static (Symbol, AttributeType, AttributeTemplate, AttributeGate)>,\n+    depr_attrs: Vec<&'static BuiltinAttribute>,\n }\n \n impl_lint_pass!(DeprecatedAttr => []);\n@@ -990,14 +989,14 @@ fn lint_deprecated_attr(\n \n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n-        for &&(n, _, _, ref g) in &self.depr_attrs {\n-            if attr.ident().map(|ident| ident.name) == Some(n) {\n+        for BuiltinAttribute { name, gate, .. } in &self.depr_attrs {\n+            if attr.ident().map(|ident| ident.name) == Some(*name) {\n                 if let &AttributeGate::Gated(\n                     Stability::Deprecated(link, suggestion),\n                     name,\n                     reason,\n                     _,\n-                ) = g\n+                ) = gate\n                 {\n                     let msg =\n                         format!(\"use of deprecated attribute `{}`: {}. See {}\", name, reason, link);"}, {"sha": "4781813ee8e5641ee25deb2122cc1524b5de528b", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=66557270419400a2d104833f3ff6dd6a55210543", "patch": "@@ -5,7 +5,7 @@ use crate::parse_in;\n use rustc_ast::tokenstream::{DelimSpan, TokenTree};\n use rustc_ast::{self as ast, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n use rustc_errors::{Applicability, FatalError, PResult};\n-use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeTemplate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Symbol};\n@@ -15,14 +15,13 @@ pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n         return;\n     }\n \n-    let attr_info =\n-        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+    let attr_info = attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name));\n \n     // Check input tokens for built-in and key-value attributes.\n     match attr_info {\n         // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-        Some((name, _, template, _)) if name != sym::rustc_dummy => {\n-            check_builtin_attribute(sess, attr, name, template)\n+        Some(BuiltinAttribute { name, template, .. }) if *name != sym::rustc_dummy => {\n+            check_builtin_attribute(sess, attr, *name, *template)\n         }\n         _ if let MacArgs::Eq(..) = attr.get_normal_item().args => {\n             // All key-value attributes are restricted to meta-item syntax.\n@@ -168,7 +167,7 @@ pub fn emit_fatal_malformed_builtin_attribute(\n     attr: &Attribute,\n     name: Symbol,\n ) -> ! {\n-    let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").2;\n+    let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").template;\n     emit_malformed_attribute(sess, attr, name, template);\n     // This is fatal, otherwise it will likely cause a cascade of other errors\n     // (and an error here is expected to be very rare)."}, {"sha": "129a9fdab8234aa08febbe6d49976f008b2f2e94", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=66557270419400a2d104833f3ff6dd6a55210543", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n-use rustc_feature::{AttributeType, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -148,7 +148,7 @@ impl CheckAttrVisitor<'tcx> {\n             }\n \n             if hir_id != CRATE_HIR_ID {\n-                if let Some((_, AttributeType::CrateLevel, ..)) =\n+                if let Some(BuiltinAttribute { type_: AttributeType::CrateLevel, .. }) =\n                     attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name))\n                 {\n                     self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {"}, {"sha": "c46a18e51031abd33a261a31a0f84a99d088f026", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66557270419400a2d104833f3ff6dd6a55210543/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=66557270419400a2d104833f3ff6dd6a55210543", "patch": "@@ -731,7 +731,7 @@ impl<'a> Resolver<'a> {\n                         suggestions.extend(\n                             BUILTIN_ATTRIBUTES\n                                 .iter()\n-                                .map(|(name, ..)| TypoSuggestion::typo_from_res(*name, res)),\n+                                .map(|attr| TypoSuggestion::typo_from_res(attr.name, res)),\n                         );\n                     }\n                 }"}]}