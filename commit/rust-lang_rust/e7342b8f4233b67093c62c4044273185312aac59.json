{"sha": "e7342b8f4233b67093c62c4044273185312aac59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MzQyYjhmNDIzM2I2NzA5M2M2MmM0MDQ0MjczMTg1MzEyYWFjNTk=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-10T02:19:59Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:39:16Z"}, "message": "Permit constructing Build without executing", "tree": {"sha": "be99ae0fef31cce8e82009f1e13fdb9e0e5a5760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be99ae0fef31cce8e82009f1e13fdb9e0e5a5760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7342b8f4233b67093c62c4044273185312aac59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7342b8f4233b67093c62c4044273185312aac59", "html_url": "https://github.com/rust-lang/rust/commit/e7342b8f4233b67093c62c4044273185312aac59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7342b8f4233b67093c62c4044273185312aac59/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e56b62c5bef0b171785d5b20b3fd4e714db528", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e56b62c5bef0b171785d5b20b3fd4e714db528", "html_url": "https://github.com/rust-lang/rust/commit/a5e56b62c5bef0b171785d5b20b3fd4e714db528"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "cad4a794cf00592b03fade3abfdc52db24dccd8e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7342b8f4233b67093c62c4044273185312aac59/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7342b8f4233b67093c62c4044273185312aac59/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e7342b8f4233b67093c62c4044273185312aac59", "patch": "@@ -326,7 +326,7 @@ impl Build {\n         let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n         let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n \n-        Build {\n+        let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             local_rebuild: config.local_rebuild,\n@@ -357,7 +357,27 @@ impl Build {\n             delayed_failures: RefCell::new(Vec::new()),\n             prerelease_version: Cell::new(None),\n             tool_artifacts: Default::default(),\n+        };\n+\n+        build.verbose(\"finding compilers\");\n+        cc_detect::find(&mut build);\n+        build.verbose(\"running sanity check\");\n+        sanity::check(&mut build);\n+        // If local-rust is the same major.minor as the current version, then force a local-rebuild\n+        let local_version_verbose = output(\n+            Command::new(&build.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n+        let local_release = local_version_verbose\n+            .lines().filter(|x| x.starts_with(\"release:\"))\n+            .next().unwrap().trim_left_matches(\"release:\").trim();\n+        let my_version = channel::CFG_RELEASE_NUM;\n+        if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n+            build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n+            build.local_rebuild = true;\n         }\n+        build.verbose(\"learning about cargo\");\n+        metadata::build(&mut build);\n+\n+        build\n     }\n \n     pub fn build_triple(&self) -> &[Interned<String>] {\n@@ -376,24 +396,6 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n-        self.verbose(\"finding compilers\");\n-        cc_detect::find(self);\n-        self.verbose(\"running sanity check\");\n-        sanity::check(self);\n-        // If local-rust is the same major.minor as the current version, then force a local-rebuild\n-        let local_version_verbose = output(\n-            Command::new(&self.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n-        let local_release = local_version_verbose\n-            .lines().filter(|x| x.starts_with(\"release:\"))\n-            .next().unwrap().trim_left_matches(\"release:\").trim();\n-        let my_version = channel::CFG_RELEASE_NUM;\n-        if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n-            self.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n-            self.local_rebuild = true;\n-        }\n-        self.verbose(\"learning about cargo\");\n-        metadata::build(self);\n-\n         let builder = builder::Builder::new(&self);\n         if let Some(path) = builder.paths.get(0) {\n             if path == Path::new(\"nonexistent/path/to/trigger/cargo/metadata\") {"}]}