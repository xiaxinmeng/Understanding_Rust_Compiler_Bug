{"sha": "757a65bfdf504f6c9177514abb385618e784f0a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1N2E2NWJmZGY1MDRmNmM5MTc3NTE0YWJiMzg1NjE4ZTc4NGYwYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T04:51:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T04:51:14Z"}, "message": "Auto merge of #88250 - rusticstuff:macos-lld, r=nagisa\n\nMake `-Z gcc-ld=lld` work for Apple targets\n\n`-Z gcc-ld=lld` was introduced in #85961. It does not work on Macos because lld needs be either named `ld64` or passed `-flavor darwin` as the first two arguments in order to select the Mach-O flavor. Rust invokes cc (=clang) on Macos for linking which calls `ld` as linker binary and not `ld64`, so just creating an `ld64` binary and modifying the search path with `-B` does not work.\n\nIn order to solve this patch does:\n* Set the `lld_flavor` for all Apple-derived targets to `LldFlavor::Ld64`. As far as I can see this actually works towards fixing `-Xlinker=rust-lld` as all those targets use the Mach-O object format.\n* Copy/hardlink rust-lld to the gcc-ld subdirectory as ld64 next to ld.\n* If `-Z gcc-ld=lld` is used and the target lld flavor is Ld64 add `-fuse-ld=/path/to/ld64` to the linker invocation.\n\nFixes #86945.", "tree": {"sha": "f43495c342123f37da31319b13a5bb8fc85def55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f43495c342123f37da31319b13a5bb8fc85def55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757a65bfdf504f6c9177514abb385618e784f0a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757a65bfdf504f6c9177514abb385618e784f0a5", "html_url": "https://github.com/rust-lang/rust/commit/757a65bfdf504f6c9177514abb385618e784f0a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757a65bfdf504f6c9177514abb385618e784f0a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a21a5b324963e18f00106b611460a5a83a53ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a21a5b324963e18f00106b611460a5a83a53ace", "html_url": "https://github.com/rust-lang/rust/commit/3a21a5b324963e18f00106b611460a5a83a53ace"}, {"sha": "0f7702efa1cbff1ae0552664dc814e9ac682c09c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7702efa1cbff1ae0552664dc814e9ac682c09c", "html_url": "https://github.com/rust-lang/rust/commit/0f7702efa1cbff1ae0552664dc814e9ac682c09c"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "f5463bca3384c4c5e5d4934eea86c93b2e90fc6a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/757a65bfdf504f6c9177514abb385618e784f0a5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757a65bfdf504f6c9177514abb385618e784f0a5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=757a65bfdf504f6c9177514abb385618e784f0a5", "patch": "@@ -2482,20 +2482,39 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         if let LinkerFlavor::Gcc = flavor {\n             match ld_impl {\n                 LdImpl::Lld => {\n-                    let tools_path =\n-                        sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n-                    let lld_path = tools_path\n-                        .into_iter()\n-                        .map(|p| p.join(\"gcc-ld\"))\n-                        .find(|p| {\n-                            p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" }).exists()\n-                        })\n-                        .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n-                    cmd.cmd().arg({\n-                        let mut arg = OsString::from(\"-B\");\n-                        arg.push(lld_path);\n-                        arg\n-                    });\n+                    if sess.target.lld_flavor == LldFlavor::Ld64 {\n+                        let tools_path =\n+                            sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                        let ld64_exe = tools_path\n+                            .into_iter()\n+                            .map(|p| p.join(\"gcc-ld\"))\n+                            .map(|p| {\n+                                p.join(if sess.host.is_like_windows { \"ld64.exe\" } else { \"ld64\" })\n+                            })\n+                            .find(|p| p.exists())\n+                            .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld64) not found\"));\n+                        cmd.cmd().arg({\n+                            let mut arg = OsString::from(\"-fuse-ld=\");\n+                            arg.push(ld64_exe);\n+                            arg\n+                        });\n+                    } else {\n+                        let tools_path =\n+                            sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                        let lld_path = tools_path\n+                            .into_iter()\n+                            .map(|p| p.join(\"gcc-ld\"))\n+                            .find(|p| {\n+                                p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" })\n+                                    .exists()\n+                            })\n+                            .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n+                        cmd.cmd().arg({\n+                            let mut arg = OsString::from(\"-B\");\n+                            arg.push(lld_path);\n+                            arg\n+                        });\n+                    }\n                 }\n             }\n         } else {"}, {"sha": "a21b784e11b1ca4578c3dd7454704e87720e0e1e", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/757a65bfdf504f6c9177514abb385618e784f0a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757a65bfdf504f6c9177514abb385618e784f0a5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=757a65bfdf504f6c9177514abb385618e784f0a5", "patch": "@@ -1,6 +1,6 @@\n use std::env;\n \n-use crate::spec::{FramePointer, SplitDebuginfo, TargetOptions};\n+use crate::spec::{FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n \n pub fn opts(os: &str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n@@ -35,6 +35,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         eh_frame_header: false,\n+        lld_flavor: LldFlavor::Ld64,\n \n         // The historical default for macOS targets is to run `dsymutil` which\n         // generates a packed version of debuginfo split from the main file."}, {"sha": "8f27adaed8453e26d810b7bde8b96fa4d2e4ed7b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/757a65bfdf504f6c9177514abb385618e784f0a5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757a65bfdf504f6c9177514abb385618e784f0a5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=757a65bfdf504f6c9177514abb385618e784f0a5", "patch": "@@ -1133,6 +1133,10 @@ impl Step for Assemble {\n                 &lld_install.join(\"bin\").join(&src_exe),\n                 &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)),\n             );\n+            builder.copy(\n+                &lld_install.join(\"bin\").join(&src_exe),\n+                &gcc_ld_dir.join(exe(\"ld64\", target_compiler.host)),\n+            );\n         }\n \n         // Similarly, copy `llvm-dwp` into libdir for Split DWARF. Only copy it when the LLVM"}, {"sha": "7c1bb1a91481bdeb69bfb517bbb4ca170ddba788", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/757a65bfdf504f6c9177514abb385618e784f0a5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757a65bfdf504f6c9177514abb385618e784f0a5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=757a65bfdf504f6c9177514abb385618e784f0a5", "patch": "@@ -412,6 +412,8 @@ impl Step for Rustc {\n                 let gcc_lld_dir = dst_dir.join(\"gcc-ld\");\n                 t!(fs::create_dir(&gcc_lld_dir));\n                 builder.copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld\", compiler.host)));\n+                builder\n+                    .copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld64\", compiler.host)));\n             }\n \n             // Copy over llvm-dwp if it's there"}]}