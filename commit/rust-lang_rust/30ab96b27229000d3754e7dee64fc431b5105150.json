{"sha": "30ab96b27229000d3754e7dee64fc431b5105150", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYWI5NmIyNzIyOTAwMGQzNzU0ZTdkZWU2NGZjNDMxYjUxMDUxNTA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-19T09:18:30Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-19T09:20:00Z"}, "message": "std::str: Improve comments for CharIterator", "tree": {"sha": "3f2656bb450f08f89608a1a687a0043d53c7249e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2656bb450f08f89608a1a687a0043d53c7249e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ab96b27229000d3754e7dee64fc431b5105150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ab96b27229000d3754e7dee64fc431b5105150", "html_url": "https://github.com/rust-lang/rust/commit/30ab96b27229000d3754e7dee64fc431b5105150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ab96b27229000d3754e7dee64fc431b5105150/comments", "author": null, "committer": null, "parents": [{"sha": "5eff3e1bd9d6ed2a58700d5cdde3266856f95271", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eff3e1bd9d6ed2a58700d5cdde3266856f95271", "html_url": "https://github.com/rust-lang/rust/commit/5eff3e1bd9d6ed2a58700d5cdde3266856f95271"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "7fde1c9f03cc95e9da238c65fe65275840415238", "filename": "src/libstd/str.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30ab96b27229000d3754e7dee64fc431b5105150/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ab96b27229000d3754e7dee64fc431b5105150/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=30ab96b27229000d3754e7dee64fc431b5105150", "patch": "@@ -255,14 +255,18 @@ Section: Iterators\n */\n \n /// External iterator for a string's characters.\n+/// Use with the `std::iterator` module.\n #[deriving(Clone)]\n pub struct CharIterator<'self> {\n+    /// The slice remaining to be iterated\n     priv string: &'self str,\n }\n \n impl<'self> Iterator<char> for CharIterator<'self> {\n     #[inline]\n     fn next(&mut self) -> Option<char> {\n+        // Decode the next codepoint, then update\n+        // the slice to be just the remaining part\n         if self.string.len() != 0 {\n             let CharRange {ch, next} = self.string.char_range_at(0);\n             unsafe {\n@@ -300,13 +304,16 @@ impl<'self> DoubleEndedIterator<char> for CharIterator<'self> {\n /// Use with the `std::iterator` module.\n #[deriving(Clone)]\n pub struct CharOffsetIterator<'self> {\n+    /// The original string to be iterated\n     priv string: &'self str,\n     priv iter: CharIterator<'self>,\n }\n \n impl<'self> Iterator<(uint, char)> for CharOffsetIterator<'self> {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, char)> {\n+        // Compute the byte offset by using the pointer offset between\n+        // the original string slice and the iterator's remaining part\n         let offset = do self.string.as_imm_buf |a, _| {\n             do self.iter.string.as_imm_buf |b, _| {\n                 b as uint - a as uint\n@@ -1281,7 +1288,8 @@ impl<'self> StrSlice<'self> for &'self str {\n         CharOffsetIterator{string: *self, iter: self.iter()}\n     }\n \n-    /// An iterator over the characters of `self` and their byte offsets.\n+    /// An iterator over the characters of `self` and their byte offsets,\n+    /// in reverse order.\n     #[inline]\n     fn char_offset_rev_iter(&self) -> CharOffsetRevIterator<'self> {\n         self.char_offset_iter().invert()"}]}