{"sha": "f6d262a326b3a44954773fed6983215b62fe4862", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZDI2MmEzMjZiM2E0NDk1NDc3M2ZlZDY5ODMyMTViNjJmZTQ4NjI=", "commit": {"author": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-04-06T01:39:43Z"}, "committer": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-04-06T07:37:08Z"}, "message": "Add unstable book entry", "tree": {"sha": "6f2a26ed6b659ef36be4dfd77bdc95681e8341d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f2a26ed6b659ef36be4dfd77bdc95681e8341d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d262a326b3a44954773fed6983215b62fe4862", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDrgUCxKUwmVd3b8M1krJ1nF23HEFAljl8CUACgkQ1krJ1nF2\n3HG5qg/+ISjzO0VGc8b5PzDLda8SU6NxzOsn2mFIYdWkYjy8ELvsEHI7iadA6Mvm\nFmu5Mo8zyJD0JVIzsa48K9ggWCxe9mV+T3HSe27dihxGf2x7xIHGsEe6I+O+GJF7\nYpcvpYMZCQ5o4GNLjDVyDzJNeXs0X97m1lF0j0XXeXsIsgzu5dD0uNMxWlM/JzHm\nOzz5WjyYoo58zXHk7EAX7d/ElCgeiiQFL8bj328Fvh8FBBquYDegxlDWCtpVXghb\nftAt4K+64IBaiSB1v53pEn/nAB7qiliWmsLxLAjL3lbLV0+3JEBl2H9I0FDBltxJ\nfPjsK7k+JkVSvzWdagCOFNBD3jbKm9+VFOPCMZkQI6GVeasa+T8HtPk1z9TJBYem\ndClDmrIl50d+/kpG7W7VpZnfqLma3MyRiRxpDMudIpLkkYY5dyA8V0Ai9/7sF/eL\nV+/Jz5eln7HEpVDa2AgZ5kWN9fEVGwSroIe5dx5CAAZ0FwkWnkoKjF73zLW+D47m\nbcxphcmZtbS48pswdVSjnRKr+5Y3jAhYh0exYnZJX0+NzqNDHaAeXwIuBCbLTnD9\nbXoebtemh27M45RE7wz+QmohBGGjhls4tkpR8simJcwKI0mLOcKzGdji1Gi+BMPb\nzOZmdxY7+paUvjzvvKn/85DzpTK4uKUr+gJKGgzdvz14NO+iB3g=\n=2t4F\n-----END PGP SIGNATURE-----", "payload": "tree 6f2a26ed6b659ef36be4dfd77bdc95681e8341d9\nparent 2598e4574e9136690add3cef55fbb8ac7356f3d2\nauthor Jon Gjengset <jon@thesquareplanet.com> 1491442783 -0400\ncommitter Jon Gjengset <jon@thesquareplanet.com> 1491464228 -0400\n\nAdd unstable book entry\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d262a326b3a44954773fed6983215b62fe4862", "html_url": "https://github.com/rust-lang/rust/commit/f6d262a326b3a44954773fed6983215b62fe4862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d262a326b3a44954773fed6983215b62fe4862/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2598e4574e9136690add3cef55fbb8ac7356f3d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2598e4574e9136690add3cef55fbb8ac7356f3d2", "html_url": "https://github.com/rust-lang/rust/commit/2598e4574e9136690add3cef55fbb8ac7356f3d2"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "68f31ca75e08ebdf13deb067f58b81da59f11b25", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6d262a326b3a44954773fed6983215b62fe4862/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6d262a326b3a44954773fed6983215b62fe4862/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=f6d262a326b3a44954773fed6983215b62fe4862", "patch": "@@ -37,6 +37,7 @@\n - [collections](collections.md)\n - [collections_range](collections-range.md)\n - [command_envs](command-envs.md)\n+- [compiler_barriers](compiler-barriers.md)\n - [compiler_builtins](compiler-builtins.md)\n - [compiler_builtins_lib](compiler-builtins-lib.md)\n - [concat_idents](concat-idents.md)"}, {"sha": "84190dab32737aff47995c77598604d47168735e", "filename": "src/doc/unstable-book/src/compiler-barriers.md", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f6d262a326b3a44954773fed6983215b62fe4862/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-barriers.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6d262a326b3a44954773fed6983215b62fe4862/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-barriers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-barriers.md?ref=f6d262a326b3a44954773fed6983215b62fe4862", "patch": "@@ -0,0 +1,98 @@\n+# `compiler_barriers`\n+\n+The tracking issue for this feature is: [#41092]\n+\n+[#41092]: https://github.com/rust-lang/rust/issues/41092\n+\n+------------------------\n+\n+The `compiler_barriers` feature exposes the `compiler_barrier` function\n+in `std::sync::atomic`. This function is conceptually similar to C++'s\n+`atomic_signal_fence`, which can currently only be accessed in nightly\n+Rust using the `atomic_singlethreadfence_*` instrinsic functions in\n+`core`, or through the mostly equivalent literal assembly:\n+\n+```rust\n+#![feature(asm)]\n+unsafe { asm!(\"\" ::: \"memory\" : \"volatile\") };\n+```\n+\n+A `compiler_barrier` restricts the kinds of memory re-ordering the\n+compiler is allowed to do. Specifically, depending on the given ordering\n+semantics, the compiler may be disallowed from moving reads or writes\n+from before or after the call to the other side of the call to\n+`compiler_barrier`.\n+\n+## Examples\n+\n+The need to prevent re-ordering of reads and writes often arises when\n+working with low-level devices. Consider a piece of code that interacts\n+with an ethernet card with a set of internal registers that are accessed\n+through an address port register (`a: &mut usize`) and a data port\n+register (`d: &usize`). To read internal register 5, the following code\n+might then be used:\n+\n+```rust\n+fn read_fifth(a: &mut usize, d: &usize) -> usize {\n+    *a = 5;\n+    *d\n+}\n+```\n+\n+In this case, the compiler is free to re-order these two statements if\n+it thinks doing so might result in better performance, register use, or\n+anything else compilers care about. However, in doing so, it would break\n+the code, as `x` would be set to the value of some other device\n+register!\n+\n+By inserting a compiler barrier, we can force the compiler to not\n+re-arrange these two statements, making the code function correctly\n+again:\n+\n+```rust\n+#![feature(compiler_barriers)]\n+use std::sync::atomic;\n+\n+fn read_fifth(a: &mut usize, d: &usize) -> usize {\n+    *a = 5;\n+    atomic::compiler_barrier(atomic::Ordering::SeqCst);\n+    *d\n+}\n+```\n+\n+Compiler barriers are also useful in code that implements low-level\n+synchronization primitives. Consider a structure with two different\n+atomic variables, with a dependency chain between them:\n+\n+```rust\n+use std::sync::atomic;\n+\n+fn thread1(x: &atomic::AtomicUsize, y: &atomic::AtomicUsize) {\n+    x.store(1, atomic::Ordering::Release);\n+    let v1 = y.load(atomic::Ordering::Acquire);\n+}\n+fn thread2(x: &atomic::AtomicUsize, y: &atomic::AtomicUsize) {\n+    y.store(1, atomic::Ordering::Release);\n+    let v2 = x.load(atomic::Ordering::Acquire);\n+}\n+```\n+\n+This code will guarantee that `thread1` sees any writes to `y` made by\n+`thread2`, and that `thread2` sees any writes to `x`. Intuitively, one\n+might also expect that if `thread2` sees `v2 == 0`, `thread1` must see\n+`v1 == 1` (since `thread2`'s store happened before its `load`, and its\n+load did not see `thread1`'s store). However, the code as written does\n+*not* guarantee this, because the compiler is allowed to re-order the\n+store and load within each thread. To enforce this particular behavior,\n+a call to `compiler_barrier(Ordering::SeqCst)` would need to be inserted\n+between the `store` and `load` in both functions.\n+\n+Compiler barriers with weaker re-ordering semantics (such as\n+`Ordering::Acquire`) can also be useful, but are beyond the scope of\n+this text. Curious readers are encouraged to read the Linux kernel's\n+discussion of [memory barriers][1], as well as C++ references on\n+[`std::memory_order`][2] and [`atomic_signal_fence`][3].\n+\n+[1]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n+[2]: http://en.cppreference.com/w/cpp/atomic/memory_order\n+[3]: http://www.cplusplus.com/reference/atomic/atomic_signal_fence/"}, {"sha": "8cf1d1d54a5e94fb8d87947707ed8590b958df2a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d262a326b3a44954773fed6983215b62fe4862/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d262a326b3a44954773fed6983215b62fe4862/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f6d262a326b3a44954773fed6983215b62fe4862", "patch": "@@ -1598,7 +1598,7 @@ pub fn fence(order: Ordering) {\n /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n #[inline]\n-#[unstable(feature = \"std_compiler_fences\", issue = \"41091\")]\n+#[unstable(feature = \"compiler_barriers\", issue = \"41091\")]\n pub fn compiler_barrier(order: Ordering) {\n     unsafe {\n         match order {"}]}