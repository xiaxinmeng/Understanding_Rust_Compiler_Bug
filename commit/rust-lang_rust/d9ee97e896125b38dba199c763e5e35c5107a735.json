{"sha": "d9ee97e896125b38dba199c763e5e35c5107a735", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZWU5N2U4OTYxMjViMzhkYmExOTljNzYzZTVlMzVjNTEwN2E3MzU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-21T21:18:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:07Z"}, "message": "resolve: Use standard stability diagnostics for macros", "tree": {"sha": "13f5e62bc0cce4a1ede393c0183143729a41d6f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f5e62bc0cce4a1ede393c0183143729a41d6f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ee97e896125b38dba199c763e5e35c5107a735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ee97e896125b38dba199c763e5e35c5107a735", "html_url": "https://github.com/rust-lang/rust/commit/d9ee97e896125b38dba199c763e5e35c5107a735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ee97e896125b38dba199c763e5e35c5107a735/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3542995ff9d04684ccd0a856e97d1c981fbf74c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3542995ff9d04684ccd0a856e97d1c981fbf74c4", "html_url": "https://github.com/rust-lang/rust/commit/3542995ff9d04684ccd0a856e97d1c981fbf74c4"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "fed9dfd38e59f5cf3fb2e141d116b3d486b39497", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d9ee97e896125b38dba199c763e5e35c5107a735", "patch": "@@ -477,6 +477,36 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n+pub fn report_unstable(\n+    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, span: Span\n+) {\n+    let msg = match reason {\n+        Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n+        None => format!(\"use of unstable library feature '{}'\", &feature)\n+    };\n+\n+    let msp: MultiSpan = span.into();\n+    let cm = &sess.parse_sess.source_map();\n+    let span_key = msp.primary_span().and_then(|sp: Span|\n+        if !sp.is_dummy() {\n+            let file = cm.lookup_char_pos(sp.lo()).file;\n+            if file.name.is_macros() {\n+                None\n+            } else {\n+                Some(span)\n+            }\n+        } else {\n+            None\n+        }\n+    );\n+\n+    let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n+    let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n+    if fresh {\n+        emit_feature_err(&sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg);\n+    }\n+}\n+\n /// Checks whether an item marked with `deprecated(since=\"X\")` is currently\n /// deprecated (i.e., whether X is not greater than the current rustc version).\n pub fn deprecation_in_effect(since: &str) -> bool {\n@@ -715,34 +745,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n         match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n-            EvalResult::Deny { feature, reason, issue } => {\n-                let msg = match reason {\n-                    Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n-                    None => format!(\"use of unstable library feature '{}'\", &feature)\n-                };\n-\n-                let msp: MultiSpan = span.into();\n-                let cm = &self.sess.parse_sess.source_map();\n-                let span_key = msp.primary_span().and_then(|sp: Span|\n-                    if !sp.is_dummy() {\n-                        let file = cm.lookup_char_pos(sp.lo()).file;\n-                        if file.name.is_macros() {\n-                            None\n-                        } else {\n-                            Some(span)\n-                        }\n-                    } else {\n-                        None\n-                    }\n-                );\n-\n-                let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n-                let fresh = self.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n-                if fresh {\n-                    emit_feature_err(&self.sess.parse_sess, feature, span,\n-                                     GateIssue::Library(Some(issue)), &msg);\n-                }\n-            }\n+            EvalResult::Deny { feature, reason, issue } =>\n+                report_unstable(self.sess, feature, reason, issue, span),\n             EvalResult::Unmarked => {\n                 // The API could be uncallable for other reasons, for example when a private module\n                 // was referenced."}, {"sha": "8cd3f6d94139f72db8cd2ac32dd5cd9ecd4e3b1f", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d9ee97e896125b38dba199c763e5e35c5107a735", "patch": "@@ -9,6 +9,7 @@ use crate::resolve_imports::ImportResolver;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n+use rustc::middle::stability;\n use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, Ident};\n use syntax::attr::{self, StabilityLevel};\n@@ -18,7 +19,7 @@ use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::{feature_err, emit_feature_err, is_builtin_attr_name};\n+use syntax::feature_gate::{feature_err, is_builtin_attr_name};\n use syntax::feature_gate::{AttributeGate, GateIssue, Stability, BUILTIN_ATTRIBUTES};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::visit::Visitor;\n@@ -237,13 +238,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n         invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, &format));\n \n         if let Some(stability) = ext.stability {\n-            if let StabilityLevel::Unstable { issue, .. } = stability.level {\n-                let features = self.session.features_untracked();\n-                if !span.allows_unstable(stability.feature) &&\n-                   features.declared_lib_features.iter().all(|(feat, _)| *feat != stability.feature) {\n-                    let msg = format!(\"macro {}! is unstable\", path);\n-                    emit_feature_err(&self.session.parse_sess, stability.feature, span,\n-                                     GateIssue::Library(Some(issue)), &msg);\n+            if let StabilityLevel::Unstable { reason, issue } = stability.level {\n+                let (feature, features) = (stability.feature, self.session.features_untracked());\n+                if !span.allows_unstable(feature) &&\n+                   features.declared_lib_features.iter().all(|(feat, _)| *feat != feature) {\n+                    stability::report_unstable(self.session, feature, reason, issue, span);\n                 }\n             }\n         }"}, {"sha": "c904ec30f0b72921a4307297b1ca5251ee63ee34", "filename": "src/test/ui/macros/macro-stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs?ref=d9ee97e896125b38dba199c763e5e35c5107a735", "patch": "@@ -7,6 +7,6 @@\n macro_rules! local_unstable { () => () }\n \n fn main() {\n-    local_unstable!(); //~ ERROR: macro local_unstable! is unstable\n-    unstable_macro!(); //~ ERROR: macro unstable_macro! is unstable\n+    local_unstable!(); //~ ERROR use of unstable library feature 'local_unstable'\n+    unstable_macro!(); //~ ERROR use of unstable library feature 'unstable_macros'\n }"}, {"sha": "8cf72d183342dc438642ee55a390ea417c2bd10e", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9ee97e896125b38dba199c763e5e35c5107a735/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=d9ee97e896125b38dba199c763e5e35c5107a735", "patch": "@@ -1,12 +1,12 @@\n-error[E0658]: macro local_unstable! is unstable\n+error[E0658]: use of unstable library feature 'local_unstable'\n   --> $DIR/macro-stability.rs:10:5\n    |\n LL |     local_unstable!();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(local_unstable)] to the crate attributes to enable\n \n-error[E0658]: macro unstable_macro! is unstable\n+error[E0658]: use of unstable library feature 'unstable_macros'\n   --> $DIR/macro-stability.rs:11:5\n    |\n LL |     unstable_macro!();"}]}