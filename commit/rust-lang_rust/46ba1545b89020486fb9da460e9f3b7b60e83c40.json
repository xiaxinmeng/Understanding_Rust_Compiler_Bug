{"sha": "46ba1545b89020486fb9da460e9f3b7b60e83c40", "node_id": "C_kwDOAAsO6NoAKDQ2YmExNTQ1Yjg5MDIwNDg2ZmI5ZGE0NjBlOWYzYjdiNjBlODNjNDA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-28T14:23:49Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T12:17:54Z"}, "message": "Update documentation", "tree": {"sha": "3d7877ee4b8395a1e7abcfba4089237453c45a2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7877ee4b8395a1e7abcfba4089237453c45a2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ba1545b89020486fb9da460e9f3b7b60e83c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ba1545b89020486fb9da460e9f3b7b60e83c40", "html_url": "https://github.com/rust-lang/rust/commit/46ba1545b89020486fb9da460e9f3b7b60e83c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ba1545b89020486fb9da460e9f3b7b60e83c40/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147b854dede7b0dda933e24f6ee6c8dd30323a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/147b854dede7b0dda933e24f6ee6c8dd30323a7e", "html_url": "https://github.com/rust-lang/rust/commit/147b854dede7b0dda933e24f6ee6c8dd30323a7e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "0fa81b7e4e0bc20f2c644783199734475e474359", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46ba1545b89020486fb9da460e9f3b7b60e83c40/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ba1545b89020486fb9da460e9f3b7b60e83c40/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=46ba1545b89020486fb9da460e9f3b7b60e83c40", "patch": "@@ -10,7 +10,7 @@ declare_tool_lint! {\n     /// The `rustc_pass_by_value` lint marks a type with `#[rustc_pass_by_value]` requiring it to\n     /// always be passed by value. This is usually used for types that are thin wrappers around\n     /// references, so there is no benefit to an extra layer of indirection. (Example: `Ty` which\n-    /// is a reference to an `Interned<TyS>`)\n+    /// is a reference to an `Interned<TyKind>`)\n     pub rustc::PASS_BY_VALUE,\n     Warn,\n     \"pass by reference of a type flagged as `#[rustc_pass_by_value]`\","}, {"sha": "221105ac48f79b5487374c7969cdd058d1515755", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46ba1545b89020486fb9da460e9f3b7b60e83c40/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ba1545b89020486fb9da460e9f3b7b60e83c40/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=46ba1545b89020486fb9da460e9f3b7b60e83c40", "patch": "@@ -103,7 +103,7 @@ impl hash::Hash for Allocation {\n /// Interned types generally have an `Outer` type and an `Inner` type, where\n /// `Outer` is a newtype around `Interned<Inner>`, and all the operations are\n /// done on `Outer`, because all occurrences are interned. E.g. `Ty` is an\n-/// outer type and `TyS` is its inner type.\n+/// outer type and `TyKind` is its inner type.\n ///\n /// Here things are different because only const allocations are interned. This\n /// means that both the inner type (`Allocation`) and the outer type"}, {"sha": "756c0c583adc6cab124522cba7ad9396f804fe4a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46ba1545b89020486fb9da460e9f3b7b60e83c40/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ba1545b89020486fb9da460e9f3b7b60e83c40/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=46ba1545b89020486fb9da460e9f3b7b60e83c40", "patch": "@@ -448,7 +448,7 @@ pub struct CReaderCacheKey {\n     pub pos: usize,\n }\n \n-/// Use this rather than `TyS`, whenever possible.\n+/// Use this rather than `TyKind`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_diagnostic_item = \"Ty\"]\n #[rustc_pass_by_value]\n@@ -476,13 +476,13 @@ impl ty::EarlyBoundRegion {\n \n /// Represents a predicate.\n ///\n-/// See comments on `TyS`, which apply here too (albeit for\n-/// `PredicateS`/`Predicate` rather than `TyS`/`Ty`).\n+/// See comments on `WithCachedTypeInfo`, which apply here too (albeit for\n+/// `PredicateS`/`Predicate` rather than `TyKind`/`Ty`).\n #[derive(Debug)]\n pub(crate) struct PredicateS<'tcx> {\n     kind: Binder<'tcx, PredicateKind<'tcx>>,\n     flags: TypeFlags,\n-    /// See the comment for the corresponding field of [TyS].\n+    /// See the comment for the corresponding field of [WithCachedTypeInfo].\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n "}]}