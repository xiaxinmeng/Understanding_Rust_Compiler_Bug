{"sha": "25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZWRjM2M2MGE4ZmU5YTAxYjFmZjdiNmEyMGNlYjgzZDc4ZTI5NjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-06T13:24:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-06T13:32:45Z"}, "message": "Better target for move module", "tree": {"sha": "4818fcd60f5f4110037faac367744c925d5f5075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4818fcd60f5f4110037faac367744c925d5f5075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "html_url": "https://github.com/rust-lang/rust/commit/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed732e86eb88393cdec471b263303adea6ffcb73", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed732e86eb88393cdec471b263303adea6ffcb73", "html_url": "https://github.com/rust-lang/rust/commit/ed732e86eb88393cdec471b263303adea6ffcb73"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "165faaf6174df4672851d0c41e2b5293bc0d05e9", "filename": "crates/assists/src/handlers/move_module_to_file.rs", "status": "renamed", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs?ref=25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "patch": "@@ -2,37 +2,43 @@ use ast::edit::IndentLevel;\n use ide_db::base_db::AnchoredPathBuf;\n use syntax::{\n     ast::{self, edit::AstNodeEdit, NameOwner},\n-    AstNode,\n+    AstNode, TextRange,\n };\n+use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: extract_module_to_file\n+// Assist: move_module_to_file\n //\n-// This assist extract module to file.\n+// Moves inline module's contents to a separate file.\n //\n // ```\n-// mod foo {<|>\n+// mod <|>foo {\n //     fn t() {}\n // }\n // ```\n // ->\n // ```\n // mod foo;\n // ```\n-pub(crate) fn extract_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let module_ast = ctx.find_node_at_offset::<ast::Module>()?;\n+    let module_items = module_ast.item_list()?;\n+\n+    let l_curly_offset = module_items.syntax().text_range().start();\n+    if l_curly_offset <= ctx.offset() {\n+        mark::hit!(available_before_curly);\n+        return None;\n+    }\n+    let target = TextRange::new(module_ast.syntax().text_range().start(), l_curly_offset);\n+\n     let module_name = module_ast.name()?;\n \n     let module_def = ctx.sema.to_def(&module_ast)?;\n     let parent_module = module_def.parent(ctx.db())?;\n \n-    let module_items = module_ast.item_list()?;\n-    let target = module_ast.syntax().text_range();\n-    let anchor_file_id = ctx.frange.file_id;\n-\n     acc.add(\n-        AssistId(\"extract_module_to_file\", AssistKind::RefactorExtract),\n+        AssistId(\"move_module_to_file\", AssistKind::RefactorExtract),\n         \"Extract module to file\",\n         target,\n         |builder| {\n@@ -53,26 +59,26 @@ pub(crate) fn extract_module_to_file(acc: &mut Assists, ctx: &AssistContext) ->\n                 items\n             };\n \n-            builder.replace(target, format!(\"mod {};\", module_name));\n+            builder.replace(module_ast.syntax().text_range(), format!(\"mod {};\", module_name));\n \n-            let dst = AnchoredPathBuf { anchor: anchor_file_id, path };\n+            let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n             builder.create_file(dst, contents);\n         },\n     )\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n     #[test]\n     fn extract_from_root() {\n         check_assist(\n-            extract_module_to_file,\n+            move_module_to_file,\n             r#\"\n-mod tests {<|>\n+mod <|>tests {\n     #[test] fn t() {}\n }\n \"#,\n@@ -88,12 +94,12 @@ mod tests;\n     #[test]\n     fn extract_from_submodule() {\n         check_assist(\n-            extract_module_to_file,\n+            move_module_to_file,\n             r#\"\n //- /main.rs\n mod submod;\n //- /submod.rs\n-mod inner<|> {\n+<|>mod inner {\n     fn f() {}\n }\n fn g() {}\n@@ -111,7 +117,7 @@ fn f() {}\n     #[test]\n     fn extract_from_mod_rs() {\n         check_assist(\n-            extract_module_to_file,\n+            move_module_to_file,\n             r#\"\n //- /main.rs\n mod submodule;\n@@ -130,4 +136,10 @@ fn f() {}\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn available_before_curly() {\n+        mark::check!(available_before_curly);\n+        check_assist_not_applicable(move_module_to_file, r#\"mod m { <|> }\"#);\n+    }\n }", "previous_filename": "crates/assists/src/handlers/extract_module_to_file.rs"}, {"sha": "5e3a1b36830b256e8d8ce688231af30ddba24923", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "patch": "@@ -116,7 +116,6 @@ mod handlers {\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n-    mod extract_module_to_file;\n     mod extract_struct_from_enum_variant;\n     mod extract_variable;\n     mod fill_match_arms;\n@@ -139,6 +138,7 @@ mod handlers {\n     mod merge_match_arms;\n     mod move_bounds;\n     mod move_guard;\n+    mod move_module_to_file;\n     mod pull_assignment_up;\n     mod qualify_path;\n     mod raw_string;\n@@ -169,7 +169,7 @@ mod handlers {\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n-            extract_module_to_file::extract_module_to_file,\n+            move_module_to_file::move_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_variable::extract_variable,\n             fill_match_arms::fill_match_arms,"}, {"sha": "fdebee4fe59d8dd5405be5c3d1410e08722a62f6", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=25edc3c60a8fe9a01b1ff7b6a20ceb83d78e2965", "patch": "@@ -237,21 +237,6 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n-#[test]\n-fn doctest_extract_module_to_file() {\n-    check_doc_test(\n-        \"extract_module_to_file\",\n-        r#####\"\n-mod foo {<|>\n-    fn t() {}\n-}\n-\"#####,\n-        r#####\"\n-mod foo;\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_extract_struct_from_enum_variant() {\n     check_doc_test(\n@@ -760,6 +745,21 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_move_module_to_file() {\n+    check_doc_test(\n+        \"move_module_to_file\",\n+        r#####\"\n+mod <|>foo {\n+    fn t() {}\n+}\n+\"#####,\n+        r#####\"\n+mod foo;\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_pull_assignment_up() {\n     check_doc_test("}]}