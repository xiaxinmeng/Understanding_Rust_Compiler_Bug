{"sha": "f457b3d10aa2db4104402e2d04f72fab64a3c62e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTdiM2QxMGFhMmRiNDEwNDQwMmUyZDA0ZjcyZmFiNjRhM2M2MmU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-27T15:56:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:21:52Z"}, "message": "Refactor generic parameters in rustdoc/clean", "tree": {"sha": "fa7bbf7fe41dd3c6055c308ef34e5821c00505c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7bbf7fe41dd3c6055c308ef34e5821c00505c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f457b3d10aa2db4104402e2d04f72fab64a3c62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f457b3d10aa2db4104402e2d04f72fab64a3c62e", "html_url": "https://github.com/rust-lang/rust/commit/f457b3d10aa2db4104402e2d04f72fab64a3c62e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f457b3d10aa2db4104402e2d04f72fab64a3c62e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b381e041d12259f24b1282e10e0a224bc6ec0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b381e041d12259f24b1282e10e0a224bc6ec0e", "html_url": "https://github.com/rust-lang/rust/commit/80b381e041d12259f24b1282e10e0a224bc6ec0e"}], "stats": {"total": 663, "additions": 296, "deletions": 367}, "files": [{"sha": "51ce134544d0885cbd4f4f2c609b4bfce1c1cda1", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -654,8 +654,8 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n }\n \n pub fn walk_generic_args<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                                _path_span: Span,\n-                                                generic_args: &'v GenericArgs) {\n+                                             _path_span: Span,\n+                                             generic_args: &'v GenericArgs) {\n     walk_list!(visitor, visit_generic_arg, &generic_args.args);\n     walk_list!(visitor, visit_assoc_type_binding, &generic_args.bindings);\n }"}, {"sha": "c0f94a138afc6120ca22e6c20f775c7fa59fc23c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 37, "deletions": 64, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -382,17 +382,9 @@ impl<'a> LoweringContext<'a> {\n                     let item_lifetimes = match self.lctx.items.get(&item.id).unwrap().node {\n                         hir::Item_::ItemImpl(_, _, _, ref generics, ..)\n                         | hir::Item_::ItemTrait(_, _, ref generics, ..) => {\n-                            generics.params\n-                                    .iter()\n-                                    .filter_map(|param| match param.kind {\n-                                        hir::GenericParamKind::Lifetime { .. } => {\n-                                            Some(param.clone())\n-                                        }\n-                                        _ => None,\n-                                    })\n-                            .collect::<Vec<_>>()\n+                            generics.params.clone()\n                         }\n-                        _ => Vec::new(),\n+                        _ => HirVec::new(),\n                     };\n \n                     self.lctx.with_parent_impl_lifetime_defs(&item_lifetimes, |this| {\n@@ -766,16 +758,15 @@ impl<'a> LoweringContext<'a> {\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n     // for them.\n-    fn with_in_scope_lifetime_defs<'l, T, F>(\n-        &mut self,\n-        params: impl Iterator<Item = &'l GenericParamAST>,\n-        f: F,\n-    ) -> T\n+    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &Vec<GenericParamAST>, f: F) -> T\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n-        let lt_def_names = params.map(|param| param.ident.name);\n+        let lt_def_names = params.iter().filter_map(|param| match param.kind {\n+            GenericParamKindAST::Lifetime { .. } => Some(param.ident.name),\n+            _ => None,\n+        });\n         self.in_scope_lifetimes.extend(lt_def_names);\n \n         let res = f(self);\n@@ -789,12 +780,17 @@ impl<'a> LoweringContext<'a> {\n     // This should only be used with generics that have already had their\n     // in-band lifetimes added. In practice, this means that this function is\n     // only used when lowering a child item of a trait or impl.\n-    fn with_parent_impl_lifetime_defs<T, F>(&mut self, params: &[hir::GenericParam], f: F) -> T\n-    where\n+    fn with_parent_impl_lifetime_defs<T, F>(&mut self,\n+        params: &HirVec<hir::GenericParam>,\n+        f: F\n+    ) -> T where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n-        let lt_def_names = params.iter().map(|param| param.name());\n+        let lt_def_names = params.iter().filter_map(|param| match param.kind {\n+            hir::GenericParamKind::Lifetime { .. } => Some(param.name()),\n+            _ => None,\n+        });\n         self.in_scope_lifetimes.extend(lt_def_names);\n \n         let res = f(self);\n@@ -820,10 +816,7 @@ impl<'a> LoweringContext<'a> {\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n-            generics.params.iter().filter_map(|param| match param.kind {\n-                GenericParamKindAST::Lifetime { .. } => Some(param),\n-                _ => None,\n-            }),\n+            &generics.params,\n             |this| {\n                 let itctx = ImplTraitContext::Universal(parent_id);\n                 this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n@@ -1051,16 +1044,12 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_generic_arg(&mut self,\n-                        p: &ast::GenericArgAST,\n+                        arg: &ast::GenericArgAST,\n                         itctx: ImplTraitContext)\n                         -> hir::GenericArg {\n-        match p {\n-            ast::GenericArgAST::Lifetime(lt) => {\n-                GenericArg::Lifetime(self.lower_lifetime(&lt))\n-            }\n-            ast::GenericArgAST::Type(ty) => {\n-                GenericArg::Type(self.lower_ty(&ty, itctx))\n-            }\n+        match arg {\n+            ast::GenericArgAST::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n+            ast::GenericArgAST::Type(ty) => GenericArg::Type(self.lower_ty(&ty, itctx)),\n         }\n     }\n \n@@ -1079,10 +1068,7 @@ impl<'a> LoweringContext<'a> {\n                 hir::TyRptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(\n-                f.generic_params.iter().filter_map(|param| match param.kind {\n-                    GenericParamKindAST::Lifetime { .. } => Some(param),\n-                    _ => None,\n-                }),\n+                &f.generic_params,\n                 |this| {\n                     this.with_anonymous_lifetime_mode(\n                         AnonymousLifetimeMode::PassThrough,\n@@ -1946,6 +1932,15 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_generic_params(\n+        &mut self,\n+        params: &Vec<GenericParamAST>,\n+        add_bounds: &NodeMap<Vec<TyParamBound>>,\n+        itctx: ImplTraitContext,\n+    ) -> hir::HirVec<hir::GenericParam> {\n+        params.iter().map(|param| self.lower_generic_param(param, add_bounds, itctx)).collect()\n+    }\n+\n     fn lower_generic_param(&mut self,\n                            param: &GenericParamAST,\n                            add_bounds: &NodeMap<Vec<TyParamBound>>,\n@@ -1986,10 +1981,9 @@ impl<'a> LoweringContext<'a> {\n                 let mut bounds = self.lower_bounds(bounds, itctx);\n                 let add_bounds = add_bounds.get(&param.id).map_or(&[][..], |x| &x);\n                 if !add_bounds.is_empty() {\n-                    bounds = bounds\n-                        .into_iter()\n-                        .chain(self.lower_bounds(add_bounds, itctx).into_iter())\n-                        .collect();\n+                    bounds = bounds.into_iter()\n+                                   .chain(self.lower_bounds(add_bounds, itctx).into_iter())\n+                                   .collect();\n                 }\n \n                 hir::GenericParam {\n@@ -2005,23 +1999,14 @@ impl<'a> LoweringContext<'a> {\n                         synthetic: param.attrs.iter()\n                                               .filter(|attr| attr.check_name(\"rustc_synthetic\"))\n                                               .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n-                                              .nth(0),\n+                                              .next(),\n                         attrs: self.lower_attrs(&param.attrs),\n                     }\n                 }\n             }\n         }\n     }\n \n-    fn lower_generic_params(\n-        &mut self,\n-        params: &Vec<GenericParamAST>,\n-        add_bounds: &NodeMap<Vec<TyParamBound>>,\n-        itctx: ImplTraitContext,\n-    ) -> hir::HirVec<hir::GenericParam> {\n-        params.iter().map(|param| self.lower_generic_param(param, add_bounds, itctx)).collect()\n-    }\n-\n     fn lower_generics(\n         &mut self,\n         generics: &Generics,\n@@ -2107,10 +2092,7 @@ impl<'a> LoweringContext<'a> {\n                 span,\n             }) => {\n                 self.with_in_scope_lifetime_defs(\n-                    bound_generic_params.iter().filter_map(|param| match param.kind {\n-                        GenericParamKindAST::Lifetime { .. } => Some(param),\n-                        _ => None,\n-                    }),\n+                    &bound_generic_params,\n                     |this| {\n                         hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                             bound_generic_params: this.lower_generic_params(\n@@ -2203,13 +2185,7 @@ impl<'a> LoweringContext<'a> {\n         let bound_generic_params =\n             self.lower_generic_params(&p.bound_generic_params, &NodeMap(), itctx);\n         let trait_ref = self.with_parent_impl_lifetime_defs(\n-            &bound_generic_params\n-                .iter()\n-                .filter_map(|param| match param.kind {\n-                    hir::GenericParamKind::Lifetime { .. } => Some(param.clone()),\n-                    _ => None,\n-                })\n-                .collect::<Vec<_>>(),\n+            &bound_generic_params,\n             |this| this.lower_trait_ref(&p.trait_ref, itctx),\n         );\n \n@@ -2426,10 +2402,7 @@ impl<'a> LoweringContext<'a> {\n                 );\n \n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n-                    ast_generics.params.iter().filter_map(|param| match param.kind {\n-                        GenericParamKindAST::Lifetime { .. } => Some(param),\n-                        _ => None,\n-                    }),\n+                    &ast_generics.params,\n                     |this| {\n                         impl_items\n                             .iter()"}, {"sha": "ab4a0826584ac03db8e9ed88edd65435498bf2b3", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -176,12 +176,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             GenericParamKindAST::Lifetime { .. } => DefPathData::LifetimeParam(name),\n             GenericParamKindAST::Type { .. } => DefPathData::TypeParam(name),\n         };\n-        self.create_def(\n-            param.id,\n-            def_path_data,\n-            REGULAR_SPACE,\n-            param.ident.span\n-        );\n+        self.create_def(param.id, def_path_data, REGULAR_SPACE, param.ident.span);\n \n         visit::walk_generic_param(self, param);\n     }"}, {"sha": "1f958d3fe953696672200e61b22cb0dbd0f73589", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -974,11 +974,9 @@ impl<'hir> Map<'hir> {\n             Some(NodeField(ref f)) => Some(&f.attrs[..]),\n             Some(NodeExpr(ref e)) => Some(&*e.attrs),\n             Some(NodeStmt(ref s)) => Some(s.node.attrs()),\n-            Some(NodeGenericParam(param)) => {\n-                match param.kind {\n-                    GenericParamKind::Type { ref attrs, .. } => Some(&attrs[..]),\n-                    _ => bug!(\"unexpected non-type NodeGenericParam\")\n-                }\n+            Some(NodeGenericParam(param)) => match param.kind {\n+                GenericParamKind::Type { ref attrs, .. } => Some(&attrs[..]),\n+                _ => bug!(\"unexpected non-type NodeGenericParam\")\n             }\n             // unit/tuple structs take the attributes straight from\n             // the struct definition."}, {"sha": "eabf554bc536f5811117392307d3966f410e3db5", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1270,13 +1270,10 @@ impl<'a> State<'a> {\n         self.print_name(segment.name)?;\n \n         segment.with_generic_args(|generic_args| {\n-            if !generic_args.args.is_empty() ||\n-                !generic_args.bindings.is_empty()\n-            {\n-                self.print_generic_args(&generic_args, segment.infer_types, true)\n-            } else {\n-                Ok(())\n+            if !generic_args.args.is_empty() || !generic_args.bindings.is_empty() {\n+                return self.print_generic_args(&generic_args, segment.infer_types, true);\n             }\n+            Ok(())\n         })?;\n         self.print_call_post(base_args)\n     }\n@@ -1642,8 +1639,7 @@ impl<'a> State<'a> {\n                segment.name != keywords::DollarCrate.name() {\n                self.print_name(segment.name)?;\n                segment.with_generic_args(|generic_args| {\n-                   self.print_generic_args(generic_args,\n-                                           segment.infer_types,\n+                   self.print_generic_args(generic_args, segment.infer_types,\n                                            colons_before_params)\n                })?;\n             }"}, {"sha": "b30e5bab968eb5dd9a7e924ee6f691e0cd846ec1", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1036,29 +1036,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // Get the `hir::TyParam` to verify whether it already has any bounds.\n                             // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                             // instead we suggest `T: 'a + 'b` in that case.\n-                            let has_lifetimes =\n-                                if let hir_map::NodeGenericParam(ref param) = hir.get(id) {\n+                            let mut has_bounds = false;\n+                            if let hir_map::NodeGenericParam(ref param) = hir.get(id) {\n                                 match param.kind {\n                                     GenericParamKind::Type { ref bounds, .. } => {\n-                                        !bounds.is_empty()\n+                                        has_bounds = !bounds.is_empty();\n                                     }\n                                     _ => bug!(\"unexpected non-type NodeGenericParam\"),\n                                 }\n-                            } else {\n-                                false\n-                            };\n+                            }\n                             let sp = hir.span(id);\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n-                            let sp = if has_lifetimes {\n+                            let sp = if has_bounds {\n                                 sp.to(self.tcx\n                                     .sess\n                                     .codemap()\n                                     .next_point(self.tcx.sess.codemap().next_point(sp)))\n                             } else {\n                                 sp\n                             };\n-                            (sp, has_lifetimes)\n+                            (sp, has_bounds)\n                         })\n                     } else {\n                         None"}, {"sha": "67a5448babf835697275fcd8a4cf5f67c7ebd486", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 47, "deletions": 70, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -81,6 +81,18 @@ pub enum Region {\n     Free(DefId, /* lifetime decl */ DefId),\n }\n \n+fn new_region(hir_map: &Map, param: &hir::GenericParam)\n+    -> (hir::LifetimeName, DefId, LifetimeDefOrigin) {\n+    let def_id = hir_map.local_def_id(param.id);\n+    let (name, origin) = match param.kind {\n+        GenericParamKind::Lifetime { name, in_band, .. } => {\n+            (name, LifetimeDefOrigin::from_is_in_band(in_band))\n+        }\n+        _ => bug!(\"expected a lifetime param\"),\n+    };\n+    (name, def_id, origin)\n+}\n+\n impl Region {\n     fn early(\n         hir_map: &Map,\n@@ -89,26 +101,14 @@ impl Region {\n     ) -> (hir::LifetimeName, Region) {\n         let i = *index;\n         *index += 1;\n-        let def_id = hir_map.local_def_id(param.id);\n-        let (name, origin) = match param.kind {\n-            GenericParamKind::Lifetime { name, in_band, .. } => {\n-                (name, LifetimeDefOrigin::from_is_in_band(in_band))\n-            }\n-            _ => bug!(\"expected a lifetime param\"),\n-        };\n+        let (name, def_id, origin) = new_region(hir_map, param);\n         debug!(\"Region::early: index={} def_id={:?}\", i, def_id);\n         (name, Region::EarlyBound(i, def_id, origin))\n     }\n \n     fn late(hir_map: &Map, param: &hir::GenericParam) -> (hir::LifetimeName, Region) {\n         let depth = ty::INNERMOST;\n-        let def_id = hir_map.local_def_id(param.id);\n-        let (name, origin) = match param.kind {\n-            GenericParamKind::Lifetime { name, in_band, .. } => {\n-                (name, LifetimeDefOrigin::from_is_in_band(in_band))\n-            }\n-            _ => bug!(\"expected a lifetime param\"),\n-        };\n+        let (name, def_id, origin) = new_region(hir_map, param);\n         debug!(\n             \"Region::late: def={:?} depth={:?} def_id={:?} origin={:?}\",\n             def,\n@@ -580,15 +580,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let was_in_fn_syntax = self.is_in_fn_syntax;\n                 self.is_in_fn_syntax = true;\n                 let scope = Scope::Binder {\n-                    lifetimes: c.generic_params\n-                                .iter()\n-                                .filter_map(|param| match param.kind {\n-                                    GenericParamKind::Lifetime { .. } => {\n-                                        Some(Region::late(&self.tcx.hir, param))\n-                                    }\n-                                    _ => None,\n-                                })\n-                                .collect(),\n+                    lifetimes: c.generic_params.iter().filter_map(|param| match param.kind {\n+                        GenericParamKind::Lifetime { .. } => {\n+                            Some(Region::late(&self.tcx.hir, param))\n+                        }\n+                        _ => None,\n+                    }).collect(),\n                     s: self.scope,\n                     next_early_index,\n                     track_lifetime_uses: true,\n@@ -770,19 +767,15 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n                 let mut type_count = 0;\n-                let lifetimes = generics.params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir, &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n-\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir, &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } => {\n+                        type_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n                     next_early_index: index + type_count,\n@@ -825,19 +818,15 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let mut index = self.next_early_index();\n                 let mut next_early_index = index;\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics.params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir, &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n-\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir, &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } => {\n+                        next_early_index += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n                     next_early_index,\n@@ -888,13 +877,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n-        check_mixed_explicit_and_in_band_defs(\n-            self.tcx,\n-            &generics.params.iter().filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => Some(param.clone()),\n-                _ => None,\n-            }).collect::<Vec<_>>()\n-        );\n+        check_mixed_explicit_and_in_band_defs(self.tcx, &generics.params);\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => {}\n@@ -920,8 +903,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 Some(Region::late(&self.tcx.hir, param))\n                             }\n                             _ => None,\n-                        })\n-                        .collect();\n+                        }).collect();\n                     if !lifetimes.is_empty() {\n                         self.trait_ref_hack = true;\n                         let next_early_index = self.next_early_index();\n@@ -992,16 +974,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             }\n             let next_early_index = self.next_early_index();\n             let scope = Scope::Binder {\n-                lifetimes: trait_ref\n-                    .bound_generic_params\n-                    .iter()\n+                lifetimes: trait_ref.bound_generic_params.iter()\n                     .filter_map(|param| match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n                             Some(Region::late(&self.tcx.hir, param))\n                         }\n                         _ => None,\n-                    })\n-                    .collect(),\n+                    }).collect(),\n                 s: self.scope,\n                 next_early_index,\n                 track_lifetime_uses: true,\n@@ -1068,11 +1047,11 @@ impl ShadowKind {\n \n fn check_mixed_explicit_and_in_band_defs(\n     tcx: TyCtxt<'_, '_, '_>,\n-    params: &[hir::GenericParam],\n+    params: &P<[hir::GenericParam]>,\n ) {\n-    let in_bands: Vec<_> = params.iter().map(|param| match param.kind {\n-        GenericParamKind::Lifetime { in_band, .. } => (in_band, param.span),\n-        _ => bug!(\"expected lifetime param\"),\n+    let in_bands: Vec<_> = params.iter().filter_map(|param| match param.kind {\n+        GenericParamKind::Lifetime { in_band, .. } => Some((in_band, param.span)),\n+        _ => None,\n     }).collect();\n     let out_of_band = in_bands.iter().find(|(in_band, _)| !in_band);\n     let in_band = in_bands.iter().find(|(in_band, _)| *in_band);\n@@ -1707,9 +1686,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         if elide_lifetimes {\n             self.resolve_elided_lifetimes(lifetimes, true);\n         } else {\n-            for lt in lifetimes {\n-                self.visit_lifetime(lt);\n-            }\n+            lifetimes.iter().for_each(|lt| self.visit_lifetime(lt));\n         }\n \n         // Figure out if this is a type/trait segment,"}, {"sha": "3252a2cd6ab0f6bcbfe35c54ae3ba41cd6cb36e2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -337,10 +337,10 @@ impl PrintContext {\n             if !verbose {\n                 let mut type_params =\n                     generics.params.iter().rev().filter_map(|param| match param.kind {\n+                        GenericParamDefKind::Lifetime => None,\n                         GenericParamDefKind::Type { has_default, .. } => {\n                             Some((param.def_id, has_default))\n                         }\n-                        GenericParamDefKind::Lifetime => None,\n                     }).peekable();\n                 let has_default = {\n                     let has_default = type_params.peek().map(|(_, has_default)| has_default);"}, {"sha": "2d96c01a6dfe432879067b212e62fbf7cff5587f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -836,8 +836,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                     .zip(variants)\n                     .map(|(variant, variant_layout)| {\n                         // Subtract the size of the enum discriminant.\n-                        let bytes = variant_layout.size.bytes()\n-                            .saturating_sub(discr_size);\n+                        let bytes = variant_layout.size.bytes().saturating_sub(discr_size);\n \n                         debug!(\"- variant `{}` is {} bytes large\", variant.node.name, bytes);\n                         bytes"}, {"sha": "ed3dab09df91e1470333b3277e05a8d51c0009b7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1648,18 +1648,15 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n-        for param in &generics.params {\n-            match param.kind {\n-                hir::GenericParamKind::Lifetime { .. } => {}\n-                hir::GenericParamKind::Type { ref default, .. } => {\n-                    let def_id = self.tcx.hir.local_def_id(param.id);\n-                    let has_default = Untracked(default.is_some());\n-                    self.record(def_id,\n-                                IsolatedEncoder::encode_info_for_ty_param,\n-                                (def_id, has_default));\n-                }\n+        generics.params.iter().for_each(|param| match param.kind {\n+            hir::GenericParamKind::Lifetime { .. } => {}\n+            hir::GenericParamKind::Type { ref default, .. } => {\n+                let def_id = self.tcx.hir.local_def_id(param.id);\n+                let has_default = Untracked(default.is_some());\n+                let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n+                self.record(def_id, encode_info, (def_id, has_default));\n             }\n-        }\n+        });\n     }\n \n     fn encode_info_for_ty(&mut self, ty: &hir::Ty) {"}, {"sha": "ef69cb574e07e6b70571899b23b92ba1f72dfc16", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1099,12 +1099,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                  item: &'tcx hir::Item,\n                                                  output: &mut Vec<MonoItem<'tcx>>) {\n     match item.node {\n-        hir::ItemImpl(_,\n-                      _,\n-                      _,\n-                      ref generics,\n-                      ..,\n-                      ref impl_item_refs) => {\n+        hir::ItemImpl(_, _, _, ref generics, .., ref impl_item_refs) => {\n             for param in &generics.params {\n                 match param.kind {\n                     hir::GenericParamKind::Lifetime { .. } => {}"}, {"sha": "d9a69f09d34bd14af2e869df18e01da345a0ed95", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -141,20 +141,19 @@ impl<'a> AstValidator<'a> {\n     fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParamAST>) {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n-        let non_lifetime_param_spans: Vec<_> = params.iter()\n-            .filter_map(|param| match param.kind {\n+        let non_lt_param_spans: Vec<_> = params.iter().filter_map(|param| match param.kind {\n                 GenericParamKindAST::Lifetime { ref bounds, .. } => {\n                     if !bounds.is_empty() {\n                         let spans: Vec<_> = bounds.iter().map(|b| b.ident.span).collect();\n-                        self.err_handler().span_err(spans,\n-                            \"lifetime bounds cannot be used in this context\");\n+                        self.err_handler()\n+                            .span_err(spans, \"lifetime bounds cannot be used in this context\");\n                     }\n                     None\n                 }\n                 _ => Some(param.ident.span),\n             }).collect();\n-        if !non_lifetime_param_spans.is_empty() {\n-            self.err_handler().span_err(non_lifetime_param_spans,\n+        if !non_lt_param_spans.is_empty() {\n+            self.err_handler().span_err(non_lt_param_spans,\n                 \"only lifetime parameters can be used in this context\");\n         }\n     }\n@@ -333,16 +332,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         GenericParamKindAST::Lifetime { .. } => {}\n                         GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n                             if !bounds.is_empty() {\n-                                self.err_handler().span_err(param.ident.span,\n-                                                            \"type parameters on the left side \\\n-                                                             of a trait alias cannot be \\\n-                                                             bounded\");\n+                                self.err_handler()\n+                                    .span_err(param.ident.span, \"type parameters on the left \\\n+                                        side of a trait alias cannot be bounded\");\n                             }\n                             if !default.is_none() {\n-                                self.err_handler().span_err(param.ident.span,\n-                                                            \"type parameters on the left side \\\n-                                                             of a trait alias cannot have \\\n-                                                             defaults\");\n+                                self.err_handler()\n+                                    .span_err(param.ident.span, \"type parameters on the left \\\n+                                        side of a trait alias cannot have defaults\");\n                             }\n                         }\n                     }\n@@ -402,10 +399,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_vis(self, vis)\n     }\n \n-    fn visit_generics(&mut self, g: &'a Generics) {\n+    fn visit_generics(&mut self, generics: &'a Generics) {\n         let mut seen_non_lifetime_param = false;\n         let mut seen_default = None;\n-        for param in &g.params {\n+        for param in &generics.params {\n             match (&param.kind, seen_non_lifetime_param) {\n                 (GenericParamKindAST::Lifetime { .. }, true) => {\n                     self.err_handler()\n@@ -424,13 +421,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n             }\n         }\n-        for predicate in &g.where_clause.predicates {\n+        for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n                 self.err_handler().span_err(predicate.span, \"equality constraints are not yet \\\n                                                              supported in where clauses (#20041)\");\n             }\n         }\n-        visit::walk_generics(self, g)\n+        visit::walk_generics(self, generics)\n     }\n \n     fn visit_generic_param(&mut self, param: &'a GenericParam) {\n@@ -516,12 +513,10 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n-                for arg in &data.args {\n-                    match arg {\n-                        GenericArgAST::Type(ty) => self.visit_ty(ty),\n-                        _ => {}\n-                    }\n-                }\n+                data.args.iter().for_each(|arg| match arg {\n+                    GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                    _ => {}\n+                });\n                 for type_binding in &data.bindings {\n                     // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                     // are allowed to contain nested `impl Trait`."}, {"sha": "388ac5cdb50af7d5090615000326ed8c0b7dad4d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1268,16 +1268,14 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n-        for param in &generics.params {\n-            match param.kind {\n-                GenericParamKind::Lifetime { .. } => {}\n-                GenericParamKind::Type { ref bounds, .. } => {\n-                    for bound in bounds {\n-                        self.check_ty_param_bound(bound);\n-                    }\n+        generics.params.iter().for_each(|param| match param.kind {\n+            GenericParamKind::Lifetime { .. } => {}\n+            GenericParamKind::Type { ref bounds, .. } => {\n+                for bound in bounds {\n+                    self.check_ty_param_bound(bound);\n                 }\n             }\n-        }\n+        });\n         for predicate in &generics.where_clause.predicates {\n             match predicate {\n                 &hir::WherePredicate::BoundPredicate(ref bound_pred) => {"}, {"sha": "314eae8f338b5e03e18db60f20e6b41cbcc2e4ad", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -802,10 +802,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n             .filter_map(|param| match param.kind {\n                 GenericParamKindAST::Lifetime { .. } => None,\n                 GenericParamKindAST::Type { ref default, .. } => {\n-                    if default.is_some() {\n+                    if found_default || default.is_some() {\n                         found_default = true;\n-                    }\n-                    if found_default {\n                         return Some((Ident::with_empty_ctxt(param.ident.name), Def::Err));\n                     }\n                     None\n@@ -2209,8 +2207,7 @@ impl<'a> Resolver<'a> {\n             HasTypeParameters(generics, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap();\n-                for param in &generics.params {\n-                    match param.kind {\n+                generics.params.iter().for_each(|param| match param.kind {\n                         GenericParamKindAST::Type { .. } => {\n                             let ident = param.ident.modern();\n                             debug!(\"with_type_parameter_rib: {}\", param.id);\n@@ -2225,15 +2222,13 @@ impl<'a> Resolver<'a> {\n                             }\n                             seen_bindings.entry(ident).or_insert(param.ident.span);\n \n-                            // plain insert (no renaming)\n-                            let def_id = self.definitions.local_def_id(param.id);\n-                            let def = Def::TyParam(def_id);\n+                        // Plain insert (no renaming).\n+                        let def = Def::TyParam(self.definitions.local_def_id(param.id));\n                             function_type_rib.bindings.insert(ident, def);\n                             self.record_def(param.id, PathResolution::new(def));\n                         }\n                         _ => {}\n-                    }\n-                }\n+                });\n                 self.ribs[TypeNS].push(function_type_rib);\n             }\n "}, {"sha": "ea5f452199adf749ee9472121df396c1c59018c9", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -826,12 +826,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             if let Some(ref generic_args) = seg.args {\n                 match **generic_args {\n                     ast::GenericArgs::AngleBracketed(ref data) => {\n-                        for arg in &data.args {\n-                            match arg {\n-                                ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n-                                _ => {}\n-                            }\n-                        }\n+                        data.args.iter().for_each(|arg| match arg {\n+                            ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                            _ => {}\n+                        });\n                     }\n                     ast::GenericArgs::Parenthesized(ref data) => {\n                         for t in &data.inputs {\n@@ -915,12 +913,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // Explicit types in the turbo-fish.\n         if let Some(ref generic_args) = seg.args {\n             if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n-                for arg in &data.args {\n-                    match arg {\n-                        ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n-                        _ => {}\n-                    }\n-                }\n+                data.args.iter().for_each(|arg| match arg {\n+                    ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                    _ => {}\n+                });\n             }\n         }\n \n@@ -1489,21 +1485,19 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n     }\n \n     fn visit_generics(&mut self, generics: &'l ast::Generics) {\n-        for param in &generics.params {\n-            match param.kind {\n-                ast::GenericParamKindAST::Lifetime { .. } => {}\n-                ast::GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n-                    for bound in bounds {\n-                        if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n-                            self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n-                        }\n-                    }\n-                    if let Some(ref ty) = default {\n-                        self.visit_ty(&ty);\n+        generics.params.iter().for_each(|param| match param.kind {\n+            ast::GenericParamKindAST::Lifetime { .. } => {}\n+            ast::GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n+                for bound in bounds {\n+                    if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n+                        self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n                     }\n                 }\n+                if let Some(ref ty) = default {\n+                    self.visit_ty(&ty);\n+                }\n             }\n-        }\n+        });\n     }\n \n     fn visit_ty(&mut self, t: &'l ast::Ty) {"}, {"sha": "6ac9a0fdfc049858a5c243dc347f1ea9cf6a74ed", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -4979,12 +4979,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     |data| {\n                         let mut lifetimes = vec![];\n                         let mut types = vec![];\n-                        for arg in &data.args {\n-                            match arg {\n-                                GenericArg::Lifetime(lt) => lifetimes.push(lt),\n-                                GenericArg::Type(ty) => types.push(ty),\n-                            }\n-                        }\n+                        data.args.iter().for_each(|arg| match arg {\n+                            GenericArg::Lifetime(lt) => lifetimes.push(lt),\n+                            GenericArg::Type(ty) => types.push(ty),\n+                        });\n                         (lifetimes, types, s.infer_types, &data.bindings[..])\n                     }\n                 )"}, {"sha": "2a63b12486637200c44174293496b3e3693d98a8", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -521,7 +521,10 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         // We only care about late bound regions, as we need to add them\n                         // to the 'for<>' section\n                         &ty::ReLateBound(_, ty::BoundRegion::BrNamed(_, name)) => {\n-                            Some(GenericParamDef::Lifetime(Lifetime(name.to_string())))\n+                            Some(GenericParamDef {\n+                                name: name.to_string(),\n+                                kind: GenericParamDefKind::Lifetime,\n+                            })\n                         }\n                         &ty::ReVar(_) | &ty::ReEarlyBound(_) => None,\n                         _ => panic!(\"Unexpected region type {:?}\", r),\n@@ -867,19 +870,17 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n \n         existing_predicates.extend(final_bounds);\n \n-        for p in generic_params.iter_mut() {\n-            match p {\n-                &mut GenericParamDef::Type(ref mut ty) => {\n-                    // We never want something like 'impl<T=Foo>'\n-                    ty.default.take();\n-\n-                    let generic_ty = Type::Generic(ty.name.clone());\n-\n+        for param in generic_params.iter_mut() {\n+            match param.kind {\n+                GenericParamDefKind::Type { ref mut default, ref mut bounds, .. } => {\n+                    // We never want something like `impl<T=Foo>`.\n+                    default.take();\n+                    let generic_ty = Type::Generic(param.name.clone());\n                     if !has_sized.contains(&generic_ty) {\n-                        ty.bounds.insert(0, TyParamBound::maybe_sized(self.cx));\n+                        bounds.insert(0, TyParamBound::maybe_sized(self.cx));\n                     }\n                 }\n-                GenericParamDef::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime => {}\n             }\n         }\n "}, {"sha": "3a4e582622f1c62a1fb650183d8c47eb8558380e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 102, "deletions": 87, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1457,53 +1457,6 @@ impl Clean<Attributes> for [ast::Attribute] {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n-pub struct TyParam {\n-    pub name: String,\n-    pub did: DefId,\n-    pub bounds: Vec<TyParamBound>,\n-    pub default: Option<Type>,\n-    pub synthetic: Option<hir::SyntheticTyParamKind>,\n-}\n-\n-impl Clean<TyParam> for hir::GenericParam {\n-    fn clean(&self, cx: &DocContext) -> TyParam {\n-        match self.kind {\n-            hir::GenericParamKind::Type { ref bounds, ref default, synthetic, .. } => {\n-                TyParam {\n-                    name: self.name().clean(cx),\n-                    did: cx.tcx.hir.local_def_id(self.id),\n-                    bounds: bounds.clean(cx),\n-                    default: default.clean(cx),\n-                    synthetic: synthetic,\n-                }\n-            }\n-            _ => panic!(),\n-        }\n-    }\n-}\n-\n-impl<'tcx> Clean<TyParam> for ty::GenericParamDef {\n-    fn clean(&self, cx: &DocContext) -> TyParam {\n-        cx.renderinfo.borrow_mut().external_typarams.insert(self.def_id, self.name.clean(cx));\n-        let has_default = match self.kind {\n-            ty::GenericParamDefKind::Type { has_default, .. } => has_default,\n-            _ => panic!(\"tried to convert a non-type GenericParamDef as a type\")\n-        };\n-        TyParam {\n-            name: self.name.clean(cx),\n-            did: self.def_id,\n-            bounds: vec![], // these are filled in from the where-clauses\n-            default: if has_default {\n-                Some(cx.tcx.type_of(self.def_id).clean(cx))\n-            } else {\n-                None\n-            },\n-            synthetic: None,\n-        }\n-    }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n@@ -1634,8 +1587,11 @@ impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n                     if let ty::TyRef(ref reg, _, _) = ty_s.sty {\n                         if let &ty::RegionKind::ReLateBound(..) = *reg {\n                             debug!(\"  hit an ReLateBound {:?}\", reg);\n-                            if let Some(lt) = reg.clean(cx) {\n-                                late_bounds.push(GenericParamDef::Lifetime(lt));\n+                            if let Some(Lifetime(name)) = reg.clean(cx) {\n+                                late_bounds.push(GenericParamDef {\n+                                    name,\n+                                    kind: GenericParamDefKind::Lifetime,\n+                                });\n                             }\n                         }\n                     }\n@@ -1872,27 +1828,90 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n-pub enum GenericParamDef {\n-    Lifetime(Lifetime),\n-    Type(TyParam),\n+pub enum GenericParamDefKind {\n+    Lifetime,\n+    Type {\n+        did: DefId,\n+        bounds: Vec<TyParamBound>,\n+        default: Option<Type>,\n+        synthetic: Option<hir::SyntheticTyParamKind>,\n+    },\n+}\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+pub struct GenericParamDef {\n+    pub name: String,\n+\n+    pub kind: GenericParamDefKind,\n }\n \n impl GenericParamDef {\n     pub fn is_synthetic_type_param(&self) -> bool {\n-        match self {\n-            GenericParamDef::Type(ty) => ty.synthetic.is_some(),\n-            GenericParamDef::Lifetime(_) => false,\n+        match self.kind {\n+            GenericParamDefKind::Lifetime => false,\n+            GenericParamDefKind::Type { ref synthetic, .. } => synthetic.is_some(),\n+        }\n+    }\n+}\n+\n+impl<'tcx> Clean<GenericParamDef> for ty::GenericParamDef {\n+    fn clean(&self, cx: &DocContext) -> GenericParamDef {\n+        let (name, kind) = match self.kind {\n+            ty::GenericParamDefKind::Lifetime => {\n+                (self.name.to_string(), GenericParamDefKind::Lifetime)\n+            }\n+            ty::GenericParamDefKind::Type { has_default, .. } => {\n+                cx.renderinfo.borrow_mut().external_typarams\n+                             .insert(self.def_id, self.name.clean(cx));\n+                let default = if has_default {\n+                    Some(cx.tcx.type_of(self.def_id).clean(cx))\n+                } else {\n+                    None\n+                };\n+                (self.name.clean(cx), GenericParamDefKind::Type {\n+                    did: self.def_id,\n+                    bounds: vec![], // These are filled in from the where-clauses.\n+                    default,\n+                    synthetic: None,\n+                })\n+            }\n+        };\n+\n+        GenericParamDef {\n+            name,\n+            kind,\n         }\n     }\n }\n \n impl Clean<GenericParamDef> for hir::GenericParam {\n     fn clean(&self, cx: &DocContext) -> GenericParamDef {\n-        match self.kind {\n-            hir::GenericParamKind::Lifetime { .. } => {\n-                GenericParamDef::Lifetime(self.clean(cx))\n+        let (name, kind) = match self.kind {\n+            hir::GenericParamKind::Lifetime { ref bounds, .. } => {\n+                let name = if bounds.len() > 0 {\n+                    let mut s = format!(\"{}: {}\", self.name(), bounds[0].name.name());\n+                    for bound in bounds.iter().skip(1) {\n+                        s.push_str(&format!(\" + {}\", bound.name.name()));\n+                    }\n+                    s\n+                } else {\n+                    self.name().to_string()\n+                };\n+                (name, GenericParamDefKind::Lifetime)\n+            }\n+            hir::GenericParamKind::Type { ref bounds, ref default, synthetic, .. } => {\n+                (self.name().clean(cx), GenericParamDefKind::Type {\n+                    did: cx.tcx.hir.local_def_id(self.id),\n+                    bounds: bounds.clean(cx),\n+                    default: default.clean(cx),\n+                    synthetic: synthetic,\n+                })\n             }\n-            hir::GenericParamKind::Type { .. } => GenericParamDef::Type(self.clean(cx)),\n+        };\n+\n+        GenericParamDef {\n+            name,\n+            kind,\n         }\n     }\n }\n@@ -1919,17 +1938,16 @@ impl Clean<Generics> for hir::Generics {\n         }\n         let impl_trait_params = self.params\n             .iter()\n-            .filter(|p| is_impl_trait(p))\n-            .map(|p| {\n-                let p = p.clean(cx);\n-                if let GenericParamDef::Type(ref tp) = p {\n-                    cx.impl_trait_bounds\n-                        .borrow_mut()\n-                        .insert(tp.did, tp.bounds.clone());\n-                } else {\n-                    unreachable!()\n+            .filter(|param| is_impl_trait(param))\n+            .map(|param| {\n+                let param: GenericParamDef = param.clean(cx);\n+                match param.kind {\n+                    GenericParamDefKind::Lifetime => unreachable!(),\n+                    GenericParamDefKind::Type { did, ref bounds, .. } => {\n+                        cx.impl_trait_bounds.borrow_mut().insert(did, bounds.clone());\n+                    }\n                 }\n-                p\n+                param\n             })\n             .collect::<Vec<_>>();\n \n@@ -1940,23 +1958,26 @@ impl Clean<Generics> for hir::Generics {\n         }\n         params.extend(impl_trait_params);\n \n-        let mut g = Generics {\n+        let mut generics = Generics {\n             params,\n-            where_predicates: self.where_clause.predicates.clean(cx)\n+            where_predicates: self.where_clause.predicates.clean(cx),\n         };\n \n         // Some duplicates are generated for ?Sized bounds between type params and where\n         // predicates. The point in here is to move the bounds definitions from type params\n         // to where predicates when such cases occur.\n-        for where_pred in &mut g.where_predicates {\n+        for where_pred in &mut generics.where_predicates {\n             match *where_pred {\n                 WherePredicate::BoundPredicate { ty: Generic(ref name), ref mut bounds } => {\n                     if bounds.is_empty() {\n-                        for param in &mut g.params {\n-                            if let GenericParamDef::Type(ref mut type_param) = *param {\n-                                if &type_param.name == name {\n-                                    mem::swap(bounds, &mut type_param.bounds);\n-                                    break\n+                        for param in &mut generics.params {\n+                            match param.kind {\n+                                GenericParamDefKind::Lifetime => {}\n+                                GenericParamDefKind::Type { bounds: ref mut ty_bounds, .. } => {\n+                                    if &param.name == name {\n+                                        mem::swap(bounds, ty_bounds);\n+                                        break\n+                                    }\n                                 }\n                             }\n                         }\n@@ -1965,7 +1986,7 @@ impl Clean<Generics> for hir::Generics {\n                 _ => continue,\n             }\n         }\n-        g\n+        generics\n     }\n }\n \n@@ -1988,7 +2009,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                 }\n                 Some(param.clean(cx))\n             }\n-        }).collect::<Vec<TyParam>>();\n+        }).collect::<Vec<GenericParamDef>>();\n \n         let mut where_predicates = preds.predicates.to_vec().clean(cx);\n \n@@ -2033,15 +2054,9 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             params: gens.params\n                         .iter()\n                         .flat_map(|param| match param.kind {\n-                            ty::GenericParamDefKind::Lifetime => {\n-                                Some(GenericParamDef::Lifetime(param.clean(cx)))\n-                            }\n+                            ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n                             ty::GenericParamDefKind::Type { .. } => None,\n-                        }).chain(\n-                            simplify::ty_params(stripped_typarams)\n-                                .into_iter()\n-                                .map(|tp| GenericParamDef::Type(tp))\n-                        )\n+                        }).chain(simplify::ty_params(stripped_typarams).into_iter())\n                         .collect(),\n             where_predicates: simplify::where_clauses(cx, where_predicates),\n         }"}, {"sha": "95ceee8569090d70a12b3a89b9f17b1ed7872758", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -135,9 +135,14 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     clauses\n }\n \n-pub fn ty_params(mut params: Vec<clean::TyParam>) -> Vec<clean::TyParam> {\n+pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericParamDef> {\n     for param in &mut params {\n-        param.bounds = ty_bounds(mem::replace(&mut param.bounds, Vec::new()));\n+        match param.kind {\n+            clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n+                *bounds = ty_bounds(mem::replace(bounds, Vec::new()));\n+            }\n+            _ => panic!(\"expected only type parameters\"),\n+        }\n     }\n     params\n }"}, {"sha": "86c312275ff280549c68c7e46772f7b02f24d6c6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -119,20 +119,20 @@ impl<'a> fmt::Display for TyParamBounds<'a> {\n \n impl fmt::Display for clean::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            clean::GenericParamDef::Lifetime(ref lp) => write!(f, \"{}\", lp),\n-            clean::GenericParamDef::Type(ref tp) => {\n-                f.write_str(&tp.name)?;\n+        match self.kind {\n+            clean::GenericParamDefKind::Lifetime => write!(f, \"{}\", self.name),\n+            clean::GenericParamDefKind::Type { ref bounds, ref default, .. } => {\n+                f.write_str(&self.name)?;\n \n-                if !tp.bounds.is_empty() {\n+                if !bounds.is_empty() {\n                     if f.alternate() {\n-                        write!(f, \": {:#}\", TyParamBounds(&tp.bounds))?;\n+                        write!(f, \": {:#}\", TyParamBounds(bounds))?;\n                     } else {\n-                        write!(f, \":&nbsp;{}\", TyParamBounds(&tp.bounds))?;\n+                        write!(f, \":&nbsp;{}\", TyParamBounds(bounds))?;\n                     }\n                 }\n \n-                if let Some(ref ty) = tp.default {\n+                if let Some(ref ty) = default {\n                     if f.alternate() {\n                         write!(f, \" = {:#}\", ty)?;\n                     } else {"}, {"sha": "675d1097bda4acbbc41265e0efbe420b2ee7f577", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f457b3d10aa2db4104402e2d04f72fab64a3c62e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f457b3d10aa2db4104402e2d04f72fab64a3c62e", "patch": "@@ -1453,11 +1453,11 @@ impl DocFolder for Cache {\n impl<'a> Cache {\n     fn generics(&mut self, generics: &clean::Generics) {\n         for param in &generics.params {\n-            match *param {\n-                clean::GenericParamDef::Type(ref typ) => {\n-                    self.typarams.insert(typ.did, typ.name.clone());\n+            match param.kind {\n+                clean::GenericParamDefKind::Lifetime => {}\n+                clean::GenericParamDefKind::Type { did, .. } => {\n+                    self.typarams.insert(did, param.name.clone());\n                 }\n-                clean::GenericParamDef::Lifetime(_) => {}\n             }\n         }\n     }"}]}