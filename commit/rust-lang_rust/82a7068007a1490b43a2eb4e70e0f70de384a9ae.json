{"sha": "82a7068007a1490b43a2eb4e70e0f70de384a9ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYTcwNjgwMDdhMTQ5MGI0M2EyZWI0ZTcwZTBmNzBkZTM4NGE5YWU=", "commit": {"author": {"name": "Markus Legner", "email": "markus@legner.ch", "date": "2020-11-21T11:28:53Z"}, "committer": {"name": "Markus Legner", "email": "markus@legner.ch", "date": "2020-11-27T07:54:35Z"}, "message": "Trigger modulo_one lint also on -1.", "tree": {"sha": "74a501d25a355678b199c5743236e62aad682c03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a501d25a355678b199c5743236e62aad682c03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82a7068007a1490b43a2eb4e70e0f70de384a9ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8Gd4tklnUGrwqsxng3PtO0zPqEUFAl/AsL8ACgkQg3PtO0zP\nqEUaAhAAmvPe3fQjW3iPwZldtMTbMOSVGL0lzf2p9/+kwNNF8Wgn16uKR5wgkSXx\nFtQT/eH7x89ubWXbb1e28PTG9iLc7bcxSyfiuda8MHZUTqpH5MWJFa4WWN3EfIxV\nDiGquj55vf3yDheGpEnuvIrjlvUVrnQj7vkj3Ejk+11YRc4pcNY4zENGt8ztjpAo\n5JoZIe4HX4oSvgqkIbBZ0GQ2oDc1Ziou/J6+5fKbAd1rjG3uwoU3+SFXD7QT6UzG\ntmB3h2td/ZQzcv7iG8VLOrYaDAcPUFV/cdrUZ2PvMj0nvyL6tjX1fyIZk2jCSUsQ\nb3g4I9gny2VyE0T/V/jg7d1SH4LcvsGhDx1i3VKFehDJmsBXQaRGhhOknmGCq46L\npYL9K03GL13RtkaRFlGe3PX7lFABD70V4VSO547qCIIqbbeQxVA8OeqG5XFPxMxk\nD4gTrL6fVu7OibNiyLm8GskPPOaCQapOM2NsWM9FtBJ/Kq76LUVe3qsmgZK9k8Uh\noNvVJlY+osnCFyzZge/UIyu+XPpT/7VIrybEgZlCJOy/yPncoimsDMKp6oDvwEKS\nCPl7QIDsYb22ose90A4DSCYgf2zWfEZbr5dG+62H5eGp3toORwdaDv6XYeyHIlbv\nx/RUra4NKMhquEshgiKh1KpbJ+v/m2OZZAx5Y34ra/QGvDWqROU=\n=xu11\n-----END PGP SIGNATURE-----", "payload": "tree 74a501d25a355678b199c5743236e62aad682c03\nparent 7a7399076ac7494f27a1fc4ffd377da33eb80484\nauthor Markus Legner <markus@legner.ch> 1605958133 +0100\ncommitter Markus Legner <markus@legner.ch> 1606463675 +0100\n\nTrigger modulo_one lint also on -1.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82a7068007a1490b43a2eb4e70e0f70de384a9ae", "html_url": "https://github.com/rust-lang/rust/commit/82a7068007a1490b43a2eb4e70e0f70de384a9ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82a7068007a1490b43a2eb4e70e0f70de384a9ae/comments", "author": {"login": "mlegner", "id": 5960634, "node_id": "MDQ6VXNlcjU5NjA2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5960634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlegner", "html_url": "https://github.com/mlegner", "followers_url": "https://api.github.com/users/mlegner/followers", "following_url": "https://api.github.com/users/mlegner/following{/other_user}", "gists_url": "https://api.github.com/users/mlegner/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlegner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlegner/subscriptions", "organizations_url": "https://api.github.com/users/mlegner/orgs", "repos_url": "https://api.github.com/users/mlegner/repos", "events_url": "https://api.github.com/users/mlegner/events{/privacy}", "received_events_url": "https://api.github.com/users/mlegner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mlegner", "id": 5960634, "node_id": "MDQ6VXNlcjU5NjA2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5960634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlegner", "html_url": "https://github.com/mlegner", "followers_url": "https://api.github.com/users/mlegner/followers", "following_url": "https://api.github.com/users/mlegner/following{/other_user}", "gists_url": "https://api.github.com/users/mlegner/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlegner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlegner/subscriptions", "organizations_url": "https://api.github.com/users/mlegner/orgs", "repos_url": "https://api.github.com/users/mlegner/repos", "events_url": "https://api.github.com/users/mlegner/events{/privacy}", "received_events_url": "https://api.github.com/users/mlegner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7399076ac7494f27a1fc4ffd377da33eb80484", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7399076ac7494f27a1fc4ffd377da33eb80484", "html_url": "https://github.com/rust-lang/rust/commit/7a7399076ac7494f27a1fc4ffd377da33eb80484"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "f16feb9b1ba2d977f2303d39cd20c07ffe949660", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/82a7068007a1490b43a2eb4e70e0f70de384a9ae/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a7068007a1490b43a2eb4e70e0f70de384a9ae/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=82a7068007a1490b43a2eb4e70e0f70de384a9ae", "patch": "@@ -18,7 +18,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_integer_const, iter_input_pats,\n     last_path_segment, match_qpath, match_trait_method, paths, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_lint_hir_and_then, SpanlessEq,\n+    span_lint_and_then, span_lint_hir_and_then, SpanlessEq, unsext,\n };\n \n declare_clippy_lint! {\n@@ -139,23 +139,26 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for getting the remainder of a division by one.\n+    /// **What it does:** Checks for getting the remainder of a division by one or minus\n+    /// one.\n     ///\n-    /// **Why is this bad?** The result can only ever be zero. No one will write\n-    /// such code deliberately, unless trying to win an Underhanded Rust\n-    /// Contest. Even for that contest, it's probably a bad idea. Use something more\n-    /// underhanded.\n+    /// **Why is this bad?** The result for a divisor of one can only ever be zero; for\n+    /// minus one it can cause panic/overflow (if the left operand is the minimal value of\n+    /// the respective integer type) or results in zero. No one will write such code\n+    /// deliberately, unless trying to win an Underhanded Rust Contest. Even for that\n+    /// contest, it's probably a bad idea. Use something more underhanded.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust\n     /// # let x = 1;\n     /// let a = x % 1;\n+    /// let a = x % -1;\n     /// ```\n     pub MODULO_ONE,\n     correctness,\n-    \"taking a number modulo 1, which always returns 0\"\n+    \"taking a number modulo +/-1, which can either panic/overflow or always returns 0\"\n }\n \n declare_clippy_lint! {\n@@ -429,8 +432,17 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                         }\n                         diag.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\");\n                     });\n-                } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n-                    span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n+                } else if op == BinOpKind::Rem {\n+                    if is_integer_const(cx, right, 1) {\n+                        span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n+                    }\n+\n+                    if let ty::Int(ity) = cx.typeck_results().expr_ty(right).kind() {\n+                        if is_integer_const(cx, right, unsext(cx.tcx, -1, *ity)) {\n+                            span_lint(cx, MODULO_ONE, expr.span,\n+                                \"any number modulo -1 will panic/overflow or result in 0\");\n+                        }\n+                    };\n                 }\n             },\n             _ => {},"}, {"sha": "678a312f66e53af9ed72aeb8765c9db6cbbb53e1", "filename": "tests/ui/modulo_one.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82a7068007a1490b43a2eb4e70e0f70de384a9ae/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a7068007a1490b43a2eb4e70e0f70de384a9ae/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=82a7068007a1490b43a2eb4e70e0f70de384a9ae", "patch": "@@ -2,13 +2,22 @@\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n static STATIC_ONE: usize = 2 - 1;\n+static STATIC_NEG_ONE: i64 = 1 - 2;\n \n fn main() {\n     10 % 1;\n+    10 % -1;\n     10 % 2;\n+    i32::MIN % (-1); // also caught by rustc\n \n     const ONE: u32 = 1 * 1;\n+    const NEG_ONE: i64 = 1 - 2;\n+    const INT_MIN: i64 = i64::MIN;\n \n     2 % ONE;\n-    5 % STATIC_ONE;\n+    5 % STATIC_ONE; // NOT caught by lint\n+    2 % NEG_ONE;\n+    5 % STATIC_NEG_ONE; // NOT caught by lint\n+    INT_MIN % NEG_ONE; // also caught by rustc\n+    INT_MIN % STATIC_NEG_ONE; // ONLY caught by rustc\n }"}, {"sha": "2b2c699733852dd464507708dc41ad79a15b92eb", "filename": "tests/ui/modulo_one.stderr", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/82a7068007a1490b43a2eb4e70e0f70de384a9ae/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82a7068007a1490b43a2eb4e70e0f70de384a9ae/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=82a7068007a1490b43a2eb4e70e0f70de384a9ae", "patch": "@@ -1,30 +1,74 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/modulo_one.rs:11:5\n+   |\n+LL |     i32::MIN % (-1); // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/modulo_one.rs:21:5\n+   |\n+LL |     INT_MIN % NEG_ONE; // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/modulo_one.rs:22:5\n+   |\n+LL |     INT_MIN % STATIC_NEG_ONE; // ONLY caught by rustc\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n+\n error: any number modulo 1 will be 0\n-  --> $DIR/modulo_one.rs:7:5\n+  --> $DIR/modulo_one.rs:8:5\n    |\n LL |     10 % 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::modulo-one` implied by `-D warnings`\n \n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:9:5\n+   |\n+LL |     10 % -1;\n+   |     ^^^^^^^\n+\n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:11:5\n+   |\n+LL |     i32::MIN % (-1); // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^\n+\n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/modulo_one.rs:10:22\n+  --> $DIR/modulo_one.rs:13:22\n    |\n LL |     const ONE: u32 = 1 * 1;\n    |                      ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/modulo_one.rs:10:22\n+  --> $DIR/modulo_one.rs:13:22\n    |\n LL |     const ONE: u32 = 1 * 1;\n    |                      ^^^^^\n \n error: any number modulo 1 will be 0\n-  --> $DIR/modulo_one.rs:12:5\n+  --> $DIR/modulo_one.rs:17:5\n    |\n LL |     2 % ONE;\n    |     ^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:19:5\n+   |\n+LL |     2 % NEG_ONE;\n+   |     ^^^^^^^^^^^\n+\n+error: any number modulo -1 will panic/overflow or result in 0\n+  --> $DIR/modulo_one.rs:21:5\n+   |\n+LL |     INT_MIN % NEG_ONE; // also caught by rustc\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n "}]}