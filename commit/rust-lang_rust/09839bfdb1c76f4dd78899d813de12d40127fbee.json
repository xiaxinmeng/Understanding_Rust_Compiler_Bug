{"sha": "09839bfdb1c76f4dd78899d813de12d40127fbee", "node_id": "C_kwDOAAsO6NoAKDA5ODM5YmZkYjFjNzZmNGRkNzg4OTlkODEzZGUxMmQ0MDEyN2ZiZWU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2023-05-03T23:42:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T23:42:49Z"}, "message": "Rollup merge of #110928 - loongarch-rs:tests, r=petrochenkov\n\ntests: Add tests for LoongArch64", "tree": {"sha": "08d65a6593c4319b98e2997ef5fd7c9fb88c8fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d65a6593c4319b98e2997ef5fd7c9fb88c8fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09839bfdb1c76f4dd78899d813de12d40127fbee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUvF5CRBK7hj4Ov3rIwAArnYIABBbIlDxl2jSOHqXOJ6Gfmnp\nXRiQYwqSEKzQA/cQNDkNDC4hirSxH7ICZm33hjHZFxp01556XYYBrZoaajw1OKnK\nb/yUjsH+tGj2tGH4MnLWgtFKIqnmbOEh7regBYvpnKPyLk6VVzL3ACzCb0XBZqRY\nYBG6mLw2ww8CwCw8K1n7CXcB2L2h/ODbi5f65/sdn4EUKsOFcjlhTvc4mLIflBiC\nrdSDrYN6UBmngFEXh2S7ib4wyFvMMMnov/qC2OrR3AB3mQoDBFDBErBkX+nGZVeB\nhrBDLaZCZxFLqUchRJdT0tV56OCYNZcbzfl0m6s8xdd3R6k/bBGPJqrMrw8u+YE=\n=in5R\n-----END PGP SIGNATURE-----\n", "payload": "tree 08d65a6593c4319b98e2997ef5fd7c9fb88c8fc7\nparent ceef7e5ced1f28ec2715feb107522553e2baae0d\nparent 4375d3b2032865c7011b3e009710f96a1a02a246\nauthor Manish Goregaokar <manishsmail@gmail.com> 1683157369 -0700\ncommitter GitHub <noreply@github.com> 1683157369 -0700\n\nRollup merge of #110928 - loongarch-rs:tests, r=petrochenkov\n\ntests: Add tests for LoongArch64\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09839bfdb1c76f4dd78899d813de12d40127fbee", "html_url": "https://github.com/rust-lang/rust/commit/09839bfdb1c76f4dd78899d813de12d40127fbee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09839bfdb1c76f4dd78899d813de12d40127fbee/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceef7e5ced1f28ec2715feb107522553e2baae0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceef7e5ced1f28ec2715feb107522553e2baae0d", "html_url": "https://github.com/rust-lang/rust/commit/ceef7e5ced1f28ec2715feb107522553e2baae0d"}, {"sha": "4375d3b2032865c7011b3e009710f96a1a02a246", "url": "https://api.github.com/repos/rust-lang/rust/commits/4375d3b2032865c7011b3e009710f96a1a02a246", "html_url": "https://github.com/rust-lang/rust/commit/4375d3b2032865c7011b3e009710f96a1a02a246"}], "stats": {"total": 387, "additions": 364, "deletions": 23}, "files": [{"sha": "353e7489b5528bc3fc5d56b0dffc606765612aa1", "filename": "tests/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -17,6 +17,7 @@\n // ignore-wasm32\n // ignore-x86\n // ignore-x86_64\n+// ignore-loongarch64\n \n fn main() {\n }"}, {"sha": "11f2917717c7fee97c77e3ee5ae67ee977ec61c0", "filename": "tests/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // ignore-riscv64\n+// ignore-loongarch64\n \n #![feature(link_llvm_intrinsics)]\n #![crate_type = \"lib\"]"}, {"sha": "6b63b83ef459427737687fd439792db3308a4a54", "filename": "tests/codegen/catch-unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcatch-unwind.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -10,6 +10,8 @@\n // ignore-riscv64 FIXME\n // On s390x the closure is also in another function\n // ignore-s390x FIXME\n+// On loongarch64 the closure is also in another function\n+// ignore-loongarch64 FIXME\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "41a99530ad2a7f50bc975dbc52a64fc376824ecc", "filename": "tests/codegen/global_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "e25c164f4075c50c8ce9dcf78017e63a11b6c4cb", "filename": "tests/codegen/global_asm_include.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_include.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "71ecef124f1f1a20335637812cd01a70b4bd8213", "filename": "tests/codegen/global_asm_x2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_x2.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "4b78f6e24f7bc5cbfaaf4d6105d5df3ba530c1b1", "filename": "tests/codegen/loongarch-abi/call-llvm-intrinsics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+// only-loongarch64\n+\n+#![feature(link_llvm_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+struct A;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        println!(\"A\");\n+    }\n+}\n+\n+extern \"C\" {\n+    #[link_name = \"llvm.sqrt.f32\"]\n+    fn sqrt(x: f32) -> f32;\n+}\n+\n+pub fn do_call() {\n+    let _a = A;\n+\n+    unsafe {\n+        // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n+        // CHECK: store float 4.000000e+00, ptr %{{.}}, align 4\n+        // CHECK: load float, ptr %{{.}}, align 4\n+        // CHECK: call float @llvm.sqrt.f32(float %{{.}}\n+        sqrt(4.0);\n+    }\n+}"}, {"sha": "7555553c2c595da07b3a9d87058e018f466795c2", "filename": "tests/codegen/loongarch-abi/loongarch64-lp64d-abi.rs", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -0,0 +1,293 @@\n+// compile-flags: -C no-prepopulate-passes\n+// only-loongarch64\n+// only-linux\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: define void @f_fpr_tracking(double %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, i8 noundef zeroext %i)\n+#[no_mangle]\n+pub extern \"C\" fn f_fpr_tracking(\n+    a: f64,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+    i: u8,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct Double {\n+    f: f64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleDouble {\n+    f: f64,\n+    g: f64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleFloat {\n+    f: f64,\n+    g: f32,\n+}\n+\n+// CHECK: define void @f_double_s_arg(double %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_s_arg(a: Double) {}\n+\n+// CHECK: define double @f_ret_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_s() -> Double {\n+    Double { f: 1. }\n+}\n+\n+// CHECK: define void @f_double_double_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_double_s_arg(a: DoubleDouble) {}\n+\n+// CHECK: define { double, double } @f_ret_double_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_double_s() -> DoubleDouble {\n+    DoubleDouble { f: 1., g: 2. }\n+}\n+\n+// CHECK: define void @f_double_float_s_arg({ double, float } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_float_s_arg(a: DoubleFloat) {}\n+\n+// CHECK: define { double, float } @f_ret_double_float_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_float_s() -> DoubleFloat {\n+    DoubleFloat { f: 1., g: 2. }\n+}\n+\n+// CHECK: define void @f_double_double_s_arg_insufficient_fprs(double %0, double %1, double %2, double %3, double %4, double %5, double %6, [2 x i64] %7)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_double_s_arg_insufficient_fprs(\n+    a: f64,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: DoubleDouble,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt8 {\n+    f: f64,\n+    i: i8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleUInt8 {\n+    f: f64,\n+    i: u8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt32 {\n+    f: f64,\n+    i: i32,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt64 {\n+    f: f64,\n+    i: i64,\n+}\n+\n+// CHECK: define void @f_double_int8_s_arg({ double, i8 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int8_s_arg(a: DoubleInt8) {}\n+\n+// CHECK: define { double, i8 } @f_ret_double_int8_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int8_s() -> DoubleInt8 {\n+    DoubleInt8 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int32_s_arg({ double, i32 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int32_s_arg(a: DoubleInt32) {}\n+\n+// CHECK: define { double, i32 } @f_ret_double_int32_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int32_s() -> DoubleInt32 {\n+    DoubleInt32 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_uint8_s_arg({ double, i8 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_uint8_s_arg(a: DoubleUInt8) {}\n+\n+// CHECK: define { double, i8 } @f_ret_double_uint8_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_uint8_s() -> DoubleUInt8 {\n+    DoubleUInt8 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int64_s_arg({ double, i64 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int64_s_arg(a: DoubleInt64) {}\n+\n+// CHECK: define { double, i64 } @f_ret_double_int64_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int64_s() -> DoubleInt64 {\n+    DoubleInt64 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int8_s_arg_insufficient_gprs(i32 noundef signext %a, i32 noundef signext %b, i32 noundef signext %c, i32 noundef signext %d, i32 noundef signext %e, i32 noundef signext %f, i32 noundef signext %g, i32 noundef signext %h, [2 x i64] %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int8_s_arg_insufficient_gprs(\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: DoubleInt8,\n+) {\n+}\n+\n+// CHECK: define void @f_struct_double_int8_insufficient_fprs(float %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, [2 x i64] %8)\n+#[no_mangle]\n+pub extern \"C\" fn f_struct_double_int8_insufficient_fprs(\n+    a: f32,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+    i: DoubleInt8,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr1 {\n+    a: [f64; 1],\n+}\n+\n+// CHECK: define void @f_doublearr1_s_arg(double %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr1_s_arg(a: DoubleArr1) {}\n+\n+// CHECK: define double @f_ret_doublearr1_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr1_s() -> DoubleArr1 {\n+    DoubleArr1 { a: [1.] }\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr2 {\n+    a: [f64; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_s_arg(a: DoubleArr2) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_s() -> DoubleArr2 {\n+    DoubleArr2 { a: [1., 2.] }\n+}\n+\n+#[repr(C)]\n+pub struct Tricky1 {\n+    f: [f64; 1],\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr2Tricky1 {\n+    g: [Tricky1; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_tricky1_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_tricky1_s_arg(a: DoubleArr2Tricky1) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_tricky1_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_tricky1_s() -> DoubleArr2Tricky1 {\n+    DoubleArr2Tricky1 { g: [Tricky1 { f: [1.] }, Tricky1 { f: [2.] }] }\n+}\n+\n+#[repr(C)]\n+pub struct EmptyStruct {}\n+\n+#[repr(C)]\n+pub struct DoubleArr2Tricky2 {\n+    s: EmptyStruct,\n+    g: [Tricky1; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_tricky2_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_tricky2_s_arg(a: DoubleArr2Tricky2) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_tricky2_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_tricky2_s() -> DoubleArr2Tricky2 {\n+    DoubleArr2Tricky2 { s: EmptyStruct {}, g: [Tricky1 { f: [1.] }, Tricky1 { f: [2.] }] }\n+}\n+\n+#[repr(C)]\n+pub struct IntDoubleInt {\n+    a: i32,\n+    b: f64,\n+    c: i32,\n+}\n+\n+// CHECK: define void @f_int_double_int_s_arg(ptr noalias nocapture noundef dereferenceable(24) %a)\n+#[no_mangle]\n+pub extern \"C\" fn f_int_double_int_s_arg(a: IntDoubleInt) {}\n+\n+// CHECK: define void @f_ret_int_double_int_s(ptr noalias nocapture noundef sret(%IntDoubleInt) dereferenceable(24) %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_int_double_int_s() -> IntDoubleInt {\n+    IntDoubleInt { a: 1, b: 2., c: 3 }\n+}\n+\n+#[repr(C)]\n+pub struct CharCharDouble {\n+    a: u8,\n+    b: u8,\n+    c: f64,\n+}\n+\n+// CHECK: define void @f_char_char_double_s_arg([2 x i64] %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_char_char_double_s_arg(a: CharCharDouble) {}\n+\n+// CHECK: define [2 x i64] @f_ret_char_char_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_char_char_double_s() -> CharCharDouble {\n+    CharCharDouble { a: 1, b: 2, c: 3. }\n+}\n+\n+#[repr(C)]\n+pub union DoubleU {\n+    a: f64,\n+}\n+\n+// CHECK: define void @f_double_u_arg(i64 %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_u_arg(a: DoubleU) {}\n+\n+// CHECK: define i64 @f_ret_double_u()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_u() -> DoubleU {\n+    unsafe { DoubleU { a: 1. } }\n+}"}, {"sha": "9c4b0e58e718713b7e9d881b73ca481289bb7a08", "filename": "tests/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -10,6 +10,7 @@\n // ignore-riscv64 see codegen/riscv-abi\n // ignore-s390x\n // ignore-windows\n+// ignore-loongarch64\n // See repr-transparent.rs\n \n #![feature(transparent_unions)]"}, {"sha": "a7bde2d05c3c345ca9b1acf3ad84353b3d6d9990", "filename": "tests/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -12,6 +12,7 @@\n // ignore-sparc64\n // ignore-x86\n // ignore-x86_64\n+// ignore-loongarch64\n // See repr-transparent.rs\n \n #![feature(transparent_unions)]"}, {"sha": "759ddea67a5b70bc2446fb8c90cabed30339a4c5", "filename": "tests/codegen/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -3,6 +3,7 @@\n // ignore-riscv64 riscv64 has an i128 type used with test_Vector\n // see codegen/riscv-abi for riscv functiona call tests\n // ignore-s390x s390x with default march passes vector types per reference\n+// ignore-loongarch64 see codegen/loongarch-abi for loongarch function call tests\n \n #![crate_type=\"lib\"]\n #![feature(repr_simd, transparent_unions)]"}, {"sha": "0dccb633df9837644be6cee697155eead81c7057", "filename": "tests/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -5,6 +5,7 @@\n // ignore-mips64\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "8137c92304d83920b5eb147e1202b8b938ec8eea", "filename": "tests/ui/abi/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -5,6 +5,7 @@\n // ignore-mips64\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "e59e06f801b78fcd296d0a31cfe09947b20218c7", "filename": "tests/ui/cfg/conditional-compile-arch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -39,3 +39,6 @@ pub fn main() { }\n \n #[cfg(target_arch = \"riscv64\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"loongarch64\")]\n+pub fn main() { }"}, {"sha": "8d1765eb8e9d967b75b752fd6e0ad16b1cf20da3", "filename": "tests/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Fgate.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -10,6 +10,7 @@\n // ignore-sparc\n // ignore-sparc64\n // ignore-s390x\n+// ignore-loongarch64\n // gate-test-sse4a_target_feature\n // gate-test-powerpc_target_feature\n // gate-test-avx512_target_feature"}, {"sha": "ee542b60a26344b7984ab4aa9d1938a4b48b10d6", "filename": "tests/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Fgate.stderr?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:31:18\n+  --> $DIR/gate.rs:32:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "77fd8b85f3f4d72ce71106028c0889706939f140", "filename": "tests/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -10,6 +10,7 @@\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n \n #![warn(unused_attributes)]\n "}, {"sha": "6d37d0917bc6135f0e1de413e3e9b300e0399684", "filename": "tests/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09839bfdb1c76f4dd78899d813de12d40127fbee/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=09839bfdb1c76f4dd78899d813de12d40127fbee", "patch": "@@ -1,11 +1,11 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:31:1\n+  --> $DIR/invalid-attribute.rs:32:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:16:1\n+  --> $DIR/invalid-attribute.rs:17:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | extern crate alloc;\n    | ------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:21:1\n+  --> $DIR/invalid-attribute.rs:22:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL | use alloc::alloc::alloc;\n    | ------------------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:26:1\n+  --> $DIR/invalid-attribute.rs:27:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL | extern \"Rust\" {}\n    | ---------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:48:1\n+  --> $DIR/invalid-attribute.rs:49:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL | mod another {}\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:53:1\n+  --> $DIR/invalid-attribute.rs:54:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +50,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:58:1\n+  --> $DIR/invalid-attribute.rs:59:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL | struct Foo;\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:63:1\n+  --> $DIR/invalid-attribute.rs:64:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL | enum Bar {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:68:1\n+  --> $DIR/invalid-attribute.rs:69:1\n    |\n LL |   #[target_feature(enable = \"sse2\")]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL | | }\n    | |_- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:76:1\n+  --> $DIR/invalid-attribute.rs:77:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | type Uwu = ();\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:81:1\n+  --> $DIR/invalid-attribute.rs:82:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL | trait Baz {}\n    | ------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:91:1\n+  --> $DIR/invalid-attribute.rs:92:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL | static A: () = ();\n    | ------------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:96:1\n+  --> $DIR/invalid-attribute.rs:97:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL | impl Quux for u8 {}\n    | ------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:101:1\n+  --> $DIR/invalid-attribute.rs:102:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL | impl Foo {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:119:5\n+  --> $DIR/invalid-attribute.rs:120:5\n    |\n LL |       #[target_feature(enable = \"sse2\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +138,7 @@ LL | |     }\n    | |_____- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:127:5\n+  --> $DIR/invalid-attribute.rs:128:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -147,25 +147,25 @@ LL |     || {};\n    |     ----- not a function definition\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:33:18\n+  --> $DIR/invalid-attribute.rs:34:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:36:18\n+  --> $DIR/invalid-attribute.rs:37:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:38:18\n+  --> $DIR/invalid-attribute.rs:39:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:42:1\n+  --> $DIR/invalid-attribute.rs:43:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -177,13 +177,13 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:86:1\n+  --> $DIR/invalid-attribute.rs:87:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:111:5\n+  --> $DIR/invalid-attribute.rs:112:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}