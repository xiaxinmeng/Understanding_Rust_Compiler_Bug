{"sha": "386f8eefc0a0775b228740cc5f682b6d10050e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NmY4ZWVmYzBhMDc3NWIyMjg3NDBjYzVmNjgyYjZkMTAwNTBlMDQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-02-23T15:48:34Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:41Z"}, "message": "Forbid cross-polarity specializations", "tree": {"sha": "e54ec1683587b39d9da7a8b5781c5e465b6a9a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e54ec1683587b39d9da7a8b5781c5e465b6a9a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/386f8eefc0a0775b228740cc5f682b6d10050e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/386f8eefc0a0775b228740cc5f682b6d10050e04", "html_url": "https://github.com/rust-lang/rust/commit/386f8eefc0a0775b228740cc5f682b6d10050e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/386f8eefc0a0775b228740cc5f682b6d10050e04/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2651f8c14748bf4598841471329ca260f5860ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2651f8c14748bf4598841471329ca260f5860ec0", "html_url": "https://github.com/rust-lang/rust/commit/2651f8c14748bf4598841471329ca260f5860ec0"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "6fd61741268b67bdce51d7907f8c5ce9dc1d8a99", "filename": "src/librustc/middle/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/386f8eefc0a0775b228740cc5f682b6d10050e04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386f8eefc0a0775b228740cc5f682b6d10050e04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs?ref=386f8eefc0a0775b228740cc5f682b6d10050e04", "patch": "@@ -41,6 +41,7 @@ pub struct Overlap<'a, 'tcx: 'a> {\n /// Given a subst for the requested impl, translate it to a subst\n /// appropriate for the actual item definition (whether it be in that impl,\n /// a parent impl, or the trait).\n+//\n // When we have selected one impl, but are actually using item definitions from\n // a parent impl providing a default, we need a way to translate between the\n // type parameters of the two impls. Here the `source_impl` is the one we've\n@@ -153,6 +154,11 @@ pub fn specializes(tcx: &ty::ctxt, impl1_def_id: DefId, impl2_def_id: DefId) ->\n     //\n     // See RFC 1210 for more details and justification.\n \n+    // Currently we do not allow e.g. a negative impl to specialize a positive one\n+    if tcx.trait_impl_polarity(impl1_def_id) != tcx.trait_impl_polarity(impl2_def_id) {\n+        return false\n+    }\n+\n     let mut infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables);\n \n     // Skiolemize impl1: we want to prove that \"for all types matched by impl1,"}, {"sha": "27a3e31491b823307c28469f58929e2a9cbf9987", "filename": "src/test/compile-fail/specialization-polarity.rs", "status": "renamed", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/386f8eefc0a0775b228740cc5f682b6d10050e04/src%2Ftest%2Fcompile-fail%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386f8eefc0a0775b228740cc5f682b6d10050e04/src%2Ftest%2Fcompile-fail%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-polarity.rs?ref=386f8eefc0a0775b228740cc5f682b6d10050e04", "patch": "@@ -8,19 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Make sure specialization cannot change impl polarity\n+\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]\n \n-struct TestType<T>(T);\n+trait Foo {}\n+\n+impl Foo for .. {}\n+\n+impl<T> Foo for T {}\n+impl !Foo for u8 {} //~ ERROR E0119\n \n-// TODO: nail down the rules here with @nikomatsakis\n+trait Bar {}\n \n-unsafe impl<T> Send for TestType<T> {}\n-impl !Send for TestType<u8> {}\n+impl Bar for .. {}\n \n-fn assert_send<T: Send>() {}\n+impl<T> !Bar for T {}\n+impl Bar for u8 {} //~ ERROR E0119\n \n-fn main() {\n-    assert_send::<TestType<()>>();\n-    assert_send::<TestType<u8>>(); //~ ERROR\n-}\n+fn main() {}", "previous_filename": "src/test/compile-fail/specialization-negative-impl.rs"}]}