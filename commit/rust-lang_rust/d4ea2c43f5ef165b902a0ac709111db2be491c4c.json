{"sha": "d4ea2c43f5ef165b902a0ac709111db2be491c4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZWEyYzQzZjVlZjE2NWI5MDJhMGFjNzA5MTExZGIyYmU0OTFjNGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-13T07:11:23Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-13T07:11:23Z"}, "message": "Various cleanups", "tree": {"sha": "c3a13d297ee94154f997078d50f73dc682086b55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3a13d297ee94154f997078d50f73dc682086b55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ea2c43f5ef165b902a0ac709111db2be491c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ea2c43f5ef165b902a0ac709111db2be491c4c", "html_url": "https://github.com/rust-lang/rust/commit/d4ea2c43f5ef165b902a0ac709111db2be491c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ea2c43f5ef165b902a0ac709111db2be491c4c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c53b76324cf41fa9c5116660ad73bc32de4d6c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53b76324cf41fa9c5116660ad73bc32de4d6c37", "html_url": "https://github.com/rust-lang/rust/commit/c53b76324cf41fa9c5116660ad73bc32de4d6c37"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "9df55e52061634962c67b5e5dcd338cf497f1fea", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d4ea2c43f5ef165b902a0ac709111db2be491c4c", "patch": "@@ -558,12 +558,6 @@ impl<'hir> Map<'hir> {\n     pub fn ty_param_owner(&self, id: NodeId) -> NodeId {\n         match self.get(id) {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => id,\n-            NodeItem(&Item {\n-                node: ItemExistential(ExistTy {\n-                    impl_trait_fn: Some(did),\n-                    ..\n-                }), ..\n-            }) => self.def_index_to_node_id(did.index),\n             NodeTyParam(_) => self.get_parent_node(id),\n             _ => {\n                 bug!(\"ty_param_owner: {} not a type parameter\",\n@@ -774,7 +768,7 @@ impl<'hir> Map<'hir> {\n \n     /// Retrieve the NodeId for `id`'s parent item, or `id` itself if no\n     /// parent item is in this map. The \"parent item\" is the closest parent node\n-    /// in the AST which is recorded by the map and is an item, either an item\n+    /// in the HIR which is recorded by the map and is an item, either an item\n     /// in a module, trait, or impl.\n     pub fn get_parent(&self, id: NodeId) -> NodeId {\n         match self.walk_parent_nodes(id, |node| match *node {"}, {"sha": "1fb12172838072e0d0204c34883af594fa44fab6", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d4ea2c43f5ef165b902a0ac709111db2be491c4c", "patch": "@@ -944,6 +944,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemTy(..)          |\n             hir::ItemTrait(..)       |\n             hir::ItemTraitAlias(..)  |\n+            hir::ItemExistential(..) |\n             hir::ItemMod(..)         => {\n                 // Nothing to do, just keep recursing...\n             }\n@@ -958,7 +959,6 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n \n             hir::ItemEnum(_, ref generics) |\n             hir::ItemStruct(_, ref generics) |\n-            hir::ItemExistential(hir::ExistTy { ref generics, .. }) |\n             hir::ItemUnion(_, ref generics) => {\n                 if generics.params.is_empty() {\n                     if self.mode == MonoItemCollectionMode::Eager {"}, {"sha": "1b2b8dce6f02e66dc929178977615330cb8b6203", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d4ea2c43f5ef165b902a0ac709111db2be491c4c", "patch": "@@ -797,7 +797,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         NodeItem(item) => {\n             match item.node {\n-                ItemExistential(hir::ExistTy { impl_trait_fn: parent_did, .. }) => parent_did,\n+                ItemExistential(hir::ExistTy { impl_trait_fn, .. }) => impl_trait_fn,\n                 _ => None,\n             }\n         },\n@@ -1353,8 +1353,6 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     let predicates = bounds.predicates(tcx, anon_ty);\n \n-                    debug!(\"explicit_predicates_of: predicates={:?}\", predicates);\n-\n                     return ty::GenericPredicates {\n                         parent: None,\n                         predicates: predicates"}, {"sha": "509fe93c41731a964c7fe135472fb161c7485459", "filename": "src/test/run-pass/impl-trait/bounds_regression.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fbounds_regression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea2c43f5ef165b902a0ac709111db2be491c4c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fbounds_regression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fbounds_regression.rs?ref=d4ea2c43f5ef165b902a0ac709111db2be491c4c", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait FakeGenerator {\n+    type Yield;\n+    type Return;\n+}\n+\n+pub trait FakeFuture {\n+    type Output;\n+}\n+\n+pub fn future_from_generator<\n+    T: FakeGenerator<Yield = ()>\n+>(x: T) -> impl FakeFuture<Output = T::Return> {\n+    GenFuture(x)\n+}\n+\n+struct GenFuture<T: FakeGenerator<Yield = ()>>(T);\n+\n+impl<T: FakeGenerator<Yield = ()>> FakeFuture for GenFuture<T> {\n+    type Output = T::Return;\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}]}