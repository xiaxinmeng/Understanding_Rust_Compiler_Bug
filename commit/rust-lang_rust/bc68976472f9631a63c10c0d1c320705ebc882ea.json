{"sha": "bc68976472f9631a63c10c0d1c320705ebc882ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjg5NzY0NzJmOTYzMWE2M2MxMGMwZDFjMzIwNzA1ZWJjODgyZWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-09T16:58:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-09T16:58:46Z"}, "message": "Fix usage of variants in clean/utils", "tree": {"sha": "d70908d6b8e49afd78c7683393e647352c8e4cec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70908d6b8e49afd78c7683393e647352c8e4cec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc68976472f9631a63c10c0d1c320705ebc882ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc68976472f9631a63c10c0d1c320705ebc882ea", "html_url": "https://github.com/rust-lang/rust/commit/bc68976472f9631a63c10c0d1c320705ebc882ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc68976472f9631a63c10c0d1c320705ebc882ea/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7e808f42d479eb70b3573664106d5d8c09acbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7e808f42d479eb70b3573664106d5d8c09acbf", "html_url": "https://github.com/rust-lang/rust/commit/ae7e808f42d479eb70b3573664106d5d8c09acbf"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "f450808c96525bd1f676ff7543e84d880860fd56", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc68976472f9631a63c10c0d1c320705ebc882ea/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc68976472f9631a63c10c0d1c320705ebc882ea/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bc68976472f9631a63c10c0d1c320705ebc882ea", "patch": "@@ -44,7 +44,7 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     let mut masked_crates = FxHashSet::default();\n \n     match module.inner {\n-        ModuleItem(ref module) => {\n+        ItemEnum::ModuleItem(ref module) => {\n             for it in &module.items {\n                 // `compiler_builtins` should be masked too, but we can't apply\n                 // `#[doc(masked)]` to the injected `extern crate` because it's unstable.\n@@ -62,31 +62,31 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     let ExternalCrate { name, src, primitives, keywords, .. } = LOCAL_CRATE.clean(cx);\n     {\n         let m = match module.inner {\n-            ModuleItem(ref mut m) => m,\n+            ItemEnum::ModuleItem(ref mut m) => m,\n             _ => unreachable!(),\n         };\n         m.items.extend(primitives.iter().map(|&(def_id, prim, ref attrs)| {\n             Item {\n                 source: Span::empty(),\n                 name: Some(prim.to_url_str().to_string()),\n                 attrs: attrs.clone(),\n-                visibility: Public,\n+                visibility: Visibility::Public,\n                 stability: get_stability(cx, def_id),\n                 deprecation: get_deprecation(cx, def_id),\n                 def_id,\n-                inner: PrimitiveItem(prim),\n+                inner: ItemEnum::PrimitiveItem(prim),\n             }\n         }));\n         m.items.extend(keywords.into_iter().map(|(def_id, kw, attrs)| {\n             Item {\n                 source: Span::empty(),\n                 name: Some(kw.clone()),\n                 attrs,\n-                visibility: Public,\n+                visibility: Visibility::Public,\n                 stability: get_stability(cx, def_id),\n                 deprecation: get_deprecation(cx, def_id),\n                 def_id,\n-                inner: KeywordItem(kw),\n+                inner: ItemEnum::KeywordItem(kw),\n             }\n         }));\n     }\n@@ -353,7 +353,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>,\n \n     for item in items {\n         let target = match item.inner {\n-            TypedefItem(ref t, true) => &t.type_,\n+            ItemEnum::TypedefItem(ref t, true) => &t.type_,\n             _ => continue,\n         };\n         let primitive = match *target {"}]}