{"sha": "25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZjgwNTFmMmViZGM5NDQ0ZTBmNzVlOTFkYzBjYmI0NWQxOTQxODE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:03:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:26:41Z"}, "message": "rollup merge of #19842: frewsxcv/rm-reexports\n\nRemove most of the public reexports mentioned in #19253\n\nThese are all leftovers from the enum namespacing transition\n\nIn particular:\n\n* src/libstd/num/strconv.rs\n * ExponentFormat\n * SignificantDigits\n * SignFormat\n* src/libstd/path/windows.rs\n * PathPrefix\n* src/libstd/sys/windows/timer.rs\n * Req\n* src/libcollections/str.rs\n * MaybeOwned\n* src/libstd/collections/hash/map.rs\n * Entry\n* src/libstd/collections/hash/table.rs\n * BucketState\n* src/libstd/dynamic_lib.rs\n * Rtld\n* src/libstd/os.rs\n * MemoryMapKind\n * MapOption\n * MapError\n* src/libstd/sys/common/net.rs\n * SocketStatus\n * InAddr\n* src/libstd/sys/unix/timer.rs\n * Req\n\n[breaking-change]", "tree": {"sha": "9a8a8d62055fce17016a83e3446e2a786f7c80c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8a8d62055fce17016a83e3446e2a786f7c80c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "html_url": "https://github.com/rust-lang/rust/commit/25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc99ced5708599c5644a189eca8834453691965e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc99ced5708599c5644a189eca8834453691965e", "html_url": "https://github.com/rust-lang/rust/commit/bc99ced5708599c5644a189eca8834453691965e"}, {"sha": "98af642f5c8f60ae141a5d3ff92e8cc4e4317342", "url": "https://api.github.com/repos/rust-lang/rust/commits/98af642f5c8f60ae141a5d3ff92e8cc4e4317342", "html_url": "https://github.com/rust-lang/rust/commit/98af642f5c8f60ae141a5d3ff92e8cc4e4317342"}], "stats": {"total": 158, "additions": 86, "deletions": 72}, "files": [{"sha": "567734b0dab7b2b73f5b1397d5e6f3877e115dec", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -1609,7 +1609,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                 stderr_out.as_slice());\n \n     ProcRes {\n-        status: process::ExitStatus(exitcode),\n+        status: process::ProcessExit::ExitStatus(exitcode),\n         stdout: stdout_out,\n         stderr: stderr_out,\n         cmdline: cmdline"}, {"sha": "bb03575b3ac271043173bb0c1ea9b77396a80c07", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -51,7 +51,7 @@\n \n #![doc(primitive = \"str\")]\n \n-pub use self::MaybeOwned::*;\n+use self::MaybeOwned::*;\n use self::RecompositionState::*;\n use self::DecompositionType::*;\n \n@@ -842,7 +842,7 @@ mod tests {\n     use core::iter::AdditiveIterator;\n     use super::{eq_slice, from_utf8, is_utf8, is_utf16, raw};\n     use super::truncate_utf16_at_nul;\n-    use super::{Owned, Slice};\n+    use super::MaybeOwned::{Owned, Slice};\n \n     #[test]\n     fn test_eq_slice() {"}, {"sha": "edd96dd683f9e7d3fcaf247c3d50fb0c0979e4d0", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -26,7 +26,8 @@ use core::raw::Slice as RawSlice;\n \n use slice::CloneSliceExt;\n use str;\n-use str::{CharRange, CowString, FromStr, StrAllocating, Owned};\n+use str::{CharRange, CowString, FromStr, StrAllocating};\n+use str::MaybeOwned::Owned;\n use vec::{DerefVec, Vec, as_vec};\n \n /// A growable string stored as a UTF-8 encoded buffer."}, {"sha": "aad3cdf8b4ae9d2fa7417c97f64c29eecfa8f0ee", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -37,7 +37,7 @@ use util::nodemap::{FnvHashMap, NodeSet};\n use lint::{Context, LintPass, LintArray};\n \n use std::{cmp, slice};\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::num::SignedInt;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::{abi, ast, ast_map};"}, {"sha": "323b084afdc32b77b606fb763a2dec03de7dcfb8", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -23,7 +23,7 @@ use plugin::load::PluginMetadata;\n use util::nodemap::FnvHashMap;\n \n use std::rc::Rc;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use syntax::ast;\n use syntax::abi;\n use syntax::attr;"}, {"sha": "bc34b0b45e96fbf599dba7eebd07a6f797bdd15f", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -228,7 +228,7 @@ use util::fs;\n \n use std::c_str::ToCStr;\n use std::cmp;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::collections::{HashMap, HashSet};\n use std::io::fs::PathExtensions;\n use std::io;"}, {"sha": "62f1a30f8e746dbc0fa34555e46e6d802a1cf1ff", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -28,7 +28,7 @@ use syntax::visit::{mod, Visitor};\n use syntax::{ast_map, ast_util, codemap};\n \n use std::rc::Rc;\n-use std::collections::hash_map::Vacant;\n+use std::collections::hash_map::Entry::Vacant;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "a8bf7546559fdf3835388ce4fc11af17d2bd1251", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -34,7 +34,7 @@ use middle::ty::{mod, Ty};\n use middle::ty_fold;\n use middle::ty_fold::TypeFoldable;\n use middle::ty_fold::TypeFolder;\n-use std::collections::hash_map;\n+use std::collections::hash_map::{mod, Entry};\n \n use super::InferCtxt;\n use super::unify::InferCtxtMethodsForSimplyUnifiableTypes;\n@@ -67,8 +67,8 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n         }\n \n         match self.freshen_map.entry(key) {\n-            hash_map::Occupied(entry) => *entry.get(),\n-            hash_map::Vacant(entry) => {\n+            Entry::Occupied(entry) => *entry.get(),\n+            Entry::Vacant(entry) => {\n                 let index = self.freshen_count;\n                 self.freshen_count += 1;\n                 let t = ty::mk_infer(self.infcx.tcx, freshener(index));"}, {"sha": "3e55f6fa896bb6960bb93e0dc5dbbc76fcb9f6f9", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -26,7 +26,7 @@ use session::config;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n-use std::collections::hash_map::Vacant;\n+use std::collections::hash_map::Entry::Vacant;\n use std::io::{mod, File};\n use std::os;\n use std::sync::atomic;"}, {"sha": "72e4eb5d1d63478843221fddd6d6c2e64d5f6aa2", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -12,7 +12,7 @@ use middle::infer::InferCtxt;\n use middle::mem_categorization::Typer;\n use middle::ty::{mod, Ty};\n use std::collections::HashSet;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::default::Default;\n use std::rc::Rc;\n use syntax::ast;"}, {"sha": "c2edcf1e3e25881c68c3dba256fb75772e44c419", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -77,7 +77,8 @@ use std::mem;\n use std::ops;\n use std::rc::Rc;\n use collections::enum_set::{EnumSet, CLike};\n-use std::collections::hash_map::{HashMap, Occupied, Vacant};\n+use std::collections::hash_map::HashMap;\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, Ident, ItemTrait, LOCAL_CRATE};\n use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};"}, {"sha": "0652645907bc87ad057f8a081f61af841855a53c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -33,7 +33,7 @@ use syntax::parse;\n use syntax::parse::token::InternedString;\n \n use std::collections::HashMap;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use std::cell::{RefCell};"}, {"sha": "ac8d5d1e977b585c9c0fa4bbf4591f43ab26320d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -90,7 +90,7 @@ use syntax::owned_slice::OwnedSlice;\n use syntax::visit::{mod, Visitor};\n \n use std::collections::{HashMap, HashSet};\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cell::{Cell, RefCell};\n use std::mem::replace;\n use std::rc::{Rc, Weak};"}, {"sha": "081faaac1d7994a83f090ab2e358ca2973ea44e8", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -21,7 +21,7 @@ use util::nodemap::FnvHashMap;\n use util::ppaux::Repr;\n \n use std::cmp;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::{Span, Spanned};"}, {"sha": "8e70b8ff0da50c84f4fae9932eb432131f901756", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -135,7 +135,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n \n use std::cell::{RefCell};\n-use std::collections::hash_map::{Vacant, Occupied};\n+use std::collections::hash_map::Entry::{Vacant, Occupied};\n \n use self::RepeatingScope::Repeating;\n use self::SubjectNode::Subject;"}, {"sha": "efec620bca758ee6e2e794fb62e28fad54d077b0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -35,7 +35,7 @@\n pub use self::ExternalLocation::*;\n \n use std::cell::RefCell;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::collections::{HashMap, HashSet};\n use std::default::Default;\n use std::fmt;"}, {"sha": "182c83d805c2dc2f946f6e4b7ee34fe0d1b06a31", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -34,7 +34,7 @@ extern crate \"test\" as testing;\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::io::File;\n use std::io;\n use std::rc::Rc;"}, {"sha": "c32fec67d66731f74a1eab99966c229664e6dcb5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -10,7 +10,7 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-pub use self::Entry::*;\n+use self::Entry::*;\n use self::SearchResult::*;\n use self::VacantEntryState::*;\n \n@@ -30,18 +30,20 @@ use option::Option::{Some, None};\n use result::Result;\n use result::Result::{Ok, Err};\n \n-use super::table;\n use super::table::{\n+    mod,\n     Bucket,\n-    Empty,\n     EmptyBucket,\n-    Full,\n     FullBucket,\n     FullBucketImm,\n     FullBucketMut,\n     RawTable,\n     SafeHash\n };\n+use super::table::BucketState::{\n+    Empty,\n+    Full,\n+};\n \n const INITIAL_LOG2_CAP: uint = 5;\n pub const INITIAL_CAPACITY: uint = 1 << INITIAL_LOG2_CAP; // 2^5\n@@ -379,7 +381,7 @@ fn robin_hood<'a, K: 'a, V: 'a>(mut bucket: FullBucketMut<'a, K, V>,\n             assert!(probe.index() != idx_end);\n \n             let full_bucket = match probe.peek() {\n-                table::Empty(bucket) => {\n+                Empty(bucket) => {\n                     // Found a hole!\n                     let b = bucket.put(old_hash, old_key, old_val);\n                     // Now that it's stolen, just read the value's pointer\n@@ -390,7 +392,7 @@ fn robin_hood<'a, K: 'a, V: 'a>(mut bucket: FullBucketMut<'a, K, V>,\n                                .into_mut_refs()\n                                .1;\n                 },\n-                table::Full(bucket) => bucket\n+                Full(bucket) => bucket\n             };\n \n             let probe_ib = full_bucket.index() - full_bucket.distance();\n@@ -1470,7 +1472,8 @@ mod test_map {\n     use prelude::*;\n \n     use super::HashMap;\n-    use super::{Occupied, Vacant};\n+    use super::Entry::{Occupied, Vacant};\n+    use cmp::Equiv;\n     use hash;\n     use iter::{range_inclusive, range_step_inclusive};\n     use cell::RefCell;"}, {"sha": "ce7dbd8ea5ecb10b3c9250b3c374acba0fc06cce", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -10,7 +10,7 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-pub use self::BucketState::*;\n+use self::BucketState::*;\n \n use clone::Clone;\n use cmp;"}, {"sha": "4d8c7d67b8c2ea15f36ac9b090c94595c123d5d5", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -200,7 +200,7 @@ mod test {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n pub mod dl {\n-    pub use self::Rtld::*;\n+    use self::Rtld::*;\n \n     use prelude::*;\n     use c_str::CString;"}, {"sha": "951627b26cad90b5ec8dd03ab53a59acc5bc1a28", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -21,6 +21,9 @@ use intrinsics;\n use libc::c_int;\n use num::{Float, FloatMath};\n use num::strconv;\n+use num::strconv::ExponentFormat::{ExpNone, ExpDec};\n+use num::strconv::SignificantDigits::{DigAll, DigMax, DigExact};\n+use num::strconv::SignFormat::SignNeg;\n \n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON, MIN_VALUE};\n pub use core::f32::{MIN_POS_VALUE, MAX_VALUE, MIN_EXP, MAX_EXP, MIN_10_EXP};\n@@ -252,7 +255,7 @@ impl FloatMath for f32 {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_string(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n+        num, 10u, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -265,7 +268,7 @@ pub fn to_string(num: f32) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_hex(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 16u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n+        num, 16u, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -279,8 +282,7 @@ pub fn to_str_hex(num: f32) -> String {\n #[inline]\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n-    strconv::float_to_str_common(num, rdx, true,\n-                           strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false)\n+    strconv::float_to_str_common(num, rdx, true, SignNeg, DigAll, ExpNone, false)\n }\n \n /// Converts a float to a string with exactly the number of\n@@ -294,7 +296,7 @@ pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_exact(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpNone, false);\n+        num, 10u, true, SignNeg, DigExact(dig), ExpNone, false);\n     r\n }\n \n@@ -309,7 +311,7 @@ pub fn to_str_exact(num: f32, dig: uint) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_digits(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpNone, false);\n+        num, 10u, true, SignNeg, DigMax(dig), ExpNone, false);\n     r\n }\n \n@@ -325,7 +327,7 @@ pub fn to_str_digits(num: f32, dig: uint) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpDec, upper);\n+        num, 10u, true, SignNeg, DigExact(dig), ExpDec, upper);\n     r\n }\n \n@@ -341,7 +343,7 @@ pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpDec, upper);\n+        num, 10u, true, SignNeg, DigMax(dig), ExpDec, upper);\n     r\n }\n "}, {"sha": "7cc94b9ebbbcb9b8b4f2937cd40e8e8a22843372", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -20,6 +20,9 @@ use intrinsics;\n use libc::c_int;\n use num::{Float, FloatMath};\n use num::strconv;\n+use num::strconv::ExponentFormat::{ExpNone, ExpDec};\n+use num::strconv::SignificantDigits::{DigAll, DigMax, DigExact};\n+use num::strconv::SignFormat::SignNeg;\n \n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON, MIN_VALUE};\n pub use core::f64::{MIN_POS_VALUE, MAX_VALUE, MIN_EXP, MAX_EXP, MIN_10_EXP};\n@@ -260,7 +263,7 @@ impl FloatMath for f64 {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_string(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n+        num, 10u, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -273,7 +276,7 @@ pub fn to_string(num: f64) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_hex(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 16u, true, strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false);\n+        num, 16u, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -287,8 +290,7 @@ pub fn to_str_hex(num: f64) -> String {\n #[inline]\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n-    strconv::float_to_str_common(num, rdx, true,\n-                           strconv::SignNeg, strconv::DigAll, strconv::ExpNone, false)\n+    strconv::float_to_str_common(num, rdx, true, SignNeg, DigAll, ExpNone, false)\n }\n \n /// Converts a float to a string with exactly the number of\n@@ -302,7 +304,7 @@ pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_exact(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpNone, false);\n+        num, 10u, true, SignNeg, DigExact(dig), ExpNone, false);\n     r\n }\n \n@@ -317,7 +319,7 @@ pub fn to_str_exact(num: f64, dig: uint) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_digits(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpNone, false);\n+        num, 10u, true, SignNeg, DigMax(dig), ExpNone, false);\n     r\n }\n \n@@ -333,7 +335,7 @@ pub fn to_str_digits(num: f64, dig: uint) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigExact(dig), strconv::ExpDec, upper);\n+        num, 10u, true, SignNeg, DigExact(dig), ExpDec, upper);\n     r\n }\n \n@@ -349,7 +351,7 @@ pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n #[experimental = \"may be removed or relocated\"]\n pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, strconv::SignNeg, strconv::DigMax(dig), strconv::ExpDec, upper);\n+        num, 10u, true, SignNeg, DigMax(dig), ExpDec, upper);\n     r\n }\n "}, {"sha": "b3e4dd52f89cb9d5ccc9e69297a6f368741e2c20", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -12,9 +12,9 @@\n \n #![allow(missing_docs)]\n \n-pub use self::ExponentFormat::*;\n-pub use self::SignificantDigits::*;\n-pub use self::SignFormat::*;\n+use self::ExponentFormat::*;\n+use self::SignificantDigits::*;\n+use self::SignFormat::*;\n \n use char::{mod, Char};\n use num::{mod, Int, Float, FPNaN, FPInfinite, ToPrimitive};"}, {"sha": "258e8964a9fdfb57437bae146c9baef8a4d69813", "filename": "src/libstd/os.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -28,9 +28,9 @@\n #![allow(non_snake_case)]\n #![allow(unused_imports)]\n \n-pub use self::MemoryMapKind::*;\n-pub use self::MapOption::*;\n-pub use self::MapError::*;\n+use self::MemoryMapKind::*;\n+use self::MapOption::*;\n+use self::MapError::*;\n \n use clone::Clone;\n use error::{FromError, Error};\n@@ -1617,8 +1617,8 @@ mod tests {\n         use result::Result::{Ok, Err};\n \n         let chunk = match os::MemoryMap::new(16, &[\n-            os::MapReadable,\n-            os::MapWritable\n+            os::MapOption::MapReadable,\n+            os::MapOption::MapWritable\n         ]) {\n             Ok(chunk) => chunk,\n             Err(msg) => panic!(\"{}\", msg)\n@@ -1660,10 +1660,10 @@ mod tests {\n         file.write_u8(0);\n \n         let chunk = MemoryMap::new(size / 2, &[\n-            MapReadable,\n-            MapWritable,\n-            MapFd(get_fd(&file)),\n-            MapOffset(size / 2)\n+            MapOption::MapReadable,\n+            MapOption::MapWritable,\n+            MapOption::MapFd(get_fd(&file)),\n+            MapOption::MapOffset(size / 2)\n         ]).unwrap();\n         assert!(chunk.len > 0);\n "}, {"sha": "c2c17103554ce608e1abba4cfa9d8c2ef0d99c2c", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -12,7 +12,7 @@\n \n //! Windows file path handling\n \n-pub use self::PathPrefix::*;\n+use self::PathPrefix::*;\n \n use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n@@ -1117,6 +1117,7 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n mod tests {\n     use prelude::*;\n     use super::*;\n+    use super::PathPrefix::*;\n     use super::parse_prefix;\n \n     macro_rules! t {"}, {"sha": "382f6875b281d01c3c788659978862f17608a381", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::SocketStatus::*;\n-pub use self::InAddr::*;\n+use self::SocketStatus::*;\n+use self::InAddr::*;\n \n use alloc::arc::Arc;\n use libc::{mod, c_char, c_int};"}, {"sha": "348b7cfad334ebf78aaca12cf65ff273662131be", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -19,6 +19,7 @@ use prelude::*;\n use sys::{mod, timer, retry, c, set_nonblocking, wouldblock};\n use sys::fs::{fd_t, FileDesc};\n use sys_common::net::*;\n+use sys_common::net::SocketStatus::*;\n use sys_common::{eof, mkerr_libc};\n \n fn unix_socket(ty: libc::c_int) -> IoResult<fd_t> {"}, {"sha": "5c99ad1e0ce223eeed6462ed42822a5f085e2f8f", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -21,6 +21,7 @@ use sys::{set_nonblocking, wouldblock};\n use sys;\n use sys_common;\n use sys_common::net;\n+use sys_common::net::SocketStatus::Readable;\n \n pub use sys_common::net::TcpStream;\n \n@@ -124,7 +125,7 @@ impl TcpAcceptor {\n                 fd => return Ok(TcpStream::new(fd as sock_t)),\n             }\n             try!(net::await(&[self.fd(), self.inner.reader.fd()],\n-                       deadline, net::Readable));\n+                       deadline, Readable));\n         }\n \n         Err(sys_common::eof())"}, {"sha": "fe393b81e3d9a0a0f4194d3df54e1e28a08600c1", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -46,7 +46,7 @@\n //!\n //! Note that all time units in this file are in *milliseconds*.\n \n-pub use self::Req::*;\n+use self::Req::*;\n \n use libc;\n use mem;"}, {"sha": "7e4dd768aa975f8ef6f3a4bb8921037906acfb47", "filename": "src/libstd/sys/windows/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -20,7 +20,7 @@\n //! Other than that, the implementation is pretty straightforward in terms of\n //! the other two implementations of timers with nothing *that* new showing up.\n \n-pub use self::Req::*;\n+use self::Req::*;\n \n use libc;\n use ptr;"}, {"sha": "f0392912878ff5c8f5aba57e64a62347361d0042", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -21,7 +21,7 @@ use ast::{Ident, Mrk, Name, SyntaxContext};\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n /// The SCTable contains a table of SyntaxContext_'s. It\n /// represents a flattened tree structure, to avoid having"}, {"sha": "bc639c32380f5eb040250122ed7663dc9e41dd86", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -98,7 +98,7 @@ use ptr::P;\n use std::mem;\n use std::rc::Rc;\n use std::collections::HashMap;\n-use std::collections::hash_map::{Vacant, Occupied};\n+use std::collections::hash_map::Entry::{Vacant, Occupied};\n \n // To avoid costly uniqueness checks, we require that `MatchSeq` always has\n // a nonempty body."}, {"sha": "41146cded704c281779f9e925f66c0a76c6e7ddc", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -11,7 +11,7 @@\n #![allow(missing_docs)]\n \n use std::collections::hash_map;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::fmt::Show;\n use std::hash::Hash;\n use std::io;"}, {"sha": "38d1093762432652df59625ee5e8fddebe155a7d", "filename": "src/test/run-pass/exponential-notation.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f8051f2ebdc9444e0f75e91dc0cbb45d194181/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=25f8051f2ebdc9444e0f75e91dc0cbb45d194181", "patch": "@@ -10,25 +10,27 @@\n \n #![feature(macro_rules)]\n \n-use std::num::strconv as s;\n+use std::num::strconv::ExponentFormat::{ExpBin, ExpDec};\n+use std::num::strconv::SignificantDigits::DigMax;\n+use std::num::strconv::SignFormat::{SignAll, SignNeg};\n use std::num::strconv::float_to_str_common as to_string;\n \n macro_rules! t(($a:expr, $b:expr) => { { let (r, _) = $a; assert_eq!(r, $b.to_string()); } });\n \n pub fn main() {\n     // Basic usage\n-    t!(to_string(1.2345678e-5f64, 10u, true, s::SignNeg, s::DigMax(6), s::ExpDec, false),\n+    t!(to_string(1.2345678e-5f64, 10u, true, SignNeg, DigMax(6), ExpDec, false),\n              \"1.234568e-5\");\n \n     // Hexadecimal output\n-    t!(to_string(7.281738281250e+01f64, 16u, true, s::SignAll, s::DigMax(6), s::ExpBin, false),\n+    t!(to_string(7.281738281250e+01f64, 16u, true, SignAll, DigMax(6), ExpBin, false),\n               \"+1.2345p+6\");\n-    t!(to_string(-1.777768135071e-02f64, 16u, true, s::SignAll, s::DigMax(6), s::ExpBin, false),\n+    t!(to_string(-1.777768135071e-02f64, 16u, true, SignAll, DigMax(6), ExpBin, false),\n              \"-1.2345p-6\");\n \n     // Some denormals\n-    t!(to_string(4.9406564584124654e-324f64, 10u, true, s::SignNeg, s::DigMax(6), s::ExpBin, false),\n+    t!(to_string(4.9406564584124654e-324f64, 10u, true, SignNeg, DigMax(6), ExpBin, false),\n              \"1p-1074\");\n-    t!(to_string(2.2250738585072009e-308f64, 10u, true, s::SignNeg, s::DigMax(6), s::ExpBin, false),\n+    t!(to_string(2.2250738585072009e-308f64, 10u, true, SignNeg, DigMax(6), ExpBin, false),\n              \"1p-1022\");\n }"}]}