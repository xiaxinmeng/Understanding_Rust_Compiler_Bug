{"sha": "7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjVjNDQ3MTRiM2FmZTRiYTJhMWQ3MDg1M2M5Y2JiYWJiZjc0YTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-10T13:10:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-20T06:53:35Z"}, "message": "test for niche enum discriminant computation that overflows", "tree": {"sha": "24f94cb1a69ca91dfe4ca910af08c9cff8aaf227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f94cb1a69ca91dfe4ca910af08c9cff8aaf227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0", "html_url": "https://github.com/rust-lang/rust/commit/7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d83bcbd339c2782edb9a523874e7d9c0bcca012e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d83bcbd339c2782edb9a523874e7d9c0bcca012e", "html_url": "https://github.com/rust-lang/rust/commit/d83bcbd339c2782edb9a523874e7d9c0bcca012e"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "73172d6bbd2f6592731f7edd9c96eb822657a3d7", "filename": "tests/run-pass/enums.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0/tests%2Frun-pass%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0/tests%2Frun-pass%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenums.rs?ref=7e65c44714b3afe4ba2a1d70853c9cbbabbf74a0", "patch": "@@ -23,6 +23,28 @@ fn test(me: MyEnum) {\n     }\n }\n \n+fn discriminant_overflow() {\n+    // Tests for https://github.com/rust-lang/rust/issues/62138.\n+    #[repr(u8)]\n+    #[allow(dead_code)]\n+    enum WithWraparoundInvalidValues {\n+        X = 1,\n+        Y = 254,\n+    }\n+\n+    #[allow(dead_code)]\n+    enum Foo {\n+        A,\n+        B,\n+        C(WithWraparoundInvalidValues),\n+    }\n+\n+    let x = Foo::B;\n+    if let Foo::C(_) = x {\n+        panic!();\n+    }\n+}\n+\n fn main() {\n     test(MyEnum::MyEmptyVariant);\n     test(MyEnum::MyNewtypeVariant(42));\n@@ -31,4 +53,6 @@ fn main() {\n         my_first_field: 45,\n         my_second_field: 46,\n     });\n+\n+    discriminant_overflow();\n }"}]}