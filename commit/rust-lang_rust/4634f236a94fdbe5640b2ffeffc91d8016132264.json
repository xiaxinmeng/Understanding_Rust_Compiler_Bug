{"sha": "4634f236a94fdbe5640b2ffeffc91d8016132264", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzRmMjM2YTk0ZmRiZTU2NDBiMmZmZWZmYzkxZDgwMTYxMzIyNjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T19:07:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T19:07:38Z"}, "message": "rustc: Add some missing cases to ty.rs for interior vectors, and modify the pattern match so this is less likely to happen again. Add the LLVM type mapping as well.", "tree": {"sha": "559ed4e6df93eadab353066d663398c0da57bb82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559ed4e6df93eadab353066d663398c0da57bb82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4634f236a94fdbe5640b2ffeffc91d8016132264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4634f236a94fdbe5640b2ffeffc91d8016132264", "html_url": "https://github.com/rust-lang/rust/commit/4634f236a94fdbe5640b2ffeffc91d8016132264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4634f236a94fdbe5640b2ffeffc91d8016132264/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b271e3b15404a29cbb430b1d8bafd896c5c8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b271e3b15404a29cbb430b1d8bafd896c5c8aa", "html_url": "https://github.com/rust-lang/rust/commit/d8b271e3b15404a29cbb430b1d8bafd896c5c8aa"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "d700611ac4a822f933928d8bf99707a07c87d063", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4634f236a94fdbe5640b2ffeffc91d8016132264/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f236a94fdbe5640b2ffeffc91d8016132264/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4634f236a94fdbe5640b2ffeffc91d8016132264", "patch": "@@ -560,6 +560,25 @@ fn T_opaque_vec_ptr() -> TypeRef {\n     ret T_ptr(T_vec(T_int()));\n }\n \n+// Interior vector.\n+//\n+// TODO: Support user-defined vector sizes.\n+fn T_ivec(TypeRef t) -> TypeRef {\n+    ret T_struct([T_int(),          // Length (\"fill\")\n+                  T_int(),          // Alloc (if zero, it's heapified)\n+                  T_array(t, 16u)   // Body elements\n+                  ]);\n+}\n+\n+// Interior vector on the heap. Cast to this when the allocated length (second\n+// element of T_ivec above) is zero.\n+fn T_ivec_heap(TypeRef t) -> TypeRef {\n+    ret T_struct([T_int(),          // Length (\"fill\")\n+                  T_int(),          // Alloc (zero in this case)\n+                  T_ptr(T_struct([T_int(),              // Real alloc\n+                                  T_array(t, 0u)]))]);  // Body elements\n+}\n+\n fn T_str() -> TypeRef {\n     ret T_vec(T_i8());\n }\n@@ -834,6 +853,7 @@ fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n         }\n         case (ty::ty_char) { llty = T_char(); }\n         case (ty::ty_str) { llty = T_ptr(T_str()); }\n+        case (ty::ty_istr) { llty = T_ivec(T_i8()); }\n         case (ty::ty_tag(_, _)) {\n             if (ty::type_has_dynamic_size(cx.tcx, t)) {\n                 llty = T_opaque_tag(cx.tn);\n@@ -848,6 +868,9 @@ fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n         case (ty::ty_vec(?mt)) {\n             llty = T_ptr(T_vec(type_of_inner(cx, sp, mt.ty)));\n         }\n+        case (ty::ty_ivec(?mt)) {\n+            llty = T_ivec(type_of_inner(cx, sp, mt.ty));\n+        }\n         case (ty::ty_ptr(?mt)) {\n             llty = T_ptr(type_of_inner(cx, sp, mt.ty));\n         }"}, {"sha": "e8a3cbbb5f0c88d1a18d5b97a7a899b1a933f4a1", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4634f236a94fdbe5640b2ffeffc91d8016132264/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f236a94fdbe5640b2ffeffc91d8016132264/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4634f236a94fdbe5640b2ffeffc91d8016132264", "patch": "@@ -295,6 +295,20 @@ fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] cname) -> raw_t {\n     }\n \n     alt (st) {\n+        case (ty_nil) { /* no-op */ }\n+        case (ty_bot) { /* no-op */ }\n+        case (ty_bool) { /* no-op */ }\n+        case (ty_int) { /* no-op */ }\n+        case (ty_float) { /* no-op */ }\n+        case (ty_uint) { /* no-op */ }\n+        case (ty_machine(_)) { /* no-op */ }\n+        case (ty_char) { /* no-op */ }\n+        case (ty_str) { /* no-op */ }\n+        case (ty_istr) { /* no-op */ }\n+        case (ty_task) { /* no-op */ }\n+        case (ty_type) { /* no-op */ }\n+        case (ty_native) { /* no-op */ }\n+\n         case (ty_param(_)) {\n             has_params = true;\n         }\n@@ -312,6 +326,10 @@ fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] cname) -> raw_t {\n             derive_flags_mt(cx, has_params, has_vars, m);\n         }\n \n+        case (ty_ivec(?m)) {\n+            derive_flags_mt(cx, has_params, has_vars, m);\n+        }\n+\n         case (ty_port(?tt)) {\n             derive_flags_t(cx, has_params, has_vars, tt);\n         }\n@@ -346,7 +364,6 @@ fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] cname) -> raw_t {\n                                  m.output);\n             }\n         }\n-        case (_) { }\n     }\n \n     ret rec(struct=st, cname=cname, hash=h,\n@@ -581,6 +598,7 @@ fn fold_ty(&ctxt cx, fold_mode fld, t ty_0) -> t {\n         case (ty_machine(_))    { /* no-op */ }\n         case (ty_char)          { /* no-op */ }\n         case (ty_str)           { /* no-op */ }\n+        case (ty_istr)          { /* no-op */ }\n         case (ty_type)          { /* no-op */ }\n         case (ty_native)        { /* no-op */ }\n         case (ty_task)          { /* no-op */ }\n@@ -596,6 +614,10 @@ fn fold_ty(&ctxt cx, fold_mode fld, t ty_0) -> t {\n             ty = copy_cname(cx, mk_vec(cx, rec(ty=fold_ty(cx, fld, tm.ty),\n                                                           mut=tm.mut)), ty);\n         }\n+        case (ty_ivec(?tm)) {\n+            ty = copy_cname(cx, mk_ivec(cx, rec(ty=fold_ty(cx, fld, tm.ty),\n+                                                           mut=tm.mut)), ty);\n+        }\n         case (ty_port(?subty)) {\n             ty = copy_cname(cx, mk_port(cx, fold_ty(cx, fld, subty)), ty);\n         }"}]}