{"sha": "bedb44cca89541bc5e03b029a7b6682b632fd10d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZGI0NGNjYTg5NTQxYmM1ZTAzYjAyOWE3YjY2ODJiNjMyZmQxMGQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T13:07:12Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T13:07:12Z"}, "message": "incr.comp.: Allow for mapping from prev-session-CrateNums to current-session-CrateNums in OnDiskCaches.", "tree": {"sha": "12717b1fe49f785847453572831ff086042ed494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12717b1fe49f785847453572831ff086042ed494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bedb44cca89541bc5e03b029a7b6682b632fd10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bedb44cca89541bc5e03b029a7b6682b632fd10d", "html_url": "https://github.com/rust-lang/rust/commit/bedb44cca89541bc5e03b029a7b6682b632fd10d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bedb44cca89541bc5e03b029a7b6682b632fd10d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15db1652f88dc8c20c5cb157978a1ac3ec447b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15db1652f88dc8c20c5cb157978a1ac3ec447b9e", "html_url": "https://github.com/rust-lang/rust/commit/15db1652f88dc8c20c5cb157978a1ac3ec447b9e"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "512860a02b0563c501b872164bc3e82e01cc0bef", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedb44cca89541bc5e03b029a7b6682b632fd10d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedb44cca89541bc5e03b029a7b6682b632fd10d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bedb44cca89541bc5e03b029a7b6682b632fd10d", "patch": "@@ -1313,7 +1313,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            -> Result<(), E::Error>\n         where E: ty::codec::TyEncoder\n     {\n-        self.on_disk_query_result_cache.serialize(self, encoder)\n+        self.on_disk_query_result_cache.serialize(self, self.cstore, encoder)\n     }\n \n }"}, {"sha": "c2303c4a2391d70fb50d3211147b7c0b6e34b86d", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/bedb44cca89541bc5e03b029a7b6682b632fd10d/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedb44cca89541bc5e03b029a7b6682b632fd10d/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=bedb44cca89541bc5e03b029a7b6682b632fd10d", "patch": "@@ -15,12 +15,13 @@ use hir::def_id::{CrateNum, DefIndex, DefId, RESERVED_FOR_INCR_COMP_CACHE,\n                   LOCAL_CRATE};\n use hir::map::definitions::{Definitions, DefPathTable};\n use middle::const_val::ByteArray;\n+use middle::cstore::CrateStore;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable};\n-use session::Session;\n+use session::{CrateDisambiguator, Session};\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n@@ -45,8 +46,10 @@ pub struct OnDiskCache<'sess> {\n     // compilation session.\n     current_diagnostics: RefCell<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n \n-    // This will eventually be needed for creating Decoders that can rebase\n-    // spans.\n+\n+    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n+    cnum_map: RefCell<Option<IndexVec<CrateNum, Option<CrateNum>>>>,\n+\n     _prev_filemap_starts: BTreeMap<BytePos, StableFilemapId>,\n     codemap: &'sess CodeMap,\n }\n@@ -55,6 +58,7 @@ pub struct OnDiskCache<'sess> {\n #[derive(RustcEncodable, RustcDecodable)]\n struct Header {\n     prev_filemap_starts: BTreeMap<BytePos, StableFilemapId>,\n+    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n }\n \n type EncodedPrevDiagnostics = Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)>;\n@@ -94,6 +98,8 @@ impl<'sess> OnDiskCache<'sess> {\n         OnDiskCache {\n             prev_diagnostics,\n             _prev_filemap_starts: header.prev_filemap_starts,\n+            prev_cnums: header.prev_cnums,\n+            cnum_map: RefCell::new(None),\n             codemap: sess.codemap(),\n             current_diagnostics: RefCell::new(FxHashMap()),\n         }\n@@ -103,13 +109,16 @@ impl<'sess> OnDiskCache<'sess> {\n         OnDiskCache {\n             prev_diagnostics: FxHashMap(),\n             _prev_filemap_starts: BTreeMap::new(),\n+            prev_cnums: vec![],\n+            cnum_map: RefCell::new(None),\n             codemap,\n             current_diagnostics: RefCell::new(FxHashMap()),\n         }\n     }\n \n     pub fn serialize<'a, 'gcx, 'lcx, E>(&self,\n                                         tcx: TyCtxt<'a, 'gcx, 'lcx>,\n+                                        cstore: &CrateStore,\n                                         encoder: &mut E)\n                                         -> Result<(), E::Error>\n         where E: ty_codec::TyEncoder\n@@ -124,15 +133,30 @@ impl<'sess> OnDiskCache<'sess> {\n             definitions: tcx.hir.definitions(),\n         };\n \n+\n+        // Encode the file header\n         let prev_filemap_starts: BTreeMap<_, _> = self\n             .codemap\n             .files()\n             .iter()\n             .map(|fm| (fm.start_pos, StableFilemapId::new(fm)))\n             .collect();\n \n-        Header { prev_filemap_starts }.encode(&mut encoder)?;\n+        let sorted_cnums = sorted_cnums_including_local_crate(cstore);\n+\n+        let prev_cnums: Vec<_> = sorted_cnums.iter().map(|&cnum| {\n+            let crate_name = tcx.original_crate_name(cnum).as_str().to_string();\n+            let crate_disambiguator = tcx.crate_disambiguator(cnum);\n+            (cnum.as_u32(), crate_name, crate_disambiguator)\n+        }).collect();\n \n+        Header {\n+            prev_filemap_starts,\n+            prev_cnums,\n+        }.encode(&mut encoder)?;\n+\n+\n+        // Encode Diagnostics\n         let diagnostics: EncodedPrevDiagnostics =\n             self.current_diagnostics\n                 .borrow()\n@@ -142,7 +166,16 @@ impl<'sess> OnDiskCache<'sess> {\n \n         diagnostics.encode(&mut encoder)?;\n \n-        Ok(())\n+        return Ok(());\n+\n+        fn sorted_cnums_including_local_crate(cstore: &CrateStore) -> Vec<CrateNum> {\n+            let mut cnums = vec![LOCAL_CRATE];\n+            cnums.extend_from_slice(&cstore.crates_untracked()[..]);\n+            cnums.sort_unstable();\n+            // Just to be sure...\n+            cnums.dedup();\n+            cnums\n+        }\n     }\n \n     /// Load a diagnostic emitted during the previous compilation session.\n@@ -178,6 +211,40 @@ impl<'sess> OnDiskCache<'sess> {\n \n         x.extend(diagnostics.into_iter());\n     }\n+\n+    // This function builds mapping from previous-session-CrateNum to\n+    // current-session-CrateNum. There might be CrateNums from the previous\n+    // Session that don't occur in the current one. For these, the mapping\n+    // maps to None.\n+    fn compute_cnum_map(tcx: TyCtxt,\n+                        prev_cnums: &[(u32, String, CrateDisambiguator)])\n+                        -> IndexVec<CrateNum, Option<CrateNum>>\n+    {\n+        let _in_ignore = tcx.dep_graph.in_ignore();\n+\n+        let current_cnums = tcx.all_crate_nums(LOCAL_CRATE).iter().map(|&cnum| {\n+            let crate_name = tcx.original_crate_name(cnum)\n+                                .as_str()\n+                                .to_string();\n+            let crate_disambiguator = tcx.crate_disambiguator(cnum);\n+            ((crate_name, crate_disambiguator), cnum)\n+        }).collect::<FxHashMap<_,_>>();\n+\n+        let map_size = prev_cnums.iter()\n+                                 .map(|&(cnum, ..)| cnum)\n+                                 .max()\n+                                 .unwrap_or(0) + 1;\n+        let mut map = IndexVec::new();\n+        map.resize(map_size as usize, None);\n+\n+        for &(prev_cnum, ref crate_name, crate_disambiguator) in prev_cnums {\n+            let key = (crate_name.clone(), crate_disambiguator);\n+            map[CrateNum::from_u32(prev_cnum)] = current_cnums.get(&key).cloned();\n+        }\n+\n+        map[LOCAL_CRATE] = Some(LOCAL_CRATE);\n+        map\n+    }\n }\n \n "}]}