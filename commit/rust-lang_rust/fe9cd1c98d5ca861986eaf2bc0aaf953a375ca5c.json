{"sha": "fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOWNkMWM5OGQ1Y2E4NjE5ODZlYWYyYmMwYWFmOTUzYTM3NWNhNWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T08:50:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T08:50:13Z"}, "message": "strictly enforce pointer validity even for zero-sized accesses", "tree": {"sha": "3eadb787294279e37de95bf05e98b80cdef57b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eadb787294279e37de95bf05e98b80cdef57b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c", "html_url": "https://github.com/rust-lang/rust/commit/fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752accf4e48b83545fa2fcf205602f239389361d", "url": "https://api.github.com/repos/rust-lang/rust/commits/752accf4e48b83545fa2fcf205602f239389361d", "html_url": "https://github.com/rust-lang/rust/commit/752accf4e48b83545fa2fcf205602f239389361d"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "f562aec32337797022e175731a7c812447313fc7", "filename": "src/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=fe9cd1c98d5ca861986eaf2bc0aaf953a375ca5c", "patch": "@@ -179,21 +179,17 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 let elem_layout = self.layout_of(elem_ty)?;\n                 let elem_size = elem_layout.size.bytes();\n                 let count = self.read_scalar(args[2])?.to_usize(&self)?;\n-                if count * elem_size != 0 {\n-                    // TODO: We do not even validate alignment for the 0-bytes case.  libstd relies on this in vec::IntoIter::next.\n-                    // Also see the write_bytes intrinsic.\n-                    let elem_align = elem_layout.align;\n-                    let src = self.read_scalar(args[0])?.not_undef()?;\n-                    let dest = self.read_scalar(args[1])?.not_undef()?;\n-                    self.memory.copy(\n-                        src,\n-                        elem_align,\n-                        dest,\n-                        elem_align,\n-                        Size::from_bytes(count * elem_size),\n-                        intrinsic_name.ends_with(\"_nonoverlapping\"),\n-                    )?;\n-                }\n+                let elem_align = elem_layout.align;\n+                let src = self.read_scalar(args[0])?.not_undef()?;\n+                let dest = self.read_scalar(args[1])?.not_undef()?;\n+                self.memory.copy(\n+                    src,\n+                    elem_align,\n+                    dest,\n+                    elem_align,\n+                    Size::from_bytes(count * elem_size),\n+                    intrinsic_name.ends_with(\"_nonoverlapping\"),\n+                )?;\n             }\n \n             \"discriminant_value\" => {\n@@ -563,12 +559,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 let val_byte = self.read_scalar(args[1])?.to_u8()?;\n                 let ptr = self.read_scalar(args[0])?.not_undef()?;\n                 let count = self.read_scalar(args[2])?.to_usize(&self)?;\n-                if count > 0 {\n-                    // HashMap relies on write_bytes on a NULL ptr with count == 0 to work\n-                    // TODO: Should we, at least, validate the alignment? (Also see the copy intrinsic)\n-                    self.memory.check_align(ptr, ty_layout.align)?;\n-                    self.memory.write_repeat(ptr, val_byte, ty_layout.size * count)?;\n-                }\n+                self.memory.check_align(ptr, ty_layout.align)?;\n+                self.memory.write_repeat(ptr, val_byte, ty_layout.size * count)?;\n             }\n \n             name => return err!(Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),"}]}