{"sha": "0a71b3880397b89b04e2a4b25b0528df41d39c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNzFiMzg4MDM5N2I4OWIwNGUyYTRiMjViMDUyOGRmNDFkMzljNzA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-18T23:06:41Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:33Z"}, "message": "Remove llretslotptr from FunctionContext", "tree": {"sha": "43566a63036927c5a1f2875563ab4636811427e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43566a63036927c5a1f2875563ab4636811427e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a71b3880397b89b04e2a4b25b0528df41d39c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a71b3880397b89b04e2a4b25b0528df41d39c70", "html_url": "https://github.com/rust-lang/rust/commit/0a71b3880397b89b04e2a4b25b0528df41d39c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a71b3880397b89b04e2a4b25b0528df41d39c70/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10695f161fade16829f9fa96f48465b123c133e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10695f161fade16829f9fa96f48465b123c133e", "html_url": "https://github.com/rust-lang/rust/commit/e10695f161fade16829f9fa96f48465b123c133e"}], "stats": {"total": 43, "additions": 8, "deletions": 35}, "files": [{"sha": "7abf2bb3151924cb7b837dddb027e826ad173db7", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=0a71b3880397b89b04e2a4b25b0528df41d39c70", "patch": "@@ -598,7 +598,7 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n \n     let fn_ty = FnType::new(ccx, abi, &sig, &[]);\n \n-    let fcx = FunctionContext::new(ccx, lldecl, fn_ty, Some((instance, &sig, abi)), true);\n+    let fcx = FunctionContext::new(ccx, lldecl, fn_ty);\n \n     let mir = ccx.tcx().item_mir(instance.def);\n     mir::trans_mir(&fcx, &mir, instance, &sig, abi);\n@@ -618,7 +618,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&ctor_ty.fn_sig());\n     let fn_ty = FnType::new(ccx, Abi::Rust, &sig, &[]);\n \n-    let fcx = FunctionContext::new(ccx, llfndecl, fn_ty, None, false);\n+    let fcx = FunctionContext::new(ccx, llfndecl, fn_ty);\n     let bcx = fcx.get_entry_block();\n     if !fcx.fn_ty.ret.is_ignore() {\n         // But if there are no nested returns, we skip the indirection"}, {"sha": "892b402bf100974f81925ef38f3d861d10bed495", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=0a71b3880397b89b04e2a4b25b0528df41d39c70", "patch": "@@ -328,7 +328,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let lloncefn = declare::define_internal_fn(ccx, &function_name, llonce_fn_ty);\n     attributes::set_frame_pointer_elimination(ccx, lloncefn);\n \n-    let fcx = FunctionContext::new(ccx, lloncefn, fn_ty, None, false);\n+    let fcx = FunctionContext::new(ccx, lloncefn, fn_ty);\n     let mut bcx = fcx.get_entry_block();\n \n     // the first argument (`self`) will be the (by value) closure env.\n@@ -499,7 +499,7 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n     let llfn = declare::define_internal_fn(ccx, &function_name, tuple_fn_ty);\n     attributes::set_frame_pointer_elimination(ccx, llfn);\n     //\n-    let fcx = FunctionContext::new(ccx, llfn, fn_ty, None, false);\n+    let fcx = FunctionContext::new(ccx, llfn, fn_ty);\n     let bcx = fcx.get_entry_block();\n \n     let llargs = get_params(fcx.llfn);"}, {"sha": "b7f2fabf184da3ff4bae2a11aa1f55e7babd9d78", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=0a71b3880397b89b04e2a4b25b0528df41d39c70", "patch": "@@ -15,8 +15,7 @@\n use session::Session;\n use llvm;\n use llvm::{ValueRef, BasicBlockRef, ContextRef, TypeKind};\n-use llvm::{True, False, Bool, OperandBundleDef, get_param};\n-use monomorphize::Instance;\n+use llvm::{True, False, Bool, OperandBundleDef};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n@@ -230,12 +229,6 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // section of the executable we're generating.\n     pub llfn: ValueRef,\n \n-    // A pointer to where to store the return value. If the return type is\n-    // immediate, this points to an alloca in the function. Otherwise, it's a\n-    // pointer to the hidden first parameter of the function. After function\n-    // construction, this should always be Some.\n-    pub llretslotptr: Option<ValueRef>,\n-\n     // These pub elements: \"hoisted basic blocks\" containing\n     // administrative activities that have to happen in only one place in\n     // the function, due to LLVM's quirks.\n@@ -259,11 +252,9 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         ccx: &'a CrateContext<'a, 'tcx>,\n         llfndecl: ValueRef,\n         fn_ty: FnType,\n-        skip_retptr: bool,\n     ) -> FunctionContext<'a, 'tcx> {\n         let mut fcx = FunctionContext {\n             llfn: llfndecl,\n-            llretslotptr: None,\n             alloca_insert_pt: None,\n             fn_ty: fn_ty,\n             ccx: ccx,\n@@ -281,24 +272,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         // This is later removed in the drop of FunctionContext.\n         fcx.alloca_insert_pt = Some(val);\n \n-        // We normally allocate the llretslotptr, unless we\n-        // have been instructed to skip it for immediate return\n-        // values, or there is nothing to return at all.\n-        if !fcx.fn_ty.ret.is_ignore() && !skip_retptr {\n-            // But if there are no nested returns, we skip the indirection\n-            // and have a single retslot\n-            let slot = if fcx.fn_ty.ret.is_indirect() {\n-                get_param(fcx.llfn, 0)\n-            } else {\n-                // We create an alloca to hold a pointer of type `ret.original_ty`\n-                // which will hold the pointer to the right alloca which has the\n-                // final ret value\n-                fcx.alloca(fcx.fn_ty.ret.memory_ty(ccx), \"sret_slot\")\n-            };\n-\n-            fcx.llretslotptr = Some(slot);\n-        }\n-\n         fcx\n     }\n "}, {"sha": "262a958347d54025fc1c9b7782b115b972f3628d", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=0a71b3880397b89b04e2a4b25b0528df41d39c70", "patch": "@@ -195,7 +195,7 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKi\n     assert_eq!(g.ty(), get_drop_glue_type(ccx.shared(), g.ty()));\n     let (llfn, fn_ty) = ccx.drop_glues().borrow().get(&g).unwrap().clone();\n \n-    let fcx = FunctionContext::new(ccx, llfn, fn_ty, None, false);\n+    let fcx = FunctionContext::new(ccx, llfn, fn_ty);\n     let bcx = fcx.get_entry_block();\n \n     ccx.stats().n_glues_created.set(ccx.stats().n_glues_created.get() + 1);"}, {"sha": "30f3e549e78c2d4ca460595c318b336e6eaaf774", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=0a71b3880397b89b04e2a4b25b0528df41d39c70", "patch": "@@ -893,7 +893,7 @@ fn gen_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n         sig: ty::Binder(sig)\n     }));\n     let llfn = declare::define_internal_fn(ccx, name, rust_fn_ty);\n-    let fcx = FunctionContext::new(ccx, llfn, fn_ty, None, true);\n+    let fcx = FunctionContext::new(ccx, llfn, fn_ty);\n     trans(fcx.get_entry_block());\n     llfn\n }"}, {"sha": "b9a6491f52f3f5098bc397469255a09b1fa05a7d", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a71b3880397b89b04e2a4b25b0528df41d39c70/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=0a71b3880397b89b04e2a4b25b0528df41d39c70", "patch": "@@ -81,7 +81,7 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     let llfn = declare::define_internal_fn(ccx, &function_name, callee.ty);\n     attributes::set_frame_pointer_elimination(ccx, llfn);\n \n-    let fcx = FunctionContext::new(ccx, llfn, fn_ty, None, false);\n+    let fcx = FunctionContext::new(ccx, llfn, fn_ty);\n     let bcx = fcx.get_entry_block();\n \n     let llargs = get_params(fcx.llfn);"}]}