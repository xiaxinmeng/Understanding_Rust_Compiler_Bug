{"sha": "99603e99cc1ab0260c5bdd4e752e876af7c390c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NjAzZTk5Y2MxYWIwMjYwYzViZGQ0ZTc1MmU4NzZhZjdjMzkwYzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T05:10:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T05:10:04Z"}, "message": "Rollup merge of #65252 - petrochenkov:deriveholders2, r=matthewjasper\n\nexpand: Simplify expansion of derives\n\nAnd make it more uniform with other macros.\nThis is done by merging placeholders for future derives' outputs into the derive container's output fragment early (addressing FIXMEs from https://github.com/rust-lang/rust/pull/63667).\n\nAlso, macros with names starting with `_` are no longer reported as unused, in accordance with the usual behavior of `unused` lints.\n\nr? @matthewjasper or @mark-i-m", "tree": {"sha": "b5cc67768660f91b5a934dbf5a309a153f348ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cc67768660f91b5a934dbf5a309a153f348ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99603e99cc1ab0260c5bdd4e752e876af7c390c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqpqsCRBK7hj4Ov3rIwAAdHIIAKNPDdHJ5kqk6dR5sTuUh+uR\nuFcujs+tQT6dyInMDLPVe64kekjc+Zmg7k+ubJWOfULhCqhvo6o1IrUtxQ5pQDgz\nqSiHW6Qu8t2nEgzo1EkE1w81CGHThH5mwhLqeNt7ZtYIo4bmNPMqdpGlgqp3cNzf\n5PNxg/6MrQu8TaA/7wi1rTIvBlGu/zl6QYdRiqD19HC5af8nrirxR1RGOTtBEhVa\nr5Yo530vnAp+fiSQFnFHpZr8ChfRSWR4LlYuUErf11u2PA7lxHNu1b054xlDHTnL\nEPlJurXs56CgCJw7me0d94qHbxTqiiKlV9HQF525QOzPShdlIwbOZkNoTp3iVII=\n=YjQA\n-----END PGP SIGNATURE-----\n", "payload": "tree b5cc67768660f91b5a934dbf5a309a153f348ada\nparent beec0a5db4ec2a103ad4374788ce05bd4e6b0d82\nparent 7f89f04b41d4d1de85df2fd3ede61e4fc97d9e69\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571461804 +0200\ncommitter GitHub <noreply@github.com> 1571461804 +0200\n\nRollup merge of #65252 - petrochenkov:deriveholders2, r=matthewjasper\n\nexpand: Simplify expansion of derives\n\nAnd make it more uniform with other macros.\nThis is done by merging placeholders for future derives' outputs into the derive container's output fragment early (addressing FIXMEs from https://github.com/rust-lang/rust/pull/63667).\n\nAlso, macros with names starting with `_` are no longer reported as unused, in accordance with the usual behavior of `unused` lints.\n\nr? @matthewjasper or @mark-i-m\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99603e99cc1ab0260c5bdd4e752e876af7c390c0", "html_url": "https://github.com/rust-lang/rust/commit/99603e99cc1ab0260c5bdd4e752e876af7c390c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99603e99cc1ab0260c5bdd4e752e876af7c390c0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82", "html_url": "https://github.com/rust-lang/rust/commit/beec0a5db4ec2a103ad4374788ce05bd4e6b0d82"}, {"sha": "7f89f04b41d4d1de85df2fd3ede61e4fc97d9e69", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f89f04b41d4d1de85df2fd3ede61e4fc97d9e69", "html_url": "https://github.com/rust-lang/rust/commit/7f89f04b41d4d1de85df2fd3ede61e4fc97d9e69"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "9be339be7034f2b00d1d83823d3bc79f48f10ce9", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -90,7 +90,7 @@ impl<'a> DefCollector<'a> {\n         }\n     }\n \n-    pub fn visit_macro_invoc(&mut self, id: NodeId) {\n+    fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n }"}, {"sha": "34cdec229af4318f329225cbecce252b842a8e76", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -880,11 +880,11 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             self.tcx,\n             self.tcx.hir().local_def_id(md.hir_id)\n         ).unwrap();\n-        let mut module_id = self.tcx.hir().as_local_hir_id(macro_module_def_id).unwrap();\n-        if !self.tcx.hir().is_hir_id_module(module_id) {\n-            // `module_id` doesn't correspond to a `mod`, return early (#63164).\n-            return;\n-        }\n+        let mut module_id = match self.tcx.hir().as_local_hir_id(macro_module_def_id) {\n+            Some(module_id) if self.tcx.hir().is_hir_id_module(module_id) => module_id,\n+            // `module_id` doesn't correspond to a `mod`, return early (#63164, #65252).\n+            _ => return,\n+        };\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n         let new_level = self.update(md.hir_id, level);\n         if new_level.is_none() {"}, {"sha": "e261d3af61ff8c8372b7b464e1a65fe10ee6a5a3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -163,25 +163,15 @@ impl<'a> Resolver<'a> {\n         Some(ext)\n     }\n \n-    // FIXME: `extra_placeholders` should be included into the `fragment` as regular placeholders.\n     crate fn build_reduced_graph(\n         &mut self,\n         fragment: &AstFragment,\n-        extra_placeholders: &[NodeId],\n         parent_scope: ParentScope<'a>,\n     ) -> LegacyScope<'a> {\n         let mut def_collector = DefCollector::new(&mut self.definitions, parent_scope.expansion);\n         fragment.visit_with(&mut def_collector);\n-        for placeholder in extra_placeholders {\n-            def_collector.visit_macro_invoc(*placeholder);\n-        }\n-\n         let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n         fragment.visit_with(&mut visitor);\n-        for placeholder in extra_placeholders {\n-            visitor.parent_scope.legacy = visitor.visit_invoc(*placeholder);\n-        }\n-\n         visitor.parent_scope.legacy\n     }\n \n@@ -1064,8 +1054,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         None\n     }\n \n+    // Mark the given macro as unused unless its name starts with `_`.\n+    // Macro uses will remove items from this set, and the remaining\n+    // items will be reported as `unused_macros`.\n+    fn insert_unused_macro(&mut self, ident: Ident, node_id: NodeId, span: Span) {\n+        if !ident.as_str().starts_with(\"_\") {\n+            self.r.unused_macros.insert(node_id, span);\n+        }\n+    }\n+\n     fn define_macro(&mut self, item: &ast::Item) -> LegacyScope<'a> {\n-        let parent_scope = &self.parent_scope;\n+        let parent_scope = self.parent_scope;\n         let expansion = parent_scope.expansion;\n         let (ext, ident, span, is_legacy) = match &item.kind {\n             ItemKind::MacroDef(def) => {\n@@ -1105,7 +1104,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             (res, vis, span, expansion, IsMacroExport));\n             } else {\n                 self.r.check_reserved_macro_name(ident, res);\n-                self.r.unused_macros.insert(item.id, span);\n+                self.insert_unused_macro(ident, item.id, span);\n             }\n             LegacyScope::Binding(self.r.arenas.alloc_legacy_binding(LegacyBinding {\n                 parent_legacy_scope: parent_scope.legacy, binding, ident\n@@ -1114,7 +1113,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let module = parent_scope.module;\n             let vis = self.resolve_visibility(&item.vis);\n             if vis != ty::Visibility::Public {\n-                self.r.unused_macros.insert(item.id, span);\n+                self.insert_unused_macro(ident, item.id, span);\n             }\n             self.r.define(module, ident, MacroNS, (res, vis, span, expansion));\n             self.parent_scope.legacy"}, {"sha": "94fe0cc57403e7a376a5d66384839e1a484b529e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -108,15 +108,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n         });\n     }\n \n-    // FIXME: `extra_placeholders` should be included into the `fragment` as regular placeholders.\n-    fn visit_ast_fragment_with_placeholders(\n-        &mut self, expansion: ExpnId, fragment: &AstFragment, extra_placeholders: &[NodeId]\n-    ) {\n+    fn visit_ast_fragment_with_placeholders(&mut self, expansion: ExpnId, fragment: &AstFragment) {\n         // Integrate the new AST fragment into all the definition and module structures.\n         // We are inside the `expansion` now, but other parent scope components are still the same.\n         let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };\n-        let output_legacy_scope =\n-            self.build_reduced_graph(fragment, extra_placeholders, parent_scope);\n+        let output_legacy_scope = self.build_reduced_graph(fragment, parent_scope);\n         self.output_legacy_scopes.insert(expansion, output_legacy_scope);\n \n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);"}, {"sha": "c222e7357ac7ed39a1ea810a602547f3dc6ea8ff", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -851,8 +851,7 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> NodeId;\n \n     fn resolve_dollar_crates(&mut self);\n-    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment,\n-                                            extra_placeholders: &[NodeId]);\n+    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n     fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension);\n \n     fn expansion_for_ast_pass("}, {"sha": "f03d464eafb907fd98964b5636892eeb8e6cb938", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -26,7 +26,6 @@ use errors::{Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, DUMMY_SP, FileName};\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n use std::{iter, mem, slice};\n@@ -75,6 +74,22 @@ macro_rules! ast_fragments {\n         }\n \n         impl AstFragment {\n+            pub fn add_placeholders(&mut self, placeholders: &[NodeId]) {\n+                if placeholders.is_empty() {\n+                    return;\n+                }\n+                match self {\n+                    $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {\n+                        // We are repeating through arguments with `many`, to do that we have to\n+                        // mention some macro variable from those arguments even if it's not used.\n+                        #[cfg_attr(bootstrap, allow(unused_macros))]\n+                        macro _repeating($flat_map_ast_elt) {}\n+                        placeholder(AstFragmentKind::$Kind, *id).$make_ast()\n+                    })),)?)*\n+                    _ => panic!(\"unexpected AST fragment kind\")\n+                }\n+            }\n+\n             pub fn make_opt_expr(self) -> Option<P<ast::Expr>> {\n                 match self {\n                     AstFragment::OptExpr(expr) => expr,\n@@ -342,7 +357,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Unresolved macros produce dummy outputs as a recovery measure.\n         invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n-        let mut all_derive_placeholders: FxHashMap<ExpnId, Vec<_>> = FxHashMap::default();\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {\n@@ -420,9 +434,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         self.cx.resolver.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n                     }\n \n-                    let derive_placeholders =\n-                        all_derive_placeholders.entry(invoc.expansion_data.id).or_default();\n-                    derive_placeholders.reserve(derives.len());\n+                    let mut derive_placeholders = Vec::with_capacity(derives.len());\n                     invocations.reserve(derives.len());\n                     for path in derives {\n                         let expn_id = ExpnId::fresh(None);\n@@ -438,7 +450,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n                     let fragment = invoc.fragment_kind\n                         .expect_from_annotatables(::std::iter::once(item));\n-                    self.collect_invocations(fragment, derive_placeholders)\n+                    self.collect_invocations(fragment, &derive_placeholders)\n                 }\n             };\n \n@@ -457,10 +469,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {\n-                let derive_placeholders =\n-                    all_derive_placeholders.remove(&expn_id).unwrap_or_else(Vec::new);\n                 placeholder_expander.add(NodeId::placeholder_from_expn_id(expn_id),\n-                                         expanded_fragment, derive_placeholders);\n+                                         expanded_fragment);\n             }\n         }\n         fragment_with_placeholders.mut_visit_with(&mut placeholder_expander);\n@@ -493,13 +503,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 monotonic: self.monotonic,\n             };\n             fragment.mut_visit_with(&mut collector);\n+            fragment.add_placeholders(extra_placeholders);\n             collector.invocations\n         };\n \n-        // FIXME: Merge `extra_placeholders` into the `fragment` as regular placeholders.\n         if self.monotonic {\n             self.cx.resolver.visit_ast_fragment_with_placeholders(\n-                self.cx.current_expansion.id, &fragment, extra_placeholders);\n+                self.cx.current_expansion.id, &fragment\n+            );\n         }\n \n         (fragment, invocations)"}, {"sha": "db292b619be39de88c7a8c31732e1b9e05c06247", "filename": "src/libsyntax_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Flib.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(decl_macro)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]"}, {"sha": "e595888dae7d16802f2d10f66f3dd4890c72ff15", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -1,7 +1,7 @@\n use crate::base::ExtCtxt;\n use crate::expand::{AstFragment, AstFragmentKind};\n \n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax::source_map::{DUMMY_SP, dummy_spanned};\n use syntax::tokenstream::TokenStream;\n use syntax::mut_visit::*;\n@@ -171,17 +171,8 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment, placeholders: Vec<NodeId>) {\n+    pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment) {\n         fragment.mut_visit_with(self);\n-        if let AstFragment::Items(mut items) = fragment {\n-            for placeholder in placeholders {\n-                match self.remove(placeholder) {\n-                    AstFragment::Items(derived_items) => items.extend(derived_items),\n-                    _ => unreachable!(),\n-                }\n-            }\n-            fragment = AstFragment::Items(items);\n-        }\n         self.expanded_fragments.insert(id, fragment);\n     }\n "}, {"sha": "298ff601de89f3f763fe9a86d6621d56a0f37915", "filename": "src/test/rustdoc/macro-in-closure.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99603e99cc1ab0260c5bdd4e752e876af7c390c0/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs?ref=99603e99cc1ab0260c5bdd4e752e876af7c390c0", "patch": "@@ -0,0 +1,9 @@\n+// Regression issue for rustdoc ICE encountered in PR #65252.\n+\n+#![feature(decl_macro)]\n+\n+fn main() {\n+    || {\n+        macro m() {}\n+    };\n+}"}]}