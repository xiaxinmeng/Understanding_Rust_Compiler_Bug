{"sha": "99f4458a8c1bc6c013268b752074516ddb186051", "node_id": "C_kwDOAAsO6NoAKDk5ZjQ0NThhOGMxYmM2YzAxMzI2OGI3NTIwNzQ1MTZkZGIxODYwNTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-15T09:57:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-15T09:57:02Z"}, "message": "Rollup merge of #91916 - steffahn:fix-typos, r=dtolnay\n\nFix a bunch of typos\n\nI hope that none of these files is not supposed to be modified.\n\nFYI, I opened separate PRs for typos in submodules, in the respective repositories\n* https://github.com/rust-lang/stdarch/pull/1267\n* https://github.com/rust-lang/backtrace-rs/pull/455", "tree": {"sha": "0926e90321772f69e5ff41422c0ae395cfa11689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0926e90321772f69e5ff41422c0ae395cfa11689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f4458a8c1bc6c013268b752074516ddb186051", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhubvuCRBK7hj4Ov3rIwAAdewIAJb4djEc1LUWGWyQvcYEmtC/\n1JPtS5Zkk71DFF2cZdZq9w167RabtRME9W8taGmyYQeWqgzRWgsmOTmZ50S6X04S\nf3M/6JJ++Piy1/ZC/ogEasHqVX2KSn8cMFE6LZqxS+4vxoh7egKUd3DNsa6zle3/\nFI7nDIdw+jKHjI8uUy4xD5zWy3NBLiQsATQaK519ZkgQYNjNRe8d3merZ7S3xRkj\n5FkzuTgDWkFZfOXFUMij45lAD1HpcKazTxNAJIrXQPmdHNmYzGG7fa4x0bUO2ICN\nc4S8LwDb7KsgEhI9B+plF7X7UPOk6qb6eo+TIzSAXsQYcxU2IIuZzCWLJq6WCfs=\n=Kf9Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 0926e90321772f69e5ff41422c0ae395cfa11689\nparent 05b65adfb60760b9121a47d57ed888d6b83adf0c\nparent a957cefda63c76c7a91a705f683be45c684d4303\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639562222 +0100\ncommitter GitHub <noreply@github.com> 1639562222 +0100\n\nRollup merge of #91916 - steffahn:fix-typos, r=dtolnay\n\nFix a bunch of typos\n\nI hope that none of these files is not supposed to be modified.\n\nFYI, I opened separate PRs for typos in submodules, in the respective repositories\n* https://github.com/rust-lang/stdarch/pull/1267\n* https://github.com/rust-lang/backtrace-rs/pull/455\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f4458a8c1bc6c013268b752074516ddb186051", "html_url": "https://github.com/rust-lang/rust/commit/99f4458a8c1bc6c013268b752074516ddb186051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f4458a8c1bc6c013268b752074516ddb186051/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b65adfb60760b9121a47d57ed888d6b83adf0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b65adfb60760b9121a47d57ed888d6b83adf0c", "html_url": "https://github.com/rust-lang/rust/commit/05b65adfb60760b9121a47d57ed888d6b83adf0c"}, {"sha": "a957cefda63c76c7a91a705f683be45c684d4303", "url": "https://api.github.com/repos/rust-lang/rust/commits/a957cefda63c76c7a91a705f683be45c684d4303", "html_url": "https://github.com/rust-lang/rust/commit/a957cefda63c76c7a91a705f683be45c684d4303"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "bfe66b2687ef4d89644a76df2901784bb35a7f19", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -3,7 +3,7 @@ use std::mem::MaybeUninit;\n use std::ptr::NonNull;\n \n #[test]\n-fn unitialized_zero_size_box() {\n+fn uninitialized_zero_size_box() {\n     assert_eq!(\n         &*Box::<()>::new_uninit() as *const _,\n         NonNull::<MaybeUninit<()>>::dangling().as_ptr(),"}, {"sha": "7bd0abbad0192939be8faad7dc1c531be3ec8e72", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -162,7 +162,7 @@ fn test_join_for_different_lengths_with_long_separator() {\n }\n \n #[test]\n-fn test_join_isue_80335() {\n+fn test_join_issue_80335() {\n     use core::{borrow::Borrow, cell::Cell};\n \n     struct WeirdBorrow {"}, {"sha": "ea639268652c3e7140fb19b595abcfcbded95bf1", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -157,11 +157,11 @@ impl Layout {\n     ///\n     /// - If `T` is `Sized`, this function is always safe to call.\n     /// - If the unsized tail of `T` is:\n-    ///     - a [slice], then the length of the slice tail must be an intialized\n+    ///     - a [slice], then the length of the slice tail must be an initialized\n     ///       integer, and the size of the *entire value*\n     ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n     ///     - a [trait object], then the vtable part of the pointer must point\n-    ///       to a valid vtable for the type `T` acquired by an unsizing coersion,\n+    ///       to a valid vtable for the type `T` acquired by an unsizing coercion,\n     ///       and the size of the *entire value*\n     ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n     ///     - an (unstable) [extern type], then this function is always safe to"}, {"sha": "bc3f7167fac3a9dd4dae0c4ca02c8c9122586580", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -898,7 +898,7 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(Ref { value: unsafe { &*self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowError {\n-                // If a borrow occured, then we must already have an outstanding borrow,\n+                // If a borrow occurred, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n                 location: self.borrowed_at.get().unwrap(),\n@@ -983,7 +983,7 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowMutError {\n-                // If a borrow occured, then we must already have an outstanding borrow,\n+                // If a borrow occurred, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n                 location: self.borrowed_at.get().unwrap(),\n@@ -1104,7 +1104,7 @@ impl<T: ?Sized> RefCell<T> {\n             Ok(unsafe { &*self.value.get() })\n         } else {\n             Err(BorrowError {\n-                // If a borrow occured, then we must already have an outstanding borrow,\n+                // If a borrow occurred, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n                 location: self.borrowed_at.get().unwrap(),"}, {"sha": "f50e71da20f160d83806b9e82e67c3107e0ad1bf", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -516,7 +516,7 @@ impl<A: Debug + TrustedRandomAccessNoCoerce, B: Debug + TrustedRandomAccessNoCoe\n /// * It must also be safe to drop `self` after calling `self.__iterator_get_unchecked(idx)`.\n /// * If `T` is a subtype of `Self`, then it must be safe to coerce `self` to `T`.\n //\n-// FIXME: Clarify interaction with SourceIter/InPlaceIterable. Calling `SouceIter::as_inner`\n+// FIXME: Clarify interaction with SourceIter/InPlaceIterable. Calling `SourceIter::as_inner`\n // after `__iterator_get_unchecked` is supposed to be allowed.\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]"}, {"sha": "0ae94c05da6583c11d3df41058fa9eee57050202", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -777,7 +777,7 @@ range_exact_iter_impl! {\n     usize u8 u16\n     isize i8 i16\n \n-    // These are incorect per the reasoning above,\n+    // These are incorrect per the reasoning above,\n     // but removing them would be a breaking change as they were stabilized in Rust 1.0.0.\n     // So e.g. `(0..66_000_u32).len()` for example will compile without error or warnings\n     // on 16-bit platforms, but continue to give a wrong result.\n@@ -805,7 +805,7 @@ range_incl_exact_iter_impl! {\n     u8\n     i8\n \n-    // These are incorect per the reasoning above,\n+    // These are incorrect per the reasoning above,\n     // but removing them would be a breaking change as they were stabilized in Rust 1.26.0.\n     // So e.g. `(0..=u16::MAX).len()` for example will compile without error or warnings\n     // on 16-bit platforms, but continue to give a wrong result."}, {"sha": "405f7e7b6135daeac7cd0bc8dd85901a9b601042", "filename": "library/core/src/num/dec2flt/number.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fnumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fnumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fnumber.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -40,7 +40,7 @@ impl Number {\n             && !self.many_digits\n     }\n \n-    /// The fast path algorithmn using machine-sized integers and floats.\n+    /// The fast path algorithm using machine-sized integers and floats.\n     ///\n     /// This is extracted into a separate function so that it can be attempted before constructing\n     /// a Decimal. This only works if both the mantissa and the exponent"}, {"sha": "ed61197157bf57125815ff337c9cfbf71642ff57", "filename": "library/core/src/num/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -1,4 +1,4 @@\n-//! Shared utilties used by both float and integer formatting.\n+//! Shared utilities used by both float and integer formatting.\n #![doc(hidden)]\n #![unstable(\n     feature = \"numfmt\","}, {"sha": "176820efe398ed42adb6a0b77dfd6256d4d98e02", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -221,7 +221,7 @@ impl<'a, T> IterMut<'a, T> {\n         // the length, to also allows for the fast `ptr == end` check.\n         //\n         // See the `next_unchecked!` and `is_empty!` macros as well as the\n-        // `post_inc_start` method for more informations.\n+        // `post_inc_start` method for more information.\n         unsafe {\n             assume(!ptr.is_null());\n "}, {"sha": "4589c6c0f04a5fe836124c5db70190a0c3c8ce5b", "filename": "library/core/src/slice/rotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -104,7 +104,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n                 // - overflows cannot happen for `i` since the function's safety contract ask for\n                 //   `mid+right-1 = x+left+right` to be valid for writing\n                 // - underflows cannot happen because `i` must be bigger or equal to `left` for\n-                //   a substraction of `left` to happen.\n+                //   a subtraction of `left` to happen.\n                 //\n                 // So `x+i` is valid for reading and writing if the caller respected the contract\n                 tmp = unsafe { x.add(i).replace(tmp) };\n@@ -202,7 +202,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             loop {\n                 // SAFETY:\n                 // `left >= right` so `[mid-right, mid+right)` is valid for reading and writing\n-                // Substracting `right` from `mid` each turn is counterbalanced by the addition and\n+                // Subtracting `right` from `mid` each turn is counterbalanced by the addition and\n                 // check after it.\n                 unsafe {\n                     ptr::swap_nonoverlapping(mid.sub(right), mid, right);\n@@ -218,7 +218,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             loop {\n                 // SAFETY: `[mid-left, mid+left)` is valid for reading and writing because\n                 // `left < right` so `mid+left < mid+right`.\n-                // Adding `left` to `mid` each turn is counterbalanced by the substraction and check\n+                // Adding `left` to `mid` each turn is counterbalanced by the subtraction and check\n                 // after it.\n                 unsafe {\n                     ptr::swap_nonoverlapping(mid.sub(left), mid, left);"}, {"sha": "de6e6d52b362543d455664e25cf0c8bd58818d10", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -748,7 +748,7 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> Split<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -769,7 +769,7 @@ impl<'a, P: Pattern<'a>> Split<'a, P> {\n }\n \n impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -808,7 +808,7 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -829,7 +829,7 @@ impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n }\n \n impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -931,7 +931,7 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -952,7 +952,7 @@ impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n }\n \n impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -1236,7 +1236,7 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n impl FusedIterator for SplitWhitespace<'_> {}\n \n impl<'a> SplitWhitespace<'a> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -1292,7 +1292,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n impl<'a> SplitAsciiWhitespace<'a> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -1360,7 +1360,7 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///"}, {"sha": "fe4fef749904ea2b9cc41e21c651d53e87b70443", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -259,7 +259,7 @@ fn iterator_drops() {\n // This test does not work on targets without panic=unwind support.\n // To work around this problem, test is marked is should_panic, so it will\n // be automagically skipped on unsuitable targets, such as\n-// wasm32-unknown-unkown.\n+// wasm32-unknown-unknown.\n //\n // It means that we use panic for indicating success.\n #[test]"}, {"sha": "12f0fe9c3c3a960c70dc9994479a30e93b938841", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -49,7 +49,7 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n };\n \n struct Exception {\n-    // This is necessary because C++ code can capture our execption with\n+    // This is necessary because C++ code can capture our exception with\n     // std::exception_ptr and rethrow it multiple times, possibly even in\n     // another thread.\n     caught: AtomicBool,"}, {"sha": "2293fb6b558121c11b7f1f1ce06fb792b902bd75", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -1369,7 +1369,7 @@ fn symlink_hard_link() {\n     // \"hard_link\" should appear as a symlink.\n     assert!(check!(fs::symlink_metadata(tmpdir.join(\"hard_link\"))).file_type().is_symlink());\n \n-    // We sould be able to open \"file\" via any of the above names.\n+    // We should be able to open \"file\" via any of the above names.\n     let _ = check!(fs::File::open(tmpdir.join(\"file\")));\n     assert!(fs::File::open(tmpdir.join(\"file.renamed\")).is_err());\n     let _ = check!(fs::File::open(tmpdir.join(\"symlink\")));"}, {"sha": "ecc9e91b6bdb2c106eb565a2788e6a9392b85576", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -362,15 +362,15 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n     let start_len = buf.len();\n     let start_cap = buf.capacity();\n \n-    let mut initialized = 0; // Extra initalized bytes from previous loop iteration\n+    let mut initialized = 0; // Extra initialized bytes from previous loop iteration\n     loop {\n         if buf.len() == buf.capacity() {\n             buf.reserve(32); // buf is full, need more space\n         }\n \n         let mut read_buf = ReadBuf::uninit(buf.spare_capacity_mut());\n \n-        // SAFETY: These bytes were initalized but not filled in the previous loop\n+        // SAFETY: These bytes were initialized but not filled in the previous loop\n         unsafe {\n             read_buf.assume_init(initialized);\n         }"}, {"sha": "c072f0cafe47bedd0fa04b2a1fed8757010699e1", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -1179,7 +1179,7 @@ where\n             })\n         }) == Ok(Some(()))\n     {\n-        // Succesfully wrote to capture buffer.\n+        // Successfully wrote to capture buffer.\n         return;\n     }\n "}, {"sha": "632d4683b41595e0fdb5c8216fb694d709ab96ca", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -749,7 +749,7 @@ fn ipv4_from_constructors() {\n }\n \n #[test]\n-fn ipv6_from_contructors() {\n+fn ipv6_from_constructors() {\n     assert_eq!(Ipv6Addr::LOCALHOST, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     assert!(Ipv6Addr::LOCALHOST.is_loopback());\n     assert_eq!(Ipv6Addr::UNSPECIFIED, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));"}, {"sha": "87854fe4f297088d09e1081a9a37dd2bb0b78c9d", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -365,7 +365,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // The call to `intrinsics::r#try` is made safe by:\n     // - `do_call`, the first argument, can be called with the initial `data_ptr`.\n     // - `do_catch`, the second argument, can be called with the `data_ptr` as well.\n-    // See their safety preconditions for more informations\n+    // See their safety preconditions for more information\n     unsafe {\n         return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n             Ok(ManuallyDrop::into_inner(data.r))\n@@ -398,7 +398,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // expects normal function pointers.\n     #[inline]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n-        // SAFETY: this is the responsibilty of the caller, see above.\n+        // SAFETY: this is the responsibility of the caller, see above.\n         unsafe {\n             let data = data as *mut Data<F, R>;\n             let data = &mut (*data);\n@@ -420,7 +420,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // expects normal function pointers.\n     #[inline]\n     fn do_catch<F: FnOnce() -> R, R>(data: *mut u8, payload: *mut u8) {\n-        // SAFETY: this is the responsibilty of the caller, see above.\n+        // SAFETY: this is the responsibility of the caller, see above.\n         //\n         // When `__rustc_panic_cleaner` is correctly implemented we can rely\n         // on `obj` being the correct thing to pass to `data.p` (after wrapping"}, {"sha": "ebcc9ab26e088c27a42b7711c705dc14b7cf4e32", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -126,7 +126,7 @@ impl Thread {\n                     // In this case, `inner`'s ownership has been moved to us,\n                     // And we are responsible for dropping it. The acquire\n                     // ordering is not necessary because the parent thread made\n-                    // no memory acccess needing synchronization since the call\n+                    // no memory access needing synchronization since the call\n                     // to `acre_tsk`.\n                     // Safety: See above.\n                     let _ = unsafe { Box::from_raw(inner as *const _ as *mut ThreadInner) };\n@@ -264,7 +264,7 @@ impl Drop for Thread {\n                 // one will ever join it.\n                 // The ownership of `self.inner` is moved to the child thread.\n                 // However, the release ordering is not necessary because we\n-                // made no memory acccess needing synchronization since the call\n+                // made no memory access needing synchronization since the call\n                 // to `acre_tsk`.\n             }\n             LIFECYCLE_FINISHED => {"}, {"sha": "e85e4c5d618ced0a1e679f96cf858cefcabfff44", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -104,7 +104,7 @@ impl FdMeta {\n \n     fn potential_sendfile_source(&self) -> bool {\n         match self {\n-            // procfs erronously shows 0 length on non-empty readable files.\n+            // procfs erroneously shows 0 length on non-empty readable files.\n             // and if a file is truly empty then a `read` syscall will determine that and skip the write syscall\n             // thus there would be benefit from attempting sendfile\n             FdMeta::Metadata(meta)"}, {"sha": "ce77c210a6220c28ae2e8f22727b2adeab3c6f33", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -284,7 +284,7 @@ impl ExitStatus {\n         //\n         // The other view would be to say that the caller on Fuchsia ought to know that `into_raw`\n         // will give a raw Fuchsia status (whatever that is - I don't know, personally).  That is\n-        // not possible here becaause we must return a c_int because that's what Unix (including\n+        // not possible here because we must return a c_int because that's what Unix (including\n         // SuS and POSIX) say a wait status is, but Fuchsia apparently uses a u64, so it won't\n         // necessarily fit.\n         //"}, {"sha": "55719b87c7e0687212ba7ba314be24757402390f", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -124,7 +124,7 @@ impl<F> DlsymWeak<F> {\n         }\n     }\n \n-    // Cold because it should only happen during first-time initalization.\n+    // Cold because it should only happen during first-time initialization.\n     #[cold]\n     unsafe fn initialize(&self) -> Option<F> {\n         assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());"}, {"sha": "6dceb1689a8b7d2c97621f6038a4b076def6ec4f", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -24,31 +24,31 @@ static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling malloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.malloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling calloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.calloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling free() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.free(ptr, layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling realloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.realloc(ptr, layout.size(), layout.align(), new_size) }"}, {"sha": "3a09f0bf9bb4c3488be96f3d2bdb53e5ce931403", "filename": "library/std/src/sys/wasm/atomics/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -73,7 +73,7 @@ pub struct ReentrantMutex {\n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n-// Reentrant mutexes are similarly implemented to mutexs above except that\n+// Reentrant mutexes are similarly implemented to mutexes above except that\n // instead of \"1\" meaning unlocked we use the id of a thread to represent\n // whether it has locked a mutex. That way we have an atomic counter which\n // always holds the id of the thread that currently holds the lock (or 0 if the\n@@ -96,7 +96,7 @@ impl ReentrantMutex {\n     pub unsafe fn lock(&self) {\n         let me = thread::my_id();\n         while let Err(owner) = self._try_lock(me) {\n-            // SAFETY: the caller must gurantee that `self.ptr()` and `owner` are valid i32.\n+            // SAFETY: the caller must guarantee that `self.ptr()` and `owner` are valid i32.\n             let val = unsafe { wasm32::memory_atomic_wait32(self.ptr(), owner as i32, -1) };\n             debug_assert!(val == 0 || val == 1);\n         }\n@@ -136,7 +136,7 @@ impl ReentrantMutex {\n         match *self.recursions.get() {\n             0 => {\n                 self.owner.swap(0, SeqCst);\n-                // SAFETY: the caller must gurantee that `self.ptr()` is valid i32.\n+                // SAFETY: the caller must guarantee that `self.ptr()` is valid i32.\n                 unsafe {\n                     wasm32::memory_atomic_notify(self.ptr() as *mut i32, 1);\n                 } // wake up one waiter, if any"}, {"sha": "eb0925b3fda7d66a87f02c5df563fabd09d2269e", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -124,7 +124,7 @@ fn write(\n     //\n     // If the data is not valid UTF-8 we write out as many bytes as are valid.\n     // If the first byte is invalid it is either first byte of a multi-byte sequence but the\n-    // provided byte slice is too short or it is the first byte of an invalide multi-byte sequence.\n+    // provided byte slice is too short or it is the first byte of an invalid multi-byte sequence.\n     let len = cmp::min(data.len(), MAX_BUFFER_SIZE / 2);\n     let utf8 = match str::from_utf8(&data[..len]) {\n         Ok(s) => s,"}, {"sha": "5a8011a95880814497c589257df29f11c8c5195e", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -22,7 +22,7 @@\n //\n // Unlike WaitOnAddress, NtWaitForKeyedEvent/NtReleaseKeyedEvent operate on a\n // HANDLE (created with NtCreateKeyedEvent). This means that we can be sure\n-// a succesfully awoken park() was awoken by unpark() and not a\n+// a successfully awoken park() was awoken by unpark() and not a\n // NtReleaseKeyedEvent call from some other code, as these events are not only\n // matched by the key (address of the parker (state)), but also by this HANDLE.\n // We lazily allocate this handle the first time it is needed."}, {"sha": "d99e901bb5f83988bb3c55e3d1c442b3edb9286b", "filename": "library/std/src/sys_common/thread_parker/generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -1,4 +1,4 @@\n-//! Parker implementaiton based on a Mutex and Condvar.\n+//! Parker implementation based on a Mutex and Condvar.\n \n use crate::sync::atomic::AtomicUsize;\n use crate::sync::atomic::Ordering::SeqCst;\n@@ -20,7 +20,7 @@ impl Parker {\n         Parker { state: AtomicUsize::new(EMPTY), lock: Mutex::new(()), cvar: Condvar::new() }\n     }\n \n-    // This implementaiton doesn't require `unsafe`, but other implementations\n+    // This implementation doesn't require `unsafe`, but other implementations\n     // may assume this is only called by the thread that owns the Parker.\n     pub unsafe fn park(&self) {\n         // If we were previously notified then we consume this notification and\n@@ -55,7 +55,7 @@ impl Parker {\n         }\n     }\n \n-    // This implementaiton doesn't require `unsafe`, but other implementations\n+    // This implementation doesn't require `unsafe`, but other implementations\n     // may assume this is only called by the thread that owns the Parker.\n     pub unsafe fn park_timeout(&self, dur: Duration) {\n         // Like `park` above we have a fast path for an already-notified thread, and"}, {"sha": "1d2f6e976800b88b67e603630e803adc3a997fd0", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -582,7 +582,7 @@ pub mod fast {\n             Key { inner: LazyKeyInner::new(), dtor_state: Cell::new(DtorState::Unregistered) }\n         }\n \n-        // note that this is just a publically-callable function only for the\n+        // note that this is just a publicly-callable function only for the\n         // const-initialized form of thread locals, basically a way to call the\n         // free `register_dtor` function defined elsewhere in libstd.\n         pub unsafe fn register_dtor(a: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n@@ -593,7 +593,7 @@ pub mod fast {\n \n         pub unsafe fn get<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n             // SAFETY: See the definitions of `LazyKeyInner::get` and\n-            // `try_initialize` for more informations.\n+            // `try_initialize` for more information.\n             //\n             // The caller must ensure no mutable references are ever active to\n             // the inner cell or the inner T when this is called."}, {"sha": "86cc93c44537663d08e1591e330c3a696176f3e1", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f4458a8c1bc6c013268b752074516ddb186051/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=99f4458a8c1bc6c013268b752074516ddb186051", "patch": "@@ -273,7 +273,7 @@ impl Instant {\n         // While issues have been seen on arm64 platforms the Arm architecture\n         // requires that the counter monotonically increases and that it must\n         // provide a uniform view of system time (e.g. it must not be possible\n-        // for a core to recieve a message from another core with a time stamp\n+        // for a core to receive a message from another core with a time stamp\n         // and observe time going backwards (ARM DDI 0487G.b D11.1.2). While\n         // there have been a few 64bit SoCs that have bugs which cause time to\n         // not monoticially increase, these have been fixed in the Linux kernel"}]}