{"sha": "795b2afd206e51206e3ff86b13916362cf0e6371", "node_id": "C_kwDOAAsO6NoAKDc5NWIyYWZkMjA2ZTUxMjA2ZTNmZjg2YjEzOTE2MzYyY2YwZTYzNzE", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-03T13:18:37Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-03T14:28:35Z"}, "message": "fix #105069, Add AmbiguityError for inconsistent resolution for an import", "tree": {"sha": "79c0a595c0362e05a1de00fc7a7e57e7066feef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c0a595c0362e05a1de00fc7a7e57e7066feef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795b2afd206e51206e3ff86b13916362cf0e6371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795b2afd206e51206e3ff86b13916362cf0e6371", "html_url": "https://github.com/rust-lang/rust/commit/795b2afd206e51206e3ff86b13916362cf0e6371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795b2afd206e51206e3ff86b13916362cf0e6371/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703d95e183fbb678249d8f61cabc732e46884e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/703d95e183fbb678249d8f61cabc732e46884e00", "html_url": "https://github.com/rust-lang/rust/commit/703d95e183fbb678249d8f61cabc732e46884e00"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "b100a8c17cf398ba08c82d0fc8a226e93c82dd85", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/795b2afd206e51206e3ff86b13916362cf0e6371/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795b2afd206e51206e3ff86b13916362cf0e6371/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=795b2afd206e51206e3ff86b13916362cf0e6371", "patch": "@@ -4,7 +4,10 @@ use crate::diagnostics::{import_candidates, Suggestion};\n use crate::Determinacy::{self, *};\n use crate::Namespace::*;\n use crate::{module_to_string, names_to_string, ImportSuggestion};\n-use crate::{AmbiguityKind, BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n+use crate::{\n+    AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, BindingKey, ModuleKind, ResolutionError,\n+    Resolver, Segment,\n+};\n use crate::{Finalize, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet};\n use crate::{NameBinding, NameBindingKind, PathResult};\n \n@@ -791,7 +794,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 match binding {\n                     Ok(binding) => {\n                         // Consistency checks, analogous to `finalize_macro_resolutions`.\n-                        let initial_res = source_bindings[ns].get().map(|initial_binding| {\n+                        let initial_binding = source_bindings[ns].get().map(|initial_binding| {\n                             all_ns_err = false;\n                             if let Some(target_binding) = target_bindings[ns].get() {\n                                 if target.name == kw::Underscore\n@@ -805,12 +808,20 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                     );\n                                 }\n                             }\n-                            initial_binding.res()\n+                            initial_binding\n                         });\n                         let res = binding.res();\n-                        if let Ok(initial_res) = initial_res {\n+                        if let Ok(initial_binding) = initial_binding {\n+                            let initial_res = initial_binding.res();\n                             if res != initial_res && this.ambiguity_errors.is_empty() {\n-                                span_bug!(import.span, \"inconsistent resolution for an import\");\n+                                this.ambiguity_errors.push(AmbiguityError {\n+                                    kind: AmbiguityKind::Import,\n+                                    ident,\n+                                    b1: initial_binding,\n+                                    b2: binding,\n+                                    misc1: AmbiguityErrorMisc::None,\n+                                    misc2: AmbiguityErrorMisc::None,\n+                                });\n                             }\n                         } else if res != Res::Err\n                             && this.ambiguity_errors.is_empty()"}, {"sha": "73455cf7711c6b623c5c4c316755629903698852", "filename": "src/test/ui/resolve/issue-105069.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/795b2afd206e51206e3ff86b13916362cf0e6371/src%2Ftest%2Fui%2Fresolve%2Fissue-105069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795b2afd206e51206e3ff86b13916362cf0e6371/src%2Ftest%2Fui%2Fresolve%2Fissue-105069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-105069.rs?ref=795b2afd206e51206e3ff86b13916362cf0e6371", "patch": "@@ -0,0 +1,11 @@\n+use self::A::*;\n+use V; //~ ERROR `V` is ambiguous\n+use self::B::*;\n+enum A {\n+    V\n+}\n+enum B {\n+    V\n+}\n+\n+fn main() {}"}, {"sha": "1e6c9c6e2dc34fa9b331b60a763f55dc119dc4ed", "filename": "src/test/ui/resolve/issue-105069.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/795b2afd206e51206e3ff86b13916362cf0e6371/src%2Ftest%2Fui%2Fresolve%2Fissue-105069.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/795b2afd206e51206e3ff86b13916362cf0e6371/src%2Ftest%2Fui%2Fresolve%2Fissue-105069.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-105069.stderr?ref=795b2afd206e51206e3ff86b13916362cf0e6371", "patch": "@@ -0,0 +1,21 @@\n+error[E0659]: `V` is ambiguous\n+  --> $DIR/issue-105069.rs:2:5\n+   |\n+LL | use V;\n+   |     ^ ambiguous name\n+   |\n+   = note: ambiguous because of multiple potential import sources\n+note: `V` could refer to the variant imported here\n+  --> $DIR/issue-105069.rs:1:5\n+   |\n+LL | use self::A::*;\n+   |     ^^^^^^^^^^\n+note: `V` could also refer to the variant imported here\n+  --> $DIR/issue-105069.rs:3:5\n+   |\n+LL | use self::B::*;\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}]}