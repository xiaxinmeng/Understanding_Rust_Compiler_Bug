{"sha": "246a6d19c9844744737876fc55701395ae535579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NmE2ZDE5Yzk4NDQ3NDQ3Mzc4NzZmYzU1NzAxMzk1YWU1MzU1Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-23T19:18:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-23T19:18:15Z"}, "message": "Auto merge of #45881 - Centril:box-leak, r=alexcrichton\n\nAdd Box::leak<'a>(Box<T>) -> &'a mut T where T: 'a\n\nAdds:\n\n```rust\nimpl<T: ?Sized> Box<T> {\n    pub fn leak<'a>(b: Box<T>) -> &'a mut T where T: 'a {\n        unsafe { &mut *Box::into_raw(b) }\n    }\n}\n```\n\nwhich is useful for when you just want to put some stuff on the heap and then have a reference to it for the remainder of the program.\n\nr? @sfackler\ncc @durka", "tree": {"sha": "9ef5b0465b144f07a2cbbb4af01214025d387641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef5b0465b144f07a2cbbb4af01214025d387641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/246a6d19c9844744737876fc55701395ae535579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/246a6d19c9844744737876fc55701395ae535579", "html_url": "https://github.com/rust-lang/rust/commit/246a6d19c9844744737876fc55701395ae535579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/246a6d19c9844744737876fc55701395ae535579/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0916bbc00027626e4ae6027ee08a8dd46036e8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0916bbc00027626e4ae6027ee08a8dd46036e8b2", "html_url": "https://github.com/rust-lang/rust/commit/0916bbc00027626e4ae6027ee08a8dd46036e8b2"}, {"sha": "bc18d99232b4d049e24d64ae228f0ee0c01fcebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc18d99232b4d049e24d64ae228f0ee0c01fcebd", "html_url": "https://github.com/rust-lang/rust/commit/bc18d99232b4d049e24d64ae228f0ee0c01fcebd"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "0343787d0c04ec9e8c31085c1aaf12e156354d68", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/246a6d19c9844744737876fc55701395ae535579/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246a6d19c9844744737876fc55701395ae535579/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=246a6d19c9844744737876fc55701395ae535579", "patch": "@@ -374,6 +374,59 @@ impl<T: ?Sized> Box<T> {\n             unique\n         };\n     }\n+\n+    /// Consumes and leaks the `Box`, returning a mutable reference,\n+    /// `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.\n+    ///\n+    /// This function is mainly useful for data that lives for the remainder of\n+    /// the program's life. Dropping the returned reference will cause a memory\n+    /// leak. If this is not acceptable, the reference should first be wrapped\n+    /// with the [`Box::from_raw`] function producing a `Box`. This `Box` can\n+    /// then be dropped which will properly destroy `T` and release the\n+    /// allocated memory.\n+    ///\n+    /// Note: this is an associated function, which means that you have\n+    /// to call it as `Box::leak(b)` instead of `b.leak()`. This\n+    /// is so that there is no conflict with a method on the inner type.\n+    ///\n+    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n+    ///\n+    /// # Examples\n+    ///\n+    /// Simple usage:\n+    ///\n+    /// ```\n+    /// #![feature(box_leak)]\n+    ///\n+    /// fn main() {\n+    ///     let x = Box::new(41);\n+    ///     let static_ref: &'static mut usize = Box::leak(x);\n+    ///     *static_ref += 1;\n+    ///     assert_eq!(*static_ref, 42);\n+    /// }\n+    /// ```\n+    ///\n+    /// Unsized data:\n+    ///\n+    /// ```\n+    /// #![feature(box_leak)]\n+    ///\n+    /// fn main() {\n+    ///     let x = vec![1, 2, 3].into_boxed_slice();\n+    ///     let static_ref = Box::leak(x);\n+    ///     static_ref[0] = 4;\n+    ///     assert_eq!(*static_ref, [4, 2, 3]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"box_leak\", reason = \"needs an FCP to stabilize\",\n+               issue = \"46179\")]\n+    #[inline]\n+    pub fn leak<'a>(b: Box<T>) -> &'a mut T\n+    where\n+        T: 'a // Technically not needed, but kept to be explicit.\n+    {\n+        unsafe { &mut *Box::into_raw(b) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}