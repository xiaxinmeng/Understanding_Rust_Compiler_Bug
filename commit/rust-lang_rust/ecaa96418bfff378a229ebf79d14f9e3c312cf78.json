{"sha": "ecaa96418bfff378a229ebf79d14f9e3c312cf78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYWE5NjQxOGJmZmYzNzhhMjI5ZWJmNzlkMTRmOWUzYzMxMmNmNzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-01T20:24:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-01T20:40:07Z"}, "message": "`Span` cannot represent `span.hi < span.lo`\n\nSo we can remove the corresponding checks from various code", "tree": {"sha": "9fe1462a7c81529be50305bcb2040f1b28bb3729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fe1462a7c81529be50305bcb2040f1b28bb3729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecaa96418bfff378a229ebf79d14f9e3c312cf78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecaa96418bfff378a229ebf79d14f9e3c312cf78", "html_url": "https://github.com/rust-lang/rust/commit/ecaa96418bfff378a229ebf79d14f9e3c312cf78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecaa96418bfff378a229ebf79d14f9e3c312cf78/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01e5d91482e3e8fb9f55efabab760db2d50ddaff", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e5d91482e3e8fb9f55efabab760db2d50ddaff", "html_url": "https://github.com/rust-lang/rust/commit/01e5d91482e3e8fb9f55efabab760db2d50ddaff"}], "stats": {"total": 31, "additions": 6, "deletions": 25}, "files": [{"sha": "a5b131520c243a7d5250b7eff65cdc95cbc742d2", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=ecaa96418bfff378a229ebf79d14f9e3c312cf78", "patch": "@@ -309,11 +309,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n         // position that belongs to it, as opposed to hashing the first\n         // position past it.\n         let span = self.data();\n-\n-        if span.hi < span.lo {\n-            return std_hash::Hash::hash(&TAG_INVALID_SPAN, hasher);\n-        }\n-\n         let (file_lo, line_lo, col_lo) = match hcx.source_map()\n                                                   .byte_pos_to_line_and_col(span.lo) {\n             Some(pos) => pos,"}, {"sha": "4dabea01c9e46f96591eb2c68d0235d5e7dc5fe5", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=ecaa96418bfff378a229ebf79d14f9e3c312cf78", "patch": "@@ -796,11 +796,6 @@ where\n         }\n \n         let span_data = span.data();\n-\n-        if span_data.hi < span_data.lo {\n-            return TAG_INVALID_SPAN.encode(self);\n-        }\n-\n         let (file_lo, line_lo, col_lo) = match self.source_map\n                                                    .byte_pos_to_line_and_col(span_data.lo) {\n             Some(pos) => pos,"}, {"sha": "5ac60b017d3fc17bfbcfb3acc69ee9c074776b96", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=ecaa96418bfff378a229ebf79d14f9e3c312cf78", "patch": "@@ -68,7 +68,7 @@ impl<'a> StringReader<'a> {\n         let end = sess.source_map().lookup_byte_offset(span.hi());\n \n         // Make the range zero-length if the span is invalid.\n-        if span.lo() > span.hi() || begin.sf.start_pos != end.sf.start_pos {\n+        if begin.sf.start_pos != end.sf.start_pos {\n             span = span.shrink_to_lo();\n         }\n "}, {"sha": "d9f618602a40b4bc8f5c56ec0fa1b4b0a862f7b2", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=ecaa96418bfff378a229ebf79d14f9e3c312cf78", "patch": "@@ -498,10 +498,6 @@ impl SourceMap {\n     pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n         debug!(\"span_to_lines(sp={:?})\", sp);\n \n-        if sp.lo() > sp.hi() {\n-            return Err(SpanLinesError::IllFormedSpan(sp));\n-        }\n-\n         let lo = self.lookup_char_pos(sp.lo());\n         debug!(\"span_to_lines: lo={:?}\", lo);\n         let hi = self.lookup_char_pos(sp.hi());\n@@ -549,10 +545,6 @@ impl SourceMap {\n     fn span_to_source<F>(&self, sp: Span, extract_source: F) -> Result<String, SpanSnippetError>\n         where F: Fn(&str, usize, usize) -> Result<String, SpanSnippetError>\n     {\n-        if sp.lo() > sp.hi() {\n-            return Err(SpanSnippetError::IllFormedSpan(sp));\n-        }\n-\n         let local_begin = self.lookup_byte_offset(sp.lo());\n         let local_end = self.lookup_byte_offset(sp.hi());\n \n@@ -762,14 +754,14 @@ impl SourceMap {\n \n     /// Finds the width of a character, either before or after the provided span.\n     fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {\n-        // Disregard malformed spans and assume a one-byte wide character.\n-        if sp.lo() >= sp.hi() {\n-            debug!(\"find_width_of_character_at_span: early return malformed span\");\n+        let sp = sp.data();\n+        if sp.lo == sp.hi {\n+            debug!(\"find_width_of_character_at_span: early return empty span\");\n             return 1;\n         }\n \n-        let local_begin = self.lookup_byte_offset(sp.lo());\n-        let local_end = self.lookup_byte_offset(sp.hi());\n+        let local_begin = self.lookup_byte_offset(sp.lo);\n+        let local_end = self.lookup_byte_offset(sp.hi);\n         debug!(\"find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`\",\n                local_begin, local_end);\n "}, {"sha": "dc29b189639ce409625a39fa380161d1493616de", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaa96418bfff378a229ebf79d14f9e3c312cf78/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=ecaa96418bfff378a229ebf79d14f9e3c312cf78", "patch": "@@ -1512,7 +1512,6 @@ pub type FileLinesResult = Result<FileLines, SpanLinesError>;\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum SpanLinesError {\n-    IllFormedSpan(Span),\n     DistinctSources(DistinctSources),\n }\n "}]}