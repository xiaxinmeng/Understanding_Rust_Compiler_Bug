{"sha": "64adca717fe0f1fac851e9d09972adecf21bf662", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YWRjYTcxN2ZlMGYxZmFjODUxZTlkMDk5NzJhZGVjZjIxYmY2NjI=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-03-22T11:52:31Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-03-22T11:52:31Z"}, "message": "f clarification, docs", "tree": {"sha": "aa3ae1fad32e3fee32c856d2c6da1313ba14ddf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3ae1fad32e3fee32c856d2c6da1313ba14ddf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64adca717fe0f1fac851e9d09972adecf21bf662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64adca717fe0f1fac851e9d09972adecf21bf662", "html_url": "https://github.com/rust-lang/rust/commit/64adca717fe0f1fac851e9d09972adecf21bf662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64adca717fe0f1fac851e9d09972adecf21bf662/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b3cd47e290d7831120b6a95767802265adfd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b3cd47e290d7831120b6a95767802265adfd08", "html_url": "https://github.com/rust-lang/rust/commit/c9b3cd47e290d7831120b6a95767802265adfd08"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "3fb843dc7e1b3bba96ae365e522c42e3853882f9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64adca717fe0f1fac851e9d09972adecf21bf662/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64adca717fe0f1fac851e9d09972adecf21bf662/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=64adca717fe0f1fac851e9d09972adecf21bf662", "patch": "@@ -455,6 +455,11 @@ fn robin_hood<'a, K: 'a, V: 'a>(bucket: FullBucketMut<'a, K, V>,\n                     let bucket = bucket.put(hash, key, val);\n                     // Now that it's stolen, just read the value's pointer\n                     // right out of the table! Go back to the *starting point*.\n+                    //\n+                    // This use of `into_table` is misleading. It turns the\n+                    // bucket, which is a FullBucket on top of a\n+                    // FullBucketMut, into just one FullBucketMut. The \"table\"\n+                    // refers to the inner FullBucketMut in this context.\n                     return bucket.into_table().into_mut_refs().1;\n                 },\n                 Full(bucket) => bucket"}, {"sha": "5802a1fd2656769c5dbbb2608a55deffe8850455", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64adca717fe0f1fac851e9d09972adecf21bf662/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64adca717fe0f1fac851e9d09972adecf21bf662/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=64adca717fe0f1fac851e9d09972adecf21bf662", "patch": "@@ -421,8 +421,9 @@ impl<K, V, M: Deref<Target=RawTable<K, V>>> FullBucket<K, V, M> {\n     }\n }\n \n-// We don't need a `Take` trait currently. This is why a mutable reference\n-// to the table is required.\n+// We take a mutable reference to the table instead of accepting anything that\n+// implements `DerefMut` to prevent fn `take` from being called on `stash`ed\n+// buckets.\n impl<'t, K, V> FullBucket<K, V, &'t mut RawTable<K, V>> {\n     /// Removes this bucket's key and value from the hashtable.\n     ///\n@@ -446,6 +447,8 @@ impl<'t, K, V> FullBucket<K, V, &'t mut RawTable<K, V>> {\n     }\n }\n \n+// This use of `Put` is misleading and restrictive, but safe and sufficient for our use cases\n+// where `M` is a full bucket or table reference type with mutable access to the table.\n impl<K, V, M> FullBucket<K, V, M> where M: Put<K, V> {\n     pub fn replace(&mut self, h: SafeHash, k: K, v: V) -> (SafeHash, K, V) {\n         unsafe {"}]}