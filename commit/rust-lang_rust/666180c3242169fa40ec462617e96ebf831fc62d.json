{"sha": "666180c3242169fa40ec462617e96ebf831fc62d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NjE4MGMzMjQyMTY5ZmE0MGVjNDYyNjE3ZTk2ZWJmODMxZmM2MmQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-04T20:20:00Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T10:36:30Z"}, "message": "Move 'tcx lifetime on MirPass", "tree": {"sha": "6ad96a41f44d822ab12f528203c2595490b5c97e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad96a41f44d822ab12f528203c2595490b5c97e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666180c3242169fa40ec462617e96ebf831fc62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666180c3242169fa40ec462617e96ebf831fc62d", "html_url": "https://github.com/rust-lang/rust/commit/666180c3242169fa40ec462617e96ebf831fc62d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666180c3242169fa40ec462617e96ebf831fc62d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42dcd4b7c5fb7b61bc2f4c0842f66e5ad40057e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/42dcd4b7c5fb7b61bc2f4c0842f66e5ad40057e4", "html_url": "https://github.com/rust-lang/rust/commit/42dcd4b7c5fb7b61bc2f4c0842f66e5ad40057e4"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "15ecc6c37920b5c87f6eee616ed3540001326505", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -30,8 +30,8 @@ pub use self::AddCallGuards::*;\n  *\n  */\n \n-impl MirPass for AddCallGuards {\n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for AddCallGuards {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         self.add_call_guards(body);\n     }\n }"}, {"sha": "052631ddff37125df0e6429759b32effbb1c1d4b", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -39,8 +39,8 @@ use crate::util;\n \n pub struct AddMovesForPackedDrops;\n \n-impl MirPass for AddMovesForPackedDrops {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for AddMovesForPackedDrops {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, body.span);\n         add_moves_for_packed_drops(tcx, body, src.def_id());\n     }"}, {"sha": "0fd75cd57b2ac31856938a2707fa59b1274ea986", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -65,8 +65,8 @@ fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-impl MirPass for AddRetag {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for AddRetag {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n             return;\n         }"}, {"sha": "ede1cb62f9451475583c390ec82bf5aea48014fd", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -26,8 +26,8 @@ pub struct CleanupNonCodegenStatements;\n \n pub struct DeleteNonCodegenStatements;\n \n-impl MirPass for CleanupNonCodegenStatements {\n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements;\n         delete.visit_body(body);\n     }"}, {"sha": "ac442a496e535c918688837993663d108b4c43ed", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -33,8 +33,8 @@ use crate::transform::{MirPass, MirSource};\n \n pub struct ConstProp;\n \n-impl MirPass for ConstProp {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for ConstProp {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n             return;"}, {"sha": "f3a523a813413e8abfe31a651fa965dc11e7a16a", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -29,8 +29,8 @@ use crate::util::def_use::DefUseAnalysis;\n \n pub struct CopyPropagation;\n \n-impl MirPass for CopyPropagation {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for CopyPropagation {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {"}, {"sha": "1fc7ce09aa647db7a2d2229f3956578a79ba5794", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -5,8 +5,8 @@ use crate::util::expand_aggregate;\n \n pub struct Deaggregator;\n \n-impl MirPass for Deaggregator {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for Deaggregator {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {"}, {"sha": "ed0eff943a165d86408dbf4d3295a8bec690dad7", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -13,12 +13,12 @@ use crate::util as mir_util;\n \n pub struct Marker(pub &'static str);\n \n-impl MirPass for Marker {\n+impl<'tcx> MirPass<'tcx> for Marker {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut Body<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut Body<'tcx>) {\n     }\n }\n "}, {"sha": "7a5c00c85962946cec88c94dbbf4312af32be100", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -20,8 +20,8 @@ use syntax_pos::Span;\n \n pub struct ElaborateDrops;\n \n-impl MirPass for ElaborateDrops {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, body.span);\n \n         let def_id = src.def_id();"}, {"sha": "21ca339eb968bdfb6f644a14011725a021daee75", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -49,8 +49,8 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n \n pub struct EraseRegions;\n \n-impl MirPass for EraseRegions {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for EraseRegions {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_body(body);\n     }\n }"}, {"sha": "d87331195dd2402ef380075a4a0ae7e1aaae8058", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -1115,8 +1115,8 @@ where\n     }).collect()\n }\n \n-impl MirPass for StateTransform {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for StateTransform {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty {\n             yield_ty\n         } else {"}, {"sha": "57aac2b0eac996cda29e781b2a762aaf40e96649", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -37,8 +37,8 @@ struct CallSite<'tcx> {\n     location: SourceInfo,\n }\n \n-impl MirPass for Inline {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for Inline {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(body);\n         }"}, {"sha": "abe41606e80794a76ce3de1375ae218d2b37ff96", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -11,8 +11,8 @@ use crate::transform::{MirPass, MirSource};\n \n pub struct InstCombine;\n \n-impl MirPass for InstCombine {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for InstCombine {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return"}, {"sha": "255635b933385b4dab8feffcd51c5e05e2cec399", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -137,20 +137,20 @@ pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n /// A streamlined trait that you can implement to create a pass; the\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n-pub trait MirPass {\n+pub trait MirPass<'tcx> {\n     fn name(&self) -> Cow<'_, str> {\n         default_name::<Self>()\n     }\n \n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>);\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>);\n }\n \n pub fn run_passes(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     instance: InstanceDef<'tcx>,\n     mir_phase: MirPhase,\n-    passes: &[&dyn MirPass],\n+    passes: &[&dyn MirPass<'tcx>],\n ) {\n     let phase_index = mir_phase.phase_index();\n \n@@ -164,7 +164,7 @@ pub fn run_passes(\n             promoted,\n         };\n         let mut index = 0;\n-        let mut run_pass = |pass: &dyn MirPass| {\n+        let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n             let run_hooks = |body: &_, index, is_after| {\n                 dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n                                       &pass.name(), source, body, is_after);"}, {"sha": "762bb5d44839f096c06ee216889d3310bec56ed0", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -8,8 +8,8 @@ use crate::transform::{MirPass, MirSource};\n \n pub struct NoLandingPads;\n \n-impl MirPass for NoLandingPads {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for NoLandingPads {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }"}, {"sha": "1fe45a2c4240b42ae2316166d83ba9b9ee0e3aff", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -1572,8 +1572,8 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n \n pub struct QualifyAndPromoteConstants;\n \n-impl MirPass for QualifyAndPromoteConstants {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if body.return_ty().references_error() {\n             tcx.sess.delay_span_bug(body.span, \"QualifyAndPromoteConstants: MIR had errors\");"}, {"sha": "73089a2106f6b4f46885d7ea607dbf227e39ad4b", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -18,8 +18,8 @@ pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>)\n     RemoveNoopLandingPads.remove_nop_landing_pads(body)\n }\n \n-impl MirPass for RemoveNoopLandingPads {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         remove_noop_landing_pads(tcx, body);\n     }\n }"}, {"sha": "1d3bf247387a74ea588264a9679267b35bc4000c", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -23,8 +23,8 @@ use crate::dataflow::has_rustc_mir_with;\n \n pub struct SanityCheck;\n \n-impl MirPass for SanityCheck {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for SanityCheck {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));"}, {"sha": "d4599ee08aa4614f43c8db3c37b3808bdeb95e83", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -52,12 +52,12 @@ pub fn simplify_cfg(body: &mut Body<'_>) {\n     body.basic_blocks_mut().raw.shrink_to_fit();\n }\n \n-impl MirPass for SimplifyCfg {\n+impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass<'tcx>(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body);\n         simplify_cfg(body);\n     }\n@@ -292,8 +292,8 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n \n pub struct SimplifyLocals;\n \n-impl MirPass for SimplifyLocals {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()) };\n         marker.visit_body(body);\n         // Return pointer and arguments are always live"}, {"sha": "0a509666d34aedb76ffd0711af52c4562db8fc8f", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -14,12 +14,12 @@ impl SimplifyBranches {\n     }\n }\n \n-impl MirPass for SimplifyBranches {\n+impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let param_env = tcx.param_env(src.def_id());\n         for block in body.basic_blocks_mut() {\n             let terminator = block.terminator_mut();"}, {"sha": "8199a252e78b06c877774a4fe4e80d119037e388", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666180c3242169fa40ec462617e96ebf831fc62d/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=666180c3242169fa40ec462617e96ebf831fc62d", "patch": "@@ -36,8 +36,8 @@ use crate::util::patch::MirPatch;\n \n pub struct UniformArrayMoveOut;\n \n-impl MirPass for UniformArrayMoveOut {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for UniformArrayMoveOut {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n         {\n@@ -184,8 +184,8 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n \n pub struct RestoreSubsliceArrayMoveOut;\n \n-impl MirPass for RestoreSubsliceArrayMoveOut {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n         {"}]}