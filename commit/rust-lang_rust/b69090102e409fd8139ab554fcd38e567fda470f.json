{"sha": "b69090102e409fd8139ab554fcd38e567fda470f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTA5MDEwMmU0MDlmZDgxMzlhYjU1NGZjZDM4ZTU2N2ZkYTQ3MGY=", "commit": {"author": {"name": "Alik Aslanyan", "email": "inline0@protonmail.com", "date": "2021-07-15T12:34:45Z"}, "committer": {"name": "Alik Aslanyan", "email": "inline0@protonmail.com", "date": "2021-07-15T12:34:49Z"}, "message": "Suggest full enum variant for local modules", "tree": {"sha": "48687d34f889a34189694e01068b1c4313cfd289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48687d34f889a34189694e01068b1c4313cfd289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69090102e409fd8139ab554fcd38e567fda470f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJLBAABCAA1FiEEeY134/OQL6hN3y4Jf+b9XVvEzPYFAmDwK2oXHGlubGluZTBA\ncHJvdG9ubWFpbC5jb20ACgkQf+b9XVvEzPbivxAAuR3T6DsYy+TQt5Em78gty7q6\nNBXVf4RDVK8Myx0U4KushOn+W+VO3mTCItNojE8/o4dau4GHJ34enMUOyUC4qI+u\nToWT9UttFzEL/SaZwoVdy12m+0qtmRSrNVlYstp12u8e5+8i5uJGrRHE3IMDJM9E\nKQ6re/O3231G+O7f2eTiJ6Sy25Jw6kQo4sgJi37oa67vtqXDo9Orx8h+1pciyEd/\ndxP4un0bPa4EjpRqwC79b+sa0SQKec5kyyy33hGrvYpwdyDVYBrwebTyw+8rhdcW\nFJHXLRQyODp3/3dkdfxy0JHyiH3M7P0GYW3TKCrnvj+dLIDWPWKa8SLptPfvzNc7\n7Fmp3pMcLEUTIpDVWLVEvP761JPeCu060NADEhAbbDCE/x/WNt8flcG+09uS27kZ\n4VzAeUuopXi8s60QPH/AfVr0T/QoJ0Japqicaxf3ec9gzpSvWlhGJCnwUSYlsO57\nMNVjqjd19oSJkUxFDPkTc6PknEE7EwG0VE1DKoaIlCc2WmIEbuHWrdWNmFh9T38U\nUvgsEo8JVAXVndpWu/+oQBZ/hDDeqS4rm36T2LKtOoLFBgNR0fO0N2K3+Fkby9Qd\noVP09x4xs/YRpx4+mCDl2Kd0kLy/10wVPJ1wGbqgN/wiU99x0aPk9JudNLD1hTy+\n3XGle8ln6NkGb7tRoZA=\n=+/Ce\n-----END PGP SIGNATURE-----", "payload": "tree 48687d34f889a34189694e01068b1c4313cfd289\nparent 9c107816f7b351ea5b5043cdbec52901a77526de\nauthor Alik Aslanyan <inline0@protonmail.com> 1626352485 +0400\ncommitter Alik Aslanyan <inline0@protonmail.com> 1626352489 +0400\n\nSuggest full enum variant for local modules\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69090102e409fd8139ab554fcd38e567fda470f", "html_url": "https://github.com/rust-lang/rust/commit/b69090102e409fd8139ab554fcd38e567fda470f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69090102e409fd8139ab554fcd38e567fda470f/comments", "author": {"login": "In-line", "id": 19331496, "node_id": "MDQ6VXNlcjE5MzMxNDk2", "avatar_url": "https://avatars.githubusercontent.com/u/19331496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/In-line", "html_url": "https://github.com/In-line", "followers_url": "https://api.github.com/users/In-line/followers", "following_url": "https://api.github.com/users/In-line/following{/other_user}", "gists_url": "https://api.github.com/users/In-line/gists{/gist_id}", "starred_url": "https://api.github.com/users/In-line/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/In-line/subscriptions", "organizations_url": "https://api.github.com/users/In-line/orgs", "repos_url": "https://api.github.com/users/In-line/repos", "events_url": "https://api.github.com/users/In-line/events{/privacy}", "received_events_url": "https://api.github.com/users/In-line/received_events", "type": "User", "site_admin": false}, "committer": {"login": "In-line", "id": 19331496, "node_id": "MDQ6VXNlcjE5MzMxNDk2", "avatar_url": "https://avatars.githubusercontent.com/u/19331496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/In-line", "html_url": "https://github.com/In-line", "followers_url": "https://api.github.com/users/In-line/followers", "following_url": "https://api.github.com/users/In-line/following{/other_user}", "gists_url": "https://api.github.com/users/In-line/gists{/gist_id}", "starred_url": "https://api.github.com/users/In-line/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/In-line/subscriptions", "organizations_url": "https://api.github.com/users/In-line/orgs", "repos_url": "https://api.github.com/users/In-line/repos", "events_url": "https://api.github.com/users/In-line/events{/privacy}", "received_events_url": "https://api.github.com/users/In-line/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c107816f7b351ea5b5043cdbec52901a77526de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c107816f7b351ea5b5043cdbec52901a77526de", "html_url": "https://github.com/rust-lang/rust/commit/9c107816f7b351ea5b5043cdbec52901a77526de"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "3ea59906d3dcd326d241ecf902912180ce41247a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b69090102e409fd8139ab554fcd38e567fda470f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69090102e409fd8139ab554fcd38e567fda470f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=b69090102e409fd8139ab554fcd38e567fda470f", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -201,7 +202,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let sole_field = &variant.fields[0];\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n-                        let variant_path = self.tcx.def_path_str(variant.def_id);\n+                        let variant_path =\n+                            with_no_trimmed_paths(|| self.tcx.def_path_str(variant.def_id));\n                         // FIXME #56861: DRYer prelude filtering\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\") {\n                             if let Some((_, path)) = path.split_once(\"::\") {"}, {"sha": "1dfc0786668f235dc2d57fec01286d1d880a17e1", "filename": "src/test/ui/suggestions/suggest-full-enum-variant-for-local-module.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b69090102e409fd8139ab554fcd38e567fda470f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69090102e409fd8139ab554fcd38e567fda470f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.rs?ref=b69090102e409fd8139ab554fcd38e567fda470f", "patch": "@@ -0,0 +1,10 @@\n+mod option {\n+    pub enum O<T> {\n+        Some(T),\n+        None,\n+    }\n+}\n+\n+fn main() {\n+    let _: option::O<()> = (); //~ ERROR 9:28: 9:30: mismatched types [E0308]\n+}"}, {"sha": "22a0ce1e91d7243324dc0245a935d98f94024bbb", "filename": "src/test/ui/suggestions/suggest-full-enum-variant-for-local-module.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b69090102e409fd8139ab554fcd38e567fda470f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b69090102e409fd8139ab554fcd38e567fda470f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr?ref=b69090102e409fd8139ab554fcd38e567fda470f", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-full-enum-variant-for-local-module.rs:9:28\n+   |\n+LL |     let _: option::O<()> = ();\n+   |            -------------   ^^\n+   |            |               |\n+   |            |               expected enum `O`, found `()`\n+   |            |               help: try using a variant of the expected enum: `option::O::Some(())`\n+   |            expected due to this\n+   |\n+   = note:   expected enum `O<()>`\n+           found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}