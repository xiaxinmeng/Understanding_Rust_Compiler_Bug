{"sha": "e05639a22596999e758fd0f598db23091e2c9837", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNTYzOWEyMjU5Njk5OWU3NThmZDBmNTk4ZGIyMzA5MWUyYzk4Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-04T09:20:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-04T09:20:03Z"}, "message": "Auto merge of #1204 - RalfJung:rustup, r=RalfJung\n\nbump Rust", "tree": {"sha": "f1129a809d1d10543e14023373377e8f2547d468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1129a809d1d10543e14023373377e8f2547d468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e05639a22596999e758fd0f598db23091e2c9837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e05639a22596999e758fd0f598db23091e2c9837", "html_url": "https://github.com/rust-lang/rust/commit/e05639a22596999e758fd0f598db23091e2c9837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e05639a22596999e758fd0f598db23091e2c9837/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff55294abd511ee04b11fbe1a49a2206dd354ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff55294abd511ee04b11fbe1a49a2206dd354ac3", "html_url": "https://github.com/rust-lang/rust/commit/ff55294abd511ee04b11fbe1a49a2206dd354ac3"}, {"sha": "db0d03229c54e3dead1cd8afde62e1ba9b1707bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0d03229c54e3dead1cd8afde62e1ba9b1707bc", "html_url": "https://github.com/rust-lang/rust/commit/db0d03229c54e3dead1cd8afde62e1ba9b1707bc"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "838ec0e9a7dfc009d7a952e2bc0db492a27c57d3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -1 +1 @@\n-c839a7b4c26e58319b0c40448dd423facff34cd0\n+4d71c164a89b705df6affd31a5262c832d1bc48d"}, {"sha": "876339919717a2c4d850f6db126108ae571cceba", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -9,7 +9,7 @@ use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "3b7b3cc6a7262527446a60438728c057acae693e", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -9,7 +9,7 @@ use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "ee4c5dbedf90dceb586491dd8d42fd963339c572", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -9,7 +9,7 @@ use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }"}, {"sha": "f7117dbb646d3973b92bf5db539f234a2a459ff2", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -9,7 +9,7 @@ use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n     }\n }"}, {"sha": "df517f9c81f2ff3388fa736aa1b679b12bac48d4", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -7,7 +7,7 @@ use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n         let _z = *(x.as_ptr() as *mut u8); //~ ERROR dangling pointer was dereferenced\n     }"}, {"sha": "19a9017e71b874ad98fc222e0f899389f33dd4c9", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -9,7 +9,7 @@ use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n         Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n     }"}, {"sha": "8077be405f4b234418ed01128caa8c3febeae19e", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e05639a22596999e758fd0f598db23091e2c9837/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05639a22596999e758fd0f598db23091e2c9837/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=e05639a22596999e758fd0f598db23091e2c9837", "patch": "@@ -9,28 +9,28 @@ fn check_alloc<T: AllocRef>(mut allocator: T) { unsafe {\n         let layout = Layout::from_size_align(20, align).unwrap();\n \n         for _ in 0..32 {\n-            let a = allocator.alloc(layout).unwrap();\n+            let a = allocator.alloc(layout).unwrap().0;\n             assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n             allocator.dealloc(a, layout);\n         }\n \n-        let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        let p1 = allocator.alloc_zeroed(layout).unwrap().0;\n         assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n \n-        let p2 = allocator.realloc(p1, layout, 40).unwrap();\n+        let p2 = allocator.realloc(p1, layout, 40).unwrap().0;\n         let layout = Layout::from_size_align(40, align).unwrap();\n         assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size == new size\n-        let p3 = allocator.realloc(p2, layout, 40).unwrap();\n+        let p3 = allocator.realloc(p2, layout, 40).unwrap().0;\n         assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size > new size\n-        let p4 = allocator.realloc(p3, layout, 10).unwrap();\n+        let p4 = allocator.realloc(p3, layout, 10).unwrap().0;\n         let layout = Layout::from_size_align(10, align).unwrap();\n         assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n@@ -46,7 +46,7 @@ fn check_align_requests<T: AllocRef>(mut allocator: T) {\n             let iterations = 32;\n             unsafe {\n                 let pointers: Vec<_> = (0..iterations).map(|_| {\n-                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap().0\n                 }).collect();\n                 for &ptr in &pointers {\n                     assert_eq!((ptr.as_ptr() as usize) % align, 0,\n@@ -67,7 +67,7 @@ fn global_to_box() {\n     let l = Layout::new::<T>();\n     // allocate manually with global allocator, then turn into Box and free there\n     unsafe {\n-        let ptr = Global.alloc(l).unwrap().as_ptr() as *mut T;\n+        let ptr = Global.alloc(l).unwrap().0.as_ptr() as *mut T;\n         let b = Box::from_raw(ptr);\n         drop(b);\n     }"}]}