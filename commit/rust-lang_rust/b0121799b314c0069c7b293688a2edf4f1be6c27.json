{"sha": "b0121799b314c0069c7b293688a2edf4f1be6c27", "node_id": "C_kwDOAAsO6NoAKGIwMTIxNzk5YjMxNGMwMDY5YzdiMjkzNjg4YTJlZGY0ZjFiZTZjMjc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-14T18:23:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-01T21:41:58Z"}, "message": "Add chained comparison e2e test.", "tree": {"sha": "fe1fd396c1b9659d0619a1a7c2aed18f6f1d22c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1fd396c1b9659d0619a1a7c2aed18f6f1d22c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0121799b314c0069c7b293688a2edf4f1be6c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0121799b314c0069c7b293688a2edf4f1be6c27", "html_url": "https://github.com/rust-lang/rust/commit/b0121799b314c0069c7b293688a2edf4f1be6c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0121799b314c0069c7b293688a2edf4f1be6c27/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "434fa8c26dc3337a688c5d1c8fd077e799ff052e", "url": "https://api.github.com/repos/rust-lang/rust/commits/434fa8c26dc3337a688c5d1c8fd077e799ff052e", "html_url": "https://github.com/rust-lang/rust/commit/434fa8c26dc3337a688c5d1c8fd077e799ff052e"}], "stats": {"total": 400, "additions": 400, "deletions": 0}, "files": [{"sha": "40ddf82f4cf953828cd30ebcb45b6f7f0fdc9d37", "filename": "tests/mir-opt/pre-codegen/chained_comparison.bitand.PreCodegen.after.mir", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.bitand.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.bitand.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.bitand.PreCodegen.after.mir?ref=b0121799b314c0069c7b293688a2edf4f1be6c27", "patch": "@@ -0,0 +1,84 @@\n+// MIR for `bitand` after PreCodegen\n+\n+fn bitand(_1: &Blueprint, _2: &Blueprint) -> bool {\n+    debug a => _1;                       // in scope 0 at $DIR/chained_comparison.rs:+0:15: +0:16\n+    debug b => _2;                       // in scope 0 at $DIR/chained_comparison.rs:+0:30: +0:31\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/chained_comparison.rs:+0:48: +0:52\n+    let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+    let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+    let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+    let mut _6: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:12: +2:21\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:25: +2:34\n+    let mut _8: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+2:11: +2:35\n+    let mut _9: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +2:35\n+    let mut _10: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:12: +3:28\n+    let mut _11: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:32: +3:48\n+    let mut _12: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+3:11: +3:49\n+    let mut _13: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +3:49\n+    let mut _14: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:12: +4:25\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:29: +4:42\n+    let mut _16: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+4:11: +4:43\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +4:43\n+    let mut _18: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:12: +5:21\n+    let mut _19: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:25: +5:34\n+    let mut _20: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+5:11: +5:35\n+\n+    bb0: {\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:43\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:49\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:35\n+        StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        StorageLive(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _4 = ((*_2).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _5 = Eq(move _3, move _4);       // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageDead(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        StorageDead(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:11: +2:35\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:21\n+        _6 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:21\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:25: +2:34\n+        _7 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:25: +2:34\n+        _8 = Eq(move _6, move _7);       // scope 0 at $DIR/chained_comparison.rs:+2:11: +2:35\n+        StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        _9 = BitAnd(move _5, move _8);   // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:35\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:11: +3:49\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:28\n+        _10 = ((*_1).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:28\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:32: +3:48\n+        _11 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:32: +3:48\n+        _12 = Eq(move _10, move _11);    // scope 0 at $DIR/chained_comparison.rs:+3:11: +3:49\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        _13 = BitAnd(move _9, move _12); // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:49\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:11: +4:43\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:25\n+        _14 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:25\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:42\n+        _15 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:42\n+        _16 = Eq(move _14, move _15);    // scope 0 at $DIR/chained_comparison.rs:+4:11: +4:43\n+        StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        _17 = BitAnd(move _13, move _16); // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:43\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        StorageLive(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:11: +5:35\n+        StorageLive(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:21\n+        _18 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:21\n+        StorageLive(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:25: +5:34\n+        _19 = ((*_2).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:25: +5:34\n+        _20 = Eq(move _18, move _19);    // scope 0 at $DIR/chained_comparison.rs:+5:11: +5:35\n+        StorageDead(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        StorageDead(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        _0 = BitAnd(move _17, move _20); // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:35\n+        StorageDead(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        return;                          // scope 0 at $DIR/chained_comparison.rs:+6:2: +6:2\n+    }\n+}"}, {"sha": "837962a6aa31dae85410089fb0fdf9f446cf665d", "filename": "tests/mir-opt/pre-codegen/chained_comparison.naive.PreCodegen.after.mir", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir?ref=b0121799b314c0069c7b293688a2edf4f1be6c27", "patch": "@@ -0,0 +1,136 @@\n+// MIR for `naive` after PreCodegen\n+\n+fn naive(_1: &Blueprint, _2: &Blueprint) -> bool {\n+    debug a => _1;                       // in scope 0 at $DIR/chained_comparison.rs:+0:14: +0:15\n+    debug b => _2;                       // in scope 0 at $DIR/chained_comparison.rs:+0:29: +0:30\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/chained_comparison.rs:+0:47: +0:51\n+    let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+    let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+    let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+    let mut _6: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+    let mut _8: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+    let mut _9: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+    let mut _10: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    let mut _11: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+    let mut _12: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+    let mut _13: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+    let mut _14: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+    let mut _16: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+    let mut _18: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n+    let mut _19: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n+    let mut _20: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n+\n+    bb0: {\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        StorageLive(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _4 = ((*_2).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _5 = Eq(move _3, move _4);       // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageDead(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        StorageDead(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    }\n+\n+    bb1: {\n+        _6 = const false;                // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        goto -> bb3;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    }\n+\n+    bb2: {\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+        _7 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+        _8 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+        _9 = Eq(move _7, move _8);       // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        _6 = move _9;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        goto -> bb3;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    }\n+\n+    bb3: {\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        switchInt(move _6) -> [0: bb4, otherwise: bb5]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    }\n+\n+    bb4: {\n+        _10 = const false;               // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        goto -> bb6;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    }\n+\n+    bb5: {\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+        _11 = ((*_1).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+        _12 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+        _13 = Eq(move _11, move _12);    // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        _10 = move _13;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        goto -> bb6;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    }\n+\n+    bb6: {\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        switchInt(move _10) -> [0: bb7, otherwise: bb8]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    }\n+\n+    bb7: {\n+        _14 = const false;               // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    }\n+\n+    bb8: {\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+        _15 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+        _16 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+        _17 = Eq(move _15, move _16);    // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        _14 = move _17;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    }\n+\n+    bb9: {\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        switchInt(move _14) -> [0: bb10, otherwise: bb11]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+    }\n+\n+    bb10: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        goto -> bb12;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+    }\n+\n+    bb11: {\n+        StorageLive(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n+        StorageLive(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n+        _18 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n+        StorageLive(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n+        _19 = ((*_2).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n+        _20 = Eq(move _18, move _19);    // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n+        StorageDead(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        StorageDead(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        _0 = move _20;                   // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        goto -> bb12;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+    }\n+\n+    bb12: {\n+        StorageDead(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        return;                          // scope 0 at $DIR/chained_comparison.rs:+6:2: +6:2\n+    }\n+}"}, {"sha": "7560e1e26cea9ef8105a48eb4e32410389d1ec8b", "filename": "tests/mir-opt/pre-codegen/chained_comparison.returning.PreCodegen.after.mir", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.returning.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.returning.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.returning.PreCodegen.after.mir?ref=b0121799b314c0069c7b293688a2edf4f1be6c27", "patch": "@@ -0,0 +1,126 @@\n+// MIR for `returning` after PreCodegen\n+\n+fn returning(_1: &Blueprint, _2: &Blueprint) -> bool {\n+    debug a => _1;                       // in scope 0 at $DIR/chained_comparison.rs:+0:18: +0:19\n+    debug b => _2;                       // in scope 0 at $DIR/chained_comparison.rs:+0:33: +0:34\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/chained_comparison.rs:+0:51: +0:55\n+    let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:8: +1:24\n+    let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:28: +1:44\n+    let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+    let mut _6: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+4:8: +4:17\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+4:21: +4:30\n+    let mut _8: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+    let mut _9: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+7:8: +7:24\n+    let mut _10: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+7:28: +7:44\n+    let mut _11: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+    let mut _12: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+10:8: +10:21\n+    let mut _13: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+10:25: +10:38\n+    let mut _14: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+13:8: +13:17\n+    let mut _16: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+13:21: +13:30\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+\n+    bb0: {\n+        StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+        StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:24\n+        _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:24\n+        StorageLive(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:28: +1:44\n+        _4 = ((*_2).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:28: +1:44\n+        _5 = Ne(move _3, move _4);       // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+        StorageDead(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:43: +1:44\n+        StorageDead(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:43: +1:44\n+        switchInt(move _5) -> [0: bb1, otherwise: bb10]; // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+    }\n+\n+    bb1: {\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+3:5: +3:6\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:17\n+        _6 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:17\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+4:21: +4:30\n+        _7 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+4:21: +4:30\n+        _8 = Ne(move _6, move _7);       // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+        StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:30\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:30\n+        switchInt(move _8) -> [0: bb2, otherwise: bb9]; // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+    }\n+\n+    bb2: {\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+6:5: +6:6\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:24\n+        _9 = ((*_1).2: u32);             // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:24\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+7:28: +7:44\n+        _10 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+7:28: +7:44\n+        _11 = Ne(move _9, move _10);     // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+7:43: +7:44\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+7:43: +7:44\n+        switchInt(move _11) -> [0: bb3, otherwise: bb8]; // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+    }\n+\n+    bb3: {\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+9:5: +9:6\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:21\n+        _12 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:21\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+10:25: +10:38\n+        _13 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+10:25: +10:38\n+        _14 = Ne(move _12, move _13);    // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+10:37: +10:38\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+10:37: +10:38\n+        switchInt(move _14) -> [0: bb4, otherwise: bb7]; // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+    }\n+\n+    bb4: {\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+12:5: +12:6\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:17\n+        _15 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:17\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+13:21: +13:30\n+        _16 = ((*_2).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+13:21: +13:30\n+        _17 = Ne(move _15, move _16);    // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+13:29: +13:30\n+        StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+13:29: +13:30\n+        switchInt(move _17) -> [0: bb5, otherwise: bb6]; // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+    }\n+\n+    bb5: {\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+15:5: +15:6\n+        _0 = const true;                 // scope 0 at $DIR/chained_comparison.rs:+16:5: +16:9\n+        goto -> bb11;                    // scope 0 at $DIR/chained_comparison.rs:+17:2: +17:2\n+    }\n+\n+    bb6: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+14:16: +14:21\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+15:5: +15:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb7: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+11:16: +11:21\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+12:5: +12:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb8: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+8:16: +8:21\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+9:5: +9:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb9: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+5:16: +5:21\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+6:5: +6:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb10: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+2:16: +2:21\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+3:5: +3:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb11: {\n+        return;                          // scope 0 at $DIR/chained_comparison.rs:+17:2: +17:2\n+    }\n+}"}, {"sha": "5293249c4e0d9f84504bc46465c2b288fd39b404", "filename": "tests/mir-opt/pre-codegen/chained_comparison.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0121799b314c0069c7b293688a2edf4f1be6c27/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.rs?ref=b0121799b314c0069c7b293688a2edf4f1be6c27", "patch": "@@ -0,0 +1,54 @@\n+// compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=2\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Blueprint {\n+    pub fuel_tank_size: u32,\n+    pub payload: u32,\n+    pub wheel_diameter: u32,\n+    pub wheel_width: u32,\n+    pub storage: u32,\n+}\n+\n+// Equivalent of #[derive(PartialEq)]\n+pub fn naive(a: &Blueprint, b: &Blueprint) -> bool {\n+    (a.fuel_tank_size == b.fuel_tank_size)\n+        && (a.payload == b.payload)\n+        && (a.wheel_diameter == b.wheel_diameter)\n+        && (a.wheel_width == b.wheel_width)\n+        && (a.storage == b.storage)\n+}\n+\n+// Optimizes good but changes semantics\n+pub fn bitand(a: &Blueprint, b: &Blueprint) -> bool {\n+    (a.fuel_tank_size == b.fuel_tank_size)\n+        & (a.payload == b.payload)\n+        & (a.wheel_diameter == b.wheel_diameter)\n+        & (a.wheel_width == b.wheel_width)\n+        & (a.storage == b.storage)\n+}\n+\n+// Optimizes good and have same semantics as PartialEq\n+pub fn returning(a: &Blueprint, b: &Blueprint) -> bool {\n+    if a.fuel_tank_size != b.fuel_tank_size {\n+        return false;\n+    }\n+    if a.payload != b.payload {\n+        return false;\n+    }\n+    if a.wheel_diameter != b.wheel_diameter {\n+        return false;\n+    }\n+    if a.wheel_width != b.wheel_width {\n+        return false;\n+    }\n+    if a.storage != b.storage {\n+        return false;\n+    }\n+    true\n+}\n+\n+// EMIT_MIR chained_comparison.naive.PreCodegen.after.mir\n+// EMIT_MIR chained_comparison.bitand.PreCodegen.after.mir\n+// EMIT_MIR chained_comparison.returning.PreCodegen.after.mir"}]}