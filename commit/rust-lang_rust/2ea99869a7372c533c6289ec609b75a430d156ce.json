{"sha": "2ea99869a7372c533c6289ec609b75a430d156ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYTk5ODY5YTczNzJjNTMzYzYyODllYzYwOWI3NWE0MzBkMTU2Y2U=", "commit": {"author": {"name": "Jacob Clark", "email": "jacob.jh.clark@googlemail.com", "date": "2016-06-06T21:30:40Z"}, "committer": {"name": "Jacob Clark", "email": "jacob.jh.clark@googlemail.com", "date": "2016-06-06T21:30:40Z"}, "message": "Refactor string collects to itertools join", "tree": {"sha": "fcb9c8b4e604fab6c84afa4da3029b06c8a2082b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcb9c8b4e604fab6c84afa4da3029b06c8a2082b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ea99869a7372c533c6289ec609b75a430d156ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQIcBAABCgAGBQJXVeuDAAoJENd/CPyAUL2LWE4P/0u3BdnzDhtz2tSxIDa/1Nvd\ny9CV2g9wBsEHOv7tdQaBuEuOmfwJQnktorn1c8QMY5Q0nz6J62UZDZQG9w5vtm1M\nP5qs0jDzS76vLMkLYlCyVkWDQpqSXsUbs4GyOe5AzwLOjt7uUwciZEjrONtkKkjl\nOhGwR/vx6WDaegF5JLBIo3SVEjGWQmaUe5xXfjqSAqcNWYKoMlVSLtAHZZel8+ym\nGSTIruv8Qw/2/+pQrVD5hezcOgrOKwltfrRk+tvm/oElwo2e9W/8qYL+vSQ1SF5s\nsBAdZ1ZIx8k24RVeylqGoMh+OI8byWez6dxd9UaPbvWuGq5ok0D/b4bNz55X3XiP\n6d9NP/df/DMIZyPx1s0JYpQRV1KnexEAf8YyuU01tCVjWGWxYYLlLAEZQeBoCWR1\nKV2c8u/1U8NOi9vt8n6xpgHVTHvFl1662Tv7JDUgE/ISd4lx8VK0BmhfKXws0hNd\niwIiwI4fYyaF01ewNoPllLeTbwgYtz5XAAaGnkUYb75oVY3VwTeexJkjE1kCN863\nQtT09kGv8Eq3d1kkkULBd0+nguKP6KiQjLF4QbVvRpdhP2ME495ZFhRT0XdW0RqN\nO3ArUd17+asJIi0nppTkUV/VfOOvxNCGazpvKpporf8CEvcKK94tqExaGwuQW3nC\nqqyOgQXuHzwFxDNm0lCv\n=lavF\n-----END PGP SIGNATURE-----", "payload": "tree fcb9c8b4e604fab6c84afa4da3029b06c8a2082b\nparent 3d4bc8c84ac1ee50c97217d863a6eb0a7556c405\nauthor Jacob Clark <jacob.jh.clark@googlemail.com> 1465248640 +0100\ncommitter Jacob Clark <jacob.jh.clark@googlemail.com> 1465248640 +0100\n\nRefactor string collects to itertools join\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea99869a7372c533c6289ec609b75a430d156ce", "html_url": "https://github.com/rust-lang/rust/commit/2ea99869a7372c533c6289ec609b75a430d156ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ea99869a7372c533c6289ec609b75a430d156ce/comments", "author": {"login": "imjacobclark", "id": 1641689, "node_id": "MDQ6VXNlcjE2NDE2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1641689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imjacobclark", "html_url": "https://github.com/imjacobclark", "followers_url": "https://api.github.com/users/imjacobclark/followers", "following_url": "https://api.github.com/users/imjacobclark/following{/other_user}", "gists_url": "https://api.github.com/users/imjacobclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/imjacobclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imjacobclark/subscriptions", "organizations_url": "https://api.github.com/users/imjacobclark/orgs", "repos_url": "https://api.github.com/users/imjacobclark/repos", "events_url": "https://api.github.com/users/imjacobclark/events{/privacy}", "received_events_url": "https://api.github.com/users/imjacobclark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "imjacobclark", "id": 1641689, "node_id": "MDQ6VXNlcjE2NDE2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1641689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imjacobclark", "html_url": "https://github.com/imjacobclark", "followers_url": "https://api.github.com/users/imjacobclark/followers", "following_url": "https://api.github.com/users/imjacobclark/following{/other_user}", "gists_url": "https://api.github.com/users/imjacobclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/imjacobclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imjacobclark/subscriptions", "organizations_url": "https://api.github.com/users/imjacobclark/orgs", "repos_url": "https://api.github.com/users/imjacobclark/repos", "events_url": "https://api.github.com/users/imjacobclark/events{/privacy}", "received_events_url": "https://api.github.com/users/imjacobclark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4bc8c84ac1ee50c97217d863a6eb0a7556c405", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4bc8c84ac1ee50c97217d863a6eb0a7556c405", "html_url": "https://github.com/rust-lang/rust/commit/3d4bc8c84ac1ee50c97217d863a6eb0a7556c405"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "fd0dd9d6a67cc6ce558d06ace5fe661384d9f13f", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ea99869a7372c533c6289ec609b75a430d156ce/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea99869a7372c533c6289ec609b75a430d156ce/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2ea99869a7372c533c6289ec609b75a430d156ce", "patch": "@@ -21,6 +21,7 @@ use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, FnArgLayoutStyle};\n+use itertools::Itertools;\n \n use syntax::{ast, abi, ptr, codemap};\n use syntax::codemap::{Span, BytePos, mk_sp};\n@@ -1056,7 +1057,6 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n         let bounds: &[_] = &ty_param_bounds;\n         let bound_str = bounds.iter()\n             .filter_map(|ty_bound| ty_bound.rewrite(context, context.config.max_width, indent))\n-            .collect::<Vec<String>>()\n             .join(\" + \");\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n@@ -1702,7 +1702,6 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n \n     let bound_str = bounds.iter()\n         .filter_map(|ty_bound| ty_bound.rewrite(&context, width, indent))\n-        .collect::<Vec<String>>()\n         .join(\" + \");\n \n     let mut result = String::new();"}, {"sha": "0c35c82791f59853526ca2f092c31b6f1f636699", "filename": "src/types.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2ea99869a7372c533c6289ec609b75a430d156ce/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea99869a7372c533c6289ec609b75a430d156ce/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2ea99869a7372c533c6289ec609b75a430d156ce", "patch": "@@ -23,6 +23,7 @@ use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, wrap_str};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::TypeDensity;\n+use itertools::Itertools;\n \n // Does not wrap on simple segments.\n pub fn rewrite_path(context: &RewriteContext,\n@@ -331,8 +332,9 @@ impl Rewrite for ast::WherePredicate {\n                                                                               width,\n                                                                               offset)\n                                                                })\n-                                                               .collect::<Option<Vec<_>>>())\n-                                           .join(\", \");\n+                                                               .intersperse(Some(\", \".to_string()))\n+                                                               .collect::<Option<String>>());\n+\n                     // 8 = \"for<> : \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + 8;\n                     let budget = try_opt!(width.checked_sub(used_width));\n@@ -342,8 +344,8 @@ impl Rewrite for ast::WherePredicate {\n                                                                          budget,\n                                                                          offset + used_width)\n                                                     })\n-                                                    .collect::<Option<Vec<_>>>())\n-                                         .join(\" + \");\n+                                                    .intersperse(Some(\" + \".to_string()))\n+                                                    .collect::<Option<String>>());\n \n                     format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n                 } else {\n@@ -356,8 +358,8 @@ impl Rewrite for ast::WherePredicate {\n                                                                          budget,\n                                                                          offset + used_width)\n                                                     })\n-                                                    .collect::<Option<Vec<_>>>())\n-                                         .join(\" + \");\n+                                                    .intersperse(Some(\" + \".to_string()))\n+                                                    .collect::<Option<String>>());\n \n                     format!(\"{}: {}\", type_str, bounds_str)\n                 }\n@@ -450,10 +452,10 @@ impl Rewrite for ast::TyParam {\n             result.push_str(\": \");\n \n             let bounds = try_opt!(self.bounds\n-                    .iter()\n-                    .map(|ty_bound| ty_bound.rewrite(context, width, offset))\n-                    .collect::<Option<Vec<_>>>())\n-                .join(\" + \");\n+                .iter()\n+                .map(|ty_bound| ty_bound.rewrite(context, width, offset))\n+                .intersperse(Some(\" + \".to_string()))\n+                .collect::<Option<String>>());\n \n             result.push_str(&bounds);\n         }\n@@ -477,10 +479,11 @@ impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if !self.bound_lifetimes.is_empty() {\n             let lifetime_str = try_opt!(self.bound_lifetimes\n-                    .iter()\n-                    .map(|lt| lt.rewrite(context, width, offset))\n-                    .collect::<Option<Vec<_>>>())\n-                .join(\", \");\n+                .iter()\n+                .map(|lt| lt.rewrite(context, width, offset))\n+                .intersperse(Some(\", \".to_string()))\n+                .collect::<Option<String>>());\n+\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let max_path_width = try_opt!(width.checked_sub(extra_offset));\n@@ -604,10 +607,10 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n         // This doesn't work out so nicely for mutliline situation with lots of\n         // rightward drift. If that is a problem, we could use the list stuff.\n         result.push_str(&try_opt!(bare_fn.lifetimes\n-                .iter()\n-                .map(|l| l.rewrite(context, try_opt!(width.checked_sub(6)), offset + 4))\n-                .collect::<Option<Vec<_>>>())\n-            .join(\", \"));\n+            .iter()\n+            .map(|l| l.rewrite(context, try_opt!(width.checked_sub(6)), offset + 4))\n+            .intersperse(Some(\", \".to_string()))\n+            .collect::<Option<String>>()));\n         result.push_str(\"> \");\n     }\n "}]}