{"sha": "8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzYyOWIzYTAyM2IxZjE1NDNjMTBhZTQwYTliZDg2ZWViNDU5NTQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-25T00:30:18Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-25T09:25:40Z"}, "message": "Address comments", "tree": {"sha": "6e28a97e84e209b733e547c9125ef741f554e124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e28a97e84e209b733e547c9125ef741f554e124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "html_url": "https://github.com/rust-lang/rust/commit/8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec629b3a023b1f1543c10ae40a9bd86eeb45954/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b5d408e6acd6c49c43dae2a3302d9fbb74afe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b5d408e6acd6c49c43dae2a3302d9fbb74afe6", "html_url": "https://github.com/rust-lang/rust/commit/64b5d408e6acd6c49c43dae2a3302d9fbb74afe6"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "24c7ba5f384911e40ae80700ac92d171e793a12e", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ec629b3a023b1f1543c10ae40a9bd86eeb45954/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec629b3a023b1f1543c10ae40a9bd86eeb45954/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "patch": "@@ -233,22 +233,24 @@ impl DepGraph {\n             |data, key, _| data.borrow_mut().alloc_node(key, Vec::new()))\n     }\n \n-    fn with_task_impl<'gcx, C, A, R>(&self,\n-                                     key: DepNode,\n-                                     cx: C,\n-                                     arg: A,\n-                                     no_tcx: bool,\n-                                     task: fn(C, A) -> R,\n-                                     get_task: fn(DepNode) -> OpenTask,\n-                                     get_index: fn(&Lock<CurrentDepGraph>,\n-                                                   DepNode,\n-                                                   OpenTask) -> DepNodeIndex)\n-                                     -> (R, DepNodeIndex)\n-        where C: DepGraphSafe + StableHashingContextProvider<'gcx>,\n-              R: HashStable<StableHashingContext<'gcx>>,\n+    fn with_task_impl<'gcx, C, A, R>(\n+        &self,\n+        key: DepNode,\n+        cx: C,\n+        arg: A,\n+        no_tcx: bool,\n+        task: fn(C, A) -> R,\n+        create_task: fn(DepNode) -> OpenTask,\n+        finish_task_and_alloc_depnode: fn(&Lock<CurrentDepGraph>,\n+                                          DepNode,\n+                                          OpenTask) -> DepNodeIndex\n+    ) -> (R, DepNodeIndex)\n+    where\n+        C: DepGraphSafe + StableHashingContextProvider<'gcx>,\n+        R: HashStable<StableHashingContext<'gcx>>,\n     {\n         if let Some(ref data) = self.data {\n-            let open_task = get_task(key);\n+            let open_task = create_task(key);\n \n             // In incremental mode, hash the result of the task. We don't\n             // do anything with the hash yet, but we are computing it\n@@ -286,7 +288,7 @@ impl DepGraph {\n                 profq_msg(hcx.sess(), ProfileQueriesMsg::TaskEnd)\n             };\n \n-            let dep_node_index = get_index(&data.current, key, open_task);\n+            let dep_node_index = finish_task_and_alloc_depnode(&data.current, key, open_task);\n \n             let mut stable_hasher = StableHasher::new();\n             result.hash_stable(&mut hcx, &mut stable_hasher);\n@@ -983,7 +985,7 @@ impl CurrentDepGraph {\n         }\n     }\n \n-    pub(super) fn complete_task(&mut self, key: DepNode, task: OpenTask) -> DepNodeIndex {\n+    fn complete_task(&mut self, key: DepNode, task: OpenTask) -> DepNodeIndex {\n         if let OpenTask::Regular {\n             node,\n             read_set: _,"}]}