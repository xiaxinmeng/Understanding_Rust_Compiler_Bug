{"sha": "d5a9bc947617babe3833458f3e09f3d6d5e3d736", "node_id": "C_kwDOAAsO6NoAKGQ1YTliYzk0NzYxN2JhYmUzODMzNDU4ZjNlMDlmM2Q2ZDVlM2Q3MzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T07:00:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T07:00:33Z"}, "message": "Auto merge of #94392 - matthiaskrgr:rollup-npscf95, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93400 (Do not suggest using a const parameter when there are bounds on an unused type parameter)\n - #93982 (Provide extra note if synthetic type args are specified)\n - #94087 (Remove unused `unsound_ignore_borrow_on_drop`)\n - #94235 (chalk: Fix wrong debrujin index in opaque type handling.)\n - #94306 (Avoid exhausting stack space in dominator compression)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "de518903867524129fc7cc3345c671abca9fe080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de518903867524129fc7cc3345c671abca9fe080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a9bc947617babe3833458f3e09f3d6d5e3d736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a9bc947617babe3833458f3e09f3d6d5e3d736", "html_url": "https://github.com/rust-lang/rust/commit/d5a9bc947617babe3833458f3e09f3d6d5e3d736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a9bc947617babe3833458f3e09f3d6d5e3d736/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c3331ccf925200b8fb7127db8bae8802edf1b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3331ccf925200b8fb7127db8bae8802edf1b61", "html_url": "https://github.com/rust-lang/rust/commit/7c3331ccf925200b8fb7127db8bae8802edf1b61"}, {"sha": "648a8e314ad28293b721888839c3ac6a0184cf22", "url": "https://api.github.com/repos/rust-lang/rust/commits/648a8e314ad28293b721888839c3ac6a0184cf22", "html_url": "https://github.com/rust-lang/rust/commit/648a8e314ad28293b721888839c3ac6a0184cf22"}], "stats": {"total": 381, "additions": 266, "deletions": 115}, "files": [{"sha": "00913a483db0efe6bc39aeb1743f30ee2351181b", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -241,9 +241,19 @@ fn compress(\n     v: PreorderIndex,\n ) {\n     assert!(is_processed(v, lastlinked));\n-    let u = ancestor[v];\n-    if is_processed(u, lastlinked) {\n-        compress(ancestor, lastlinked, semi, label, u);\n+    // Compute the processed list of ancestors\n+    //\n+    // We use a heap stack here to avoid recursing too deeply, exhausting the\n+    // stack space.\n+    let mut stack: smallvec::SmallVec<[_; 8]> = smallvec::smallvec![v];\n+    let mut u = ancestor[v];\n+    while is_processed(u, lastlinked) {\n+        stack.push(u);\n+        u = ancestor[u];\n+    }\n+\n+    // Then in reverse order, popping the stack\n+    for &[v, u] in stack.array_windows().rev() {\n         if semi[label[u]] < semi[label[v]] {\n             label[v] = label[u];\n         }"}, {"sha": "4981ab5152cd766f8ba7e7ace6c49b7cd8ee288d", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -10,38 +10,11 @@ use rustc_middle::mir::*;\n /// At present, this is used as a very limited form of alias analysis. For example,\n /// `MaybeBorrowedLocals` is used to compute which locals are live during a yield expression for\n /// immovable generators.\n-pub struct MaybeBorrowedLocals {\n-    ignore_borrow_on_drop: bool,\n-}\n-\n-impl MaybeBorrowedLocals {\n-    /// A dataflow analysis that records whether a pointer or reference exists that may alias the\n-    /// given local.\n-    pub fn all_borrows() -> Self {\n-        MaybeBorrowedLocals { ignore_borrow_on_drop: false }\n-    }\n-}\n+pub struct MaybeBorrowedLocals;\n \n impl MaybeBorrowedLocals {\n-    /// During dataflow analysis, ignore the borrow that may occur when a place is dropped.\n-    ///\n-    /// Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut self` as a\n-    /// parameter. In the general case, a drop impl could launder that reference into the\n-    /// surrounding environment through a raw pointer, thus creating a valid `*mut` pointing to the\n-    /// dropped local. We are not yet willing to declare this particular case UB, so we must treat\n-    /// all dropped locals as mutably borrowed for now. See discussion on [#61069].\n-    ///\n-    /// In some contexts, we know that this borrow will never occur. For example, during\n-    /// const-eval, custom drop glue cannot be run. Code that calls this should document the\n-    /// assumptions that justify ignoring `Drop` terminators in this way.\n-    ///\n-    /// [#61069]: https://github.com/rust-lang/rust/pull/61069\n-    pub fn unsound_ignore_borrow_on_drop(self) -> Self {\n-        MaybeBorrowedLocals { ignore_borrow_on_drop: true, ..self }\n-    }\n-\n     fn transfer_function<'a, T>(&'a self, trans: &'a mut T) -> TransferFunction<'a, T> {\n-        TransferFunction { trans, ignore_borrow_on_drop: self.ignore_borrow_on_drop }\n+        TransferFunction { trans }\n     }\n }\n \n@@ -92,7 +65,6 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n /// A `Visitor` that defines the transfer function for `MaybeBorrowedLocals`.\n struct TransferFunction<'a, T> {\n     trans: &'a mut T,\n-    ignore_borrow_on_drop: bool,\n }\n \n impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n@@ -146,10 +118,15 @@ where\n         match terminator.kind {\n             mir::TerminatorKind::Drop { place: dropped_place, .. }\n             | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n-                // See documentation for `unsound_ignore_borrow_on_drop` for an explanation.\n-                if !self.ignore_borrow_on_drop {\n-                    self.trans.gen(dropped_place.local);\n-                }\n+                // Drop terminators may call custom drop glue (`Drop::drop`), which takes `&mut\n+                // self` as a parameter. In the general case, a drop impl could launder that\n+                // reference into the surrounding environment through a raw pointer, thus creating\n+                // a valid `*mut` pointing to the dropped local. We are not yet willing to declare\n+                // this particular case UB, so we must treat all dropped locals as mutably borrowed\n+                // for now. See discussion on [#61069].\n+                //\n+                // [#61069]: https://github.com/rust-lang/rust/pull/61069\n+                self.trans.gen(dropped_place.local);\n             }\n \n             TerminatorKind::Abort"}, {"sha": "d9a66cace52e5bd4013afd1d0fd67480b29b781f", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -463,10 +463,8 @@ fn locals_live_across_suspend_points<'tcx>(\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n-    let borrowed_locals_results = MaybeBorrowedLocals::all_borrows()\n-        .into_engine(tcx, body_ref)\n-        .pass_name(\"generator\")\n-        .iterate_to_fixpoint();\n+    let borrowed_locals_results =\n+        MaybeBorrowedLocals.into_engine(tcx, body_ref).pass_name(\"generator\").iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor =\n         rustc_mir_dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);"}, {"sha": "47b1ee04e777fabb649564c68243fe66e5f20465", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, AssocItemContainer, AssocKind, Ty, TyCtxt, TypeFoldable};\n \n use rustc_ast::ast;\n use rustc_attr as attr;\n@@ -482,21 +482,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 .iter()\n                 .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n                 .map(|bound| {\n-                    bound.fold_with(&mut ty::fold::BottomUpFolder {\n+                    bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,\n-                        ty_op: |ty| {\n-                            if let ty::Opaque(def_id, substs) = *ty.kind() {\n-                                if def_id == opaque_ty_id.0 && substs == identity_substs {\n-                                    return self.interner.tcx.mk_ty(ty::Bound(\n-                                        ty::INNERMOST,\n-                                        ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n-                                    ));\n-                                }\n-                            }\n-                            ty\n-                        },\n-                        lt_op: |lt| lt,\n-                        ct_op: |ct| ct,\n+                        opaque_ty_id,\n+                        identity_substs,\n+                        binder_index: ty::INNERMOST,\n                     })\n                 })\n                 .filter_map(|bound| {\n@@ -739,3 +729,38 @@ fn binders_for<'tcx>(\n         }),\n     )\n }\n+\n+struct ReplaceOpaqueTyFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    opaque_ty_id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n+    identity_substs: SubstsRef<'tcx>,\n+    binder_index: ty::DebruijnIndex,\n+}\n+\n+impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n+        self.binder_index.shift_in(1);\n+        let t = t.super_fold_with(self);\n+        self.binder_index.shift_out(1);\n+        t\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if let ty::Opaque(def_id, substs) = *ty.kind() {\n+            if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n+                return self.tcx.mk_ty(ty::Bound(\n+                    self.binder_index,\n+                    ty::BoundTy::from(ty::BoundVar::from_u32(0)),\n+                ));\n+            }\n+        }\n+        ty\n+    }\n+}"}, {"sha": "e3c865ce9e632938508bc58418a52d4826b40c71", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -323,7 +323,10 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Closure(def_id, substs) => {\n                 chalk_ir::TyKind::Closure(chalk_ir::ClosureId(def_id), substs.lower_into(interner))\n             }\n-            ty::Generator(_def_id, _substs, _) => unimplemented!(),\n+            ty::Generator(def_id, substs, _) => chalk_ir::TyKind::Generator(\n+                chalk_ir::GeneratorId(def_id),\n+                substs.lower_into(interner),\n+            ),\n             ty::GeneratorWitness(_) => unimplemented!(),\n             ty::Never => chalk_ir::TyKind::Never,\n             ty::Tuple(types) => {"}, {"sha": "a06b37627e3cadc3961e4a6cf4c45e1f2c7301b2", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -512,61 +512,69 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             explicit_late_bound == ExplicitLateBound::Yes,\n         );\n \n-        let mut check_types_and_consts =\n-            |expected_min, expected_max, provided, params_offset, args_offset| {\n-                debug!(\n-                    ?expected_min,\n-                    ?expected_max,\n-                    ?provided,\n-                    ?params_offset,\n-                    ?args_offset,\n-                    \"check_types_and_consts\"\n+        let mut check_types_and_consts = |expected_min,\n+                                          expected_max,\n+                                          expected_max_with_synth,\n+                                          provided,\n+                                          params_offset,\n+                                          args_offset| {\n+            debug!(\n+                ?expected_min,\n+                ?expected_max,\n+                ?provided,\n+                ?params_offset,\n+                ?args_offset,\n+                \"check_types_and_consts\"\n+            );\n+            if (expected_min..=expected_max).contains(&provided) {\n+                return true;\n+            }\n+\n+            let num_default_params = expected_max - expected_min;\n+\n+            let gen_args_info = if provided > expected_max {\n+                invalid_args.extend(\n+                    gen_args.args[args_offset + expected_max..args_offset + provided]\n+                        .iter()\n+                        .map(|arg| arg.span()),\n                 );\n-                if (expected_min..=expected_max).contains(&provided) {\n-                    return true;\n+                let num_redundant_args = provided - expected_max;\n+\n+                // Provide extra note if synthetic arguments like `impl Trait` are specified.\n+                let synth_provided = provided <= expected_max_with_synth;\n+\n+                GenericArgsInfo::ExcessTypesOrConsts {\n+                    num_redundant_args,\n+                    num_default_params,\n+                    args_offset,\n+                    synth_provided,\n                 }\n+            } else {\n+                let num_missing_args = expected_max - provided;\n \n-                let num_default_params = expected_max - expected_min;\n+                GenericArgsInfo::MissingTypesOrConsts {\n+                    num_missing_args,\n+                    num_default_params,\n+                    args_offset,\n+                }\n+            };\n \n-                let gen_args_info = if provided > expected_max {\n-                    invalid_args.extend(\n-                        gen_args.args[args_offset + expected_max..args_offset + provided]\n-                            .iter()\n-                            .map(|arg| arg.span()),\n-                    );\n-                    let num_redundant_args = provided - expected_max;\n+            debug!(?gen_args_info);\n \n-                    GenericArgsInfo::ExcessTypesOrConsts {\n-                        num_redundant_args,\n-                        num_default_params,\n-                        args_offset,\n-                    }\n-                } else {\n-                    let num_missing_args = expected_max - provided;\n+            WrongNumberOfGenericArgs::new(\n+                tcx,\n+                gen_args_info,\n+                seg,\n+                gen_params,\n+                params_offset,\n+                gen_args,\n+                def_id,\n+            )\n+            .diagnostic()\n+            .emit_unless(gen_args.has_err());\n \n-                    GenericArgsInfo::MissingTypesOrConsts {\n-                        num_missing_args,\n-                        num_default_params,\n-                        args_offset,\n-                    }\n-                };\n-\n-                debug!(?gen_args_info);\n-\n-                WrongNumberOfGenericArgs::new(\n-                    tcx,\n-                    gen_args_info,\n-                    seg,\n-                    gen_params,\n-                    params_offset,\n-                    gen_args,\n-                    def_id,\n-                )\n-                .diagnostic()\n-                .emit_unless(gen_args.has_err());\n-\n-                false\n-            };\n+            false\n+        };\n \n         let args_correct = {\n             let expected_min = if infer_args {\n@@ -582,6 +590,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             check_types_and_consts(\n                 expected_min,\n                 param_counts.consts + named_type_param_count,\n+                param_counts.consts + named_type_param_count + synth_type_param_count,\n                 gen_args.num_generic_params(),\n                 param_counts.lifetimes + has_self as usize,\n                 gen_args.num_lifetime_params(),"}, {"sha": "a42ed9eab64367f9eb8dbd86503c49bcbd9771f9", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -31,6 +31,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode,\n \n use std::convert::TryInto;\n use std::iter;\n+use std::lazy::Lazy;\n use std::ops::ControlFlow;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -1720,8 +1721,29 @@ fn check_variances_for_type_defn<'tcx>(\n \n     identify_constrained_generic_params(tcx, ty_predicates, None, &mut constrained_parameters);\n \n+    // Lazily calculated because it is only needed in case of an error.\n+    let explicitly_bounded_params = Lazy::new(|| {\n+        let icx = crate::collect::ItemCtxt::new(tcx, item.def_id.to_def_id());\n+        hir_generics\n+            .where_clause\n+            .predicates\n+            .iter()\n+            .filter_map(|predicate| match predicate {\n+                hir::WherePredicate::BoundPredicate(predicate) => {\n+                    match icx.to_ty(predicate.bounded_ty).kind() {\n+                        ty::Param(data) => Some(Parameter(data.index)),\n+                        _ => None,\n+                    }\n+                }\n+                _ => None,\n+            })\n+            .collect::<FxHashSet<_>>()\n+    });\n+\n     for (index, _) in variances.iter().enumerate() {\n-        if constrained_parameters.contains(&Parameter(index as u32)) {\n+        let parameter = Parameter(index as u32);\n+\n+        if constrained_parameters.contains(&parameter) {\n             continue;\n         }\n \n@@ -1730,13 +1752,19 @@ fn check_variances_for_type_defn<'tcx>(\n         match param.name {\n             hir::ParamName::Error => {}\n             _ => {\n-                report_bivariance(tcx, param);\n+                let has_explicit_bounds =\n+                    !param.bounds.is_empty() || explicitly_bounded_params.contains(&parameter);\n+                report_bivariance(tcx, param, has_explicit_bounds);\n             }\n         }\n     }\n }\n \n-fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) -> ErrorReported {\n+fn report_bivariance(\n+    tcx: TyCtxt<'_>,\n+    param: &rustc_hir::GenericParam<'_>,\n+    has_explicit_bounds: bool,\n+) -> ErrorReported {\n     let span = param.span;\n     let param_name = param.name.ident().name;\n     let mut err = error_392(tcx, span, param_name);\n@@ -1754,7 +1782,7 @@ fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) -> Er\n     };\n     err.help(&msg);\n \n-    if matches!(param.kind, rustc_hir::GenericParamKind::Type { .. }) {\n+    if matches!(param.kind, hir::GenericParamKind::Type { .. }) && !has_explicit_bounds {\n         err.help(&format!(\n             \"if you intended `{0}` to be a const parameter, use `const {0}: usize` instead\",\n             param_name"}, {"sha": "f0289fd505a47c78997be0512d0a8344dd512c40", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -68,6 +68,7 @@ This API is completely unstable and subject to change.\n #![feature(slice_partition_dedup)]\n #![feature(control_flow_enum)]\n #![feature(hash_drain_filter)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "62f89a2e6cf88b09e1b5555d6f859bf853d6f4a7", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -84,6 +84,9 @@ pub enum GenericArgsInfo {\n         // us infer the position of type and const generic arguments\n         // in the angle brackets\n         args_offset: usize,\n+\n+        // if synthetic type arguments (e.g. `impl Trait`) are specified\n+        synth_provided: bool,\n     },\n }\n \n@@ -254,6 +257,13 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n+    fn is_synth_provided(&self) -> bool {\n+        match self.gen_args_info {\n+            ExcessTypesOrConsts { synth_provided, .. } => synth_provided,\n+            _ => false,\n+        }\n+    }\n+\n     // Helper function to choose a quantifier word for the number of expected arguments\n     // and to give a bound for the number of expected arguments\n     fn get_quantifier_and_bound(&self) -> (&'static str, usize) {\n@@ -780,6 +790,15 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n         err.span_note(spans, &msg);\n     }\n+\n+    /// Add note if `impl Trait` is explicitly specified.\n+    fn note_synth_provided(&self, err: &mut Diagnostic) {\n+        if !self.is_synth_provided() {\n+            return;\n+        }\n+\n+        err.note(\"`impl Trait` cannot be explicitly specified as a generic argument\");\n+    }\n }\n \n impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n@@ -797,6 +816,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n         self.notify(&mut err);\n         self.suggest(&mut err);\n         self.show_definition(&mut err);\n+        self.note_synth_provided(&mut err);\n \n         err\n     }"}, {"sha": "58fc93064edf52c2b5bba9391b8d37fe3955a729", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -0,0 +1,9 @@\n+// check-fail\n+// known-bug\n+// compile-flags: -Z chalk --edition=2021\n+\n+fn main() -> () {}\n+\n+async fn foo(x: u32) -> u32 {\n+    x\n+}"}, {"sha": "7a86561bcb9ce14728c2742aeb3bcdf9bbb69ba8", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the trait bound `[static generator@$DIR/async.rs:7:29: 9:2]: Generator<ResumeTy>` is not satisfied\n+  --> $DIR/async.rs:7:29\n+   |\n+LL |   async fn foo(x: u32) -> u32 {\n+   |  _____________________________^\n+LL | |     x\n+LL | | }\n+   | |_^ the trait `Generator<ResumeTy>` is not implemented for `[static generator@$DIR/async.rs:7:29: 9:2]`\n+   |\n+note: required by a bound in `from_generator`\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL |     T: Generator<ResumeTy, Yield = ()>,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `from_generator`\n+\n+error[E0280]: the requirement `<[static generator@$DIR/async.rs:7:29: 9:2] as Generator<ResumeTy>>::Yield == ()` is not satisfied\n+  --> $DIR/async.rs:7:29\n+   |\n+LL |   async fn foo(x: u32) -> u32 {\n+   |  _____________________________^\n+LL | |     x\n+LL | | }\n+   | |_^\n+   |\n+note: required by a bound in `from_generator`\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL |     T: Generator<ResumeTy, Yield = ()>,\n+   |                            ^^^^^^^^^^ required by this bound in `from_generator`\n+\n+error[E0280]: the requirement `<impl Future<Output = [async output]> as Future>::Output == u32` is not satisfied\n+  --> $DIR/async.rs:7:25\n+   |\n+LL | async fn foo(x: u32) -> u32 {\n+   |                         ^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2ae7745c725c1bcfe01676b9d2e5b15bb803bcd3", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -11,6 +11,7 @@ note: function defined here, with 1 generic parameter: `T`\n    |\n LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n    |    ^^^ -\n+   = note: `impl Trait` cannot be explicitly specified as a generic argument\n \n error: aborting due to previous error\n "}, {"sha": "62b7b79538c612c9ff3a8767acf1bcc8172bf652", "filename": "src/test/ui/issues/issue-17904-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -5,7 +5,6 @@ LL | struct Foo<T> where T: Copy;\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to previous error\n "}, {"sha": "895479986f1d1a0323d5ee3cd305ed33f2ce2f74", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -22,7 +22,6 @@ LL | struct Foo<T: ?Hash> { }\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "d111406436478372eb2d350f4bae42f8f19548b6", "filename": "src/test/ui/variance/variance-unused-type-param.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -16,4 +16,13 @@ enum ListCell<T> {\n     Nil\n }\n \n+struct WithBounds<T: Sized> {}\n+//~^ ERROR parameter `T` is never used\n+\n+struct WithWhereBounds<T> where T: Sized {}\n+//~^ ERROR parameter `T` is never used\n+\n+struct WithOutlivesBounds<T: 'static> {}\n+//~^ ERROR parameter `T` is never used\n+\n fn main() {}"}, {"sha": "e612da118f058e2625650cb8964e8a5bf9255e58", "filename": "src/test/ui/variance/variance-unused-type-param.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -25,6 +25,30 @@ LL | enum ListCell<T> {\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n-error: aborting due to 3 previous errors\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/variance-unused-type-param.rs:19:19\n+   |\n+LL | struct WithBounds<T: Sized> {}\n+   |                   ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/variance-unused-type-param.rs:22:24\n+   |\n+LL | struct WithWhereBounds<T> where T: Sized {}\n+   |                        ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/variance-unused-type-param.rs:25:27\n+   |\n+LL | struct WithOutlivesBounds<T: 'static> {}\n+   |                           ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0392`."}, {"sha": "f6be550283a21876c66f6cc8b8014650a9af9abc", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a9bc947617babe3833458f3e09f3d6d5e3d736/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=d5a9bc947617babe3833458f3e09f3d6d5e3d736", "patch": "@@ -10,8 +10,8 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0279\", \"E0280\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0514\", \"E0519\",\n-    \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0279\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0514\", \"E0519\", \"E0523\",\n+    \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}