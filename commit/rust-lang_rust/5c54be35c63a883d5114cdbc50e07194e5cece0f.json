{"sha": "5c54be35c63a883d5114cdbc50e07194e5cece0f", "node_id": "C_kwDOAAsO6NoAKDVjNTRiZTM1YzYzYTg4M2Q1MTE0Y2RiYzUwZTA3MTk0ZTVjZWNlMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T15:09:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T15:09:59Z"}, "message": "Auto merge of #100195 - matthiaskrgr:rollup-ovzyyb0, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #100094 (Detect type mismatch due to loop that might never iterate)\n - #100132 (Use (actually) dummy place for let-else divergence)\n - #100167 (Recover `require`, `include` instead of `use` in item)\n - #100193 (Remove more Clean trait implementations)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e53022b20d73d8044fb1e2df52f79f67ed027e53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e53022b20d73d8044fb1e2df52f79f67ed027e53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c54be35c63a883d5114cdbc50e07194e5cece0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c54be35c63a883d5114cdbc50e07194e5cece0f", "html_url": "https://github.com/rust-lang/rust/commit/5c54be35c63a883d5114cdbc50e07194e5cece0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c54be35c63a883d5114cdbc50e07194e5cece0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b04847400effd127ced322d5627c0c1aec2998", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b04847400effd127ced322d5627c0c1aec2998", "html_url": "https://github.com/rust-lang/rust/commit/76b04847400effd127ced322d5627c0c1aec2998"}, {"sha": "811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a", "html_url": "https://github.com/rust-lang/rust/commit/811b0368aab849fb53f66e7ce7bec7a56e4c2f8a"}], "stats": {"total": 235, "additions": 182, "deletions": 53}, "files": [{"sha": "cefb5f36b6a9433a0a0d89c650e7c058ae83f4a7", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -2334,7 +2334,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // This place is not really used because this destination place\n         // should never be used to take values at the end of the failure\n         // block.\n-        let dummy_place = Place { local: RETURN_PLACE, projection: ty::List::empty() };\n+        let dummy_place = self.temp(self.tcx.types.never, else_block.span);\n         let failure_block;\n         unpack!(\n             failure_block = self.ast_block("}, {"sha": "72c23776d339918c69e565fae592b2c287ce6271", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -271,7 +271,10 @@ impl<'a> Parser<'a> {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis, has_bang)?\n         } else if self.isnt_macro_invocation()\n-            && (self.token.is_ident_named(sym::import) || self.token.is_ident_named(sym::using))\n+            && (self.token.is_ident_named(sym::import)\n+                || self.token.is_ident_named(sym::using)\n+                || self.token.is_ident_named(sym::include)\n+                || self.token.is_ident_named(sym::require))\n         {\n             return self.recover_import_as_use();\n         } else if self.isnt_macro_invocation() && vis.kind.is_pub() {"}, {"sha": "f81a69c1cce0ad0ea2f7887db536c0c97dbabef1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -1170,6 +1170,7 @@ symbols! {\n         repr_packed,\n         repr_simd,\n         repr_transparent,\n+        require,\n         residual,\n         result,\n         rhs,"}, {"sha": "0b63b4a63c92ca01e265cafbc0e24e7698b9c66f", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -38,10 +38,12 @@\n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n use rustc_errors::{\n-    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::Expr;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n use rustc_infer::traits::{Obligation, TraitEngine, TraitEngineExt};\n@@ -87,6 +89,19 @@ impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {\n \n type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;\n \n+struct CollectRetsVisitor<'tcx> {\n+    ret_exprs: Vec<&'tcx hir::Expr<'tcx>>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CollectRetsVisitor<'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        if let hir::ExprKind::Ret(_) = expr.kind {\n+            self.ret_exprs.push(expr);\n+        }\n+        intravisit::walk_expr(self, expr);\n+    }\n+}\n+\n /// Coercing a mutable reference to an immutable works, while\n /// coercing `&T` to `&mut T` should be forbidden.\n fn coerce_mutbls<'tcx>(\n@@ -1481,6 +1496,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n                 let mut err;\n                 let mut unsized_return = false;\n+                let mut visitor = CollectRetsVisitor { ret_exprs: vec![] };\n                 match *cause.code() {\n                     ObligationCauseCode::ReturnNoExpression => {\n                         err = struct_span_err!(\n@@ -1506,6 +1522,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         if !fcx.tcx.features().unsized_locals {\n                             unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n                         }\n+                        if let Some(expression) = expression\n+                            && let hir::ExprKind::Loop(loop_blk, ..) = expression.kind {\n+                              intravisit::walk_block(& mut visitor, loop_blk);\n+                        }\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n                         err = self.report_return_mismatched_types(\n@@ -1551,12 +1571,39 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     );\n                 }\n \n+                if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {\n+                    self.note_unreachable_loop_return(&mut err, &expr, &visitor.ret_exprs);\n+                }\n                 err.emit_unless(unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.ty_error());\n             }\n         }\n     }\n+    fn note_unreachable_loop_return<'a>(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a, ErrorGuaranteed>,\n+        expr: &hir::Expr<'tcx>,\n+        ret_exprs: &Vec<&'tcx hir::Expr<'tcx>>,\n+    ) {\n+        let hir::ExprKind::Loop(_, _, _, loop_span) = expr.kind else { return;};\n+        let mut span: MultiSpan = vec![loop_span].into();\n+        span.push_span_label(loop_span, \"this might have zero elements to iterate on\".to_string());\n+        for ret_expr in ret_exprs {\n+            span.push_span_label(\n+                ret_expr.span,\n+                \"if the loop doesn't execute, this value would never get returned\".to_string(),\n+            );\n+        }\n+        err.span_note(\n+            span,\n+            \"the function expects a value to always be returned, but loops might run zero times\",\n+        );\n+        err.help(\n+            \"return a value for the case when the loop has zero elements to iterate on, or \\\n+           consider changing the return type to account for that possibility\",\n+        );\n+    }\n \n     fn report_return_mismatched_types<'a>(\n         &self,"}, {"sha": "5fb9747a944d1ec27b2cf25f2183623b990ec08d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -126,40 +126,40 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n-        Some(match *self {\n-            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n-            hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n-                let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n-\n-                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n-\n-                let generic_args = generic_args.clean(cx);\n-                let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n-                else {\n-                    bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n-                };\n+fn clean_generic_bound<'tcx>(\n+    bound: &hir::GenericBound<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<GenericBound> {\n+    Some(match *bound {\n+        hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n+        hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n+            let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n+\n+            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n+\n+            let generic_args = generic_args.clean(cx);\n+            let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n+            else {\n+                bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n+            };\n \n-                let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n-                GenericBound::TraitBound(\n-                    PolyTrait { trait_, generic_params: vec![] },\n-                    hir::TraitBoundModifier::None,\n-                )\n+            let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n+            GenericBound::TraitBound(\n+                PolyTrait { trait_, generic_params: vec![] },\n+                hir::TraitBoundModifier::None,\n+            )\n+        }\n+        hir::GenericBound::Trait(ref t, modifier) => {\n+            // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+            if modifier == hir::TraitBoundModifier::MaybeConst\n+                && cx.tcx.lang_items().destruct_trait() == Some(t.trait_ref.trait_def_id().unwrap())\n+            {\n+                return None;\n             }\n-            hir::GenericBound::Trait(ref t, modifier) => {\n-                // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n-                if modifier == hir::TraitBoundModifier::MaybeConst\n-                    && cx.tcx.lang_items().destruct_trait()\n-                        == Some(t.trait_ref.trait_def_id().unwrap())\n-                {\n-                    return None;\n-                }\n \n-                GenericBound::TraitBound(clean_poly_trait_ref(t, cx), modifier)\n-            }\n-        })\n-    }\n+            GenericBound::TraitBound(clean_poly_trait_ref(t, cx), modifier)\n+        }\n+    })\n }\n \n pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n@@ -207,12 +207,6 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n     )\n }\n \n-impl<'tcx> Clean<'tcx, GenericBound> for ty::PolyTraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> GenericBound {\n-        clean_poly_trait_ref_with_bindings(cx, *self, &[])\n-    }\n-}\n-\n fn clean_lifetime<'tcx>(lifetime: hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n     let def = cx.tcx.named_region(lifetime.hir_id);\n     if let Some(\n@@ -294,14 +288,14 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n                     .collect();\n                 WherePredicate::BoundPredicate {\n                     ty: clean_ty(wbp.bounded_ty, cx),\n-                    bounds: wbp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                    bounds: wbp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                     bound_params,\n                 }\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n                 lifetime: clean_lifetime(wrp.lifetime, cx),\n-                bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: wrp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n             },\n \n             hir::WherePredicate::EqPredicate(ref wrp) => WherePredicate::EqPredicate {\n@@ -349,7 +343,7 @@ fn clean_poly_trait_predicate<'tcx>(\n     let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n     Some(WherePredicate::BoundPredicate {\n         ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n-        bounds: vec![poly_trait_ref.clean(cx)],\n+        bounds: vec![clean_poly_trait_ref_with_bindings(cx, poly_trait_ref, &[])],\n         bound_params: Vec::new(),\n     })\n }\n@@ -531,7 +525,7 @@ fn clean_generic_param<'tcx>(\n                     .bounds_for_param(did)\n                     .filter(|bp| bp.origin != PredicateOrigin::WhereClause)\n                     .flat_map(|bp| bp.bounds)\n-                    .filter_map(|x| x.clean(cx))\n+                    .filter_map(|x| clean_generic_bound(x, cx))\n                     .collect()\n             } else {\n                 Vec::new()\n@@ -1041,7 +1035,7 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             }\n             hir::TraitItemKind::Type(bounds, Some(default)) => {\n                 let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n-                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n                 let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n                 AssocTypeItem(\n                     Box::new(Typedef {\n@@ -1054,7 +1048,7 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             }\n             hir::TraitItemKind::Type(bounds, None) => {\n                 let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n-                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n                 TyAssocTypeItem(Box::new(generics), bounds)\n             }\n         };\n@@ -1507,7 +1501,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::OpaqueDef(item_id, _) => {\n             let item = cx.tcx.hir().item(item_id);\n             if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n-                ImplTrait(ty.bounds.iter().filter_map(|x| x.clean(cx)).collect())\n+                ImplTrait(ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect())\n             } else {\n                 unreachable!()\n             }\n@@ -1911,7 +1905,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 kind: ConstantKind::Local { body: body_id, def_id },\n             }),\n             ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n-                bounds: ty.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                 generics: ty.generics.clean(cx),\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n@@ -1929,7 +1923,7 @@ fn clean_maybe_renamed_item<'tcx>(\n             }),\n             ItemKind::TraitAlias(generics, bounds) => TraitAliasItem(TraitAlias {\n                 generics: generics.clean(cx),\n-                bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n             }),\n             ItemKind::Union(ref variant_data, generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n@@ -1961,7 +1955,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                     def_id,\n                     items,\n                     generics: generics.clean(cx),\n-                    bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                    bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                 })\n             }\n             ItemKind::ExternCrate(orig_name) => {\n@@ -2241,7 +2235,7 @@ fn clean_type_binding<'tcx>(\n                 TypeBindingKind::Equality { term: clean_hir_term(term, cx) }\n             }\n             hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n-                bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|b| clean_generic_bound(b, cx)).collect(),\n             },\n         },\n     }"}, {"sha": "a8aae76f4fcb3775a04dcee6970ef4e1e0b03272", "filename": "src/test/ui/did_you_mean/use_instead_of_import.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -6,10 +6,18 @@ use std::{\n     rc::Rc,\n };\n \n+use std::time::Duration;\n+//~^ ERROR expected item, found `require`\n+\n+use std::time::Instant;\n+//~^ ERROR expected item, found `include`\n+\n pub use std::io;\n //~^ ERROR expected item, found `using`\n \n fn main() {\n     let x = Rc::new(1);\n     let _ = write!(io::stdout(), \"{:?}\", x);\n+    let _ = Duration::new(5, 0);\n+    let _ = Instant::now();\n }"}, {"sha": "2db7c24075219f06c91a7d17e6113b5941fedf4d", "filename": "src/test/ui/did_you_mean/use_instead_of_import.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -6,10 +6,18 @@ import std::{\n     rc::Rc,\n };\n \n+require std::time::Duration;\n+//~^ ERROR expected item, found `require`\n+\n+include std::time::Instant;\n+//~^ ERROR expected item, found `include`\n+\n pub using std::io;\n //~^ ERROR expected item, found `using`\n \n fn main() {\n     let x = Rc::new(1);\n     let _ = write!(io::stdout(), \"{:?}\", x);\n+    let _ = Duration::new(5, 0);\n+    let _ = Instant::now();\n }"}, {"sha": "2aac8f68c5ebd96c849385ba49263a33051af941", "filename": "src/test/ui/did_you_mean/use_instead_of_import.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -4,11 +4,23 @@ error: expected item, found `import`\n LL | import std::{\n    | ^^^^^^ help: items are imported using the `use` keyword\n \n+error: expected item, found `require`\n+  --> $DIR/use_instead_of_import.rs:9:1\n+   |\n+LL | require std::time::Duration;\n+   | ^^^^^^^ help: items are imported using the `use` keyword\n+\n+error: expected item, found `include`\n+  --> $DIR/use_instead_of_import.rs:12:1\n+   |\n+LL | include std::time::Instant;\n+   | ^^^^^^^ help: items are imported using the `use` keyword\n+\n error: expected item, found `using`\n-  --> $DIR/use_instead_of_import.rs:9:5\n+  --> $DIR/use_instead_of_import.rs:15:5\n    |\n LL | pub using std::io;\n    |     ^^^^^ help: items are imported using the `use` keyword\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "e79f6a75fdec5df51c0cb9b48aea32af9f6cd0f8", "filename": "src/test/ui/for-loop-while/break-while-condition.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-while-condition.stderr?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -31,6 +31,14 @@ LL | |             }\n    |\n    = note:   expected type `!`\n            found unit type `()`\n+note: the function expects a value to always be returned, but loops might run zero times\n+  --> $DIR/break-while-condition.rs:24:13\n+   |\n+LL |             while false {\n+   |             ^^^^^^^^^^^ this might have zero elements to iterate on\n+LL |                 return\n+   |                 ------ if the loop doesn't execute, this value would never get returned\n+   = help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e393deab764f326064fd2044360defd7d7a6e0b7", "filename": "src/test/ui/let-else/issue-100103.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -0,0 +1,15 @@\n+// edition:2021\n+// check-pass\n+\n+#![feature(try_blocks)]\n+#![feature(let_else)]\n+\n+fn main() {\n+    let _: Result<i32, i32> = try {\n+        let Some(x) = Some(0) else {\n+            Err(1)?\n+        };\n+\n+        x\n+    };\n+}"}, {"sha": "2553824bbfebb64720ac106dfd9f46e6d6a2534b", "filename": "src/test/ui/typeck/issue-98982.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.rs?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -0,0 +1,9 @@\n+fn foo() -> i32 {\n+    for i in 0..0 {\n+    //~^ ERROR: mismatched types [E0308]\n+        return i;\n+    }\n+    //~| help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n+}\n+\n+fn main() {}"}, {"sha": "3c9806ac965fbc631f6c579805d814d5ee13ab5d", "filename": "src/test/ui/typeck/issue-98982.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c54be35c63a883d5114cdbc50e07194e5cece0f/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-98982.stderr?ref=5c54be35c63a883d5114cdbc50e07194e5cece0f", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-98982.rs:2:5\n+   |\n+LL |   fn foo() -> i32 {\n+   |               --- expected `i32` because of return type\n+LL | /     for i in 0..0 {\n+LL | |\n+LL | |         return i;\n+LL | |     }\n+   | |_____^ expected `i32`, found `()`\n+   |\n+note: the function expects a value to always be returned, but loops might run zero times\n+  --> $DIR/issue-98982.rs:2:5\n+   |\n+LL |     for i in 0..0 {\n+   |     ^^^^^^^^^^^^^ this might have zero elements to iterate on\n+LL |\n+LL |         return i;\n+   |         -------- if the loop doesn't execute, this value would never get returned\n+   = help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}