{"sha": "e02789c9f88e27e03eb583468286c6f94bc9345e", "node_id": "C_kwDOAAsO6NoAKGUwMjc4OWM5Zjg4ZTI3ZTAzZWI1ODM0NjgyODZjNmY5NGJjOTM0NWU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-13T00:21:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-27T05:58:35Z"}, "message": "Improve formatting in `associated_item!` definition.", "tree": {"sha": "93dedb751f6dca30b85922c41fb84595b772ed7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93dedb751f6dca30b85922c41fb84595b772ed7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e02789c9f88e27e03eb583468286c6f94bc9345e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e02789c9f88e27e03eb583468286c6f94bc9345e", "html_url": "https://github.com/rust-lang/rust/commit/e02789c9f88e27e03eb583468286c6f94bc9345e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e02789c9f88e27e03eb583468286c6f94bc9345e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61a85eb24ba6b65d48de1392d7021d15886223f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61a85eb24ba6b65d48de1392d7021d15886223f", "html_url": "https://github.com/rust-lang/rust/commit/a61a85eb24ba6b65d48de1392d7021d15886223f"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "ce1e50ebfafba8b7bcca1d695196e8ca5321b69f", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e02789c9f88e27e03eb583468286c6f94bc9345e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02789c9f88e27e03eb583468286c6f94bc9345e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=e02789c9f88e27e03eb583468286c6f94bc9345e", "patch": "@@ -8,34 +8,25 @@ use super::client::HandleStore;\n /// Declare an associated item of one of the traits below, optionally\n /// adjusting it (i.e., adding bounds to types and default bodies to methods).\n macro_rules! associated_item {\n-    (type FreeFunctions) =>\n-        (type FreeFunctions: 'static;);\n-    (type TokenStream) =>\n-        (type TokenStream: 'static + Clone;);\n-    (type TokenStreamBuilder) =>\n-        (type TokenStreamBuilder: 'static;);\n-    (type TokenStreamIter) =>\n-        (type TokenStreamIter: 'static + Clone;);\n-    (type Group) =>\n-        (type Group: 'static + Clone;);\n-    (type Punct) =>\n-        (type Punct: 'static + Copy + Eq + Hash;);\n-    (type Ident) =>\n-        (type Ident: 'static + Copy + Eq + Hash;);\n-    (type Literal) =>\n-        (type Literal: 'static + Clone;);\n-    (type SourceFile) =>\n-        (type SourceFile: 'static + Clone;);\n-    (type MultiSpan) =>\n-        (type MultiSpan: 'static;);\n-    (type Diagnostic) =>\n-        (type Diagnostic: 'static;);\n-    (type Span) =>\n-        (type Span: 'static + Copy + Eq + Hash;);\n+    (type FreeFunctions) => (type FreeFunctions: 'static;);\n+    (type TokenStream) => (type TokenStream: 'static + Clone;);\n+    (type TokenStreamBuilder) => (type TokenStreamBuilder: 'static;);\n+    (type TokenStreamIter) => (type TokenStreamIter: 'static + Clone;);\n+    (type Group) => (type Group: 'static + Clone;);\n+    (type Punct) => (type Punct: 'static + Copy + Eq + Hash;);\n+    (type Ident) => (type Ident: 'static + Copy + Eq + Hash;);\n+    (type Literal) => (type Literal: 'static + Clone;);\n+    (type SourceFile) => (type SourceFile: 'static + Clone;);\n+    (type MultiSpan) => (type MultiSpan: 'static;);\n+    (type Diagnostic) => (type Diagnostic: 'static;);\n+    (type Span) => (type Span: 'static + Copy + Eq + Hash;);\n+\n     (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>\n         (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });\n+\n     (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>\n         (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });\n+\n     ($($item:tt)*) => ($($item)*;)\n }\n "}]}