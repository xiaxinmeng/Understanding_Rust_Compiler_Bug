{"sha": "0e3af6af4708b38065688c6bc4462a916083aff7", "node_id": "C_kwDOAAsO6NoAKDBlM2FmNmFmNDcwOGIzODA2NTY4OGM2YmM0NDYyYTkxNjA4M2FmZjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-07T16:57:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-07T16:57:17Z"}, "message": "Rollup merge of #107709 - tialaramex:master, r=compiler-errors\n\nFix problem noticed in PR106859 with char -> u8 suggestion\n\nHN reader `@ayosec` noticed that my #106859 a few weeks back, malfunctions if you have a Unicode escape, the code suggested b'\\u{0}' if you tried to use '\\u{0}' where a byte should be, when of course b'\\u{0}' is not a byte literal, regardless of the codepoint you can't write Unicode escapes in a byte literal at all.\n\nMy proposed fix here just checks that the \"character\" you wrote is fewer than 5 bytes, thus allowing \\x7F and similar escapes but conveniently forbidding even the smallest Unicode escape \\u{0} before offering the suggestion as before.\n\nI have provided an updated test which includes examples which do and don't work because of this additional rule.", "tree": {"sha": "7e8ed8d904d362bc4b1cfb4ea28e8151eafa4c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8ed8d904d362bc4b1cfb4ea28e8151eafa4c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3af6af4708b38065688c6bc4462a916083aff7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4oLtCRBK7hj4Ov3rIwAA1U8IACaX4bn8E/hGMruKPRW2k/VT\ntPOhOneTVspyhimt0aH4XjdHeT0OetZ2bGZLwrvFX1DzlMDuxExzoPbvfJ2mbulB\nGOYHWAXyqPDEJnhJ2DBNJkOOONoxv+hJOTBIsX2O354MRP7692qz1OO8zhG+WL46\nae+wj3QDUphagjVW8UmbczpLBuGbWoNnNINwCJH/RGRyu3p/gqVBl9bqgxYgFwXB\nMpRyE1SYsu11H3XLah8D5y4n5zcvR+L+TI95YvqKYmLAVEXq/AUUUan9fRlb0Zgt\nR6HAmXeWENOG/AdjikEHJ9mGQDZTQllbsFrBof6tpkSkyzBQ3J4MYH9KUj+SuKg=\n=fxYL\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e8ed8d904d362bc4b1cfb4ea28e8151eafa4c59\nparent e45984b7746737feeef1dffe403475b2cc4e68cd\nparent 747cdc0dfd784c280d50ad50661a1f00a2677842\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675789037 +0100\ncommitter GitHub <noreply@github.com> 1675789037 +0100\n\nRollup merge of #107709 - tialaramex:master, r=compiler-errors\n\nFix problem noticed in PR106859 with char -> u8 suggestion\n\nHN reader `@ayosec` noticed that my #106859 a few weeks back, malfunctions if you have a Unicode escape, the code suggested b'\\u{0}' if you tried to use '\\u{0}' where a byte should be, when of course b'\\u{0}' is not a byte literal, regardless of the codepoint you can't write Unicode escapes in a byte literal at all.\n\nMy proposed fix here just checks that the \"character\" you wrote is fewer than 5 bytes, thus allowing \\x7F and similar escapes but conveniently forbidding even the smallest Unicode escape \\u{0} before offering the suggestion as before.\n\nI have provided an updated test which includes examples which do and don't work because of this additional rule.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3af6af4708b38065688c6bc4462a916083aff7", "html_url": "https://github.com/rust-lang/rust/commit/0e3af6af4708b38065688c6bc4462a916083aff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3af6af4708b38065688c6bc4462a916083aff7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45984b7746737feeef1dffe403475b2cc4e68cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45984b7746737feeef1dffe403475b2cc4e68cd", "html_url": "https://github.com/rust-lang/rust/commit/e45984b7746737feeef1dffe403475b2cc4e68cd"}, {"sha": "747cdc0dfd784c280d50ad50661a1f00a2677842", "url": "https://api.github.com/repos/rust-lang/rust/commits/747cdc0dfd784c280d50ad50661a1f00a2677842", "html_url": "https://github.com/rust-lang/rust/commit/747cdc0dfd784c280d50ad50661a1f00a2677842"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "86f3174b7b2bb25e9c82d410761a445a4a5760f9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e3af6af4708b38065688c6bc4462a916083aff7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3af6af4708b38065688c6bc4462a916083aff7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0e3af6af4708b38065688c6bc4462a916083aff7", "patch": "@@ -1922,7 +1922,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (ty::Uint(ty::UintTy::U8), ty::Char) => {\n                             if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n                                 && let Some(code) = code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n-                                && code.chars().next().map_or(false, |c| c.is_ascii())\n+                                && !code.starts_with(\"\\\\u\") // forbid all Unicode escapes\n+                                && code.chars().next().map_or(false, |c| c.is_ascii()) // forbids literal Unicode characters beyond ASCII\n                             {\n                                 err.span_suggestion(\n                                     span,"}, {"sha": "80cd2ca7dfc9afd0e7f732c47ed84f8d61b2af9c", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e3af6af4708b38065688c6bc4462a916083aff7/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3af6af4708b38065688c6bc4462a916083aff7/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs?ref=0e3af6af4708b38065688c6bc4462a916083aff7", "patch": "@@ -12,7 +12,19 @@ fn main() {\n     //~^ ERROR: mismatched types [E0308]\n     //~| HELP: if you meant to write a byte literal, prefix with `b`\n \n+    let _a: u8 = '\\x20';\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: if you meant to write a byte literal, prefix with `b`\n+\n+    // Do not issue the suggestion if the char literal is a Unicode escape\n+    foo('\\u{0080}');\n+    //~^ ERROR: mismatched types [E0308]\n+\n     // Do not issue the suggestion if the char literal isn't ASCII\n     let _t: u8 = '\u20ac';\n     //~^ ERROR: mismatched types [E0308]\n+\n+    // Do not issue the suggestion if the char literal isn't ASCII\n+    foo('\\u{1f980}');\n+    //~^ ERROR: mismatched types [E0308]\n }"}, {"sha": "3d27149f0dcf13704a737b6541e94009b4800c7c", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.stderr", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0e3af6af4708b38065688c6bc4462a916083aff7/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e3af6af4708b38065688c6bc4462a916083aff7/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr?ref=0e3af6af4708b38065688c6bc4462a916083aff7", "patch": "@@ -30,13 +30,54 @@ LL |     foo(b'#');\n    |         ~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-byte-literal.rs:16:18\n+  --> $DIR/type-mismatch-byte-literal.rs:15:18\n+   |\n+LL |     let _a: u8 = '\\x20';\n+   |             --   ^^^^^^ expected `u8`, found `char`\n+   |             |\n+   |             expected due to this\n+   |\n+help: if you meant to write a byte literal, prefix with `b`\n+   |\n+LL |     let _a: u8 = b'\\x20';\n+   |                  ~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:20:9\n+   |\n+LL |     foo('\\u{0080}');\n+   |     --- ^^^^^^^^^^ expected `u8`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch-byte-literal.rs:4:4\n+   |\n+LL | fn foo(_t: u8) {}\n+   |    ^^^ ------\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:24:18\n    |\n LL |     let _t: u8 = '\u20ac';\n    |             --   ^^^ expected `u8`, found `char`\n    |             |\n    |             expected due to this\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:28:9\n+   |\n+LL |     foo('\\u{1f980}');\n+   |     --- ^^^^^^^^^^^ expected `u8`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch-byte-literal.rs:4:4\n+   |\n+LL | fn foo(_t: u8) {}\n+   |    ^^^ ------\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}