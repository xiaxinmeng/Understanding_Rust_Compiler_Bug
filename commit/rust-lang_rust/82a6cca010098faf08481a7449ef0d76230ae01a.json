{"sha": "82a6cca010098faf08481a7449ef0d76230ae01a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYTZjY2EwMTAwOThmYWYwODQ4MWE3NDQ5ZWYwZDc2MjMwYWUwMWE=", "commit": {"author": {"name": "Sinh Pham", "email": "phamansinh@gmail.com", "date": "2015-10-17T18:35:47Z"}, "committer": {"name": "Sinh Pham", "email": "phamansinh@gmail.com", "date": "2015-10-17T18:35:47Z"}, "message": "Refactor write_snippet", "tree": {"sha": "fb1455ac94561ecd939731f46c5dd05024abaf99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb1455ac94561ecd939731f46c5dd05024abaf99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82a6cca010098faf08481a7449ef0d76230ae01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82a6cca010098faf08481a7449ef0d76230ae01a", "html_url": "https://github.com/rust-lang/rust/commit/82a6cca010098faf08481a7449ef0d76230ae01a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82a6cca010098faf08481a7449ef0d76230ae01a/comments", "author": {"login": "sinhpham", "id": 633331, "node_id": "MDQ6VXNlcjYzMzMzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/633331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinhpham", "html_url": "https://github.com/sinhpham", "followers_url": "https://api.github.com/users/sinhpham/followers", "following_url": "https://api.github.com/users/sinhpham/following{/other_user}", "gists_url": "https://api.github.com/users/sinhpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinhpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinhpham/subscriptions", "organizations_url": "https://api.github.com/users/sinhpham/orgs", "repos_url": "https://api.github.com/users/sinhpham/repos", "events_url": "https://api.github.com/users/sinhpham/events{/privacy}", "received_events_url": "https://api.github.com/users/sinhpham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinhpham", "id": 633331, "node_id": "MDQ6VXNlcjYzMzMzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/633331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinhpham", "html_url": "https://github.com/sinhpham", "followers_url": "https://api.github.com/users/sinhpham/followers", "following_url": "https://api.github.com/users/sinhpham/following{/other_user}", "gists_url": "https://api.github.com/users/sinhpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinhpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinhpham/subscriptions", "organizations_url": "https://api.github.com/users/sinhpham/orgs", "repos_url": "https://api.github.com/users/sinhpham/repos", "events_url": "https://api.github.com/users/sinhpham/events{/privacy}", "received_events_url": "https://api.github.com/users/sinhpham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00aa232834e112ec7f96cf8cd8b90c850f12e0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00aa232834e112ec7f96cf8cd8b90c850f12e0d5", "html_url": "https://github.com/rust-lang/rust/commit/00aa232834e112ec7f96cf8cd8b90c850f12e0d5"}], "stats": {"total": 41, "additions": 10, "deletions": 31}, "files": [{"sha": "57b63b56790a03869df8a367e1e30f93426741c4", "filename": "src/missed_spans.rs", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/82a6cca010098faf08481a7449ef0d76230ae01a/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a6cca010098faf08481a7449ef0d76230ae01a/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=82a6cca010098faf08481a7449ef0d76230ae01a", "patch": "@@ -59,43 +59,22 @@ impl<'a> FmtVisitor<'a> {\n         let span = codemap::mk_sp(start, end);\n         let snippet = self.snippet(span);\n \n-        self.write_snippet(&snippet, true, &process_last_snippet);\n+        self.write_snippet(&snippet, &process_last_snippet);\n     }\n \n     fn write_snippet<F: Fn(&mut FmtVisitor, &str, &str)>(&mut self,\n                                                          snippet: &str,\n-                                                         last_snippet: bool,\n                                                          process_last_snippet: F) {\n-        // Trim whitespace from the right hand side of each line.\n-        // Annoyingly, the library functions for splitting by lines etc. are not\n-        // quite right, so we must do it ourselves.\n-        let mut line_start = 0;\n-        let mut last_wspace = None;\n-        for (i, c) in snippet.char_indices() {\n-            if c == '\\n' {\n-                if let Some(lw) = last_wspace {\n-                    self.buffer.push_str(&snippet[line_start..lw]);\n-                    self.buffer.push_str(\"\\n\");\n-                } else {\n-                    self.buffer.push_str(&snippet[line_start..i + 1]);\n-                }\n-\n-                line_start = i + 1;\n-                last_wspace = None;\n-            } else {\n-                if c.is_whitespace() {\n-                    if last_wspace.is_none() {\n-                        last_wspace = Some(i);\n-                    }\n-                } else {\n-                    last_wspace = None;\n-                }\n-            }\n-        }\n-        if last_snippet {\n-            process_last_snippet(self, &snippet[line_start..], snippet);\n+        let mut lines: Vec<&str> = snippet.lines().collect();\n+        let last_snippet = if snippet.ends_with(\"\\n\") {\n+            \"\"\n         } else {\n-            self.buffer.push_str(&snippet[line_start..]);\n+            lines.pop().unwrap()\n+        };\n+        for line in lines.iter() {\n+            self.buffer.push_str(line.trim_right());\n+            self.buffer.push_str(\"\\n\");\n         }\n+        process_last_snippet(self, &last_snippet, snippet);\n     }\n }"}]}