{"sha": "e20549ff192edec9d625f1119bcb077c3abaf070", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMDU0OWZmMTkyZWRlYzlkNjI1ZjExMTliY2IwNzdjM2FiYWYwNzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-10T21:43:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-17T21:57:53Z"}, "message": "librustc: Remove all uses of the `Copy` bound.", "tree": {"sha": "9cf88e584f36dc0d7f9f29a2fae55f0203bbc39c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf88e584f36dc0d7f9f29a2fae55f0203bbc39c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20549ff192edec9d625f1119bcb077c3abaf070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20549ff192edec9d625f1119bcb077c3abaf070", "html_url": "https://github.com/rust-lang/rust/commit/e20549ff192edec9d625f1119bcb077c3abaf070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20549ff192edec9d625f1119bcb077c3abaf070/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d44d24c7744361b352499b5f54b8f0bab876ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d44d24c7744361b352499b5f54b8f0bab876ec", "html_url": "https://github.com/rust-lang/rust/commit/99d44d24c7744361b352499b5f54b8f0bab876ec"}], "stats": {"total": 493, "additions": 213, "deletions": 280}, "files": [{"sha": "74ebf525e00a83784cf1eea816105dff6862b344", "filename": "src/libextra/par.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -85,7 +85,7 @@ fn map_slices<A:Clone + Send,B:Clone + Send>(\n }\n \n /// A parallel version of map.\n-pub fn map<A:Copy + Clone + Send,B:Copy + Clone + Send>(\n+pub fn map<A:Clone + Send,B:Clone + Send>(\n     xs: &[A], fn_factory: &fn() -> ~fn(&A) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         let f = fn_factory();\n@@ -96,7 +96,7 @@ pub fn map<A:Copy + Clone + Send,B:Copy + Clone + Send>(\n }\n \n /// A parallel version of mapi.\n-pub fn mapi<A:Copy + Clone + Send,B:Copy + Clone + Send>(\n+pub fn mapi<A:Clone + Send,B:Clone + Send>(\n         xs: &[A],\n         fn_factory: &fn() -> ~fn(uint, &A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {"}, {"sha": "53db93313a6e45f39e0afd6c01541e98f457186c", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -650,10 +650,7 @@ impl<\n     }\n }\n \n-impl<\n-    S: Encoder,\n-    T: Encodable<S> + Copy\n-> Encodable<S> for DList<T> {\n+impl<S: Encoder, T: Encodable<S>> Encodable<S> for @mut DList<T> {\n     fn encode(&self, s: &mut S) {\n         do s.emit_seq(self.len()) |s| {\n             let mut i = 0;"}, {"sha": "a11b819dda115c3266b8aa7893dd56ea7f391f9a", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -24,12 +24,12 @@ type Le<'self, T> = &'self fn(v1: &T, v2: &T) -> bool;\n  * Has worst case O(n log n) performance, best case O(n), but\n  * is not space efficient. This is a stable sort.\n  */\n-pub fn merge_sort<T:Copy + Clone>(v: &[T], le: Le<T>) -> ~[T] {\n+pub fn merge_sort<T:Clone>(v: &[T], le: Le<T>) -> ~[T] {\n     type Slice = (uint, uint);\n \n     return merge_sort_(v, (0u, v.len()), le);\n \n-    fn merge_sort_<T:Copy + Clone>(v: &[T], slice: Slice, le: Le<T>) -> ~[T] {\n+    fn merge_sort_<T:Clone>(v: &[T], slice: Slice, le: Le<T>) -> ~[T] {\n         let begin = slice.first();\n         let end = slice.second();\n \n@@ -44,7 +44,7 @@ pub fn merge_sort<T:Copy + Clone>(v: &[T], le: Le<T>) -> ~[T] {\n                                     merge_sort_(v, b, |x,y| le(x,y)));\n     }\n \n-    fn merge<T:Copy + Clone>(le: Le<T>, a: &[T], b: &[T]) -> ~[T] {\n+    fn merge<T:Clone>(le: Le<T>, a: &[T], b: &[T]) -> ~[T] {\n         let mut rs = vec::with_capacity(a.len() + b.len());\n         let a_len = a.len();\n         let mut a_ix = 0;\n@@ -183,7 +183,7 @@ static MIN_GALLOP: uint = 7;\n static INITIAL_TMP_STORAGE: uint = 128;\n \n #[allow(missing_doc)]\n-pub fn tim_sort<T:Copy + Clone + Ord>(array: &mut [T]) {\n+pub fn tim_sort<T:Clone + Ord>(array: &mut [T]) {\n     let size = array.len();\n     if size < 2 {\n         return;\n@@ -227,7 +227,7 @@ pub fn tim_sort<T:Copy + Clone + Ord>(array: &mut [T]) {\n     ms.merge_force_collapse(array);\n }\n \n-fn binarysort<T:Copy + Clone + Ord>(array: &mut [T], start: uint) {\n+fn binarysort<T:Clone + Ord>(array: &mut [T], start: uint) {\n     let size = array.len();\n     let mut start = start;\n     assert!(start <= size);\n@@ -419,7 +419,7 @@ fn MergeState<T>() -> MergeState<T> {\n     }\n }\n \n-impl<T:Copy + Clone + Ord> MergeState<T> {\n+impl<T:Clone + Ord> MergeState<T> {\n     fn push_run(&mut self, run_base: uint, run_len: uint) {\n         let tmp = RunState{base: run_base, len: run_len};\n         self.runs.push(tmp);\n@@ -739,10 +739,7 @@ fn copy_vec<T:Clone>(dest: &mut [T],\n }\n \n #[inline]\n-fn shift_vec<T:Copy + Clone>(dest: &mut [T],\n-                             s1: uint,\n-                             s2: uint,\n-                             len: uint) {\n+fn shift_vec<T:Clone>(dest: &mut [T], s1: uint, s2: uint, len: uint) {\n     assert!(s1+len <= dest.len());\n \n     let tmp = dest.slice(s2, s2+len).to_owned();"}, {"sha": "1cfbeb9e514dda1f5eb9e5916c79e93ab94ff850", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -118,10 +118,8 @@ pub fn sleep(iotask: &IoTask, msecs: uint) {\n  * on the provided port in the allotted timeout period, then the result will\n  * be a `Some(T)`. If not, then `None` will be returned.\n  */\n-pub fn recv_timeout<T:Copy + Send>(iotask: &IoTask,\n-                                   msecs: uint,\n-                                   wait_po: &Port<T>)\n-                                   -> Option<T> {\n+pub fn recv_timeout<T:Send>(iotask: &IoTask, msecs: uint, wait_po: &Port<T>)\n+                            -> Option<T> {\n     let (timeout_po, timeout_ch) = stream::<()>();\n     let mut timeout_po = timeout_po;\n     delayed_send(iotask, msecs, &timeout_ch, ());"}, {"sha": "bc97ef0e8ca4d9541334773323127dfc25f1f05c", "filename": "src/librust/rust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -43,19 +43,19 @@ impl ValidUsage {\n     }\n }\n \n-enum Action<'self> {\n-    Call(&'self fn:Copy(args: &[~str]) -> ValidUsage),\n-    CallMain(&'static str, &'self fn:Copy()),\n+enum Action {\n+    Call(extern \"Rust\" fn(args: &[~str]) -> ValidUsage),\n+    CallMain(&'static str, extern \"Rust\" fn()),\n }\n \n enum UsageSource<'self> {\n     UsgStr(&'self str),\n-    UsgCall(&'self fn:Copy()),\n+    UsgCall(extern \"Rust\" fn()),\n }\n \n struct Command<'self> {\n     cmd: &'self str,\n-    action: Action<'self>,\n+    action: Action,\n     usage_line: &'self str,\n     usage_full: UsageSource<'self>,\n }"}, {"sha": "e85b3239e805559bd6e706f7b76b60d4501d4c64", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -199,8 +199,9 @@ pub fn compile_rest(sess: Session,\n         //\n         // baz! should not use this definition unless foo is enabled.\n         crate = time(time_passes, ~\"std macros injection\", ||\n-                     syntax::ext::expand::inject_std_macros(sess.parse_sess, copy cfg,\n-                                                             crate));\n+                     syntax::ext::expand::inject_std_macros(sess.parse_sess,\n+                                                            cfg.clone(),\n+                                                            crate));\n \n         crate = time(time_passes, ~\"configuration 1\", ||\n                      front::config::strip_unconfigured_items(crate));"}, {"sha": "6865428cd69a7666bd708759c098bc09ebe82fe7", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -37,7 +37,7 @@ fn no_prelude(attrs: &[ast::attribute]) -> bool {\n }\n \n fn inject_libstd_ref(sess: Session, crate: &ast::crate) -> @ast::crate {\n-    fn spanned<T:Copy>(x: T) -> codemap::spanned<T> {\n+    fn spanned<T>(x: T) -> codemap::spanned<T> {\n         codemap::spanned { node: x, span: dummy_sp() }\n     }\n "}, {"sha": "e83c5ff6d10950796684051df1263ed2ceea51fc", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -343,7 +343,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::item {\n     return @item;\n }\n \n-fn nospan<T:Copy>(t: T) -> codemap::spanned<T> {\n+fn nospan<T>(t: T) -> codemap::spanned<T> {\n     codemap::spanned { node: t, span: dummy_sp() }\n }\n "}, {"sha": "112965127a25b84031ffd9f37a077b0a5bcd7896", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -87,7 +87,7 @@ pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n     } as @FileSearch\n }\n \n-pub fn search<T:Copy>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n+pub fn search<T>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n     let mut rslt = None;\n     for filesearch.for_each_lib_search_path() |lib_search_path| {\n         debug!(\"searching %s\", lib_search_path.to_str());"}, {"sha": "6201283939faacb60a161ff3c2a3d18184f77413", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -1282,14 +1282,14 @@ fn test_more() {\n fn test_simplification() {\n     let ext_cx = mk_ctxt();\n     let item_in = ast::ii_item(quote_item!(\n-        fn new_int_alist<B:Copy>() -> alist<int, B> {\n+        fn new_int_alist<B>() -> alist<int, B> {\n             fn eq_int(a: int, b: int) -> bool { a == b }\n             return alist {eq_fn: eq_int, data: ~[]};\n         }\n     ).get());\n     let item_out = simplify_ast(&item_in);\n     let item_exp = ast::ii_item(quote_item!(\n-        fn new_int_alist<B:Copy>() -> alist<int, B> {\n+        fn new_int_alist<B>() -> alist<int, B> {\n             return alist {eq_fn: eq_int, data: ~[]};\n         }\n     ).get());"}, {"sha": "9fb07927d9860ceb298d21803fae9a7bbf3e9914", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -561,7 +561,7 @@ pub fn each_lint(sess: session::Session,\n // This is used to make the simple visitors used for the lint passes\n // not traverse into subitems, since that is handled by the outer\n // lint visitor.\n-fn item_stopping_visitor<E: Copy>(outer: visit::vt<E>) -> visit::vt<E> {\n+fn item_stopping_visitor<E>(outer: visit::vt<E>) -> visit::vt<E> {\n     visit::mk_vt(@visit::Visitor {\n         visit_item: |_i, (_e, _v)| { },\n         visit_fn: |fk, fd, b, s, id, (e, v)| {"}, {"sha": "2c63079ad8f829c3a55e17e8d407f737032d8fd1", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -62,7 +62,7 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n \n     fn store_type_uses(cx: Context, fn_id: def_id) -> @~[type_uses] {\n         let Context { uses, ccx } = cx;\n-        let uses = @copy *uses; // freeze\n+        let uses = @(*uses).clone(); // freeze\n         ccx.type_use_cache.insert(fn_id, uses);\n         uses\n     }"}, {"sha": "8eefcb154ef221042dae12f8429209bbcaa29409", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -860,7 +860,7 @@ fn mk_rcache() -> creader_cache {\n     return @mut HashMap::new();\n }\n \n-pub fn new_ty_hash<V:Copy>() -> @mut HashMap<t, V> {\n+pub fn new_ty_hash<V>() -> @mut HashMap<t, V> {\n     @mut HashMap::new()\n }\n "}, {"sha": "4a9e0fddbe73a2ea780f5ff12c2e101beed85fa8", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -1686,10 +1686,10 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n     // through the `unpack` function.  It there is no expected type or\n     // resolution is not possible (e.g., no constraints yet present), just\n     // returns `none`.\n-    fn unpack_expected<O:Copy>(fcx: @mut FnCtxt,\n-                                expected: Option<ty::t>,\n-                                unpack: &fn(&ty::sty) -> Option<O>)\n-                             -> Option<O> {\n+    fn unpack_expected<O>(fcx: @mut FnCtxt,\n+                          expected: Option<ty::t>,\n+                          unpack: &fn(&ty::sty) -> Option<O>)\n+                          -> Option<O> {\n         match expected {\n             Some(t) => {\n                 match resolve_type(fcx.infcx(), t, force_tvar) {"}, {"sha": "16a89122a11c0f031eb898ae4a1a386b11c1d29b", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -114,7 +114,8 @@ fn build_ctxt(sess: Session,\n     use rustc::front::config;\n \n     let ast = syntax::ext::expand::inject_std_macros(sess.parse_sess,\n-                                                     copy sess.opts.cfg, ast);\n+                                                     sess.opts.cfg.clone(),\n+                                                     ast);\n     let ast = config::strip_unconfigured_items(ast);\n     let ast = syntax::ext::expand::expand_crate(sess.parse_sess,\n                                                 sess.opts.cfg.clone(),"}, {"sha": "2c6312e01b205e988f6c576b4a86857ea3d0b796", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -208,8 +208,8 @@ mod test {\n                 == ~\"impl-of-selectt-u-for-left-right\");\n         assert!(pandoc_header_id(\"impl of Condition<'self, T, U>\")\n                 == ~\"impl-of-conditionself-t-u\");\n-        assert!(pandoc_header_id(\"impl of Condition<T: Copy + Clone>\")\n-                == ~\"impl-of-conditiont-copy-clone\");\n+        assert!(pandoc_header_id(\"impl of Condition<T: Clone>\")\n+                == ~\"impl-of-conditiont-clone\");\n     }\n \n     #[test]"}, {"sha": "044ab3226053d37147e234a729a2f127c3750250", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -394,8 +394,8 @@ mod test {\n \n     #[test]\n     fn should_add_impl_bounds() {\n-        let doc = mk_doc(~\"impl<T, U: Copy, V: Copy + Clone> Option<T, U, V> { }\");\n-        assert!(doc.cratemod().impls()[0].bounds_str == Some(~\"<T, U: Copy, V: Copy + Clone>\"));\n+        let doc = mk_doc(~\"impl<T, U, V: Clone> Option<T, U, V> { }\");\n+        assert!(doc.cratemod().impls()[0].bounds_str == Some(~\"<T, U, V: Clone>\"));\n     }\n \n     #[test]"}, {"sha": "b6dabfd0b1292fa15d6f4695937899dc64ead9e7", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -839,7 +839,7 @@ fn install_check_duplicates() {\n             fail!(\"package database contains duplicate ID\");\n         }\n         else {\n-            contents.push(copy *p);\n+            contents.push((*p).clone());\n         }\n         false\n     };"}, {"sha": "f24bc002a2b1e710d3e8e48c84a5462d348fe865", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -15,10 +15,9 @@ assign them or pass them as arguments, the receiver will get a copy,\n leaving the original value in place. These types do not require\n allocation to copy and do not have finalizers (i.e. they do not\n contain owned boxes or implement `Drop`), so the compiler considers\n-them cheap and safe to copy and automatically implements the `Copy`\n-trait for them. For other types copies must be made explicitly,\n-by convention implementing the `Clone` trait and calling the\n-`clone` method.\n+them cheap and safe to copy. For other types copies must be made\n+explicitly, by convention implementing the `Clone` trait and calling\n+the `clone` method.\n \n */\n "}, {"sha": "100751370174fcbe9b209f5b2ebdbb0c930ec0fe", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -47,7 +47,7 @@ impl<T, U> Condition<T, U> {\n \n     pub fn raise(&self, t: T) -> U {\n         let msg = fmt!(\"Unhandled condition: %s: %?\", self.name, t);\n-        self.raise_default(t, || fail!(copy msg))\n+        self.raise_default(t, || fail!(msg.clone()))\n     }\n \n     pub fn raise_default(&self, t: T, default: &fn() -> U) -> U {\n@@ -78,7 +78,8 @@ impl<'self, T, U> Condition<'self, T, U> {\n     pub fn trap<'a>(&'a self, h: &'a fn(T) -> U) -> Trap<'a, T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n-            let prev = local_data::get(self.key, |k| k.map(|&x| *x));\n+            let prev = local_data::get(::cast::unsafe_copy(&self.key),\n+                                       |k| k.map(|&x| *x));\n             let h = @Handler { handle: *p, prev: prev };\n             Trap { cond: self, handler: h }\n         }\n@@ -91,7 +92,7 @@ impl<'self, T, U> Condition<'self, T, U> {\n \n     pub fn raise_default(&self, t: T, default: &fn() -> U) -> U {\n         unsafe {\n-            match local_data::pop(self.key) {\n+            match local_data::pop(::cast::unsafe_copy(&self.key)) {\n                 None => {\n                     debug!(\"Condition.raise: found no handler\");\n                     default()\n@@ -100,12 +101,15 @@ impl<'self, T, U> Condition<'self, T, U> {\n                     debug!(\"Condition.raise: found handler\");\n                     match handler.prev {\n                         None => {}\n-                        Some(hp) => local_data::set(self.key, hp)\n+                        Some(hp) => {\n+                            local_data::set(::cast::unsafe_copy(&self.key),\n+                                            hp)\n+                        }\n                     }\n                     let handle : &fn(T) -> U =\n                         ::cast::transmute(handler.handle);\n                     let u = handle(t);\n-                    local_data::set(self.key, handler);\n+                    local_data::set(::cast::unsafe_copy(&self.key), handler);\n                     u\n                 }\n             }"}, {"sha": "f2f8f46e7cd99c03470a53396108d8af02267e29", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -18,22 +18,13 @@ intrinsic properties of the type. These classifications, often called\n They cannot be implemented by user code, but are instead implemented\n by the compiler automatically for the types to which they apply.\n \n-The 3 kinds are\n-\n-* Copy - types that may be copied without allocation. This includes\n-  scalar types and managed pointers, and exludes owned pointers. It\n-  also excludes types that implement `Drop`.\n+The 2 kinds are\n \n * Send - owned types and types containing owned types.  These types\n   may be transferred across task boundaries.\n \n * Freeze - types that are deeply immutable.\n \n-`Copy` types include both implicitly copyable types that the compiler\n-will copy automatically and non-implicitly copyable types that require\n-the `copy` keyword to copy. Types that do not implement `Copy` may\n-instead implement `Clone`.\n-\n */\n \n #[allow(missing_doc)];"}, {"sha": "2c1a3bb29a09d734c4a9fb0c4c450574aaf13dad", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -59,7 +59,7 @@ use task::local_data_priv::*;\n #[cfg(not(stage0))]\n pub type Key<T> = &'static KeyValue<T>;\n #[cfg(stage0)]\n-pub type Key<'self,T> = &'self fn:Copy(v: T);\n+pub type Key<'self,T> = &'self fn(v: T);\n \n pub enum KeyValue<T> { Key }\n "}, {"sha": "fc199876902f12565fdf9359e1396d9f48db9f1c", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -16,7 +16,6 @@ use cmp::{Eq, ApproxEq, Ord};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::Option;\n-use kinds::Copy;\n \n pub mod strconv;\n \n@@ -428,7 +427,7 @@ pub trait FromStrRadix {\n /// - If code written to use this function doesn't care about it, it's\n ///   probably assuming that `x^0` always equals `1`.\n ///\n-pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(radix: uint, pow: uint) -> T {\n+pub fn pow_with_uint<T:NumCast+One+Zero+Div<T,T>+Mul<T,T>>(radix: uint, pow: uint) -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n "}, {"sha": "ab17c5f175a471a3120f10b9124f9f1dd2ec1dfd", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -16,9 +16,8 @@ use core::cmp::{Ord, Eq};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n use char;\n+use str::{StrSlice};\n use str;\n-use str::StrSlice;\n-use kinds::Copy;\n use vec::{CopyableVector, ImmutableVector, MutableVector};\n use vec::OwnedVector;\n use num::{NumCast, Zero, One, cast, pow_with_uint, Integer};\n@@ -466,7 +465,7 @@ priv static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  * - Fails if `radix` > 18 and `special == true` due to conflict\n  *   between digit and lowest first character in `inf` and `NaN`, the `'i'`.\n  */\n-pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n+pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Div<T,T>+\n                                     Mul<T,T>+Sub<T,T>+Neg<T>+Add<T,T>+\n                                     NumStrConv+Clone>(\n         buf: &[u8], radix: uint, negative: bool, fractional: bool,\n@@ -663,7 +662,7 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n  * `from_str_bytes_common()`, for details see there.\n  */\n #[inline]\n-pub fn from_str_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+Mul<T,T>+\n+pub fn from_str_common<T:NumCast+Zero+One+Eq+Ord+Div<T,T>+Mul<T,T>+\n                               Sub<T,T>+Neg<T>+Add<T,T>+NumStrConv+Clone>(\n         buf: &str, radix: uint, negative: bool, fractional: bool,\n         special: bool, exponent: ExponentFormat, empty_zero: bool,"}, {"sha": "e3e042a4947240033faab4367a948f422b743948", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -29,7 +29,7 @@ Rust's prelude has three main parts:\n \n // Reexported core operators\n pub use either::{Either, Left, Right};\n-pub use kinds::{Copy, Sized};\n+pub use kinds::Sized;\n pub use kinds::{Freeze, Send};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};"}, {"sha": "76dbc6291681702bbe43af2402d8d615cb4cceba", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -356,7 +356,7 @@ pub trait RngUtil {\n      * }\n      * ~~~\n      */\n-    fn choose<T:Copy + Clone>(&mut self, values: &[T]) -> T;\n+    fn choose<T:Clone>(&mut self, values: &[T]) -> T;\n     /// Choose Some(item) randomly, returning None if values is empty\n     fn choose_option<T:Clone>(&mut self, values: &[T]) -> Option<T>;\n     /**\n@@ -379,7 +379,7 @@ pub trait RngUtil {\n      * }\n      * ~~~\n      */\n-    fn choose_weighted<T:Copy + Clone>(&mut self, v : &[Weighted<T>]) -> T;\n+    fn choose_weighted<T:Clone>(&mut self, v : &[Weighted<T>]) -> T;\n     /**\n      * Choose Some(item) respecting the relative weights, returning none if\n      * the sum of the weights is 0\n@@ -439,7 +439,7 @@ pub trait RngUtil {\n      * }\n      * ~~~\n      */\n-    fn shuffle<T:Copy + Clone>(&mut self, values: &[T]) -> ~[T];\n+    fn shuffle<T:Clone>(&mut self, values: &[T]) -> ~[T];\n     /**\n      * Shuffle a mutable vec in place\n      *\n@@ -532,7 +532,7 @@ impl<R: Rng> RngUtil for R {\n     }\n \n     /// Choose an item randomly, failing if values is empty\n-    fn choose<T:Copy + Clone>(&mut self, values: &[T]) -> T {\n+    fn choose<T:Clone>(&mut self, values: &[T]) -> T {\n         self.choose_option(values).get()\n     }\n \n@@ -548,7 +548,7 @@ impl<R: Rng> RngUtil for R {\n      * Choose an item respecting the relative weights, failing if the sum of\n      * the weights is 0\n      */\n-    fn choose_weighted<T:Copy + Clone>(&mut self, v: &[Weighted<T>]) -> T {\n+    fn choose_weighted<T:Clone>(&mut self, v: &[Weighted<T>]) -> T {\n         self.choose_weighted_option(v).get()\n     }\n \n@@ -591,7 +591,7 @@ impl<R: Rng> RngUtil for R {\n     }\n \n     /// Shuffle a vec\n-    fn shuffle<T:Copy + Clone>(&mut self, values: &[T]) -> ~[T] {\n+    fn shuffle<T:Clone>(&mut self, values: &[T]) -> ~[T] {\n         let mut m = values.to_owned();\n         self.shuffle_mut(m);\n         m"}, {"sha": "d5f4973e8c71a5a572e5c7afdae4680abae1e408", "filename": "src/libstd/task/local_data_priv.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Flocal_data_priv.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -15,6 +15,7 @@ use libc;\n use local_data;\n use prelude::*;\n use ptr;\n+use sys;\n use task::rt;\n use util;\n \n@@ -156,8 +157,9 @@ unsafe fn get_local_map(handle: Handle) -> &mut TaskLocalMap {\n     }\n }\n \n-fn key_to_key_value<T: 'static>(key: local_data::Key<T>) -> *libc::c_void {\n-    unsafe { cast::transmute(key) }\n+unsafe fn key_to_key_value<T: 'static>(key: local_data::Key<T>) -> *libc::c_void {\n+    let pair: sys::Closure = cast::transmute_copy(&key);\n+    return pair.code as *libc::c_void;\n }\n \n pub unsafe fn local_pop<T: 'static>(handle: Handle,"}, {"sha": "df6f77fd6cef347daeacd8dd7c37a696f35540ca", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -264,7 +264,8 @@ struct TrieNode<T> {\n impl<T> TrieNode<T> {\n     #[inline]\n     fn new() -> TrieNode<T> {\n-        // FIXME: #5244: [Nothing, ..SIZE] should be possible without Copy\n+        // FIXME: #5244: [Nothing, ..SIZE] should be possible without implicit\n+        // copyability\n         TrieNode{count: 0,\n                  children: [Nothing, Nothing, Nothing, Nothing,\n                             Nothing, Nothing, Nothing, Nothing,"}, {"sha": "6201e753bc99463849004572d26635c0f8a3e01b", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -13,7 +13,6 @@\n #[allow(missing_doc)];\n \n use clone::Clone;\n-use kinds::Copy;\n use vec;\n use vec::ImmutableVector;\n use iterator::IteratorUtil;\n@@ -86,8 +85,8 @@ pub trait ExtendedTupleOps<A,B> {\n }\n \n impl<'self,\n-     A:Copy + Clone,\n-     B:Copy + Clone>\n+     A:Clone,\n+     B:Clone>\n      ExtendedTupleOps<A,B> for\n      (&'self [A], &'self [B]) {\n     #[inline]\n@@ -109,10 +108,7 @@ impl<'self,\n     }\n }\n \n-impl<A:Copy + Clone,\n-     B:Copy + Clone>\n-     ExtendedTupleOps<A,B> for\n-     (~[A], ~[B]) {\n+impl<A:Clone, B:Clone> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n     #[inline]\n     fn zip(&self) -> ~[(A, B)] {\n         match *self {"}, {"sha": "d0dfb0fb06e58330b6afcd5a332ca814620bed72", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -16,11 +16,13 @@ use opt_vec;\n use parse::token;\n use visit;\n \n+use std::cast::unsafe_copy;\n+use std::cast;\n use std::hashmap::HashMap;\n use std::int;\n+use std::local_data;\n use std::num;\n use std::option;\n-use std::local_data;\n \n pub fn path_name_i(idents: &[ident]) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")"}, {"sha": "230640767c9b49dbcb59705ceeef990b8e6f5e46", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -414,7 +414,7 @@ pub enum MapChain<K,V> {\n \n \n // get the map from an env frame\n-impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n+impl <K: Eq + Hash + IterBytes, V> MapChain<K,V>{\n \n     // Constructor. I don't think we need a zero-arg one.\n     fn new(init: ~HashMap<K,@V>) -> @mut MapChain<K,V> {"}, {"sha": "2f1d320fef7e699af3735758200d7ebc3d33417f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -693,7 +693,7 @@ pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n                          cfg: ast::crate_cfg, c: &crate) -> @crate {\n     let sm = match parse_item_from_source_str(@\"<std-macros>\",\n                                               std_macros(),\n-                                              copy cfg,\n+                                              cfg.clone(),\n                                               ~[],\n                                               parse_sess) {\n         Some(item) => item,\n@@ -708,7 +708,7 @@ pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n             ast::_mod {\n                 items: items,\n                 // FIXME #2543: Bad copy.\n-                .. copy *modd\n+                .. (*modd).clone()\n             }\n         },\n         .. *default_ast_fold()"}, {"sha": "adecbc050a3a8b36a534ef79733cd9f342e59e11", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -473,10 +473,10 @@ impl Parser {\n \n     // parse a sequence bracketed by '<' and '>', stopping\n     // before the '>'.\n-    pub fn parse_seq_to_before_gt<T: Copy>(&self,\n-                                           sep: Option<token::Token>,\n-                                           f: &fn(&Parser) -> T)\n-                                           -> OptVec<T> {\n+    pub fn parse_seq_to_before_gt<T>(&self,\n+                                     sep: Option<token::Token>,\n+                                     f: &fn(&Parser) -> T)\n+                                     -> OptVec<T> {\n         let mut first = true;\n         let mut v = opt_vec::Empty;\n         while *self.token != token::GT\n@@ -493,10 +493,10 @@ impl Parser {\n         return v;\n     }\n \n-    pub fn parse_seq_to_gt<T: Copy>(&self,\n-                                    sep: Option<token::Token>,\n-                                    f: &fn(&Parser) -> T)\n-                                    -> OptVec<T> {\n+    pub fn parse_seq_to_gt<T>(&self,\n+                              sep: Option<token::Token>,\n+                              f: &fn(&Parser) -> T)\n+                              -> OptVec<T> {\n         let v = self.parse_seq_to_before_gt(sep, f);\n         self.expect_gt();\n         return v;\n@@ -505,11 +505,11 @@ impl Parser {\n     // parse a sequence, including the closing delimiter. The function\n     // f must consume tokens until reaching the next separator or\n     // closing bracket.\n-    pub fn parse_seq_to_end<T: Copy>(&self,\n-                                     ket: &token::Token,\n-                                     sep: SeqSep,\n-                                     f: &fn(&Parser) -> T)\n-                                     -> ~[T] {\n+    pub fn parse_seq_to_end<T>(&self,\n+                               ket: &token::Token,\n+                               sep: SeqSep,\n+                               f: &fn(&Parser) -> T)\n+                               -> ~[T] {\n         let val = self.parse_seq_to_before_end(ket, sep, f);\n         self.bump();\n         val\n@@ -518,11 +518,11 @@ impl Parser {\n     // parse a sequence, not including the closing delimiter. The function\n     // f must consume tokens until reaching the next separator or\n     // closing bracket.\n-    pub fn parse_seq_to_before_end<T: Copy>(&self,\n-                                            ket: &token::Token,\n-                                            sep: SeqSep,\n-                                            f: &fn(&Parser) -> T)\n-                                            -> ~[T] {\n+    pub fn parse_seq_to_before_end<T>(&self,\n+                                      ket: &token::Token,\n+                                      sep: SeqSep,\n+                                      f: &fn(&Parser) -> T)\n+                                      -> ~[T] {\n         let mut first: bool = true;\n         let mut v: ~[T] = ~[];\n         while *self.token != *ket {\n@@ -542,12 +542,12 @@ impl Parser {\n     // parse a sequence, including the closing delimiter. The function\n     // f must consume tokens until reaching the next separator or\n     // closing bracket.\n-    pub fn parse_unspanned_seq<T: Copy>(&self,\n-                                        bra: &token::Token,\n-                                        ket: &token::Token,\n-                                        sep: SeqSep,\n-                                        f: &fn(&Parser) -> T)\n-                                        -> ~[T] {\n+    pub fn parse_unspanned_seq<T>(&self,\n+                                  bra: &token::Token,\n+                                  ket: &token::Token,\n+                                  sep: SeqSep,\n+                                  f: &fn(&Parser) -> T)\n+                                  -> ~[T] {\n         self.expect(bra);\n         let result = self.parse_seq_to_before_end(ket, sep, f);\n         self.bump();\n@@ -556,12 +556,12 @@ impl Parser {\n \n     // NB: Do not use this function unless you actually plan to place the\n     // spanned list in the AST.\n-    pub fn parse_seq<T: Copy>(&self,\n-                              bra: &token::Token,\n-                              ket: &token::Token,\n-                              sep: SeqSep,\n-                              f: &fn(&Parser) -> T)\n-                              -> spanned<~[T]> {\n+    pub fn parse_seq<T>(&self,\n+                        bra: &token::Token,\n+                        ket: &token::Token,\n+                        sep: SeqSep,\n+                        f: &fn(&Parser) -> T)\n+                        -> spanned<~[T]> {\n         let lo = self.span.lo;\n         self.expect(bra);\n         let result = self.parse_seq_to_before_end(ket, sep, f);"}, {"sha": "180cb18c745966e87c3b0984221e32991d187164", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -35,7 +35,7 @@ impl read for bool {\n     }\n }\n \n-pub fn read<T:read + Copy>(s: ~str) -> T {\n+pub fn read<T:read>(s: ~str) -> T {\n     match read::readMaybe(s) {\n       Some(x) => x,\n       _ => fail!(\"read failed!\")"}, {"sha": "86ab99407b98a6c4440bed7ff0c3d53a19ae715f", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -34,8 +34,8 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n       return (xx as float) * 100f / (yy as float);\n    }\n \n-   fn le_by_val<TT:Copy + Clone,\n-                UU:Copy + Clone + Ord>(\n+   fn le_by_val<TT:Clone,\n+                UU:Clone + Ord>(\n                 kv0: &(TT,UU),\n                 kv1: &(TT,UU))\n                 -> bool {\n@@ -44,8 +44,8 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n       return v0 >= v1;\n    }\n \n-   fn le_by_key<TT:Copy + Clone + Ord,\n-                UU:Copy + Clone>(\n+   fn le_by_key<TT:Clone + Ord,\n+                UU:Clone>(\n                 kv0: &(TT,UU),\n                 kv1: &(TT,UU))\n                 -> bool {\n@@ -55,10 +55,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n    }\n \n    // sort by key, then by value\n-   fn sortKV<TT:Copy + Clone + Ord,\n-             UU:Copy + Clone + Ord>(\n-             orig: ~[(TT,UU)])\n-             -> ~[(TT,UU)] {\n+   fn sortKV<TT:Clone + Ord, UU:Clone + Ord>(orig: ~[(TT,UU)]) -> ~[(TT,UU)] {\n       return sort::merge_sort(sort::merge_sort(orig, le_by_key), le_by_val);\n    }\n "}, {"sha": "db6db02ded5025eeb2f4fffb2ae9452028228e30", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n fn foo<T>() {\n-    1u.bar::<T>(); //~ ERROR: does not fulfill `Copy`\n+    1u.bar::<T>(); //~ ERROR: does not fulfill `Send`\n }\n \n trait bar {\n-    fn bar<T:Copy>(&self);\n+    fn bar<T:Send>(&self);\n }\n \n impl bar for uint {\n-    fn bar<T:Copy>(&self) {\n+    fn bar<T:Send>(&self) {\n     }\n }\n "}, {"sha": "b38cb89548807b04502a6e1de1fe2a60b2f5c040", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n struct X {\n-    field: @fn:Copy(),\n+    field: @fn:Send(),\n }\n \n fn foo(blk: @fn:()) -> X {\n-    return X { field: blk }; //~ ERROR expected bounds `Copy` but found no bounds\n+    return X { field: blk }; //~ ERROR expected bounds `Send` but found no bounds\n }\n \n fn main() {"}, {"sha": "0b11da14e71a9b280128172161faefd4f7ab6267", "filename": "src/test/compile-fail/closure-bounds-copy-cant-capture-noncopyable.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-copy-cant-capture-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-copy-cant-capture-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-copy-cant-capture-noncopyable.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::comm;\n-\n-// If this were legal you could use it to copy captured noncopyables.\n-// Issue (#2828)\n-\n-fn foo(blk: ~fn:Copy()) {\n-    blk();\n-}\n-\n-fn main() {\n-    let (p,c) = comm::stream();\n-    do foo {\n-        c.send(()); //~ ERROR does not fulfill `Copy`\n-    }\n-    p.recv();\n-}"}, {"sha": "324634ac66db8fcd27d5105af61f54cb82b05fb0", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -2,38 +2,16 @@\n fn take_any(_: &fn:()) {\n }\n \n-fn take_copyable(_: &fn:Copy()) {\n-}\n-\n-fn take_copyable_owned(_: &fn:Copy+Send()) {\n-}\n-\n fn take_const_owned(_: &fn:Freeze+Send()) {\n }\n \n fn give_any(f: &fn:()) {\n     take_any(f);\n-    take_copyable(f); //~ ERROR expected bounds `Copy` but found no bounds\n-    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Send` but found no bounds\n-}\n-\n-fn give_copyable(f: &fn:Copy()) {\n-    take_any(f);\n-    take_copyable(f);\n-    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Send` but found bounds `Copy`\n }\n \n fn give_owned(f: &fn:Send()) {\n     take_any(f);\n-    take_copyable(f); //~ ERROR expected bounds `Copy` but found bounds `Send`\n-    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Send` but found bounds `Send`\n-}\n-\n-fn give_copyable_owned(f: &fn:Copy+Send()) {\n-    take_any(f);\n-    take_copyable(f);\n-    take_copyable_owned(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Freeze` but found bounds `Copy+Send`\n+    take_const_owned(f); //~ ERROR expected bounds `Freeze+Send` but found bounds `Send`\n }\n \n fn main() {}"}, {"sha": "ab5591900346e3e273bab99489ea4d121a8b5dd5", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn reproduce<T:Copy>(t: T) -> @fn() -> T {\n+fn reproduce<T>(t: T) -> @fn() -> T {\n     let result: @fn() -> T = || t;\n     result\n }"}, {"sha": "630eb4b538d58bc93070efde8e8e65a75fb45b28", "filename": "src/test/compile-fail/fn-variance-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn mk_identity<T:Copy>() -> @fn(T) -> T {\n+fn mk_identity<T>() -> @fn(T) -> T {\n     let result: @fn(t: T) -> T = |t| t;\n     result\n }"}, {"sha": "47087337e340719405bc250a05bd150706fd3a41", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         let mut res = foo(x);\n \n         let mut v = ~[];\n-        v = ~[(res)] + v; //~ instantiating a type parameter with an incompatible type `foo`, which does not fulfill `Copy`\n+        v = ~[(res)] + v; //~ instantiating a type parameter with an incompatible type `foo`, which does not fulfill `Clone`\n         assert_eq!(v.len(), 2);\n     }\n "}, {"sha": "c62c28745253d157977417675c3758126fcdf2e8", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,15 +12,15 @@\n // than the trait method it's implementing\n \n trait A {\n-  fn b<C:Copy,D>(x: C) -> C;\n+  fn b<C,D>(x: C) -> C;\n }\n \n struct E {\n  f: int\n }\n \n impl A for E {\n-  fn b<F:Copy + Freeze,G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Freeze`\n+  fn b<F:Freeze,G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Freeze`\n }\n \n fn main() {}"}, {"sha": "9b8346da5c5d932dc2886938037bb32cbe931fb3", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,7 +12,7 @@\n // an impl against a trait\n \n trait A {\n-  fn b<C:Copy,D>(&self, x: C) -> C;\n+  fn b<C:Clone,D>(&self, x: C) -> C;\n }\n \n struct E {\n@@ -21,7 +21,7 @@ struct E {\n \n impl A for E {\n   // n.b. The error message is awful -- see #3404\n-  fn b<F:Copy,G>(&self, _x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n+  fn b<F:Clone,G>(&self, _x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n }\n \n fn main() {}"}, {"sha": "19b38769d95694886fc3532a26c93544d5318883", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,11 +10,11 @@\n \n trait repeat<A> { fn get(&self) -> A; }\n \n-impl<A:Copy> repeat<A> for @A {\n+impl<A:Clone> repeat<A> for @A {\n     fn get(&self) -> A { **self }\n }\n \n-fn repeater<A:Copy>(v: @A) -> @repeat<A> {\n+fn repeater<A:Clone>(v: @A) -> @repeat<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n     @v as @repeat<A> // No\n }"}, {"sha": "4dc1c6f2f3ee96b225c5e700f73c74bc0aa4d31b", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -18,11 +18,11 @@ trait foo {\n     fn foo(&self, i: &'self int) -> int;\n }\n \n-impl<T:Copy> foo for T {\n+impl<T:Clone> foo for T {\n     fn foo(&self, i: &'self int) -> int {*i}\n }\n \n-fn to_foo<T:Copy>(t: T) {\n+fn to_foo<T:Clone>(t: T) {\n     // This version is ok because, although T may contain borrowed\n     // pointers, it never escapes the fn body.  We know this because\n     // the type of foo includes a region which will be resolved to\n@@ -33,14 +33,14 @@ fn to_foo<T:Copy>(t: T) {\n     assert_eq!(x.foo(v), 3);\n }\n \n-fn to_foo_2<T:Copy>(t: T) -> @foo {\n+fn to_foo_2<T:Clone>(t: T) -> @foo {\n     // Not OK---T may contain borrowed ptrs and it is going to escape\n     // as part of the returned foo value\n     struct F<T> { f: T }\n     @F {f:t} as @foo //~ ERROR value may contain borrowed pointers; add `'static` bound\n }\n \n-fn to_foo_3<T:Copy + 'static>(t: T) -> @foo {\n+fn to_foo_3<T:Clone + 'static>(t: T) -> @foo {\n     // OK---T may escape as part of the returned foo value, but it is\n     // owned and hence does not contain borrowed ptrs\n     struct F<T> { f: T }"}, {"sha": "73d59ff8af218453190696d12281f6e4c044db3b", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,13 +10,13 @@\n \n trait foo { fn foo(&self); }\n \n-fn to_foo<T:Copy + foo>(t: T) -> @foo {\n+fn to_foo<T:Clone + foo>(t: T) -> @foo {\n     @t as @foo\n     //~^ ERROR value may contain borrowed pointers; add `'static` bound\n     //~^^ ERROR cannot pack type\n }\n \n-fn to_foo2<T:Copy + foo + 'static>(t: T) -> @foo {\n+fn to_foo2<T:Clone + foo + 'static>(t: T) -> @foo {\n     @t as @foo\n }\n "}, {"sha": "72d6b70a7c2caff56a787cd1cacbb5c6de9116a5", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -14,11 +14,11 @@ trait Foo {\n fn a(_x: ~Foo:Send) {\n }\n \n-fn b(_x: ~Foo:Send+Copy) {\n+fn b(_x: ~Foo:Send+Clone) {\n }\n \n fn c(x: ~Foo:Freeze+Send) {\n-    b(x); //~ ERROR expected bounds `Copy+Send`\n+    b(x); //~ ERROR expected bounds `Clone+Send`\n }\n \n fn d(x: ~Foo:) {"}, {"sha": "47cf12629013e1c5807a4e84bd5384c58d0ce87e", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -16,7 +16,7 @@\n struct Pair<T, U> { a: T, b: U }\n struct Triple { x: int, y: int, z: int }\n \n-fn f<T:Copy,U:Copy>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n+fn f<T,U>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n     info!(\"%?\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);"}, {"sha": "440ad723a12ce38ed34fa12a4223552c5e2569a6", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T:Copy>(x: ~[T]) -> T { return x[0]; }\n+fn f<T>(x: ~[T]) -> T { return x[0]; }\n \n fn g(act: &fn(~[int]) -> int) -> int { return act(~[1, 2, 3]); }\n "}, {"sha": "8bd1a772e55ed790ce20111e611a0e5728545d39", "filename": "src/test/run-pass/cond-macro-no-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn clamp<T:Copy + Ord + Signed>(x: T, mn: T, mx: T) -> T {\n+fn clamp<T:Ord + Signed>(x: T, mn: T, mx: T) -> T {\n     cond!(\n         (x > mx) { return mx; }\n         (x < mn) { return mn; }"}, {"sha": "61a51b6726114de357abd4d6a5bd069997eddeca", "filename": "src/test/run-pass/cond-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fcond-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fcond-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcond-macro.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn clamp<T:Copy + Ord + Signed>(x: T, mn: T, mx: T) -> T {\n+fn clamp<T:Ord + Signed>(x: T, mn: T, mx: T) -> T {\n     cond!(\n         (x > mx) { mx }\n         (x < mn) { mn }"}, {"sha": "635ae704e4194df134ac6841d4bd73e2d00d27c3", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,7 +12,7 @@\n // are const.\n \n \n-fn foo<T:Copy + Freeze>(x: T) -> T { x }\n+fn foo<T:Freeze>(x: T) -> T { x }\n \n struct F { field: int }\n "}, {"sha": "0249820410c435fc642e536dadd2ef5c624c881e", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -13,7 +13,7 @@\n // -*- rust -*-\n type compare<T> = @fn(~T, ~T) -> bool;\n \n-fn test_generic<T:Copy+Clone>(expected: ~T, eq: compare<T>) {\n+fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { expected.clone() };\n     assert!((eq(expected, actual)));\n }"}, {"sha": "cba1bab3004684eb378bc5ef27db518c1126ea0c", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -19,7 +19,7 @@ fn test_vec() {\n }\n \n fn test_generic() {\n-    fn f<T:Copy>(t: T) -> T { t }\n+    fn f<T>(t: T) -> T { t }\n     assert_eq!(f(10), 10);\n }\n "}, {"sha": "0f564e6a78029a51cdc18f9b0b0e25897ce0a394", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -13,7 +13,7 @@\n // -*- rust -*-\n type compare<T> = @fn(~T, ~T) -> bool;\n \n-fn test_generic<T:Copy+Clone>(expected: ~T, eq: compare<T>) {\n+fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {\n         true => { expected.clone() },\n         _ => fail!(\"wat\")"}, {"sha": "ae88d48bc443b606a038b2932e905d913311bfa6", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -13,7 +13,7 @@\n \n type compare<T> = @fn(T, T) -> bool;\n \n-fn test_generic<T:Copy+Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true {\n         true => expected.clone(),\n         _ => fail!(\"wat\")"}, {"sha": "2cd505f1f7d2505f49063a1ae79b7d61d10958d2", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn id<T:Copy>(t: T) -> T { return t; }\n+fn id<T>(t: T) -> T { return t; }\n \n pub fn main() {\n     let expected = @100;"}, {"sha": "7a6cb9470b2a4a8d67a57caf97a6482cab240811", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn id<T:Copy + Send>(t: T) -> T { return t; }\n+fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {\n     let expected = ~100;"}, {"sha": "a3e933f3ceb03c7167f0d6a69285405e0655e103", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn box<T:Copy>(x: Box<T>) -> @Box<T> { return @x; }\n+fn box<T>(x: Box<T>) -> @Box<T> { return @x; }\n \n struct Box<T> {x: T, y: T, z: T}\n "}, {"sha": "9592f9ff73616335ef1d138eeeffd1cd8e5b18cd", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -11,6 +11,6 @@\n \n struct Pair { x: @int, y: @int }\n \n-fn f<T:Copy>(t: T) { let t1: T = t; }\n+fn f<T>(t: T) { let t1: T = t; }\n \n pub fn main() { let x = Pair {x: @10, y: @12}; f(x); }"}, {"sha": "b7fe704749c74408113154d9454724f1b0fab2b4", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,7 +12,7 @@\n \n struct Recbox<T> {x: @T}\n \n-fn reclift<T:Copy>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n+fn reclift<T>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n \n pub fn main() {\n     let foo: int = 17;"}, {"sha": "0820923efcfec99f167df082e72855f224e1796a", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,7 +10,7 @@\n \n struct Recbox<T> {x: ~T}\n \n-fn reclift<T:Copy>(t: T) -> Recbox<T> { return Recbox {x: ~t}; }\n+fn reclift<T>(t: T) -> Recbox<T> { return Recbox {x: ~t}; }\n \n pub fn main() {\n     let foo: int = 17;"}, {"sha": "092a17bf456c9a906e4291712f9d6a5d6002f07e", "filename": "src/test/run-pass/generic-fn-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -14,6 +14,6 @@\n // -*- rust -*-\n \n // Issue #45: infer type parameters in function applications\n-fn id<T:Copy>(x: T) -> T { return x; }\n+fn id<T>(x: T) -> T { return x; }\n \n pub fn main() { let x: int = 42; let y: int = id(x); assert!((x == y)); }"}, {"sha": "3c28b16d3a981244fdffecf17b689c586c3240e9", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n \n-fn f<T:Copy>(x: ~T) -> ~T { return x; }\n+fn f<T>(x: ~T) -> ~T { return x; }\n \n pub fn main() { let x = f(~3); info!(*x); }"}, {"sha": "34fb22ea0f45bb915b9e9746270a0117a76b75ae", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn id<T:Copy>(x: T) -> T { return x; }\n+fn id<T>(x: T) -> T { return x; }\n \n struct Triple {x: int, y: int, z: int}\n "}, {"sha": "4a74330f7d67e36012a86a40e9498bc9c6b1d646", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn get_third<T:Copy>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n+fn get_third<T>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n     info!(get_third((1, 2, 3)));"}, {"sha": "71cc432786023f107e4950cec00e567573473f50", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,7 +10,7 @@\n \n struct Triple<T> { x: T, y: T, z: T }\n \n-fn box<T:Copy>(x: Triple<T>) -> ~Triple<T> { return ~x; }\n+fn box<T>(x: Triple<T>) -> ~Triple<T> { return ~x; }\n \n pub fn main() {\n     let x: ~Triple<int> = box::<int>(Triple{x: 1, y: 2, z: 3});"}, {"sha": "e951eef37056381bd49cfb2393ae73a899d8b174", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,25 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait clam<A:Copy> {\n+trait clam<A> {\n   fn chowder(&self, y: A);\n }\n struct foo<A> {\n   x: A,\n }\n \n-impl<A:Copy> clam<A> for foo<A> {\n+impl<A> clam<A> for foo<A> {\n   fn chowder(&self, y: A) {\n   }\n }\n \n-fn foo<A:Copy>(b: A) -> foo<A> {\n+fn foo<A>(b: A) -> foo<A> {\n     foo {\n         x: b\n     }\n }\n \n-fn f<A:Copy>(x: @clam<A>, a: A) {\n+fn f<A>(x: @clam<A>, a: A) {\n   x.chowder(a);\n }\n "}, {"sha": "df7c3b6e7d977c7c509f173e45c742fc457b5386", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait clam<A:Copy> { }\n+trait clam<A> { }\n struct foo<A> {\n     x: A,\n }\n \n-impl<A:Copy> foo<A> {\n+impl<A> foo<A> {\n    pub fn bar<B,C:clam<A>>(&self, c: C) -> B {\n      fail!();\n    }\n }\n \n-fn foo<A:Copy>(b: A) -> foo<A> {\n+fn foo<A>(b: A) -> foo<A> {\n     foo {\n         x: b\n     }"}, {"sha": "432e8c19d2a98d36c3348a948e146236f9027a5f", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,18 +12,18 @@ struct c1<T> {\n     x: T,\n }\n \n-impl<T:Copy> c1<T> {\n+impl<T> c1<T> {\n     pub fn f1(&self, x: int) {\n     }\n }\n \n-fn c1<T:Copy>(x: T) -> c1<T> {\n+fn c1<T>(x: T) -> c1<T> {\n     c1 {\n         x: x\n     }\n }\n \n-impl<T:Copy> c1<T> {\n+impl<T> c1<T> {\n     pub fn f2(&self, x: int) {\n     }\n }"}, {"sha": "3c0a9355b587820223004266b3b7e0605c6122e5", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,17 +12,17 @@ struct c1<T> {\n     x: T,\n }\n \n-impl<T:Copy> c1<T> {\n+impl<T> c1<T> {\n     pub fn f1(&self, x: T) {}\n }\n \n-fn c1<T:Copy>(x: T) -> c1<T> {\n+fn c1<T>(x: T) -> c1<T> {\n     c1 {\n         x: x\n     }\n }\n \n-impl<T:Copy> c1<T> {\n+impl<T> c1<T> {\n     pub fn f2(&self, x: T) {}\n }\n "}, {"sha": "af0b937f602cdec26f8ea798f0e8b2427db5be29", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -18,7 +18,7 @@ fn C(x: uint) -> C {\n     }\n }\n \n-fn f<T:Copy>(_x: T) {\n+fn f<T>(_x: T) {\n }\n \n #[deny(non_implicitly_copyable_typarams)]"}, {"sha": "56c18d557f0da610301fb05b6e2341d83f44cf01", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,15 +12,15 @@\n // than the traits require.\n \n trait A {\n-  fn b<C:Copy + Freeze,D>(x: C) -> C;\n+  fn b<C:Freeze,D>(x: C) -> C;\n }\n \n struct E {\n  f: int\n }\n \n impl A for E {\n-  fn b<F:Copy,G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n+  fn b<F,G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n \n fn main() {}"}, {"sha": "ab64fb4fbfa1f22cb03d8d580a40b5353c636a56", "filename": "src/test/run-pass/issue-3149.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3149.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn Matrix4<T:Copy>(m11: T, m12: T, m13: T, m14: T,\n-                   m21: T, m22: T, m23: T, m24: T,\n-                   m31: T, m32: T, m33: T, m34: T,\n-                   m41: T, m42: T, m43: T, m44: T)\n-                -> Matrix4<T> {\n-\n+fn Matrix4<T>(m11: T, m12: T, m13: T, m14: T,\n+              m21: T, m22: T, m23: T, m24: T,\n+              m31: T, m32: T, m33: T, m34: T,\n+              m41: T, m42: T, m43: T, m44: T)\n+              -> Matrix4<T> {\n     Matrix4 {\n         m11: m11, m12: m12, m13: m13, m14: m14,\n         m21: m21, m22: m22, m23: m23, m24: m24,"}, {"sha": "1217f32826f6d3be179ba888f22374baeba3443a", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn quux<T:Copy>(x: T) -> T { let f = id::<T>; return f(x); }\n+fn quux<T>(x: T) -> T { let f = id::<T>; return f(x); }\n \n-fn id<T:Copy>(x: T) -> T { return x; }\n+fn id<T>(x: T) -> T { return x; }\n \n pub fn main() { assert!((quux(10) == 10)); }"}, {"sha": "ecf530f07f309e9d5f848482db75d84541ed64c2", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn double<T:Copy + Clone>(a: T) -> ~[T] { return ~[a.clone()] + ~[a]; }\n+fn double<T:Clone>(a: T) -> ~[T] { return ~[a.clone()] + ~[a]; }\n \n fn double_int(a: int) -> ~[int] { return ~[a] + ~[a]; }\n "}, {"sha": "eaf9eafa2a5dcceaca7f5f8d49ff9df0e1ef34fb", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -13,11 +13,11 @@\n use std::int;\n \n trait vec_monad<A> {\n-    fn bind<B:Copy>(&self, f: &fn(&A) -> ~[B]) -> ~[B];\n+    fn bind<B>(&self, f: &fn(&A) -> ~[B]) -> ~[B];\n }\n \n impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B:Copy>(&self, f: &fn(&A) -> ~[B]) -> ~[B] {\n+    fn bind<B>(&self, f: &fn(&A) -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n         for self.iter().advance |elt| {\n             r.push_all_move(f(elt));"}, {"sha": "3146c2a9499787c3a2ed2b5acede246c97062791", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -25,7 +25,7 @@ impl Serializable for int {\n \n struct F<A> { a: A }\n \n-impl<A:Copy + Serializable> Serializable for F<A> {\n+impl<A:Serializable> Serializable for F<A> {\n     fn serialize<S:Serializer>(&self, s: S) {\n         self.a.serialize(s);\n     }"}, {"sha": "8257d495d4606f196ef4d74584d65c7791e93b19", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -14,15 +14,15 @@ extern mod extra;\n \n use extra::list::*;\n \n-fn pure_length_go<T:Copy>(ls: @List<T>, acc: uint) -> uint {\n+fn pure_length_go<T>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n }\n \n-fn pure_length<T:Copy>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n+fn pure_length<T>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n \n-fn nonempty_list<T:Copy>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n+fn nonempty_list<T>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n-fn safe_head<T:Copy>(ls: @List<T>) -> T {\n+fn safe_head<T>(ls: @List<T>) -> T {\n     assert!(!is_empty(ls));\n     return head(ls);\n }"}, {"sha": "341c1b96e36dd6f577533a2d284282d2079bd681", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -23,7 +23,7 @@ fn iter<T>(v: ~[T], it: &fn(&T) -> bool) -> bool {\n     return true;\n }\n \n-fn find_pos<T:Eq + Copy + Clone>(n: T, h: ~[T]) -> Option<uint> {\n+fn find_pos<T:Eq + Clone>(n: T, h: ~[T]) -> Option<uint> {\n     let mut i = 0u;\n     for iter(h.clone()) |e| {\n         if *e == n { return Some(i); }"}, {"sha": "b1974f710956037e03614719c9ae3161bd54b01b", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -12,6 +12,6 @@\n \n enum option<T> { none, some(T), }\n \n-fn f<T:Copy>() -> option<T> { return none; }\n+fn f<T>() -> option<T> { return none; }\n \n pub fn main() { f::<int>(); }"}, {"sha": "1588bd1a5a5418e32fdb61fceb7770950846a569", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -43,13 +43,13 @@ impl uint_utils for uint {\n trait vec_utils<T> {\n     fn length_(&self, ) -> uint;\n     fn iter_(&self, f: &fn(&T));\n-    fn map_<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U];\n+    fn map_<U>(&self, f: &fn(&T) -> U) -> ~[U];\n }\n \n impl<T> vec_utils<T> for ~[T] {\n     fn length_(&self) -> uint { self.len() }\n     fn iter_(&self, f: &fn(&T)) { for self.iter().advance |x| { f(x); } }\n-    fn map_<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n+    fn map_<U>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for self.iter().advance |elt| {\n             r.push(f(elt));"}, {"sha": "fa3b0a4ea33b13168de1f9e4acb97e59cb9a2ed1", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -24,7 +24,7 @@ struct t_rec<A,B> {\n     tB: a_tag<A,B>\n }\n \n-fn mk_rec<A:Copy,B:Copy>(a: A, b: B) -> t_rec<A,B> {\n+fn mk_rec<A,B>(a: A, b: B) -> t_rec<A,B> {\n     return t_rec{ chA:0u8, tA:varA(a), chB:1u8, tB:varB(b) };\n }\n "}, {"sha": "cc2c12e4109019a42fc192a9523194563a0dbdd9", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -21,7 +21,7 @@ fn c(x: ~Foo:Freeze+Send) {\n     a(x);\n }\n \n-fn d(x: ~Foo:Send+Copy) {\n+fn d(x: ~Foo:Send) {\n     b(x);\n }\n "}, {"sha": "d6218a6ad8e8ae21e47dd55e01e42f6286e95a29", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -26,10 +26,10 @@ impl to_str for () {\n }\n \n trait map<T> {\n-    fn map<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U];\n+    fn map<U>(&self, f: &fn(&T) -> U) -> ~[U];\n }\n impl<T> map<T> for ~[T] {\n-    fn map<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n+    fn map<U>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n         // FIXME: #7355 generates bad code with Iterator\n         for std::uint::range(0, self.len()) |i| {"}, {"sha": "84d54d9d0df45520bba59924e8ed30fe5b796592", "filename": "src/test/run-pass/trait-inheritance-overloading-xc-exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -14,7 +14,7 @@\n extern mod trait_inheritance_overloading_xc;\n use trait_inheritance_overloading_xc::{MyNum, MyInt};\n \n-fn f<T:Copy + MyNum>(x: T, y: T) -> (T, T, T) {\n+fn f<T:MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x + y, x - y, x * y);\n }\n "}, {"sha": "d5321ea52983a25778eb347546e4c64eb1fc7795", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -33,7 +33,7 @@ impl Eq for MyInt {\n \n impl MyNum for MyInt;\n \n-fn f<T:Copy + MyNum>(x: T, y: T) -> (T, T, T) {\n+fn f<T:MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x + y, x - y, x * y);\n }\n "}, {"sha": "8968fe49bc1d4ab0aa91439ff7f5a06e0d9c5497", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n fn p_foo<T>(pinned: T) { }\n-fn s_foo<T:Copy>(shared: T) { }\n+fn s_foo<T>(shared: T) { }\n fn u_foo<T:Send>(unique: T) { }\n \n struct r {"}, {"sha": "5d115139bdc87958486a53e806d43566b98d1728", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -20,7 +20,7 @@ struct Pointy {\n     d : ~fn() -> uint,\n }\n \n-fn make_uniq_closure<A:Send + Copy>(a: A) -> ~fn() -> uint {\n+fn make_uniq_closure<A:Send>(a: A) -> ~fn() -> uint {\n     let result: ~fn() -> uint = || ptr::to_unsafe_ptr(&a) as uint;\n     result\n }"}, {"sha": "eb2638f256881edbdc1edaaebe4c1d2aff3334e1", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T:Copy>(t: T) -> T {\n+fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1\n }"}, {"sha": "3805cbe47bf621667f83d259dd4f51b9d5b1b3b5", "filename": "src/test/run-pass/unique-generic-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funique-generic-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funique-generic-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-generic-assign.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -10,7 +10,7 @@\n \n // Issue #976\n \n-fn f<T:Copy>(x: ~T) {\n+fn f<T>(x: ~T) {\n     let _x2 = x;\n }\n pub fn main() { }"}, {"sha": "11425a94ce9e1aa6d325ce10ed207c93e43b20d5", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -30,11 +30,11 @@ fn sendable() {\n \n fn copyable() {\n \n-    fn f<T:Copy + Eq>(i: T, j: T) {\n+    fn f<T:Eq>(i: T, j: T) {\n         assert_eq!(i, j);\n     }\n \n-    fn g<T:Copy + Eq>(i: T, j: T) {\n+    fn g<T:Eq>(i: T, j: T) {\n         assert!(i != j);\n     }\n "}, {"sha": "22f1ccb8bbb058ab7409b92f76abb7f513902fec", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20549ff192edec9d625f1119bcb077c3abaf070/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=e20549ff192edec9d625f1119bcb077c3abaf070", "patch": "@@ -1,20 +1,18 @@\n-fn foldl<T, U: Copy+Clone>(\n-    values: &[T],\n-    initial: U,\n-    function: &fn(partial: U, element: &T) -> U\n-) -> U {\n+fn foldl<T,U:Clone>(values: &[T],\n+                    initial: U,\n+                    function: &fn(partial: U, element: &T) -> U)\n+                    -> U {\n     match values {\n         [ref head, ..tail] =>\n             foldl(tail, function(initial, head), function),\n         [] => initial.clone()\n     }\n }\n \n-fn foldr<T, U: Copy+Clone>(\n-    values: &[T],\n-    initial: U,\n-    function: &fn(element: &T, partial: U) -> U\n-) -> U {\n+fn foldr<T,U:Clone>(values: &[T],\n+                    initial: U,\n+                    function: &fn(element: &T, partial: U) -> U)\n+                    -> U {\n     match values {\n         [..head, ref tail] =>\n             foldr(head, function(tail, initial), function),"}]}