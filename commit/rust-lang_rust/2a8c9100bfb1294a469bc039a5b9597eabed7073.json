{"sha": "2a8c9100bfb1294a469bc039a5b9597eabed7073", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOGM5MTAwYmZiMTI5NGE0NjliYzAzOWE1Yjk1OTdlYWJlZDcwNzM=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2019-12-20T15:41:32Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2019-12-20T17:16:11Z"}, "message": "Handle closure return types\n\nFixes #2547.", "tree": {"sha": "ae4e2dd0ae2c62baf79ec1197f5ec5f94a7645e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4e2dd0ae2c62baf79ec1197f5ec5f94a7645e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8c9100bfb1294a469bc039a5b9597eabed7073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8c9100bfb1294a469bc039a5b9597eabed7073", "html_url": "https://github.com/rust-lang/rust/commit/2a8c9100bfb1294a469bc039a5b9597eabed7073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8c9100bfb1294a469bc039a5b9597eabed7073/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc50ff160d0af2ce5cd931c6d41161abfdb2fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc50ff160d0af2ce5cd931c6d41161abfdb2fbd", "html_url": "https://github.com/rust-lang/rust/commit/cfc50ff160d0af2ce5cd931c6d41161abfdb2fbd"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "be5d17d85e4ffe903dc0e11812e85b4636c56506", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -372,8 +372,9 @@ where\n                         arg_types.push(type_ref);\n                     }\n                 }\n+                let ret_type = e.ret_type().and_then(|r| r.type_ref()).map(TypeRef::from_ast);\n                 let body = self.collect_expr_opt(e.body());\n-                self.alloc_expr(Expr::Lambda { args, arg_types, body }, syntax_ptr)\n+                self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }\n             ast::Expr::BinExpr(e) => {\n                 let lhs = self.collect_expr_opt(e.lhs());"}, {"sha": "a75ef9970d80c62209ad42089b84304557ffa139", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -143,6 +143,7 @@ pub enum Expr {\n     Lambda {\n         args: Vec<PatId>,\n         arg_types: Vec<Option<TypeRef>>,\n+        ret_type: Option<TypeRef>,\n         body: ExprId,\n     },\n     Tuple {"}, {"sha": "9f2ed830edd5f55ff3e481020d26446a6b6bf44d", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -196,7 +196,12 @@ struct InferenceContext<'a, D: HirDatabase> {\n     trait_env: Arc<TraitEnvironment>,\n     obligations: Vec<Obligation>,\n     result: InferenceResult,\n-    /// The return type of the function being inferred.\n+    /// The return type of the function being inferred, or the closure if we're\n+    /// currently within one.\n+    ///\n+    /// We might consider using a nested inference context for checking\n+    /// closures, but currently this is the only field that will change there,\n+    /// so it doesn't make sense.\n     return_ty: Ty,\n \n     /// Impls of `CoerceUnsized` used in coercion."}, {"sha": "253332c30e5f6035fdf906a7463744da8e812f85", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -102,7 +102,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n                 Ty::unit()\n             }\n-            Expr::Lambda { body, args, arg_types } => {\n+            Expr::Lambda { body, args, ret_type, arg_types } => {\n                 assert_eq!(args.len(), arg_types.len());\n \n                 let mut sig_tys = Vec::new();\n@@ -118,7 +118,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n \n                 // add return type\n-                let ret_ty = self.table.new_type_var();\n+                let ret_ty = match ret_type {\n+                    Some(type_ref) => self.make_ty(type_ref),\n+                    None => self.table.new_type_var(),\n+                };\n                 sig_tys.push(ret_ty.clone());\n                 let sig_ty = Ty::apply(\n                     TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n@@ -134,7 +137,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 // infer the body.\n                 self.coerce(&closure_ty, &expected.ty);\n \n-                self.infer_expr(*body, &Expectation::has_type(ret_ty));\n+                let prev_ret_ty = std::mem::replace(&mut self.return_ty, ret_ty.clone());\n+\n+                self.infer_expr_coerce(*body, &Expectation::has_type(ret_ty));\n+\n+                self.return_ty = prev_ret_ty;\n+\n                 closure_ty\n             }\n             Expr::Call { callee, args } => {\n@@ -192,6 +200,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Return { expr } => {\n                 if let Some(expr) = expr {\n                     self.infer_expr_coerce(*expr, &Expectation::has_type(self.return_ty.clone()));\n+                } else {\n+                    let unit = Ty::unit();\n+                    self.coerce(&unit, &self.return_ty.clone());\n                 }\n                 Ty::simple(TypeCtor::Never)\n             }"}, {"sha": "33d6ca4034ccf7ee49a33b9bcb45cd9ab18200f3", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -440,3 +440,34 @@ fn test() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn closure_return_coerce() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+fn foo() {\n+    let x = || {\n+        if true {\n+            return &1u32;\n+        }\n+        &&1u32\n+    };\n+}\n+\"#, true),\n+        @r###\"\n+    [10; 106) '{     ...  }; }': ()\n+    [20; 21) 'x': || -> &u32\n+    [24; 103) '|| {  ...     }': || -> &u32\n+    [27; 103) '{     ...     }': &u32\n+    [37; 82) 'if tru...     }': ()\n+    [40; 44) 'true': bool\n+    [45; 82) '{     ...     }': !\n+    [59; 71) 'return &1u32': !\n+    [66; 71) '&1u32': &u32\n+    [67; 71) '1u32': u32\n+    [91; 97) '&&1u32': &&u32\n+    [92; 97) '&1u32': &u32\n+    [93; 97) '1u32': u32\n+    \"###\n+    );\n+}"}, {"sha": "6fe647a5e3cd8c9fcc15a1b645a5d5e8c4183df0", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -1606,3 +1606,58 @@ fn main() {\n     );\n     assert_eq!(t, \"u32\");\n }\n+\n+#[test]\n+fn closure_return() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn foo() -> u32 {\n+    let x = || -> usize { return 1; };\n+}\n+\"#),\n+        @r###\"\n+    [17; 59) '{     ...; }; }': ()\n+    [27; 28) 'x': || -> usize\n+    [31; 56) '|| -> ...n 1; }': || -> usize\n+    [43; 56) '{ return 1; }': !\n+    [45; 53) 'return 1': !\n+    [52; 53) '1': usize\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn closure_return_unit() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn foo() -> u32 {\n+    let x = || { return; };\n+}\n+\"#),\n+        @r###\"\n+    [17; 48) '{     ...; }; }': ()\n+    [27; 28) 'x': || -> ()\n+    [31; 45) '|| { return; }': || -> ()\n+    [34; 45) '{ return; }': !\n+    [36; 42) 'return': !\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn closure_return_inferred() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn foo() -> u32 {\n+    let x = || { \"test\" };\n+}\n+\"#),\n+        @r###\"\n+    [17; 47) '{     ...\" }; }': ()\n+    [27; 28) 'x': || -> &str\n+    [31; 44) '|| { \"test\" }': || -> &str\n+    [34; 44) '{ \"test\" }': &str\n+    [36; 42) '\"test\"': &str\n+    \"###\n+    );\n+}"}, {"sha": "8d65e2e08edef6f55c5771088c85d19e32551efd", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -1426,6 +1426,9 @@ impl LambdaExpr {\n     pub fn param_list(&self) -> Option<ParamList> {\n         AstChildren::new(&self.syntax).next()\n     }\n+    pub fn ret_type(&self) -> Option<RetType> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n     pub fn body(&self) -> Option<Expr> {\n         AstChildren::new(&self.syntax).next()\n     }"}, {"sha": "a228fa9d6eb38255ca3d54c4cb441f1c512b503a", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2a8c9100bfb1294a469bc039a5b9597eabed7073/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=2a8c9100bfb1294a469bc039a5b9597eabed7073", "patch": "@@ -426,7 +426,7 @@ Grammar(\n         \"PathExpr\": (options: [\"Path\"]),\n         \"LambdaExpr\": (\n             options: [\n-                \"ParamList\",\n+                \"ParamList\", \"RetType\",\n                 [\"body\", \"Expr\"],\n             ]\n         ),"}]}