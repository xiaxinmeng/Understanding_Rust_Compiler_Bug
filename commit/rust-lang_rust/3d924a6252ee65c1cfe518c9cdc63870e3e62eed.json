{"sha": "3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOTI0YTYyNTJlZTY1YzFjZmU1MThjOWNkYzYzODcwZTNlNjJlZWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-23T13:08:04Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:03Z"}, "message": "Git is drunk", "tree": {"sha": "2d678b2ffdfcc39c7131ea851830151178a26824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d678b2ffdfcc39c7131ea851830151178a26824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "html_url": "https://github.com/rust-lang/rust/commit/3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d924a6252ee65c1cfe518c9cdc63870e3e62eed/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb933eff350d9ebf81ee31511f54c99e99ab509f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb933eff350d9ebf81ee31511f54c99e99ab509f", "html_url": "https://github.com/rust-lang/rust/commit/cb933eff350d9ebf81ee31511f54c99e99ab509f"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ce9be4e84054a17d20112d6f4eabe34ebb3c04b0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d924a6252ee65c1cfe518c9cdc63870e3e62eed/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d924a6252ee65c1cfe518c9cdc63870e3e62eed/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3d924a6252ee65c1cfe518c9cdc63870e3e62eed", "patch": "@@ -1730,12 +1730,7 @@ impl<'a, 'tcx> Lift<'tcx> for Region<'a> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n+        Some(tcx.intern_const_alloc(mir::interpret::Allocation::clone(self)))\n     }\n }\n \n@@ -1745,7 +1740,12 @@ impl<'a, 'tcx> Lift<'tcx> for Goal<'a> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n-        Some(tcx.intern_const_alloc(mir::interpret::Allocation::clone(self)))\n+        // Also try in the global tcx if we're not that.\n+        if !tcx.is_global() {\n+            self.lift_to_tcx(tcx.global_tcx())\n+        } else {\n+            None\n+        }\n     }\n }\n "}]}