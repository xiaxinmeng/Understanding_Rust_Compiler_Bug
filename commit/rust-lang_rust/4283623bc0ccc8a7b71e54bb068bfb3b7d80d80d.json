{"sha": "4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODM2MjNiYzBjY2M4YTdiNzFlNTRiYjA2OGJmYjNiN2Q4MGQ4MGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-29T00:17:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-29T00:17:31Z"}, "message": "Rollup merge of #81158 - 1000teslas:issue-80313-fix, r=Aaron1011\n\nPoint to span of upvar making closure FnMut\n\nFor #80313.", "tree": {"sha": "c00d21106c00621597654502e507e3f91a0d8cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00d21106c00621597654502e507e3f91a0d8cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgE1QbCRBK7hj4Ov3rIwAAdHIIACsbKd5wMferdTmUSJEah4n4\nLTt0Zom+dQv5iJLQdkuERLNDk34BwEpa7i8iZmEIbKHm6HB5puOk3grl2uoSSDtQ\n8WTFkgDUE71mcpOUpQi4XmoGOcruPq0vAZf9LCKFSPaUObFGSFgeefuFjuP991vd\n7evwFK8RX2UFh95UAoY+k8vPXJZa/619LIRYG+mJydAr9GPbR/ngfBdRGI3ZgjIj\nqacylkWFvh2isr6oJICVpYrSd0Xa7iBtT4yZgw3uqLDZFwdpCmFdXQYxbd6gd2oN\n05fuL9l+zYtZcJw/Ywi3/GlTZaKWELttAqDltZM/w2oRZxZs/rpMPVmK/+u3Rps=\n=Mjl5\n-----END PGP SIGNATURE-----\n", "payload": "tree c00d21106c00621597654502e507e3f91a0d8cef\nparent a3c060c7f5b76f5c371f40349ac868d7271fa817\nparent 26b4baf46ea66d3651281c8b66d76853e6362c65\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611879451 +0900\ncommitter GitHub <noreply@github.com> 1611879451 +0900\n\nRollup merge of #81158 - 1000teslas:issue-80313-fix, r=Aaron1011\n\nPoint to span of upvar making closure FnMut\n\nFor #80313.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "html_url": "https://github.com/rust-lang/rust/commit/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c060c7f5b76f5c371f40349ac868d7271fa817", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c060c7f5b76f5c371f40349ac868d7271fa817", "html_url": "https://github.com/rust-lang/rust/commit/a3c060c7f5b76f5c371f40349ac868d7271fa817"}, {"sha": "26b4baf46ea66d3651281c8b66d76853e6362c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b4baf46ea66d3651281c8b66d76853e6362c65", "html_url": "https://github.com/rust-lang/rust/commit/26b4baf46ea66d3651281c8b66d76853e6362c65"}], "stats": {"total": 156, "additions": 152, "deletions": 4}, "files": [{"sha": "73196c732f5bbc8586147a279885af5da6caf269", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -1,9 +1,12 @@\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, Location};\n use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::{\n+    hir::place::PlaceBase,\n+    mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, Location},\n+};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n@@ -241,6 +244,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\"mut {}\", self.local_names[local].unwrap()),\n                     Applicability::MachineApplicable,\n                 );\n+                let tcx = self.infcx.tcx;\n+                if let ty::Closure(id, _) = the_place_err.ty(self.body, tcx).ty.kind() {\n+                    self.show_mutating_upvar(tcx, id, the_place_err, &mut err);\n+                }\n             }\n \n             // Also suggest adding mut for upvars\n@@ -271,6 +278,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         );\n                     }\n                 }\n+\n+                let tcx = self.infcx.tcx;\n+                if let ty::Ref(_, ty, Mutability::Mut) = the_place_err.ty(self.body, tcx).ty.kind()\n+                {\n+                    if let ty::Closure(id, _) = ty.kind() {\n+                        self.show_mutating_upvar(tcx, id, the_place_err, &mut err);\n+                    }\n+                }\n             }\n \n             // complete hack to approximate old AST-borrowck\n@@ -463,6 +478,45 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n+    // point to span of upvar making closure call require mutable borrow\n+    fn show_mutating_upvar(\n+        &self,\n+        tcx: TyCtxt<'_>,\n+        id: &hir::def_id::DefId,\n+        the_place_err: PlaceRef<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        let id = id.expect_local();\n+        let tables = tcx.typeck(id);\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(id);\n+        let (span, place) = &tables.closure_kind_origins()[hir_id];\n+        let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n+            let upvar = ty::place_to_string_for_capture(tcx, place);\n+            match tables.upvar_capture(upvar_id) {\n+                ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n+                    kind: ty::BorrowKind::MutBorrow,\n+                    ..\n+                }) => {\n+                    format!(\"mutable borrow of `{}`\", upvar)\n+                }\n+                ty::UpvarCapture::ByValue(_) => {\n+                    format!(\"possible mutation of `{}`\", upvar)\n+                }\n+                _ => bug!(\"upvar `{}` borrowed, but not mutably\", upvar),\n+            }\n+        } else {\n+            bug!(\"not an upvar\")\n+        };\n+        err.span_label(\n+            *span,\n+            format!(\n+                \"calling `{}` requires mutable binding due to {}\",\n+                self.describe_place(the_place_err).unwrap(),\n+                reason\n+            ),\n+        );\n+    }\n+\n     /// Targeted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n     fn expected_fn_found_fn_mut_call(&self, err: &mut DiagnosticBuilder<'_>, sp: Span, act: &str) {\n         err.span_label(sp, format!(\"cannot {}\", act));"}, {"sha": "ea74fb966846ff1f7ff8ed18a62a5633bbfbe828", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -20,7 +20,9 @@ error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n    |\n LL |     let f = || {\n    |         - help: consider changing this to be mutable: `mut f`\n-...\n+LL |         let y = &raw mut x;\n+   |                          - calling `f` requires mutable binding due to mutable borrow of `x`\n+LL |     };\n LL |     f();\n    |     ^ cannot borrow as mutable\n "}, {"sha": "ff210ae06a3bd1220d7d12477294bf1599655f1e", "filename": "src/test/ui/closures/issue-80313-mutable-borrow-in-closure.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.rs?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let mut my_var = false;\n+    let callback = || {\n+        &mut my_var;\n+    };\n+    callback(); //~ ERROR E0596\n+}"}, {"sha": "bf9e1febdbba40a55ba062b64b82a824dd8bde40", "filename": "src/test/ui/closures/issue-80313-mutable-borrow-in-closure.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,14 @@\n+error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-80313-mutable-borrow-in-closure.rs:6:5\n+   |\n+LL |     let callback = || {\n+   |         -------- help: consider changing this to be mutable: `mut callback`\n+LL |         &mut my_var;\n+   |              ------ calling `callback` requires mutable binding due to mutable borrow of `my_var`\n+LL |     };\n+LL |     callback();\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "8f2d8a676302cb1b2f1ab4ae97212a1c13ed00d7", "filename": "src/test/ui/closures/issue-80313-mutable-borrow-in-move-closure.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.rs?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let mut my_var = false;\n+    let callback = move || {\n+        &mut my_var;\n+    };\n+    callback(); //~ ERROR E0596\n+}"}, {"sha": "b67cec6a609f0857eaa8e6a63e0839aa7ba29941", "filename": "src/test/ui/closures/issue-80313-mutable-borrow-in-move-closure.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,14 @@\n+error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-80313-mutable-borrow-in-move-closure.rs:6:5\n+   |\n+LL |     let callback = move || {\n+   |         -------- help: consider changing this to be mutable: `mut callback`\n+LL |         &mut my_var;\n+   |              ------ calling `callback` requires mutable binding due to possible mutation of `my_var`\n+LL |     };\n+LL |     callback();\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "e082ea562ef2219f4ff81d87ded6e35b0242b3d8", "filename": "src/test/ui/closures/issue-80313-mutation-in-closure.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.rs?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let mut my_var = false;\n+    let callback = || {\n+        my_var = true;\n+    };\n+    callback(); //~ ERROR E0596\n+}"}, {"sha": "6e98549f6b84f8cbf1c0252e8c14cb6e5b77bdf1", "filename": "src/test/ui/closures/issue-80313-mutation-in-closure.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,14 @@\n+error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-80313-mutation-in-closure.rs:6:5\n+   |\n+LL |     let callback = || {\n+   |         -------- help: consider changing this to be mutable: `mut callback`\n+LL |         my_var = true;\n+   |         ------ calling `callback` requires mutable binding due to mutable borrow of `my_var`\n+LL |     };\n+LL |     callback();\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "f66bf4e0628319071b0de5a06cb06a0a74ef1632", "filename": "src/test/ui/closures/issue-80313-mutation-in-move-closure.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.rs?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let mut my_var = false;\n+    let callback = move || {\n+        my_var = true;\n+    };\n+    callback(); //~ ERROR E0596\n+}"}, {"sha": "edd55422a0bd490350d671b9b1b82bcaa31e6614", "filename": "src/test/ui/closures/issue-80313-mutation-in-move-closure.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -0,0 +1,14 @@\n+error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-80313-mutation-in-move-closure.rs:6:5\n+   |\n+LL |     let callback = move || {\n+   |         -------- help: consider changing this to be mutable: `mut callback`\n+LL |         my_var = true;\n+   |         ------ calling `callback` requires mutable binding due to possible mutation of `my_var`\n+LL |     };\n+LL |     callback();\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "a0ed56d4bcf7bf20ff20ce696debf0734bb9d5aa", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -3,6 +3,8 @@ error[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n    |\n LL |     let tick1 = || {\n    |         ----- help: consider changing this to be mutable: `mut tick1`\n+LL |         counter += 1;\n+   |         ------- calling `tick1` requires mutable binding due to mutable borrow of `counter`\n ...\n LL |         tick1();\n    |         ^^^^^ cannot borrow as mutable\n@@ -12,6 +14,8 @@ error[E0596]: cannot borrow `tick2` as mutable, as it is not declared as mutable\n    |\n LL |     let tick2 = || {\n    |         ----- help: consider changing this to be mutable: `mut tick2`\n+LL |         tick1();\n+   |         ----- calling `tick2` requires mutable binding due to mutable borrow of `tick1`\n ...\n LL |     tick2();\n    |     ^^^^^ cannot borrow as mutable"}, {"sha": "27d23e3fa044bb5f261478c435f44f0971da4639", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-missing-mut.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -2,7 +2,9 @@ error[E0596]: cannot borrow `tick` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-missing-mut.rs:7:5\n    |\n LL |     let tick = || counter += 1;\n-   |         ---- help: consider changing this to be mutable: `mut tick`\n+   |         ----      ------- calling `tick` requires mutable binding due to mutable borrow of `counter`\n+   |         |\n+   |         help: consider changing this to be mutable: `mut tick`\n LL |     tick();\n    |     ^^^^ cannot borrow as mutable\n "}, {"sha": "c00f986c397a7240012490b0823521d9a8c82d3e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-move-missing-mut.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr?ref=4283623bc0ccc8a7b71e54bb068bfb3b7d80d80d", "patch": "@@ -2,7 +2,9 @@ error[E0596]: cannot borrow `tick` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-move-missing-mut.rs:7:5\n    |\n LL |     let tick = move || counter += 1;\n-   |         ---- help: consider changing this to be mutable: `mut tick`\n+   |         ----           ------- calling `tick` requires mutable binding due to possible mutation of `counter`\n+   |         |\n+   |         help: consider changing this to be mutable: `mut tick`\n LL |     tick();\n    |     ^^^^ cannot borrow as mutable\n "}]}