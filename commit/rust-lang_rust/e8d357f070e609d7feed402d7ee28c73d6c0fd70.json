{"sha": "e8d357f070e609d7feed402d7ee28c73d6c0fd70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDM1N2YwNzBlNjA5ZDdmZWVkNDAyZDdlZTI4YzczZDZjMGZkNzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-22T13:59:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:35:37Z"}, "message": "Decide signdedness on the layout instead of the type", "tree": {"sha": "5c0bb9a781e944b16468f7f2f54e8a11090058f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0bb9a781e944b16468f7f2f54e8a11090058f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d357f070e609d7feed402d7ee28c73d6c0fd70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg58kACgkQpp+NIls6\n19mUVBAAqtGU2ILRjQws0ax4i4QzbBwctQs6vkAeSK3+WFqYuZ4DQfhBcOcp5VAa\nNMln27oX3rbhiwwYS9oqf2GEjCB026iEtXnh6sS3XUiPnvFUWuXrhRzXPqzsfeSe\nQcX6j0NUW0YdPUtUVwemlQ88gE6YLTchCNyun4rmYyzy7Irl+sb6RBqDsgSpcsq+\nnz1yrv+DoX0QMyomRFMC7tW9kUhSd8rQ7H3ktdsXiE8OBE+h/CY5ubn8JRIyOIYT\n3dW4vlImZcD3qjpj9KJ8EUoOKtw2UoR2BEL0V4pu2UfqAPm4tuVBoCEFeqbtE5m7\nVlkGoL/OA/PV3qWJ8E78vgWlBsYkN5TyXM5/uXskuNtg813f7u/yZBEIa2cmVFTa\n8I84Exnc4heEv6YFjAtfE34++hjdCg3I+LVFosX79xIiO1eAWjf9/zfZBdAdlExh\nG9uviWFMVfsPmsIgRgXTLjMH/LDbPJA7ZwzOFPVEu/YHc3yXO4ZCu3PY9XUrT5IP\nlfjHsGGg4iHNoxmvvZyIyNQ5FC0mZCZ2ZWXySsHRsA8v6SebejfD6n99vbYQ2kOA\no5v2g692AGI2XqyIC+zzuZ2O9FZPYgu3wkzV7fG7bZxArOWipAsgKqzhfW4rUP8Q\nnDGS8jqTqtXp3uhu2wpRVlUtNUEYf7zDCKcpuEs3pYs6a5D01/U=\n=sc3c\n-----END PGP SIGNATURE-----", "payload": "tree 5c0bb9a781e944b16468f7f2f54e8a11090058f5\nparent 889a4ebfa98977583e4f319154080c4594e6e16e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1519307958 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494537 +0100\n\nDecide signdedness on the layout instead of the type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d357f070e609d7feed402d7ee28c73d6c0fd70", "html_url": "https://github.com/rust-lang/rust/commit/e8d357f070e609d7feed402d7ee28c73d6c0fd70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d357f070e609d7feed402d7ee28c73d6c0fd70/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "889a4ebfa98977583e4f319154080c4594e6e16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/889a4ebfa98977583e4f319154080c4594e6e16e", "html_url": "https://github.com/rust-lang/rust/commit/889a4ebfa98977583e4f319154080c4594e6e16e"}], "stats": {"total": 146, "additions": 77, "deletions": 69}, "files": [{"sha": "1b919ad68d047069d141ed0d736a07e570786e0f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -794,6 +794,17 @@ impl Abi {\n             Abi::Aggregate { sized } => !sized\n         }\n     }\n+\n+    /// Returns true if this is a single signed integer scalar\n+    pub fn is_signed(&self) -> bool {\n+        match *self {\n+            Abi::Scalar(ref scal) => match scal.value {\n+                Primitive::Int(_, signed) => signed,\n+                _ => false,\n+            },\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(PartialEq, Eq, Hash, Debug)]"}, {"sha": "8614f7bd58e2b97854aed1f2d4504bba88e17429", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -1824,7 +1824,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     }\n \n     #[inline]\n-    fn eval_explicit_discr(\n+    pub fn eval_explicit_discr(\n         &self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         expr_did: DefId,\n@@ -1871,15 +1871,29 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                         ty,\n                     })\n                 }\n+            },\n+            Ok(&ty::Const {\n+                val: ConstVal::Value(other),\n+                ..\n+            }) => {\n+                info!(\"invalid enum discriminant: {:#?}\", other);\n+                ::middle::const_val::struct_error(\n+                    tcx,\n+                    tcx.def_span(expr_did),\n+                    \"constant evaluation of enum discriminant resulted in non-integer\",\n+                ).emit();\n+                None\n             }\n-            _ => {\n+            Err(err) => {\n+                err.report(tcx, tcx.def_span(expr_did), \"enum discriminant\");\n                 if !expr_did.is_local() {\n                     span_bug!(tcx.def_span(expr_did),\n                         \"variant discriminant evaluation succeeded \\\n                             in its crate but failed locally\");\n                 }\n                 None\n             }\n+            _ => span_bug!(tcx.def_span(expr_did), \"const eval \"),\n         }\n     }\n "}, {"sha": "e654142d2164c346d64655ff3e8dbb759abefd27", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -1,4 +1,5 @@\n use rustc::ty::Ty;\n+use rustc::ty::layout::LayoutOf;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_const_math::ConstFloat;\n@@ -35,23 +36,30 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         src_ty: Ty<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, PrimVal> {\n+        let signed = self.layout_of(src_ty)?.abi.is_signed();\n+        let v = if signed {\n+            self.sign_extend(v, src_ty)?\n+        } else {\n+            v\n+        };\n         trace!(\"cast_from_int: {}, {}, {}\", v, src_ty, dest_ty);\n         use rustc::ty::TypeVariants::*;\n         match dest_ty.sty {\n             TyInt(_) | TyUint(_) => {\n-                let v = self.sign_extend(v, src_ty)?;\n                 let v = self.truncate(v, dest_ty)?;\n                 Ok(PrimVal::Bytes(v))\n             }\n \n-            TyFloat(fty) if src_ty.is_signed() => Ok(PrimVal::Bytes(ConstFloat::from_i128(v as i128, fty).bits)),\n+            TyFloat(fty) if signed => Ok(PrimVal::Bytes(ConstFloat::from_i128(v as i128, fty).bits)),\n             TyFloat(fty) => Ok(PrimVal::Bytes(ConstFloat::from_u128(v, fty).bits)),\n \n             TyChar if v as u8 as u128 == v => Ok(PrimVal::Bytes(v)),\n             TyChar => err!(InvalidChar(v)),\n \n             // No alignment check needed for raw pointers.  But we have to truncate to target ptr size.\n-            TyRawPtr(_) => Ok(PrimVal::Bytes(self.memory.truncate_to_ptr(v).0 as u128)),\n+            TyRawPtr(_) => {\n+                Ok(PrimVal::Bytes(self.memory.truncate_to_ptr(v).0 as u128))\n+            },\n \n             // Casts to bool are not permitted by rustc, no need to handle them here.\n             _ => err!(Unimplemented(format!(\"int to {:?} cast\", dest_ty))),"}, {"sha": "97056dd66bbbad137f4bccdd1f120972eee9477e", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -1128,20 +1128,22 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         dest_align: Align,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"write_value_to_ptr: {:#?}\", value);\n         let layout = self.layout_of(dest_ty)?;\n+        trace!(\"write_value_to_ptr: {:#?}, {}, {:#?}\", value, dest_ty, layout);\n         match value {\n             Value::ByRef(ptr, align) => {\n                 self.memory.copy(ptr, align.min(layout.align), dest, dest_align.min(layout.align), layout.size.bytes(), false)\n             }\n             Value::ByVal(primval) => {\n-                match layout.abi {\n-                    layout::Abi::Scalar(_) => {}\n-                    _ if primval.is_undef() => {}\n+                let signed = match layout.abi {\n+                    layout::Abi::Scalar(ref scal) => match scal.value {\n+                        layout::Primitive::Int(_, signed) => signed,\n+                        _ => false,\n+                    },\n+                    _ if primval.is_undef() => false,\n                     _ => bug!(\"write_value_to_ptr: invalid ByVal layout: {:#?}\", layout)\n-                }\n-                // TODO: Do we need signedness?\n-                self.memory.write_primval(dest.to_ptr()?, dest_align, primval, layout.size.bytes(), false)\n+                };\n+                self.memory.write_primval(dest.to_ptr()?, dest_align, primval, layout.size.bytes(), signed)\n             }\n             Value::ByValPair(a_val, b_val) => {\n                 let ptr = dest.to_ptr()?;\n@@ -1679,7 +1681,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     }\n \n     pub fn sign_extend(&self, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n-        let size = self.layout_of(ty)?.size.bits();\n+        let layout = self.layout_of(ty)?;\n+        let size = layout.size.bits();\n+        assert!(layout.abi.is_signed());\n         // sign extend\n         let amt = 128 - size;\n         // shift the unsigned value to the left"}, {"sha": "4e5bf25ca3b40e023500f2d9c899b75861af4d21", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -702,19 +702,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                 val.offset as u128\n             }\n \n-            PrimVal::Bytes(bytes) => {\n-                // We need to mask here, or the byteorder crate can die when given a u64 larger\n-                // than fits in an integer of the requested size.\n-                let mask = match size {\n-                    1 => !0u8 as u128,\n-                    2 => !0u16 as u128,\n-                    4 => !0u32 as u128,\n-                    8 => !0u64 as u128,\n-                    16 => !0,\n-                    n => bug!(\"unexpected PrimVal::Bytes size: {}\", n),\n-                };\n-                bytes & mask\n-            }\n+            PrimVal::Bytes(bytes) => bytes,\n \n             PrimVal::Undef => {\n                 self.mark_definedness(PrimVal::Ptr(ptr).into(), size, false)?;"}, {"sha": "a74fe63e53c86924f3cb5f107369f4a375a909f2", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -83,21 +83,34 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         let l = left.to_bytes()?;\n         let r = right.to_bytes()?;\n \n+        let left_layout = self.layout_of(left_ty)?;\n+\n         // These ops can have an RHS with a different numeric type.\n         if right_kind.is_int() && (bin_op == Shl || bin_op == Shr) {\n-            let op: fn(u128, u32) -> (u128, bool) = match bin_op {\n-                Shl => u128::overflowing_shl,\n-                Shr => u128::overflowing_shr,\n-                _ => bug!(\"it has already been checked that this is a shift op\"),\n-            };\n-            let l = if left_ty.is_signed() {\n-                self.sign_extend(l, left_ty)?\n+            let signed = left_layout.abi.is_signed();\n+            let mut r = r as u32;\n+            let size = left_layout.size.bits() as u32;\n+            let oflo = r > size;\n+            if oflo {\n+                r %= size;\n+            }\n+            let result = if signed {\n+                let l = self.sign_extend(l, left_ty)? as i128;\n+                let result = match bin_op {\n+                    Shl => l << r,\n+                    Shr => l >> r,\n+                    _ => bug!(\"it has already been checked that this is a shift op\"),\n+                };\n+                result as u128\n             } else {\n-                l\n+                match bin_op {\n+                    Shl => l << r,\n+                    Shr => l >> r,\n+                    _ => bug!(\"it has already been checked that this is a shift op\"),\n+                }\n             };\n-            let (result, oflo) = op(l, r as u32);\n             let truncated = self.truncate(result, left_ty)?;\n-            return Ok((PrimVal::Bytes(truncated), oflo || truncated != result));\n+            return Ok((PrimVal::Bytes(truncated), oflo));\n         }\n \n         if left_kind != right_kind {\n@@ -137,7 +150,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n         };\n \n-        if left_ty.is_signed() {\n+        if left_layout.abi.is_signed() {\n             let op: Option<fn(&i128, &i128) -> bool> = match bin_op {\n                 Lt => Some(i128::lt),\n                 Le => Some(i128::le),\n@@ -162,7 +175,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             if let Some(op) = op {\n                 let l128 = self.sign_extend(l, left_ty)? as i128;\n                 let r = self.sign_extend(r, right_ty)? as i128;\n-                let size = self.layout_of(left_ty)?.size.bits();\n+                let size = left_layout.size.bits();\n                 match bin_op {\n                     Rem | Div => {\n                         // int_min / -1"}, {"sha": "858d9fb5b749260b6cfb2bf812488c855ed17466", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d357f070e609d7feed402d7ee28c73d6c0fd70/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8d357f070e609d7feed402d7ee28c73d6c0fd70", "patch": "@@ -28,17 +28,14 @@ use astconv::{AstConv, Bounds};\n use lint;\n use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n-use middle::const_val::ConstVal;\n use middle::resolve_lifetime as rl;\n use rustc::mir::mono::Linkage;\n-use rustc::traits::Reveal;\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n-use rustc::mir::interpret::{GlobalId, Value, PrimVal};\n use rustc::ty::util::Discr;\n \n use syntax::{abi, ast};\n@@ -511,7 +508,6 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         def_id: DefId,\n                                         variants: &[hir::Variant]) {\n-    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n     let def = tcx.adt_def(def_id);\n     let repr_type = def.repr.discr_type();\n     let initial = repr_type.initial_discriminant(tcx);\n@@ -522,33 +518,7 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let wrapped_discr = prev_discr.map_or(initial, |d| d.wrap_incr(tcx));\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n-            let substs = Substs::identity_for_item(tcx, expr_did);\n-            let instance = ty::Instance::new(expr_did, substs);\n-            let global_id = GlobalId {\n-                instance,\n-                promoted: None\n-            };\n-            let result = tcx.at(variant.span).const_eval(param_env.and(global_id));\n-\n-            // enum variant evaluation happens before the global constant check\n-            // so we need to report the real error\n-            if let Err(ref err) = result {\n-                err.report(tcx, variant.span, \"enum discriminant\");\n-            }\n-\n-            match result {\n-                // FIXME: just use `to_raw_bits` here?\n-                Ok(&ty::Const {\n-                    val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n-                    ..\n-                }) => {\n-                    Some(Discr {\n-                        val: b,\n-                        ty: initial.ty,\n-                    })\n-                }\n-                _ => None\n-            }\n+            def.eval_explicit_discr(tcx, expr_did)\n         } else if let Some(discr) = repr_type.disr_incr(tcx, prev_discr) {\n             Some(discr)\n         } else {"}]}