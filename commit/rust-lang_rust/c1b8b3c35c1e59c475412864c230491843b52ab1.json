{"sha": "c1b8b3c35c1e59c475412864c230491843b52ab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjhiM2MzNWMxZTU5YzQ3NTQxMjg2NGMyMzA0OTE4NDNiNTJhYjE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-06T22:19:29Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-08T22:15:46Z"}, "message": "get rid of keyword idents, replace with names\n\nshould prevent future bugs", "tree": {"sha": "30d40c7c63a83529dffaef46283b86ceaf5f7628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d40c7c63a83529dffaef46283b86ceaf5f7628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b8b3c35c1e59c475412864c230491843b52ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b8b3c35c1e59c475412864c230491843b52ab1", "html_url": "https://github.com/rust-lang/rust/commit/c1b8b3c35c1e59c475412864c230491843b52ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b8b3c35c1e59c475412864c230491843b52ab1/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b64345d681681adc97e64c0dd74a1c9b0762ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b64345d681681adc97e64c0dd74a1c9b0762ea", "html_url": "https://github.com/rust-lang/rust/commit/06b64345d681681adc97e64c0dd74a1c9b0762ea"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "584670cc65480c0e18ec51b6f08be87d7058eb12", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b8b3c35c1e59c475412864c230491843b52ab1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b8b3c35c1e59c475412864c230491843b52ab1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c1b8b3c35c1e59c475412864c230491843b52ab1", "patch": "@@ -542,7 +542,7 @@ impl<'a> Parser<'a> {\n     // true. Otherwise, return false.\n     pub fn eat_keyword(&mut self, kw: keywords::Keyword) -> bool {\n         match self.token {\n-            token::IDENT(sid, false) if kw.to_ident().name == sid.name => {\n+            token::IDENT(sid, false) if kw.to_name() == sid.name => {\n                 self.bump();\n                 true\n             }\n@@ -555,7 +555,7 @@ impl<'a> Parser<'a> {\n     // otherwise, eat it.\n     pub fn expect_keyword(&mut self, kw: keywords::Keyword) {\n         if !self.eat_keyword(kw) {\n-            let id_interned_str = token::get_ident(kw.to_ident());\n+            let id_interned_str = token::get_name(kw.to_name());\n             let token_str = self.this_token_to_string();\n             self.fatal(format!(\"expected `{}`, found `{}`\",\n                                id_interned_str, token_str).as_slice())"}, {"sha": "dc0be39c42c9954d2ec7f8ea12ebe174789e8a1f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1b8b3c35c1e59c475412864c230491843b52ab1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b8b3c35c1e59c475412864c230491843b52ab1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c1b8b3c35c1e59c475412864c230491843b52ab1", "patch": "@@ -413,26 +413,26 @@ macro_rules! declare_special_idents_and_keywords {(\n      * the language and may not appear as identifiers.\n      */\n     pub mod keywords {\n-        use ast::Ident;\n+        use ast::Name;\n \n         pub enum Keyword {\n             $( $sk_variant, )*\n             $( $rk_variant, )*\n         }\n \n         impl Keyword {\n-            pub fn to_ident(&self) -> Ident {\n+            pub fn to_name(&self) -> Name {\n                 match *self {\n-                    $( $sk_variant => Ident { name: $sk_name, ctxt: 0 }, )*\n-                    $( $rk_variant => Ident { name: $rk_name, ctxt: 0 }, )*\n+                    $( $sk_variant => $sk_name, )*\n+                    $( $rk_variant => $rk_name, )*\n                 }\n             }\n         }\n     }\n \n     fn mk_fresh_ident_interner() -> IdentInterner {\n         // The indices here must correspond to the numbers in\n-        // special_idents, in Keyword to_ident(), and in static\n+        // special_idents, in Keyword to_name(), and in static\n         // constants below.\n         let mut init_vec = Vec::new();\n         $(init_vec.push($si_str);)*\n@@ -710,7 +710,7 @@ pub fn fresh_mark() -> Mrk {\n \n pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n     match *tok {\n-        token::IDENT(sid, false) => { kw.to_ident().name == sid.name }\n+        token::IDENT(sid, false) => { kw.to_name() == sid.name }\n         _ => { false }\n     }\n }"}]}