{"sha": "14f863c44369c5abde6379afb7e1b206eef099e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Zjg2M2M0NDM2OWM1YWJkZTYzNzlhZmI3ZTFiMjA2ZWVmMDk5ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-04T00:48:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-04T00:48:42Z"}, "message": "Auto merge of #84472 - Aaron1011:conservative-paramenv-and, r=lcnr\n\nBe more conservative about discarding caller_bound in `ParamEnv::and`", "tree": {"sha": "95d1690d12851577c1f2331a2b1b280cc443a134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d1690d12851577c1f2331a2b1b280cc443a134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f863c44369c5abde6379afb7e1b206eef099e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f863c44369c5abde6379afb7e1b206eef099e8", "html_url": "https://github.com/rust-lang/rust/commit/14f863c44369c5abde6379afb7e1b206eef099e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f863c44369c5abde6379afb7e1b206eef099e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716394d6581b60c75cfdd88b8e5b876f2db88b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/716394d6581b60c75cfdd88b8e5b876f2db88b62", "html_url": "https://github.com/rust-lang/rust/commit/716394d6581b60c75cfdd88b8e5b876f2db88b62"}, {"sha": "091b7ddcdd86189d7b01771bd0aff317f632b2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/091b7ddcdd86189d7b01771bd0aff317f632b2f9", "html_url": "https://github.com/rust-lang/rust/commit/091b7ddcdd86189d7b01771bd0aff317f632b2f9"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "9faa172a4973f583aae2cf7128387f86687a32a3", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f863c44369c5abde6379afb7e1b206eef099e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f863c44369c5abde6379afb7e1b206eef099e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=14f863c44369c5abde6379afb7e1b206eef099e8", "patch": "@@ -141,7 +141,9 @@ impl FlagComputation {\n             &ty::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n-                    ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {}\n+                    ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {\n+                        self.add_flags(TypeFlags::HAS_TY_FRESH)\n+                    }\n \n                     ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => {\n                         self.add_flags(TypeFlags::HAS_TY_INFER)\n@@ -278,7 +280,7 @@ impl FlagComputation {\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n-                    InferConst::Fresh(_) => {}\n+                    InferConst::Fresh(_) => self.add_flags(TypeFlags::HAS_CT_FRESH),\n                     InferConst::Var(_) => self.add_flags(TypeFlags::HAS_CT_INFER),\n                 }\n             }"}, {"sha": "0dbcd483c4579c96d638e6cf8f8bdf5aa0e2dae3", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/14f863c44369c5abde6379afb7e1b206eef099e8/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f863c44369c5abde6379afb7e1b206eef099e8/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=14f863c44369c5abde6379afb7e1b206eef099e8", "patch": "@@ -59,6 +59,15 @@ bitflags! {\n                                           | TypeFlags::HAS_CT_INFER.bits\n                                           | TypeFlags::HAS_TY_PLACEHOLDER.bits\n                                           | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                          // We consider 'freshened' types and constants\n+                                          // to depend on a particular fn.\n+                                          // The freshening process throws away information,\n+                                          // which can make things unsuitable for use in a global\n+                                          // cache. Note that there is no 'fresh lifetime' flag -\n+                                          // freshening replaces all lifetimes with `ReErased`,\n+                                          // which is different from how types/const are freshened.\n+                                          | TypeFlags::HAS_TY_FRESH.bits\n+                                          | TypeFlags::HAS_CT_FRESH.bits\n                                           | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n         /// Does this have `Projection`?\n@@ -90,6 +99,12 @@ bitflags! {\n         /// Does this value have parameters/placeholders/inference variables which could be\n         /// replaced later, in a way that would change the results of `impl` specialization?\n         const STILL_FURTHER_SPECIALIZABLE = 1 << 17;\n+\n+        /// Does this value have `InferTy::FreshTy/FreshIntTy/FreshFloatTy`?\n+        const HAS_TY_FRESH                = 1 << 18;\n+\n+        /// Does this value have `InferConst::Fresh`?\n+        const HAS_CT_FRESH                = 1 << 19;\n     }\n }\n "}, {"sha": "1494001564fe717f76c5cebbe905144184543cca", "filename": "src/test/ui/traits/issue-84399-bad-fresh-caching.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/14f863c44369c5abde6379afb7e1b206eef099e8/src%2Ftest%2Fui%2Ftraits%2Fissue-84399-bad-fresh-caching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f863c44369c5abde6379afb7e1b206eef099e8/src%2Ftest%2Fui%2Ftraits%2Fissue-84399-bad-fresh-caching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-84399-bad-fresh-caching.rs?ref=14f863c44369c5abde6379afb7e1b206eef099e8", "patch": "@@ -0,0 +1,55 @@\n+// compile-flags: --crate-type lib\n+// check-pass\n+//\n+// Regression test for issue #84399\n+// Tests that we keep the full `ParamEnv` when\n+// caching predicates with freshened types in the global cache\n+\n+use std::marker::PhantomData;\n+pub trait Allocator<R> {\n+    type Buffer;\n+}\n+pub struct DefaultAllocator;\n+impl <R> Allocator<R> for DefaultAllocator {\n+    type Buffer = ();\n+}\n+pub type Owned<R> = <DefaultAllocator as Allocator<R>>::Buffer;\n+pub type MatrixMN<R> = Matrix<R, Owned<R>>;\n+pub type Matrix4<N> = Matrix<N, ()>;\n+pub struct Matrix<R, S> {\n+    pub data: S,\n+    _phantoms: PhantomData<R>,\n+}\n+pub fn set_object_transform(matrix: &Matrix4<()>) {\n+    matrix.js_buffer_view();\n+}\n+pub trait Storable {\n+    type Cell;\n+    fn slice_to_items(_buffer: &()) -> &[Self::Cell] {\n+        unimplemented!()\n+    }\n+}\n+pub type Cell<T> = <T as Storable>::Cell;\n+impl<R> Storable for MatrixMN<R>\n+where\n+    DefaultAllocator: Allocator<R>,\n+{\n+    type Cell = ();\n+}\n+pub trait JsBufferView {\n+    fn js_buffer_view(&self) -> usize {\n+        unimplemented!()\n+    }\n+}\n+impl<R> JsBufferView for [MatrixMN<R>]\n+where\n+    DefaultAllocator: Allocator<R>,\n+    MatrixMN<R>: Storable,\n+    [Cell<MatrixMN<R>>]: JsBufferView,\n+{\n+    fn js_buffer_view(&self) -> usize {\n+        <MatrixMN<R> as Storable>::slice_to_items(&()).js_buffer_view()\n+    }\n+}\n+impl JsBufferView for [()] {}\n+impl<R> JsBufferView for MatrixMN<R> where DefaultAllocator: Allocator<R> {}"}]}