{"sha": "e593d4ac73497f01d577a88ff1a0d57f63734dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OTNkNGFjNzM0OTdmMDFkNTc3YTg4ZmYxYTBkNTdmNjM3MzRkYmY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-03T12:51:07Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-03T12:51:07Z"}, "message": "Merge #1226\n\n1226: Fix Bug in mbe on mismatching bindings count r=matklad a=edwin0cheng\n\nThis PR do the followings things:\r\n\r\n1. Fixed a bug happened in following code by inserting empty bindings before a nested bindings:\r\n```\r\nmacro_rules foo! {\r\n  ($( ($($a:ident)* => $($b:ident))*))* => { ... }\r\n}\r\nfoo!( ( => a) (b => ) )\r\n```\r\n2. Fixed a bug which forget to restore `var_expanded`.\r\n3. Some cleanup \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "03532b56d9300d307986e1a6bc6dddf8c30e7621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03532b56d9300d307986e1a6bc6dddf8c30e7621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e593d4ac73497f01d577a88ff1a0d57f63734dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e593d4ac73497f01d577a88ff1a0d57f63734dbf", "html_url": "https://github.com/rust-lang/rust/commit/e593d4ac73497f01d577a88ff1a0d57f63734dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e593d4ac73497f01d577a88ff1a0d57f63734dbf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "9901f3e45efebafbd0e9f53951346f171792b169", "url": "https://api.github.com/repos/rust-lang/rust/commits/9901f3e45efebafbd0e9f53951346f171792b169", "html_url": "https://github.com/rust-lang/rust/commit/9901f3e45efebafbd0e9f53951346f171792b169"}, {"sha": "11d6a1449de1ae4284fe73d9955d29ae6eea2356", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d6a1449de1ae4284fe73d9955d29ae6eea2356", "html_url": "https://github.com/rust-lang/rust/commit/11d6a1449de1ae4284fe73d9955d29ae6eea2356"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "ea2104b1c61d9c243174aa19065ec72ac07ec3e5", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e593d4ac73497f01d577a88ff1a0d57f63734dbf/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e593d4ac73497f01d577a88ff1a0d57f63734dbf/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=e593d4ac73497f01d577a88ff1a0d57f63734dbf", "patch": "@@ -99,13 +99,31 @@ pub(crate) struct Subtree {\n     pub(crate) token_trees: Vec<TokenTree>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, Eq)]\n pub(crate) enum Separator {\n     Literal(tt::Literal),\n     Ident(tt::Ident),\n     Puncts(SmallVec<[tt::Punct; 3]>),\n }\n \n+// Note that when we compare a Separator, we just care about its textual value.\n+impl PartialEq for crate::Separator {\n+    fn eq(&self, other: &crate::Separator) -> bool {\n+        use crate::Separator::*;\n+\n+        match (self, other) {\n+            (Ident(ref a), Ident(ref b)) => a.text == b.text,\n+            (Literal(ref a), Literal(ref b)) => a.text == b.text,\n+            (Puncts(ref a), Puncts(ref b)) if a.len() == b.len() => {\n+                let a_iter = a.iter().map(|a| a.char);\n+                let b_iter = b.iter().map(|b| b.char);\n+                a_iter.eq(b_iter)\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) struct Repeat {\n     pub(crate) subtree: Subtree,\n@@ -1270,6 +1288,6 @@ cfg_if !   {\n      } \n  }        \n \"#,         \n-        \"__cfg_if_items ! {() ;  (() (mod libunwind ; pub use libunwind :: * ;)) ,}\");\n+        \"__cfg_if_items ! {() ; ((target_env = \\\"msvc\\\") ()) , ((all (target_arch = \\\"wasm32\\\" , not (target_os = \\\"emscripten\\\"))) ()) , (() (mod libunwind ; pub use libunwind :: * ;)) ,}\");\n     }\n }"}, {"sha": "361b1e404c48f5b0b7c6d54c5071f909f1794b71", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e593d4ac73497f01d577a88ff1a0d57f63734dbf/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e593d4ac73497f01d577a88ff1a0d57f63734dbf/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=e593d4ac73497f01d577a88ff1a0d57f63734dbf", "patch": "@@ -107,13 +107,19 @@ impl Bindings {\n         }\n     }\n \n-    fn push_nested(&mut self, nested: Bindings) -> Result<(), ExpandError> {\n+    fn push_nested(&mut self, idx: usize, nested: Bindings) -> Result<(), ExpandError> {\n         for (key, value) in nested.inner {\n             if !self.inner.contains_key(&key) {\n                 self.inner.insert(key.clone(), Binding::Nested(Vec::new()));\n             }\n             match self.inner.get_mut(&key) {\n-                Some(Binding::Nested(it)) => it.push(value),\n+                Some(Binding::Nested(it)) => {\n+                    // insert empty nested bindings before this one\n+                    while it.len() < idx {\n+                        it.push(Binding::Nested(vec![]));\n+                    }\n+                    it.push(value);\n+                }\n                 _ => {\n                     return Err(ExpandError::BindingError(format!(\n                         \"could not find binding `{}`\",\n@@ -178,10 +184,6 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                                 input.eat_meta().ok_or(ExpandError::UnexpectedToken)?.clone();\n                             res.inner.insert(text.clone(), Binding::Simple(meta.into()));\n                         }\n-                        // FIXME:\n-                        // Enable followiing code when everything is fixed\n-                        // At least we can dogfood itself to not stackoverflow\n-                        //\n                         \"tt\" => {\n                             let token = input.eat().ok_or(ExpandError::UnexpectedToken)?.clone();\n                             res.inner.insert(text.clone(), Binding::Simple(token.into()));\n@@ -252,36 +254,25 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                 loop {\n                     match match_lhs(subtree, input) {\n                         Ok(nested) => {\n-                            counter += 1;\n                             limit -= 1;\n                             if limit == 0 {\n                                 log::warn!(\"match_lhs excced in repeat pattern exceed limit => {:#?}\\n{:#?}\\n{:#?}\\n{:#?}\", subtree, input, kind, separator);\n                                 break;\n                             }\n \n                             memento = input.save();\n-                            res.push_nested(nested)?;\n+                            res.push_nested(counter, nested)?;\n+                            counter += 1;\n                             if counter == 1 {\n                                 if let crate::RepeatKind::ZeroOrOne = kind {\n                                     break;\n                                 }\n                             }\n \n                             if let Some(separator) = separator {\n-                                use crate::Separator::*;\n-\n                                 if !input\n                                     .eat_seperator()\n-                                    .map(|sep| match (sep, separator) {\n-                                        (Ident(ref a), Ident(ref b)) => a.text == b.text,\n-                                        (Literal(ref a), Literal(ref b)) => a.text == b.text,\n-                                        (Puncts(ref a), Puncts(ref b)) if a.len() == b.len() => {\n-                                            let a_iter = a.iter().map(|a| a.char);\n-                                            let b_iter = b.iter().map(|b| b.char);\n-                                            a_iter.eq(b_iter)\n-                                        }\n-                                        _ => false,\n-                                    })\n+                                    .map(|sep| sep == *separator)\n                                     .unwrap_or(false)\n                                 {\n                                     input.rollback(memento);\n@@ -372,14 +363,23 @@ fn expand_tt(\n             let mut has_seps = 0;\n             let mut counter = 0;\n \n+            // We store the old var expanded value, and restore it later\n+            // It is because before this `$repeat`,\n+            // it is possible some variables already expanad in the same subtree\n+            //\n+            // `some_var_expanded` keep check if the deeper subtree has expanded variables\n             let mut some_var_expanded = false;\n+            let old_var_expanded = ctx.var_expanded;\n             ctx.var_expanded = false;\n \n             while let Ok(t) = expand_subtree(&repeat.subtree, ctx) {\n-                // if no var expaned in the child, we count it as a fail\n+                // if no var expanded in the child, we count it as a fail\n                 if !ctx.var_expanded {\n                     break;\n                 }\n+\n+                // Reset `ctx.var_expandeded` to see if there is other expanded variable\n+                // in the next matching\n                 some_var_expanded = true;\n                 ctx.var_expanded = false;\n \n@@ -423,7 +423,8 @@ fn expand_tt(\n                 }\n             }\n \n-            ctx.var_expanded = some_var_expanded;\n+            // Restore the `var_expanded` by combining old one and the new one\n+            ctx.var_expanded = some_var_expanded || old_var_expanded;\n \n             ctx.nesting.pop().unwrap();\n             for _ in 0..has_seps {"}]}