{"sha": "0b714b4ba6411c6997324d442a3df602e5920ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzE0YjRiYTY0MTFjNjk5NzMyNGQ0NDJhM2RmNjAyZTU5MjBmZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-03-06T18:22:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T12:37:21Z"}, "message": "libstd: Add some methods to `Vec<T>`.", "tree": {"sha": "0b63b92fbc006baa3037c760cfa50fc89f722ee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b63b92fbc006baa3037c760cfa50fc89f722ee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b714b4ba6411c6997324d442a3df602e5920ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b714b4ba6411c6997324d442a3df602e5920ff5", "html_url": "https://github.com/rust-lang/rust/commit/0b714b4ba6411c6997324d442a3df602e5920ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b714b4ba6411c6997324d442a3df602e5920ff5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf17fea06bdf3d1540aded41a161f04a8c5a2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf17fea06bdf3d1540aded41a161f04a8c5a2c9", "html_url": "https://github.com/rust-lang/rust/commit/caf17fea06bdf3d1540aded41a161f04a8c5a2c9"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "1b643e8dab20dd5f36e574b80d38a6a90ccc24b3", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=0b714b4ba6411c6997324d442a3df602e5920ff5", "patch": "@@ -21,7 +21,7 @@ use rt::global_heap;\n use rt::local::Local;\n use rt::task::Task;\n use raw;\n-use slice::ImmutableVector;\n+use slice::{ImmutableVector, Vector};\n use vec::Vec;\n \n // This has no meaning with out rtdebug also turned on."}, {"sha": "0cd5e64783196aeb6533fc1abe8f9ae788d6afdb", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0b714b4ba6411c6997324d442a3df602e5920ff5", "patch": "@@ -101,6 +101,7 @@ use ptr::RawPtr;\n use from_str::FromStr;\n use slice;\n use slice::{OwnedVector, OwnedCloneableVector, ImmutableVector, MutableVector};\n+use slice::{Vector};\n use vec::Vec;\n use default::Default;\n use raw::Repr;"}, {"sha": "47eb275823a5092c5961c7e96aee0720e78664f2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b714b4ba6411c6997324d442a3df602e5920ff5/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0b714b4ba6411c6997324d442a3df602e5920ff5", "patch": "@@ -28,7 +28,7 @@ use ptr;\n use rt::global_heap::{malloc_raw, realloc_raw};\n use raw::Slice;\n use slice::{ImmutableEqVector, ImmutableVector, Items, MutItems, MutableVector};\n-use slice::{MutableTotalOrdVector};\n+use slice::{MutableTotalOrdVector, Vector};\n \n /// An owned, growable vector.\n ///\n@@ -534,22 +534,6 @@ impl<T> Vec<T> {\n         self.len = len;\n     }\n \n-    /// Work with `self` as a slice.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// fn foo(slice: &[int]) {}\n-    ///\n-    /// let vec = vec!(1, 2);\n-    /// foo(vec.as_slice());\n-    /// ```\n-    #[inline]\n-    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n-        let slice = Slice { data: self.ptr as *T, len: self.len };\n-        unsafe { transmute(slice) }\n-    }\n-\n     /// Work with `self` as a mutable slice.\n     ///\n     /// # Example\n@@ -1172,6 +1156,24 @@ impl<T:Eq> Vec<T> {\n     }\n }\n \n+impl<T> Vector<T> for Vec<T> {\n+    /// Work with `self` as a slice.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// fn foo(slice: &[int]) {}\n+    ///\n+    /// let vec = vec!(1, 2);\n+    /// foo(vec.as_slice());\n+    /// ```\n+    #[inline]\n+    fn as_slice<'a>(&'a self) -> &'a [T] {\n+        let slice = Slice { data: self.ptr as *T, len: self.len };\n+        unsafe { transmute(slice) }\n+    }\n+}\n+\n /// Iterates over the `second` vector, copying each element and appending it to\n /// the `first`. Afterwards, the `first` is then returned for use again.\n ///"}]}