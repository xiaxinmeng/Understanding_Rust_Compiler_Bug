{"sha": "9c8ff357272253e32f73c8170685969fb36e3ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOGZmMzU3MjcyMjUzZTMyZjczYzgxNzA2ODU5NjlmYjM2ZTNiYTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-01T23:11:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-01T23:11:37Z"}, "message": "De-export either. Part of #3583.", "tree": {"sha": "a647b5038b11c039342d5ee9f7287f0435ddf481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a647b5038b11c039342d5ee9f7287f0435ddf481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c8ff357272253e32f73c8170685969fb36e3ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8ff357272253e32f73c8170685969fb36e3ba3", "html_url": "https://github.com/rust-lang/rust/commit/9c8ff357272253e32f73c8170685969fb36e3ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c8ff357272253e32f73c8170685969fb36e3ba3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c042e06908d0906422b20fbc0a0e815f92e2daee", "url": "https://api.github.com/repos/rust-lang/rust/commits/c042e06908d0906422b20fbc0a0e815f92e2daee", "html_url": "https://github.com/rust-lang/rust/commit/c042e06908d0906422b20fbc0a0e815f92e2daee"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "dfdd78d0591c71f344c55a80bf81b344b8dabaef", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c8ff357272253e32f73c8170685969fb36e3ba3/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9c8ff357272253e32f73c8170685969fb36e3ba3/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=9c8ff357272253e32f73c8170685969fb36e3ba3", "patch": "@@ -184,7 +184,6 @@ mod ops;\n mod cmp;\n mod num;\n mod hash;\n-#[legacy_exports]\n mod either;\n #[legacy_exports]\n mod iter;"}, {"sha": "dd3bcdfdf881669e4fe320bff224dab89f7572ee", "filename": "src/libcore/either.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9c8ff357272253e32f73c8170685969fb36e3ba3/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c8ff357272253e32f73c8170685969fb36e3ba3/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=9c8ff357272253e32f73c8170685969fb36e3ba3", "patch": "@@ -8,13 +8,13 @@ use cmp::Eq;\n use result::Result;\n \n /// The either type\n-enum Either<T, U> {\n+pub enum Either<T, U> {\n     Left(T),\n     Right(U)\n }\n \n-fn either<T, U, V>(f_left: fn((&T)) -> V,\n-                   f_right: fn((&U)) -> V, value: &Either<T, U>) -> V {\n+pub fn either<T, U, V>(f_left: fn((&T)) -> V,\n+                       f_right: fn((&U)) -> V, value: &Either<T, U>) -> V {\n     /*!\n      * Applies a function based on the given either value\n      *\n@@ -29,7 +29,7 @@ fn either<T, U, V>(f_left: fn((&T)) -> V,\n     }\n }\n \n-fn lefts<T: Copy, U>(eithers: &[Either<T, U>]) -> ~[T] {\n+pub fn lefts<T: Copy, U>(eithers: &[Either<T, U>]) -> ~[T] {\n     //! Extracts from a vector of either all the left values\n \n     do vec::build_sized(eithers.len()) |push| {\n@@ -42,7 +42,7 @@ fn lefts<T: Copy, U>(eithers: &[Either<T, U>]) -> ~[T] {\n     }\n }\n \n-fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n+pub fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n     //! Extracts from a vector of either all the right values\n \n     do vec::build_sized(eithers.len()) |push| {\n@@ -56,7 +56,7 @@ fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n }\n \n // XXX bad copies. take arg by val\n-fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n+pub fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n     -> {lefts: ~[T], rights: ~[U]} {\n     /*!\n      * Extracts from a vector of either all the left values and right values\n@@ -77,7 +77,7 @@ fn partition<T: Copy, U: Copy>(eithers: &[Either<T, U>])\n }\n \n // XXX bad copies\n-pure fn flip<T: Copy, U: Copy>(eith: &Either<T, U>) -> Either<U, T> {\n+pub pure fn flip<T: Copy, U: Copy>(eith: &Either<T, U>) -> Either<U, T> {\n     //! Flips between left and right of a given either\n \n     match *eith {\n@@ -87,7 +87,8 @@ pure fn flip<T: Copy, U: Copy>(eith: &Either<T, U>) -> Either<U, T> {\n }\n \n // XXX bad copies\n-pure fn to_result<T: Copy, U: Copy>(eith: &Either<T, U>) -> Result<U, T> {\n+pub pure fn to_result<T: Copy, U: Copy>(eith: &Either<T, U>)\n+    -> Result<U, T> {\n     /*!\n      * Converts either::t to a result::t\n      *\n@@ -101,27 +102,27 @@ pure fn to_result<T: Copy, U: Copy>(eith: &Either<T, U>) -> Result<U, T> {\n     }\n }\n \n-pure fn is_left<T, U>(eith: &Either<T, U>) -> bool {\n+pub pure fn is_left<T, U>(eith: &Either<T, U>) -> bool {\n     //! Checks whether the given value is a left\n \n     match *eith { Left(_) => true, _ => false }\n }\n \n-pure fn is_right<T, U>(eith: &Either<T, U>) -> bool {\n+pub pure fn is_right<T, U>(eith: &Either<T, U>) -> bool {\n     //! Checks whether the given value is a right\n \n     match *eith { Right(_) => true, _ => false }\n }\n \n-pure fn unwrap_left<T,U>(+eith: Either<T,U>) -> T {\n+pub pure fn unwrap_left<T,U>(+eith: Either<T,U>) -> T {\n     //! Retrieves the value in the left branch. Fails if the either is Right.\n \n     match move eith {\n         Left(move x) => move x, Right(_) => fail ~\"either::unwrap_left Right\"\n     }\n }\n \n-pure fn unwrap_right<T,U>(+eith: Either<T,U>) -> U {\n+pub pure fn unwrap_right<T,U>(+eith: Either<T,U>) -> U {\n     //! Retrieves the value in the right branch. Fails if the either is Left.\n \n     match move eith {"}]}