{"sha": "229e875878a682411df8b8adae39372302d2b4c7", "node_id": "C_kwDOAAsO6NoAKDIyOWU4NzU4NzhhNjgyNDExZGY4YjhhZGFlMzkzNzIzMDJkMmI0Yzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-13T03:38:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-13T03:38:31Z"}, "message": "Auto merge of #104078 - jyn514:dry-run-progress, r=Mark-Simulacrum\n\nPrint \"Checking/Building ...\" message even when --dry-run is passed\n\nPrint \"Checking/Building ...\" message even when --dry-run is passed\n\nThis makes it a lot easier to understand what commands will be run without\nhaving to parse the `-vv` output, which isn't meant to be user facing.\n\nI also want to change these messages at some point (https://github.com/rust-lang/rust/issues/102003) and this change will make it easier to paste a before/after comparison without having to actually build a stage 2 compiler.", "tree": {"sha": "4c474d56a7ba212c25774113211e3da3857a8c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c474d56a7ba212c25774113211e3da3857a8c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/229e875878a682411df8b8adae39372302d2b4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/229e875878a682411df8b8adae39372302d2b4c7", "html_url": "https://github.com/rust-lang/rust/commit/229e875878a682411df8b8adae39372302d2b4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/229e875878a682411df8b8adae39372302d2b4c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb6667a233fa677f6fbfa6067913ef3d32480317", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6667a233fa677f6fbfa6067913ef3d32480317", "html_url": "https://github.com/rust-lang/rust/commit/fb6667a233fa677f6fbfa6067913ef3d32480317"}, {"sha": "24378885c8ca7e3cae25723da577445d200fe8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/24378885c8ca7e3cae25723da577445d200fe8e8", "html_url": "https://github.com/rust-lang/rust/commit/24378885c8ca7e3cae25723da577445d200fe8e8"}], "stats": {"total": 180, "additions": 100, "deletions": 80}, "files": [{"sha": "31158870f394ed57cd07b281021956b7cfc14536", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -1074,11 +1074,11 @@ impl<'a> Builder<'a> {\n         let mut hasher = sha2::Sha256::new();\n         // FIXME: this is ok for rustfmt (4.1 MB large at time of writing), but it seems memory-intensive for rustc and larger components.\n         // Consider using streaming IO instead?\n-        let contents = if self.config.dry_run { vec![] } else { t!(fs::read(path)) };\n+        let contents = if self.config.dry_run() { vec![] } else { t!(fs::read(path)) };\n         hasher.update(&contents);\n         let found = hex::encode(hasher.finalize().as_slice());\n         let verified = found == expected;\n-        if !verified && !self.config.dry_run {\n+        if !verified && !self.config.dry_run() {\n             println!(\n                 \"invalid checksum: \\n\\\n                 found:    {found}\\n\\\n@@ -1292,7 +1292,7 @@ impl<'a> Builder<'a> {\n     /// Note that this returns `None` if LLVM is disabled, or if we're in a\n     /// check build or dry-run, where there's no need to build all of LLVM.\n     fn llvm_config(&self, target: TargetSelection) -> Option<PathBuf> {\n-        if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run {\n+        if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run() {\n             let llvm_config = self.ensure(native::Llvm { target });\n             if llvm_config.is_file() {\n                 return Some(llvm_config);\n@@ -1644,7 +1644,7 @@ impl<'a> Builder<'a> {\n         //\n         // Only clear out the directory if we're compiling std; otherwise, we\n         // should let Cargo take care of things for us (via depdep info)\n-        if !self.config.dry_run && mode == Mode::Std && cmd == \"build\" {\n+        if !self.config.dry_run() && mode == Mode::Std && cmd == \"build\" {\n             self.clear_if_dirty(&out_dir, &self.rustc(compiler));\n         }\n \n@@ -2142,7 +2142,7 @@ impl<'a> Builder<'a> {\n             (out, dur - deps)\n         };\n \n-        if self.config.print_step_timings && !self.config.dry_run {\n+        if self.config.print_step_timings && !self.config.dry_run() {\n             let step_string = format!(\"{:?}\", step);\n             let brace_index = step_string.find(\"{\").unwrap_or(0);\n             let type_string = type_name::<S>();\n@@ -2216,7 +2216,7 @@ impl<'a> Builder<'a> {\n     }\n \n     pub(crate) fn open_in_browser(&self, path: impl AsRef<Path>) {\n-        if self.config.dry_run || !self.config.cmd.open() {\n+        if self.config.dry_run() || !self.config.cmd.open() {\n             return;\n         }\n "}, {"sha": "5f21d2b0067dc57f6fd910453b528608cf7b9975", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -1,5 +1,5 @@\n use super::*;\n-use crate::config::{Config, TargetSelection};\n+use crate::config::{Config, DryRun, TargetSelection};\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n@@ -10,7 +10,7 @@ fn configure_with_args(cmd: &[String], host: &[&str], target: &[&str]) -> Config\n     let mut config = Config::parse(cmd);\n     // don't save toolstates\n     config.save_toolstates = None;\n-    config.dry_run = true;\n+    config.dry_run = DryRun::SelfCheck;\n \n     // Ignore most submodules, since we don't need them for a dry run.\n     // But make sure to check out the `doc` and `rust-analyzer` submodules, since some steps need them"}, {"sha": "79e07be614c0be9d858357222d2961bbc1b3a722", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -447,7 +447,7 @@ fn copy_sanitizers(\n ) -> Vec<PathBuf> {\n     let runtimes: Vec<native::SanitizerRuntime> = builder.ensure(native::Sanitizers { target });\n \n-    if builder.config.dry_run {\n+    if builder.config.dry_run() {\n         return Vec::new();\n     }\n \n@@ -986,7 +986,7 @@ impl Step for CodegenBackend {\n             compiler.stage, backend, &compiler.host, target\n         ));\n         let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false);\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return;\n         }\n         let mut files = files.into_iter().filter(|f| {\n@@ -1034,7 +1034,7 @@ fn copy_codegen_backends_to_sysroot(\n     let dst = builder.sysroot_codegen_backends(target_compiler);\n     t!(fs::create_dir_all(&dst), dst);\n \n-    if builder.config.dry_run {\n+    if builder.config.dry_run() {\n         return;\n     }\n \n@@ -1332,7 +1332,7 @@ impl Step for Assemble {\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {\n             let llvm_config_bin = builder.ensure(native::Llvm { target: target_compiler.host });\n-            if !builder.config.dry_run {\n+            if !builder.config.dry_run() {\n                 let llvm_bin_dir = output(Command::new(llvm_config_bin).arg(\"--bindir\"));\n                 let llvm_bin_dir = Path::new(llvm_bin_dir.trim());\n \n@@ -1402,7 +1402,7 @@ pub fn run_cargo(\n     additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n ) -> Vec<PathBuf> {\n-    if builder.config.dry_run {\n+    if builder.config.dry_run() {\n         return Vec::new();\n     }\n \n@@ -1542,7 +1542,7 @@ pub fn stream_cargo(\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n     let mut cargo = Command::from(cargo);\n-    if builder.config.dry_run {\n+    if builder.config.dry_run() {\n         return true;\n     }\n     // Instruct Cargo to give us json messages on stdout, critically leaving"}, {"sha": "e843bd411c1727f46fcfc39ca2992d26bb9e3310", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -33,6 +33,17 @@ macro_rules! check_ci_llvm {\n     };\n }\n \n+#[derive(Clone, Default)]\n+pub enum DryRun {\n+    /// This isn't a dry run.\n+    #[default]\n+    Disabled,\n+    /// This is a dry run enabled by bootstrap itself, so it can verify that no work is done.\n+    SelfCheck,\n+    /// This is a dry run enabled by the `--dry-run` flag.\n+    UserSelected,\n+}\n+\n /// Global configuration for the entire build and/or bootstrap.\n ///\n /// This structure is derived from a combination of both `config.toml` and\n@@ -84,7 +95,7 @@ pub struct Config {\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n-    pub dry_run: bool,\n+    pub dry_run: DryRun,\n     /// `None` if we shouldn't download CI compiler artifacts, or the commit to download if we should.\n     #[cfg(not(test))]\n     download_rustc_commit: Option<String>,\n@@ -820,7 +831,7 @@ impl Config {\n         config.jobs = flags.jobs.map(threads_from_config);\n         config.cmd = flags.cmd;\n         config.incremental = flags.incremental;\n-        config.dry_run = flags.dry_run;\n+        config.dry_run = if flags.dry_run { DryRun::UserSelected } else { DryRun::Disabled };\n         config.keep_stage = flags.keep_stage;\n         config.keep_stage_std = flags.keep_stage_std;\n         config.color = flags.color;\n@@ -965,7 +976,7 @@ impl Config {\n             .unwrap_or_else(|| config.out.join(config.build.triple).join(\"stage0/bin/cargo\"));\n \n         // NOTE: it's important this comes *after* we set `initial_rustc` just above.\n-        if config.dry_run {\n+        if config.dry_run() {\n             let dir = config.out.join(\"tmp-dry-run\");\n             t!(fs::create_dir_all(&dir));\n             config.out = dir;\n@@ -1372,6 +1383,13 @@ impl Config {\n         config\n     }\n \n+    pub(crate) fn dry_run(&self) -> bool {\n+        match self.dry_run {\n+            DryRun::Disabled => false,\n+            DryRun::SelfCheck | DryRun::UserSelected => true,\n+        }\n+    }\n+\n     /// A git invocation which runs inside the source directory.\n     ///\n     /// Use this rather than `Command::new(\"git\")` in order to support out-of-tree builds.\n@@ -1461,7 +1479,7 @@ impl Config {\n     /// This is computed on demand since LLVM might have to first be downloaded from CI.\n     pub(crate) fn llvm_link_shared(builder: &Builder<'_>) -> bool {\n         let mut opt = builder.config.llvm_link_shared.get();\n-        if opt.is_none() && builder.config.dry_run {\n+        if opt.is_none() && builder.config.dry_run() {\n             // just assume static for now - dynamic linking isn't supported on all platforms\n             return false;\n         }\n@@ -1488,7 +1506,7 @@ impl Config {\n     /// Return whether we will use a downloaded, pre-compiled version of rustc, or just build from source.\n     pub(crate) fn download_rustc(builder: &Builder<'_>) -> bool {\n         static DOWNLOAD_RUSTC: OnceCell<bool> = OnceCell::new();\n-        if builder.config.dry_run && DOWNLOAD_RUSTC.get().is_none() {\n+        if builder.config.dry_run() && DOWNLOAD_RUSTC.get().is_none() {\n             // avoid trying to actually download the commit\n             return false;\n         }\n@@ -1507,7 +1525,7 @@ impl Config {\n             RustfmtState::SystemToolchain(p) | RustfmtState::Downloaded(p) => Some(p.clone()),\n             RustfmtState::Unavailable => None,\n             r @ RustfmtState::LazyEvaluated => {\n-                if builder.config.dry_run {\n+                if builder.config.dry_run() {\n                     return Some(PathBuf::new());\n                 }\n                 let path = maybe_download_rustfmt(builder);"}, {"sha": "9fbe476534eb7baf5475f5d3b69f3f12d2e99ffe", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -945,7 +945,7 @@ impl Step for PlainSourceTarball {\n                 .arg(builder.src.join(\"./src/bootstrap/Cargo.toml\"))\n                 .current_dir(&plain_dst_src);\n \n-            let config = if !builder.config.dry_run {\n+            let config = if !builder.config.dry_run() {\n                 t!(String::from_utf8(t!(cmd.output()).stdout))\n             } else {\n                 String::new()\n@@ -1386,7 +1386,7 @@ impl Step for Extended {\n         let etc = builder.src.join(\"src/etc/installer\");\n \n         // Avoid producing tarballs during a dry run.\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return;\n         }\n \n@@ -1818,7 +1818,7 @@ impl Step for Extended {\n             let _time = timeit(builder);\n             builder.run(&mut cmd);\n \n-            if !builder.config.dry_run {\n+            if !builder.config.dry_run() {\n                 t!(fs::rename(exe.join(&filename), distdir(builder).join(&filename)));\n             }\n         }\n@@ -1882,12 +1882,12 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n         if llvm_dylib_path.exists() {\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n-        !builder.config.dry_run\n+        !builder.config.dry_run()\n     } else if let Ok(llvm_config) = crate::native::prebuilt_llvm_config(builder, target) {\n         let mut cmd = Command::new(llvm_config);\n         cmd.arg(\"--libfiles\");\n         builder.verbose(&format!(\"running {:?}\", cmd));\n-        let files = if builder.config.dry_run { \"\".into() } else { output(&mut cmd) };\n+        let files = if builder.config.dry_run() { \"\".into() } else { output(&mut cmd) };\n         let build_llvm_out = &builder.llvm_out(builder.config.build);\n         let target_llvm_out = &builder.llvm_out(target);\n         for file in files.trim_end().split(' ') {\n@@ -1899,7 +1899,7 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             };\n             builder.install(&file, dst_libdir, 0o644);\n         }\n-        !builder.config.dry_run\n+        !builder.config.dry_run()\n     } else {\n         false\n     }"}, {"sha": "c7d21bf3cdb3fcce65458134459376d8d86c11c1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -151,7 +151,7 @@ impl Step for RustbookSrc {\n         let index = out.join(\"index.html\");\n         let rustbook = builder.tool_exe(Tool::Rustbook);\n         let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n-        if builder.config.dry_run || up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n+        if builder.config.dry_run() || up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n             return;\n         }\n         builder.info(&format!(\"Rustbook ({}) - {}\", target, name));\n@@ -331,8 +331,8 @@ impl Step for Standalone {\n                 && up_to_date(&footer, &html)\n                 && up_to_date(&favicon, &html)\n                 && up_to_date(&full_toc, &html)\n-                && (builder.config.dry_run || up_to_date(&version_info, &html))\n-                && (builder.config.dry_run || up_to_date(&rustdoc, &html))\n+                && (builder.config.dry_run() || up_to_date(&version_info, &html))\n+                && (builder.config.dry_run() || up_to_date(&rustdoc, &html))\n             {\n                 continue;\n             }\n@@ -402,7 +402,7 @@ impl Step for SharedAssets {\n \n         let version_input = builder.src.join(\"src\").join(\"doc\").join(\"version_info.html.template\");\n         let version_info = out.join(\"version_info.html\");\n-        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n+        if !builder.config.dry_run() && !up_to_date(&version_input, &version_info) {\n             let info = t!(fs::read_to_string(&version_input))\n                 .replace(\"VERSION\", &builder.rust_release())\n                 .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n@@ -900,7 +900,7 @@ impl Step for UnstableBookGen {\n }\n \n fn symlink_dir_force(config: &Config, src: &Path, dst: &Path) -> io::Result<()> {\n-    if config.dry_run {\n+    if config.dry_run() {\n         return Ok(());\n     }\n     if let Ok(m) = fs::symlink_metadata(dst) {"}, {"sha": "5e7264fe765a950ac9980b7ef55b5e05023312d6", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -43,7 +43,7 @@ struct RustfmtConfig {\n }\n \n pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n-    if build.config.dry_run {\n+    if build.config.dry_run() {\n         return;\n     }\n     let mut builder = ignore::types::TypesBuilder::new();"}, {"sha": "bbb5a18ba07bae5d8e97d38b35c02bfe62d34ef9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -112,7 +112,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n \n-use config::Target;\n+use config::{DryRun, Target};\n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n \n@@ -430,7 +430,7 @@ impl Build {\n         // we always try to use git for LLVM builds\n         let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n \n-        let initial_target_libdir_str = if config.dry_run {\n+        let initial_target_libdir_str = if config.dry_run() {\n             \"/dummy/lib/path/to/lib/\".to_string()\n         } else {\n             output(\n@@ -444,7 +444,7 @@ impl Build {\n         let initial_target_dir = Path::new(&initial_target_libdir_str).parent().unwrap();\n         let initial_lld = initial_target_dir.join(\"bin\").join(\"rust-lld\");\n \n-        let initial_sysroot = if config.dry_run {\n+        let initial_sysroot = if config.dry_run() {\n             \"/dummy\".to_string()\n         } else {\n             output(Command::new(&config.initial_rustc).arg(\"--print\").arg(\"sysroot\"))\n@@ -689,13 +689,13 @@ impl Build {\n             }\n         }\n \n-        if !self.config.dry_run {\n+        if !self.config.dry_run() {\n             {\n-                self.config.dry_run = true;\n+                self.config.dry_run = DryRun::SelfCheck;\n                 let builder = builder::Builder::new(&self);\n                 builder.execute_cli();\n             }\n-            self.config.dry_run = false;\n+            self.config.dry_run = DryRun::Disabled;\n             let builder = builder::Builder::new(&self);\n             builder.execute_cli();\n         } else {\n@@ -947,7 +947,7 @@ impl Build {\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run(&self, cmd: &mut Command) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n@@ -956,7 +956,7 @@ impl Build {\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run_quiet(&self, cmd: &mut Command) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n@@ -967,7 +967,7 @@ impl Build {\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run(&self, cmd: &mut Command) -> bool {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return true;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n@@ -978,7 +978,7 @@ impl Build {\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return true;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n@@ -989,7 +989,7 @@ impl Build {\n     /// Returns false if do not execute at all, otherwise returns its\n     /// `status.success()`.\n     fn check_run(&self, cmd: &mut Command) -> bool {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return true;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n@@ -1019,10 +1019,12 @@ impl Build {\n     }\n \n     fn info(&self, msg: &str) {\n-        if self.config.dry_run {\n-            return;\n+        match self.config.dry_run {\n+            DryRun::SelfCheck => return,\n+            DryRun::Disabled | DryRun::UserSelected => {\n+                println!(\"{}\", msg);\n+            }\n         }\n-        println!(\"{}\", msg);\n     }\n \n     /// Returns the number of parallel jobs that have been configured for this\n@@ -1400,7 +1402,7 @@ impl Build {\n     }\n \n     fn read_stamp_file(&self, stamp: &Path) -> Vec<(PathBuf, DependencyType)> {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return Vec::new();\n         }\n \n@@ -1440,7 +1442,7 @@ impl Build {\n     }\n \n     fn copy_internal(&self, src: &Path, dst: &Path, dereference_symlinks: bool) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         self.verbose_than(1, &format!(\"Copy {:?} to {:?}\", src, dst));\n@@ -1477,7 +1479,7 @@ impl Build {\n     /// Copies the `src` directory recursively to `dst`. Both are assumed to exist\n     /// when this function is called.\n     pub fn cp_r(&self, src: &Path, dst: &Path) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         for f in self.read_dir(src) {\n@@ -1530,7 +1532,7 @@ impl Build {\n     }\n \n     fn install(&self, src: &Path, dstdir: &Path, perms: u32) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         let dst = dstdir.join(src.file_name().unwrap());\n@@ -1544,28 +1546,28 @@ impl Build {\n     }\n \n     fn create(&self, path: &Path, s: &str) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         t!(fs::write(path, s));\n     }\n \n     fn read(&self, path: &Path) -> String {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return String::new();\n         }\n         t!(fs::read_to_string(path))\n     }\n \n     fn create_dir(&self, dir: &Path) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         t!(fs::create_dir_all(dir))\n     }\n \n     fn remove_dir(&self, dir: &Path) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         t!(fs::remove_dir_all(dir))\n@@ -1574,7 +1576,7 @@ impl Build {\n     fn read_dir(&self, dir: &Path) -> impl Iterator<Item = fs::DirEntry> {\n         let iter = match fs::read_dir(dir) {\n             Ok(v) => v,\n-            Err(_) if self.config.dry_run => return vec![].into_iter(),\n+            Err(_) if self.config.dry_run() => return vec![].into_iter(),\n             Err(err) => panic!(\"could not read dir {:?}: {:?}\", dir, err),\n         };\n         iter.map(|e| t!(e)).collect::<Vec<_>>().into_iter()\n@@ -1585,11 +1587,11 @@ impl Build {\n         use std::os::unix::fs::symlink as symlink_file;\n         #[cfg(windows)]\n         use std::os::windows::fs::symlink_file;\n-        if !self.config.dry_run { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n+        if !self.config.dry_run() { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n     }\n \n     fn remove(&self, f: &Path) {\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         fs::remove_file(f).unwrap_or_else(|_| panic!(\"failed to remove {:?}\", f));"}, {"sha": "2407291ceea30a6fb35ce690c2444b48584f1e41", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -226,7 +226,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     let llvm_stamp = llvm_root.join(\".llvm-stamp\");\n     let llvm_sha = detect_llvm_sha(&config, builder.rust_info.is_managed_git_subrepository());\n     let key = format!(\"{}{}\", llvm_sha, config.llvm_assertions);\n-    if program_out_of_date(&llvm_stamp, &key) && !config.dry_run {\n+    if program_out_of_date(&llvm_stamp, &key) && !config.dry_run() {\n         download_ci_llvm(builder, &llvm_sha);\n         for entry in t!(fs::read_dir(llvm_root.join(\"bin\"))) {\n             builder.fix_bin_or_dylib(&t!(entry).path());\n@@ -505,7 +505,7 @@ impl Step for Llvm {\n         // https://llvm.org/docs/HowToCrossCompileLLVM.html\n         if target != builder.config.build {\n             let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n-            if !builder.config.dry_run {\n+            if !builder.config.dry_run() {\n                 let llvm_bindir = output(Command::new(&llvm_config).arg(\"--bindir\"));\n                 let host_bin = Path::new(llvm_bindir.trim());\n                 cfg.define(\n@@ -519,7 +519,7 @@ impl Step for Llvm {\n             if builder.config.llvm_clang {\n                 let build_bin = builder.llvm_out(builder.config.build).join(\"build\").join(\"bin\");\n                 let clang_tblgen = build_bin.join(\"clang-tblgen\").with_extension(EXE_EXTENSION);\n-                if !builder.config.dry_run && !clang_tblgen.exists() {\n+                if !builder.config.dry_run() && !clang_tblgen.exists() {\n                     panic!(\"unable to find {}\", clang_tblgen.display());\n                 }\n                 cfg.define(\"CLANG_TABLEGEN\", clang_tblgen);\n@@ -553,7 +553,7 @@ impl Step for Llvm {\n         //        tools. Figure out how to filter them down and only build the right\n         //        tools and libs on all platforms.\n \n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return build_llvm_config;\n         }\n \n@@ -611,7 +611,7 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n         return;\n     }\n \n-    if builder.config.dry_run {\n+    if builder.config.dry_run() {\n         return;\n     }\n \n@@ -872,7 +872,7 @@ impl Step for Lld {\n \n     /// Compile LLD for `target`.\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return PathBuf::from(\"lld-out-dir-test-gen\");\n         }\n         let target = self.target;\n@@ -990,7 +990,7 @@ impl Step for TestHelpers {\n     /// Compiles the `rust_test_helpers.c` library which we used in various\n     /// `run-pass` tests for ABI testing.\n     fn run(self, builder: &Builder<'_>) {\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return;\n         }\n         // The x86_64-fortanix-unknown-sgx target doesn't have a working C\n@@ -1066,7 +1066,7 @@ impl Step for Sanitizers {\n         }\n \n         let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return runtimes;\n         }\n \n@@ -1240,7 +1240,7 @@ impl Step for CrtBeginEnd {\n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n         let out_dir = builder.native_dir(self.target).join(\"crt\");\n \n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return out_dir;\n         }\n \n@@ -1304,7 +1304,7 @@ impl Step for Libunwind {\n \n     /// Build linunwind.a\n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return PathBuf::new();\n         }\n "}, {"sha": "35c66cfd95f2f520bf18d47ed885dd2a6eeb645e", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -163,7 +163,7 @@ than building it.\n             continue;\n         }\n \n-        if !build.config.dry_run {\n+        if !build.config.dry_run() {\n             cmd_finder.must_have(build.cc(*target));\n             if let Some(ar) = build.ar(*target) {\n                 cmd_finder.must_have(ar);\n@@ -172,7 +172,7 @@ than building it.\n     }\n \n     for host in &build.hosts {\n-        if !build.config.dry_run {\n+        if !build.config.dry_run() {\n             cmd_finder.must_have(build.cxx(*host).unwrap());\n         }\n     }"}, {"sha": "82b063583c9f93c113a05802f656c763d439479d", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -323,7 +323,7 @@ impl<'a> Tarball<'a> {\n         // Ensure there are no symbolic links in the tarball. In particular,\n         // rustup-toolchain-install-master and most versions of Windows can't handle symbolic links.\n         let decompressed_output = self.temp_dir.join(&package_name);\n-        if !self.builder.config.dry_run && !self.permit_symlinks {\n+        if !self.builder.config.dry_run() && !self.permit_symlinks {\n             for entry in walkdir::WalkDir::new(&decompressed_output) {\n                 let entry = t!(entry);\n                 if entry.path_is_symlink() {"}, {"sha": "fd362b8367cc00c4ebd920079dcb7956655315a6", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -508,7 +508,7 @@ impl Miri {\n         cargo.arg(\"--print-sysroot\");\n \n         // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             String::new()\n         } else {\n             builder.verbose(&format!(\"running: {:?}\", cargo));\n@@ -1537,7 +1537,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n             let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n-            if !builder.config.dry_run {\n+            if !builder.config.dry_run() {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 // Remove trailing newline from llvm-config output.\n@@ -1555,14 +1555,14 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             // requirement, but the `-L` library path is not propagated across\n             // separate compilations. We can add LLVM's library path to the\n             // platform-specific environment variable as a workaround.\n-            if !builder.config.dry_run && suite.ends_with(\"fulldeps\") {\n+            if !builder.config.dry_run() && suite.ends_with(\"fulldeps\") {\n                 let llvm_libdir = output(Command::new(&llvm_config).arg(\"--libdir\"));\n                 add_link_lib_path(vec![llvm_libdir.trim().into()], &mut cmd);\n             }\n \n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n-            if !builder.config.dry_run && matches!(suite, \"run-make\" | \"run-make-fulldeps\") {\n+            if !builder.config.dry_run() && matches!(suite, \"run-make\" | \"run-make-fulldeps\") {\n                 // The llvm/bin directory contains many useful cross-platform\n                 // tools. Pass the path to run-make tests so they can use them.\n                 let llvm_bin_path = llvm_config\n@@ -1590,7 +1590,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         // Only pass correct values for these flags for the `run-make` suite as it\n         // requires that a C++ compiler was configured which isn't always the case.\n-        if !builder.config.dry_run && matches!(suite, \"run-make\" | \"run-make-fulldeps\") {\n+        if !builder.config.dry_run() && matches!(suite, \"run-make\" | \"run-make-fulldeps\") {\n             cmd.arg(\"--cc\")\n                 .arg(builder.cc(target))\n                 .arg(\"--cxx\")"}, {"sha": "ba329ea6c759286e37140469dded952b5dcf2850", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -522,7 +522,7 @@ impl Step for Rustdoc {\n         builder.ensure(compile::Rustc::new(build_compiler, target_compiler.host));\n         // NOTE: this implies that `download-rustc` is pretty useless when compiling with the stage0\n         // compiler, since you do just as much work.\n-        if !builder.config.dry_run && builder.download_rustc() && build_compiler.stage == 0 {\n+        if !builder.config.dry_run() && builder.download_rustc() && build_compiler.stage == 0 {\n             println!(\n                 \"warning: `download-rustc` does nothing when building stage1 tools; consider using `--stage 2` instead\"\n             );"}, {"sha": "1969e0b6f87223021e89915e8fe9d6718d251524", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -158,7 +158,7 @@ impl Step for ToolStateCheck {\n     ///   stable tool. That is, the status is not allowed to get worse\n     ///   (test-pass to test-fail or build-fail).\n     fn run(self, builder: &Builder<'_>) {\n-        if builder.config.dry_run {\n+        if builder.config.dry_run() {\n             return;\n         }\n \n@@ -265,7 +265,7 @@ impl Builder<'_> {\n         // If we're in a dry run setting we don't want to save toolstates as\n         // that means if we e.g. panic down the line it'll look like we tested\n         // everything (but we actually haven't).\n-        if self.config.dry_run {\n+        if self.config.dry_run() {\n             return;\n         }\n         // Toolstate isn't tracked for clippy or rustfmt, but since most tools do, we avoid checking"}, {"sha": "8a2f46abbd23cc7f894ef4c168c5039a39344aff", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/229e875878a682411df8b8adae39372302d2b4c7/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=229e875878a682411df8b8adae39372302d2b4c7", "patch": "@@ -105,7 +105,7 @@ pub struct TimeIt(bool, Instant);\n \n /// Returns an RAII structure that prints out how long it took to drop.\n pub fn timeit(builder: &Builder<'_>) -> TimeIt {\n-    TimeIt(builder.config.dry_run, Instant::now())\n+    TimeIt(builder.config.dry_run(), Instant::now())\n }\n \n impl Drop for TimeIt {\n@@ -128,7 +128,7 @@ pub(crate) fn program_out_of_date(stamp: &Path, key: &str) -> bool {\n /// Symlinks two directories, using junctions on Windows and normal symlinks on\n /// Unix.\n pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n-    if config.dry_run {\n+    if config.dry_run() {\n         return Ok(());\n     }\n     let _ = fs::remove_dir(dest);"}]}