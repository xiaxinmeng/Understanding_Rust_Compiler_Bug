{"sha": "2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NTVlY2QxM2MzYzQ5YThjMTdkZDJkMDJmZGM3NWU2NmI1MDk3YTQ=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-13T10:34:41Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-13T10:34:41Z"}, "message": "Revert \"libstd: Colorify test results when run in parallel\"\n\nThis reverts commit 7b3cb05311ef7d671b0bf92b041112ef141dc188.", "tree": {"sha": "6fed4aa631cdd67ef894535d52e0be6629428acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fed4aa631cdd67ef894535d52e0be6629428acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4", "html_url": "https://github.com/rust-lang/rust/commit/2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1adc26d5e750b9cfd06981533056c59b68a78a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1adc26d5e750b9cfd06981533056c59b68a78a1b", "html_url": "https://github.com/rust-lang/rust/commit/1adc26d5e750b9cfd06981533056c59b68a78a1b"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "d0814c01f377a258b7cea069b5e21d947e1da350", "filename": "src/libstd/test.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=2955ecd13c3c49a8c17dd2d02fdc75e66b5097a4", "patch": "@@ -91,6 +91,7 @@ enum test_result { tr_ok, tr_failed, tr_ignored, }\n type console_test_state =\n     @{out: io::writer,\n       log_out: option<io::writer>,\n+      use_color: bool,\n       mut total: uint,\n       mut passed: uint,\n       mut failed: uint,\n@@ -116,6 +117,7 @@ fn run_tests_console(opts: test_opts,\n     let st =\n         @{out: io::stdout(),\n           log_out: log_out,\n+          use_color: use_color(),\n           mut total: 0u,\n           mut passed: 0u,\n           mut failed: 0u,\n@@ -148,18 +150,18 @@ fn run_tests_console(opts: test_opts,\n             alt result {\n               tr_ok {\n                 st.passed += 1u;\n-                write_ok(st.out);\n+                write_ok(st.out, st.use_color);\n                 st.out.write_line(\"\");\n               }\n               tr_failed {\n                 st.failed += 1u;\n-                write_failed(st.out);\n+                write_failed(st.out, st.use_color);\n                 st.out.write_line(\"\");\n                 st.failures += [test];\n               }\n               tr_ignored {\n                 st.ignored += 1u;\n-                write_ignored(st.out);\n+                write_ignored(st.out, st.use_color);\n                 st.out.write_line(\"\");\n               }\n             }\n@@ -178,9 +180,11 @@ fn run_tests_console(opts: test_opts,\n     }\n \n     st.out.write_str(#fmt[\"\\nresult: \"]);\n-    if success { write_ok(st.out); } else { write_failed(st.out); }\n-    st.out.write_str(#fmt[\". %u passed; %u failed; %u ignored\\n\\n\",\n-                          st.passed, st.failed, st.ignored]);\n+    if success {\n+        write_ok(st.out, true);\n+    } else { write_failed(st.out, true); }\n+    st.out.write_str(#fmt[\". %u passed; %u failed; %u ignored\\n\\n\", st.passed,\n+                          st.failed, st.ignored]);\n \n     ret success;\n \n@@ -193,24 +197,24 @@ fn run_tests_console(opts: test_opts,\n                     }, test.name));\n     }\n \n-    fn write_ok(out: io::writer) {\n-        write_pretty(out, \"ok\", term::color_green);\n+    fn write_ok(out: io::writer, use_color: bool) {\n+        write_pretty(out, \"ok\", term::color_green, use_color);\n     }\n \n-    fn write_failed(out: io::writer) {\n-        write_pretty(out, \"FAILED\", term::color_red);\n+    fn write_failed(out: io::writer, use_color: bool) {\n+        write_pretty(out, \"FAILED\", term::color_red, use_color);\n     }\n \n-    fn write_ignored(out: io::writer) {\n-        write_pretty(out, \"ignored\", term::color_yellow);\n+    fn write_ignored(out: io::writer, use_color: bool) {\n+        write_pretty(out, \"ignored\", term::color_yellow, use_color);\n     }\n \n-    fn write_pretty(out: io::writer, word: str, color: u8) {\n-        if term::color_supported() {\n+    fn write_pretty(out: io::writer, word: str, color: u8, use_color: bool) {\n+        if use_color && term::color_supported() {\n             term::fg(out, color);\n         }\n         out.write_str(word);\n-        if term::color_supported() {\n+        if use_color && term::color_supported() {\n             term::reset(out);\n         }\n     }\n@@ -247,6 +251,7 @@ fn should_sort_failures_before_printing_them() {\n     let st =\n         @{out: writer,\n           log_out: option::none,\n+          use_color: false,\n           mut total: 0u,\n           mut passed: 0u,\n           mut failed: 0u,\n@@ -262,6 +267,8 @@ fn should_sort_failures_before_printing_them() {\n     assert apos < bpos;\n }\n \n+fn use_color() -> bool { ret get_concurrency() == 1u; }\n+\n enum testevent {\n     te_filtered([test_desc]),\n     te_wait(test_desc),"}]}