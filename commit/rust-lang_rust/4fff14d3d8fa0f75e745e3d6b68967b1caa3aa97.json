{"sha": "4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZmYxNGQzZDhmYTBmNzVlNzQ1ZTNkNmI2ODk2N2IxY2FhM2FhOTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-09-05T17:33:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-09-05T17:34:03Z"}, "message": "rustbuild: Remove `Mode::Codegen`", "tree": {"sha": "10205aecfbcf16fdf496b1a4f8b50efecff5335a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10205aecfbcf16fdf496b1a4f8b50efecff5335a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "html_url": "https://github.com/rust-lang/rust/commit/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d289aeade481c03d42e7f6d31bc6b64a73cfa45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d289aeade481c03d42e7f6d31bc6b64a73cfa45", "html_url": "https://github.com/rust-lang/rust/commit/7d289aeade481c03d42e7f6d31bc6b64a73cfa45"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "91b28b3bac49e262e5e9dab2b89327ab7d11c128", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "patch": "@@ -796,7 +796,7 @@ impl<'a> Builder<'a> {\n         if cmd == \"doc\" || cmd == \"rustdoc\" {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n-                Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n+                Mode::Rustc | Mode::ToolRustc => self.compiler_doc_out(target),\n                 Mode::Std => out_dir.join(target.triple).join(\"doc\"),\n                 _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n@@ -874,7 +874,7 @@ impl<'a> Builder<'a> {\n \n         match mode {\n             Mode::Std | Mode::ToolBootstrap | Mode::ToolStd => {}\n-            Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {\n+            Mode::Rustc | Mode::ToolRustc => {\n                 // Build proc macros both for the host and the target\n                 if target != compiler.host && cmd != \"check\" {\n                     cargo.arg(\"-Zdual-proc-macros\");\n@@ -1059,7 +1059,7 @@ impl<'a> Builder<'a> {\n         }\n \n         let debuginfo_level = match mode {\n-            Mode::Rustc | Mode::Codegen => self.config.rust_debuginfo_level_rustc,\n+            Mode::Rustc => self.config.rust_debuginfo_level_rustc,\n             Mode::Std => self.config.rust_debuginfo_level_std,\n             Mode::ToolBootstrap | Mode::ToolStd | Mode::ToolRustc => {\n                 self.config.rust_debuginfo_level_tools\n@@ -1196,7 +1196,7 @@ impl<'a> Builder<'a> {\n             rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n         }\n \n-        if let Mode::Rustc | Mode::Codegen = mode {\n+        if mode == Mode::Rustc {\n             rustflags.arg(\"-Zunstable-options\");\n             rustflags.arg(\"-Wrustc::internal\");\n         }\n@@ -1359,7 +1359,7 @@ impl<'a> Builder<'a> {\n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n         // linking all deps statically into the dylib.\n-        if let Mode::Std | Mode::Rustc | Mode::Codegen = mode {\n+        if matches!(mode, Mode::Std | Mode::Rustc) {\n             rustflags.arg(\"-Cprefer-dynamic\");\n         }\n "}, {"sha": "f7e456d2c445a55d92be39e0ad9042601c92dad1", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4fff14d3d8fa0f75e745e3d6b68967b1caa3aa97", "patch": "@@ -300,9 +300,6 @@ pub enum Mode {\n     /// Build librustc, and compiler libraries, placing output in the \"stageN-rustc\" directory.\n     Rustc,\n \n-    /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n-    Codegen,\n-\n     /// Build a tool, placing output in the \"stage0-bootstrap-tools\"\n     /// directory. This is for miscellaneous sets of tools that are built\n     /// using the bootstrap stage0 compiler in its entirety (target libraries\n@@ -572,7 +569,6 @@ impl Build {\n         let suffix = match mode {\n             Mode::Std => \"-std\",\n             Mode::Rustc => \"-rustc\",\n-            Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n             Mode::ToolStd | Mode::ToolRustc => \"-tools\",\n         };"}]}