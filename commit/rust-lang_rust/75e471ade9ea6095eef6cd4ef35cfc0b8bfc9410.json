{"sha": "75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTQ3MWFkZTllYTYwOTVlZWY2Y2Q0ZWYzNWNmYzBiOGJmYzk0MTA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-08T17:01:05Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-08T17:01:05Z"}, "message": "Add MaybeUninit::drop.\n\nManuallyDrop's documentation tells the user to use MaybeUninit instead\nwhen handling uninitialized data. However, the main functionality of\nManuallyDrop (drop) was not available directly on MaybeUninit. Adding it\nmakes it easier to switch from one to the other.", "tree": {"sha": "4eb3a350829ec425c51d7fa45201f1e863c2fb76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb3a350829ec425c51d7fa45201f1e863c2fb76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410", "html_url": "https://github.com/rust-lang/rust/commit/75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc0bf72545f5d6ac6d9639391da875d5e147d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc0bf72545f5d6ac6d9639391da875d5e147d9a", "html_url": "https://github.com/rust-lang/rust/commit/7bc0bf72545f5d6ac6d9639391da875d5e147d9a"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "e826ec0a5e3eee78c53668203f6293e7c3be8801", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=75e471ade9ea6095eef6cd4ef35cfc0b8bfc9410", "patch": "@@ -2,6 +2,7 @@ use crate::any::type_name;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem::ManuallyDrop;\n+use crate::ptr;\n \n /// A wrapper type to construct uninitialized instances of `T`.\n ///\n@@ -573,6 +574,28 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n+    /// Drops the contained value in place.\n+    ///\n+    /// If you have ownership of the `MaybeUninit`, it is preferable to use\n+    /// [`assume_init`] instead, which prevents duplicating the content.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this when the content is not yet fully initialized causes undefined\n+    /// behavior: it is up to the caller to guarantee that the `MaybeUninit<T>` really\n+    /// is in an initialized state.\n+    ///\n+    /// This function runs the destructor of the contained value in place.\n+    /// Afterwards, the memory is considered uninitialized again, but remains unmodified.\n+    ///\n+    /// [`assume_init`]: MaybeUninit::assume_init\n+    #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n+    pub unsafe fn drop(&mut self) {\n+        // SAFETY: the caller must guarantee that `self` is initialized.\n+        // Dropping the value in place is safe if that is the case.\n+        unsafe { ptr::drop_in_place(self.as_mut_ptr()) }\n+    }\n+\n     /// Gets a shared reference to the contained value.\n     ///\n     /// This can be useful when we want to access a `MaybeUninit` that has been"}]}