{"sha": "82f190355b07f941bcc98408ea84c02b629991cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjE5MDM1NWIwN2Y5NDFiY2M5ODQwOGVhODRjMDJiNjI5OTkxY2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-08T20:39:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-12T06:19:42Z"}, "message": "Remove uses of log", "tree": {"sha": "3f6f1c768cb9e4708aff36b5d720805162d95a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6f1c768cb9e4708aff36b5d720805162d95a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f190355b07f941bcc98408ea84c02b629991cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f190355b07f941bcc98408ea84c02b629991cf", "html_url": "https://github.com/rust-lang/rust/commit/82f190355b07f941bcc98408ea84c02b629991cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f190355b07f941bcc98408ea84c02b629991cf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c", "html_url": "https://github.com/rust-lang/rust/commit/2fef18abf2b6a9b3c336b1da5b8a08a22438ad4c"}], "stats": {"total": 1829, "additions": 874, "deletions": 955}, "files": [{"sha": "72e4beff7de37ccebe7e71f363e46189acef272e", "filename": "doc/rust.md", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -212,7 +212,7 @@ do drop\n else enum extern\n false fn for\n if impl\n-let log loop\n+let loop\n match mod mut\n priv pub pure\n ref return\n@@ -805,21 +805,20 @@ Use declarations support a number of \"convenience\" notations:\n An example of `use` declarations:\n \n ~~~~\n-use foo = core::info;\n use core::float::sin;\n use core::str::{slice, to_upper};\n use core::option::Some;\n \n fn main() {\n-    // Equivalent to 'log(core::info, core::float::sin(1.0));'\n-    log(foo, sin(1.0));\n+    // Equivalent to 'info!(core::float::sin(1.0));'\n+    info!(sin(1.0));\n \n-    // Equivalent to 'log(core::info, core::option::Some(1.0));'\n-    log(info, Some(1.0));\n+    // Equivalent to 'info!(core::option::Some(1.0));'\n+    info!(Some(1.0));\n \n-    // Equivalent to 'log(core::info,\n-    //                    core::str::to_upper(core::str::slice(\"foo\", 0, 1)));'\n-    log(info, to_upper(slice(\"foo\", 0, 1)));\n+    // Equivalent to\n+    // 'info!(core::str::to_upper(core::str::slice(\"foo\", 0, 1)));'\n+    info!(to_upper(slice(\"foo\", 0, 1)));\n }\n ~~~~\n \n@@ -990,7 +989,7 @@ output slot type would normally be. For example:\n \n ~~~~\n fn my_err(s: &str) -> ! {\n-    log(info, s);\n+    info!(s);\n     fail!();\n }\n ~~~~\n@@ -2397,58 +2396,6 @@ fn max(a: int, b: int) -> int {\n }\n ~~~~\n \n-### Log expressions\n-\n-~~~~~~~~{.ebnf .gram}\n-log_expr : \"log\" '(' level ',' expr ')' ;\n-~~~~~~~~\n-\n-Evaluating a `log` expression may, depending on runtime configuration, cause a\n-value to be appended to an internal diagnostic logging buffer provided by the\n-runtime or emitted to a system console. Log expressions are enabled or\n-disabled dynamically at run-time on a per-task and per-item basis. See\n-[logging system](#logging-system).\n-\n-Each `log` expression must be provided with a *level* argument in\n-addition to the value to log. The logging level is a `u32` value, where\n-lower levels indicate more-urgent levels of logging. By default, the lowest\n-four logging levels (`1_u32 ... 4_u32`) are predefined as the constants\n-`error`, `warn`, `info` and `debug` in the `core` library.\n-\n-Additionally, the macros `error!`, `warn!`, `info!` and `debug!` are defined\n-in the default syntax-extension namespace. These expand into calls to the\n-logging facility composed with calls to the `fmt!` string formatting\n-syntax-extension.\n-\n-The following examples all produce the same output, logged at the `error`\n-logging level:\n-\n-~~~~\n-# let filename = \"bulbasaur\";\n-\n-// Full version, logging a value.\n-log(core::error, ~\"file not found: \" + filename);\n-\n-// Log-level abbreviated, since core::* is used by default.\n-log(error, ~\"file not found: \" + filename);\n-\n-// Formatting the message using a format-string and fmt!\n-log(error, fmt!(\"file not found: %s\", filename));\n-\n-// Using the error! macro, that expands to the previous call.\n-error!(\"file not found: %s\", filename);\n-~~~~\n-\n-A `log` expression is *not evaluated* when logging at the specified logging-level, module or task is disabled at runtime.\n-This makes inactive `log` expressions very cheap;\n-they should be used extensively in Rust code, as diagnostic aids,\n-as they add little overhead beyond a single integer-compare and branch at runtime.\n-\n-Logging is presently implemented as a language built-in feature,\n-as it makes use of compiler-provided, per-module data tables and flags.\n-In the future, logging will move into a library, and will no longer be a core expression type.\n-It is therefore recommended to use the macro forms of logging (`error!`, `debug!`, etc.) to minimize disruption in code that uses logging.\n-\n \n # Type system\n \n@@ -3149,7 +3096,7 @@ communication facilities.\n \n The runtime contains a system for directing [logging\n expressions](#log-expressions) to a logging console and/or internal logging\n-buffers. Logging expressions can be enabled per module.\n+buffers. Logging can be enabled per module.\n \n Logging output is enabled by setting the `RUST_LOG` environment\n variable.  `RUST_LOG` accepts a logging specification made up of a"}, {"sha": "3fa53abf6b906c765c19fe6605574206fd51df84", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -744,7 +744,7 @@ unit, `()`, as the empty tuple if you like).\n ~~~~\n let mytup: (int, int, float) = (10, 20, 30.0);\n match mytup {\n-  (a, b, c) => log(info, a + b + (c as int))\n+  (a, b, c) => info!(a + b + (c as int))\n }\n ~~~~\n \n@@ -760,7 +760,7 @@ For example:\n struct MyTup(int, int, float);\n let mytup: MyTup = MyTup(10, 20, 30.0);\n match mytup {\n-  MyTup(a, b, c) => log(info, a + b + (c as int))\n+  MyTup(a, b, c) => info!(a + b + (c as int))\n }\n ~~~~\n "}, {"sha": "616ca8d484053a23c18bebab0bfda0e3384c35b5", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -46,6 +46,6 @@ pub fn path_div() -> ~str { ~\":\" }\n pub fn path_div() -> ~str { ~\";\" }\n \n pub fn logv(config: config, s: ~str) {\n-    log(debug, s);\n+    debug!(\"%s\", s);\n     if config.verbose { io::println(s); }\n }"}, {"sha": "a9dfecfe9b15e83fd05235e2fbdc01354e32d1fa", "filename": "src/libcore/io.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -683,7 +683,7 @@ impl Writer for *libc::FILE {\n                                         *self);\n                 if nout != len as size_t {\n                     error!(\"error writing buffer\");\n-                    log(error, os::last_os_error());\n+                    error!(\"%s\", os::last_os_error());\n                     fail!();\n                 }\n             }\n@@ -733,7 +733,7 @@ impl Writer for fd_t {\n                     let nout = libc::write(*self, vb, len as size_t);\n                     if nout < 0 as ssize_t {\n                         error!(\"error writing buffer\");\n-                        log(error, os::last_os_error());\n+                        error!(\"%s\", os::last_os_error());\n                         fail!();\n                     }\n                     count += nout as uint;\n@@ -1288,7 +1288,6 @@ pub mod fsync {\n \n #[cfg(test)]\n mod tests {\n-    use debug;\n     use i32;\n     use io::{BytesWriter, SeekCur, SeekEnd, SeekSet};\n     use io;\n@@ -1301,10 +1300,10 @@ mod tests {\n     #[test]\n     fn test_simple() {\n         let tmpfile = &Path(\"tmp/lib-io-test-simple.tmp\");\n-        log(debug, tmpfile);\n+        debug!(tmpfile);\n         let frood: ~str =\n             ~\"A hoopy frood who really knows where his towel is.\";\n-        log(debug, copy frood);\n+        debug!(copy frood);\n         {\n             let out: io::Writer =\n                 result::get(\n@@ -1313,7 +1312,7 @@ mod tests {\n         }\n         let inp: io::Reader = result::get(&io::file_reader(tmpfile));\n         let frood2: ~str = inp.read_c_str();\n-        log(debug, copy frood2);\n+        debug!(copy frood2);\n         fail_unless!(frood == frood2);\n     }\n "}, {"sha": "86ea7a491fc63c3cc7df3cc9efe9a358f05a8721", "filename": "src/libcore/os.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -208,8 +208,8 @@ pub fn env() -> ~[(~str,~str)] {\n             let mut result = ~[];\n             ptr::array_each(environ, |e| {\n                 let env_pair = str::raw::from_c_str(e);\n-                log(debug, fmt!(\"get_env_pairs: %s\",\n-                                env_pair));\n+                debug!(\"get_env_pairs: %s\",\n+                       env_pair);\n                 result.push(env_pair);\n             });\n             result\n@@ -219,9 +219,8 @@ pub fn env() -> ~[(~str,~str)] {\n             let mut pairs = ~[];\n             for input.each |p| {\n                 let vs = str::splitn_char(*p, '=', 1);\n-                log(debug,\n-                    fmt!(\"splitting: len: %u\",\n-                    vs.len()));\n+                debug!(\"splitting: len: %u\",\n+                    vs.len());\n                 fail_unless!(vs.len() == 2);\n                 pairs.push((copy vs[0], copy vs[1]));\n             }\n@@ -682,10 +681,10 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             let input = p.to_str();\n             let mut strings = ~[];\n             let input_ptr = ::cast::transmute(&input[0]);\n-            log(debug, \"os::list_dir -- BEFORE OPENDIR\");\n+            debug!(\"os::list_dir -- BEFORE OPENDIR\");\n             let dir_ptr = opendir(input_ptr);\n             if (dir_ptr as uint != 0) {\n-        log(debug, \"os::list_dir -- opendir() SUCCESS\");\n+        debug!(\"os::list_dir -- opendir() SUCCESS\");\n                 let mut entry_ptr = readdir(dir_ptr);\n                 while (entry_ptr as uint != 0) {\n                     strings.push(\n@@ -697,11 +696,11 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n                 closedir(dir_ptr);\n             }\n             else {\n-        log(debug, \"os::list_dir -- opendir() FAILURE\");\n+        debug!(\"os::list_dir -- opendir() FAILURE\");\n             }\n-            log(debug,\n-                fmt!(\"os::list_dir -- AFTER -- #: %?\",\n-                     strings.len()));\n+            debug!(\n+                \"os::list_dir -- AFTER -- #: %?\",\n+                     strings.len());\n             strings\n         }\n         #[cfg(windows)]\n@@ -1258,7 +1257,6 @@ pub mod consts {\n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n-    use debug;\n     use libc::{c_int, c_void, size_t};\n     use libc;\n     use option::{None, Option, Some};\n@@ -1274,7 +1272,7 @@ mod tests {\n \n     #[test]\n     pub fn last_os_error() {\n-        log(debug, os::last_os_error());\n+        debug!(os::last_os_error());\n     }\n \n     #[test]\n@@ -1320,7 +1318,7 @@ mod tests {\n         while i < 100 { s += ~\"aaaaaaaaaa\"; i += 1; }\n         let n = make_rand_name();\n         setenv(n, s);\n-        log(debug, copy s);\n+        debug!(copy s);\n         fail_unless!(getenv(n) == option::Some(s));\n     }\n \n@@ -1329,7 +1327,7 @@ mod tests {\n         let path = os::self_exe_path();\n         fail_unless!(path.is_some());\n         let path = path.get();\n-        log(debug, copy path);\n+        debug!(copy path);\n \n         // Hard to test this function\n         fail_unless!(path.is_absolute);\n@@ -1342,7 +1340,7 @@ mod tests {\n         fail_unless!(vec::len(e) > 0u);\n         for vec::each(e) |p| {\n             let (n, v) = copy *p;\n-            log(debug, copy n);\n+            debug!(copy n);\n             let v2 = getenv(n);\n             // MingW seems to set some funky environment variables like\n             // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n@@ -1367,10 +1365,10 @@ mod tests {\n     fn test() {\n         fail_unless!((!Path(\"test-path\").is_absolute));\n \n-        log(debug, ~\"Current working directory: \" + getcwd().to_str());\n+        debug!(~\"Current working directory: \" + getcwd().to_str());\n \n-        log(debug, make_absolute(&Path(\"test-path\")));\n-        log(debug, make_absolute(&Path(\"/usr/bin\")));\n+        debug!(make_absolute(&Path(\"test-path\")));\n+        debug!(make_absolute(&Path(\"/usr/bin\")));\n     }\n \n     #[test]\n@@ -1433,7 +1431,7 @@ mod tests {\n         fail_unless!((vec::len(dirs) > 0u));\n \n         for vec::each(dirs) |dir| {\n-            log(debug, copy *dir);\n+            debug!(copy *dir);\n         }\n     }\n "}, {"sha": "e6e312d01b9f8df0612d3c2a10926fde47ab53ed", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,7 +19,6 @@ use sys;\n #[cfg(test)] use vec;\n #[cfg(test)] use str;\n #[cfg(notest)] use cmp::{Eq, Ord};\n-use debug;\n use uint;\n \n pub mod libc_ {\n@@ -191,7 +190,7 @@ pub pure fn ref_eq<T>(thing: &a/T, other: &b/T) -> bool {\n   SAFETY NOTE: Pointer-arithmetic. Dragons be here.\n */\n pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n-    log(debug, \"array_each_with_len: before iterate\");\n+    debug!(\"array_each_with_len: before iterate\");\n     if (arr as uint == 0) {\n         fail!(~\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n@@ -201,7 +200,7 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n         cb(*n);\n         true\n     });\n-    log(debug, \"array_each_with_len: after iterate\");\n+    debug!(\"array_each_with_len: after iterate\");\n }\n \n /**\n@@ -218,8 +217,8 @@ pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {\n         fail!(~\"ptr::array_each_with_len failure: arr input is null pointer\");\n     }\n     let len = buf_len(arr);\n-    log(debug, fmt!(\"array_each inferred len: %u\",\n-                    len));\n+    debug!(\"array_each inferred len: %u\",\n+                    len);\n     array_each_with_len(arr, len, cb);\n }\n \n@@ -434,7 +433,6 @@ pub fn test_is_null() {\n \n #[cfg(test)]\n pub mod ptr_tests {\n-    use debug;\n     use ptr;\n     use str;\n     use libc;\n@@ -460,9 +458,9 @@ pub mod ptr_tests {\n                 |e| {\n                 let actual = str::raw::from_c_str(e);\n                 let expected = copy expected_arr[ctr];\n-                log(debug,\n-                    fmt!(\"test_ptr_array_each e: %s, a: %s\",\n-                         expected, actual));\n+                debug!(\n+                    \"test_ptr_array_each e: %s, a: %s\",\n+                         expected, actual);\n                 fail_unless!(actual == expected);\n                 ctr += 1;\n                 iteration_count += 1;\n@@ -492,9 +490,9 @@ pub mod ptr_tests {\n             ptr::array_each(arr_ptr, |e| {\n                 let actual = str::raw::from_c_str(e);\n                 let expected = copy expected_arr[ctr];\n-                log(debug,\n-                    fmt!(\"test_ptr_array_each e: %s, a: %s\",\n-                         expected, actual));\n+                debug!(\n+                    \"test_ptr_array_each e: %s, a: %s\",\n+                         expected, actual);\n                 fail_unless!(actual == expected);\n                 ctr += 1;\n                 iteration_count += 1;"}, {"sha": "7668513a3ca70c63bb954d100546c17915e89ec6", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -494,7 +494,6 @@ pub fn random() -> uint {\n \n #[cfg(test)]\n pub mod tests {\n-    use debug;\n     use option::{None, Option, Some};\n     use rand;\n \n@@ -563,7 +562,7 @@ pub mod tests {\n         let r = rand::Rng();\n         let a = r.gen_float();\n         let b = r.gen_float();\n-        log(debug, (a, b));\n+        debug!((a, b));\n     }\n \n     #[test]\n@@ -576,9 +575,9 @@ pub mod tests {\n     #[test]\n     pub fn gen_str() {\n         let r = rand::Rng();\n-        log(debug, r.gen_str(10u));\n-        log(debug, r.gen_str(10u));\n-        log(debug, r.gen_str(10u));\n+        debug!(r.gen_str(10u));\n+        debug!(r.gen_str(10u));\n+        debug!(r.gen_str(10u));\n         fail_unless!(r.gen_str(0u).len() == 0u);\n         fail_unless!(r.gen_str(10u).len() == 10u);\n         fail_unless!(r.gen_str(16u).len() == 16u);"}, {"sha": "0d027ba116321e6a2c02d2f5fb6ac6f206d8f3f9", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -458,7 +458,6 @@ pub fn waitpid(pid: pid_t) -> int {\n \n #[cfg(test)]\n mod tests {\n-    use debug;\n     use option::{None, Some};\n     use os;\n     use run::{readclose, writeclose};\n@@ -494,8 +493,8 @@ mod tests {\n         readclose(pipe_err.in);\n         os::waitpid(pid);\n \n-        log(debug, copy expected);\n-        log(debug, copy actual);\n+        debug!(copy expected);\n+        debug!(copy actual);\n         fail_unless!((expected == actual));\n     }\n "}, {"sha": "4163679a98d744b889a82fdb30498b85af5c27ed", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -2437,7 +2437,6 @@ impl OwnedStr for ~str {\n mod tests {\n     use char;\n     use option::Some;\n-    use debug;\n     use libc::c_char;\n     use libc;\n     use ptr;\n@@ -2523,7 +2522,7 @@ mod tests {\n     #[test]\n     fn test_split_char() {\n         fn t(s: &str, c: char, u: &[~str]) {\n-            log(debug, ~\"split_byte: \" + s);\n+            debug!(~\"split_byte: \" + s);\n             let v = split_char(s, c);\n             debug!(\"split_byte to: %?\", v);\n             fail_unless!(vec::all2(v, u, |a,b| a == b));\n@@ -2552,7 +2551,7 @@ mod tests {\n     #[test]\n     fn test_splitn_char() {\n         fn t(s: &str, c: char, n: uint, u: &[~str]) {\n-            log(debug, ~\"splitn_byte: \" + s);\n+            debug!(~\"splitn_byte: \" + s);\n             let v = splitn_char(s, c, n);\n             debug!(\"split_byte to: %?\", v);\n             debug!(\"comparing vs. %?\", u);\n@@ -3192,8 +3191,8 @@ mod tests {\n         while i < n1 {\n             let a: u8 = s1[i];\n             let b: u8 = s2[i];\n-            log(debug, a);\n-            log(debug, b);\n+            debug!(a);\n+            debug!(b);\n             fail_unless!((a == b));\n             i += 1u;\n         }"}, {"sha": "80f04cf4ac0c148ade8ebec72664e032f76db7a8", "filename": "src/libcore/unstable/uvll.rs", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Funstable%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibcore%2Funstable%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fuvll.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -930,8 +930,8 @@ pub unsafe fn tcp_connect(connect_ptr: *uv_connect_t,\n                       addr_ptr: *sockaddr_in,\n                       after_connect_cb: *u8)\n -> libc::c_int {\n-    log(debug, fmt!(\"b4 foreign tcp_connect--addr port: %u cb: %u\",\n-                    (*addr_ptr).sin_port as uint, after_connect_cb as uint));\n+    debug!(\"b4 foreign tcp_connect--addr port: %u cb: %u\",\n+                    (*addr_ptr).sin_port as uint, after_connect_cb as uint);\n     return rustrt::rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr,\n                                     after_connect_cb, addr_ptr);\n }\n@@ -1021,20 +1021,20 @@ pub unsafe fn async_send(async_handle: *uv_async_t) {\n pub unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n     let out_buf = uv_buf_t { base: ptr::null(), len: 0 as libc::size_t };\n     let out_buf_ptr = ptr::addr_of(&out_buf);\n-    log(debug, fmt!(\"buf_init - input %u len %u out_buf: %u\",\n+    debug!(\"buf_init - input %u len %u out_buf: %u\",\n                      input as uint,\n                      len as uint,\n-                     out_buf_ptr as uint));\n+                     out_buf_ptr as uint);\n     // yuck :/\n     rustrt::rust_uv_buf_init(out_buf_ptr, input, len as size_t);\n     //let result = rustrt::rust_uv_buf_init_2(input, len as size_t);\n-    log(debug, ~\"after rust_uv_buf_init\");\n+    debug!(\"after rust_uv_buf_init\");\n     let res_base = get_base_from_buf(out_buf);\n     let res_len = get_len_from_buf(out_buf);\n     //let res_base = get_base_from_buf(result);\n-    log(debug, fmt!(\"buf_init - result %u len %u\",\n+    debug!(\"buf_init - result %u len %u\",\n                      res_base as uint,\n-                     res_len as uint));\n+                     res_len as uint);\n     return out_buf;\n     //return result;\n }\n@@ -1078,8 +1078,8 @@ pub unsafe fn ip6_name(src: &sockaddr_in6) -> ~str {\n                        0u8,0u8,0u8,0u8,0u8,0u8];\n     do vec::as_imm_buf(dst) |dst_buf, size| {\n         let src_unsafe_ptr = to_unsafe_ptr(src);\n-        log(debug, fmt!(\"val of src *sockaddr_in6: %? sockaddr_in6: %?\",\n-                        src_unsafe_ptr, src));\n+        debug!(\"val of src *sockaddr_in6: %? sockaddr_in6: %?\",\n+                        src_unsafe_ptr, src);\n         let result = rustrt::rust_uv_ip6_name(src_unsafe_ptr,\n                                               dst_buf, size as libc::size_t);\n         match result {\n@@ -1257,20 +1257,20 @@ pub mod test {\n     }\n \n     extern fn after_close_cb(handle: *libc::c_void) {\n-        log(debug, fmt!(\"after uv_close! handle ptr: %?\",\n-                        handle));\n+        debug!(\"after uv_close! handle ptr: %?\",\n+                        handle);\n     }\n \n     extern fn on_alloc_cb(handle: *libc::c_void,\n                          suggested_size: libc::size_t)\n         -> uv_buf_t {\n         unsafe {\n-            log(debug, ~\"on_alloc_cb!\");\n+            debug!(\"on_alloc_cb!\");\n             let char_ptr = malloc_buf_base_of(suggested_size);\n-            log(debug, fmt!(\"on_alloc_cb h: %? char_ptr: %u sugsize: %u\",\n+            debug!(\"on_alloc_cb h: %? char_ptr: %u sugsize: %u\",\n                              handle,\n                              char_ptr as uint,\n-                             suggested_size as uint));\n+                             suggested_size as uint);\n             return buf_init(char_ptr, suggested_size as uint);\n         }\n     }\n@@ -1280,11 +1280,11 @@ pub mod test {\n                         ++buf: uv_buf_t) {\n         unsafe {\n             let nread = nread as int;\n-            log(debug, fmt!(\"CLIENT entering on_read_cb nred: %d\",\n-                            nread));\n+            debug!(\"CLIENT entering on_read_cb nred: %d\",\n+                            nread);\n             if (nread > 0) {\n                 // we have data\n-                log(debug, fmt!(\"CLIENT read: data! nread: %d\", nread));\n+                debug!(\"CLIENT read: data! nread: %d\", nread);\n                 read_stop(stream);\n                 let client_data =\n                     get_data_for_uv_handle(stream as *libc::c_void)\n@@ -1298,65 +1298,65 @@ pub mod test {\n             }\n             else if (nread == -1) {\n                 // err .. possibly EOF\n-                log(debug, ~\"read: eof!\");\n+                debug!(\"read: eof!\");\n             }\n             else {\n                 // nread == 0 .. do nothing, just free buf as below\n-                log(debug, ~\"read: do nothing!\");\n+                debug!(\"read: do nothing!\");\n             }\n             // when we're done\n             free_base_of_buf(buf);\n-            log(debug, ~\"CLIENT exiting on_read_cb\");\n+            debug!(\"CLIENT exiting on_read_cb\");\n         }\n     }\n \n     extern fn on_write_complete_cb(write_req: *uv_write_t,\n                                   status: libc::c_int) {\n         unsafe {\n-            log(debug,\n-                fmt!(\"CLIENT beginning on_write_complete_cb status: %d\",\n-                     status as int));\n+            debug!(\n+                \"CLIENT beginning on_write_complete_cb status: %d\",\n+                     status as int);\n             let stream = get_stream_handle_from_write_req(write_req);\n-            log(debug,\n-                fmt!(\"CLIENT on_write_complete_cb: tcp:%d write_handle:%d\",\n-                stream as int, write_req as int));\n+            debug!(\n+                \"CLIENT on_write_complete_cb: tcp:%d write_handle:%d\",\n+                stream as int, write_req as int);\n             let result = read_start(stream, on_alloc_cb, on_read_cb);\n-            log(debug,\n-                fmt!(\"CLIENT ending on_write_complete_cb .. status: %d\",\n-                     result as int));\n+            debug!(\n+                \"CLIENT ending on_write_complete_cb .. status: %d\",\n+                     result as int);\n         }\n     }\n \n     extern fn on_connect_cb(connect_req_ptr: *uv_connect_t,\n                                  status: libc::c_int) {\n         unsafe {\n-            log(debug, fmt!(\"beginning on_connect_cb .. status: %d\",\n-                             status as int));\n+            debug!(\"beginning on_connect_cb .. status: %d\",\n+                             status as int);\n             let stream =\n                 get_stream_handle_from_connect_req(connect_req_ptr);\n             if (status == 0i32) {\n-                log(debug, ~\"on_connect_cb: in status=0 if..\");\n+                debug!(\"on_connect_cb: in status=0 if..\");\n                 let client_data = get_data_for_req(\n                     connect_req_ptr as *libc::c_void)\n                     as *request_wrapper;\n                 let write_handle = (*client_data).write_req;\n-                log(debug, fmt!(\"on_connect_cb: tcp: %d write_hdl: %d\",\n-                                stream as int, write_handle as int));\n+                debug!(\"on_connect_cb: tcp: %d write_hdl: %d\",\n+                                stream as int, write_handle as int);\n                 let write_result = write(write_handle,\n                                   stream as *libc::c_void,\n                                   (*client_data).req_buf,\n                                   on_write_complete_cb);\n-                log(debug, fmt!(\"on_connect_cb: write() status: %d\",\n-                                 write_result as int));\n+                debug!(\"on_connect_cb: write() status: %d\",\n+                                 write_result as int);\n             }\n             else {\n                 let test_loop = get_loop_for_uv_handle(\n                     stream as *libc::c_void);\n                 let err_msg = get_last_err_info(test_loop);\n-                log(debug, err_msg);\n+                debug!(\"%?\", err_msg);\n                 fail_unless!(false);\n             }\n-            log(debug, ~\"finishing on_connect_cb\");\n+            debug!(\"finishing on_connect_cb\");\n         }\n     }\n \n@@ -1376,17 +1376,17 @@ pub mod test {\n             // data field in our uv_connect_t struct\n             let req_str_bytes = str::to_bytes(req_str);\n             let req_msg_ptr: *u8 = vec::raw::to_ptr(req_str_bytes);\n-            log(debug, fmt!(\"req_msg ptr: %u\", req_msg_ptr as uint));\n+            debug!(\"req_msg ptr: %u\", req_msg_ptr as uint);\n             let req_msg = ~[\n                 buf_init(req_msg_ptr, vec::len(req_str_bytes))\n             ];\n             // this is the enclosing record, we'll pass a ptr to\n             // this to C..\n             let write_handle = write_t();\n             let write_handle_ptr = ptr::addr_of(&write_handle);\n-            log(debug, fmt!(\"tcp req: tcp stream: %d write_handle: %d\",\n+            debug!(\"tcp req: tcp stream: %d write_handle: %d\",\n                              tcp_handle_ptr as int,\n-                             write_handle_ptr as int));\n+                             write_handle_ptr as int);\n             let client_data = request_wrapper {\n                 write_req: write_handle_ptr,\n                 req_buf: ptr::addr_of(&req_msg),\n@@ -1396,18 +1396,18 @@ pub mod test {\n             let tcp_init_result = tcp_init(\n                 test_loop as *libc::c_void, tcp_handle_ptr);\n             if (tcp_init_result == 0i32) {\n-                log(debug, ~\"sucessful tcp_init_result\");\n+                debug!(\"sucessful tcp_init_result\");\n \n-                log(debug, ~\"building addr...\");\n+                debug!(\"building addr...\");\n                 let addr = ip4_addr(ip, port);\n                 // FIXME ref #2064\n                 let addr_ptr = ptr::addr_of(&addr);\n-                log(debug, fmt!(\"after build addr in rust. port: %u\",\n-                                 addr.sin_port as uint));\n+                debug!(\"after build addr in rust. port: %u\",\n+                                 addr.sin_port as uint);\n \n                 // this should set up the connection request..\n-                log(debug, fmt!(\"b4 call tcp_connect connect cb: %u \",\n-                                on_connect_cb as uint));\n+                debug!(\"b4 call tcp_connect connect cb: %u \",\n+                                on_connect_cb as uint);\n                 let tcp_connect_result = tcp_connect(\n                     connect_req_ptr, tcp_handle_ptr,\n                     addr_ptr, on_connect_cb);\n@@ -1420,17 +1420,17 @@ pub mod test {\n                     set_data_for_uv_handle(\n                         tcp_handle_ptr as *libc::c_void,\n                         ptr::addr_of(&client_data) as *libc::c_void);\n-                    log(debug, ~\"before run tcp req loop\");\n+                    debug!(\"before run tcp req loop\");\n                     run(test_loop);\n-                    log(debug, ~\"after run tcp req loop\");\n+                    debug!(\"after run tcp req loop\");\n                 }\n                 else {\n-                   log(debug, ~\"tcp_connect() failure\");\n+                   debug!(\"tcp_connect() failure\");\n                    fail_unless!(false);\n                 }\n             }\n             else {\n-                log(debug, ~\"tcp_init() failure\");\n+                debug!(\"tcp_init() failure\");\n                 fail_unless!(false);\n             }\n             loop_delete(test_loop);\n@@ -1439,15 +1439,15 @@ pub mod test {\n \n     extern fn server_after_close_cb(handle: *libc::c_void) {\n         unsafe {\n-            log(debug, fmt!(\"SERVER server stream closed, should exit. h: %?\",\n-                       handle));\n+            debug!(\"SERVER server stream closed, should exit. h: %?\",\n+                       handle);\n         }\n     }\n \n     extern fn client_stream_after_close_cb(handle: *libc::c_void) {\n         unsafe {\n-            log(debug,\n-                ~\"SERVER: closed client stream, now closing server stream\");\n+            debug!(\n+                \"SERVER: closed client stream, now closing server stream\");\n             let client_data = get_data_for_uv_handle(\n                 handle) as\n                 *tcp_server_data;\n@@ -1460,7 +1460,7 @@ pub mod test {\n         unsafe {\n             let client_stream_ptr =\n                 get_stream_handle_from_write_req(req);\n-            log(debug, ~\"SERVER: resp sent... closing client stream\");\n+            debug!(\"SERVER: resp sent... closing client stream\");\n             close(client_stream_ptr as *libc::c_void,\n                           client_stream_after_close_cb)\n         }\n@@ -1473,15 +1473,15 @@ pub mod test {\n             let nread = nread as int;\n             if (nread > 0) {\n                 // we have data\n-                log(debug, fmt!(\"SERVER read: data! nread: %d\", nread));\n+                debug!(\"SERVER read: data! nread: %d\", nread);\n \n                 // pull out the contents of the write from the client\n                 let buf_base = get_base_from_buf(buf);\n                 let buf_len = get_len_from_buf(buf) as uint;\n-                log(debug, fmt!(\"SERVER buf base: %u, len: %u, nread: %d\",\n+                debug!(\"SERVER buf base: %u, len: %u, nread: %d\",\n                                 buf_base as uint,\n                                 buf_len as uint,\n-                                nread));\n+                                nread);\n                 let bytes = vec::from_buf(buf_base, nread as uint);\n                 let request_str = str::from_bytes(bytes);\n \n@@ -1491,8 +1491,8 @@ pub mod test {\n                 let server_kill_msg = copy (*client_data).server_kill_msg;\n                 let write_req = (*client_data).server_write_req;\n                 if str::contains(request_str, server_kill_msg) {\n-                    log(debug, ~\"SERVER: client req contains kill_msg!\");\n-                    log(debug, ~\"SERVER: sending response to client\");\n+                    debug!(\"SERVER: client req contains kill_msg!\");\n+                    debug!(\"SERVER: sending response to client\");\n                     read_stop(client_stream_ptr);\n                     let server_chan = (*client_data).server_chan.clone();\n                     server_chan.send(request_str);\n@@ -1501,45 +1501,45 @@ pub mod test {\n                         client_stream_ptr as *libc::c_void,\n                         (*client_data).server_resp_buf,\n                         after_server_resp_write);\n-                    log(debug, fmt!(\"SERVER: resp write result: %d\",\n-                                write_result as int));\n+                    debug!(\"SERVER: resp write result: %d\",\n+                                write_result as int);\n                     if (write_result != 0i32) {\n-                        log(debug, ~\"bad result for server resp write()\");\n-                        log(debug, get_last_err_info(\n+                        debug!(\"bad result for server resp write()\");\n+                        debug!(\"%s\", get_last_err_info(\n                             get_loop_for_uv_handle(client_stream_ptr\n                                 as *libc::c_void)));\n                         fail_unless!(false);\n                     }\n                 }\n                 else {\n-                    log(debug, ~\"SERVER: client req !contain kill_msg!\");\n+                    debug!(\"SERVER: client req !contain kill_msg!\");\n                 }\n             }\n             else if (nread == -1) {\n                 // err .. possibly EOF\n-                log(debug, ~\"read: eof!\");\n+                debug!(\"read: eof!\");\n             }\n             else {\n                 // nread == 0 .. do nothing, just free buf as below\n-                log(debug, ~\"read: do nothing!\");\n+                debug!(\"read: do nothing!\");\n             }\n             // when we're done\n             free_base_of_buf(buf);\n-            log(debug, ~\"SERVER exiting on_read_cb\");\n+            debug!(\"SERVER exiting on_read_cb\");\n         }\n     }\n \n     extern fn server_connection_cb(server_stream_ptr:\n                                     *uv_stream_t,\n                                   status: libc::c_int) {\n         unsafe {\n-            log(debug, ~\"client connecting!\");\n+            debug!(\"client connecting!\");\n             let test_loop = get_loop_for_uv_handle(\n                                    server_stream_ptr as *libc::c_void);\n             if status != 0i32 {\n                 let err_msg = get_last_err_info(test_loop);\n-                log(debug, fmt!(\"server_connect_cb: non-zero status: %?\",\n-                             err_msg));\n+                debug!(\"server_connect_cb: non-zero status: %?\",\n+                             err_msg);\n                 return;\n             }\n             let server_data = get_data_for_uv_handle(\n@@ -1551,7 +1551,7 @@ pub mod test {\n                 client_stream_ptr as *libc::c_void,\n                 server_data as *libc::c_void);\n             if (client_init_result == 0i32) {\n-                log(debug, ~\"successfully initialized client stream\");\n+                debug!(\"successfully initialized client stream\");\n                 let accept_result = accept(server_stream_ptr as\n                                                      *libc::c_void,\n                                                    client_stream_ptr as\n@@ -1563,23 +1563,23 @@ pub mod test {\n                                                          on_alloc_cb,\n                                                          on_server_read_cb);\n                     if (read_result == 0i32) {\n-                        log(debug, ~\"successful server read start\");\n+                        debug!(\"successful server read start\");\n                     }\n                     else {\n-                        log(debug, fmt!(\"server_connection_cb: bad read:%d\",\n-                                        read_result as int));\n+                        debug!(\"server_connection_cb: bad read:%d\",\n+                                        read_result as int);\n                         fail_unless!(false);\n                     }\n                 }\n                 else {\n-                    log(debug, fmt!(\"server_connection_cb: bad accept: %d\",\n-                                accept_result as int));\n+                    debug!(\"server_connection_cb: bad accept: %d\",\n+                                accept_result as int);\n                     fail_unless!(false);\n                 }\n             }\n             else {\n-                log(debug, fmt!(\"server_connection_cb: bad client init: %d\",\n-                            client_init_result as int));\n+                debug!(\"server_connection_cb: bad client init: %d\",\n+                            client_init_result as int);\n                 fail_unless!(false);\n             }\n         }\n@@ -1599,8 +1599,8 @@ pub mod test {\n     }\n \n     extern fn async_close_cb(handle: *libc::c_void) {\n-        log(debug, fmt!(\"SERVER: closing async cb... h: %?\",\n-                   handle));\n+        debug!(\"SERVER: closing async cb... h: %?\",\n+                   handle);\n     }\n \n     extern fn continue_async_cb(async_handle: *uv_async_t,\n@@ -1638,7 +1638,7 @@ pub mod test {\n \n             let resp_str_bytes = str::to_bytes(server_resp_msg);\n             let resp_msg_ptr: *u8 = vec::raw::to_ptr(resp_str_bytes);\n-            log(debug, fmt!(\"resp_msg ptr: %u\", resp_msg_ptr as uint));\n+            debug!(\"resp_msg ptr: %u\", resp_msg_ptr as uint);\n             let resp_msg = ~[\n                 buf_init(resp_msg_ptr, vec::len(resp_str_bytes))\n             ];\n@@ -1674,7 +1674,7 @@ pub mod test {\n                 let bind_result = tcp_bind(tcp_server_ptr,\n                                                    server_addr_ptr);\n                 if (bind_result == 0i32) {\n-                    log(debug, ~\"successful uv_tcp_bind, listening\");\n+                    debug!(\"successful uv_tcp_bind, listening\");\n \n                     // uv_listen()\n                     let listen_result = listen(tcp_server_ptr as\n@@ -1694,29 +1694,29 @@ pub mod test {\n                             async_send(continue_async_handle_ptr);\n                             // uv_run()\n                             run(test_loop);\n-                            log(debug, ~\"server uv::run() has returned\");\n+                            debug!(\"server uv::run() has returned\");\n                         }\n                         else {\n-                            log(debug, fmt!(\"uv_async_init failure: %d\",\n-                                    async_result as int));\n+                            debug!(\"uv_async_init failure: %d\",\n+                                    async_result as int);\n                             fail_unless!(false);\n                         }\n                     }\n                     else {\n-                        log(debug, fmt!(\"non-zero result on uv_listen: %d\",\n-                                    listen_result as int));\n+                        debug!(\"non-zero result on uv_listen: %d\",\n+                                    listen_result as int);\n                         fail_unless!(false);\n                     }\n                 }\n                 else {\n-                    log(debug, fmt!(\"non-zero result on uv_tcp_bind: %d\",\n-                                bind_result as int));\n+                    debug!(\"non-zero result on uv_tcp_bind: %d\",\n+                                bind_result as int);\n                     fail_unless!(false);\n                 }\n             }\n             else {\n-                log(debug, fmt!(\"non-zero result on uv_tcp_init: %d\",\n-                            tcp_init_result as int));\n+                debug!(\"non-zero result on uv_tcp_init: %d\",\n+                            tcp_init_result as int);\n                 fail_unless!(false);\n             }\n             loop_delete(test_loop);\n@@ -1751,9 +1751,9 @@ pub mod test {\n             };\n \n             // block until the server up is.. possibly a race?\n-            log(debug, ~\"before receiving on server continue_port\");\n+            debug!(\"before receiving on server continue_port\");\n             continue_port.recv();\n-            log(debug, ~\"received on continue port, set up tcp client\");\n+            debug!(\"received on continue port, set up tcp client\");\n \n             let kill_server_msg_copy = copy kill_server_msg;\n             do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -1808,7 +1808,7 @@ pub mod test {\n                 let output = fmt!(\n                     \"STRUCT_SIZE FAILURE: %s -- actual: %u expected: %u\",\n                     t_name, rust_size, foreign_size as uint);\n-                log(debug, output);\n+                debug!(\"%s\", output);\n             }\n             fail_unless!(sizes_match);\n         }\n@@ -1869,7 +1869,7 @@ pub mod test {\n             let rust_handle_size = sys::size_of::<sockaddr_in6>();\n             let output = fmt!(\"sockaddr_in6 -- foreign: %u rust: %u\",\n                               foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n+            debug!(output);\n             // FIXME #1645 .. rust appears to pad structs to the nearest\n             // byte..?\n             // .. can't get the uv::ll::sockaddr_in6 to == 28 :/\n@@ -1888,7 +1888,7 @@ pub mod test {\n             let rust_handle_size = sys::size_of::<addr_in>();\n             let output = fmt!(\"addr_in -- foreign: %u rust: %u\",\n                               foreign_handle_size as uint, rust_handle_size);\n-            log(debug, output);\n+            debug!(output);\n             // FIXME #1645 .. see note above about struct padding\n             fail_unless!((4u+foreign_handle_size as uint) ==\n                 rust_handle_size);"}, {"sha": "b1379b9ab36ab079fbb1dcd92b73ebd86e9c11d8", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -289,10 +289,10 @@ pub fn check_variants_T<T: Copy>(\n \n     if L < 100 {\n         do under(uint::min(L, 20)) |i| {\n-            log(error, ~\"Replacing... #\" + uint::to_str(i));\n+            error!(\"Replacing... #%?\", uint::to_str(i));\n             let fname = str::from_slice(filename.to_str());\n             do under(uint::min(L, 30)) |j| {\n-                log(error, ~\"With... \" + stringifier(@things[j], intr));\n+                error!(\"With... %?\", stringifier(@things[j], intr));\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but\n                 // testing the string for stability is easier and ok for now.\n@@ -363,8 +363,8 @@ pub fn check_whole_compiler(code: ~str, suggested_filename_prefix: &Path,\n         removeDirIfExists(&suggested_filename_prefix.with_filetype(\"dSYM\"));\n       }\n       failed(s) => {\n-        log(error, ~\"check_whole_compiler failure: \" + s);\n-        log(error, ~\"Saved as: \" + filename.to_str());\n+        error!(\"check_whole_compiler failure: %?\", s);\n+        error!(\"Saved as: %?\", filename.to_str());\n       }\n     }\n }\n@@ -387,7 +387,7 @@ pub fn check_running(exe_filename: &Path) -> happiness {\n         ~[exe_filename.to_str()]);\n     let comb = p.out + ~\"\\n\" + p.err;\n     if str::len(comb) > 1u {\n-        log(error, ~\"comb comb comb: \" + comb);\n+        error!(\"comb comb comb: %?\", comb);\n     }\n \n     if contains(comb, ~\"Assertion failed:\") {\n@@ -433,21 +433,21 @@ pub fn check_compiling(filename: &Path) -> happiness {\n         if contains(p.err, ~\"error:\") {\n             cleanly_rejected(~\"rejected with span_error\")\n         } else {\n-            log(error, ~\"Stderr: \" + p.err);\n+            error!(\"Stderr: %?\", p.err);\n             failed(~\"Unfamiliar error message\")\n         }\n     } else if contains(p.out, ~\"Assertion\") && contains(p.out, ~\"failed\") {\n-        log(error, ~\"Stdout: \" + p.out);\n+        error!(\"Stdout: %?\", p.out);\n         failed(~\"Looks like an llvm assertion failure\")\n     } else if contains(p.out, ~\"internal compiler error unimplemented\") {\n         known_bug(~\"Something unimplemented\")\n     } else if contains(p.out, ~\"internal compiler error\") {\n-        log(error, ~\"Stdout: \" + p.out);\n+        error!(\"Stdout: %?\", p.out);\n         failed(~\"internal compiler error\")\n \n     } else {\n-        log(error, p.status);\n-        log(error, ~\"!Stdout: \" + p.out);\n+        error!(\"%?\", p.status);\n+        error!(\"!Stdout: %?\", p.out);\n         failed(~\"What happened?\")\n     }\n }\n@@ -609,7 +609,7 @@ pub fn check_variants(files: &[Path], cx: Context) {\n \n         let file_str = file.to_str();\n \n-        log(error, ~\"check_variants: \" + file_str);\n+        error!(\"check_variants: %?\", file_str);\n         let sess = parse::new_parse_sess(option::None);\n         let crate =\n             parse::parse_crate_from_source_str("}, {"sha": "40cb70764304b1b5cade45224156e8d23891cf08", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -758,7 +758,7 @@ pub fn link_binary(sess: Session,\n         /*bad*/copy *out_filename\n     };\n \n-    log(debug, ~\"output: \" + output.to_str());\n+    debug!(\"output: %s\", output.to_str());\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed."}, {"sha": "ac315a36e4034e2450b563ce025516ed7b979501", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -803,12 +803,12 @@ pub fn invoke(bcx: block, llfn: ValueRef, +llargs: ~[ValueRef]) -> block {\n     let _icx = bcx.insn_ctxt(\"invoke_\");\n     if bcx.unreachable { return bcx; }\n     if need_invoke(bcx) {\n-        log(debug, ~\"invoking\");\n+        debug!(\"invoking\");\n         let normal_bcx = sub_block(bcx, ~\"normal return\");\n         Invoke(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n         return normal_bcx;\n     } else {\n-        log(debug, ~\"calling\");\n+        debug!(\"calling\");\n         Call(bcx, llfn, llargs);\n         return bcx;\n     }\n@@ -1487,7 +1487,7 @@ pub fn alloc_ty(bcx: block, t: ty::t) -> ValueRef {\n     let _icx = bcx.insn_ctxt(\"alloc_ty\");\n     let ccx = bcx.ccx();\n     let llty = type_of::type_of(ccx, t);\n-    if ty::type_has_params(t) { log(error, ty_to_str(ccx.tcx, t)); }\n+    if ty::type_has_params(t) { error!(\"%s\", ty_to_str(ccx.tcx, t)); }\n     fail_unless!(!ty::type_has_params(t));\n     let val = alloca(bcx, llty);\n     return val;"}, {"sha": "4c9eb4ada35f171a3ded526ada52a95acb0e328f", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -848,7 +848,7 @@ pub fn add_span_comment(bcx: block, sp: span, text: &str) {\n     let ccx = bcx.ccx();\n     if !ccx.sess.no_asm_comments() {\n         let s = fmt!(\"%s (%s)\", text, ccx.sess.codemap.span_to_str(sp));\n-        log(debug, copy s);\n+        debug!(\"%s\", copy s);\n         add_comment(bcx, s);\n     }\n }"}, {"sha": "a08bc0ba9fb42fafa35085ffefde681d6d4e9d4d", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -806,10 +806,10 @@ pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n     let dbg_cx = (/*bad*/copy cx.dbg_cx).get();\n \n     debug!(\"~~\");\n-    log(debug, fcx.id);\n+    debug!(\"%?\", fcx.id);\n \n     let sp = fcx.span.get();\n-    log(debug, cx.sess.codemap.span_to_str(sp));\n+    debug!(\"%s\", cx.sess.codemap.span_to_str(sp));\n \n     let (ident, ret_ty, id) = match cx.tcx.items.get(&fcx.id) {\n       ast_map::node_item(item, _) => {\n@@ -841,8 +841,8 @@ pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n                               sort of node\")\n     };\n \n-    log(debug, ident);\n-    log(debug, id);\n+    debug!(\"%?\", ident);\n+    debug!(\"%?\", id);\n \n     let cache = get_cache(cx);\n     match cached_metadata::<@Metadata<SubProgramMetadata>>("}, {"sha": "b3905680f721b90bfe69a33f1d718b4759f50a64", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -708,7 +708,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n         free_glue: None,\n         visit_glue: None\n     };\n-    log(debug, ~\"--- declare_tydesc \" + ppaux::ty_to_str(ccx.tcx, t));\n+    debug!(\"--- declare_tydesc %s\", ppaux::ty_to_str(ccx.tcx, t));\n     return inf;\n }\n "}, {"sha": "ad57af8942d353db7602223bc9627263837e93c3", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -128,7 +128,7 @@ struct Bored {\n }\n \n impl Drop for Bored {\n-  fn finalize(&self) { log(error, self.bored); }\n+  fn finalize(&self) { }\n }\n \n /**"}, {"sha": "e71b145d7df97d737a2314100308501133dfd9eb", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -31,7 +31,7 @@ pub fn run_passes(\n ) -> doc::Doc {\n     let mut passno = 0;\n     do vec::foldl(doc, passes) |doc, pass| {\n-        log(debug, fmt!(\"pass #%d\", passno));\n+        debug!(\"pass #%d\", passno);\n         passno += 1;\n         do time(copy pass.name) {\n             (pass.f)(srv.clone(), copy doc)"}, {"sha": "b91af9a00690359fa865797681fe984c482e2b9d", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -509,7 +509,7 @@ mod tests {\n \n         fail_unless!((*arc::get(&arc_v))[2] == 3);\n \n-        log(info, arc_v);\n+        info!(arc_v);\n     }\n \n     #[test]"}, {"sha": "b1ba838865dd8d50b9a32b7960e25a197b839f04", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -116,7 +116,6 @@ mod tests {\n     use super::*;\n     use core::cmp::Eq;\n     use core::kinds::{Durable, Copy};\n-    use core::prelude::debug;\n \n     #[test]\n     fn test_simple() {\n@@ -128,21 +127,21 @@ mod tests {\n         fail_unless!(d.len() == 3u);\n         d.add_back(137);\n         fail_unless!(d.len() == 4u);\n-        log(debug, d.peek_front());\n+        debug!(d.peek_front());\n         fail_unless!(*d.peek_front() == 42);\n-        log(debug, d.peek_back());\n+        debug!(d.peek_back());\n         fail_unless!(*d.peek_back() == 137);\n         let mut i: int = d.pop_front();\n-        log(debug, i);\n+        debug!(i);\n         fail_unless!(i == 42);\n         i = d.pop_back();\n-        log(debug, i);\n+        debug!(i);\n         fail_unless!(i == 137);\n         i = d.pop_back();\n-        log(debug, i);\n+        debug!(i);\n         fail_unless!(i == 137);\n         i = d.pop_back();\n-        log(debug, i);\n+        debug!(i);\n         fail_unless!(i == 17);\n         fail_unless!(d.len() == 0u);\n         d.add_back(3);\n@@ -153,10 +152,10 @@ mod tests {\n         fail_unless!(d.len() == 3u);\n         d.add_front(1);\n         fail_unless!(d.len() == 4u);\n-        log(debug, d.get(0));\n-        log(debug, d.get(1));\n-        log(debug, d.get(2));\n-        log(debug, d.get(3));\n+        debug!(d.get(0));\n+        debug!(d.get(1));\n+        debug!(d.get(2));\n+        debug!(d.get(3));\n         fail_unless!(*d.get(0) == 1);\n         fail_unless!(*d.get(1) == 2);\n         fail_unless!(*d.get(2) == 3);"}, {"sha": "4cf60695266ddf8bc0996f1d197e459bacfc9447", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -881,7 +881,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => {\n-            log(error, fail_str(f));\n+            error!(fail_str(f));\n             check_fail_type(f, UnexpectedArgument_);\n           }\n           _ => fail!()"}, {"sha": "04283674d88bece566260ef948ef00e1539806ff", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -117,7 +117,7 @@ pub fn get_addr(node: &str, iotask: &iotask)\n     do str::as_buf(node) |node_ptr, len| {\n         let output_ch = output_ch.swap_unwrap();\n         unsafe {\n-            log(debug, fmt!(\"slice len %?\", len));\n+            debug!(\"slice len %?\", len);\n             let handle = create_uv_getaddrinfo_t();\n             let handle_ptr = ptr::addr_of(&handle);\n             let handle_data = GetAddrData {\n@@ -228,8 +228,8 @@ pub mod v4 {\n \n             let new_addr = uv_ip4_addr(str::from_slice(ip), 22);\n             let reformatted_name = uv_ip4_name(&new_addr);\n-            log(debug, fmt!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n-                            ip, reformatted_name));\n+            debug!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n+                            ip, reformatted_name);\n             let ref_ip_rep_result = parse_to_ipv4_rep(reformatted_name);\n             if result::is_err(&ref_ip_rep_result) {\n                 let err_str = result::get_err(&ref_ip_rep_result);\n@@ -282,8 +282,8 @@ pub mod v6 {\n             // need to figure out how to establish a parse failure..\n             let new_addr = uv_ip6_addr(str::from_slice(ip), 22);\n             let reparsed_name = uv_ip6_name(&new_addr);\n-            log(debug, fmt!(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n-                            ip, reparsed_name));\n+            debug!(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n+                            ip, reparsed_name);\n             // '::' appears to be uv_ip6_name() returns for bogus\n             // parses..\n             if  ip != &\"::\" && reparsed_name == ~\"::\" {\n@@ -303,14 +303,14 @@ struct GetAddrData {\n extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n                       res: *addrinfo) {\n     unsafe {\n-        log(debug, ~\"in get_addr_cb\");\n+        debug!(\"in get_addr_cb\");\n         let handle_data = get_data_for_req(handle) as\n             *GetAddrData;\n         let output_ch = (*handle_data).output_ch.clone();\n         if status == 0i32 {\n             if res != (ptr::null::<addrinfo>()) {\n                 let mut out_vec = ~[];\n-                log(debug, fmt!(\"initial addrinfo: %?\", res));\n+                debug!(\"initial addrinfo: %?\", res);\n                 let mut curr_addr = res;\n                 loop {\n                     let new_ip_addr = if ll::is_ipv4_addrinfo(curr_addr) {\n@@ -322,8 +322,8 @@ extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n                             *ll::addrinfo_as_sockaddr_in6(curr_addr))))\n                     }\n                     else {\n-                        log(debug, ~\"curr_addr is not of family AF_INET or \"+\n-                            ~\"AF_INET6. Error.\");\n+                        debug!(\"curr_addr is not of family AF_INET or \\\n+                                AF_INET6. Error.\");\n                         output_ch.send(\n                             result::Err(GetAddrUnknownError));\n                         break;\n@@ -332,33 +332,33 @@ extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n \n                     let next_addr = ll::get_next_addrinfo(curr_addr);\n                     if next_addr == ptr::null::<addrinfo>() as *addrinfo {\n-                        log(debug, ~\"null next_addr encountered. no mas\");\n+                        debug!(\"null next_addr encountered. no mas\");\n                         break;\n                     }\n                     else {\n                         curr_addr = next_addr;\n-                        log(debug, fmt!(\"next_addr addrinfo: %?\", curr_addr));\n+                        debug!(\"next_addr addrinfo: %?\", curr_addr);\n                     }\n                 }\n-                log(debug, fmt!(\"successful process addrinfo result, len: %?\",\n-                                vec::len(out_vec)));\n+                debug!(\"successful process addrinfo result, len: %?\",\n+                                vec::len(out_vec));\n                 output_ch.send(result::Ok(out_vec));\n             }\n             else {\n-                log(debug, ~\"addrinfo pointer is NULL\");\n+                debug!(\"addrinfo pointer is NULL\");\n                 output_ch.send(\n                     result::Err(GetAddrUnknownError));\n             }\n         }\n         else {\n-            log(debug, ~\"status != 0 error in get_addr_cb\");\n+            debug!(\"status != 0 error in get_addr_cb\");\n             output_ch.send(\n                 result::Err(GetAddrUnknownError));\n         }\n         if res != (ptr::null::<addrinfo>()) {\n             uv_freeaddrinfo(res);\n         }\n-        log(debug, ~\"leaving get_addr_cb\");\n+        debug!(\"leaving get_addr_cb\");\n     }\n }\n \n@@ -384,15 +384,15 @@ mod test {\n     fn test_ip_ipv6_parse_and_format_ip() {\n         let localhost_str = ~\"::1\";\n         let format_result = format_addr(&v6::parse_addr(localhost_str));\n-        log(debug, fmt!(\"results: expected: '%s' actual: '%s'\",\n-            localhost_str, format_result));\n+        debug!(\"results: expected: '%s' actual: '%s'\",\n+            localhost_str, format_result);\n         fail_unless!(format_result == localhost_str);\n     }\n     #[test]\n     fn test_ip_ipv4_bad_parse() {\n         match v4::try_parse_addr(~\"b4df00d\") {\n           result::Err(ref err_info) => {\n-            log(debug, fmt!(\"got error as expected %?\", err_info));\n+            debug!(\"got error as expected %?\", err_info);\n             fail_unless!(true);\n           }\n           result::Ok(ref addr) => {\n@@ -405,7 +405,7 @@ mod test {\n     fn test_ip_ipv6_bad_parse() {\n         match v6::try_parse_addr(~\"::,~2234k;\") {\n           result::Err(ref err_info) => {\n-            log(debug, fmt!(\"got error as expected %?\", err_info));\n+            debug!(\"got error as expected %?\", err_info);\n             fail_unless!(true);\n           }\n           result::Ok(ref addr) => {\n@@ -425,15 +425,15 @@ mod test {\n         // note really sure how to realiably test/assert\n         // this.. mostly just wanting to see it work, atm.\n         let results = result::unwrap(ga_result);\n-        log(debug, fmt!(\"test_get_addr: Number of results for %s: %?\",\n-                        localhost_name, vec::len(results)));\n+        debug!(\"test_get_addr: Number of results for %s: %?\",\n+                        localhost_name, vec::len(results));\n         for vec::each(results) |r| {\n             let ipv_prefix = match *r {\n               Ipv4(_) => ~\"IPv4\",\n               Ipv6(_) => ~\"IPv6\"\n             };\n-            log(debug, fmt!(\"test_get_addr: result %s: '%s'\",\n-                            ipv_prefix, format_addr(r)));\n+            debug!(\"test_get_addr: result %s: '%s'\",\n+                            ipv_prefix, format_addr(r));\n         }\n         // at least one result.. this is going to vary from system\n         // to system, based on stuff like the contents of /etc/hosts"}, {"sha": "0224927df57ae4e034ca34013f3b26c1b9ddaee6", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -559,14 +559,14 @@ pub fn accept(new_conn: TcpNewConnection)\n                     server_handle_ptr);\n                 match uv::ll::tcp_init(loop_ptr, client_stream_handle_ptr) {\n                     0i32 => {\n-                        log(debug, ~\"uv_tcp_init successful for \\\n+                        debug!(\"uv_tcp_init successful for \\\n                                      client stream\");\n                         match uv::ll::accept(\n                             server_handle_ptr as *libc::c_void,\n                             client_stream_handle_ptr as *libc::c_void) {\n                             0i32 => {\n-                                log(debug,\n-                                    ~\"successfully accepted client \\\n+                                debug!(\n+                                    \"successfully accepted client \\\n                                       connection\");\n                                 uv::ll::set_data_for_uv_handle(\n                                     client_stream_handle_ptr,\n@@ -575,15 +575,15 @@ pub fn accept(new_conn: TcpNewConnection)\n                                 result_ch.send(None);\n                             }\n                             _ => {\n-                                log(debug, ~\"failed to accept client conn\");\n+                                debug!(\"failed to accept client conn\");\n                                 result_ch.send(Some(\n                                     uv::ll::get_last_err_data(\n                                         loop_ptr).to_tcp_err()));\n                             }\n                         }\n                     }\n                     _ => {\n-                        log(debug, ~\"failed to accept client stream\");\n+                        debug!(\"failed to accept client stream\");\n                         result_ch.send(Some(\n                             uv::ll::get_last_err_data(\n                                 loop_ptr).to_tcp_err()));\n@@ -694,15 +694,15 @@ fn listen_common(host_ip: ip::IpAddr,\n                         let addr_str = ip::format_addr(&loc_ip);\n                         let bind_result = match loc_ip {\n                             ip::Ipv4(ref addr) => {\n-                                log(debug, fmt!(\"addr: %?\", addr));\n+                                debug!(\"addr: %?\", addr);\n                                 let in_addr = uv::ll::ip4_addr(\n                                     addr_str,\n                                     port as int);\n                                 uv::ll::tcp_bind(server_stream_ptr,\n                                                  ptr::addr_of(&in_addr))\n                             }\n                             ip::Ipv6(ref addr) => {\n-                                log(debug, fmt!(\"addr: %?\", addr));\n+                                debug!(\"addr: %?\", addr);\n                                 let in_addr = uv::ll::ip6_addr(\n                                     addr_str,\n                                     port as int);\n@@ -718,8 +718,8 @@ fn listen_common(host_ip: ip::IpAddr,\n                                     tcp_lfc_on_connection_cb) {\n                                     0i32 => setup_ch.send(None),\n                                     _ => {\n-                                        log(debug,\n-                                            ~\"failure to uv_tcp_init\");\n+                                        debug!(\n+                                            \"failure to uv_tcp_init\");\n                                         let err_data =\n                                             uv::ll::get_last_err_data(\n                                                 loop_ptr);\n@@ -728,15 +728,15 @@ fn listen_common(host_ip: ip::IpAddr,\n                                 }\n                             }\n                             _ => {\n-                                log(debug, ~\"failure to uv_tcp_bind\");\n+                                debug!(\"failure to uv_tcp_bind\");\n                                 let err_data = uv::ll::get_last_err_data(\n                                     loop_ptr);\n                                 setup_ch.send(Some(err_data));\n                             }\n                         }\n                     }\n                     _ => {\n-                        log(debug, ~\"failure to uv_tcp_bind\");\n+                        debug!(\"failure to uv_tcp_bind\");\n                         let err_data = uv::ll::get_last_err_data(\n                             loop_ptr);\n                         setup_ch.send(Some(err_data));\n@@ -751,26 +751,26 @@ fn listen_common(host_ip: ip::IpAddr,\n             Some(ref err_data) => {\n                 do iotask::interact(iotask) |loop_ptr| {\n                     unsafe {\n-                        log(debug,\n-                            fmt!(\"tcp::listen post-kill recv hl interact %?\",\n-                                 loop_ptr));\n+                        debug!(\n+                            \"tcp::listen post-kill recv hl interact %?\",\n+                                 loop_ptr);\n                         (*server_data_ptr).active = false;\n                         uv::ll::close(server_stream_ptr, tcp_lfc_close_cb);\n                     }\n                 };\n                 stream_closed_po.recv();\n                 match err_data.err_name {\n                     ~\"EACCES\" => {\n-                        log(debug, ~\"Got EACCES error\");\n+                        debug!(\"Got EACCES error\");\n                         result::Err(AccessDenied)\n                     }\n                     ~\"EADDRINUSE\" => {\n-                        log(debug, ~\"Got EADDRINUSE error\");\n+                        debug!(\"Got EADDRINUSE error\");\n                         result::Err(AddressInUse)\n                     }\n                     _ => {\n-                        log(debug, fmt!(\"Got '%s' '%s' libuv error\",\n-                                        err_data.err_name, err_data.err_msg));\n+                        debug!(\"Got '%s' '%s' libuv error\",\n+                                        err_data.err_name, err_data.err_msg);\n                         result::Err(\n                             GenericListenErr(err_data.err_name,\n                                              err_data.err_msg))\n@@ -782,9 +782,9 @@ fn listen_common(host_ip: ip::IpAddr,\n                 let kill_result = kill_po.recv();\n                 do iotask::interact(iotask) |loop_ptr| {\n                     unsafe {\n-                        log(debug,\n-                            fmt!(\"tcp::listen post-kill recv hl interact %?\",\n-                                 loop_ptr));\n+                        debug!(\n+                            \"tcp::listen post-kill recv hl interact %?\",\n+                                 loop_ptr);\n                         (*server_data_ptr).active = false;\n                         uv::ll::close(server_stream_ptr, tcp_lfc_close_cb);\n                     }\n@@ -981,9 +981,9 @@ impl io::Writer for TcpSocketBuf {\n                                                       ).to_vec());\n             if w_result.is_err() {\n                 let err_data = w_result.get_err();\n-                log(debug,\n-                    fmt!(\"ERROR sock_buf as io::writer.writer err: %? %?\",\n-                         err_data.err_name, err_data.err_msg));\n+                debug!(\n+                    \"ERROR sock_buf as io::writer.writer err: %? %?\",\n+                         err_data.err_name, err_data.err_msg);\n             }\n         }\n     }\n@@ -1015,9 +1015,9 @@ fn tear_down_socket_data(socket_data: @TcpSocketData) {\n         let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n         do iotask::interact(&(*socket_data).iotask) |loop_ptr| {\n             unsafe {\n-                log(debug,\n-                    fmt!(\"interact dtor for tcp_socket stream %? loop %?\",\n-                         stream_handle_ptr, loop_ptr));\n+                debug!(\n+                    \"interact dtor for tcp_socket stream %? loop %?\",\n+                         stream_handle_ptr, loop_ptr);\n                 uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n                                                close_data_ptr);\n                 uv::ll::close(stream_handle_ptr, tcp_socket_dtor_close_cb);\n@@ -1028,7 +1028,7 @@ fn tear_down_socket_data(socket_data: @TcpSocketData) {\n         //log(debug, fmt!(\"about to free socket_data at %?\", socket_data));\n         rustrt::rust_uv_current_kernel_free(stream_handle_ptr\n                                             as *libc::c_void);\n-        log(debug, ~\"exiting dtor for tcp_socket\");\n+        debug!(\"exiting dtor for tcp_socket\");\n     }\n }\n \n@@ -1038,25 +1038,25 @@ fn read_common_impl(socket_data: *TcpSocketData, timeout_msecs: uint)\n     unsafe {\n         use timer;\n \n-        log(debug, ~\"starting tcp::read\");\n+        debug!(\"starting tcp::read\");\n         let iotask = &(*socket_data).iotask;\n         let rs_result = read_start_common_impl(socket_data);\n         if result::is_err(&rs_result) {\n             let err_data = result::get_err(&rs_result);\n             result::Err(err_data)\n         }\n         else {\n-            log(debug, ~\"tcp::read before recv_timeout\");\n+            debug!(\"tcp::read before recv_timeout\");\n             let read_result = if timeout_msecs > 0u {\n                 timer::recv_timeout(\n                     iotask, timeout_msecs, result::unwrap(rs_result))\n             } else {\n                 Some(result::get(&rs_result).recv())\n             };\n-            log(debug, ~\"tcp::read after recv_timeout\");\n+            debug!(\"tcp::read after recv_timeout\");\n             match read_result {\n                 None => {\n-                    log(debug, ~\"tcp::read: timed out..\");\n+                    debug!(\"tcp::read: timed out..\");\n                     let err_data = TcpErrData {\n                         err_name: ~\"TIMEOUT\",\n                         err_msg: ~\"req timed out\"\n@@ -1065,7 +1065,7 @@ fn read_common_impl(socket_data: *TcpSocketData, timeout_msecs: uint)\n                     result::Err(err_data)\n                 }\n                 Some(data_result) => {\n-                    log(debug, ~\"tcp::read got data\");\n+                    debug!(\"tcp::read got data\");\n                     read_stop_common_impl(socket_data);\n                     data_result\n                 }\n@@ -1082,15 +1082,15 @@ fn read_stop_common_impl(socket_data: *TcpSocketData) ->\n         let (stop_po, stop_ch) = stream::<Option<TcpErrData>>();\n         do iotask::interact(&(*socket_data).iotask) |loop_ptr| {\n             unsafe {\n-                log(debug, ~\"in interact cb for tcp::read_stop\");\n+                debug!(\"in interact cb for tcp::read_stop\");\n                 match uv::ll::read_stop(stream_handle_ptr\n                                         as *uv::ll::uv_stream_t) {\n                     0i32 => {\n-                        log(debug, ~\"successfully called uv_read_stop\");\n+                        debug!(\"successfully called uv_read_stop\");\n                         stop_ch.send(None);\n                     }\n                     _ => {\n-                        log(debug, ~\"failure in calling uv_read_stop\");\n+                        debug!(\"failure in calling uv_read_stop\");\n                         let err_data = uv::ll::get_last_err_data(loop_ptr);\n                         stop_ch.send(Some(err_data.to_tcp_err()));\n                     }\n@@ -1111,21 +1111,21 @@ fn read_start_common_impl(socket_data: *TcpSocketData)\n     unsafe {\n         let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n         let (start_po, start_ch) = stream::<Option<uv::ll::uv_err_data>>();\n-        log(debug, ~\"in tcp::read_start before interact loop\");\n+        debug!(\"in tcp::read_start before interact loop\");\n         do iotask::interact(&(*socket_data).iotask) |loop_ptr| {\n             unsafe {\n-                log(debug, fmt!(\"in tcp::read_start interact cb %?\",\n-                                loop_ptr));\n+                debug!(\"in tcp::read_start interact cb %?\",\n+                                loop_ptr);\n                 match uv::ll::read_start(stream_handle_ptr\n                                          as *uv::ll::uv_stream_t,\n                                          on_alloc_cb,\n                                          on_tcp_read_cb) {\n                     0i32 => {\n-                        log(debug, ~\"success doing uv_read_start\");\n+                        debug!(\"success doing uv_read_start\");\n                         start_ch.send(None);\n                     }\n                     _ => {\n-                        log(debug, ~\"error attempting uv_read_start\");\n+                        debug!(\"error attempting uv_read_start\");\n                         let err_data = uv::ll::get_last_err_data(loop_ptr);\n                         start_ch.send(Some(err_data));\n                     }\n@@ -1164,19 +1164,19 @@ fn write_common_impl(socket_data_ptr: *TcpSocketData,\n         let write_data_ptr = ptr::addr_of(&write_data);\n         do iotask::interact(&(*socket_data_ptr).iotask) |loop_ptr| {\n             unsafe {\n-                log(debug, fmt!(\"in interact cb for tcp::write %?\",\n-                                loop_ptr));\n+                debug!(\"in interact cb for tcp::write %?\",\n+                                loop_ptr);\n                 match uv::ll::write(write_req_ptr,\n                                     stream_handle_ptr,\n                                     write_buf_vec_ptr,\n                                     tcp_write_complete_cb) {\n                     0i32 => {\n-                        log(debug, ~\"uv_write() invoked successfully\");\n+                        debug!(\"uv_write() invoked successfully\");\n                         uv::ll::set_data_for_req(write_req_ptr,\n                                                  write_data_ptr);\n                     }\n                     _ => {\n-                        log(debug, ~\"error invoking uv_write()\");\n+                        debug!(\"error invoking uv_write()\");\n                         let err_data = uv::ll::get_last_err_data(loop_ptr);\n                         let result_ch = (*write_data_ptr).result_ch.clone();\n                         result_ch.send(TcpWriteError(err_data.to_tcp_err()));\n@@ -1281,17 +1281,17 @@ extern fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n                     nread: libc::ssize_t,\n                     ++buf: uv::ll::uv_buf_t) {\n     unsafe {\n-        log(debug, fmt!(\"entering on_tcp_read_cb stream: %? nread: %?\",\n-                        stream, nread));\n+        debug!(\"entering on_tcp_read_cb stream: %? nread: %?\",\n+                        stream, nread);\n         let loop_ptr = uv::ll::get_loop_for_uv_handle(stream);\n         let socket_data_ptr = uv::ll::get_data_for_uv_handle(stream)\n             as *TcpSocketData;\n         match nread as int {\n           // incoming err.. probably eof\n           -1 => {\n             let err_data = uv::ll::get_last_err_data(loop_ptr).to_tcp_err();\n-            log(debug, fmt!(\"on_tcp_read_cb: incoming err.. name %? msg %?\",\n-                            err_data.err_name, err_data.err_msg));\n+            debug!(\"on_tcp_read_cb: incoming err.. name %? msg %?\",\n+                            err_data.err_name, err_data.err_msg);\n             let reader_ch = &(*socket_data_ptr).reader_ch;\n             reader_ch.send(result::Err(err_data));\n           }\n@@ -1300,28 +1300,28 @@ extern fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n           // have data\n           _ => {\n             // we have data\n-            log(debug, fmt!(\"tcp on_read_cb nread: %d\", nread as int));\n+            debug!(\"tcp on_read_cb nread: %d\", nread as int);\n             let reader_ch = &(*socket_data_ptr).reader_ch;\n             let buf_base = uv::ll::get_base_from_buf(buf);\n             let new_bytes = vec::from_buf(buf_base, nread as uint);\n             reader_ch.send(result::Ok(new_bytes));\n           }\n         }\n         uv::ll::free_base_of_buf(buf);\n-        log(debug, ~\"exiting on_tcp_read_cb\");\n+        debug!(\"exiting on_tcp_read_cb\");\n     }\n }\n \n extern fn on_alloc_cb(handle: *libc::c_void,\n                       suggested_size: size_t)\n     -> uv::ll::uv_buf_t {\n     unsafe {\n-        log(debug, ~\"tcp read on_alloc_cb!\");\n+        debug!(\"tcp read on_alloc_cb!\");\n         let char_ptr = uv::ll::malloc_buf_base_of(suggested_size);\n-        log(debug, fmt!(\"tcp read on_alloc_cb h: %? char_ptr: %u sugsize: %u\",\n+        debug!(\"tcp read on_alloc_cb h: %? char_ptr: %u sugsize: %u\",\n                          handle,\n                          char_ptr as uint,\n-                         suggested_size as uint));\n+                         suggested_size as uint);\n         uv::ll::buf_init(char_ptr, suggested_size as uint)\n     }\n }\n@@ -1336,7 +1336,7 @@ extern fn tcp_socket_dtor_close_cb(handle: *uv::ll::uv_tcp_t) {\n             as *TcpSocketCloseData;\n         let closed_ch = (*data).closed_ch.clone();\n         closed_ch.send(());\n-        log(debug, ~\"tcp_socket_dtor_close_cb exiting..\");\n+        debug!(\"tcp_socket_dtor_close_cb exiting..\");\n     }\n }\n \n@@ -1346,15 +1346,15 @@ extern fn tcp_write_complete_cb(write_req: *uv::ll::uv_write_t,\n         let write_data_ptr = uv::ll::get_data_for_req(write_req)\n             as *WriteReqData;\n         if status == 0i32 {\n-            log(debug, ~\"successful write complete\");\n+            debug!(\"successful write complete\");\n             let result_ch = (*write_data_ptr).result_ch.clone();\n             result_ch.send(TcpWriteSuccess);\n         } else {\n             let stream_handle_ptr = uv::ll::get_stream_handle_from_write_req(\n                 write_req);\n             let loop_ptr = uv::ll::get_loop_for_uv_handle(stream_handle_ptr);\n             let err_data = uv::ll::get_last_err_data(loop_ptr);\n-            log(debug, ~\"failure to write\");\n+            debug!(\"failure to write\");\n             let result_ch = (*write_data_ptr).result_ch.clone();\n             result_ch.send(TcpWriteError(err_data.to_tcp_err()));\n         }\n@@ -1376,13 +1376,13 @@ extern fn stream_error_close_cb(handle: *uv::ll::uv_tcp_t) {\n             *ConnectReqData;\n         let closed_signal_ch = (*data).closed_signal_ch.clone();\n         closed_signal_ch.send(());\n-        log(debug, fmt!(\"exiting steam_error_close_cb for %?\", handle));\n+        debug!(\"exiting steam_error_close_cb for %?\", handle);\n     }\n }\n \n extern fn tcp_connect_close_cb(handle: *uv::ll::uv_tcp_t) {\n     unsafe {\n-        log(debug, fmt!(\"closed client tcp handle %?\", handle));\n+        debug!(\"closed client tcp handle %?\", handle);\n     }\n }\n \n@@ -1392,27 +1392,27 @@ extern fn tcp_connect_on_connect_cb(connect_req_ptr: *uv::ll::uv_connect_t,\n         let conn_data_ptr = (uv::ll::get_data_for_req(connect_req_ptr)\n                           as *ConnectReqData);\n         let result_ch = (*conn_data_ptr).result_ch.clone();\n-        log(debug, fmt!(\"tcp_connect result_ch %?\", result_ch));\n+        debug!(\"tcp_connect result_ch %?\", result_ch);\n         let tcp_stream_ptr =\n             uv::ll::get_stream_handle_from_connect_req(connect_req_ptr);\n         match status {\n           0i32 => {\n-            log(debug, ~\"successful tcp connection!\");\n+            debug!(\"successful tcp connection!\");\n             result_ch.send(ConnSuccess);\n           }\n           _ => {\n-            log(debug, ~\"error in tcp_connect_on_connect_cb\");\n+            debug!(\"error in tcp_connect_on_connect_cb\");\n             let loop_ptr = uv::ll::get_loop_for_uv_handle(tcp_stream_ptr);\n             let err_data = uv::ll::get_last_err_data(loop_ptr);\n-            log(debug, fmt!(\"err_data %? %?\", err_data.err_name,\n-                            err_data.err_msg));\n+            debug!(\"err_data %? %?\", err_data.err_name,\n+                            err_data.err_msg);\n             result_ch.send(ConnFailure(err_data));\n             uv::ll::set_data_for_uv_handle(tcp_stream_ptr,\n                                            conn_data_ptr);\n             uv::ll::close(tcp_stream_ptr, stream_error_close_cb);\n           }\n         }\n-        log(debug, ~\"leaving tcp_connect_on_connect_cb\");\n+        debug!(\"leaving tcp_connect_on_connect_cb\");\n     }\n }\n \n@@ -1758,10 +1758,10 @@ pub mod test {\n         };\n \n         let actual_req = server_result_po.recv();\n-        log(debug, fmt!(\"REQ: expected: '%s' actual: '%s'\",\n-                       expected_req, actual_req));\n-        log(debug, fmt!(\"RESP: expected: '%s' actual: '%s'\",\n-                       expected_resp, actual_resp));\n+        debug!(\"REQ: expected: '%s' actual: '%s'\",\n+                       expected_req, actual_req);\n+        debug!(\"RESP: expected: '%s' actual: '%s'\",\n+                       expected_resp, actual_resp);\n         fail_unless!(str::contains(actual_req, expected_req));\n         fail_unless!(str::contains(actual_resp, expected_resp));\n     }"}, {"sha": "17ae48e03b93f1ff8c331e0ace3cad2656d7695a", "filename": "src/libstd/par.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -41,7 +41,7 @@ fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n \n     let len = xs.len();\n     if len < min_granularity {\n-        log(info, ~\"small slice\");\n+        info!(\"small slice\");\n         // This is a small vector, fall back on the normal map.\n         ~[f()(0u, xs)]\n     }\n@@ -52,7 +52,7 @@ fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n \n         let mut futures = ~[];\n         let mut base = 0u;\n-        log(info, ~\"spawning tasks\");\n+        info!(\"spawning tasks\");\n         while base < len {\n             let end = uint::min(len, base + items_per_task);\n             do vec::as_imm_buf(xs) |p, _len| {\n@@ -63,11 +63,11 @@ fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n                         let len = end - base;\n                         let slice = (ptr::offset(p, base),\n                                      len * sys::size_of::<A>());\n-                        log(info, fmt!(\"pre-slice: %?\", (base, slice)));\n+                        info!(\"pre-slice: %?\", (base, slice));\n                         let slice : &[A] =\n                             cast::reinterpret_cast(&slice);\n-                        log(info, fmt!(\"slice: %?\",\n-                                       (base, vec::len(slice), end - base)));\n+                        info!(\"slice: %?\",\n+                                       (base, vec::len(slice), end - base));\n                         fail_unless!((vec::len(slice) == end - base));\n                         f(base, slice)\n                     }\n@@ -76,9 +76,9 @@ fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n             };\n             base += items_per_task;\n         }\n-        log(info, ~\"tasks spawned\");\n+        info!(\"tasks spawned\");\n \n-        log(info, fmt!(\"num_tasks: %?\", (num_tasks, futures.len())));\n+        info!(\"num_tasks: %?\", (num_tasks, futures.len()));\n         fail_unless!((num_tasks == futures.len()));\n \n         let r = do futures.map() |ys| {\n@@ -114,7 +114,7 @@ pub fn mapi<A:Copy + Owned,B:Copy + Owned>(\n         result\n     });\n     let r = vec::concat(slices);\n-    log(info, (r.len(), xs.len()));\n+    info!(\"%?\", (r.len(), xs.len()));\n     fail_unless!((r.len() == xs.len()));\n     r\n }"}, {"sha": "a13617a57ac93b68f7d76292647a1520315f56ef", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -721,7 +721,7 @@ mod test_qsort3 {\n         quick_sort3::<int>(v1);\n         let mut i = 0;\n         while i < len {\n-            log(debug, v2[i]);\n+            debug!(v2[i]);\n             fail_unless!((v2[i] == v1[i]));\n             i += 1;\n         }\n@@ -768,7 +768,7 @@ mod test_qsort {\n         quick_sort::<int>(v1, leual);\n         let mut i = 0u;\n         while i < len {\n-            log(debug, v2[i]);\n+            debug!(v2[i]);\n             fail_unless!((v2[i] == v1[i]));\n             i += 1;\n         }\n@@ -834,7 +834,7 @@ mod tests {\n         let v3 = merge_sort::<int>(v1, f);\n         let mut i = 0u;\n         while i < len {\n-            log(debug, v3[i]);\n+            debug!(v3[i]);\n             fail_unless!((v3[i] == v2[i]));\n             i += 1;\n         }\n@@ -918,7 +918,7 @@ mod test_tim_sort {\n         tim_sort::<int>(v1);\n         let mut i = 0u;\n         while i < len {\n-            log(debug, v2[i]);\n+            debug!(v2[i]);\n             fail_unless!((v2[i] == v1[i]));\n             i += 1u;\n         }"}, {"sha": "8ed541c7140a2dcb8b33fa4fab3ec1069b539aa9", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -142,8 +142,8 @@ pub fn recv_timeout<T:Copy + Owned>(iotask: &IoTask,\n extern fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n                                 status: libc::c_int) {\n     unsafe {\n-        log(debug,\n-            fmt!(\"delayed_send_cb handle %? status %?\", handle, status));\n+        debug!(\n+            \"delayed_send_cb handle %? status %?\", handle, status);\n         // Faking a borrowed pointer to our ~SharedChan\n         let timer_done_ch_ptr: &*c_void = &uv::ll::get_data_for_uv_handle(\n             handle);\n@@ -163,7 +163,7 @@ extern fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n \n extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) {\n     unsafe {\n-        log(debug, fmt!(\"delayed_send_close_cb handle %?\", handle));\n+        debug!(\"delayed_send_close_cb handle %?\", handle);\n         let timer_done_ch_ptr = uv::ll::get_data_for_uv_handle(handle);\n         let timer_done_ch = transmute::<*c_void, ~SharedChan<()>>(\n             timer_done_ch_ptr);"}, {"sha": "1f3dc2f01de52bdcf6bc1b1c0848f8cf7bb32094", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -136,40 +136,39 @@ mod test {\n                 timer_ptr as *libc::c_void);\n             let exit_ch = transmute::<*c_void, ~Chan<bool>>(exit_ch_ptr);\n             exit_ch.send(true);\n-            log(debug,\n-                fmt!(\"EXIT_CH_PTR simple_timer_close_cb exit_ch_ptr: %?\",\n-                     exit_ch_ptr));\n+            debug!(\"EXIT_CH_PTR simple_timer_close_cb exit_ch_ptr: %?\",\n+                     exit_ch_ptr);\n         }\n     }\n     extern fn simple_timer_cb(timer_ptr: *ll::uv_timer_t,\n                              _status: libc::c_int) {\n         unsafe {\n-            log(debug, ~\"in simple timer cb\");\n+            debug!(~\"in simple timer cb\");\n             ll::timer_stop(timer_ptr);\n             let hl_loop = &get_gl();\n             do iotask::interact(hl_loop) |_loop_ptr| {\n-                log(debug, ~\"closing timer\");\n+                debug!(~\"closing timer\");\n                 unsafe {\n                     ll::close(timer_ptr, simple_timer_close_cb);\n                 }\n-                log(debug, ~\"about to deref exit_ch_ptr\");\n-                log(debug, ~\"after msg sent on deref'd exit_ch\");\n+                debug!(~\"about to deref exit_ch_ptr\");\n+                debug!(~\"after msg sent on deref'd exit_ch\");\n             };\n-            log(debug, ~\"exiting simple timer cb\");\n+            debug!(~\"exiting simple timer cb\");\n         }\n     }\n \n     fn impl_uv_hl_simple_timer(iotask: &IoTask) {\n         unsafe {\n             let (exit_po, exit_ch) = stream::<bool>();\n             let exit_ch_ptr: *libc::c_void = transmute(~exit_ch);\n-            log(debug, fmt!(\"EXIT_CH_PTR newly created exit_ch_ptr: %?\",\n-                            exit_ch_ptr));\n+            debug!(\"EXIT_CH_PTR newly created exit_ch_ptr: %?\",\n+                            exit_ch_ptr);\n             let timer_handle = ll::timer_t();\n             let timer_ptr = ptr::addr_of(&timer_handle);\n             do iotask::interact(iotask) |loop_ptr| {\n                 unsafe {\n-                    log(debug, ~\"user code inside interact loop!!!\");\n+                    debug!(~\"user code inside interact loop!!!\");\n                     let init_status = ll::timer_init(loop_ptr, timer_ptr);\n                     if(init_status == 0i32) {\n                         ll::set_data_for_uv_handle(\n@@ -188,7 +187,7 @@ mod test {\n                 }\n             };\n             exit_po.recv();\n-            log(debug,\n+            debug!(\n                 ~\"global_loop timer test: msg recv on exit_po, done..\");\n         }\n     }\n@@ -225,7 +224,7 @@ mod test {\n         for iter::repeat(cycles) {\n             exit_po.recv();\n         };\n-        log(debug, ~\"test_stress_gl_uv_global_loop_high_level_global_timer\"+\n+        debug!(~\"test_stress_gl_uv_global_loop_high_level_global_timer\"+\n             ~\" exiting sucessfully!\");\n     }\n }"}, {"sha": "1c7a7c22a9d1521c0d2008a2909e16f63f3c4bea", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -132,10 +132,10 @@ fn run_loop(iotask_ch: &Chan<IoTask>) {\n         };\n         iotask_ch.send(iotask);\n \n-        log(debug, ~\"about to run uv loop\");\n+        debug!(\"about to run uv loop\");\n         // enter the loop... this blocks until the loop is done..\n         ll::run(loop_ptr);\n-        log(debug, ~\"uv loop ended\");\n+        debug!(\"uv loop ended\");\n         ll::loop_delete(loop_ptr);\n     }\n }\n@@ -158,8 +158,8 @@ fn send_msg(iotask: &IoTask,\n extern fn wake_up_cb(async_handle: *ll::uv_async_t,\n                     status: int) {\n \n-    log(debug, fmt!(\"wake_up_cb extern.. handle: %? status: %?\",\n-                     async_handle, status));\n+    debug!(\"wake_up_cb extern.. handle: %? status: %?\",\n+                     async_handle, status);\n \n     unsafe {\n         let loop_ptr = ll::get_loop_for_uv_handle(async_handle);\n@@ -178,13 +178,13 @@ extern fn wake_up_cb(async_handle: *ll::uv_async_t,\n \n fn begin_teardown(data: *IoTaskLoopData) {\n     unsafe {\n-        log(debug, ~\"iotask begin_teardown() called, close async_handle\");\n+        debug!(\"iotask begin_teardown() called, close async_handle\");\n         let async_handle = (*data).async_handle;\n         ll::close(async_handle as *c_void, tear_down_close_cb);\n     }\n }\n extern fn tear_down_walk_cb(handle: *libc::c_void, arg: *libc::c_void) {\n-    log(debug, ~\"IN TEARDOWN WALK CB\");\n+    debug!(\"IN TEARDOWN WALK CB\");\n     // pretty much, if we still have an active handle and it is *not*\n     // the async handle that facilities global loop communication, we\n     // want to barf out and fail\n@@ -194,15 +194,15 @@ extern fn tear_down_walk_cb(handle: *libc::c_void, arg: *libc::c_void) {\n extern fn tear_down_close_cb(handle: *ll::uv_async_t) {\n     unsafe {\n         let loop_ptr = ll::get_loop_for_uv_handle(handle);\n-        log(debug, ~\"in tear_down_close_cb\");\n+        debug!(\"in tear_down_close_cb\");\n         ll::walk(loop_ptr, tear_down_walk_cb, handle as *libc::c_void);\n     }\n }\n \n #[cfg(test)]\n extern fn async_close_cb(handle: *ll::uv_async_t) {\n     unsafe {\n-        log(debug, fmt!(\"async_close_cb handle %?\", handle));\n+        debug!(\"async_close_cb handle %?\", handle);\n         let exit_ch = &(*(ll::get_data_for_uv_handle(handle)\n                         as *AhData)).exit_ch;\n         let exit_ch = exit_ch.clone();\n@@ -213,8 +213,7 @@ extern fn async_close_cb(handle: *ll::uv_async_t) {\n #[cfg(test)]\n extern fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int) {\n     unsafe {\n-        log(debug,\n-            fmt!(\"async_handle_cb handle %? status %?\",handle,status));\n+        debug!(\"async_handle_cb handle %? status %?\",handle,status);\n         ll::close(handle, async_close_cb);\n     }\n }\n@@ -269,15 +268,15 @@ unsafe fn spawn_test_loop(exit_ch: ~Chan<()>) -> IoTask {\n #[cfg(test)]\n extern fn lifetime_handle_close(handle: *libc::c_void) {\n     unsafe {\n-        log(debug, fmt!(\"lifetime_handle_close ptr %?\", handle));\n+        debug!(\"lifetime_handle_close ptr %?\", handle);\n     }\n }\n \n #[cfg(test)]\n extern fn lifetime_async_callback(handle: *libc::c_void,\n                                  status: libc::c_int) {\n-    log(debug, fmt!(\"lifetime_handle_close ptr %? status %?\",\n-                    handle, status));\n+    debug!(\"lifetime_handle_close ptr %? status %?\",\n+                    handle, status);\n }\n \n #[test]\n@@ -311,9 +310,9 @@ fn test_uv_iotask_async() {\n             debug!(\"waiting\");\n             work_exit_po.recv();\n         };\n-        log(debug, ~\"sending teardown_loop msg..\");\n+        debug!(~\"sending teardown_loop msg..\");\n         exit(iotask);\n         exit_po.recv();\n-        log(debug, ~\"after recv on exit_po.. exiting..\");\n+        debug!(~\"after recv on exit_po.. exiting..\");\n     }\n }"}, {"sha": "ee0de9e48dbc1bf2cb5228473686ef4d6b07e77f", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -37,8 +37,7 @@ pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n         expr_to_str(cx, args[0],\n                     ~\"first argument to fmt! must be a string literal.\");\n     let fmtspan = args[0].span;\n-    debug!(\"Format string:\");\n-    log(debug, fmt);\n+    debug!(\"Format string: %s\", fmt);\n     fn parse_fmt_err_(cx: ext_ctxt, sp: span, msg: &str) -> ! {\n         cx.span_fatal(sp, msg);\n     }\n@@ -223,7 +222,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n     }\n     fn log_conv(c: Conv) {\n         match c.param {\n-          Some(p) => { log(debug, ~\"param: \" + p.to_str()); }\n+          Some(p) => { debug!(\"param: %s\", p.to_str()); }\n           _ => debug!(\"param: none\")\n         }\n         for c.flags.each |f| {\n@@ -236,18 +235,18 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n             }\n         }\n         match c.width {\n-          CountIs(i) => log(\n-              debug, ~\"width: count is \" + i.to_str()),\n-          CountIsParam(i) => log(\n-              debug, ~\"width: count is param \" + i.to_str()),\n+          CountIs(i) =>\n+              debug!(\"width: count is %s\", i.to_str()),\n+          CountIsParam(i) =>\n+              debug!(\"width: count is param %s\", i.to_str()),\n           CountIsNextParam => debug!(\"width: count is next param\"),\n           CountImplied => debug!(\"width: count is implied\")\n         }\n         match c.precision {\n-          CountIs(i) => log(\n-              debug, ~\"prec: count is \" + i.to_str()),\n-          CountIsParam(i) => log(\n-              debug, ~\"prec: count is param \" + i.to_str()),\n+          CountIs(i) =>\n+              debug!(\"prec: count is %s\", i.to_str()),\n+          CountIsParam(i) =>\n+              debug!(\"prec: count is param %s\", i.to_str()),\n           CountIsNextParam => debug!(\"prec: count is next param\"),\n           CountImplied => debug!(\"prec: count is implied\")\n         }"}, {"sha": "360cdebc6702b1434d98bcf31eda3095c0a6f99b", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -183,7 +183,7 @@ fn read_line_comments(rdr: @mut StringReader, code_to_the_left: bool,\n     let mut lines: ~[~str] = ~[];\n     while rdr.curr == '/' && nextch(rdr) == '/' {\n         let line = read_one_line_comment(rdr);\n-        log(debug, line);\n+        debug!(\"%s\", line);\n         if is_doc_comment(line) { // doc-comments are not put in comments\n             break;\n         }\n@@ -221,7 +221,7 @@ fn trim_whitespace_prefix_and_push_line(lines: &mut ~[~str],\n             s1 = str::slice(s, col, len);\n         } else { s1 = ~\"\"; }\n     } else { s1 = /*bad*/ copy s; }\n-    log(debug, ~\"pushing line: \" + s1);\n+    debug!(\"pushing line: %s\", s1);\n     lines.push(s1);\n }\n "}, {"sha": "7f46e4522999868e1cb979a7b35bb86b5d2aa1aa", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -472,7 +472,7 @@ pub impl Printer {\n     fn print(&mut self, x: token, L: int) {\n         debug!(\"print %s %d (remaining line space=%d)\", tok_str(x), L,\n                self.space);\n-        log(debug, buf_str(copy self.token,\n+        debug!(\"%s\", buf_str(copy self.token,\n                            copy self.size,\n                            self.left,\n                            self.right,"}, {"sha": "c637fcbaf50f43e3cdc9443bc67d8de79e4d381e", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -22,6 +22,6 @@ fn main() {\n \n     for uint::range(0u, n) |i| {\n         let x = uint::to_str(i);\n-        log(debug, x);\n+        debug!(x);\n     }\n }"}, {"sha": "133dd606b0e71d4181dc608e5b8b08095d5ef31c", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -181,7 +181,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n     let mut i = 0;\n     while vec::any(colors, is_gray) {\n         // Do the BFS.\n-        log(info, fmt!(\"PBFS iteration %?\", i));\n+        info!(\"PBFS iteration %?\", i);\n         i += 1;\n         colors = do colors.mapi() |i, c| {\n             let c : color = *c;\n@@ -257,7 +257,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n     let mut i = 0;\n     while par::any(colors, is_gray_factory) {\n         // Do the BFS.\n-        log(info, fmt!(\"PBFS iteration %?\", i));\n+        info!(\"PBFS iteration %?\", i);\n         i += 1;\n         let old_len = colors.len();\n \n@@ -320,7 +320,7 @@ fn validate(edges: ~[(node_id, node_id)],\n     // parent chains back to the root. While we do this, we also\n     // compute the levels for each node.\n \n-    log(info, ~\"Verifying tree structure...\");\n+    info!(~\"Verifying tree structure...\");\n \n     let mut status = true;\n     let level = do tree.map() |parent| {\n@@ -352,7 +352,7 @@ fn validate(edges: ~[(node_id, node_id)],\n     // 2. Each tree edge connects vertices whose BFS levels differ by\n     //    exactly one.\n \n-    log(info, ~\"Verifying tree edges...\");\n+    info!(~\"Verifying tree edges...\");\n \n     let status = do tree.alli() |k, parent| {\n         if *parent != root && *parent != -1i64 {\n@@ -368,7 +368,7 @@ fn validate(edges: ~[(node_id, node_id)],\n     // 3. Every edge in the input list has vertices with levels that\n     //    differ by at most one or that both are not in the BFS tree.\n \n-    log(info, ~\"Verifying graph edges...\");\n+    info!(~\"Verifying graph edges...\");\n \n     let status = do edges.all() |e| {\n         let (u, v) = *e;\n@@ -385,7 +385,7 @@ fn validate(edges: ~[(node_id, node_id)],\n     // 5. A node and its parent are joined by an edge of the original\n     //    graph.\n \n-    log(info, ~\"Verifying tree and graph edges...\");\n+    info!(~\"Verifying tree and graph edges...\");\n \n     let status = do par::alli(tree) {\n         let edges = copy edges;"}, {"sha": "73f2c81302c6f18bffb3f6b64522b83976aec8f7", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,6 +16,6 @@ fn my_fail() -> ! { fail!(); }\n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    log(debug, x); //~ ERROR unresolved name: `x`.\n+    debug!(x); //~ ERROR unresolved name: `x`.\n     let x: int;\n }"}, {"sha": "ba15abc3f896565672ed424590563f8fbba3344f", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,6 +11,6 @@\n // Check that bogus field access is non-fatal\n fn main() {\n     let x = 0;\n-    log(debug, x.foo); //~ ERROR attempted access of field\n-    log(debug, x.bar); //~ ERROR attempted access of field\n+    debug!(x.foo); //~ ERROR attempted access of field\n+    debug!(x.bar); //~ ERROR attempted access of field\n }"}, {"sha": "8178b46d1d3fc159094a1ff956ac3356f5eeffbf", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -22,11 +22,11 @@ fn main() {\n     let a: clam = clam{x: @1, y: @2};\n     let b: clam = clam{x: @10, y: @20};\n     let z: int = a.x + b.y;\n-    log(debug, z);\n+    debug!(z);\n     fail_unless!((z == 21));\n     let forty: fish = fish{a: @40};\n     let two: fish = fish{a: @2};\n     let answer: int = forty.a + two.a;\n-    log(debug, answer);\n+    debug!(answer);\n     fail_unless!((answer == 42));\n }"}, {"sha": "e35d5e79bde65ecfc6b401378ab565ddf6ee7aac", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:expected `~str` but found `int`\n \n const i: str = 10i;\n-fn main() { log(debug, i); }\n+fn main() { debug!(i); }"}, {"sha": "b4b10db93984758a0c980d4c77f3cbadc90b959e", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,6 +18,6 @@ fn compute1() -> float {\n \n fn main() {\n     let x = compute1();\n-    log(debug, x);\n+    debug!(x);\n     fail_unless!((x == -4f));\n }"}, {"sha": "bdde5144b04d14f8d21d36c48a50ee217d63415b", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -21,6 +21,6 @@ fn coerce(b: &fn()) -> extern fn() {\n \n fn main() {\n     let i = 8;\n-    let f = coerce(|| log(error, i) );\n+    let f = coerce(|| error!(i) );\n     f();\n }"}, {"sha": "d0b0f51d0cf7799386cc82a7e6075dee66c9e2a4", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let x: int = 3;\n     let y: &mut int = &mut x; //~ ERROR illegal borrow\n     *y = 5;\n-    log (debug, *y);\n+    debug!(*y);\n }"}, {"sha": "2767447d8193cf6d076c27e5b343772f1bf2e993", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     let x = foo(10);\n     let _y = copy x;\n     //~^ ERROR copying a value of non-copyable type `foo`\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "182a41c1b1735b2dfc7b7757e12e46b28dacffbd", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern: dead\n \n-fn f(caller: str) { log(debug, caller); }\n+fn f(caller: str) { debug!(caller); }\n \n fn main() { return f(\"main\"); debug!(\"Paul is dead\"); }\n "}, {"sha": "e822be759458f8ccb8024d8135382a42363bf399", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let a = if true { true };\n-    log(debug, a);\n+    debug!(a);\n }"}, {"sha": "3611dbb6866cbb0288e29b21e764f81f7caf2536", "filename": "src/test/compile-fail/index_message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex_message.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let z = ();\n-    log(debug, z[0]); //~ ERROR cannot index a value of type `()`\n+    debug!(z[0]); //~ ERROR cannot index a value of type `()`\n }"}, {"sha": "1d58a4229d3ebd935a53f0721567b19196a86dd7", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    log(error, x); //~ ERROR unresolved name: `x`.\n+    error!(x); //~ ERROR unresolved name: `x`.\n }"}, {"sha": "e2bbda7d65a99542b7ea2e87e66a4eca894a5177", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     for vec::each(fail!()) |i| {\n-        log (debug, i * 2);\n+        debug!(i * 2);\n         //~^ ERROR the type of this value must be known\n    };\n }"}, {"sha": "540089bd59dc3bfba52d94d0175d6a2b9d7bd84a", "filename": "src/test/compile-fail/issue-2370-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,5 +15,5 @@ struct cat {\n \n fn main() {\n     let kitty : cat = cat { x: () };\n-    log (error, *kitty);\n+    error!(*kitty);\n }"}, {"sha": "cd17cc2afaa0de2927a5e91c160d938e60bbf938", "filename": "src/test/compile-fail/issue-2370.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2370.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,5 +15,5 @@ struct cat {\n \n fn main() {\n     let nyan = cat { foo: () };\n-    log (error, *nyan);\n+    error!(*nyan);\n }"}, {"sha": "aec14e7b71919f68ade1f09812ecc9327faa7233", "filename": "src/test/compile-fail/issue-2467.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-2467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2467.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,6 +11,6 @@\n enum test { thing = 3u } //~ ERROR mismatched types\n //~^ ERROR expected signed integer constant\n fn main() {\n-    log(error, thing as int);\n+    error!(thing as int);\n     fail_unless!((thing as int == 3));\n }"}, {"sha": "4ed21bc30e1ce349ebed7d8af93d067d35b671ff", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,13 +19,13 @@ fn main()\n {\n \n     let _z = match g(1, 2) {\n-      g(x, x) => { log(debug, x + x); }\n+      g(x, x) => { debug!(x + x); }\n       //~^ ERROR Identifier x is bound more than once in the same pattern\n     };\n \n     let _z = match i(l(1, 2), m(3, 4)) {\n       i(l(x, _), m(_, x))  //~ ERROR Identifier x is bound more than once in the same pattern\n-        => { log(error, x + x); }\n+        => { error!(x + x); }\n     };\n \n     let _z = match (1, 2) {"}, {"sha": "39c14b4d316b0ce144f3276a33c0d6de32f275fb", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,5 +13,5 @@ fn main() {\n \n     const y: int = foo + 1; //~ ERROR: attempt to use a non-constant value in a constant\n \n-    log(error, y);\n+    error!(y);\n }"}, {"sha": "d070a9735e48b4fc24956228a0bc9b39402f14ce", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,5 +15,5 @@ fn main() {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }\n \n-    log(error, Bar);\n+    error!(Bar);\n }"}, {"sha": "8b009b91af96c1138b4faab7c6c7eea16879cd9b", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,10 +16,10 @@ fn f2(x: &fn()) { x(); }\n fn main() {\n     let i = 0;\n     let ctr: @fn() -> int = || { f2(|| i = i + 1 ); i };\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, i);\n+    error!(ctr());\n+    error!(ctr());\n+    error!(ctr());\n+    error!(ctr());\n+    error!(ctr());\n+    error!(i);\n }"}, {"sha": "ee5b3d89684189e13e5d737beab69fe03082f58b", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,10 +13,10 @@\n fn main() {\n     let i = 0;\n     let ctr: @fn() -> int = || { i = i + 1; i };\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, ctr());\n-    log(error, i);\n+    error!(ctr());\n+    error!(ctr());\n+    error!(ctr());\n+    error!(ctr());\n+    error!(ctr());\n+    error!(i);\n }"}, {"sha": "4fd2427799f76a1329080970b36e8fe2fa009b27", "filename": "src/test/compile-fail/liveness-and-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    log(debug, false && { i = 5; true });\n-    log(debug, i); //~ ERROR use of possibly uninitialized variable: `i`\n+    debug!(false && { i = 5; true });\n+    debug!(i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "496b0f7042f31650d91b9699b64f354e75a3d3d9", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,6 +12,6 @@\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n \n-fn bad_bang(i: uint) -> ! { log(debug, 3); }\n+fn bad_bang(i: uint) -> ! { debug!(3); }\n \n fn main() { bad_bang(5u); }"}, {"sha": "61610ca0ad102164fda6d61c092a54a8c3ad9421", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,6 +12,6 @@ fn force(f: &fn()) { f(); }\n fn main() {\n     let x: int;\n     force(|| {\n-        log(debug, x); //~ ERROR capture of possibly uninitialized variable: `x`\n+        debug!(x); //~ ERROR capture of possibly uninitialized variable: `x`\n     });\n }"}, {"sha": "c87439db6173a8c9547b5ae3d7f29c87c7f679ac", "filename": "src/test/compile-fail/liveness-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0; //~ WARNING unreachable statement\n     }\n \n-    log(debug, x); //~ ERROR use of possibly uninitialized variable: `x`\n+    debug!(x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { log(debug, foo()); }\n+fn main() { debug!(foo()); }"}, {"sha": "07075e4ef63989d3e1c55ef27925d355d8eefcc0", "filename": "src/test/compile-fail/liveness-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;  //~ WARNING unreachable statement\n     }\n \n-    log(debug, x); //~ ERROR use of possibly uninitialized variable: `x`\n+    debug!(x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { log(debug, foo()); }\n+fn main() { debug!(foo()); }"}, {"sha": "22d321ffc09186c7c82d527d50588da7e503a3fc", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn force(f: &fn() -> int) -> int { f() }\n-fn main() { log(debug, force(|| {})); } //~ ERROR mismatched types\n+fn main() { debug!(force(|| {})); } //~ ERROR mismatched types"}, {"sha": "e37ee5bd4d4f2a65391c61f72ce0f1c2c18d0bfd", "filename": "src/test/compile-fail/liveness-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { log(debug, x); }\n+fn foo(x: int) { debug!(x); }\n \n fn main() {\n \tlet x: int; if 1 > 2 { x = 10; }"}, {"sha": "6a436df6728e4dd8302513cca237b5200e803f1f", "filename": "src/test/compile-fail/liveness-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { log(debug, x); }\n+fn foo(x: int) { debug!(x); }\n \n fn main() {\n     let x: int;"}, {"sha": "b7a715d29583ae6ebc5531fe7e17eb868a32ef37", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,5 +13,5 @@ fn main() {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n-    log(error, f());\n+    error!(f());\n }"}, {"sha": "d1663bc356b18d84c5f9aba0b9447bb49a758813", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        log(debug, y);\n+        debug!(y);\n         loop {\n             loop {\n                 loop {"}, {"sha": "6b4147242d19bbcadd9296928fd041e5f140990c", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        log(debug, y);\n+        debug!(y);\n // tjc: not sure why it prints the same error twice\n         while true { while true { while true { x = y; copy x; } } }\n         //~^ ERROR use of moved value: `y`"}, {"sha": "2c1aadc8bbf16422fe856a3d5118dae6773ecf5a", "filename": "src/test/compile-fail/liveness-or-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    log(debug, false || { i = 5; true });\n-    log(debug, i); //~ ERROR use of possibly uninitialized variable: `i`\n+    debug!(false || { i = 5; true });\n+    debug!(i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "8797132fd508390090d104802a84d1d199e8f200", "filename": "src/test/compile-fail/liveness-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { log(debug, x); }\n+fn foo(x: int) { debug!(x); }\n \n fn main() {\n \tlet x: int;"}, {"sha": "b7401db2a551b7f59df73572d4aa386d202806b6", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let x = ~5;\n     let y = x;\n-    log(debug, *x); //~ ERROR use of moved value: `x`\n+    debug!(*x); //~ ERROR use of moved value: `x`\n     copy y;\n }"}, {"sha": "ab24b63af100a34b362ccbb27263a6c634f16dfc", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn send<T:Owned>(ch: _chan<T>, -data: T) {\n-    log(debug, ch);\n-    log(debug, data);\n+    debug!(ch);\n+    debug!(data);\n     fail!();\n }\n \n@@ -20,7 +20,7 @@ struct _chan<T>(int);\n // message after the send deinitializes it\n fn test00_start(ch: _chan<~int>, message: ~int, _count: ~int) {\n     send(ch, message);\n-    log(debug, message); //~ ERROR use of moved value: `message`\n+    debug!(message); //~ ERROR use of moved value: `message`\n }\n \n fn main() { fail!(); }"}, {"sha": "5e17b168d5555d08a6579457521ca235418041df", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -24,5 +24,5 @@ fn main() {\n \n     fail_unless!((*arc::get(&arc_v))[2] == 3);\n \n-    log(info, arc_v);\n+    info!(arc_v);\n }"}, {"sha": "90faec802a4219a597a5291f719c58117443fea0", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -22,5 +22,5 @@ fn main() {\n \n     fail_unless!((*arc::get(&arc_v))[2] == 3); //~ ERROR use of moved value: `arc_v`\n \n-    log(info, arc_v);\n+    info!(arc_v);\n }"}, {"sha": "192cde21bf16923210dc8741637358e5b2aad5cb", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -31,6 +31,6 @@ fn main() {\n \n     do task::spawn {\n         let y = x.take();   //~ ERROR value has non-owned type\n-        log(error, y);\n+        error!(y);\n     }\n }"}, {"sha": "77e62497d078b40f77f517ce1bbc230be185aa9f", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -39,5 +39,5 @@ fn foo(i:int) -> foo {\n fn main() {\n     let x = foo(10);\n     let _y = copy x; //~ ERROR copying a value of non-copyable type\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "999d96669ea5a704dcb722d5d75452346ff2e144", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,5 +15,5 @@ struct foo {\n }\n \n fn main() {\n-    log(debug, foo{ x: 1 } as int);\n+    debug!(foo{ x: 1 } as int);\n }"}, {"sha": "ce7b505cf09df6cf6761c96e5acfc3c688d8c745", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:literal out of range\n \n-fn main() { log(debug, 300u8); }\n+fn main() { debug!(300u8); }"}, {"sha": "506c71f493ae32a781f23f322842435ee2d7b8bf", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,7 +18,7 @@ enum bar { t1((), Option<~[int]>), t2, }\n fn foo(t: bar) {\n     match t {\n       t1(_, Some::<int>(x)) => {\n-        log(debug, x);\n+        debug!(x);\n       }\n       _ => { fail!(); }\n     }"}, {"sha": "5df65832099f55b31d9883988e66eb31fa1b8856", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -31,7 +31,7 @@ fn main() {\n         // Can't do this copy\n         let x = ~~~A {y: r(i)};\n         let _z = copy x; //~ ERROR copying a value of non-copyable type\n-        log(debug, x);\n+        debug!(x);\n     }\n-    log(error, *i);\n+    error!(*i);\n }"}, {"sha": "847f85feb72f3fc73fab3d332a3561c5c0bf6314", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,5 +14,5 @@ fn test(f: @fn(uint) -> uint) -> uint {\n \n fn main() {\n     let f: ~fn(x: uint) -> uint = |x| 4u;\n-    log(debug, test(f)); //~ ERROR expected @ closure, found ~ closure\n+    debug!(test(f)); //~ ERROR expected @ closure, found ~ closure\n }"}, {"sha": "a08f03d5628ca6488371f1560cd2703f51d92d61", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,5 +19,5 @@ impl Drop for r {\n fn main() {\n     let i = ~r { b: true };\n     let _j = copy i; //~ ERROR copying a value of non-copyable type\n-    log(debug, i);\n+    debug!(i);\n }"}, {"sha": "3f4636328b66115881af1565c5641fbc12170479", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -29,6 +29,6 @@ fn main() {\n     f(copy r1, copy r2);\n     //~^ ERROR copying a value of non-copyable type\n     //~^^ ERROR copying a value of non-copyable type\n-    log(debug, (r2, *i1));\n-    log(debug, (r1, *i2));\n+    debug!((r2, *i1));\n+    debug!((r1, *i2));\n }"}, {"sha": "f1fbc5b009e0a98a7f64d67c1f468bafdd56455d", "filename": "src/test/compile-fail/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,5 +12,5 @@\n fn main() {\n   loop{}\n              // red herring to make sure compilation fails\n-  log(error, 42 == 'c');\n+  error!(42 == 'c');\n }"}, {"sha": "3af012a6c3fcfb7e7c7713bc33e047941ea01826", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:unsupported cast\n \n fn main() {\n-  log(debug, 1.0 as *libc::FILE); // Can't cast float to foreign.\n+  debug!(1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "b6d478aa3ec2010037e266a4ce2591ab14b7199a", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,7 +13,7 @@\n \n fn f() {\n     let v = ~[1i];\n-    log(debug, v.some_field_name); //type error\n+    debug!(v.some_field_name); //type error\n }\n \n fn main() { }"}, {"sha": "938e8c41e793f400a6a548f9b372ca85caea95d1", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     let i = ~[r(0)];\n     let j = ~[r(1)];\n     let k = i + j;\n-    log(debug, j);\n+    debug!(j);\n }"}, {"sha": "8aead798d5d6a7470cc4788d96745b971e2169fc", "filename": "src/test/run-fail/alt-wildcards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-wildcards.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,4 +17,4 @@ fn cmp() -> int {\n     }\n }\n \n-fn main() { log(error, cmp()); }\n+fn main() { error!(cmp()); }"}, {"sha": "2668570e6fb5df3ec057bb1f296e8881203f4713", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); fail!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(~\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "2668570e6fb5df3ec057bb1f296e8881203f4713", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); fail!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(~\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "f1a26df924b8b680b9bf26afd529135e6b0bdef3", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:woe\n-fn f(a: int) { log(debug, a); }\n+fn f(a: int) { debug!(a); }\n \n fn main() { f(fail!(~\"woe\")); }"}, {"sha": "a3831a10874c33fb4f616c246511b540642f74a1", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,7 +17,7 @@ pure fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        log(debug, x);\n+        debug!(x);\n     } else {\n         fail!(~\"Number is odd\");\n     }"}, {"sha": "92063e76c3471dfdf3fc1b39be603c2bbb87471c", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); fail!(~\"quux\"); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(~\"quux\"); }\n fn main() { if my_err(~\"bye\") { } }"}, {"sha": "1e4e7685e270c918797857688bfe01ff3d472def", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:get called on error result: ~\"kitty\"\n fn main() {\n-  log(error, result::get(&result::Err::<int,~str>(~\"kitty\")));\n+  error!(result::get(&result::Err::<int,~str>(~\"kitty\")));\n }"}, {"sha": "f6e9602470f331653a5b64c9d82b4263dbafb299", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:whatever\n \n fn main() {\n-    log(error, ~\"whatever\");\n+    error!(~\"whatever\");\n     // Setting the exit status only works when the scheduler terminates\n     // normally. In this case we're going to fail, so instead of of\n     // returning 50 the process will return the typical rt failure code."}, {"sha": "bf33b10cc61085353b9987b2014a116414016457", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -30,7 +30,7 @@ fn r(x:int) -> r {\n }\n \n fn main() {\n-    log(error, ~\"whatever\");\n+    error!(~\"whatever\");\n     do task::spawn {\n       let i = r(5);\n     };"}, {"sha": "2cff4ff09dfb83c985dd277b55e7f0f81400600a", "filename": "src/test/run-fail/rt-set-exit-status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:whatever\n \n fn main() {\n-    log(error, ~\"whatever\");\n+    error!(~\"whatever\");\n     // 101 is the code the runtime uses on task failure and the value\n     // compiletest expects run-fail tests to return.\n     os::set_exit_status(101);"}, {"sha": "87df00fcce58736421c9d5096bc574777fef5561", "filename": "src/test/run-fail/small-negative-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fsmall-negative-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Fsmall-negative-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fsmall-negative-indexing.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,5 +12,5 @@\n fn main() {\n     let v = vec::from_fn(1024u, {|n| n});\n     // this should trip a bounds check\n-    log(error, v[-1i8]);\n+    error!(v[-1i8]);\n }"}, {"sha": "04514b13455fbeb61be8c49ccf2f4e3f22b8b852", "filename": "src/test/run-fail/too-much-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,6 +13,6 @@\n // Test that the task fails after hiting the recursion limit\n \n fn main() {\n-    log(debug, ~\"don't optimize me out\");\n+    debug!(~\"don't optimize me out\");\n     main();\n }"}, {"sha": "4ab74b485ab747c6b3a75e9ea3e9c6815c06d66e", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,8 +17,8 @@ fn failfn() {\n fn main() {\n     let y = ~0;\n     let x: @~fn() = @(|| {\n-        log(error, copy y);\n+        error!(copy y);\n     });\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "c62e13e77d7b2f7b2c5179a2d97eab03dba4e231", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,8 +17,8 @@ fn failfn() {\n fn main() {\n     let y = ~0;\n     let x: @@fn() = @|| {\n-        log(error, copy y);\n+        error!(copy y);\n     };\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "e576faa16ea815f42989d64aa0689d43e0cd74e4", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -39,6 +39,6 @@ fn main() {\n         cast::forget(i1);\n         let x = @r(i1p);\n         failfn();\n-        log(error, x);\n+        error!(x);\n     }\n }"}, {"sha": "213220164f1028c797737e1abb5e6c493a25be5b", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,5 +17,5 @@ fn failfn() {\n fn main() {\n     let x = @~\"hi\";\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "5c8edb910089b4927294e2b2459b76d440734bd9", "filename": "src/test/run-fail/unwind-box-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -25,5 +25,5 @@ impl i for ~int {\n fn main() {\n     let x = @~0 as @i;\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "12b00f0c14b9fb8750467b27afa9994f70a31a52", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,5 +17,5 @@ fn failfn() {\n fn main() {\n     let x = @~~0;\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "edc6ab9d984c79ca5368fe07d9f7f189f5cd03bb", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,5 +17,5 @@ fn failfn() {\n fn main() {\n     let x = @~0;\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "0a579a8dbbfb25bad2ad6a031baa9e7cee46d724", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,5 +17,5 @@ fn failfn() {\n fn main() {\n     let x = @~[0, 1, 2, 3, 4, 5];\n     failfn();\n-    log(error, x);\n+    error!(x);\n }"}, {"sha": "78892a1e4b849d5d29c2fa7f49b1f43f24a0e7c3", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,5 +12,5 @@\n pub fn main() {\n     let i: int =\n         match Some::<int>(3) { None::<int> => { fail!() } Some::<int>(_) => { 5 } };\n-    log(debug, i);\n+    debug!(\"%?\", i);\n }"}, {"sha": "131869a0c4ef4d0135784619e10087aff06afe11", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,12 +19,12 @@ fn foo(s: @int) {\n \n     match x {\n       make_t(y) => {\n-        log(debug, y); // ref up then down\n+        debug!(\"%?\", y); // ref up then down\n \n       }\n       _ => { debug!(\"?\"); fail!(); }\n     }\n-    log(debug, ::core::sys::refcount(s));\n+    debug!(::core::sys::refcount(s));\n     fail_unless!((::core::sys::refcount(s) == count + 1u));\n     let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n }\n@@ -36,7 +36,7 @@ pub fn main() {\n \n     foo(s); // ref up then down\n \n-    log(debug, ::core::sys::refcount(s));\n+    debug!(\"%u\", ::core::sys::refcount(s));\n     let count2 = ::core::sys::refcount(s);\n     let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n     fail_unless!(count == count2);"}, {"sha": "8051a14dac8759fdd74333ee889a212ad6a409fa", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -21,9 +21,9 @@ enum color {\n fn process(c: color) -> int {\n     let mut x: int;\n     match c {\n-      rgb(r, _, _) => { debug!(\"rgb\"); log(debug, r); x = r; }\n-      rgba(_, _, _, a) => { debug!(\"rgba\"); log(debug, a); x = a; }\n-      hsl(_, s, _) => { debug!(\"hsl\"); log(debug, s); x = s; }\n+      rgb(r, _, _) => { x = r; }\n+      rgba(_, _, _, a) => { x = a; }\n+      hsl(_, s, _) => { x = s; }\n     }\n     return x;\n }"}, {"sha": "ad4d87fb87c80e6513351cafc98a72e483288331", "filename": "src/test/run-pass/alt-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Falt-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-with-ret-arm.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,5 +17,5 @@ pub fn main() {\n         Some(num) => num as u32\n     };\n     fail_unless!(f == 1234u32);\n-    log(error, f)\n+    error!(f)\n }"}, {"sha": "adfc1033d972be2b112ea108a2cd009b80a87e02", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,6 +12,6 @@\n \n pub fn main() {\n     let a: int = 10;\n-    log(debug, a);\n+    debug!(a);\n     fail_unless!((a * (a - 1) == 90));\n }"}, {"sha": "1b98cf4dc5c399e85a9f02609dc0736713e12591", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -28,6 +28,6 @@ pub fn main() {\n     fail_unless!((i32_b << 1 == i32_b << 1));\n     fail_unless!((i32_b >> 1 == i32_b >> 1));\n     fail_unless!((i32_b & i32_b << 1 == 0));\n-    log(debug, i32_b | i32_b << 1);\n+    debug!(i32_b | i32_b << 1);\n     fail_unless!((i32_b | i32_b << 1 == 0x30303030));\n }"}, {"sha": "973f1dedea22ad2fd14e8e3eed755f4a997fd8dc", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,6 +19,6 @@ struct Triple { x: int, y: int, z: int }\n fn f<T:Copy,U:Copy>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    log(debug, f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n-    log(debug, f(5, 6).a);\n+    debug!(\"%?\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n+    debug!(\"%?\", f(5, 6).a);\n }"}, {"sha": "ec324bcf33bccf79040e555a753db3f92d05ccf6", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -26,8 +26,8 @@ fn general() {\n     a ^= b;\n     b ^= a;\n     a = a ^ b;\n-    log(debug, a);\n-    log(debug, b);\n+    debug!(a);\n+    debug!(b);\n     fail_unless!((b == 1));\n     fail_unless!((a == 2));\n     fail_unless!((!0xf0 & 0xff == 0xf));"}, {"sha": "fa8687e839ca2d4846ced8d7f8b58eddeb33f2d8", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n \n     // Statement form does not require parentheses:\n     for vec::each(v) |i| {\n-        log(info, *i);\n+        info!(\"%?\", *i);\n     }\n \n     // Usable at all:"}, {"sha": "ff65d963000fd9ef90dd8165f0e58a88da96d612", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     fn as_buf<T>(s: ~str, f: &fn(~str) -> T) -> T { f(s) }\n-    as_buf(~\"foo\", |foo: ~str| -> () log(error, foo) );\n+    as_buf(~\"foo\", |foo: ~str| -> () error!(foo) );\n }"}, {"sha": "e60563827795bfdf9319393d5739d97436bb883d", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,12 +16,10 @@ pub fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7];\n     let mut odds = 0;\n     iter_vec(v, |i| {\n-        log(error, i);\n         if *i % 2 == 1 {\n             odds += 1;\n         }\n-        log(error, odds);\n     });\n-    log(error, odds);\n+    error!(odds);\n     fail_unless!((odds == 4));\n }"}, {"sha": "9e9eef6499289c410cfed3e14d72427662fbfb18", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,10 +17,9 @@ pub fn main() {\n     let mut sum = 0;\n     iter_vec(copy v, |i| {\n         iter_vec(copy v, |j| {\n-            log(error, *i * *j);\n             sum += *i * *j;\n         });\n     });\n-    log(error, sum);\n+    error!(sum);\n     fail_unless!((sum == 225));\n }"}, {"sha": "58e09409fc545dbb1167380611c786c9faf244b9", "filename": "src/test/run-pass/block-vec-map2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,6 +15,6 @@ pub fn main() {\n         vec::map2(~[1, 2, 3, 4, 5],\n                   ~[true, false, false, true, true],\n                   |i, b| if *b { -(*i) } else { *i } );\n-    log(error, copy v);\n+    error!(copy v);\n     fail_unless!((v == ~[-1, 2, 3, -4, -5]));\n }"}, {"sha": "601bae85d4fc2b8f2a46ac75a255543132dfc705", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let t = task::spawn(|| child(&ch) );\n     let y = p.recv();\n     error!(\"received\");\n-    log(error, y);\n+    error!(y);\n     fail_unless!((y == 10));\n }\n "}, {"sha": "733e8466154fa619cc9a1747657b47fe9e9932c5", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -37,7 +37,7 @@ fn foo(x: int) -> int {\n \n pub fn main() {\n     let x: int = 2 + 2;\n-    log(debug, x);\n+    debug!(\"%?\", x);\n     debug!(\"hello, world\");\n-    log(debug, 10);\n+    debug!(\"%?\", 10);\n }"}, {"sha": "e935a2cd434d9ba77b386e62e46dc18d58f17231", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,4 +12,4 @@\n \n const i: int = 10;\n \n-pub fn main() { log(debug, i); }\n+pub fn main() { debug!(\"%i\", i); }"}, {"sha": "6841c4d7f631b8152b17135c31bbf3c432f2da4f", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let x = @mut 5; *x = 1000; log(debug, *x); }\n+pub fn main() { let x = @mut 5; *x = 1000; debug!(\"%?\", *x); }"}, {"sha": "869ea6007c2a19f670002209ca17a96b076765fb", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,8 +14,8 @@ pub fn main() {\n     let v = &\"hello\";\n     let mut y : &str = &\"there\";\n \n-    log(debug, x);\n-    log(debug, y);\n+    debug!(x);\n+    debug!(y);\n \n     fail_unless!(x[0] == 'h' as u8);\n     fail_unless!(x[4] == 'o' as u8);\n@@ -30,29 +30,29 @@ pub fn main() {\n     let c = &\"cccc\";\n     let cc = &\"ccccc\";\n \n-    log(debug, a);\n+    debug!(a);\n \n     fail_unless!(a < b);\n     fail_unless!(a <= b);\n     fail_unless!(a != b);\n     fail_unless!(b >= a);\n     fail_unless!(b > a);\n \n-    log(debug, b);\n+    debug!(b);\n \n     fail_unless!(a < c);\n     fail_unless!(a <= c);\n     fail_unless!(a != c);\n     fail_unless!(c >= a);\n     fail_unless!(c > a);\n \n-    log(debug, c);\n+    debug!(c);\n \n     fail_unless!(c < cc);\n     fail_unless!(c <= cc);\n     fail_unless!(c != cc);\n     fail_unless!(cc >= c);\n     fail_unless!(cc > c);\n \n-    log(debug, cc);\n+    debug!(cc);\n }"}, {"sha": "0d14670a6db117cfc878b2b270f0937cce16992d", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,15 +20,15 @@ pub fn main() {\n     let c : &[int] = &[2,2,2,2,3];\n     let cc : &[int] = &[2,2,2,2,2,2];\n \n-    log(debug, a);\n+    debug!(a);\n \n     fail_unless!(a < b);\n     fail_unless!(a <= b);\n     fail_unless!(a != b);\n     fail_unless!(b >= a);\n     fail_unless!(b > a);\n \n-    log(debug, b);\n+    debug!(b);\n \n     fail_unless!(b < c);\n     fail_unless!(b <= c);\n@@ -42,13 +42,13 @@ pub fn main() {\n     fail_unless!(c >= a);\n     fail_unless!(c > a);\n \n-    log(debug, c);\n+    debug!(c);\n \n     fail_unless!(a < cc);\n     fail_unless!(a <= cc);\n     fail_unless!(a != cc);\n     fail_unless!(cc >= a);\n     fail_unless!(cc > a);\n \n-    log(debug, cc);\n+    debug!(cc);\n }"}, {"sha": "6aca1b994d9408e76a7bdad47fd4e285c36fa4bf", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -21,8 +21,8 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool {\n-        log(debug, *b1);\n-        log(debug, *b2);\n+        debug!(*b1);\n+        debug!(*b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(@true, compare_box);"}, {"sha": "b186d99a6dfe46350151f003344a14b3f125e3c4", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,8 +20,8 @@ fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n-        log(debug, *b1);\n-        log(debug, *b2);\n+        debug!(*b1);\n+        debug!(*b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(~true, compare_box);"}, {"sha": "958e2e1e79e8a915cedeb46e695c094aace7b67a", "filename": "src/test/run-pass/fact.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffact.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,7 +15,7 @@\n fn f(x: int) -> int {\n     // debug!(\"in f:\");\n \n-    log(debug, x);\n+    debug!(x);\n     if x == 1 {\n         // debug!(\"bottoming out\");\n \n@@ -26,7 +26,7 @@ fn f(x: int) -> int {\n         let y: int = x * f(x - 1);\n         // debug!(\"returned\");\n \n-        log(debug, y);\n+        debug!(y);\n         return y;\n     }\n }"}, {"sha": "4b8b552bfaed30f1e3b7ff1377b957d834cb3c45", "filename": "src/test/run-pass/fat-arrow-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffat-arrow-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffat-arrow-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-arrow-alt.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,7 +17,7 @@ enum color {\n }\n \n pub fn main() {\n-    log(error, match red {\n+    error!(match red {\n         red => { 1 }\n         green => { 2 }\n         blue => { 3 }"}, {"sha": "7d4c3db242da7ffeceb54d1837176e9d99234577", "filename": "src/test/run-pass/float-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-signature.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,5 +14,5 @@ pub fn main() {\n     fn foo(n: float) -> float { return n + 0.12345; }\n     let n: float = 0.1;\n     let m: float = foo(n);\n-    log(debug, m);\n+    debug!(m);\n }"}, {"sha": "1c2d7f42264a54e47b33aa9a79ffccd3393f1f5e", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let pi = 3.1415927;\n-    log(debug, -pi * (pi + 2.0 / pi) - pi * 5.0);\n+    debug!(-pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n         debug!(\"yes\");"}, {"sha": "dfee55571243d593efdfa7b7d83ca97a04ad6140", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -21,8 +21,8 @@ pub fn main() {\n     let mut j: int = 0;\n     do pairs() |p| {\n         let (_0, _1) = p;\n-        log(debug, _0);\n-        log(debug, _1);\n+        debug!(_0);\n+        debug!(_1);\n         fail_unless!((_0 + 10 == i));\n         i += 1;\n         j = _1;"}, {"sha": "7e07232c32f25baa64b106b06e73b721395d0138", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,9 +14,9 @@\n // -*- rust -*-\n pub fn main() {\n     let mut sum: int = 0;\n-    do first_ten |i| { debug!(\"main\"); log(debug, i); sum = sum + i; }\n+    do first_ten |i| { debug!(\"main\"); debug!(i); sum = sum + i; }\n     debug!(\"sum\");\n-    log(debug, sum);\n+    debug!(sum);\n     fail_unless!((sum == 45));\n }\n "}, {"sha": "3da699640aca4c0c4bd36a49fccc7ebe97c622bc", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,6 +15,6 @@ fn id<T:Copy>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = @100;\n     let actual = id::<@int>(expected);\n-    log(debug, *actual);\n+    debug!(*actual);\n     fail_unless!((*expected == *actual));\n }"}, {"sha": "7e0b32d8e8f659c86164e22ea0d27e278528968e", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,6 +15,6 @@ fn id<T:Copy + Owned>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = ~100;\n     let actual = id::<~int>(copy expected);\n-    log(debug, *actual);\n+    debug!(*actual);\n     fail_unless!((*expected == *actual));\n }"}, {"sha": "e58fd884da6c0c26ab157047f4ce4b822a7399ac", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -22,8 +22,8 @@ fn f<T:Copy>(t: T) -> Pair<T> {\n \n pub fn main() {\n     let b = f::<int>(10);\n-    log(debug, b.a);\n-    log(debug, b.b);\n+    debug!(b.a);\n+    debug!(b.b);\n     fail_unless!((b.a == 10));\n     fail_unless!((b.b == 10));\n }"}, {"sha": "85d8198049f1d5c65cc35a65efd2f44f2454252c", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,4 +12,4 @@\n \n fn f<T>(x: @T) -> @T { return x; }\n \n-pub fn main() { let x = f(@3); log(debug, *x); }\n+pub fn main() { let x = f(@3); debug!(*x); }"}, {"sha": "9892c935658e250f9d7a86df11346a78ac5c0105", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,4 +11,4 @@\n \n fn f<T:Copy>(x: ~T) -> ~T { return x; }\n \n-pub fn main() { let x = f(~3); log(debug, *x); }\n+pub fn main() { let x = f(~3); debug!(*x); }"}, {"sha": "4c0248c488f9ef6c6d76272352c9b175f62e115b", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -24,14 +24,14 @@ pub fn main() {\n     let p: Triple = Triple {x: 65, y: 66, z: 67};\n     let mut q: Triple = Triple {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n-    log(debug, y);\n+    debug!(y);\n     fail_unless!((x == y));\n     b = id::<char>(a);\n-    log(debug, b);\n+    debug!(b);\n     fail_unless!((a == b));\n     q = id::<Triple>(p);\n     x = p.z;\n     y = q.z;\n-    log(debug, y);\n+    debug!(y);\n     fail_unless!((x == y));\n }"}, {"sha": "30738ee33fdfb9f8e7a148228b6f4702c8124d9b", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,12 +18,12 @@ struct Pair { x: int, y: int }\n \n pub fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    match nop { some::<int>(n) => { log(debug, n); fail_unless!((n == 5)); } }\n+    match nop { some::<int>(n) => { debug!(n); fail_unless!((n == 5)); } }\n     let nop2: noption<Pair> = some(Pair{x: 17, y: 42});\n     match nop2 {\n       some(t) => {\n-        log(debug, t.x);\n-        log(debug, t.y);\n+        debug!(t.x);\n+        debug!(t.y);\n         fail_unless!((t.x == 17));\n         fail_unless!((t.y == 42));\n       }"}, {"sha": "ce419ff002f9cb05d3280a8578446fd04ce9362d", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,7 +12,7 @@\n \n fn mk() -> int { return 1; }\n \n-fn chk(a: int) { log(debug, a); fail_unless!((a == 1)); }\n+fn chk(a: int) { debug!(a); fail_unless!((a == 1)); }\n \n fn apply<T>(produce: extern fn() -> T,\n             consume: extern fn(T)) {"}, {"sha": "e80bc8da7174f0c49ef80083c897b5f6d6cc507c", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,7 +11,7 @@\n fn get_third<T:Copy>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n-    log(debug, get_third((1, 2, 3)));\n+    debug!(get_third((1, 2, 3)));\n     fail_unless!((get_third((1, 2, 3)) == 3));\n     fail_unless!((get_third((5u8, 6u8, 7u8)) == 7u8));\n }"}, {"sha": "92546412120731b506c02dd0a528e3cbee2a9cd7", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -57,7 +57,7 @@ mod map_reduce {\n                 ctrl.send(find_reducer(str::to_bytes(key), cc));\n                 error!(\"receiving\");\n                 c = pp.recv();\n-                log(error, c);\n+                error!(c);\n                 im.insert(key, c);\n               }\n             }"}, {"sha": "8f00b16ccd9f57e677e28c125fd4e174b6591aac", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,5 +12,5 @@\n \n pub fn main() {\n     let i: int = if false { fail!() } else { 5 };\n-    log(debug, i);\n+    debug!(i);\n }"}, {"sha": "3ee0808fa95a47d4912302b9c40c2bc410ff88d2", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ pure fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        log(debug, x);\n+        debug!(x);\n     } else {\n         fail!();\n     }"}, {"sha": "659b7b5be6f6547d3577c2f5b4d3f4b2b78b24e3", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,9 +10,9 @@\n \n pub fn main() {\n     use core::vec::from_fn;\n-    log(debug, ::core::vec::len(from_fn(2, |i| i)));\n+    debug!(::core::vec::len(from_fn(2, |i| i)));\n     {\n         use core::vec::*;\n-        log(debug, len(~[2]));\n+        debug!(len(~[2]));\n     }\n }"}, {"sha": "317082b1d820d7dd62d105b3760662db4becfcab", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n mod foo {\n-    pub fn x(y: int) { log(debug, y); }\n+    pub fn x(y: int) { debug!(y); }\n }\n \n mod bar {"}, {"sha": "869e61d0d4cd0a3be704da0090235451e3b3a2b4", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,7 +15,7 @@ use foo::x;\n use z = foo::x;\n \n mod foo {\n-    pub fn x(y: int) { log(debug, y); }\n+    pub fn x(y: int) { debug!(y); }\n }\n \n pub fn main() { x(10); z(10); }"}, {"sha": "711e4e9cdf41f3035f162d6000c0ca002852d623", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,11 +20,11 @@ pub fn main() {\n     fail_unless!((v[3i8] == 3));\n     fail_unless!((v[3u32] == 3));\n     fail_unless!((v[3i32] == 3));\n-    log(debug, v[3u8]);\n+    debug!(v[3u8]);\n     fail_unless!((s[3u] == 'd' as u8));\n     fail_unless!((s[3u8] == 'd' as u8));\n     fail_unless!((s[3i8] == 'd' as u8));\n     fail_unless!((s[3u32] == 'd' as u8));\n     fail_unless!((s[3i32] == 'd' as u8));\n-    log(debug, s[3u8]);\n+    debug!(s[3u8]);\n }"}, {"sha": "8697e5c8c3cf61c6e4008d9b8e13cf0606271daf", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,5 +16,5 @@ use std::oldmap::HashMap;\n pub fn main() {\n     let m = HashMap();\n     m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n-    log(error, m);\n+    error!(m);\n }"}, {"sha": "acd30de9e87867ffc1721f910f1e923be3a55c15", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -301,16 +301,16 @@ pub mod pingpong {\n \n fn client(-chan: pingpong::client::ping) {\n     let chan = pingpong::client::do_ping(chan);\n-    log(error, ~\"Sent ping\");\n+    error!(~\"Sent ping\");\n     let (_chan, _data) = pingpong::client::do_pong(chan);\n-    log(error, ~\"Received pong\");\n+    error!(~\"Received pong\");\n }\n \n fn server(-chan: pingpong::server::ping) {\n     let (chan, _data) = pingpong::server::do_ping(chan);\n-    log(error, ~\"Received ping\");\n+    error!(~\"Received ping\");\n     let _chan = pingpong::server::do_pong(chan);\n-    log(error, ~\"Sent pong\");\n+    error!(~\"Sent pong\");\n }\n \n pub fn main() {"}, {"sha": "6af1075544ecc8df94e410c559a888591464622b", "filename": "src/test/run-pass/issue-3109.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3109.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    log(error, (\"hi there!\", \"you\"));\n+    error!((\"hi there!\", \"you\"));\n }"}, {"sha": "35c46609f8fd33c984b0b8c707bedfa3e6952141", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,7 +10,7 @@\n \n fn test_stack_assign() {\n     let s: ~str = ~\"a\";\n-    log(debug, copy s);\n+    debug!(copy s);\n     let t: ~str = ~\"a\";\n     fail_unless!((s == t));\n     let u: ~str = ~\"b\";\n@@ -27,7 +27,7 @@ fn test_heap_assign() {\n     fail_unless!((s != u));\n }\n \n-fn test_heap_log() { let s = ~\"a big ol' string\"; log(debug, s); }\n+fn test_heap_log() { let s = ~\"a big ol' string\"; debug!(s); }\n \n fn test_stack_add() {\n     fail_unless!((~\"a\" + ~\"b\" == ~\"ab\"));\n@@ -49,7 +49,7 @@ fn test_append() {\n \n     let mut s = ~\"a\";\n     s += ~\"b\";\n-    log(debug, copy s);\n+    debug!(copy s);\n     fail_unless!((s == ~\"ab\"));\n \n     let mut s = ~\"c\";"}, {"sha": "983f47e8ab7ec16114d28edf8c74671be1b2036f", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,5 +19,5 @@ fn range(a: int, b: int, it: &fn(int)) {\n pub fn main() {\n     let mut sum: int = 0;\n     range(0, 100, |x| sum += x );\n-    log(debug, sum);\n+    debug!(sum);\n }"}, {"sha": "3f94600ea17d36a13af947e9f01b2b85958ac1c8", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,6 +16,6 @@ struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let f: @fn() = || log(error, e.n);\n+    let f: @fn() = || error!(e.n);\n     e.refs += ~[1];\n }"}, {"sha": "e19503240f024977fbd60ace033139df77e13362", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,6 +12,6 @@\n fn force(f: @fn()) { f() }\n pub fn main() {\n     let x = 7;\n-    let _f: @fn() = || log(error, x);\n-    force(|| log(error, x));\n+    let _f: @fn() = || error!(x);\n+    force(|| error!(x));\n }"}, {"sha": "e05d483f48640457d271168aa867913a83c9cbeb", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     fn invoke(f: @fn()) { f(); }\n     let k = ~22;\n     let _u = A {a: copy k};\n-    invoke(|| log(error, copy k) )\n+    invoke(|| error!(copy k) )\n }"}, {"sha": "e16229eec53d4df000060c111b21a6d0242272a2", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let x = 1 == 2 || 3 == 3;\n     fail_unless!((x));\n     let mut y: int = 10;\n-    log(debug, x || incr(&mut y));\n+    debug!(x || incr(&mut y));\n     fail_unless!((y == 10));\n     if true && x { fail_unless!((true)); } else { fail_unless!((false)); }\n }"}, {"sha": "37208bf145ba0b66534d2ad50bd699e890fc987c", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn foo(x: int) { log(debug, x); }\n+fn foo(x: int) { debug!(x); }\n \n pub fn main() { let mut x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "1d8662de7c2a7a797ce39b754d7865660db5833f", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,8 +13,8 @@\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let mut y = 0;\n-    for x.each |i| { log(debug, *i); y += *i; }\n-    log(debug, y);\n+    for x.each |i| { debug!(*i); y += *i; }\n+    debug!(y);\n     fail_unless!((y == 6));\n     let s = ~\"hello there\";\n     let mut i: int = 0;\n@@ -27,8 +27,8 @@ pub fn main() {\n         // ...\n \n         i += 1;\n-        log(debug, i);\n-        log(debug, c);\n+        debug!(i);\n+        debug!(c);\n     }\n     fail_unless!((i == 11));\n }"}, {"sha": "31c0c98fa962d2289b6454dbea9edc17ff80b15a", "filename": "src/test/run-pass/log-err-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-err-phi.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { if false { log(error, ~\"foo\" + ~\"bar\"); } }\n+pub fn main() { if false { error!(~\"foo\" + ~\"bar\"); } }"}, {"sha": "919c53e033066372b546c7f0ac8fc0903f668769", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -26,7 +26,7 @@ fn mk<T>() -> @mut Smallintmap<T> {\n \n fn f<T,U>() {\n     let mut sim = mk::<U>();\n-    log(error, sim);\n+    error!(sim);\n }\n \n pub fn main() {"}, {"sha": "b0ea375228f4b4d8d78bd6ab2c90782852a914c4", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n   let mut i = 0u;\n   loop {\n-    log(error, ~\"a\");\n+    error!(~\"a\");\n     i += 1u;\n     if i == 10u {\n       break;\n@@ -23,7 +23,7 @@ pub fn main() {\n     if i == 21u {\n         break;\n     }\n-    log(error, ~\"b\");\n+    error!(~\"b\");\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n@@ -33,7 +33,7 @@ pub fn main() {\n   }\n   fail_unless!(!is_even);\n   loop {\n-    log(error, ~\"c\");\n+    error!(~\"c\");\n     if i == 22u {\n         break;\n     }"}, {"sha": "155046bccccc67f9322c2bb914e72ccee8836b80", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,7 +20,7 @@ fn len(v: ~[const int]) -> uint {\n \n pub fn main() {\n     let v0 = ~[1, 2, 3, 4, 5];\n-    log(debug, len(v0));\n+    debug!(len(v0));\n     let mut v1 = ~[1, 2, 3, 4, 5];\n-    log(debug, len(v1));\n+    debug!(len(v1));\n }"}, {"sha": "e08bd5f85a96596d5eb2a2434f2e7808b8600644", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -21,6 +21,6 @@ pub fn main() {\n     grow(&mut v);\n     grow(&mut v);\n     let len = vec::len::<int>(v);\n-    log(debug, len);\n+    debug!(len);\n     fail_unless!((len == 3 as uint));\n }"}, {"sha": "dfbd583f16e06cb0a2b05540395637fb31772f38", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ fn foo() {\n       Some::<int>(x) => {\n         let mut bar;\n         match None::<int> { None::<int> => { bar = 5; } _ => { baz(); } }\n-        log(debug, bar);\n+        debug!(bar);\n       }\n       None::<int> => { debug!(\"hello\"); }\n     }"}, {"sha": "98bec28e398a2871542025abf1e1661bd5743c3e", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -15,15 +15,15 @@\n pub fn main() {\n     let mut x: int = 1;\n     x *= 2;\n-    log(debug, x);\n+    debug!(x);\n     fail_unless!((x == 2));\n     x += 3;\n-    log(debug, x);\n+    debug!(x);\n     fail_unless!((x == 5));\n     x *= x;\n-    log(debug, x);\n+    debug!(x);\n     fail_unless!((x == 25));\n     x /= 5;\n-    log(debug, x);\n+    debug!(x);\n     fail_unless!((x == 5));\n }"}, {"sha": "5f7ae2f755c631780cdad5295c74fdb0ff1d6582", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;\n-        log(debug, b);\n+        debug!(b);\n     }\n }"}, {"sha": "0ac899d5e3158335da137adc16937f5bcb1cfaca", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,6 +12,6 @@\n \n \n // -*- rust -*-\n-fn dont_call_me() { fail!(); log(debug, 1); }\n+fn dont_call_me() { fail!(); debug!(1); }\n \n pub fn main() { }"}, {"sha": "c3ab589b66cf79ce46f82b2404e40eb580ed2149", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn magic(+x: A) { log(debug, x); }\n-fn magic2(+x: @int) { log(debug, x); }\n+fn magic(+x: A) { debug!(x); }\n+fn magic2(+x: @int) { debug!(x); }\n \n struct A { a: @int }\n "}, {"sha": "266f657de96e4538955b09b35703f37562e56d79", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -95,18 +95,18 @@ mod test {\n         use pingpong::client;\n \n         let chan = client::ping(chan); return;\n-        log(error, \"Sent ping\");\n+        error!(\"Sent ping\");\n         let pong(_chan) = recv(chan);\n-        log(error, \"Received pong\");\n+        error!(\"Received pong\");\n     }\n     \n     pub fn server(-chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(chan); return;\n-        log(error, \"Received ping\");\n+        error!(\"Received ping\");\n         let _chan = server::pong(chan);\n-        log(error, \"Sent pong\");\n+        error!(\"Sent pong\");\n     }\n }\n "}, {"sha": "98af23738b7d7d5dee32ac9c00ff0e3ae696dc10", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -33,18 +33,18 @@ mod test {\n         use pingpong::client;\n \n         let chan = client::ping(chan);\n-        log(error, ~\"Sent ping\");\n+        error!(~\"Sent ping\");\n         let pong(_chan) = recv(chan);\n-        log(error, ~\"Received pong\");\n+        error!(~\"Received pong\");\n     }\n     \n     pub fn server(-chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(chan);\n-        log(error, ~\"Received ping\");\n+        error!(~\"Received ping\");\n         let _chan = server::pong(chan);\n-        log(error, ~\"Sent pong\");\n+        error!(~\"Sent pong\");\n     }\n }\n "}, {"sha": "5e4830b0bbdc332fb406efc43d722c3069742638", "filename": "src/test/run-pass/platform_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplatform_thread.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n \n fn run(i: int) {\n \n-    log(debug, i);\n+    debug!(i);\n \n     if i == 0 {\n         return;"}, {"sha": "ce9b3b78a9cdaf7aab9e9879bef2552db3f783e7", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,5 +11,5 @@\n \n fn something(f: &pure fn()) { f(); }\n pub fn main() {\n-    something(|| log(error, \"hi!\") );\n+    something(|| error!(\"hi!\") );\n }"}, {"sha": "fbbec638dd4dcd85ada397954e5f7769ddf17483", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,6 +19,6 @@ struct X { foo: ~str, bar: ~str }\n \n pub fn main() {\n     let x = X {foo: ~\"hello\", bar: ~\"world\"};\n-    log(debug, copy x.foo);\n-    log(debug, copy x.bar);\n+    debug!(copy x.foo);\n+    debug!(copy x.bar);\n }"}, {"sha": "38e0ac021391c7d6161eae53ba7b643a7ea60e1b", "filename": "src/test/run-pass/regions-addr-of-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,6 +14,6 @@ fn f(x : &a/int) -> &a/int {\n \n pub fn main() {\n     let three = &3;\n-    log(error, fmt!(\"%d\", *f(three)));\n+    error!(fmt!(\"%d\", *f(three)));\n }\n "}, {"sha": "6b5634fbd5000fd440ce45e95f231c169177264b", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -22,7 +22,7 @@ impl<'self> get_chowder<'self> for Clam<'self> {\n \n pub fn main() {\n     let clam = Clam { chowder: &3 };\n-    log(debug, *clam.get_chowder());\n+    debug!(*clam.get_chowder());\n     clam.get_chowder();\n }\n "}, {"sha": "e71dbb0054bcc9ee28557c8c29e4a038b89ae28c", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -19,6 +19,6 @@ pub fn main() {\n     match y {\n         int_wrapper_ctor(zz) => { z = zz; }\n     }\n-    log(debug, *z);\n+    debug!(*z);\n }\n "}, {"sha": "f7a50e6b114a3b2cdbc353ca8472bd5d818034bd", "filename": "src/test/run-pass/regions-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-simple.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,7 +12,7 @@ pub fn main() {\n     let mut x: int = 3;\n     let y: &mut int = &mut x;\n     *y = 5;\n-    log (debug, *y);\n+    debug!(*y);\n }\n \n "}, {"sha": "df084c134277f6598ae6091dcd6430e6a35f4acb", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n         let a = r(i);\n         let b = (a, 10);\n         let (c, _d) = b;\n-        log(debug, c);\n+        debug!(c);\n     }\n     fail_unless!(*i == 1);\n }"}, {"sha": "074415375dc1265a52d81f6990b83092f2c8246e", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,7 +14,7 @@ struct shrinky_pointer {\n \n impl Drop for shrinky_pointer {\n     fn finalize(&self) {\n-        log(error, ~\"Hello!\"); **(self.i) -= 1;\n+        error!(~\"Hello!\"); **(self.i) -= 1;\n     }\n }\n \n@@ -31,6 +31,6 @@ fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n pub fn main() {\n     let my_total = @@mut 10;\n     { let pt = shrinky_pointer(my_total); fail_unless!((pt.look_at() == 10)); }\n-    log(error, fmt!(\"my_total = %d\", **my_total));\n+    error!(\"my_total = %d\", **my_total);\n     fail_unless!((**my_total == 9));\n }"}, {"sha": "881294c4f334201ffee8affe9acc77b340684e97", "filename": "src/test/run-pass/ret-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fret-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fret-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-bang.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn my_err(s: ~str) -> ! { log(error, s); fail!(); }\n+fn my_err(s: ~str) -> ! { error!(s); fail!(); }\n \n fn okay(i: uint) -> int {\n     if i == 3u { my_err(~\"I don't like three\"); } else { return 42; }"}, {"sha": "6322d24ffd9136127f011d71d0fdde377a7e2d37", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,12 +20,12 @@ fn make_generic_record<A:Copy,B:Copy>(a: A, b: B) -> Pair<A,B> {\n \n fn test05_start(f: &~fn(v: float, v: ~str) -> Pair<float, ~str>) {\n     let p = (*f)(22.22f, ~\"Hi\");\n-    log(debug, copy p);\n+    debug!(copy p);\n     fail_unless!(p.a == 22.22f);\n     fail_unless!(p.b == ~\"Hi\");\n \n     let q = (*f)(44.44f, ~\"Ho\");\n-    log(debug, copy q);\n+    debug!(copy q);\n     fail_unless!(q.a == 44.44f);\n     fail_unless!(q.b == ~\"Ho\");\n }"}, {"sha": "a4d88e7f25b3437919e09f03702a1f1ee01ceb3b", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,7 +17,7 @@ fn test05_start(&&f: ~fn(int)) {\n fn test05() {\n     let three = ~3;\n     let fn_to_send: ~fn(int) = |n| {\n-        log(error, *three + n); // will copy x into the closure\n+        error!(*three + n); // will copy x into the closure\n         fail_unless!((*three == 3));\n     };\n     task::spawn(|| {"}, {"sha": "716138a30ed36f3edc76af98012ea243c1f8c0ad", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,7 +17,7 @@ fn foo(c: ~[int]) {\n     match none::<int> {\n       some::<int>(_) => {\n         for c.each |i| {\n-            log(debug, a);\n+            debug!(a);\n             let a = 17;\n             b += ~[a];\n         }"}, {"sha": "25ac00d174f346f228cb51037ede6b24680287cf", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -39,6 +39,6 @@ pub fn main() {\n     let p_: Path_ = Path_ { global: true, idents: ~[~\"hi\"], types: ~[t] };\n     let p: path = Spanned { data: p_, span: sp };\n     let x = X { sp: sp, path: p };\n-    log(error, copy x.path);\n-    log(error, copy x);\n+    error!(copy x.path);\n+    error!(copy x);\n }"}, {"sha": "e7115a41179ee3afa6e6a9e1a997a6e87fb64cc4", "filename": "src/test/run-pass/simple-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-infer.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let mut n; n = 1; log(debug, n); }\n+pub fn main() { let mut n; n = 1; debug!(n); }"}, {"sha": "5bc7e18bdd844b4fc04c6fae28a20f488e28d317", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ enum clam<T> { a(T, int), b, }\n \n fn uhoh<T>(v: ~[clam<T>]) {\n     match v[1] {\n-      a::<T>(ref t, ref u) => { debug!(\"incorrect\"); log(debug, u); fail!(); }\n+      a::<T>(ref t, ref u) => { debug!(\"incorrect\"); debug!(u); fail!(); }\n       b::<T> => { debug!(\"correct\"); }\n     }\n }"}, {"sha": "37501a61066d37513f56406d49ccab555ccb5a2b", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,8 +11,8 @@\n \n \n fn x(s: ~str, n: int) {\n-    log(debug, s);\n-    log(debug, n);\n+    debug!(s);\n+    debug!(n);\n }\n \n pub fn main() {"}, {"sha": "4da560b8b92eda1890212467c62ba27685454224", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     task::spawn(|| child(10) );\n }\n \n-fn child(&&i: int) { log(error, i); fail_unless!((i == 10)); }\n+fn child(&&i: int) { error!(i); fail_unless!((i == 10)); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "6bd3af73dd0cd8be9f8203fc76d25f42bf5ef7f1", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,15 +13,15 @@ pub fn main() { task::spawn(|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n \n fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n-    log(error, i1);\n-    log(error, i2);\n-    log(error, i3);\n-    log(error, i4);\n-    log(error, i5);\n-    log(error, i6);\n-    log(error, i7);\n-    log(error, i8);\n-    log(error, i9);\n+    error!(i1);\n+    error!(i2);\n+    error!(i3);\n+    error!(i4);\n+    error!(i5);\n+    error!(i6);\n+    error!(i7);\n+    error!(i8);\n+    error!(i9);\n     fail_unless!((i1 == 10));\n     fail_unless!((i2 == 20));\n     fail_unless!((i3 == 30));"}, {"sha": "230af83d1e1569e92c0e578b1cc470b47967f0b9", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ extern mod std;\n fn test1() {\n     let mut s: ~str = ~\"hello\";\n     s += ~\"world\";\n-    log(debug, copy s);\n+    debug!(copy s);\n     fail_unless!((s[9] == 'd' as u8));\n }\n \n@@ -26,8 +26,8 @@ fn test2() {\n     let ff: ~str = ~\"abc\";\n     let a: ~str = ff + ~\"ABC\" + ff;\n     let b: ~str = ~\"ABC\" + ff + ~\"ABC\";\n-    log(debug, copy a);\n-    log(debug, copy b);\n+    debug!(copy a);\n+    debug!(copy b);\n     fail_unless!((a == ~\"abcABCabc\"));\n     fail_unless!((b == ~\"ABCabcABC\"));\n }"}, {"sha": "a91f5034f6be66c32d826fd4c17cd01b02e32407", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n     let a: ~str = ~\"hello\";\n     let b: ~str = ~\"world\";\n     let s: ~str = a + b;\n-    log(debug, copy s);\n+    debug!(copy s);\n     fail_unless!((s[9] == 'd' as u8));\n }"}, {"sha": "a2146d8770a3488b77f6c135b8938d51717658c9", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     let s = ~\"hello\";\n     let c: u8 = s[4];\n-    log(debug, c);\n+    debug!(c);\n     fail_unless!((c == 0x6f as u8));\n }"}, {"sha": "a1243d33062d44baba9b12ce406cc721e39511cb", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let mut i = 20;\n     let mut expected_len = 1u;\n     while i > 0 {\n-        log(error, str::len(a));\n+        error!(str::len(a));\n         fail_unless!((str::len(a) == expected_len));\n         a = a + a; // FIXME(#3387)---can't write a += a\n         i -= 1;"}, {"sha": "791f493b5ccc98b50e2c0dd2fcd4bc0182c432e9", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 232, "deletions": 232, "changes": 464, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,251 +10,251 @@\n \n pub fn main() {\n   let f = 1 as *libc::FILE;\n-  log(debug, f as int);\n-  log(debug, f as uint);\n-  log(debug, f as i8);\n-  log(debug, f as i16);\n-  log(debug, f as i32);\n-  log(debug, f as i64);\n-  log(debug, f as u8);\n-  log(debug, f as u16);\n-  log(debug, f as u32);\n-  log(debug, f as u64);\n+  debug!(f as int);\n+  debug!(f as uint);\n+  debug!(f as i8);\n+  debug!(f as i16);\n+  debug!(f as i32);\n+  debug!(f as i64);\n+  debug!(f as u8);\n+  debug!(f as u16);\n+  debug!(f as u32);\n+  debug!(f as u64);\n \n-  log(debug, 1 as int);\n-  log(debug, 1 as uint);\n-  log(debug, 1 as float);\n-  log(debug, 1 as bool);\n-  log(debug, 1 as *libc::FILE);\n-  log(debug, 1 as i8);\n-  log(debug, 1 as i16);\n-  log(debug, 1 as i32);\n-  log(debug, 1 as i64);\n-  log(debug, 1 as u8);\n-  log(debug, 1 as u16);\n-  log(debug, 1 as u32);\n-  log(debug, 1 as u64);\n-  log(debug, 1 as f32);\n-  log(debug, 1 as f64);\n+  debug!(1 as int);\n+  debug!(1 as uint);\n+  debug!(1 as float);\n+  debug!(1 as bool);\n+  debug!(1 as *libc::FILE);\n+  debug!(1 as i8);\n+  debug!(1 as i16);\n+  debug!(1 as i32);\n+  debug!(1 as i64);\n+  debug!(1 as u8);\n+  debug!(1 as u16);\n+  debug!(1 as u32);\n+  debug!(1 as u64);\n+  debug!(1 as f32);\n+  debug!(1 as f64);\n \n-  log(debug, 1u as int);\n-  log(debug, 1u as uint);\n-  log(debug, 1u as float);\n-  log(debug, 1u as bool);\n-  log(debug, 1u as *libc::FILE);\n-  log(debug, 1u as i8);\n-  log(debug, 1u as i16);\n-  log(debug, 1u as i32);\n-  log(debug, 1u as i64);\n-  log(debug, 1u as u8);\n-  log(debug, 1u as u16);\n-  log(debug, 1u as u32);\n-  log(debug, 1u as u64);\n-  log(debug, 1u as f32);\n-  log(debug, 1u as f64);\n+  debug!(1u as int);\n+  debug!(1u as uint);\n+  debug!(1u as float);\n+  debug!(1u as bool);\n+  debug!(1u as *libc::FILE);\n+  debug!(1u as i8);\n+  debug!(1u as i16);\n+  debug!(1u as i32);\n+  debug!(1u as i64);\n+  debug!(1u as u8);\n+  debug!(1u as u16);\n+  debug!(1u as u32);\n+  debug!(1u as u64);\n+  debug!(1u as f32);\n+  debug!(1u as f64);\n \n-  log(debug, 1i8 as int);\n-  log(debug, 1i8 as uint);\n-  log(debug, 1i8 as float);\n-  log(debug, 1i8 as bool);\n-  log(debug, 1i8 as *libc::FILE);\n-  log(debug, 1i8 as i8);\n-  log(debug, 1i8 as i16);\n-  log(debug, 1i8 as i32);\n-  log(debug, 1i8 as i64);\n-  log(debug, 1i8 as u8);\n-  log(debug, 1i8 as u16);\n-  log(debug, 1i8 as u32);\n-  log(debug, 1i8 as u64);\n-  log(debug, 1i8 as f32);\n-  log(debug, 1i8 as f64);\n+  debug!(1i8 as int);\n+  debug!(1i8 as uint);\n+  debug!(1i8 as float);\n+  debug!(1i8 as bool);\n+  debug!(1i8 as *libc::FILE);\n+  debug!(1i8 as i8);\n+  debug!(1i8 as i16);\n+  debug!(1i8 as i32);\n+  debug!(1i8 as i64);\n+  debug!(1i8 as u8);\n+  debug!(1i8 as u16);\n+  debug!(1i8 as u32);\n+  debug!(1i8 as u64);\n+  debug!(1i8 as f32);\n+  debug!(1i8 as f64);\n \n-  log(debug, 1u8 as int);\n-  log(debug, 1u8 as uint);\n-  log(debug, 1u8 as float);\n-  log(debug, 1u8 as bool);\n-  log(debug, 1u8 as *libc::FILE);\n-  log(debug, 1u8 as i8);\n-  log(debug, 1u8 as i16);\n-  log(debug, 1u8 as i32);\n-  log(debug, 1u8 as i64);\n-  log(debug, 1u8 as u8);\n-  log(debug, 1u8 as u16);\n-  log(debug, 1u8 as u32);\n-  log(debug, 1u8 as u64);\n-  log(debug, 1u8 as f32);\n-  log(debug, 1u8 as f64);\n+  debug!(1u8 as int);\n+  debug!(1u8 as uint);\n+  debug!(1u8 as float);\n+  debug!(1u8 as bool);\n+  debug!(1u8 as *libc::FILE);\n+  debug!(1u8 as i8);\n+  debug!(1u8 as i16);\n+  debug!(1u8 as i32);\n+  debug!(1u8 as i64);\n+  debug!(1u8 as u8);\n+  debug!(1u8 as u16);\n+  debug!(1u8 as u32);\n+  debug!(1u8 as u64);\n+  debug!(1u8 as f32);\n+  debug!(1u8 as f64);\n \n-  log(debug, 1i16 as int);\n-  log(debug, 1i16 as uint);\n-  log(debug, 1i16 as float);\n-  log(debug, 1i16 as bool);\n-  log(debug, 1i16 as *libc::FILE);\n-  log(debug, 1i16 as i8);\n-  log(debug, 1i16 as i16);\n-  log(debug, 1i16 as i32);\n-  log(debug, 1i16 as i64);\n-  log(debug, 1i16 as u8);\n-  log(debug, 1i16 as u16);\n-  log(debug, 1i16 as u32);\n-  log(debug, 1i16 as u64);\n-  log(debug, 1i16 as f32);\n-  log(debug, 1i16 as f64);\n+  debug!(1i16 as int);\n+  debug!(1i16 as uint);\n+  debug!(1i16 as float);\n+  debug!(1i16 as bool);\n+  debug!(1i16 as *libc::FILE);\n+  debug!(1i16 as i8);\n+  debug!(1i16 as i16);\n+  debug!(1i16 as i32);\n+  debug!(1i16 as i64);\n+  debug!(1i16 as u8);\n+  debug!(1i16 as u16);\n+  debug!(1i16 as u32);\n+  debug!(1i16 as u64);\n+  debug!(1i16 as f32);\n+  debug!(1i16 as f64);\n \n-  log(debug, 1u16 as int);\n-  log(debug, 1u16 as uint);\n-  log(debug, 1u16 as float);\n-  log(debug, 1u16 as bool);\n-  log(debug, 1u16 as *libc::FILE);\n-  log(debug, 1u16 as i8);\n-  log(debug, 1u16 as i16);\n-  log(debug, 1u16 as i32);\n-  log(debug, 1u16 as i64);\n-  log(debug, 1u16 as u8);\n-  log(debug, 1u16 as u16);\n-  log(debug, 1u16 as u32);\n-  log(debug, 1u16 as u64);\n-  log(debug, 1u16 as f32);\n-  log(debug, 1u16 as f64);\n+  debug!(1u16 as int);\n+  debug!(1u16 as uint);\n+  debug!(1u16 as float);\n+  debug!(1u16 as bool);\n+  debug!(1u16 as *libc::FILE);\n+  debug!(1u16 as i8);\n+  debug!(1u16 as i16);\n+  debug!(1u16 as i32);\n+  debug!(1u16 as i64);\n+  debug!(1u16 as u8);\n+  debug!(1u16 as u16);\n+  debug!(1u16 as u32);\n+  debug!(1u16 as u64);\n+  debug!(1u16 as f32);\n+  debug!(1u16 as f64);\n \n-  log(debug, 1i32 as int);\n-  log(debug, 1i32 as uint);\n-  log(debug, 1i32 as float);\n-  log(debug, 1i32 as bool);\n-  log(debug, 1i32 as *libc::FILE);\n-  log(debug, 1i32 as i8);\n-  log(debug, 1i32 as i16);\n-  log(debug, 1i32 as i32);\n-  log(debug, 1i32 as i64);\n-  log(debug, 1i32 as u8);\n-  log(debug, 1i32 as u16);\n-  log(debug, 1i32 as u32);\n-  log(debug, 1i32 as u64);\n-  log(debug, 1i32 as f32);\n-  log(debug, 1i32 as f64);\n+  debug!(1i32 as int);\n+  debug!(1i32 as uint);\n+  debug!(1i32 as float);\n+  debug!(1i32 as bool);\n+  debug!(1i32 as *libc::FILE);\n+  debug!(1i32 as i8);\n+  debug!(1i32 as i16);\n+  debug!(1i32 as i32);\n+  debug!(1i32 as i64);\n+  debug!(1i32 as u8);\n+  debug!(1i32 as u16);\n+  debug!(1i32 as u32);\n+  debug!(1i32 as u64);\n+  debug!(1i32 as f32);\n+  debug!(1i32 as f64);\n \n-  log(debug, 1u32 as int);\n-  log(debug, 1u32 as uint);\n-  log(debug, 1u32 as float);\n-  log(debug, 1u32 as bool);\n-  log(debug, 1u32 as *libc::FILE);\n-  log(debug, 1u32 as i8);\n-  log(debug, 1u32 as i16);\n-  log(debug, 1u32 as i32);\n-  log(debug, 1u32 as i64);\n-  log(debug, 1u32 as u8);\n-  log(debug, 1u32 as u16);\n-  log(debug, 1u32 as u32);\n-  log(debug, 1u32 as u64);\n-  log(debug, 1u32 as f32);\n-  log(debug, 1u32 as f64);\n+  debug!(1u32 as int);\n+  debug!(1u32 as uint);\n+  debug!(1u32 as float);\n+  debug!(1u32 as bool);\n+  debug!(1u32 as *libc::FILE);\n+  debug!(1u32 as i8);\n+  debug!(1u32 as i16);\n+  debug!(1u32 as i32);\n+  debug!(1u32 as i64);\n+  debug!(1u32 as u8);\n+  debug!(1u32 as u16);\n+  debug!(1u32 as u32);\n+  debug!(1u32 as u64);\n+  debug!(1u32 as f32);\n+  debug!(1u32 as f64);\n \n-  log(debug, 1i64 as int);\n-  log(debug, 1i64 as uint);\n-  log(debug, 1i64 as float);\n-  log(debug, 1i64 as bool);\n-  log(debug, 1i64 as *libc::FILE);\n-  log(debug, 1i64 as i8);\n-  log(debug, 1i64 as i16);\n-  log(debug, 1i64 as i32);\n-  log(debug, 1i64 as i64);\n-  log(debug, 1i64 as u8);\n-  log(debug, 1i64 as u16);\n-  log(debug, 1i64 as u32);\n-  log(debug, 1i64 as u64);\n-  log(debug, 1i64 as f32);\n-  log(debug, 1i64 as f64);\n+  debug!(1i64 as int);\n+  debug!(1i64 as uint);\n+  debug!(1i64 as float);\n+  debug!(1i64 as bool);\n+  debug!(1i64 as *libc::FILE);\n+  debug!(1i64 as i8);\n+  debug!(1i64 as i16);\n+  debug!(1i64 as i32);\n+  debug!(1i64 as i64);\n+  debug!(1i64 as u8);\n+  debug!(1i64 as u16);\n+  debug!(1i64 as u32);\n+  debug!(1i64 as u64);\n+  debug!(1i64 as f32);\n+  debug!(1i64 as f64);\n \n-  log(debug, 1u64 as int);\n-  log(debug, 1u64 as uint);\n-  log(debug, 1u64 as float);\n-  log(debug, 1u64 as bool);\n-  log(debug, 1u64 as *libc::FILE);\n-  log(debug, 1u64 as i8);\n-  log(debug, 1u64 as i16);\n-  log(debug, 1u64 as i32);\n-  log(debug, 1u64 as i64);\n-  log(debug, 1u64 as u8);\n-  log(debug, 1u64 as u16);\n-  log(debug, 1u64 as u32);\n-  log(debug, 1u64 as u64);\n-  log(debug, 1u64 as f32);\n-  log(debug, 1u64 as f64);\n+  debug!(1u64 as int);\n+  debug!(1u64 as uint);\n+  debug!(1u64 as float);\n+  debug!(1u64 as bool);\n+  debug!(1u64 as *libc::FILE);\n+  debug!(1u64 as i8);\n+  debug!(1u64 as i16);\n+  debug!(1u64 as i32);\n+  debug!(1u64 as i64);\n+  debug!(1u64 as u8);\n+  debug!(1u64 as u16);\n+  debug!(1u64 as u32);\n+  debug!(1u64 as u64);\n+  debug!(1u64 as f32);\n+  debug!(1u64 as f64);\n \n-  log(debug, 1u64 as int);\n-  log(debug, 1u64 as uint);\n-  log(debug, 1u64 as float);\n-  log(debug, 1u64 as bool);\n-  log(debug, 1u64 as *libc::FILE);\n-  log(debug, 1u64 as i8);\n-  log(debug, 1u64 as i16);\n-  log(debug, 1u64 as i32);\n-  log(debug, 1u64 as i64);\n-  log(debug, 1u64 as u8);\n-  log(debug, 1u64 as u16);\n-  log(debug, 1u64 as u32);\n-  log(debug, 1u64 as u64);\n-  log(debug, 1u64 as f32);\n-  log(debug, 1u64 as f64);\n+  debug!(1u64 as int);\n+  debug!(1u64 as uint);\n+  debug!(1u64 as float);\n+  debug!(1u64 as bool);\n+  debug!(1u64 as *libc::FILE);\n+  debug!(1u64 as i8);\n+  debug!(1u64 as i16);\n+  debug!(1u64 as i32);\n+  debug!(1u64 as i64);\n+  debug!(1u64 as u8);\n+  debug!(1u64 as u16);\n+  debug!(1u64 as u32);\n+  debug!(1u64 as u64);\n+  debug!(1u64 as f32);\n+  debug!(1u64 as f64);\n \n-  log(debug, true as int);\n-  log(debug, true as uint);\n-  log(debug, true as float);\n-  log(debug, true as bool);\n-  log(debug, true as *libc::FILE);\n-  log(debug, true as i8);\n-  log(debug, true as i16);\n-  log(debug, true as i32);\n-  log(debug, true as i64);\n-  log(debug, true as u8);\n-  log(debug, true as u16);\n-  log(debug, true as u32);\n-  log(debug, true as u64);\n-  log(debug, true as f32);\n-  log(debug, true as f64);\n+  debug!(true as int);\n+  debug!(true as uint);\n+  debug!(true as float);\n+  debug!(true as bool);\n+  debug!(true as *libc::FILE);\n+  debug!(true as i8);\n+  debug!(true as i16);\n+  debug!(true as i32);\n+  debug!(true as i64);\n+  debug!(true as u8);\n+  debug!(true as u16);\n+  debug!(true as u32);\n+  debug!(true as u64);\n+  debug!(true as f32);\n+  debug!(true as f64);\n \n-  log(debug, 1. as int);\n-  log(debug, 1. as uint);\n-  log(debug, 1. as float);\n-  log(debug, 1. as bool);\n-  log(debug, 1. as i8);\n-  log(debug, 1. as i16);\n-  log(debug, 1. as i32);\n-  log(debug, 1. as i64);\n-  log(debug, 1. as u8);\n-  log(debug, 1. as u16);\n-  log(debug, 1. as u32);\n-  log(debug, 1. as u64);\n-  log(debug, 1. as f32);\n-  log(debug, 1. as f64);\n+  debug!(1. as int);\n+  debug!(1. as uint);\n+  debug!(1. as float);\n+  debug!(1. as bool);\n+  debug!(1. as i8);\n+  debug!(1. as i16);\n+  debug!(1. as i32);\n+  debug!(1. as i64);\n+  debug!(1. as u8);\n+  debug!(1. as u16);\n+  debug!(1. as u32);\n+  debug!(1. as u64);\n+  debug!(1. as f32);\n+  debug!(1. as f64);\n \n-  log(debug, 1f32 as int);\n-  log(debug, 1f32 as uint);\n-  log(debug, 1f32 as float);\n-  log(debug, 1f32 as bool);\n-  log(debug, 1f32 as i8);\n-  log(debug, 1f32 as i16);\n-  log(debug, 1f32 as i32);\n-  log(debug, 1f32 as i64);\n-  log(debug, 1f32 as u8);\n-  log(debug, 1f32 as u16);\n-  log(debug, 1f32 as u32);\n-  log(debug, 1f32 as u64);\n-  log(debug, 1f32 as f32);\n-  log(debug, 1f32 as f64);\n+  debug!(1f32 as int);\n+  debug!(1f32 as uint);\n+  debug!(1f32 as float);\n+  debug!(1f32 as bool);\n+  debug!(1f32 as i8);\n+  debug!(1f32 as i16);\n+  debug!(1f32 as i32);\n+  debug!(1f32 as i64);\n+  debug!(1f32 as u8);\n+  debug!(1f32 as u16);\n+  debug!(1f32 as u32);\n+  debug!(1f32 as u64);\n+  debug!(1f32 as f32);\n+  debug!(1f32 as f64);\n \n-  log(debug, 1f64 as int);\n-  log(debug, 1f64 as uint);\n-  log(debug, 1f64 as float);\n-  log(debug, 1f64 as bool);\n-  log(debug, 1f64 as i8);\n-  log(debug, 1f64 as i16);\n-  log(debug, 1f64 as i32);\n-  log(debug, 1f64 as i64);\n-  log(debug, 1f64 as u8);\n-  log(debug, 1f64 as u16);\n-  log(debug, 1f64 as u32);\n-  log(debug, 1f64 as u64);\n-  log(debug, 1f64 as f32);\n-  log(debug, 1f64 as f64);\n+  debug!(1f64 as int);\n+  debug!(1f64 as uint);\n+  debug!(1f64 as float);\n+  debug!(1f64 as bool);\n+  debug!(1f64 as i8);\n+  debug!(1f64 as i16);\n+  debug!(1f64 as i32);\n+  debug!(1f64 as i64);\n+  debug!(1f64 as u8);\n+  debug!(1f64 as u16);\n+  debug!(1f64 as u32);\n+  debug!(1f64 as u64);\n+  debug!(1f64 as f32);\n+  debug!(1f64 as f64);\n }"}, {"sha": "1336009eca876964306e3736fbcec976b48452e4", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,8 +11,8 @@\n extern mod std;\n \n fn test(actual: ~str, expected: ~str) {\n-    log(debug, copy actual);\n-    log(debug, copy expected);\n+    debug!(copy actual);\n+    debug!(copy expected);\n     fail_unless!((actual == expected));\n }\n "}, {"sha": "0f3131e39679da5fd4aafd4209a3730fed91b03e", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,12 +18,12 @@ pub fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n fn evenk(n: int, k: extern fn(bool) -> bool) -> bool {\n     debug!(\"evenk\");\n-    log(debug, n);\n+    debug!(n);\n     if n == 0 { return k(true); } else { return oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: extern fn(bool) -> bool) -> bool {\n     debug!(\"oddk\");\n-    log(debug, n);\n+    debug!(n);\n     if n == 0 { return k(false); } else { return evenk(n - 1, k); }\n }"}, {"sha": "6a93df01395374ad15b136c6570e3eb3b01f3345", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -31,10 +31,10 @@ fn test05() {\n     let (po, ch) = comm::stream();\n     task::spawn(|| test05_start(ch) );\n     let mut value = po.recv();\n-    log(error, value);\n+    error!(value);\n     value = po.recv();\n-    log(error, value);\n+    error!(value);\n     value = po.recv();\n-    log(error, value);\n+    error!(value);\n     fail_unless!((value == 30));\n }"}, {"sha": "3fd55a7310edc3b7be1485746dd25ab644847cb7", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,10 +20,10 @@ fn start(c: &comm::Chan<comm::Chan<~str>>) {\n     let mut b;\n     a = p.recv();\n     fail_unless!(a == ~\"A\");\n-    log(error, a);\n+    error!(a);\n     b = p.recv();\n     fail_unless!(b == ~\"B\");\n-    log(error, b);\n+    error!(b);\n }\n \n pub fn main() {"}, {"sha": "4f0eb7c101f55d7df36e4a26b5a7a2b7328c1a61", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;\n     while (i > 0) {\n-        log(debug, i);\n+        debug!(i);\n         let (p, ch) = comm::stream();\n         po.add(p);\n         task::spawn({let i = i; || child(i, &ch)});\n@@ -28,7 +28,7 @@ pub fn main() {\n \n     i = 10;\n     while (i > 0) {\n-        log(debug, i);\n+        debug!(i);\n         po.recv();\n         i = i - 1;\n     }\n@@ -37,6 +37,6 @@ pub fn main() {\n }\n \n fn child(x: int, ch: &comm::Chan<int>) {\n-    log(debug, x);\n+    debug!(x);\n     ch.send(x);\n }"}, {"sha": "8c8f38f5e12e7fa16c1bece6aee82f1639e79102", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -64,7 +64,7 @@ fn test00() {\n     for results.each |r| { r.recv(); }\n \n     debug!(\"Completed: Final number is: \");\n-    log(error, sum);\n+    error!(sum);\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     fail_unless!((sum == 480));"}, {"sha": "11191ba965824c27124b37d1c29ad16e8b19e1ec", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,31 +20,31 @@ fn test00() {\n     c.send(4);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     c.send(5);\n     c.send(6);\n     c.send(7);\n     c.send(8);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     r = p.recv();\n     sum += r;\n-    log(debug, r);\n+    debug!(r);\n     fail_unless!((sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8));\n }"}, {"sha": "57e07221c3df5da1bc28cc7acf6227187839ebb7", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -35,7 +35,7 @@ fn test00() {\n     let mut i: int = 0;\n     while i < number_of_messages {\n         sum += p.recv();\n-        log(debug, r);\n+        debug!(r);\n         i += 1;\n     }\n "}, {"sha": "f736ded3db2a5ebc47265913c5d30f5d3f9aaee4", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,5 +18,5 @@ pub fn main() {\n     debug!(\"main thread exiting\");\n }\n \n-fn child(&&x: int) { log(debug, x); }\n+fn child(&&x: int) { debug!(x); }\n "}, {"sha": "059d7ea5f70c02801d6eab2ffe1ce30a9040243e", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,5 +16,5 @@ pub fn main() {\n     let (po, ch) = comm::stream();\n     ch.send(42);\n     let r = po.recv();\n-    log(error, r);\n+    error!(r);\n }"}, {"sha": "cd914aaa3185b7078e34e5fe200a3ca42bc01f0e", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -61,5 +61,5 @@ pub fn main() {\n     fail_unless!(!Equal::isEq(branch(@leaf(magenta), @leaf(cyan)),\n                  branch(@leaf(magenta), @leaf(magenta))));\n \n-    log(error, \"Assertions all succeeded!\");\n+    error!(\"Assertions all succeeded!\");\n }"}, {"sha": "3277b878a414c55c9abac3248c44ad8705c077fa", "filename": "src/test/run-pass/unary-minus-suffix-inference.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,43 +11,43 @@\n pub fn main() {\n     let a = 1;\n     let a_neg: i8 = -a;\n-    log(error, a_neg);\n+    error!(a_neg);\n \n     let b = 1;\n     let b_neg: i16 = -b;\n-    log(error, b_neg);\n+    error!(b_neg);\n \n     let c = 1;\n     let c_neg: i32 = -c;\n-    log(error, b_neg);\n+    error!(b_neg);\n \n     let d = 1;\n     let d_neg: i64 = -d;\n-    log(error, b_neg);\n+    error!(b_neg);\n \n     let e = 1;\n     let e_neg: int = -e;\n-    log(error, b_neg);\n+    error!(b_neg);\n \n     // intentional overflows\n \n     let f = 1;\n     let f_neg: u8 = -f;\n-    log(error, f_neg);\n+    error!(f_neg);\n \n     let g = 1;\n     let g_neg: u16 = -g;\n-    log(error, g_neg);\n+    error!(g_neg);\n \n     let h = 1;\n     let h_neg: u32 = -h;\n-    log(error, h_neg);\n+    error!(h_neg);\n \n     let i = 1;\n     let i_neg: u64 = -i;\n-    log(error, i_neg);\n+    error!(i_neg);\n \n     let j = 1;\n     let j_neg: uint = -j;\n-    log(error, j_neg);\n+    error!(j_neg);\n }"}, {"sha": "e46a79d364fe25233971cc699373ec04cdc54e0d", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,7 +14,7 @@ fn test1() {\n     let x = u(~10);\n     fail_unless!(match x {\n       u(a) => {\n-        log(error, a);\n+        error!(a);\n         *a\n       }\n       _ => { 66 }"}, {"sha": "37cf6a262356e5bd13acf3513a7b307cc56437de", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let i = ~100;\n-    log(error, i);\n+    error!(i);\n }"}, {"sha": "14fc1cca4e5d497e9310959918437e5714b9b683", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -14,7 +14,7 @@ enum bar { u(~int), w(int), }\n pub fn main() {\n     fail_unless!(match u(~10) {\n       u(a) => {\n-        log(error, a);\n+        error!(a);\n         *a\n       }\n       _ => { 66 }"}, {"sha": "153df44e2ef3123dbc6c257069a3c3e6af9b5c2f", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -20,14 +20,6 @@ fn call_id_2() { id(true) && id(return); }\n \n fn call_id_3() { id(return) && id(return); }\n \n-fn log_fail() { log(error, fail!()); }\n-\n-fn log_ret() { log(error, return); }\n-\n-fn log_break() { loop { log(error, break); } }\n-\n-fn log_again() { loop { log(error, loop); } }\n-\n fn ret_ret() -> int { return (return 2) + 3; }\n \n fn ret_guard() {"}, {"sha": "f4943ed09bd85823824919ea09e056af6960ae62", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,4 +18,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n enum myoption<T> { none, some(T), }\n \n-pub fn main() { log(debug, 5); }\n+pub fn main() { debug!(5); }"}, {"sha": "802c861f88bc22ea06b1c9ff2be9fcbc49253c0e", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -18,4 +18,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n enum myoption<T> { none, some(T), }\n \n-pub fn main() { log(debug, 5); }\n+pub fn main() { debug!(5); }"}, {"sha": "a78461ff4eee8dd97be4cae5f924e9073347ca79", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -42,10 +42,10 @@ pub fn main() {\n     fn check_str_eq(a: ~str, b: ~str) {\n         let mut i: int = 0;\n         for str::each(a) |ab| {\n-            log(debug, i);\n-            log(debug, ab);\n+            debug!(i);\n+            debug!(ab);\n             let bb: u8 = b[i];\n-            log(debug, bb);\n+            debug!(bb);\n             fail_unless!((ab == bb));\n             i += 1;\n         }"}, {"sha": "7023c50d0bd7ed0d0b3f78a29634fc872c55ca69", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let a: ~[int] = ~[1, 2, 3, 4, 5];\n     let b: ~[int] = ~[6, 7, 8, 9, 0];\n     let v: ~[int] = a + b;\n-    log(debug, v[9]);\n+    debug!(v[9]);\n     fail_unless!((v[0] == 1));\n     fail_unless!((v[7] == 8));\n     fail_unless!((v[9] == 0));"}, {"sha": "3f7501f34dad5c7ea4e538aa294cf20f113cd59e", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,5 +13,5 @@\n pub fn main() {\n     let mut later: ~[int];\n     if true { later = ~[1]; } else { later = ~[2]; }\n-    log(debug, later[0]);\n+    debug!(later[0]);\n }"}, {"sha": "00b55aa9a01f64a0eedfb8b1cb71687a932b7567", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -47,7 +47,7 @@ fn test_loop() {\n     let mut i = 20;\n     let mut expected_len = 1u;\n     while i > 0 {\n-        log(error, vec::len(a));\n+        error!(vec::len(a));\n         fail_unless!((vec::len(a) == expected_len));\n         a = a + a; // FIXME(#3387)---can't write a += a\n         i -= 1;"}, {"sha": "a7ac8554b3d4a793baa99dde49e333987712a08b", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -55,10 +55,6 @@ fn notsure() {\n     let _b = (_y <-> _z) == (_y <-> _z);\n }\n \n-fn hammertime() -> int {\n-    let _x = log(debug, true == (return 0));\n-}\n-\n fn canttouchthis() -> uint {\n     pure fn p() -> bool { true }\n     let _a = (fail_unless!((true)) == (fail_unless!(p())));\n@@ -81,7 +77,6 @@ pub fn main() {\n     what();\n     zombiejesus();\n     notsure();\n-    hammertime();\n     canttouchthis();\n     angrydome();\n     evil_lincoln();"}, {"sha": "5a67f98423d9cf414331b5a2f79b60bba1acd7d4", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let mut i = 1;\n     while i > 0 {\n         fail_unless!((i > 0));\n-        log(debug, i);\n+        debug!(i);\n         i -= 1;\n         loop;\n     }"}, {"sha": "13376eddc41e89c6fc39a14be3690e3a4beac6d9", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     while z < 50 {\n         z += 1;\n         while false { x = y; y = z; }\n-        log(debug, y);\n+        debug!(y);\n     }\n     fail_unless!((y == 42 && z == 50));\n }"}, {"sha": "0644c55f8c803b65a736e6b1c57ccd7e00dfb317", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -5,7 +5,7 @@\n pub fn main() {\n     let mut i: int = 90;\n     while i < 100 {\n-        log(debug, i);\n+        debug!(i);\n         i = i + 1;\n         if i == 95 {\n             let v: ~[int] ="}, {"sha": "70a88a025de6261a2abafcad871181ee02cc5911", "filename": "src/test/run-pass/while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fwhile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -13,10 +13,10 @@\n pub fn main() {\n     let mut x: int = 10;\n     let mut y: int = 0;\n-    while y < x { log(debug, y); debug!(\"hello\"); y = y + 1; }\n+    while y < x { debug!(y); debug!(\"hello\"); y = y + 1; }\n     while x > 0 {\n         debug!(\"goodbye\");\n         x = x - 1;\n-        log(debug, x);\n+        debug!(x);\n     }\n }"}, {"sha": "83b60d1863e8aa6e0cc369bd7e74b711f3609e0a", "filename": "src/test/run-pass/yield2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fyield2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f190355b07f941bcc98408ea84c02b629991cf/src%2Ftest%2Frun-pass%2Fyield2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield2.rs?ref=82f190355b07f941bcc98408ea84c02b629991cf", "patch": "@@ -11,5 +11,5 @@\n \n pub fn main() {\n     let mut i: int = 0;\n-    while i < 100 { i = i + 1; log(error, i); task::yield(); }\n+    while i < 100 { i = i + 1; error!(i); task::yield(); }\n }"}]}