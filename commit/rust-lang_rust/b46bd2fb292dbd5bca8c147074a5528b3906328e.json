{"sha": "b46bd2fb292dbd5bca8c147074a5528b3906328e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NmJkMmZiMjkyZGJkNWJjYThjMTQ3MDc0YTU1MjhiMzkwNjMyOGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-26T07:41:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-26T07:41:57Z"}, "message": "Rollup merge of #31152 - durka:ty-follow-bracket, r=pnkfelix\n\ncc #31135 rust-lang/rfcs#1462 #30923 @retep998\nr? @pnkfelix", "tree": {"sha": "3f10c41ef925ecfddf890e37bc1025a74d4f0c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f10c41ef925ecfddf890e37bc1025a74d4f0c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46bd2fb292dbd5bca8c147074a5528b3906328e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46bd2fb292dbd5bca8c147074a5528b3906328e", "html_url": "https://github.com/rust-lang/rust/commit/b46bd2fb292dbd5bca8c147074a5528b3906328e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46bd2fb292dbd5bca8c147074a5528b3906328e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf6d1e87391b25196b35909c3c95e5d873cacf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf6d1e87391b25196b35909c3c95e5d873cacf0", "html_url": "https://github.com/rust-lang/rust/commit/faf6d1e87391b25196b35909c3c95e5d873cacf0"}, {"sha": "e1e0de86ec7ae5c572560a39282b54b410b49f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e0de86ec7ae5c572560a39282b54b410b49f83", "html_url": "https://github.com/rust-lang/rust/commit/e1e0de86ec7ae5c572560a39282b54b410b49f83"}], "stats": {"total": 314, "additions": 313, "deletions": 1}, "files": [{"sha": "bfd76db0359bdf2a5f836419e5eeeb6f1881906b", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b46bd2fb292dbd5bca8c147074a5528b3906328e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46bd2fb292dbd5bca8c147074a5528b3906328e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b46bd2fb292dbd5bca8c147074a5528b3906328e", "patch": "@@ -1005,7 +1005,7 @@ fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n             },\n             \"path\" | \"ty\" => {\n                 match *tok {\n-                    OpenDelim(token::DelimToken::Brace) |\n+                    OpenDelim(token::DelimToken::Brace) | OpenDelim(token::DelimToken::Bracket) |\n                     Comma | FatArrow | Colon | Eq | Gt | Semi | BinOp(token::Or) => Ok(true),\n                     Ident(i, _) if (i.name.as_str() == \"as\" ||\n                                     i.name.as_str() == \"where\") => Ok(true),"}, {"sha": "35944bada4d6490ca4578ae574c12cf4a9d630eb", "filename": "src/test/compile-fail/macro-follow.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/b46bd2fb292dbd5bca8c147074a5528b3906328e/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46bd2fb292dbd5bca8c147074a5528b3906328e/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs?ref=b46bd2fb292dbd5bca8c147074a5528b3906328e", "patch": "@@ -0,0 +1,122 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Check the macro follow sets (see corresponding rpass test).\n+\n+// FOLLOW(pat) = {FatArrow, Comma, Eq, Or, Ident(if), Ident(in)}\n+macro_rules! follow_pat {\n+    ($p:pat ()) => {};       //~WARN  `$p:pat` is followed by `(`\n+    ($p:pat []) => {};       //~WARN  `$p:pat` is followed by `[`\n+    ($p:pat {}) => {};       //~WARN  `$p:pat` is followed by `{`\n+    ($p:pat :) => {};        //~ERROR `$p:pat` is followed by `:`\n+    ($p:pat >) => {};        //~ERROR `$p:pat` is followed by `>`\n+    ($p:pat +) => {};        //~ERROR `$p:pat` is followed by `+`\n+    ($p:pat ident) => {};    //~ERROR `$p:pat` is followed by `ident`\n+    ($p:pat $p:pat) => {};   //~ERROR `$p:pat` is followed by `$p:pat`\n+    ($p:pat $e:expr) => {};  //~ERROR `$p:pat` is followed by `$e:expr`\n+    ($p:pat $t:ty) => {};    //~ERROR `$p:pat` is followed by `$t:ty`\n+    ($p:pat $s:stmt) => {};  //~ERROR `$p:pat` is followed by `$s:stmt`\n+    ($p:pat $p:path) => {};  //~ERROR `$p:pat` is followed by `$p:path`\n+    ($p:pat $b:block) => {}; //~ERROR `$p:pat` is followed by `$b:block`\n+    ($p:pat $i:ident) => {}; //~ERROR `$p:pat` is followed by `$i:ident`\n+    ($p:pat $t:tt) => {};    //~ERROR `$p:pat` is followed by `$t:tt`\n+    ($p:pat $i:item) => {};  //~ERROR `$p:pat` is followed by `$i:item`\n+    ($p:pat $m:meta) => {};  //~ERROR `$p:pat` is followed by `$m:meta`\n+}\n+// FOLLOW(expr) = {FatArrow, Comma, Semicolon}\n+macro_rules! follow_expr {\n+    ($e:expr ()) => {};       //~WARN  `$e:expr` is followed by `(`\n+    ($e:expr []) => {};       //~WARN  `$e:expr` is followed by `[`\n+    ($e:expr {}) => {};       //~WARN  `$e:expr` is followed by `{`\n+    ($e:expr =) => {};        //~ERROR `$e:expr` is followed by `=`\n+    ($e:expr |) => {};        //~ERROR `$e:expr` is followed by `|`\n+    ($e:expr :) => {};        //~ERROR `$e:expr` is followed by `:`\n+    ($e:expr >) => {};        //~ERROR `$e:expr` is followed by `>`\n+    ($e:expr +) => {};        //~ERROR `$e:expr` is followed by `+`\n+    ($e:expr ident) => {};    //~ERROR `$e:expr` is followed by `ident`\n+    ($e:expr if) => {};       //~ERROR `$e:expr` is followed by `if`\n+    ($e:expr in) => {};       //~ERROR `$e:expr` is followed by `in`\n+    ($e:expr $p:pat) => {};   //~ERROR `$e:expr` is followed by `$p:pat`\n+    ($e:expr $e:expr) => {};  //~ERROR `$e:expr` is followed by `$e:expr`\n+    ($e:expr $t:ty) => {};    //~ERROR `$e:expr` is followed by `$t:ty`\n+    ($e:expr $s:stmt) => {};  //~ERROR `$e:expr` is followed by `$s:stmt`\n+    ($e:expr $p:path) => {};  //~ERROR `$e:expr` is followed by `$p:path`\n+    ($e:expr $b:block) => {}; //~ERROR `$e:expr` is followed by `$b:block`\n+    ($e:expr $i:ident) => {}; //~ERROR `$e:expr` is followed by `$i:ident`\n+    ($e:expr $t:tt) => {};    //~ERROR `$e:expr` is followed by `$t:tt`\n+    ($e:expr $i:item) => {};  //~ERROR `$e:expr` is followed by `$i:item`\n+    ($e:expr $m:meta) => {};  //~ERROR `$e:expr` is followed by `$m:meta`\n+}\n+// FOLLOW(ty) = {OpenDelim(Brace), Comma, FatArrow, Colon, Eq, Gt, Semi, Or,\n+//               Ident(as), Ident(where), OpenDelim(Bracket)}\n+macro_rules! follow_ty {\n+    ($t:ty ()) => {};       //~WARN  `$t:ty` is followed by `(`\n+    ($t:ty []) => {};       // ok (RFC 1462)\n+    ($t:ty +) => {};        //~ERROR `$t:ty` is followed by `+`\n+    ($t:ty ident) => {};    //~ERROR `$t:ty` is followed by `ident`\n+    ($t:ty if) => {};       //~ERROR `$t:ty` is followed by `if`\n+    ($t:ty $p:pat) => {};   //~ERROR `$t:ty` is followed by `$p:pat`\n+    ($t:ty $e:expr) => {};  //~ERROR `$t:ty` is followed by `$e:expr`\n+    ($t:ty $t:ty) => {};    //~ERROR `$t:ty` is followed by `$t:ty`\n+    ($t:ty $s:stmt) => {};  //~ERROR `$t:ty` is followed by `$s:stmt`\n+    ($t:ty $p:path) => {};  //~ERROR `$t:ty` is followed by `$p:path`\n+    ($t:ty $b:block) => {}; //~ERROR `$t:ty` is followed by `$b:block`\n+    ($t:ty $i:ident) => {}; //~ERROR `$t:ty` is followed by `$i:ident`\n+    ($t:ty $t:tt) => {};    //~ERROR `$t:ty` is followed by `$t:tt`\n+    ($t:ty $i:item) => {};  //~ERROR `$t:ty` is followed by `$i:item`\n+    ($t:ty $m:meta) => {};  //~ERROR `$t:ty` is followed by `$m:meta`\n+}\n+// FOLLOW(stmt) = FOLLOW(expr)\n+macro_rules! follow_stmt {\n+    ($s:stmt ()) => {};       //~WARN  `$s:stmt` is followed by `(`\n+    ($s:stmt []) => {};       //~WARN  `$s:stmt` is followed by `[`\n+    ($s:stmt {}) => {};       //~WARN  `$s:stmt` is followed by `{`\n+    ($s:stmt =) => {};        //~ERROR `$s:stmt` is followed by `=`\n+    ($s:stmt |) => {};        //~ERROR `$s:stmt` is followed by `|`\n+    ($s:stmt :) => {};        //~ERROR `$s:stmt` is followed by `:`\n+    ($s:stmt >) => {};        //~ERROR `$s:stmt` is followed by `>`\n+    ($s:stmt +) => {};        //~ERROR `$s:stmt` is followed by `+`\n+    ($s:stmt ident) => {};    //~ERROR `$s:stmt` is followed by `ident`\n+    ($s:stmt if) => {};       //~ERROR `$s:stmt` is followed by `if`\n+    ($s:stmt in) => {};       //~ERROR `$s:stmt` is followed by `in`\n+    ($s:stmt $p:pat) => {};   //~ERROR `$s:stmt` is followed by `$p:pat`\n+    ($s:stmt $e:expr) => {};  //~ERROR `$s:stmt` is followed by `$e:expr`\n+    ($s:stmt $t:ty) => {};    //~ERROR `$s:stmt` is followed by `$t:ty`\n+    ($s:stmt $s:stmt) => {};  //~ERROR `$s:stmt` is followed by `$s:stmt`\n+    ($s:stmt $p:path) => {};  //~ERROR `$s:stmt` is followed by `$p:path`\n+    ($s:stmt $b:block) => {}; //~ERROR `$s:stmt` is followed by `$b:block`\n+    ($s:stmt $i:ident) => {}; //~ERROR `$s:stmt` is followed by `$i:ident`\n+    ($s:stmt $t:tt) => {};    //~ERROR `$s:stmt` is followed by `$t:tt`\n+    ($s:stmt $i:item) => {};  //~ERROR `$s:stmt` is followed by `$i:item`\n+    ($s:stmt $m:meta) => {};  //~ERROR `$s:stmt` is followed by `$m:meta`\n+}\n+// FOLLOW(path) = FOLLOW(ty)\n+macro_rules! follow_path {\n+    ($p:path ()) => {};       //~WARN  `$p:path` is followed by `(`\n+    ($p:path []) => {};       // ok (RFC 1462)\n+    ($p:path +) => {};        //~ERROR `$p:path` is followed by `+`\n+    ($p:path ident) => {};    //~ERROR `$p:path` is followed by `ident`\n+    ($p:path if) => {};       //~ERROR `$p:path` is followed by `if`\n+    ($p:path $p:pat) => {};   //~ERROR `$p:path` is followed by `$p:pat`\n+    ($p:path $e:expr) => {};  //~ERROR `$p:path` is followed by `$e:expr`\n+    ($p:path $t:ty) => {};    //~ERROR `$p:path` is followed by `$t:ty`\n+    ($p:path $s:stmt) => {};  //~ERROR `$p:path` is followed by `$s:stmt`\n+    ($p:path $p:path) => {};  //~ERROR `$p:path` is followed by `$p:path`\n+    ($p:path $b:block) => {}; //~ERROR `$p:path` is followed by `$b:block`\n+    ($p:path $i:ident) => {}; //~ERROR `$p:path` is followed by `$i:ident`\n+    ($p:path $t:tt) => {};    //~ERROR `$p:path` is followed by `$t:tt`\n+    ($p:path $i:item) => {};  //~ERROR `$p:path` is followed by `$i:item`\n+    ($p:path $m:meta) => {};  //~ERROR `$p:path` is followed by `$m:meta`\n+}\n+// FOLLOW(block) = any token\n+// FOLLOW(ident) = any token\n+\n+fn main() {}\n+"}, {"sha": "ce6498f67f9ee3395a5033583938b425a8e3df01", "filename": "src/test/run-pass/macro-follow.rs", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/b46bd2fb292dbd5bca8c147074a5528b3906328e/src%2Ftest%2Frun-pass%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46bd2fb292dbd5bca8c147074a5528b3906328e/src%2Ftest%2Frun-pass%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-follow.rs?ref=b46bd2fb292dbd5bca8c147074a5528b3906328e", "patch": "@@ -0,0 +1,190 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check the macro follow sets (see corresponding cfail test).\n+\n+// FOLLOW(pat) = {FatArrow, Comma, Eq, Or, Ident(if), Ident(in)}\n+macro_rules! follow_pat {\n+    ($p:pat =>) => {};\n+    ($p:pat ,) => {};\n+    ($p:pat =) => {};\n+    ($p:pat |) => {};\n+    ($p:pat if) => {};\n+    ($p:pat in) => {};\n+}\n+// FOLLOW(expr) = {FatArrow, Comma, Semicolon}\n+macro_rules! follow_expr {\n+    ($e:expr =>) => {};\n+    ($e:expr ,) => {};\n+    ($e:expr ;) => {};\n+}\n+// FOLLOW(ty) = {OpenDelim(Brace), Comma, FatArrow, Colon, Eq, Gt, Semi, Or,\n+//               Ident(as), Ident(where), OpenDelim(Bracket)}\n+macro_rules! follow_ty {\n+    ($t:ty {}) => {};\n+    ($t:ty ,) => {};\n+    ($t:ty =>) => {};\n+    ($t:ty :) => {};\n+    ($t:ty =) => {};\n+    ($t:ty >) => {};\n+    ($t:ty ;) => {};\n+    ($t:ty |) => {};\n+    ($t:ty as) => {};\n+    ($t:ty where) => {};\n+    ($t:ty []) => {};\n+}\n+// FOLLOW(stmt) = FOLLOW(expr)\n+macro_rules! follow_stmt {\n+    ($s:stmt =>) => {};\n+    ($s:stmt ,) => {};\n+    ($s:stmt ;) => {};\n+}\n+// FOLLOW(path) = FOLLOW(ty)\n+macro_rules! follow_path {\n+    ($p:path {}) => {};\n+    ($p:path ,) => {};\n+    ($p:path =>) => {};\n+    ($p:path :) => {};\n+    ($p:path =) => {};\n+    ($p:path >) => {};\n+    ($p:path ;) => {};\n+    ($p:path |) => {};\n+    ($p:path as) => {};\n+    ($p:path where) => {};\n+    ($p:path []) => {};\n+}\n+// FOLLOW(block) = any token\n+macro_rules! follow_block {\n+    ($b:block ()) => {};\n+    ($b:block []) => {};\n+    ($b:block {}) => {};\n+    ($b:block ,) => {};\n+    ($b:block =>) => {};\n+    ($b:block :) => {};\n+    ($b:block =) => {};\n+    ($b:block >) => {};\n+    ($b:block ;) => {};\n+    ($b:block |) => {};\n+    ($b:block +) => {};\n+    ($b:block ident) => {};\n+    ($b:block $p:pat) => {};\n+    ($b:block $e:expr) => {};\n+    ($b:block $t:ty) => {};\n+    ($b:block $s:stmt) => {};\n+    ($b:block $p:path) => {};\n+    ($b:block $b:block) => {};\n+    ($b:block $i:ident) => {};\n+    ($b:block $t:tt) => {};\n+    ($b:block $i:item) => {};\n+    ($b:block $m:meta) => {};\n+}\n+// FOLLOW(ident) = any token\n+macro_rules! follow_ident {\n+    ($i:ident ()) => {};\n+    ($i:ident []) => {};\n+    ($i:ident {}) => {};\n+    ($i:ident ,) => {};\n+    ($i:ident =>) => {};\n+    ($i:ident :) => {};\n+    ($i:ident =) => {};\n+    ($i:ident >) => {};\n+    ($i:ident ;) => {};\n+    ($i:ident |) => {};\n+    ($i:ident +) => {};\n+    ($i:ident ident) => {};\n+    ($i:ident $p:pat) => {};\n+    ($i:ident $e:expr) => {};\n+    ($i:ident $t:ty) => {};\n+    ($i:ident $s:stmt) => {};\n+    ($i:ident $p:path) => {};\n+    ($i:ident $b:block) => {};\n+    ($i:ident $i:ident) => {};\n+    ($i:ident $t:tt) => {};\n+    ($i:ident $i:item) => {};\n+    ($i:ident $m:meta) => {};\n+}\n+// FOLLOW(tt) = any token\n+macro_rules! follow_tt {\n+    ($t:tt ()) => {};\n+    ($t:tt []) => {};\n+    ($t:tt {}) => {};\n+    ($t:tt ,) => {};\n+    ($t:tt =>) => {};\n+    ($t:tt :) => {};\n+    ($t:tt =) => {};\n+    ($t:tt >) => {};\n+    ($t:tt ;) => {};\n+    ($t:tt |) => {};\n+    ($t:tt +) => {};\n+    ($t:tt ident) => {};\n+    ($t:tt $p:pat) => {};\n+    ($t:tt $e:expr) => {};\n+    ($t:tt $t:ty) => {};\n+    ($t:tt $s:stmt) => {};\n+    ($t:tt $p:path) => {};\n+    ($t:tt $b:block) => {};\n+    ($t:tt $i:ident) => {};\n+    ($t:tt $t:tt) => {};\n+    ($t:tt $i:item) => {};\n+    ($t:tt $m:meta) => {};\n+}\n+// FOLLOW(item) = any token\n+macro_rules! follow_item {\n+    ($i:item ()) => {};\n+    ($i:item []) => {};\n+    ($i:item {}) => {};\n+    ($i:item ,) => {};\n+    ($i:item =>) => {};\n+    ($i:item :) => {};\n+    ($i:item =) => {};\n+    ($i:item >) => {};\n+    ($i:item ;) => {};\n+    ($i:item |) => {};\n+    ($i:item +) => {};\n+    ($i:item ident) => {};\n+    ($i:item $p:pat) => {};\n+    ($i:item $e:expr) => {};\n+    ($i:item $t:ty) => {};\n+    ($i:item $s:stmt) => {};\n+    ($i:item $p:path) => {};\n+    ($i:item $b:block) => {};\n+    ($i:item $i:ident) => {};\n+    ($i:item $t:tt) => {};\n+    ($i:item $i:item) => {};\n+    ($i:item $m:meta) => {};\n+}\n+// FOLLOW(meta) = any token\n+macro_rules! follow_meta {\n+    ($m:meta ()) => {};\n+    ($m:meta []) => {};\n+    ($m:meta {}) => {};\n+    ($m:meta ,) => {};\n+    ($m:meta =>) => {};\n+    ($m:meta :) => {};\n+    ($m:meta =) => {};\n+    ($m:meta >) => {};\n+    ($m:meta ;) => {};\n+    ($m:meta |) => {};\n+    ($m:meta +) => {};\n+    ($m:meta ident) => {};\n+    ($m:meta $p:pat) => {};\n+    ($m:meta $e:expr) => {};\n+    ($m:meta $t:ty) => {};\n+    ($m:meta $s:stmt) => {};\n+    ($m:meta $p:path) => {};\n+    ($m:meta $b:block) => {};\n+    ($m:meta $i:ident) => {};\n+    ($m:meta $t:tt) => {};\n+    ($m:meta $i:item) => {};\n+    ($m:meta $m:meta) => {};\n+}\n+\n+fn main() {}\n+"}]}