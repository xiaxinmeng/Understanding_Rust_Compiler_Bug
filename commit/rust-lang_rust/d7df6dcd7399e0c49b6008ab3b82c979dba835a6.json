{"sha": "d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGY2ZGNkNzM5OWUwYzQ5YjYwMDhhYjNiODJjOTc5ZGJhODM1YTY=", "commit": {"author": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-06T01:35:41Z"}, "committer": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-06T01:35:41Z"}, "message": "Merge remote-tracking branch 'rust-lang/master' into iss29367-windows-docs", "tree": {"sha": "e2054076d05c9f68a99f235717bd95efb72faaf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2054076d05c9f68a99f235717bd95efb72faaf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "html_url": "https://github.com/rust-lang/rust/commit/d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/comments", "author": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e406cd1ec9abb77236318db30e362e4654411a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e406cd1ec9abb77236318db30e362e4654411a1a", "html_url": "https://github.com/rust-lang/rust/commit/e406cd1ec9abb77236318db30e362e4654411a1a"}, {"sha": "f4209651ec4d4455dab4fc3f3a3456a897d9da7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4209651ec4d4455dab4fc3f3a3456a897d9da7f", "html_url": "https://github.com/rust-lang/rust/commit/f4209651ec4d4455dab4fc3f3a3456a897d9da7f"}], "stats": {"total": 71983, "additions": 41407, "deletions": 30576}, "files": [{"sha": "7cd896b763f543fe87345089b5432036b6c24952", "filename": ".gitmodules", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -22,11 +22,14 @@\n \tpath = src/doc/nomicon\n \turl = https://github.com/rust-lang-nursery/nomicon.git\n [submodule \"src/tools/cargo\"]\n-\tpath = cargo\n-\turl = https://github.com/rust-lang/cargo.git\n+\tpath = src/tools/cargo\n+\turl = https://github.com/rust-lang/cargo\n [submodule \"reference\"]\n \tpath = src/doc/reference\n \turl = https://github.com/rust-lang-nursery/reference.git\n [submodule \"book\"]\n \tpath = src/doc/book\n-\turl = https://github.com/rust-lang/book\n+\turl = https://github.com/rust-lang/book.git\n+[submodule \"src/tools/rls\"]\n+\tpath = src/tools/rls\n+\turl = https://github.com/rust-lang-nursery/rls"}, {"sha": "ee5b6f257b555ec4d9f4a551544f6a27ad356aeb", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -139,6 +139,7 @@ Margaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\n Mark Sinclair <mark.edward.x@gmail.com>\n Mark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\n Markus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\n+Martin Hafskjold Thoresen <martinhath@gmail.com>\n Matej Lach <matej.lach@gmail.com> Matej \u013dach <matej.lach@gmail.com>\n Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>"}, {"sha": "beb7b435cbadfce97a838e00cf728f6416e374c4", "filename": ".travis.yml", "status": "modified", "additions": 56, "deletions": 28, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -15,19 +15,27 @@ matrix:\n     - env: IMAGE=arm-android\n     - env: IMAGE=armhf-gnu\n     - env: IMAGE=cross DEPLOY=1\n+    - env: IMAGE=dist-aarch64-linux DEPLOY=1\n     - env: IMAGE=dist-android DEPLOY=1\n     - env: IMAGE=dist-arm-linux DEPLOY=1\n-    - env: IMAGE=dist-armv7-aarch64-linux DEPLOY=1\n-    - env: IMAGE=dist-freebsd DEPLOY=1\n-    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-armhf-linux DEPLOY=1\n+    - env: IMAGE=dist-armv7-linux DEPLOY=1\n     - env: IMAGE=dist-fuchsia DEPLOY=1\n+    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-i686-freebsd DEPLOY=1\n+    - env: IMAGE=dist-i686-linux DEPLOY=1\n     - env: IMAGE=dist-mips-linux DEPLOY=1\n     - env: IMAGE=dist-mips64-linux DEPLOY=1\n+    - env: IMAGE=dist-mips64el-linux DEPLOY=1\n+    - env: IMAGE=dist-mipsel-linux DEPLOY=1\n     - env: IMAGE=dist-powerpc-linux DEPLOY=1\n     - env: IMAGE=dist-powerpc64-linux DEPLOY=1\n-    - env: IMAGE=dist-s390x-linux-netbsd DEPLOY=1\n-    - env: IMAGE=dist-x86-linux DEPLOY=1\n+    - env: IMAGE=dist-powerpc64le-linux DEPLOY=1\n+    - env: IMAGE=dist-s390x-linux DEPLOY=1\n+    - env: IMAGE=dist-x86_64-freebsd DEPLOY=1\n+    - env: IMAGE=dist-x86_64-linux DEPLOY=1\n     - env: IMAGE=dist-x86_64-musl DEPLOY=1\n+    - env: IMAGE=dist-x86_64-netbsd DEPLOY=1\n     - env: IMAGE=emscripten\n     - env: IMAGE=i686-gnu\n     - env: IMAGE=i686-gnu-nopt\n@@ -40,10 +48,13 @@ matrix:\n     - env: IMAGE=x86_64-gnu-distcheck\n     - env: IMAGE=x86_64-gnu-incremental\n \n-    # OSX builders\n+    # OSX builders running tests, these run the full test suite.\n+    #\n+    # Note that the compiler is compiled to target 10.8 here because the Xcode\n+    # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n+        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n@@ -52,7 +63,7 @@ matrix:\n       os: osx\n       osx_image: xcode8.2\n       install: &osx_install_sccache >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-apple-darwin &&\n+        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-apple-darwin &&\n           chmod +x /usr/local/bin/sccache &&\n         travis_retry curl -o /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n           chmod +x /usr/local/bin/stamp\n@@ -68,48 +79,60 @@ matrix:\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n \n+    # OSX builders producing releases. These do not run the full test suite and\n+    # just produce a bunch of artifacts.\n+    #\n+    # Note that these are running in the `xcode7` image instead of the\n+    # `xcode8.2` image as above. That's because we want to build releases for\n+    # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n+      osx_image: xcode7\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n+      osx_image: xcode7\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n     # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n     # turned on, they're deployed to a different location primarily for projects\n     # which are stuck on nightly and don't want llvm assertions in the artifacts\n     # that they use.\n-    - env: IMAGE=dist-x86-linux DEPLOY_ALT=1\n+    - env: IMAGE=dist-x86_64-linux DEPLOY_ALT=1\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--enable-extended\"\n         SRC=.\n         DEPLOY_ALT=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        MACOSX_DEPLOYMENT_TARGET=10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n+      osx_image: xcode7\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n env:\n   global:\n@@ -133,13 +156,14 @@ before_script:\n script:\n   - >\n       if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n-          echo skipping, not a full build;\n-      elif [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-          travis_retry stamp sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          stamp src/ci/run.sh;\n+          echo skipping, not a full build\n       else\n-          travis_retry stamp sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          stamp src/ci/docker/run.sh $IMAGE;\n+          stamp src/ci/init_repo.sh . \"$HOME/rustsrc\" &&\n+          if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+              stamp src/ci/run.sh;\n+          else\n+              stamp src/ci/docker/run.sh $IMAGE;\n+          fi\n       fi\n \n after_success:\n@@ -169,13 +193,17 @@ after_failure:\n   - dmesg | grep -i kill\n \n # Save tagged docker images we created and load them if they're available\n+# Travis saves caches whether the build failed or not, nuke rustsrc if\n+# the failure was while updating it (as it may be in an bad state)\n+# https://github.com/travis-ci/travis-ci/issues/4472\n before_cache:\n   - docker history -q rust-ci |\n     grep -v missing |\n     xargs docker save |\n     gzip > $HOME/docker/rust-ci.tar.gz\n before_install:\n   - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n+  - mkdir -p $HOME/rustsrc\n \n notifications:\n   email: false"}, {"sha": "f387b4be6008f4b4722e9264d73921179fa8a91f", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -198,8 +198,8 @@ The Rust community congregates in a few places:\n * [users.rust-lang.org] - General discussion and broader questions.\n * [/r/rust] - News and general discussion.\n \n-[Stack Overflow]: http://stackoverflow.com/questions/tagged/rust\n-[/r/rust]: http://reddit.com/r/rust\n+[Stack Overflow]: https://stackoverflow.com/questions/tagged/rust\n+[/r/rust]: https://reddit.com/r/rust\n [users.rust-lang.org]: https://users.rust-lang.org/\n \n ## Contributing"}, {"sha": "571389041d6b643bdedff3ad52e2b36f9b9f7d04", "filename": "RELEASES.md", "status": "modified", "additions": 256, "deletions": 512, "changes": 768, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -949,254 +949,168 @@ Version 1.12.0 (2016-09-29)\n Highlights\n ----------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n \n Compiler\n --------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [Print the Rust target name, not the LLVM target name, with\n-  `--print target-list`]\n-  (https://github.com/rust-lang/rust/pull/35489)\n+  `--print target-list`](https://github.com/rust-lang/rust/pull/35489)\n * [The computation of `TypeId` is correct in some cases where it was previously\n-  producing inconsistent results]\n-  (https://github.com/rust-lang/rust/pull/35267)\n-* [The `mips-unknown-linux-gnu` target uses hardware floating point by default]\n-  (https://github.com/rust-lang/rust/pull/34910)\n+  producing inconsistent results](https://github.com/rust-lang/rust/pull/35267)\n+* [The `mips-unknown-linux-gnu` target uses hardware floating point by default](https://github.com/rust-lang/rust/pull/34910)\n * [The `rustc` arguments, `--print target-cpus`, `--print target-features`,\n   `--print relocation-models`, and `--print code-models` print the available\n   options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and\n-  `-C code-model` code generation arguments]\n-  (https://github.com/rust-lang/rust/pull/34845)\n+  `-C code-model` code generation arguments](https://github.com/rust-lang/rust/pull/34845)\n * [`rustc` supports three new MUSL targets on ARM: `arm-unknown-linux-musleabi`,\n-  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`]\n-  (https://github.com/rust-lang/rust/pull/35060).\n+  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`](https://github.com/rust-lang/rust/pull/35060).\n   These targets produce statically-linked binaries. There are no binary release\n   builds yet though.\n \n Diagnostics\n -----------\n \n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n * [In error descriptions, references are now described in plain English,\n-  instead of as \"&-ptr\"]\n-  (https://github.com/rust-lang/rust/pull/35611)\n+  instead of as \"&-ptr\"](https://github.com/rust-lang/rust/pull/35611)\n * [In error type descriptions, unknown numeric types are named `{integer}` or\n-  `{float}` instead of `_`]\n-  (https://github.com/rust-lang/rust/pull/35080)\n-* [`rustc` emits a clearer error when inner attributes follow a doc comment]\n-  (https://github.com/rust-lang/rust/pull/34676)\n+  `{float}` instead of `_`](https://github.com/rust-lang/rust/pull/35080)\n+* [`rustc` emits a clearer error when inner attributes follow a doc comment](https://github.com/rust-lang/rust/pull/34676)\n \n Language\n --------\n \n-* [`macro_rules!` invocations can be made within `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34925)\n-* [`macro_rules!` meta-variables are hygienic]\n-  (https://github.com/rust-lang/rust/pull/35453)\n+* [`macro_rules!` invocations can be made within `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34925)\n+* [`macro_rules!` meta-variables are hygienic](https://github.com/rust-lang/rust/pull/35453)\n * [`macro_rules!` `tt` matchers can be reparsed correctly, making them much more\n-  useful]\n-  (https://github.com/rust-lang/rust/pull/34908)\n+  useful](https://github.com/rust-lang/rust/pull/34908)\n * [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n-  inside non-braces invocations]\n-  (https://github.com/rust-lang/rust/pull/34886)\n+  inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n * [Semicolons are properly required as statement delimeters inside\n-  `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34660)\n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n+  `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n \n Stabilized APIs\n ---------------\n \n-* [`Cell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n-* [`RefCell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n-* [`IpAddr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n-* [`IpAddr::is_loopback`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n-* [`IpAddr::is_multicast`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n-* [`Ipv4Addr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n-* [`Ipv6Addr::octets`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n-* [`LinkedList::contains`]\n-  (https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n-* [`VecDeque::contains`]\n-  (https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n-* [`ExitStatusExt::from_raw`]\n-  (https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n+* [`Cell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n+* [`RefCell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n+* [`IpAddr::is_unspecified`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n+* [`IpAddr::is_loopback`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n+* [`IpAddr::is_multicast`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n+* [`Ipv4Addr::is_unspecified`](https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n+* [`Ipv6Addr::octets`](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n+* [`LinkedList::contains`](https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n+* [`VecDeque::contains`](https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n+* [`ExitStatusExt::from_raw`](https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n   Both on Unix and Windows.\n-* [`Receiver::recv_timeout`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n-* [`RecvTimeoutError`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n-* [`BinaryHeap::peek_mut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n-* [`PeekMut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n-* [`iter::Product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Product.html)\n-* [`iter::Sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Sum.html)\n-* [`OccupiedEntry::remove_entry`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n-* [`VacantEntry::into_key`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n+* [`Receiver::recv_timeout`](https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n+* [`RecvTimeoutError`](https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n+* [`BinaryHeap::peek_mut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n+* [`PeekMut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n+* [`iter::Product`](https://doc.rust-lang.org/std/iter/trait.Product.html)\n+* [`iter::Sum`](https://doc.rust-lang.org/std/iter/trait.Sum.html)\n+* [`OccupiedEntry::remove_entry`](https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n+* [`VacantEntry::into_key`](https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n \n Libraries\n ---------\n \n * [The `format!` macro and friends now allow a single argument to be formatted\n-  in multiple styles]\n-  (https://github.com/rust-lang/rust/pull/33642)\n+  in multiple styles](https://github.com/rust-lang/rust/pull/33642)\n * [The lifetime bounds on `[T]::binary_search_by` and\n-  `[T]::binary_search_by_key` have been adjusted to be more flexible]\n-  (https://github.com/rust-lang/rust/pull/34762)\n-* [`Option` implements `From` for its contained type]\n-  (https://github.com/rust-lang/rust/pull/34828)\n-* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type]\n-  (https://github.com/rust-lang/rust/pull/35392)\n-* [`RwLock` panics if the reader count overflows]\n-  (https://github.com/rust-lang/rust/pull/35378)\n-* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/35354)\n-* [`vec::Drain` and `binary_heap::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/34951)\n-* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`]\n-  (https://github.com/rust-lang/rust/pull/35064)\n-* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`]\n-  (https://github.com/rust-lang/rust/pull/34946)\n+  `[T]::binary_search_by_key` have been adjusted to be more flexible](https://github.com/rust-lang/rust/pull/34762)\n+* [`Option` implements `From` for its contained type](https://github.com/rust-lang/rust/pull/34828)\n+* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type](https://github.com/rust-lang/rust/pull/35392)\n+* [`RwLock` panics if the reader count overflows](https://github.com/rust-lang/rust/pull/35378)\n+* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant](https://github.com/rust-lang/rust/pull/35354)\n+* [`vec::Drain` and `binary_heap::Drain` are covariant](https://github.com/rust-lang/rust/pull/34951)\n+* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`](https://github.com/rust-lang/rust/pull/35064)\n+* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`](https://github.com/rust-lang/rust/pull/34946)\n * [`hash_map::Entry`, `hash_map::VacantEntry` and `hash_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34937)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34937)\n * [`btree_map::Entry`, `btree_map::VacantEntry` and `btree_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34885)\n-* [`String` implements `AddAssign`]\n-  (https://github.com/rust-lang/rust/pull/34890)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34885)\n+* [`String` implements `AddAssign`](https://github.com/rust-lang/rust/pull/34890)\n * [Variadic `extern fn` pointers implement the `Clone`, `PartialEq`, `Eq`,\n-  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits]\n-  (https://github.com/rust-lang/rust/pull/34879)\n-* [`FileType` implements `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34757)\n-* [References to `Mutex` and `RwLock` are unwind-safe]\n-  (https://github.com/rust-lang/rust/pull/34756)\n+  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits](https://github.com/rust-lang/rust/pull/34879)\n+* [`FileType` implements `Debug`](https://github.com/rust-lang/rust/pull/34757)\n+* [References to `Mutex` and `RwLock` are unwind-safe](https://github.com/rust-lang/rust/pull/34756)\n * [`mpsc::sync_channel` `Receiver`s return any available message before\n-  reporting a disconnect]\n-  (https://github.com/rust-lang/rust/pull/34731)\n-* [Unicode definitions have been updated to 9.0]\n-  (https://github.com/rust-lang/rust/pull/34599)\n-* [`env` iterators implement `DoubleEndedIterator`]\n-  (https://github.com/rust-lang/rust/pull/33312)\n+  reporting a disconnect](https://github.com/rust-lang/rust/pull/34731)\n+* [Unicode definitions have been updated to 9.0](https://github.com/rust-lang/rust/pull/34599)\n+* [`env` iterators implement `DoubleEndedIterator`](https://github.com/rust-lang/rust/pull/33312)\n \n Cargo\n -----\n \n-* [Support local mirrors of registries]\n-  (https://github.com/rust-lang/cargo/pull/2857)\n-* [Add support for command aliases]\n-  (https://github.com/rust-lang/cargo/pull/2679)\n-* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides]\n-  (https://github.com/rust-lang/cargo/pull/3007)\n-* [Make `cargo doc --open --target` work as expected]\n-  (https://github.com/rust-lang/cargo/pull/2988)\n-* [Speed up noop registry updates]\n-  (https://github.com/rust-lang/cargo/pull/2974)\n-* [Update OpenSSL]\n-  (https://github.com/rust-lang/cargo/pull/2971)\n-* [Fix `--panic=abort` with plugins]\n-  (https://github.com/rust-lang/cargo/pull/2954)\n-* [Always pass `-C metadata` to the compiler]\n-  (https://github.com/rust-lang/cargo/pull/2946)\n-* [Fix depending on git repos with workspaces]\n-  (https://github.com/rust-lang/cargo/pull/2938)\n-* [Add a `--lib` flag to `cargo new`]\n-  (https://github.com/rust-lang/cargo/pull/2921)\n-* [Add `http.cainfo` for custom certs]\n-  (https://github.com/rust-lang/cargo/pull/2917)\n-* [Indicate the compilation profile after compiling]\n-  (https://github.com/rust-lang/cargo/pull/2909)\n-* [Allow enabling features for dependencies with `--features`]\n-  (https://github.com/rust-lang/cargo/pull/2876)\n-* [Add `--jobs` flag to `cargo package`]\n-  (https://github.com/rust-lang/cargo/pull/2867)\n-* [Add `--dry-run` to `cargo publish`]\n-  (https://github.com/rust-lang/cargo/pull/2849)\n-* [Add support for `RUSTDOCFLAGS`]\n-  (https://github.com/rust-lang/cargo/pull/2794)\n+* [Support local mirrors of registries](https://github.com/rust-lang/cargo/pull/2857)\n+* [Add support for command aliases](https://github.com/rust-lang/cargo/pull/2679)\n+* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides](https://github.com/rust-lang/cargo/pull/3007)\n+* [Make `cargo doc --open --target` work as expected](https://github.com/rust-lang/cargo/pull/2988)\n+* [Speed up noop registry updates](https://github.com/rust-lang/cargo/pull/2974)\n+* [Update OpenSSL](https://github.com/rust-lang/cargo/pull/2971)\n+* [Fix `--panic=abort` with plugins](https://github.com/rust-lang/cargo/pull/2954)\n+* [Always pass `-C metadata` to the compiler](https://github.com/rust-lang/cargo/pull/2946)\n+* [Fix depending on git repos with workspaces](https://github.com/rust-lang/cargo/pull/2938)\n+* [Add a `--lib` flag to `cargo new`](https://github.com/rust-lang/cargo/pull/2921)\n+* [Add `http.cainfo` for custom certs](https://github.com/rust-lang/cargo/pull/2917)\n+* [Indicate the compilation profile after compiling](https://github.com/rust-lang/cargo/pull/2909)\n+* [Allow enabling features for dependencies with `--features`](https://github.com/rust-lang/cargo/pull/2876)\n+* [Add `--jobs` flag to `cargo package`](https://github.com/rust-lang/cargo/pull/2867)\n+* [Add `--dry-run` to `cargo publish`](https://github.com/rust-lang/cargo/pull/2849)\n+* [Add support for `RUSTDOCFLAGS`](https://github.com/rust-lang/cargo/pull/2794)\n \n Performance\n -----------\n \n-* [`panic::catch_unwind` is more optimized]\n-  (https://github.com/rust-lang/rust/pull/35444)\n-* [`panic::catch_unwind` no longer accesses thread-local storage on entry]\n-  (https://github.com/rust-lang/rust/pull/34866)\n+* [`panic::catch_unwind` is more optimized](https://github.com/rust-lang/rust/pull/35444)\n+* [`panic::catch_unwind` no longer accesses thread-local storage on entry](https://github.com/rust-lang/rust/pull/34866)\n \n Tooling\n -------\n \n * [Test binaries now support a `--test-threads` argument to specify the number\n   of threads used to run tests, and which acts the same as the\n-  `RUST_TEST_THREADS` environment variable]\n-  (https://github.com/rust-lang/rust/pull/35414)  \n-* [The test runner now emits a warning when tests run over 60 seconds]\n-  (https://github.com/rust-lang/rust/pull/35405)\n-* [rustdoc: Fix methods in search results]\n-  (https://github.com/rust-lang/rust/pull/34752)\n-* [`rust-lldb` warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  `RUST_TEST_THREADS` environment variable](https://github.com/rust-lang/rust/pull/35414)  \n+* [The test runner now emits a warning when tests run over 60 seconds](https://github.com/rust-lang/rust/pull/35405)\n+* [rustdoc: Fix methods in search results](https://github.com/rust-lang/rust/pull/34752)\n+* [`rust-lldb` warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * [Rust releases now come with source packages that can be installed by rustup\n-  via `rustup component add rust-src`]\n-  (https://github.com/rust-lang/rust/pull/34366).\n+  via `rustup component add rust-src`](https://github.com/rust-lang/rust/pull/34366).\n   The resulting source code can be used by tools and IDES, located in the\n   sysroot under `lib/rustlib/src`.\n \n Misc\n ----\n \n-* [The compiler can now be built against LLVM 3.9]\n-  (https://github.com/rust-lang/rust/pull/35594)\n+* [The compiler can now be built against LLVM 3.9](https://github.com/rust-lang/rust/pull/35594)\n * Many minor improvements to the documentation.\n-* [The Rust exception handling \"personality\" routine is now written in Rust]\n-  (https://github.com/rust-lang/rust/pull/34832)\n+* [The Rust exception handling \"personality\" routine is now written in Rust](https://github.com/rust-lang/rust/pull/34832)\n \n Compatibility Notes\n -------------------\n \n * [When printing Windows `OsStr`s, unpaired surrogate codepoints are escaped\n-  with the lowercase format instead of the uppercase]\n-  (https://github.com/rust-lang/rust/pull/35084)\n+  with the lowercase format instead of the uppercase](https://github.com/rust-lang/rust/pull/35084)\n * [When formatting strings, if \"precision\" is specified, the \"fill\",\n-  \"align\" and \"width\" specifiers are no longer ignored]\n-  (https://github.com/rust-lang/rust/pull/34544)\n-* [The `Debug` impl for strings no longer escapes all non-ASCII characters]\n-  (https://github.com/rust-lang/rust/pull/34485)\n+  \"align\" and \"width\" specifiers are no longer ignored](https://github.com/rust-lang/rust/pull/34544)\n+* [The `Debug` impl for strings no longer escapes all non-ASCII characters](https://github.com/rust-lang/rust/pull/34485)\n \n \n Version 1.11.0 (2016-08-18)\n@@ -1205,142 +1119,92 @@ Version 1.11.0 (2016-08-18)\n Language\n --------\n \n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n-* [Support nested `cfg_attr` attributes]\n-  (https://github.com/rust-lang/rust/pull/34216)\n-* [Allow statement-generating braced macro invocations at the end of blocks]\n-  (https://github.com/rust-lang/rust/pull/34436)\n-* [Macros can be expanded inside of trait definitions]\n-  (https://github.com/rust-lang/rust/pull/34213)\n-* [`#[macro_use]` works properly when it is itself expanded from a macro]\n-  (https://github.com/rust-lang/rust/pull/34032)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n+* [Support nested `cfg_attr` attributes](https://github.com/rust-lang/rust/pull/34216)\n+* [Allow statement-generating braced macro invocations at the end of blocks](https://github.com/rust-lang/rust/pull/34436)\n+* [Macros can be expanded inside of trait definitions](https://github.com/rust-lang/rust/pull/34213)\n+* [`#[macro_use]` works properly when it is itself expanded from a macro](https://github.com/rust-lang/rust/pull/34032)\n \n Stabilized APIs\n ---------------\n \n-* [`BinaryHeap::append`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n-* [`BTreeMap::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n-* [`BTreeMap::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n-* [`BTreeSet::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n-* [`BTreeSet::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n-* [`f32::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n+* [`BinaryHeap::append`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n+* [`BTreeMap::append`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n+* [`BTreeMap::split_off`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n+* [`BTreeSet::append`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n+* [`BTreeSet::split_off`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n+* [`f32::to_degrees`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f32::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n+* [`f32::to_radians`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n+* [`f64::to_degrees`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n+* [`f64::to_radians`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`Iterator::sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Iterator::product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Cell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n-* [`RefCell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n+* [`Iterator::sum`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Iterator::product`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Cell::get_mut`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n+* [`RefCell::get_mut`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n \n Libraries\n ---------\n \n * [The `thread_local!` macro supports multiple definitions in a single\n-   invocation, and can apply attributes]\n-  (https://github.com/rust-lang/rust/pull/34077)\n-* [`Cow` implements `Default`]\n-  (https://github.com/rust-lang/rust/pull/34305)\n+   invocation, and can apply attributes](https://github.com/rust-lang/rust/pull/34077)\n+* [`Cow` implements `Default`](https://github.com/rust-lang/rust/pull/34305)\n * [`Wrapping` implements binary, octal, lower-hex and upper-hex\n-  `Display` formatting]\n-  (https://github.com/rust-lang/rust/pull/34190)\n-* [The range types implement `Hash`]\n-  (https://github.com/rust-lang/rust/pull/34180)\n-* [`lookup_host` ignores unknown address types]\n-  (https://github.com/rust-lang/rust/pull/34067)\n-* [`assert_eq!` accepts a custom error message, like `assert!` does]\n-  (https://github.com/rust-lang/rust/pull/33976)\n-* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"]\n-  (https://github.com/rust-lang/rust/pull/33803)\n+  `Display` formatting](https://github.com/rust-lang/rust/pull/34190)\n+* [The range types implement `Hash`](https://github.com/rust-lang/rust/pull/34180)\n+* [`lookup_host` ignores unknown address types](https://github.com/rust-lang/rust/pull/34067)\n+* [`assert_eq!` accepts a custom error message, like `assert!` does](https://github.com/rust-lang/rust/pull/33976)\n+* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"](https://github.com/rust-lang/rust/pull/33803)\n \n Cargo\n -----\n \n-* [Disallow specifying features of transitive deps]\n-  (https://github.com/rust-lang/cargo/pull/2821)\n-* [Add color support for Windows consoles]\n-  (https://github.com/rust-lang/cargo/pull/2804)\n-* [Fix `harness = false` on `[lib]` sections]\n-  (https://github.com/rust-lang/cargo/pull/2795)\n-* [Don't panic when `links` contains a '.']\n-  (https://github.com/rust-lang/cargo/pull/2787)\n-* [Build scripts can emit warnings]\n-  (https://github.com/rust-lang/cargo/pull/2630),\n+* [Disallow specifying features of transitive deps](https://github.com/rust-lang/cargo/pull/2821)\n+* [Add color support for Windows consoles](https://github.com/rust-lang/cargo/pull/2804)\n+* [Fix `harness = false` on `[lib]` sections](https://github.com/rust-lang/cargo/pull/2795)\n+* [Don't panic when `links` contains a '.'](https://github.com/rust-lang/cargo/pull/2787)\n+* [Build scripts can emit warnings](https://github.com/rust-lang/cargo/pull/2630),\n   and `-vv` prints warnings for all crates.\n-* [Ignore file locks on OS X NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2720)\n-* [Don't warn about `package.metadata` keys]\n-  (https://github.com/rust-lang/cargo/pull/2668).\n+* [Ignore file locks on OS X NFS mounts](https://github.com/rust-lang/cargo/pull/2720)\n+* [Don't warn about `package.metadata` keys](https://github.com/rust-lang/cargo/pull/2668).\n   This provides room for expansion by arbitrary tools.\n-* [Add support for cdylib crate types]\n-  (https://github.com/rust-lang/cargo/pull/2741)\n-* [Prevent publishing crates when files are dirty]\n-  (https://github.com/rust-lang/cargo/pull/2781)\n-* [Don't fetch all crates on clean]\n-  (https://github.com/rust-lang/cargo/pull/2704)\n-* [Propagate --color option to rustc]\n-  (https://github.com/rust-lang/cargo/pull/2779)\n-* [Fix `cargo doc --open` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2780)\n-* [Improve autocompletion]\n-  (https://github.com/rust-lang/cargo/pull/2772)\n-* [Configure colors of stderr as well as stdout]\n-  (https://github.com/rust-lang/cargo/pull/2739)\n+* [Add support for cdylib crate types](https://github.com/rust-lang/cargo/pull/2741)\n+* [Prevent publishing crates when files are dirty](https://github.com/rust-lang/cargo/pull/2781)\n+* [Don't fetch all crates on clean](https://github.com/rust-lang/cargo/pull/2704)\n+* [Propagate --color option to rustc](https://github.com/rust-lang/cargo/pull/2779)\n+* [Fix `cargo doc --open` on Windows](https://github.com/rust-lang/cargo/pull/2780)\n+* [Improve autocompletion](https://github.com/rust-lang/cargo/pull/2772)\n+* [Configure colors of stderr as well as stdout](https://github.com/rust-lang/cargo/pull/2739)\n \n Performance\n -----------\n \n * [Caching projections speeds up type check dramatically for some\n-  workloads]\n-  (https://github.com/rust-lang/rust/pull/33816)\n-* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4]\n-  (https://github.com/rust-lang/rust/pull/33940)\n+  workloads](https://github.com/rust-lang/rust/pull/33816)\n+* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4](https://github.com/rust-lang/rust/pull/33940)\n   This hasher is faster, but is believed to provide sufficient\n   protection from collision attacks.\n-* [Comparison of `Ipv4Addr` is 10x faster]\n-  (https://github.com/rust-lang/rust/pull/33891)\n+* [Comparison of `Ipv4Addr` is 10x faster](https://github.com/rust-lang/rust/pull/33891)\n \n Rustdoc\n -------\n \n-* [Fix empty implementation section on some module pages]\n-  (https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists]\n-  (https://github.com/rust-lang/rust/pull/34479)\n-* [Fix search result layout for enum variants and struct fields]\n-  (https://github.com/rust-lang/rust/pull/34477)\n-* [Fix issues with source links to external crates]\n-  (https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports]\n-  (https://github.com/rust-lang/rust/pull/34245)\n+* [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n+* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n+* [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n+* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n \n-* [rustc is better at finding the MSVC toolchain]\n-  (https://github.com/rust-lang/rust/pull/34492)\n+* [rustc is better at finding the MSVC toolchain](https://github.com/rust-lang/rust/pull/34492)\n * [When emitting debug info, rustc emits frame pointers for closures,\n-  shims and glue, as it does for all other functions]\n-  (https://github.com/rust-lang/rust/pull/33909)\n-* [rust-lldb warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  shims and glue, as it does for all other functions](https://github.com/rust-lang/rust/pull/33909)\n+* [rust-lldb warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * Many more errors have been given error codes and extended\n   explanations\n * API documentation continues to be improved, with many new examples\n@@ -1349,30 +1213,22 @@ Misc\n ----\n \n * [rustc no longer hangs when dependencies recursively re-export\n-  submodules]\n-  (https://github.com/rust-lang/rust/pull/34542)\n-* [rustc requires LLVM 3.7+]\n-  (https://github.com/rust-lang/rust/pull/34104)\n+  submodules](https://github.com/rust-lang/rust/pull/34542)\n+* [rustc requires LLVM 3.7+](https://github.com/rust-lang/rust/pull/34104)\n * [The 'How Safe and Unsafe Interact' chapter of The Rustonomicon was\n-  rewritten]\n-  (https://github.com/rust-lang/rust/pull/33895)\n-* [rustc support 16-bit pointer sizes]\n-  (https://github.com/rust-lang/rust/pull/33460).\n+  rewritten](https://github.com/rust-lang/rust/pull/33895)\n+* [rustc support 16-bit pointer sizes](https://github.com/rust-lang/rust/pull/33460).\n   No targets use this yet, but it works toward AVR support.\n \n Compatibility Notes\n -------------------\n \n-* [`const`s and `static`s may not have unsized types]\n-  (https://github.com/rust-lang/rust/pull/34443)\n+* [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n * [The new follow-set rules that place restrictions on `macro_rules!`\n-  in order to ensure syntax forward-compatibility have been enabled]\n-  (https://github.com/rust-lang/rust/pull/33982)\n-  This was an [ammendment to RFC 550]\n-  (https://github.com/rust-lang/rfcs/pull/1384),\n+  in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n+  This was an [ammendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n   and has been a warning since 1.10.\n-* [`cfg` attribute process has been refactored to fix various bugs]\n-  (https://github.com/rust-lang/rust/pull/33706).\n+* [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n   This causes breakage in some corner cases.\n \n \n@@ -1383,21 +1239,15 @@ Language\n --------\n \n * [Allow `concat_idents!` in type positions as well as in expression\n-  positions]\n-  (https://github.com/rust-lang/rust/pull/33735).\n-* [`Copy` types are required to have a trivial implementation of `Clone`]\n-  (https://github.com/rust-lang/rust/pull/33420).\n+  positions](https://github.com/rust-lang/rust/pull/33735).\n+* [`Copy` types are required to have a trivial implementation of `Clone`](https://github.com/rust-lang/rust/pull/33420).\n   [RFC 1521](https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md).\n-* [Single-variant enums support the `#[repr(..)]` attribute]\n-  (https://github.com/rust-lang/rust/pull/33355).\n-* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods]\n-  (https://github.com/rust-lang/rust/pull/32908).\n+* [Single-variant enums support the `#[repr(..)]` attribute](https://github.com/rust-lang/rust/pull/33355).\n+* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods](https://github.com/rust-lang/rust/pull/32908).\n * [`panic!` can be converted to a runtime abort with the\n-  `-C panic=abort` flag]\n-  (https://github.com/rust-lang/rust/pull/32900).\n+  `-C panic=abort` flag](https://github.com/rust-lang/rust/pull/32900).\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Add a new crate type, 'cdylib']\n-  (https://github.com/rust-lang/rust/pull/33553).\n+* [Add a new crate type, 'cdylib'](https://github.com/rust-lang/rust/pull/33553).\n   cdylibs are dynamic libraries suitable for loading by non-Rust hosts.\n   [RFC 1510](https://github.com/rust-lang/rfcs/blob/master/text/1510-rdylib.md).\n   Note that Cargo does not yet directly support cdylibs.\n@@ -1411,242 +1261,146 @@ Stabilized APIs\n * `os::windows::fs::OpenOptionsExt::attributes`\n * `os::windows::fs::OpenOptionsExt::security_qos_flags`\n * `os::unix::fs::OpenOptionsExt::custom_flags`\n-* [`sync::Weak::new`]\n-  (http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n+* [`sync::Weak::new`](http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n * `Default for sync::Weak`\n-* [`panic::set_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n-* [`panic::take_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n-* [`panic::PanicInfo`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n-* [`panic::PanicInfo::payload`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n-* [`panic::PanicInfo::location`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n-* [`panic::Location`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html)\n-* [`panic::Location::file`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n-* [`panic::Location::line`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n-* [`ffi::CStr::from_bytes_with_nul`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n-* [`ffi::CStr::from_bytes_with_nul_unchecked`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n-* [`ffi::FromBytesWithNulError`]\n-  (http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n-* [`fs::Metadata::modified`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n-* [`fs::Metadata::accessed`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n-* [`fs::Metadata::created`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n+* [`panic::set_hook`](http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n+* [`panic::take_hook`](http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n+* [`panic::PanicInfo`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n+* [`panic::PanicInfo::payload`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n+* [`panic::PanicInfo::location`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n+* [`panic::Location`](http://doc.rust-lang.org/std/panic/struct.Location.html)\n+* [`panic::Location::file`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n+* [`panic::Location::line`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n+* [`ffi::CStr::from_bytes_with_nul`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n+* [`ffi::CStr::from_bytes_with_nul_unchecked`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n+* [`ffi::FromBytesWithNulError`](http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n+* [`fs::Metadata::modified`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n+* [`fs::Metadata::accessed`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n+* [`fs::Metadata::created`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`\n * `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`\n * `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`\n-* [`SocketAddr::is_unnamed`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n-* [`SocketAddr::as_pathname`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n-* [`UnixStream::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n-* [`UnixStream::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n-* [`UnixStream::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n-* [`UnixStream::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n-* [`UnixStream::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n-* [`UnixStream::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n-* [`UnixStream::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n-* [`UnixStream::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n+* [`SocketAddr::is_unnamed`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n+* [`SocketAddr::as_pathname`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n+* [`UnixStream::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n+* [`UnixStream::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n+* [`UnixStream::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n+* [`UnixStream::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n+* [`UnixStream::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n+* [`UnixStream::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n+* [`UnixStream::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n+* [`UnixStream::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n * Read/Write/RawFd impls for `UnixStream`\n-* [`UnixListener::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n-* [`UnixListener::accept`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n-* [`UnixListener::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n-* [`UnixListener::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n-* [`UnixListener::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n-* [`UnixListener::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n-* [`UnixListener::incoming`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n+* [`UnixListener::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n+* [`UnixListener::accept`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n+* [`UnixListener::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n+* [`UnixListener::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n+* [`UnixListener::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n+* [`UnixListener::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n+* [`UnixListener::incoming`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n * RawFd impls for `UnixListener`\n-* [`UnixDatagram::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n-* [`UnixDatagram::unbound`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n-* [`UnixDatagram::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n-* [`UnixDatagram::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n-* [`UnixDatagram::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n-* [`UnixDatagram::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n-* [`UnixDatagram::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n-* [`UnixDatagram::recv_from`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n-* [`UnixDatagram::recv`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n-* [`UnixDatagram::send_to`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n-* [`UnixDatagram::send`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n-* [`UnixDatagram::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n-* [`UnixDatagram::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n-* [`UnixDatagram::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n-* [`UnixDatagram::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n-* [`UnixDatagram::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n-* [`UnixDatagram::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n-* [`UnixDatagram::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n+* [`UnixDatagram::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n+* [`UnixDatagram::unbound`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n+* [`UnixDatagram::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n+* [`UnixDatagram::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n+* [`UnixDatagram::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n+* [`UnixDatagram::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n+* [`UnixDatagram::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n+* [`UnixDatagram::recv_from`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n+* [`UnixDatagram::recv`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n+* [`UnixDatagram::send_to`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n+* [`UnixDatagram::send`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n+* [`UnixDatagram::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n+* [`UnixDatagram::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n+* [`UnixDatagram::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n+* [`UnixDatagram::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n+* [`UnixDatagram::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n+* [`UnixDatagram::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n+* [`UnixDatagram::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n * RawFd impls for `UnixDatagram`\n * `{BTree,Hash}Map::values_mut`\n-* [`<[_]>::binary_search_by_key`]\n-  (http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n+* [`<[_]>::binary_search_by_key`](http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n \n Libraries\n ---------\n \n-* [The `abs_sub` method of floats is deprecated]\n-  (https://github.com/rust-lang/rust/pull/33664).\n+* [The `abs_sub` method of floats is deprecated](https://github.com/rust-lang/rust/pull/33664).\n   The semantics of this minor method are subtle and probably not what\n   most people want.\n-* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord]\n-  (https://github.com/rust-lang/rust/pull/33306).\n+* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord](https://github.com/rust-lang/rust/pull/33306).\n * [On Linux, if `HashMap`s can't be initialized with `getrandom` they\n   will fall back to `/dev/urandom` temporarily to avoid blocking\n-  during early boot]\n-  (https://github.com/rust-lang/rust/pull/33086).\n-* [Implemented negation for wrapping numerals]\n-  (https://github.com/rust-lang/rust/pull/33067).\n-* [Implement `Clone` for `binary_heap::IntoIter`]\n-  (https://github.com/rust-lang/rust/pull/33050).\n-* [Implement `Display` and `Hash` for `std::num::Wrapping`]\n-  (https://github.com/rust-lang/rust/pull/33023).\n-* [Add `Default` implementation for `&CStr`, `CString`]\n-  (https://github.com/rust-lang/rust/pull/32990).\n-* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`]\n-  (https://github.com/rust-lang/rust/pull/32866).\n+  during early boot](https://github.com/rust-lang/rust/pull/33086).\n+* [Implemented negation for wrapping numerals](https://github.com/rust-lang/rust/pull/33067).\n+* [Implement `Clone` for `binary_heap::IntoIter`](https://github.com/rust-lang/rust/pull/33050).\n+* [Implement `Display` and `Hash` for `std::num::Wrapping`](https://github.com/rust-lang/rust/pull/33023).\n+* [Add `Default` implementation for `&CStr`, `CString`](https://github.com/rust-lang/rust/pull/32990).\n+* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`](https://github.com/rust-lang/rust/pull/32866).\n * [Implement `Default` for `UnsafeCell`, `fmt::Error`, `Condvar`,\n-  `Mutex`, `RwLock`]\n-  (https://github.com/rust-lang/rust/pull/32785).\n+  `Mutex`, `RwLock`](https://github.com/rust-lang/rust/pull/32785).\n \n Cargo\n -----\n-* [Cargo.toml supports the `profile.*.panic` option]\n-  (https://github.com/rust-lang/cargo/pull/2687).\n+* [Cargo.toml supports the `profile.*.panic` option](https://github.com/rust-lang/cargo/pull/2687).\n   This controls the runtime behavior of the `panic!` macro\n   and can be either \"unwind\" (the default), or \"abort\".\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Don't throw away errors with `-p` arguments]\n-  (https://github.com/rust-lang/cargo/pull/2723).\n-* [Report status to stderr instead of stdout]\n-  (https://github.com/rust-lang/cargo/pull/2693).\n+* [Don't throw away errors with `-p` arguments](https://github.com/rust-lang/cargo/pull/2723).\n+* [Report status to stderr instead of stdout](https://github.com/rust-lang/cargo/pull/2693).\n * [Build scripts are passed a `CARGO_MANIFEST_LINKS` environment\n-  variable that corresponds to the `links` field of the manifest]\n-  (https://github.com/rust-lang/cargo/pull/2710).\n-* [Ban keywords from crate names]\n-  (https://github.com/rust-lang/cargo/pull/2707).\n-* [Canonicalize `CARGO_HOME` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2604).\n-* [Retry network requests]\n-  (https://github.com/rust-lang/cargo/pull/2396).\n+  variable that corresponds to the `links` field of the manifest](https://github.com/rust-lang/cargo/pull/2710).\n+* [Ban keywords from crate names](https://github.com/rust-lang/cargo/pull/2707).\n+* [Canonicalize `CARGO_HOME` on Windows](https://github.com/rust-lang/cargo/pull/2604).\n+* [Retry network requests](https://github.com/rust-lang/cargo/pull/2396).\n   By default they are retried twice, which can be customized with the\n   `net.retry` value in `.cargo/config`.\n-* [Don't print extra error info for failing subcommands]\n-  (https://github.com/rust-lang/cargo/pull/2674).\n-* [Add `--force` flag to `cargo install`]\n-  (https://github.com/rust-lang/cargo/pull/2405).\n-* [Don't use `flock` on NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2623).\n-* [Prefer building `cargo install` artifacts in temporary directories]\n-  (https://github.com/rust-lang/cargo/pull/2610).\n+* [Don't print extra error info for failing subcommands](https://github.com/rust-lang/cargo/pull/2674).\n+* [Add `--force` flag to `cargo install`](https://github.com/rust-lang/cargo/pull/2405).\n+* [Don't use `flock` on NFS mounts](https://github.com/rust-lang/cargo/pull/2623).\n+* [Prefer building `cargo install` artifacts in temporary directories](https://github.com/rust-lang/cargo/pull/2610).\n   Makes it possible to install multiple crates in parallel.\n-* [Add `cargo test --doc`]\n-  (https://github.com/rust-lang/cargo/pull/2578).\n-* [Add `cargo --explain`]\n-  (https://github.com/rust-lang/cargo/pull/2551).\n-* [Don't print warnings when `-q` is passed]\n-  (https://github.com/rust-lang/cargo/pull/2576).\n-* [Add `cargo doc --lib` and `--bin`]\n-  (https://github.com/rust-lang/cargo/pull/2577).\n-* [Don't require build script output to be UTF-8]\n-  (https://github.com/rust-lang/cargo/pull/2560).\n-* [Correctly attempt multiple git usernames]\n-  (https://github.com/rust-lang/cargo/pull/2584).\n+* [Add `cargo test --doc`](https://github.com/rust-lang/cargo/pull/2578).\n+* [Add `cargo --explain`](https://github.com/rust-lang/cargo/pull/2551).\n+* [Don't print warnings when `-q` is passed](https://github.com/rust-lang/cargo/pull/2576).\n+* [Add `cargo doc --lib` and `--bin`](https://github.com/rust-lang/cargo/pull/2577).\n+* [Don't require build script output to be UTF-8](https://github.com/rust-lang/cargo/pull/2560).\n+* [Correctly attempt multiple git usernames](https://github.com/rust-lang/cargo/pull/2584).\n \n Performance\n -----------\n \n * [rustc memory usage was reduced by refactoring the context used for\n-  type checking]\n-  (https://github.com/rust-lang/rust/pull/33425).\n+  type checking](https://github.com/rust-lang/rust/pull/33425).\n * [Speed up creation of `HashMap`s by caching the random keys used\n-  to initialize the hash state]\n-  (https://github.com/rust-lang/rust/pull/33318).\n-* [The `find` implementation for `Chain` iterators is 2x faster]\n-  (https://github.com/rust-lang/rust/pull/33289).\n-* [Trait selection optimizations speed up type checking by 15%]\n-  (https://github.com/rust-lang/rust/pull/33138).\n-* [Efficient trie lookup for boolean Unicode properties]\n-  (https://github.com/rust-lang/rust/pull/33098).\n+  to initialize the hash state](https://github.com/rust-lang/rust/pull/33318).\n+* [The `find` implementation for `Chain` iterators is 2x faster](https://github.com/rust-lang/rust/pull/33289).\n+* [Trait selection optimizations speed up type checking by 15%](https://github.com/rust-lang/rust/pull/33138).\n+* [Efficient trie lookup for boolean Unicode properties](https://github.com/rust-lang/rust/pull/33098).\n   10x faster than the previous lookup tables.\n-* [Special case `#[derive(Copy, Clone)]` to avoid bloat]\n-  (https://github.com/rust-lang/rust/pull/31414).\n+* [Special case `#[derive(Copy, Clone)]` to avoid bloat](https://github.com/rust-lang/rust/pull/31414).\n \n Usability\n ---------\n \n * Many incremental improvements to documentation and rustdoc.\n-* [rustdoc: List blanket trait impls]\n-  (https://github.com/rust-lang/rust/pull/33514).\n-* [rustdoc: Clean up ABI rendering]\n-  (https://github.com/rust-lang/rust/pull/33151).\n-* [Indexing with the wrong type produces a more informative error]\n-  (https://github.com/rust-lang/rust/pull/33401).\n-* [Improve diagnostics for constants being used in irrefutable patterns]\n-  (https://github.com/rust-lang/rust/pull/33406).\n-* [When many method candidates are in scope limit the suggestions to 10]\n-  (https://github.com/rust-lang/rust/pull/33338).\n-* [Remove confusing suggestion when calling a `fn` type]\n-  (https://github.com/rust-lang/rust/pull/33325).\n-* [Do not suggest changing `&mut self` to `&mut mut self`]\n-  (https://github.com/rust-lang/rust/pull/33319).\n+* [rustdoc: List blanket trait impls](https://github.com/rust-lang/rust/pull/33514).\n+* [rustdoc: Clean up ABI rendering](https://github.com/rust-lang/rust/pull/33151).\n+* [Indexing with the wrong type produces a more informative error](https://github.com/rust-lang/rust/pull/33401).\n+* [Improve diagnostics for constants being used in irrefutable patterns](https://github.com/rust-lang/rust/pull/33406).\n+* [When many method candidates are in scope limit the suggestions to 10](https://github.com/rust-lang/rust/pull/33338).\n+* [Remove confusing suggestion when calling a `fn` type](https://github.com/rust-lang/rust/pull/33325).\n+* [Do not suggest changing `&mut self` to `&mut mut self`](https://github.com/rust-lang/rust/pull/33319).\n \n Misc\n ----\n \n-* [Update i686-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33651).\n-* [Update aarch64-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33500).\n+* [Update i686-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33651).\n+* [Update aarch64-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33500).\n * [`std` no longer prints backtraces on platforms where the running\n   module must be loaded with `env::current_exe`, which can't be relied\n   on](https://github.com/rust-lang/rust/pull/33554).\n@@ -1657,34 +1411,24 @@ Misc\n * [The `rust-gdb` and `rust-lldb` scripts are distributed on all\n   Unix platforms](https://github.com/rust-lang/rust/pull/32835).\n * [On Unix the runtime aborts by calling `libc::abort` instead of\n-  generating an illegal instruction]\n-  (https://github.com/rust-lang/rust/pull/31457).\n+  generating an illegal instruction](https://github.com/rust-lang/rust/pull/31457).\n * [Rust is now bootstrapped from the previous release of Rust,\n-  instead of a snapshot from an arbitrary commit]\n-  (https://github.com/rust-lang/rust/pull/32942).\n+  instead of a snapshot from an arbitrary commit](https://github.com/rust-lang/rust/pull/32942).\n \n Compatibility Notes\n -------------------\n \n-* [`AtomicBool` is now bool-sized, not word-sized]\n-  (https://github.com/rust-lang/rust/pull/33579).\n+* [`AtomicBool` is now bool-sized, not word-sized](https://github.com/rust-lang/rust/pull/33579).\n * [`target_env` for Linux ARM targets is just `gnu`, not\n-  `gnueabihf`, `gnueabi`, etc]\n-  (https://github.com/rust-lang/rust/pull/33403).\n-* [Consistently panic on overflow in `Duration::new`]\n-  (https://github.com/rust-lang/rust/pull/33072).\n-* [Change `String::truncate` to panic less]\n-  (https://github.com/rust-lang/rust/pull/32977).\n-* [Add `:block` to the follow set for `:ty` and `:path`]\n-  (https://github.com/rust-lang/rust/pull/32945).\n+  `gnueabihf`, `gnueabi`, etc](https://github.com/rust-lang/rust/pull/33403).\n+* [Consistently panic on overflow in `Duration::new`](https://github.com/rust-lang/rust/pull/33072).\n+* [Change `String::truncate` to panic less](https://github.com/rust-lang/rust/pull/32977).\n+* [Add `:block` to the follow set for `:ty` and `:path`](https://github.com/rust-lang/rust/pull/32945).\n   Affects how macros are parsed.\n-* [Fix macro hygiene bug]\n-  (https://github.com/rust-lang/rust/pull/32923).\n+* [Fix macro hygiene bug](https://github.com/rust-lang/rust/pull/32923).\n * [Feature-gated attributes on macro-generated macro invocations are\n-  now rejected]\n-  (https://github.com/rust-lang/rust/pull/32791).\n-* [Suppress fallback and ambiguity errors during type inference]\n-  (https://github.com/rust-lang/rust/pull/32258).\n+  now rejected](https://github.com/rust-lang/rust/pull/32791).\n+* [Suppress fallback and ambiguity errors during type inference](https://github.com/rust-lang/rust/pull/32258).\n   This caused some minor changes to type inference.\n \n "}, {"sha": "8ace91c3d89e37f0d1b1006c9bf52fc5bf690940", "filename": "appveyor.yml", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -20,39 +20,28 @@ environment:\n \n   # 32/64-bit MinGW builds.\n   #\n-  # The MinGW builds unfortunately have to both download a custom toolchain and\n-  # avoid the one installed by AppVeyor by default. Interestingly, though, for\n-  # different reasons!\n+  # We are using MinGW with posix threads since LLVM does not compile with\n+  # the win32 threads version due to missing support for C++'s std::thread.\n   #\n-  # For 32-bit the installed gcc toolchain on AppVeyor uses the pthread\n-  # threading model. This is unfortunately not what we want, and if we compile\n-  # with it then there's lots of link errors in the standard library (undefined\n-  # references to pthread symbols).\n-  #\n-  # For 64-bit the installed gcc toolchain is currently 5.3.0 which\n-  # unfortunately segfaults on Windows with --enable-llvm-assertions (segfaults\n-  # in LLVM). See rust-lang/rust#28445 for more information, but to work around\n-  # this we go back in time to 4.9.2 specifically.\n+  # Instead of relying on the MinGW version installed on appveryor we download\n+  # and install one ourselves so we won't be surprised by changes to appveyor's\n+  # build image.\n   #\n   # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n   # bucket, but they cleraly didn't originate there! The downloads originally\n   # came from the mingw-w64 SourceForge download site. Unfortunately\n   # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n-  #\n-  # And as a final point of note, the 32-bit MinGW build using the makefiles do\n-  # *not* use debug assertions and llvm assertions. This is because they take\n-  # too long on appveyor and this is tested by rustbuild below.\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n     SCRIPT: python x.py test\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: i686-6.3.0-release-win32-dwarf-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: x86_64-6.3.0-release-win32-seh-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n \n   # 32/64 bit MSVC and GNU deployment\n@@ -68,17 +57,17 @@ environment:\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended\n     SCRIPT: python x.py dist\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: i686-6.3.0-release-win32-dwarf-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended --enable-ninja\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n-    MINGW_ARCHIVE: x86_64-6.3.0-release-win32-seh-rt_v5-rev1.7z\n+    MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n     DEPLOY: 1\n \n@@ -107,6 +96,26 @@ install:\n   - if defined MINGW_URL 7z x -y %MINGW_ARCHIVE% > nul\n   - if defined MINGW_URL set PATH=%CD%\\%MINGW_DIR%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n+  # Here we do a pretty heinous thing which is to mangle the MinGW installation\n+  # we just had above. Currently, as of this writing, we're using MinGW-w64\n+  # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n+  # be the first version which contains a fix for #40546, builds randomly\n+  # failing during LLVM due to ar.exe/ranlib.exe failures.\n+  #\n+  # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+  # to contain a regression in gdb (#40184). As a result if we were to use the\n+  # gdb provided (7.11.1) then we would fail all debuginfo tests.\n+  #\n+  # In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+  # avoid disabling gdb tests we download an *old* version of gdb, specifically\n+  # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+  # with the 6.2.0 gdb to get tests passing.\n+  #\n+  # Note that we don't literally overwrite the gdb.exe binary because it appears\n+  # to just use gdborig.exe, so that's the binary we deal with instead.\n+  - if defined MINGW_URL appveyor-retry appveyor DownloadFile %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\n+  - if defined MINGW_URL mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n+\n   # Otherwise pull in the MinGW installed on appveyor\n   - if NOT defined MINGW_URL set PATH=C:\\msys64\\mingw%MSYS_BITS%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n@@ -115,15 +124,16 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-pc-windows-msvc\n-  - mv 2017-03-22-sccache-x86_64-pc-windows-msvc sccache.exe\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-pc-windows-msvc\n+  - mv 2017-04-29-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja\n   #\n   # Note that this is originally from the github releases patch of Ninja\n   - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-15-ninja-win.zip\n   - 7z x 2017-03-15-ninja-win.zip\n+  - set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n   # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n \n   # Install InnoSetup to get `iscc` used to produce installers\n@@ -141,19 +151,14 @@ install:\n   - set SCCACHE_ERROR_LOG=%CD%/sccache.log\n \n test_script:\n-  - appveyor-retry sh -c 'git submodule deinit -f . && git submodule update --init'\n+  - if not exist C:\\cache\\rustsrc\\NUL mkdir C:\\cache\\rustsrc\n+  - sh src/ci/init_repo.sh . /c/cache/rustsrc\n   - set SRC=.\n   - set NO_CCACHE=1\n   - sh src/ci/run.sh\n \n on_failure:\n-  - cat %CD%/sccache.log\n-\n-cache:\n-  - \"build/i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-  - \"build/x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-  - \"i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n-  - \"x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n+  - cat %CD%\\sccache.log || exit 0\n \n branches:\n   only:"}, {"sha": "c995e9eb5acf3976ae8674a0dc6d9e958053d9fd", "filename": "cargo", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=e406cd1ec9abb77236318db30e362e4654411a1a", "patch": "@@ -1 +0,0 @@\n-Subproject commit c995e9eb5acf3976ae8674a0dc6d9e958053d9fd"}, {"sha": "db41f0dfb94f388be9b8c405fa34def58bf29b62", "filename": "configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -445,7 +445,6 @@ opt dist-host-only 0 \"only install bins for the host architecture\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-version-check 1 \"check if the LLVM version is supported, build anyway\"\n opt codegen-tests 1 \"run the src/test/codegen tests\"\n-opt save-analysis 0 \"save API analysis data\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\"\n opt locked-deps 0 \"force Cargo.lock to be up to date\"\n@@ -480,6 +479,7 @@ valopt i686-linux-android-ndk \"\" \"i686-linux-android NDK standalone path\"\n valopt arm-linux-androideabi-ndk \"\" \"arm-linux-androideabi NDK standalone path\"\n valopt armv7-linux-androideabi-ndk \"\" \"armv7-linux-androideabi NDK standalone path\"\n valopt aarch64-linux-android-ndk \"\" \"aarch64-linux-android NDK standalone path\"\n+valopt x86_64-linux-android-ndk \"\" \"x86_64-linux-android NDK standalone path\"\n valopt nacl-cross-path  \"\" \"NaCl SDK path (Pepper Canary is recommended). Must be absolute!\"\n valopt musl-root \"/usr/local\" \"MUSL root installation directory (deprecated)\"\n valopt musl-root-x86_64 \"\" \"x86_64-unknown-linux-musl install directory\"\n@@ -510,7 +510,6 @@ valopt default-ar     \"ar\" \"the default ar\"\n opt_nosave manage-submodules 1 \"let the build manage the git submodules\"\n opt_nosave clang 0 \"prefer clang to gcc for building the runtime\"\n opt_nosave jemalloc 1 \"build liballoc with jemalloc\"\n-opt elf-tls 1 \"elf thread local storage on platforms where supported\"\n opt full-bootstrap 0 \"build three compilers instead of two\"\n opt extended 0 \"build an extended rust tool set\"\n \n@@ -747,6 +746,7 @@ putvar CFG_AARCH64_LINUX_ANDROID_NDK\n putvar CFG_ARM_LINUX_ANDROIDEABI_NDK\n putvar CFG_ARMV7_LINUX_ANDROIDEABI_NDK\n putvar CFG_I686_LINUX_ANDROID_NDK\n+putvar CFG_X86_64_LINUX_ANDROID_NDK\n putvar CFG_NACL_CROSS_PATH\n putvar CFG_MANDIR\n putvar CFG_DOCDIR"}, {"sha": "6c80f11fa7205fdd22fd35f579134624ea6da15b", "filename": "man/rustc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -50,7 +50,7 @@ Comma separated list of types of crates for the compiler to emit.\n \\fB\\-\\-crate\\-name\\fR \\fINAME\\fR\n Specify the name of the crate being built.\n .TP\n-\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info][=\\fIPATH\\fR]\n+\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info|mir][=\\fIPATH\\fR]\n Configure the output that \\fBrustc\\fR will produce. Each emission may also have\n an optional explicit output \\fIPATH\\fR specified for that particular emission\n kind. This path takes precedence over the \\fB-o\\fR option."}, {"sha": "5fa0829f2f8d1ffdf00eef6ad3493075d1b561c2", "filename": "src/Cargo.lock", "status": "modified", "additions": 77, "deletions": 73, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -8,7 +8,7 @@ dependencies = [\n \n [[package]]\n name = \"aho-corasick\"\n-version = \"0.6.2\"\n+version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -27,7 +27,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -65,7 +65,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"bitflags\"\n-version = \"0.8.0\"\n+version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -75,10 +75,10 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -104,12 +104,12 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"clap\"\n-version = \"2.21.1\"\n+version = \"2.22.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -122,7 +122,7 @@ name = \"cmake\"\n version = \"0.1.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -140,14 +140,15 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n- \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -158,17 +159,14 @@ name = \"core\"\n version = \"0.0.0\"\n \n [[package]]\n-name = \"dtoa\"\n-version = \"0.4.1\"\n+name = \"diff\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"env_logger\"\n-version = \"0.3.5\"\n+name = \"dtoa\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"env_logger\"\n@@ -196,7 +194,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -205,7 +203,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.44\"\n+version = \"0.3.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -223,10 +221,10 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"handlebars\"\n-version = \"0.25.1\"\n+version = \"0.25.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -251,7 +249,7 @@ dependencies = [\n \n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.4\"\n+version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -270,23 +268,19 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"linkchecker\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"log\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"log\"\n version = \"0.3.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.0.18\"\n+version = \"0.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -311,7 +305,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"num_cpus\"\n-version = \"0.2.13\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -371,12 +365,12 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"qemu-test-client\"\n-version = \"0.1.0\"\n-\n-[[package]]\n-name = \"qemu-test-server\"\n-version = \"0.1.0\"\n+name = \"pulldown-cmark\"\n+version = \"0.0.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"quick-error\"\n@@ -395,7 +389,7 @@ name = \"regex\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -407,6 +401,14 @@ name = \"regex-syntax\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"remote-test-client\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"remote-test-server\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"rls-data\"\n version = \"0.1.0\"\n@@ -428,8 +430,8 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mdbook 0.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -439,7 +441,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -479,7 +481,7 @@ dependencies = [\n name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -493,7 +495,7 @@ name = \"rustc_borrowck\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -507,8 +509,7 @@ name = \"rustc_const_eval\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -530,7 +531,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n ]\n \n@@ -539,8 +540,9 @@ name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro_plugin 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -579,7 +581,7 @@ name = \"rustc_incremental\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -591,7 +593,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -604,7 +606,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -623,7 +625,7 @@ name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -642,7 +644,7 @@ name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -666,7 +668,7 @@ dependencies = [\n name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -705,7 +707,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -716,11 +718,12 @@ dependencies = [\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -730,11 +733,10 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -762,10 +764,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -780,18 +781,20 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_driver 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_lint 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_resolve 0.0.0\",\n  \"rustc_trans 0.0.0\",\n+ \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -828,7 +831,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -857,7 +860,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -870,7 +873,7 @@ name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -988,31 +991,32 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n-\"checksum aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0638fd549427caa90c499814196d1b9e3725eb4d15d7339d6de073a680ed0ca2\"\n+\"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n \"checksum atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d912da0db7fa85514874458ca3651fe2cddace8d0b0505571dbdcd41ab490159\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n-\"checksum bitflags 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e1ab483fc81a8143faa7203c4a3c02888ebd1a782e37e41fa34753ba9a162\"\n-\"checksum clap 2.21.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74a80f603221c9cd9aa27a28f52af452850051598537bb6b359c38a7d61e5cda\"\n+\"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n+\"checksum clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e17a4a72ffea176f77d6e2db609c6c919ef221f23862c9915e687fb54d833485\"\n \"checksum cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d18d68987ed4c516dcc3e7913659bfa4076f5182eea4a7e0038bb060953e76ac\"\n+\"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n-\"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a32cd40070d7611ab76343dcb3204b2bb28c8a9450989a83a3d590248142f439\"\n+\"checksum gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40899336fb50db0c78710f53e87afc54d8c7266fb76262fecc78ca1a7f09deae\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2249f6f0dc5a3bb2b3b1a8f797dfccbc4b053344d773d654ad565e51427d335\"\n+\"checksum handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"663e1728d8037fb0d4e13bcd1b1909fb5d913690a9929eb385922df157c2ff8f\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7291b1dd97d331f752620b02dfdbc231df7fc01bf282a00769e1cdb963c460dc\"\n+\"checksum lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4732c563b9a21a406565c4747daa7b46742f082911ae4753f390dc9ec7ee1a97\"\n \"checksum libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88ee81885f9f04bff991e306fea7c1c60a5f0f9e409e99f6b40e3311a3363135\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n-\"checksum mdbook 0.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06a68e8738e42b38a02755d3ce5fa12d559e17acb238e4326cbc3cc056e65280\"\n+\"checksum mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1e2e9d848514dcfad4195788d0d42ae5153a477c191d75d5b84fab10f222fbd\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n-\"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n+\"checksum num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca313f1862c7ec3e0dfe8ace9fa91b1d9cb5c84ace3d00f5ec4216238e93c167\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n \"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n \"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\""}, {"sha": "9aca3e134d6555aa6cd220675174267d3596cf11", "filename": "src/Cargo.toml", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -11,8 +11,14 @@ members = [\n   \"tools/rustbook\",\n   \"tools/tidy\",\n   \"tools/build-manifest\",\n-  \"tools/qemu-test-client\",\n-  \"tools/qemu-test-server\",\n+  \"tools/remote-test-client\",\n+  \"tools/remote-test-server\",\n+]\n+\n+# These projects have their own Cargo.lock\n+exclude = [\n+  \"tools/cargo\",\n+  \"tools/rls\",\n ]\n \n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit"}, {"sha": "1088067c2de57dce0df437d9ab661e5bd710c813", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -23,11 +23,16 @@ name = \"rustdoc\"\n path = \"bin/rustdoc.rs\"\n test = false\n \n+[[bin]]\n+name = \"sccache-plus-cl\"\n+path = \"bin/sccache-plus-cl.rs\"\n+test = false\n+\n [dependencies]\n build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.17\"\n filetime = \"0.1\"\n-num_cpus = \"0.2\"\n+num_cpus = \"1.0\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\""}, {"sha": "1ce99eb893efee2f190b351e9715c39770a6b098", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -4,10 +4,6 @@ This is an in-progress README which is targeted at helping to explain how Rust\n is bootstrapped and in general some of the technical details of the build\n system.\n \n-> **Note**: This build system is currently under active development and is not\n-> intended to be the primarily used one just yet. The makefiles are currently\n-> the ones that are still \"guaranteed to work\" as much as possible at least.\n-\n ## Using rustbuild\n \n The rustbuild build system has a primary entry point, a top level `x.py` script:"}, {"sha": "3a1a9c3e40d66066b708f48e2de876d38d7fa702", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -40,6 +40,14 @@ fn main() {\n         .arg(sysroot)\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n+\n+    // Pass the `rustbuild` feature flag to crates which rustbuild is\n+    // building. See the comment in bootstrap/lib.rs where this env var is\n+    // set for more details.\n+    if env::var_os(\"RUSTBUILD_UNSTABLE\").is_some() {\n+        cmd.arg(\"--cfg\").arg(\"rustbuild\");\n+    }\n+\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}, {"sha": "cf0c12749234c0bc7e19a91568ee3bf143419f04", "filename": "src/bootstrap/bin/sccache-plus-cl.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+\n+use std::env;\n+use std::process::{self, Command};\n+\n+fn main() {\n+    let target = env::var(\"SCCACHE_TARGET\").unwrap();\n+    // Locate the actual compiler that we're invoking\n+    env::remove_var(\"CC\");\n+    env::remove_var(\"CXX\");\n+    let mut cfg = gcc::Config::new();\n+    cfg.cargo_metadata(false)\n+       .out_dir(\"/\")\n+       .target(&target)\n+       .host(&target)\n+       .opt_level(0)\n+       .debug(false);\n+    let compiler = cfg.get_compiler();\n+\n+    // Invoke sccache with said compiler\n+    let sccache_path = env::var_os(\"SCCACHE_PATH\").unwrap();\n+    let mut cmd = Command::new(&sccache_path);\n+    cmd.arg(compiler.path());\n+    for &(ref k, ref v) in compiler.env() {\n+        cmd.env(k, v);\n+    }\n+    for arg in env::args().skip(1) {\n+        cmd.arg(arg);\n+    }\n+\n+    let status = cmd.status().expect(\"failed to spawn\");\n+    process::exit(status.code().unwrap_or(2))\n+}"}, {"sha": "ad3cf31c1b921b50d41e0d256958eb22b841f241", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 61, "deletions": 41, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -159,51 +159,58 @@ def format_build_time(duration):\n class RustBuild(object):\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, self.stage0_rustc_date())\n-        cargo_cache = os.path.join(cache_dst, self.stage0_cargo_rev())\n+        rustc_cache = os.path.join(cache_dst, self.stage0_date())\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n-        if not os.path.exists(cargo_cache):\n-            os.makedirs(cargo_cache)\n+\n+        rustc_channel = self.stage0_rustc_channel()\n+        cargo_channel = self.stage0_cargo_channel()\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            channel = self.stage0_rustc_channel()\n-            filename = \"rust-std-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rust-std-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(),\n                    match=\"rust-std-\" + self.build,\n                    verbose=self.verbose)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"rustc\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/rustc\")\n             self.fix_executable(self.bin_root() + \"/bin/rustdoc\")\n             with open(self.rustc_stamp(), 'w') as f:\n-                f.write(self.stage0_rustc_date())\n+                f.write(self.stage0_date())\n+\n+            if \"pc-windows-gnu\" in self.build:\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+                url = self._download_url + \"/dist/\" + self.stage0_date()\n+                tarball = os.path.join(rustc_cache, filename)\n+                if not os.path.exists(tarball):\n+                    get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n+                unpack(tarball, self.bin_root(), match=\"rust-mingw\", verbose=self.verbose)\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n-            filename = \"cargo-nightly-{}.tar.gz\".format(self.build)\n-            url = \"https://s3.amazonaws.com/rust-lang-ci/cargo-builds/\" + self.stage0_cargo_rev()\n-            tarball = os.path.join(cargo_cache, filename)\n+            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n+            tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"cargo\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/cargo\")\n             with open(self.cargo_stamp(), 'w') as f:\n-                f.write(self.stage0_cargo_rev())\n+                f.write(self.stage0_date())\n \n     def fix_executable(self, fname):\n         # If we're on NixOS we need to change the path to the dynamic loader\n@@ -258,15 +265,15 @@ def fix_executable(self, fname):\n             print(\"warning: failed to call patchelf: %s\" % e)\n             return\n \n-    def stage0_cargo_rev(self):\n-        return self._cargo_rev\n-\n-    def stage0_rustc_date(self):\n-        return self._rustc_date\n+    def stage0_date(self):\n+        return self._date\n \n     def stage0_rustc_channel(self):\n         return self._rustc_channel\n \n+    def stage0_cargo_channel(self):\n+        return self._cargo_channel\n+\n     def rustc_stamp(self):\n         return os.path.join(self.bin_root(), '.rustc-stamp')\n \n@@ -277,13 +284,13 @@ def rustc_out_of_date(self):\n         if not os.path.exists(self.rustc_stamp()) or self.clean:\n             return True\n         with open(self.rustc_stamp(), 'r') as f:\n-            return self.stage0_rustc_date() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def cargo_out_of_date(self):\n         if not os.path.exists(self.cargo_stamp()) or self.clean:\n             return True\n         with open(self.cargo_stamp(), 'r') as f:\n-            return self.stage0_cargo_rev() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def bin_root(self):\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n@@ -364,6 +371,9 @@ def build_bootstrap(self):\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n                                    (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n                                    if \"DYLD_LIBRARY_PATH\" in env else \"\"\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+                                   (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n+                                   if \"LIBRARY_PATH\" in env else \"\"\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n                       os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n@@ -401,18 +411,14 @@ def build_triple(self):\n                 raise Exception(err)\n             sys.exit(err)\n \n-        # Darwin's `uname -s` lies and always returns i386. We have to use\n-        # sysctl instead.\n-        if ostype == 'Darwin' and cputype == 'i686':\n-            args = ['sysctl', 'hw.optional.x86_64']\n-            sysctl = subprocess.check_output(args).decode(default_encoding)\n-            if ': 1' in sysctl:\n-                cputype = 'x86_64'\n-\n         # The goal here is to come up with the same triple as LLVM would,\n         # at least for the subset of platforms we're willing to target.\n         if ostype == 'Linux':\n-            ostype = 'unknown-linux-gnu'\n+            os_from_sp = subprocess.check_output(['uname', '-o']).strip().decode(default_encoding)\n+            if os_from_sp == 'Android':\n+                ostype = 'linux-android'\n+            else:\n+                ostype = 'unknown-linux-gnu'\n         elif ostype == 'FreeBSD':\n             ostype = 'unknown-freebsd'\n         elif ostype == 'DragonFly':\n@@ -469,15 +475,21 @@ def build_triple(self):\n             cputype = 'i686'\n         elif cputype in {'xscale', 'arm'}:\n             cputype = 'arm'\n-        elif cputype in {'armv6l', 'armv7l', 'armv8l'}:\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+        elif cputype == 'armv6l':\n             cputype = 'arm'\n-            ostype += 'eabihf'\n-        elif cputype == 'armv7l':\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n+        elif cputype in {'armv7l', 'armv8l'}:\n             cputype = 'armv7'\n-            ostype += 'eabihf'\n-        elif cputype == 'aarch64':\n-            cputype = 'aarch64'\n-        elif cputype == 'arm64':\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n+        elif cputype in {'aarch64', 'arm64'}:\n             cputype = 'aarch64'\n         elif cputype == 'mips':\n             if sys.byteorder == 'big':\n@@ -577,8 +589,13 @@ def bootstrap():\n             shutil.rmtree('.cargo')\n \n     data = stage0_data(rb.rust_root)\n-    rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n-    rb._cargo_rev = data['cargo']\n+    rb._date = data['date']\n+    rb._rustc_channel = data['rustc']\n+    rb._cargo_channel = data['cargo']\n+    if 'dev' in data:\n+        rb._download_url = 'https://dev-static.rust-lang.org'\n+    else:\n+        rb._download_url = 'https://static.rust-lang.org'\n \n     # Fetch/build the bootstrap\n     rb.build = rb.build_triple()\n@@ -598,16 +615,19 @@ def bootstrap():\n \n def main():\n     start_time = time()\n+    help_triggered = ('-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n         bootstrap()\n-        print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n+        if not help_triggered:\n+            print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n     except (SystemExit, KeyboardInterrupt) as e:\n         if hasattr(e, 'code') and isinstance(e.code, int):\n             exit_code = e.code\n         else:\n             exit_code = 1\n             print(e)\n-        print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n+        if not help_triggered:\n+            print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n         sys.exit(exit_code)\n \n if __name__ == '__main__':"}, {"sha": "1b9536fba357aa2f840fbaf7ead73a590aefbd78", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -23,7 +23,7 @@ use build_helper::output;\n use Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n+pub const CFG_RELEASE_NUM: &'static str = \"1.19.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release"}, {"sha": "d24bb074cd374d13bb50ad7cc8ce670f090e65c6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 78, "deletions": 125, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -28,7 +28,7 @@ use {Build, Compiler, Mode};\n use dist;\n use util::{self, dylib_path, dylib_path_var, exe};\n \n-const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n+const ADB_TEST_DIR: &'static str = \"/data/tmp/work\";\n \n /// The two modes of the test runner; tests or benchmarks.\n #[derive(Copy, Clone)]\n@@ -78,14 +78,6 @@ pub fn linkcheck(build: &Build, host: &str) {\n pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let ref compiler = Compiler::new(stage, host);\n \n-    // Configure PATH to find the right rustc. NB. we have to use PATH\n-    // and not RUSTC because the Cargo test suite has tests that will\n-    // fail if rustc is not spelled `rustc`.\n-    let path = build.sysroot(compiler).join(\"bin\");\n-    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n-    let sep = if cfg!(windows) { \";\" } else {\":\" };\n-    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n-\n     // Note that this is a short, cryptic, and not scoped directory name. This\n     // is currently to minimize the length of path on Windows where we otherwise\n     // quickly run into path name limit constraints.\n@@ -95,9 +87,35 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(compiler, &mut cmd);\n-    build.run(cmd.env(\"PATH\", newpath)\n-                 .arg(&build.cargo)\n-                 .arg(&out_dir));\n+    build.run(cmd.arg(&build.cargo)\n+                 .arg(&out_dir)\n+                 .env(\"RUSTC\", build.compiler_path(compiler))\n+                 .env(\"RUSTDOC\", build.rustdoc(compiler)))\n+}\n+\n+/// Runs `cargo test` for `cargo` packaged with Rust.\n+pub fn cargo(build: &Build, stage: u32, host: &str) {\n+    let ref compiler = Compiler::new(stage, host);\n+\n+    // Configure PATH to find the right rustc. NB. we have to use PATH\n+    // and not RUSTC because the Cargo test suite has tests that will\n+    // fail if rustc is not spelled `rustc`.\n+    let path = build.sysroot(compiler).join(\"bin\");\n+    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n+    let sep = if cfg!(windows) { \";\" } else {\":\" };\n+    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n+\n+    let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n+    cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n+\n+    // Don't build tests dynamically, just a pain to work with\n+    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+    // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n+    // available.\n+    cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n+\n+    build.run(cargo.env(\"PATH\", newpath));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n@@ -225,10 +243,10 @@ pub fn compiletest(build: &Build,\n            .arg(\"--llvm-cxxflags\").arg(\"\");\n     }\n \n-    if build.qemu_rootfs(target).is_some() {\n-        cmd.arg(\"--qemu-test-client\")\n+    if build.remote_tested(target) {\n+        cmd.arg(\"--remote-test-client\")\n            .arg(build.tool(&Compiler::new(0, &build.config.build),\n-                           \"qemu-test-client\"));\n+                           \"remote-test-client\"));\n     }\n \n     // Running a C compiler on MSVC requires a few env vars to be set, to be\n@@ -427,9 +445,7 @@ pub fn krate(build: &Build,\n     dylib_path.insert(0, build.sysroot_libdir(&compiler, target));\n     cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-    if target.contains(\"android\") ||\n-       target.contains(\"emscripten\") ||\n-       build.qemu_rootfs(target).is_some() {\n+    if target.contains(\"emscripten\") || build.remote_tested(target) {\n         cargo.arg(\"--no-run\");\n     }\n \n@@ -441,75 +457,24 @@ pub fn krate(build: &Build,\n \n     let _time = util::timeit();\n \n-    if target.contains(\"android\") {\n-        build.run(&mut cargo);\n-        krate_android(build, &compiler, target, mode);\n-    } else if target.contains(\"emscripten\") {\n+    if target.contains(\"emscripten\") {\n         build.run(&mut cargo);\n         krate_emscripten(build, &compiler, target, mode);\n-    } else if build.qemu_rootfs(target).is_some() {\n+    } else if build.remote_tested(target) {\n         build.run(&mut cargo);\n-        krate_qemu(build, &compiler, target, mode);\n+        krate_remote(build, &compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.cmd.test_args());\n         build.run(&mut cargo);\n     }\n }\n \n-fn krate_android(build: &Build,\n-                 compiler: &Compiler,\n-                 target: &str,\n-                 mode: Mode) {\n-    let mut tests = Vec::new();\n-    let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n-    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n-\n-    for test in tests {\n-        build.run(Command::new(\"adb\").arg(\"push\").arg(&test).arg(ADB_TEST_DIR));\n-\n-        let test_file_name = test.file_name().unwrap().to_string_lossy();\n-        let log = format!(\"{}/check-stage{}-T-{}-H-{}-{}.log\",\n-                          ADB_TEST_DIR,\n-                          compiler.stage,\n-                          target,\n-                          compiler.host,\n-                          test_file_name);\n-        let quiet = if build.config.quiet_tests { \"--quiet\" } else { \"\" };\n-        let program = format!(\"(cd {dir}; \\\n-                                LD_LIBRARY_PATH=./{target} ./{test} \\\n-                                    --logfile {log} \\\n-                                    {quiet} \\\n-                                    {args})\",\n-                              dir = ADB_TEST_DIR,\n-                              target = target,\n-                              test = test_file_name,\n-                              log = log,\n-                              quiet = quiet,\n-                              args = build.flags.cmd.test_args().join(\" \"));\n-\n-        let output = output(Command::new(\"adb\").arg(\"shell\").arg(&program));\n-        println!(\"{}\", output);\n-\n-        t!(fs::create_dir_all(build.out.join(\"tmp\")));\n-        build.run(Command::new(\"adb\")\n-                          .arg(\"pull\")\n-                          .arg(&log)\n-                          .arg(build.out.join(\"tmp\")));\n-        build.run(Command::new(\"adb\").arg(\"shell\").arg(\"rm\").arg(&log));\n-        if !output.contains(\"result: ok\") {\n-            panic!(\"some tests failed\");\n-        }\n-    }\n-}\n-\n fn krate_emscripten(build: &Build,\n                     compiler: &Compiler,\n                     target: &str,\n                     mode: Mode) {\n     let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n \n     for test in tests {\n@@ -525,17 +490,16 @@ fn krate_emscripten(build: &Build,\n     }\n }\n \n-fn krate_qemu(build: &Build,\n-              compiler: &Compiler,\n-              target: &str,\n-              mode: Mode) {\n+fn krate_remote(build: &Build,\n+                compiler: &Compiler,\n+                target: &str,\n+                mode: Mode) {\n     let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n \n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n-                          \"qemu-test-client\");\n+                          \"remote-test-client\");\n     for test in tests {\n         let mut cmd = Command::new(&tool);\n         cmd.arg(\"run\")\n@@ -548,7 +512,6 @@ fn krate_qemu(build: &Build,\n     }\n }\n \n-\n fn find_tests(dir: &Path,\n               target: &str,\n               dst: &mut Vec<PathBuf>) {\n@@ -566,60 +529,29 @@ fn find_tests(dir: &Path,\n     }\n }\n \n-pub fn emulator_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n-    if target.contains(\"android\") {\n-        android_copy_libs(build, compiler, target)\n-    } else if let Some(s) = build.qemu_rootfs(target) {\n-        qemu_copy_libs(build, compiler, target, s)\n-    }\n-}\n-\n-fn android_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n-    println!(\"Android copy libs to emulator ({})\", target);\n-    build.run(Command::new(\"adb\").arg(\"wait-for-device\"));\n-    build.run(Command::new(\"adb\").arg(\"remount\"));\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"rm\", \"-r\", ADB_TEST_DIR]));\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", ADB_TEST_DIR]));\n-    build.run(Command::new(\"adb\")\n-                      .arg(\"push\")\n-                      .arg(build.src.join(\"src/etc/adb_run_wrapper.sh\"))\n-                      .arg(ADB_TEST_DIR));\n-\n-    let target_dir = format!(\"{}/{}\", ADB_TEST_DIR, target);\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir[..]]));\n-\n-    for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n-        let f = t!(f);\n-        let name = f.file_name().into_string().unwrap();\n-        if util::is_dylib(&name) {\n-            build.run(Command::new(\"adb\")\n-                              .arg(\"push\")\n-                              .arg(f.path())\n-                              .arg(&target_dir));\n-        }\n+pub fn remote_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n+    if !build.remote_tested(target) {\n+        return\n     }\n-}\n \n-fn qemu_copy_libs(build: &Build,\n-                  compiler: &Compiler,\n-                  target: &str,\n-                  rootfs: &Path) {\n-    println!(\"QEMU copy libs to emulator ({})\", target);\n-    assert!(target.starts_with(\"arm\"), \"only works with arm for now\");\n+    println!(\"REMOTE copy libs to emulator ({})\", target);\n     t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n-    // Copy our freshly compiled test server over to the rootfs\n     let server = build.cargo_out(compiler, Mode::Tool, target)\n-                      .join(exe(\"qemu-test-server\", target));\n-    t!(fs::copy(&server, rootfs.join(\"testd\")));\n+                      .join(exe(\"remote-test-server\", target));\n \n     // Spawn the emulator and wait for it to come online\n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n-                          \"qemu-test-client\");\n-    build.run(Command::new(&tool)\n-                      .arg(\"spawn-emulator\")\n-                      .arg(rootfs)\n-                      .arg(build.out.join(\"tmp\")));\n+                          \"remote-test-client\");\n+    let mut cmd = Command::new(&tool);\n+    cmd.arg(\"spawn-emulator\")\n+       .arg(target)\n+       .arg(&server)\n+       .arg(build.out.join(\"tmp\"));\n+    if let Some(rootfs) = build.qemu_rootfs(target) {\n+        cmd.arg(rootfs);\n+    }\n+    build.run(&mut cmd);\n \n     // Push all our dylibs to the emulator\n     for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n@@ -645,6 +577,7 @@ pub fn distcheck(build: &Build) {\n         return\n     }\n \n+    println!(\"Distcheck\");\n     let dir = build.out.join(\"tmp\").join(\"distcheck\");\n     let _ = fs::remove_dir_all(&dir);\n     t!(fs::create_dir_all(&dir));\n@@ -662,6 +595,26 @@ pub fn distcheck(build: &Build) {\n     build.run(Command::new(build_helper::make(&build.config.build))\n                      .arg(\"check\")\n                      .current_dir(&dir));\n+\n+    // Now make sure that rust-src has all of libstd's dependencies\n+    println!(\"Distcheck rust-src\");\n+    let dir = build.out.join(\"tmp\").join(\"distcheck-src\");\n+    let _ = fs::remove_dir_all(&dir);\n+    t!(fs::create_dir_all(&dir));\n+\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-xzf\")\n+       .arg(dist::rust_src_installer(build))\n+       .arg(\"--strip-components=1\")\n+       .current_dir(&dir);\n+    build.run(&mut cmd);\n+\n+    let toml = dir.join(\"rust-src/lib/rustlib/src/rust/src/libstd/Cargo.toml\");\n+    build.run(Command::new(&build.cargo)\n+                     .arg(\"generate-lockfile\")\n+                     .arg(\"--manifest-path\")\n+                     .arg(&toml)\n+                     .current_dir(&dir));\n }\n \n /// Test the build system itself"}, {"sha": "308a0ab3076dd5421f90d17efe36562364214b8d", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -44,36 +44,38 @@ pub fn clean(build: &Build) {\n }\n \n fn rm_rf(path: &Path) {\n-    if !path.exists() {\n-        return\n-    }\n-    if path.is_file() {\n-        return do_op(path, \"remove file\", |p| fs::remove_file(p));\n-    }\n-\n-    for file in t!(fs::read_dir(path)) {\n-        let file = t!(file).path();\n+    match path.symlink_metadata() {\n+        Err(e) => {\n+            if e.kind() == ErrorKind::NotFound {\n+                return;\n+            }\n+            panic!(\"failed to get metadata for file {}: {}\", path.display(), e);\n+        },\n+        Ok(metadata) => {\n+            if metadata.file_type().is_file() || metadata.file_type().is_symlink() {\n+                do_op(path, \"remove file\", |p| fs::remove_file(p));\n+                return;\n+            }\n \n-        if file.is_dir() {\n-            rm_rf(&file);\n-        } else {\n-            // On windows we can't remove a readonly file, and git will\n-            // often clone files as readonly. As a result, we have some\n-            // special logic to remove readonly files on windows.\n-            do_op(&file, \"remove file\", |p| fs::remove_file(p));\n-        }\n-    }\n-    do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+            for file in t!(fs::read_dir(path)) {\n+                rm_rf(&t!(file).path());\n+            }\n+            do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+        },\n+    };\n }\n \n fn do_op<F>(path: &Path, desc: &str, mut f: F)\n     where F: FnMut(&Path) -> io::Result<()>\n {\n     match f(path) {\n         Ok(()) => {}\n+        // On windows we can't remove a readonly file, and git will often clone files as readonly.\n+        // As a result, we have some special logic to remove readonly files on windows.\n+        // This is also the reason that we can't use things like fs::remove_dir_all().\n         Err(ref e) if cfg!(windows) &&\n                       e.kind() == ErrorKind::PermissionDenied => {\n-            let mut p = t!(path.metadata()).permissions();\n+            let mut p = t!(path.symlink_metadata()).permissions();\n             p.set_readonly(false);\n             t!(fs::set_permissions(path, p));\n             f(path).unwrap_or_else(|e| {"}, {"sha": "c810a0e05d4d2c528b99e000eb2284632a191d50", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -115,6 +115,13 @@ pub fn std_link(build: &Build,\n     if target.contains(\"musl\") && !target.contains(\"mips\") {\n         copy_musl_third_party_objects(build, target, &libdir);\n     }\n+\n+    if build.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n+        // The sanitizers are only built in stage1 or above, so the dylibs will\n+        // be missing in stage0 and causes panic. See the `std()` function above\n+        // for reason why the sanitizers are not built in stage0.\n+        copy_apple_sanitizer_dylibs(&build.native_dir(target), \"osx\", &libdir);\n+    }\n }\n \n /// Copies the crt(1,i,n).o startup objects\n@@ -126,6 +133,18 @@ fn copy_musl_third_party_objects(build: &Build, target: &str, into: &Path) {\n     }\n }\n \n+fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n+    for &sanitizer in &[\"asan\", \"tsan\"] {\n+        let filename = format!(\"libclang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);\n+        let mut src_path = native_dir.join(sanitizer);\n+        src_path.push(\"build\");\n+        src_path.push(\"lib\");\n+        src_path.push(\"darwin\");\n+        src_path.push(&filename);\n+        copy(&src_path, &into.join(filename));\n+    }\n+}\n+\n /// Build and prepare startup objects like rsbegin.o and rsend.o\n ///\n /// These are primarily used on Windows right now for linking executables/dlls.\n@@ -151,6 +170,7 @@ pub fn build_startup_objects(build: &Build, for_compiler: &Compiler, target: &st\n         if !up_to_date(src_file, dst_file) {\n             let mut cmd = Command::new(&compiler_path);\n             build.run(cmd.env(\"RUSTC_BOOTSTRAP\", \"1\")\n+                        .arg(\"--cfg\").arg(format!(\"stage{}\", compiler.stage))\n                         .arg(\"--target\").arg(target)\n                         .arg(\"--emit=obj\")\n                         .arg(\"--out-dir\").arg(dst_dir)\n@@ -275,6 +295,7 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n         cargo.env(\"CFG_DEFAULT_AR\", s);\n     }\n     build.run(&mut cargo);\n+    update_mtime(build, &librustc_stamp(build, compiler, target));\n }\n \n /// Same as `std_link`, only for librustc\n@@ -305,6 +326,12 @@ fn libtest_stamp(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n     build.cargo_out(compiler, Mode::Libtest, target).join(\".libtest.stamp\")\n }\n \n+/// Cargo's output path for librustc in a given stage, compiled by a particular\n+/// compiler for the specified target.\n+fn librustc_stamp(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n+    build.cargo_out(compiler, Mode::Librustc, target).join(\".librustc.stamp\")\n+}\n+\n fn compiler_file(compiler: &Path, file: &str) -> PathBuf {\n     let out = output(Command::new(compiler)\n                             .arg(format!(\"-print-file-name={}\", file)));\n@@ -407,6 +434,23 @@ fn add_to_sysroot(out_dir: &Path, sysroot_dst: &Path) {\n     }\n }\n \n+/// Build a tool in `src/tools`\n+///\n+/// This will build the specified tool with the specified `host` compiler in\n+/// `stage` into the normal cargo output directory.\n+pub fn maybe_clean_tools(build: &Build, stage: u32, target: &str, mode: Mode) {\n+    let compiler = Compiler::new(stage, &build.config.build);\n+\n+    let stamp = match mode {\n+        Mode::Libstd => libstd_stamp(build, &compiler, target),\n+        Mode::Libtest => libtest_stamp(build, &compiler, target),\n+        Mode::Librustc => librustc_stamp(build, &compiler, target),\n+        _ => panic!(),\n+    };\n+    let out_dir = build.cargo_out(&compiler, Mode::Tool, target);\n+    build.clear_if_dirty(&out_dir, &stamp);\n+}\n+\n /// Build a tool in `src/tools`\n ///\n /// This will build the specified tool with the specified `host` compiler in\n@@ -416,20 +460,8 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n \n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    // FIXME: need to clear out previous tool and ideally deps, may require\n-    //        isolating output directories or require a pseudo shim step to\n-    //        clear out all the info.\n-    //\n-    //        Maybe when libstd is compiled it should clear out the rustc of the\n-    //        corresponding stage?\n-    // let out_dir = build.cargo_out(stage, &host, Mode::Librustc, target);\n-    // build.clear_if_dirty(&out_dir, &libstd_stamp(build, stage, &host, target));\n-\n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n-    let mut dir = build.src.join(tool);\n-    if !dir.exists() {\n-        dir = build.src.join(\"src/tools\").join(tool);\n-    }\n+    let dir = build.src.join(\"src/tools\").join(tool);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n     // We don't want to build tools dynamically as they'll be running across"}, {"sha": "34fbc33d981afddfdc8af7662b85e2ed82a885d4", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -74,7 +74,6 @@ pub struct Config {\n     pub rustc_default_ar: Option<String>,\n     pub rust_optimize_tests: bool,\n     pub rust_debuginfo_tests: bool,\n-    pub rust_save_analysis: bool,\n     pub rust_dist_src: bool,\n \n     pub build: String,\n@@ -226,7 +225,6 @@ struct Rust {\n     optimize_tests: Option<bool>,\n     debuginfo_tests: Option<bool>,\n     codegen_tests: Option<bool>,\n-    save_analysis: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -352,7 +350,6 @@ impl Config {\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n-            set(&mut config.rust_save_analysis, rust.save_analysis);\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.debug_jemalloc, rust.debug_jemalloc);\n             set(&mut config.use_jemalloc, rust.use_jemalloc);\n@@ -460,7 +457,6 @@ impl Config {\n                 (\"LOCAL_REBUILD\", self.local_rebuild),\n                 (\"NINJA\", self.ninja),\n                 (\"CODEGEN_TESTS\", self.codegen_tests),\n-                (\"SAVE_ANALYSIS\", self.rust_save_analysis),\n                 (\"LOCKED_DEPS\", self.locked_deps),\n                 (\"VENDOR\", self.vendor),\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),\n@@ -574,6 +570,12 @@ impl Config {\n                                      .or_insert(Target::default());\n                     target.ndk = Some(parse_configure_path(value));\n                 }\n+                \"CFG_X86_64_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n+                    let target = \"x86_64-linux-android\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.ndk = Some(parse_configure_path(value));\n+                }\n                 \"CFG_LOCAL_RUST_ROOT\" if value.len() > 0 => {\n                     let path = parse_configure_path(value);\n                     self.rustc = Some(push_exe_path(path.clone(), &[\"bin\", \"rustc\"]));"}, {"sha": "0309eca0e5deaec6a4f94081843386434397b684", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -51,7 +51,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly\n@@ -234,9 +234,6 @@\n # saying that the FileCheck executable is missing, you may want to disable this.\n #codegen-tests = true\n \n-# Flag indicating whether the API analysis data should be saved.\n-#save-analysis = false\n-\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "1b69f7413b569744664e1990a2c70c825a250503", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 159, "deletions": 54, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -39,6 +39,8 @@ use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n fn pkgname(build: &Build, component: &str) -> String {\n     if component == \"cargo\" {\n         format!(\"{}-{}\", component, build.cargo_package_vers())\n+    } else if component == \"rls\" {\n+        format!(\"{}-{}\", component, build.package_vers(&build.release_num(\"rls\")))\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, build.rust_package_vers())\n@@ -252,7 +254,12 @@ pub fn debugger_scripts(build: &Build,\n         install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n     };\n     if host.contains(\"windows-msvc\") {\n-        // no debugger scripts\n+        // windbg debugger scripts\n+        install(&build.src.join(\"src/etc/rust-windbg.cmd\"), &sysroot.join(\"bin\"),\n+            0o755);\n+\n+        cp_debugger_script(\"natvis/libcore.natvis\");\n+        cp_debugger_script(\"natvis/libcollections.natvis\");\n     } else {\n         cp_debugger_script(\"debugger_pretty_printers_common.py\");\n \n@@ -308,22 +315,26 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     t!(fs::remove_dir_all(&image));\n }\n \n+/// The path to the complete rustc-src tarball\n pub fn rust_src_location(build: &Build) -> PathBuf {\n     let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n     distdir(build).join(&format!(\"{}.tar.gz\", plain_name))\n }\n \n+/// The path to the rust-src component installer\n+pub fn rust_src_installer(build: &Build) -> PathBuf {\n+    let name = pkgname(build, \"rust-src\");\n+    distdir(build).join(&format!(\"{}.tar.gz\", name))\n+}\n+\n /// Creates a tarball of save-analysis metadata, if available.\n pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n-    if !build.config.rust_save_analysis {\n-        return\n-    }\n-\n+    assert!(build.config.extended);\n     println!(\"Dist analysis\");\n \n     if compiler.host != build.config.build {\n         println!(\"\\tskipping, not a build host\");\n-        return\n+        return;\n     }\n \n     // Package save-analysis from stage1 if not doing a full bootstrap, as the\n@@ -370,13 +381,11 @@ pub fn rust_src(build: &Build) {\n \n     println!(\"Dist src\");\n \n-    let name = pkgname(build, \"rust-src\");\n-    let image = tmpdir(build).join(format!(\"{}-image\", name));\n-    let _ = fs::remove_dir_all(&image);\n-\n-    let dst = image.join(\"lib/rustlib/src\");\n-    let dst_src = dst.join(\"rust\");\n-    t!(fs::create_dir_all(&dst_src));\n+    // Make sure that the root folder of tarball has the correct name\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n \n     // This is the set of root paths which will become part of the source package\n     let src_files = [\n@@ -392,7 +401,6 @@ pub fn rust_src(build: &Build) {\n     let src_dirs = [\n         \"man\",\n         \"src\",\n-        \"cargo\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -424,38 +432,94 @@ pub fn rust_src(build: &Build) {\n \n     // Copy the directories using our filter\n     for item in &src_dirs {\n-        let dst = &dst_src.join(item);\n+        let dst = &plain_dst_src.join(item);\n         t!(fs::create_dir(dst));\n         cp_filtered(&build.src.join(item), dst, &filter_fn);\n     }\n     // Copy the files normally\n     for item in &src_files {\n-        copy(&build.src.join(item), &dst_src.join(item));\n+        copy(&build.src.join(item), &plain_dst_src.join(item));\n     }\n \n-    // Get cargo-vendor installed, if it isn't already.\n-    let mut has_cargo_vendor = false;\n-    let mut cmd = Command::new(&build.cargo);\n-    for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n-        has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n-    }\n-    if !has_cargo_vendor {\n+    // If we're building from git sources, we need to vendor a complete distribution.\n+    if build.src_is_git {\n+        // Get cargo-vendor installed, if it isn't already.\n+        let mut has_cargo_vendor = false;\n         let mut cmd = Command::new(&build.cargo);\n-        cmd.arg(\"install\")\n-           .arg(\"--force\")\n-           .arg(\"--debug\")\n-           .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-           .arg(\"cargo-vendor\")\n-           .env(\"RUSTC\", &build.rustc);\n+        for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n+            has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n+        }\n+        if !has_cargo_vendor {\n+            let mut cmd = Command::new(&build.cargo);\n+            cmd.arg(\"install\")\n+               .arg(\"--force\")\n+               .arg(\"--debug\")\n+               .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n+               .arg(\"cargo-vendor\")\n+               .env(\"RUSTC\", &build.rustc);\n+            build.run(&mut cmd);\n+        }\n+\n+        // Vendor all Cargo dependencies\n+        let mut cmd = Command::new(&build.cargo);\n+        cmd.arg(\"vendor\")\n+           .current_dir(&plain_dst_src.join(\"src\"));\n         build.run(&mut cmd);\n     }\n \n-    // Vendor all Cargo dependencies\n-    let mut cmd = Command::new(&build.cargo);\n-    cmd.arg(\"vendor\")\n-       .current_dir(&dst_src.join(\"src\"));\n+    // Create the version file\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+\n+    // Create plain source tarball\n+    let tarball = rust_src_location(build);\n+    if let Some(dir) = tarball.parent() {\n+        t!(fs::create_dir_all(dir));\n+    }\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-czf\").arg(sanitize_sh(&tarball))\n+       .arg(&plain_name)\n+       .current_dir(tmpdir(build));\n     build.run(&mut cmd);\n \n+\n+    let name = pkgname(build, \"rust-src\");\n+    let image = tmpdir(build).join(format!(\"{}-image\", name));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"lib/rustlib/src\");\n+    let dst_src = dst.join(\"rust\");\n+    t!(fs::create_dir_all(&dst_src));\n+\n+    // This is the reduced set of paths which will become the rust-src component\n+    // (essentially libstd and all of its path dependencies)\n+    let std_src_dirs = [\n+        \"src/build_helper\",\n+        \"src/liballoc\",\n+        \"src/liballoc_jemalloc\",\n+        \"src/liballoc_system\",\n+        \"src/libcollections\",\n+        \"src/libcompiler_builtins\",\n+        \"src/libcore\",\n+        \"src/liblibc\",\n+        \"src/libpanic_abort\",\n+        \"src/libpanic_unwind\",\n+        \"src/librand\",\n+        \"src/librustc_asan\",\n+        \"src/librustc_lsan\",\n+        \"src/librustc_msan\",\n+        \"src/librustc_tsan\",\n+        \"src/libstd\",\n+        \"src/libstd_unicode\",\n+        \"src/libunwind\",\n+        \"src/rustc/libc_shim\",\n+    ];\n+\n+    for item in &std_src_dirs {\n+        let dst = &dst_src.join(item);\n+        t!(fs::create_dir_all(dst));\n+        cp_r(&plain_dst_src.join(item), dst);\n+    }\n+\n     // Create source tarball in rust-installer format\n     let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n@@ -470,23 +534,6 @@ pub fn rust_src(build: &Build) {\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n \n-    // Rename directory, so that root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n-    let plain_dst_src = tmpdir(build).join(&plain_name);\n-    let _ = fs::remove_dir_all(&plain_dst_src);\n-    t!(fs::create_dir_all(&plain_dst_src));\n-    cp_r(&dst_src, &plain_dst_src);\n-\n-    // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n-\n-    // Create plain source tarball\n-    let mut cmd = Command::new(\"tar\");\n-    cmd.arg(\"-czf\").arg(sanitize_sh(&rust_src_location(build)))\n-       .arg(&plain_name)\n-       .current_dir(tmpdir(build));\n-    build.run(&mut cmd);\n-\n     t!(fs::remove_dir_all(&image));\n     t!(fs::remove_dir_all(&plain_dst_src));\n }\n@@ -534,9 +581,9 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"cargo\");\n+    let src = build.src.join(\"src/tools/cargo\");\n     let etc = src.join(\"src/etc\");\n-    let release_num = build.cargo_release_num();\n+    let release_num = build.release_num(\"cargo\");\n     let name = pkgname(build, \"cargo\");\n     let version = build.cargo_info.version(build, &release_num);\n \n@@ -590,6 +637,55 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     build.run(&mut cmd);\n }\n \n+pub fn rls(build: &Build, stage: u32, target: &str) {\n+    assert!(build.config.extended);\n+    println!(\"Dist RLS stage{} ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n+\n+    let src = build.src.join(\"src/tools/rls\");\n+    let release_num = build.release_num(\"rls\");\n+    let name = pkgname(build, \"rls\");\n+    let version = build.rls_info.version(build, &release_num);\n+\n+    let tmp = tmpdir(build);\n+    let image = tmp.join(\"rls-image\");\n+    drop(fs::remove_dir_all(&image));\n+    t!(fs::create_dir_all(&image));\n+\n+    // Prepare the image directory\n+    let rls = build.cargo_out(&compiler, Mode::Tool, target)\n+                     .join(exe(\"rls\", target));\n+    install(&rls, &image.join(\"bin\"), 0o755);\n+    let doc = image.join(\"share/doc/rls\");\n+    install(&src.join(\"README.md\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+\n+    // Prepare the overlay\n+    let overlay = tmp.join(\"rls-overlay\");\n+    drop(fs::remove_dir_all(&overlay));\n+    t!(fs::create_dir_all(&overlay));\n+    install(&src.join(\"README.md\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n+    t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n+    // Generate the installer tarball\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=RLS-ready-to-serve.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(\"--component-name=rls\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+}\n+\n /// Creates a combined installer for the specified target in the provided stage.\n pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n@@ -601,6 +697,12 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     let cargo_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"cargo\"),\n                                             target));\n+    let rls_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                          pkgname(build, \"rls\"),\n+                                          target));\n+    let analysis_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                               pkgname(build, \"rust-analysis\"),\n+                                               target));\n     let docs_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                            pkgname(build, \"rust-docs\"),\n                                            target));\n@@ -628,9 +730,11 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n     // the std files during uninstall. To do this ensure that rustc comes\n     // before rust-std in the list below.\n-    let mut input_tarballs = format!(\"{},{},{},{}\",\n+    let mut input_tarballs = format!(\"{},{},{},{},{},{}\",\n                                      sanitize_sh(&rustc_installer),\n                                      sanitize_sh(&cargo_installer),\n+                                     sanitize_sh(&rls_installer),\n+                                     sanitize_sh(&analysis_installer),\n                                      sanitize_sh(&docs_installer),\n                                      sanitize_sh(&std_installer));\n     if target.contains(\"pc-windows-gnu\") {\n@@ -943,7 +1047,8 @@ pub fn hash_and_sign(build: &Build) {\n     cmd.arg(distdir(build));\n     cmd.arg(today.trim());\n     cmd.arg(build.rust_package_vers());\n-    cmd.arg(build.package_vers(&build.cargo_release_num()));\n+    cmd.arg(build.package_vers(&build.release_num(\"cargo\")));\n+    cmd.arg(build.package_vers(&build.release_num(\"rls\")));\n     cmd.arg(addr);\n \n     t!(fs::create_dir_all(distdir(build)));"}, {"sha": "a1466d68a135aa4950b13eb9771c182626c162a8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 155, "deletions": 131, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -18,7 +18,7 @@ use std::fs;\n use std::path::PathBuf;\n use std::process;\n \n-use getopts::{Matches, Options};\n+use getopts::Options;\n \n use Build;\n use config::Config;\n@@ -75,7 +75,22 @@ pub enum Subcommand {\n \n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n+        let mut extra_help = String::new();\n+        let mut subcommand_help = format!(\"\\\n+Usage: x.py <subcommand> [options] [<paths>...]\n+\n+Subcommands:\n+    build       Compile either the compiler or libraries\n+    test        Build and run some test suites\n+    bench       Build and run some benchmarks\n+    doc         Build documentation\n+    clean       Clean out build directories\n+    dist        Build and/or install distribution artifacts\n+\n+To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n+\n         let mut opts = Options::new();\n+        // Options common to all subcommands\n         opts.optflagmulti(\"v\", \"verbose\", \"use verbose output (-vv for very verbose)\");\n         opts.optflag(\"i\", \"incremental\", \"use incremental compilation\");\n         opts.optopt(\"\", \"config\", \"TOML configuration file for build\", \"FILE\");\n@@ -89,21 +104,83 @@ impl Flags {\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n \n-        let usage = |n, opts: &Options| -> ! {\n-            let command = args.get(0).map(|s| &**s);\n-            let brief = format!(\"Usage: x.py {} [options] [<args>...]\",\n-                                command.unwrap_or(\"<command>\"));\n+        // fn usage()\n+        let usage = |exit_code: i32, opts: &Options, subcommand_help: &str, extra_help: &str| -> ! {\n+            println!(\"{}\", opts.usage(subcommand_help));\n+            if !extra_help.is_empty() {\n+                println!(\"{}\", extra_help);\n+            }\n+            process::exit(exit_code);\n+        };\n+\n+        // We can't use getopt to parse the options until we have completed specifying which\n+        // options are valid, but under the current implementation, some options are conditional on\n+        // the subcommand. Therefore we must manually identify the subcommand first, so that we can\n+        // complete the definition of the options.  Then we can use the getopt::Matches object from\n+        // there on out.\n+        let mut possible_subcommands = args.iter().collect::<Vec<_>>();\n+        possible_subcommands.retain(|&s|\n+                                           (s == \"build\")\n+                                        || (s == \"test\")\n+                                        || (s == \"bench\")\n+                                        || (s == \"doc\")\n+                                        || (s == \"clean\")\n+                                        || (s == \"dist\"));\n+        let subcommand = match possible_subcommands.first() {\n+            Some(s) => s,\n+            None => {\n+                // No subcommand -- show the general usage and subcommand help\n+                println!(\"{}\\n\", subcommand_help);\n+                process::exit(0);\n+            }\n+        };\n \n-            println!(\"{}\", opts.usage(&brief));\n-            match command {\n-                Some(\"build\") => {\n-                    println!(\"\\\n+        // Some subcommands get extra options\n+        match subcommand.as_str() {\n+            \"test\"  => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"dist\"  => { opts.optflag(\"\", \"install\", \"run installer as well\"); },\n+            _ => { },\n+        };\n+\n+        // Done specifying what options are possible, so do the getopts parsing\n+        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n+            // Invalid argument/option format\n+            println!(\"\\n{}\\n\", e);\n+            usage(1, &opts, &subcommand_help, &extra_help);\n+        });\n+        // Extra sanity check to make sure we didn't hit this crazy corner case:\n+        //\n+        //     ./x.py --frobulate clean build\n+        //            ^-- option  ^     ^- actual subcommand\n+        //                        \\_ arg to option could be mistaken as subcommand\n+        let mut pass_sanity_check = true;\n+        match matches.free.get(0) {\n+            Some(check_subcommand) => {\n+                if &check_subcommand != subcommand {\n+                    pass_sanity_check = false;\n+                }\n+            },\n+            None => {\n+                pass_sanity_check = false;\n+            }\n+        }\n+        if !pass_sanity_check {\n+            println!(\"{}\\n\", subcommand_help);\n+            println!(\"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n+                      You may need to move some options to after the subcommand.\\n\");\n+            process::exit(1);\n+        }\n+        // Extra help text for some commands\n+        match subcommand.as_str() {\n+            \"build\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    the crates and/or artifacts to compile. For example:\n+    This subcommand accepts a number of paths to directories to the crates\n+    and/or artifacts to compile. For example:\n \n         ./x.py build src/libcore\n-        ./x.py build src/libproc_macro\n+        ./x.py build src/libcore src/libproc_macro\n         ./x.py build src/libstd --stage 1\n \n     If no arguments are passed then the complete artifacts for that stage are\n@@ -114,15 +191,13 @@ Arguments:\n \n     For a quick build with a usable compile, you can pass:\n \n-        ./x.py build --stage 1 src/libtest\n-\");\n-                }\n-\n-                Some(\"test\") => {\n-                    println!(\"\\\n+        ./x.py build --stage 1 src/libtest\");\n+            }\n+            \"test\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    tests that should be compiled and run. For example:\n+    This subcommand accepts a number of paths to directories to tests that\n+    should be compiled and run. For example:\n \n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n@@ -132,171 +207,120 @@ Arguments:\n     compiled and tested.\n \n         ./x.py test\n-        ./x.py test --stage 1\n-\");\n-                }\n-\n-                Some(\"doc\") => {\n-                    println!(\"\\\n+        ./x.py test --stage 1\");\n+            }\n+            \"doc\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories of\n-    documentation to build. For example:\n+    This subcommand accepts a number of paths to directories of documentation\n+    to build. For example:\n \n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n-        ./x.py doc src/libstd\n+        ./x.py doc src/doc/book src/libstd\n \n     If no arguments are passed then everything is documented:\n \n         ./x.py doc\n-        ./x.py doc --stage 1\n-\");\n-                }\n-\n-                _ => {}\n+        ./x.py doc --stage 1\");\n             }\n-\n-            if let Some(command) = command {\n-                if command == \"build\" ||\n-                   command == \"dist\" ||\n-                   command == \"doc\" ||\n-                   command == \"test\" ||\n-                   command == \"bench\" ||\n-                   command == \"clean\"  {\n-                    println!(\"Available invocations:\");\n-                    if args.iter().any(|a| a == \"-v\") {\n-                        let flags = Flags::parse(&[\"build\".to_string()]);\n-                        let mut config = Config::default();\n-                        config.build = flags.build.clone();\n-                        let mut build = Build::new(flags, config);\n-                        metadata::build(&mut build);\n-                        step::build_rules(&build).print_help(command);\n-                    } else {\n-                        println!(\"    ... elided, run `./x.py {} -h -v` to see\",\n-                                 command);\n-                    }\n-\n-                    println!(\"\");\n-                }\n-            }\n-\n-println!(\"\\\n-Subcommands:\n-    build       Compile either the compiler or libraries\n-    test        Build and run some test suites\n-    bench       Build and run some benchmarks\n-    doc         Build documentation\n-    clean       Clean out build directories\n-    dist        Build and/or install distribution artifacts\n-\n-To learn more about a subcommand, run `./x.py <command> -h`\n-\");\n-\n-            process::exit(n);\n+            _ => { }\n         };\n-        if args.len() == 0 {\n-            println!(\"a command must be passed\");\n-            usage(1, &opts);\n-        }\n-        let parse = |opts: &Options| {\n-            let m = opts.parse(&args[1..]).unwrap_or_else(|e| {\n-                println!(\"failed to parse options: {}\", e);\n-                usage(1, opts);\n-            });\n-            if m.opt_present(\"h\") {\n-                usage(0, opts);\n+        // Get any optional paths which occur after the subcommand\n+        let cwd = t!(env::current_dir());\n+        let paths = matches.free[1..].iter().map(|p| cwd.join(p)).collect::<Vec<_>>();\n+\n+\n+        // All subcommands can have an optional \"Available paths\" section\n+        if matches.opt_present(\"verbose\") {\n+            let flags = Flags::parse(&[\"build\".to_string()]);\n+            let mut config = Config::default();\n+            config.build = flags.build.clone();\n+            let mut build = Build::new(flags, config);\n+            metadata::build(&mut build);\n+            let maybe_rules_help = step::build_rules(&build).get_help(subcommand);\n+            if maybe_rules_help.is_some() {\n+                extra_help.push_str(maybe_rules_help.unwrap().as_str());\n             }\n-            return m\n-        };\n+        } else {\n+            extra_help.push_str(format!(\"Run `./x.py {} -h -v` to see a list of available paths.\",\n+                     subcommand).as_str());\n+        }\n \n-        let cwd = t!(env::current_dir());\n-        let remaining_as_path = |m: &Matches| {\n-            m.free.iter().map(|p| cwd.join(p)).collect::<Vec<_>>()\n-        };\n+        // User passed in -h/--help?\n+        if matches.opt_present(\"help\") {\n+            usage(0, &opts, &subcommand_help, &extra_help);\n+        }\n \n-        let m: Matches;\n-        let cmd = match &args[0][..] {\n+        let cmd = match subcommand.as_str() {\n             \"build\" => {\n-                m = parse(&opts);\n-                Subcommand::Build { paths: remaining_as_path(&m) }\n-            }\n-            \"doc\" => {\n-                m = parse(&opts);\n-                Subcommand::Doc { paths: remaining_as_path(&m) }\n+                Subcommand::Build { paths: paths }\n             }\n             \"test\" => {\n-                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n-                m = parse(&opts);\n                 Subcommand::Test {\n-                    paths: remaining_as_path(&m),\n-                    test_args: m.opt_strs(\"test-args\"),\n+                    paths: paths,\n+                    test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n             \"bench\" => {\n-                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n-                m = parse(&opts);\n                 Subcommand::Bench {\n-                    paths: remaining_as_path(&m),\n-                    test_args: m.opt_strs(\"test-args\"),\n+                    paths: paths,\n+                    test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n+            \"doc\" => {\n+                Subcommand::Doc { paths: paths }\n+            }\n             \"clean\" => {\n-                m = parse(&opts);\n-                if m.free.len() > 0 {\n-                    println!(\"clean takes no arguments\");\n-                    usage(1, &opts);\n+                if paths.len() > 0 {\n+                    println!(\"\\nclean takes no arguments\\n\");\n+                    usage(1, &opts, &subcommand_help, &extra_help);\n                 }\n                 Subcommand::Clean\n             }\n             \"dist\" => {\n-                opts.optflag(\"\", \"install\", \"run installer as well\");\n-                m = parse(&opts);\n                 Subcommand::Dist {\n-                    paths: remaining_as_path(&m),\n-                    install: m.opt_present(\"install\"),\n+                    paths: paths,\n+                    install: matches.opt_present(\"install\"),\n                 }\n             }\n-            \"--help\" => usage(0, &opts),\n-            cmd => {\n-                println!(\"unknown command: {}\", cmd);\n-                usage(1, &opts);\n+            _ => {\n+                usage(1, &opts, &subcommand_help, &extra_help);\n             }\n         };\n \n \n-        let cfg_file = m.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n+        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n             if fs::metadata(\"config.toml\").is_ok() {\n                 Some(PathBuf::from(\"config.toml\"))\n             } else {\n                 None\n             }\n         });\n \n-        let mut stage = m.opt_str(\"stage\").map(|j| j.parse().unwrap());\n-\n-        let incremental = m.opt_present(\"i\");\n+        let mut stage = matches.opt_str(\"stage\").map(|j| j.parse().unwrap());\n \n-        if incremental {\n+        if matches.opt_present(\"incremental\") {\n             if stage.is_none() {\n                 stage = Some(1);\n             }\n         }\n \n         Flags {\n-            verbose: m.opt_count(\"v\"),\n+            verbose: matches.opt_count(\"verbose\"),\n             stage: stage,\n-            on_fail: m.opt_str(\"on-fail\"),\n-            keep_stage: m.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n-            build: m.opt_str(\"build\").unwrap_or_else(|| {\n+            on_fail: matches.opt_str(\"on-fail\"),\n+            keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n+            build: matches.opt_str(\"build\").unwrap_or_else(|| {\n                 env::var(\"BUILD\").unwrap()\n             }),\n-            host: split(m.opt_strs(\"host\")),\n-            target: split(m.opt_strs(\"target\")),\n+            host: split(matches.opt_strs(\"host\")),\n+            target: split(matches.opt_strs(\"target\")),\n             config: cfg_file,\n-            src: m.opt_str(\"src\").map(PathBuf::from),\n-            jobs: m.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n+            src: matches.opt_str(\"src\").map(PathBuf::from),\n+            jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd: cmd,\n-            incremental: incremental,\n+            incremental: matches.opt_present(\"incremental\"),\n         }\n     }\n }"}, {"sha": "c805522fbf588d06b4676bb8bd0647fa2c1aea54", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -46,24 +46,32 @@ pub fn install(build: &Build, stage: u32, host: &str) {\n     let empty_dir = build.out.join(\"tmp/empty_dir\");\n     t!(fs::create_dir_all(&empty_dir));\n     if build.config.docs {\n-        install_sh(&build, \"docs\", \"rust-docs\", stage, host, &prefix,\n-                   &docdir, &libdir, &mandir, &empty_dir);\n+        install_sh(&build, \"docs\", \"rust-docs\", &build.rust_package_vers(),\n+                   stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n     }\n-    if build.config.rust_save_analysis {\n-        install_sh(&build, \"analysis\", \"rust-analysis\", stage, host, &prefix,\n-                   &docdir, &libdir, &mandir, &empty_dir);\n+\n+    for target in build.config.target.iter() {\n+        install_sh(&build, \"std\", \"rust-std\", &build.rust_package_vers(),\n+                   stage, target, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+    }\n+\n+    if build.config.extended {\n+        install_sh(&build, \"cargo\", \"cargo\", &build.cargo_package_vers(),\n+                   stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+        install_sh(&build, \"rls\", \"rls\", &build.rls_package_vers(),\n+                   stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n     }\n-    install_sh(&build, \"std\", \"rust-std\", stage, host, &prefix,\n-               &docdir, &libdir, &mandir, &empty_dir);\n-    install_sh(&build, \"rustc\", \"rustc\", stage, host, &prefix,\n-               &docdir, &libdir, &mandir, &empty_dir);\n+\n+    install_sh(&build, \"rustc\", \"rustc\", &build.rust_package_vers(),\n+               stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+\n     t!(fs::remove_dir_all(&empty_dir));\n }\n \n-fn install_sh(build: &Build, package: &str, name: &str, stage: u32, host: &str,\n+fn install_sh(build: &Build, package: &str, name: &str, version: &str, stage: u32, host: &str,\n               prefix: &Path, docdir: &Path, libdir: &Path, mandir: &Path, empty_dir: &Path) {\n     println!(\"Install {} stage{} ({})\", package, stage, host);\n-    let package_name = format!(\"{}-{}-{}\", name, build.rust_package_vers(), host);\n+    let package_name = format!(\"{}-{}-{}\", name, version, host);\n \n     let mut cmd = Command::new(\"sh\");\n     cmd.current_dir(empty_dir)"}, {"sha": "017d4015134d0371e209157938c184a707d46a99", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -151,6 +151,7 @@ pub struct Build {\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n+    rls_info: channel::GitInfo,\n     local_rebuild: bool,\n \n     // Probed tools at runtime\n@@ -162,6 +163,7 @@ pub struct Build {\n     cxx: HashMap<String, gcc::Tool>,\n     crates: HashMap<String, Crate>,\n     is_sudo: bool,\n+    src_is_git: bool,\n }\n \n #[derive(Debug)]\n@@ -232,7 +234,9 @@ impl Build {\n             None => false,\n         };\n         let rust_info = channel::GitInfo::new(&src);\n-        let cargo_info = channel::GitInfo::new(&src.join(\"cargo\"));\n+        let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n+        let rls_info = channel::GitInfo::new(&src.join(\"src/tools/rls\"));\n+        let src_is_git = src.join(\".git\").exists();\n \n         Build {\n             flags: flags,\n@@ -244,13 +248,15 @@ impl Build {\n \n             rust_info: rust_info,\n             cargo_info: cargo_info,\n+            rls_info: rls_info,\n             local_rebuild: local_rebuild,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             crates: HashMap::new(),\n             lldb_version: None,\n             lldb_python_dir: None,\n             is_sudo: is_sudo,\n+            src_is_git: src_is_git,\n         }\n     }\n \n@@ -307,10 +313,7 @@ impl Build {\n             OutOfSync,\n         }\n \n-        if !self.config.submodules {\n-            return\n-        }\n-        if fs::metadata(self.src.join(\".git\")).is_err() {\n+        if !self.src_is_git || !self.config.submodules {\n             return\n         }\n         let git = || {\n@@ -461,8 +464,6 @@ impl Build {\n              .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n              .env(\"RUSTC_REAL\", self.compiler_path(compiler))\n              .env(\"RUSTC_STAGE\", stage.to_string())\n-             .env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n-             .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n              .env(\"RUSTC_CODEGEN_UNITS\",\n                   self.config.rust_codegen_units.to_string())\n              .env(\"RUSTC_DEBUG_ASSERTIONS\",\n@@ -474,6 +475,13 @@ impl Build {\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n+        // Tools don't get debuginfo right now, e.g. cargo and rls don't get\n+        // compiled with debuginfo.\n+        if mode != Mode::Tool {\n+             cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n+                  .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string());\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n@@ -545,10 +553,23 @@ impl Build {\n                  .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n         }\n \n-        if self.config.rust_save_analysis && compiler.is_final_stage(self) {\n+        if self.config.extended && compiler.is_final_stage(self) {\n             cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n         }\n \n+        // When being built Cargo will at some point call `nmake.exe` on Windows\n+        // MSVC. Unfortunately `nmake` will read these two environment variables\n+        // below and try to intepret them. We're likely being run, however, from\n+        // MSYS `make` which uses the same variables.\n+        //\n+        // As a result, to prevent confusion and errors, we remove these\n+        // variables from our environment to prevent passing MSYS make flags to\n+        // nmake, causing it to blow up.\n+        if cfg!(target_env = \"msvc\") {\n+            cargo.env_remove(\"MAKE\");\n+            cargo.env_remove(\"MAKEFLAGS\");\n+        }\n+\n         // Environment variables *required* needed throughout the build\n         //\n         // FIXME: should update code to not require this env var\n@@ -874,6 +895,13 @@ impl Build {\n         if target.contains(\"apple-darwin\") {\n             base.push(\"-stdlib=libc++\".into());\n         }\n+\n+        // Work around an apparently bad MinGW / GCC optimization,\n+        // See: http://lists.llvm.org/pipermail/cfe-dev/2016-December/051980.html\n+        // See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78936\n+        if target == \"i686-pc-windows-gnu\" {\n+            base.push(\"-fno-omit-frame-pointer\".into());\n+        }\n         return base\n     }\n \n@@ -917,6 +945,12 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns whether the target will be tested using the `remote-test-client`\n+    /// and `remote-test-server` binaries.\n+    fn remote_tested(&self, target: &str) -> bool {\n+        self.qemu_rootfs(target).is_some() || target.contains(\"android\")\n+    }\n+\n     /// Returns the root of the \"rootfs\" image that this target will be using,\n     /// if one was configured.\n     ///\n@@ -1017,7 +1051,12 @@ impl Build {\n \n     /// Returns the value of `package_vers` above for Cargo\n     fn cargo_package_vers(&self) -> String {\n-        self.package_vers(&self.cargo_release_num())\n+        self.package_vers(&self.release_num(\"cargo\"))\n+    }\n+\n+    /// Returns the value of `package_vers` above for rls\n+    fn rls_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"rls\"))\n     }\n \n     /// Returns the `version` string associated with this compiler for Rust\n@@ -1029,10 +1068,11 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n-    /// Returns the `a.b.c` version that Cargo is at.\n-    fn cargo_release_num(&self) -> String {\n+    /// Returns the `a.b.c` version that the given package is at.\n+    fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();\n-        t!(t!(File::open(self.src.join(\"cargo/Cargo.toml\"))).read_to_string(&mut toml));\n+        let toml_file_name = self.src.join(&format!(\"src/tools/{}/Cargo.toml\", package));\n+        t!(t!(File::open(toml_file_name)).read_to_string(&mut toml));\n         for line in toml.lines() {\n             let prefix = \"version = \\\"\";\n             let suffix = \"\\\"\";\n@@ -1041,7 +1081,7 @@ impl Build {\n             }\n         }\n \n-        panic!(\"failed to find version in cargo's Cargo.toml\")\n+        panic!(\"failed to find version in {}'s Cargo.toml\", package)\n     }\n \n     /// Returns whether unstable features should be enabled for the compiler"}, {"sha": "7b6b01655df585fc3f2a61c175c618177171de64", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -58,6 +58,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n     // the dependency graph and what `-p` arguments there are.\n     let mut cargo = Command::new(&build.cargo);\n     cargo.arg(\"metadata\")\n+         .arg(\"--format-version\").arg(\"1\")\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n     let output: Output = json::decode(&output).unwrap();"}, {"sha": "a5df741e2bfc83965d5f6fbc722fd90dd6c030bb", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -55,6 +55,7 @@ check:\n check-aux:\n \t$(Q)$(BOOTSTRAP) test \\\n \t\tsrc/tools/cargotest \\\n+\t\tcargo \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "3d87f701b2a56971b1c8fc34f30bf6086a72ce2f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -19,6 +19,7 @@\n //! ensure that they're always in place if needed.\n \n use std::env;\n+use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{Read, Write};\n use std::path::Path;\n@@ -81,7 +82,7 @@ pub fn llvm(build: &Build, target: &str) {\n     // NOTE: remember to also update `config.toml.example` when changing the defaults!\n     let llvm_targets = match build.config.llvm_targets {\n         Some(ref s) => s,\n-        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n+        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n     };\n \n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n@@ -129,25 +130,59 @@ pub fn llvm(build: &Build, target: &str) {\n            .define(\"LLVM_TABLEGEN\", &host);\n     }\n \n-    // MSVC handles compiler business itself\n-    if !target.contains(\"msvc\") {\n-        if let Some(ref ccache) = build.config.ccache {\n+    let sanitize_cc = |cc: &Path| {\n+        if target.contains(\"msvc\") {\n+            OsString::from(cc.to_str().unwrap().replace(\"\\\\\", \"/\"))\n+        } else {\n+            cc.as_os_str().to_owned()\n+        }\n+    };\n+\n+    let configure_compilers = |cfg: &mut cmake::Config| {\n+        // MSVC with CMake uses msbuild by default which doesn't respect these\n+        // vars that we'd otherwise configure. In that case we just skip this\n+        // entirely.\n+        if target.contains(\"msvc\") && !build.config.ninja {\n+            return\n+        }\n+\n+        let cc = build.cc(target);\n+        let cxx = build.cxx(target);\n+\n+        // Handle msvc + ninja + ccache specially (this is what the bots use)\n+        if target.contains(\"msvc\") &&\n+           build.config.ninja &&\n+           build.config.ccache.is_some() {\n+            let mut cc = env::current_exe().expect(\"failed to get cwd\");\n+            cc.set_file_name(\"sccache-plus-cl.exe\");\n+\n+           cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n+              .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cc));\n+           cfg.env(\"SCCACHE_PATH\",\n+                   build.config.ccache.as_ref().unwrap())\n+              .env(\"SCCACHE_TARGET\", target);\n+\n+        // If ccache is configured we inform the build a little differently hwo\n+        // to invoke ccache while also invoking our compilers.\n+        } else if let Some(ref ccache) = build.config.ccache {\n            cfg.define(\"CMAKE_C_COMPILER\", ccache)\n-              .define(\"CMAKE_C_COMPILER_ARG1\", build.cc(target))\n+              .define(\"CMAKE_C_COMPILER_ARG1\", sanitize_cc(cc))\n               .define(\"CMAKE_CXX_COMPILER\", ccache)\n-              .define(\"CMAKE_CXX_COMPILER_ARG1\", build.cxx(target));\n+              .define(\"CMAKE_CXX_COMPILER_ARG1\", sanitize_cc(cxx));\n         } else {\n-           cfg.define(\"CMAKE_C_COMPILER\", build.cc(target))\n-              .define(\"CMAKE_CXX_COMPILER\", build.cxx(target));\n+           cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n+              .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n         }\n-        cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n \n+        cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n         cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n         cfg.define(\"CMAKE_CXX_FLAGS\", build.cflags(target).join(\" \"));\n-    }\n+    };\n+\n+    configure_compilers(&mut cfg);\n \n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n-        cfg.env(\"RUST_LOG\", \"sccache=debug\");\n+        cfg.env(\"RUST_LOG\", \"sccache=info\");\n     }\n \n     // FIXME: we don't actually need to build all LLVM tools and all LLVM\n@@ -306,7 +341,7 @@ pub fn openssl(build: &Build, target: &str) {\n     println!(\"Configuring openssl for {}\", target);\n     build.run_quiet(&mut configure);\n     println!(\"Building openssl for {}\", target);\n-    build.run_quiet(Command::new(\"make\").current_dir(&obj));\n+    build.run_quiet(Command::new(\"make\").arg(\"-j1\").current_dir(&obj));\n     println!(\"Installing openssl for {}\", target);\n     build.run_quiet(Command::new(\"make\").arg(\"install\").current_dir(&obj));\n "}, {"sha": "df6378a970bd4363a0a0065713ab1987adfdadd2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -65,26 +65,25 @@ pub fn check(build: &mut Build) {\n \n     // If we've got a git directory we're gona need git to update\n     // submodules and learn about various other aspects.\n-    if fs::metadata(build.src.join(\".git\")).is_ok() {\n+    if build.src_is_git {\n         need_cmd(\"git\".as_ref());\n     }\n \n-    // We need cmake, but only if we're actually building LLVM\n-    for host in build.config.host.iter() {\n-        if let Some(config) = build.config.target_config.get(host) {\n-            if config.llvm_config.is_some() {\n-                continue\n-            }\n-        }\n+    // We need cmake, but only if we're actually building LLVM or sanitizers.\n+    let building_llvm = build.config.host.iter()\n+        .filter_map(|host| build.config.target_config.get(host))\n+        .any(|config| config.llvm_config.is_none());\n+    if building_llvm || build.config.sanitizers {\n         need_cmd(\"cmake\".as_ref());\n-        if build.config.ninja {\n-            // Some Linux distros rename `ninja` to `ninja-build`.\n-            // CMake can work with either binary name.\n-            if have_cmd(\"ninja-build\".as_ref()).is_none() {\n-                need_cmd(\"ninja\".as_ref());\n-            }\n+    }\n+\n+    // Ninja is currently only used for LLVM itself.\n+    if building_llvm && build.config.ninja {\n+        // Some Linux distros rename `ninja` to `ninja-build`.\n+        // CMake can work with either binary name.\n+        if have_cmd(\"ninja-build\".as_ref()).is_none() {\n+            need_cmd(\"ninja\".as_ref());\n         }\n-        break\n     }\n \n     if build.config.python.is_none() {"}, {"sha": "970c0bc565d864c533c255483c8a0e63a1d12d8c", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 202, "deletions": 67, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -26,7 +26,7 @@\n //! along with the actual implementation elsewhere. You can find more comments\n //! about how to define rules themselves below.\n \n-use std::collections::{BTreeMap, HashSet};\n+use std::collections::{BTreeMap, HashSet, HashMap};\n use std::mem;\n \n use check::{self, TestKind};\n@@ -137,7 +137,9 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         while let Some(krate) = list.pop() {\n             let default = krate == name;\n             let krate = &build.crates[krate];\n-            let path = krate.path.strip_prefix(&build.src).unwrap();\n+            let path = krate.path.strip_prefix(&build.src)\n+                // This handles out of tree paths\n+                .unwrap_or(&krate.path);\n             ret.push((krate, path.to_str().unwrap(), default));\n             for dep in krate.deps.iter() {\n                 if visited.insert(dep) && dep != \"build_helper\" {\n@@ -305,7 +307,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  .dep(|s| s.name(\"libtest\"))\n                  .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n                  .dep(|s| s.name(\"test-helpers\"))\n-                 .dep(|s| s.name(\"emulator-copy-libs\"))\n+                 .dep(|s| s.name(\"remote-copy-libs\"))\n                  .default(mode != \"pretty\") // pretty tests don't run everywhere\n                  .run(move |s| {\n                      check::compiletest(build, &s.compiler(), s.target, mode, dir)\n@@ -344,7 +346,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n              .dep(|s| s.name(\"test-helpers\"))\n              .dep(|s| s.name(\"debugger-scripts\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n                                          \"debuginfo-gdb\", \"debuginfo\"));\n         let mut rule = rules.test(\"check-debuginfo\", \"src/test/debuginfo\");\n@@ -398,14 +400,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Test, None));\n@@ -414,44 +416,44 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.bench(&krate.bench_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Bench,\n                                         Some(&krate.name)));\n     }\n     rules.bench(\"bench-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Bench, None));\n \n     for (krate, path, _default) in krates(\"test\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libtest, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-test-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libtest, TestKind::Test, None));\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"librustc\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .host(true)\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Librustc, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"librustc\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .host(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n@@ -468,6 +470,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"librustc\"))\n          .host(true)\n          .run(move |s| check::cargotest(build, s.stage, s.target));\n+    rules.test(\"check-cargo\", \"cargo\")\n+         .dep(|s| s.name(\"tool-cargo\"))\n+         .host(true)\n+         .run(move |s| check::cargo(build, s.stage, s.target));\n     rules.test(\"check-tidy\", \"src/tools/tidy\")\n          .dep(|s| s.name(\"tool-tidy\").stage(0))\n          .default(true)\n@@ -494,33 +500,33 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"openssl\", \"path/to/nowhere\")\n          .run(move |s| native::openssl(build, s.target));\n \n-    // Some test suites are run inside emulators, and most of our test binaries\n-    // are linked dynamically which means we need to ship the standard library\n-    // and such to the emulator ahead of time. This step represents this and is\n-    // a dependency of all test suites.\n+    // Some test suites are run inside emulators or on remote devices, and most\n+    // of our test binaries are linked dynamically which means we need to ship\n+    // the standard library and such to the emulator ahead of time. This step\n+    // represents this and is a dependency of all test suites.\n     //\n     // Most of the time this step is a noop (the `check::emulator_copy_libs`\n     // only does work if necessary). For some steps such as shipping data to\n     // QEMU we have to build our own tools so we've got conditional dependencies\n-    // on those programs as well. Note that the QEMU client is built for the\n-    // build target (us) and the server is built for the target.\n-    rules.test(\"emulator-copy-libs\", \"path/to/nowhere\")\n+    // on those programs as well. Note that the remote test client is built for\n+    // the build target (us) and the server is built for the target.\n+    rules.test(\"remote-copy-libs\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n          .dep(move |s| {\n-             if build.qemu_rootfs(s.target).is_some() {\n-                s.name(\"tool-qemu-test-client\").target(s.host).stage(0)\n+             if build.remote_tested(s.target) {\n+                s.name(\"tool-remote-test-client\").target(s.host).stage(0)\n              } else {\n                  Step::noop()\n              }\n          })\n          .dep(move |s| {\n-             if build.qemu_rootfs(s.target).is_some() {\n-                s.name(\"tool-qemu-test-server\")\n+             if build.remote_tested(s.target) {\n+                s.name(\"tool-remote-test-server\")\n              } else {\n                  Step::noop()\n              }\n          })\n-         .run(move |s| check::emulator_copy_libs(build, &s.compiler(), s.target));\n+         .run(move |s| check::remote_copy_libs(build, &s.compiler(), s.target));\n \n     rules.test(\"check-bootstrap\", \"src/bootstrap\")\n          .default(true)\n@@ -533,34 +539,46 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     //\n     // Tools used during the build system but not shipped\n     rules.build(\"tool-rustbook\", \"src/tools/rustbook\")\n-         .dep(|s| s.name(\"librustc\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"librustc-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"rustbook\"));\n     rules.build(\"tool-error-index\", \"src/tools/error_index_generator\")\n-         .dep(|s| s.name(\"librustc\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"librustc-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"error_index_generator\"));\n     rules.build(\"tool-tidy\", \"src/tools/tidy\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"tidy\"));\n     rules.build(\"tool-linkchecker\", \"src/tools/linkchecker\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"linkchecker\"));\n     rules.build(\"tool-cargotest\", \"src/tools/cargotest\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargotest\"));\n     rules.build(\"tool-compiletest\", \"src/tools/compiletest\")\n-         .dep(|s| s.name(\"libtest\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libtest-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"compiletest\"));\n     rules.build(\"tool-build-manifest\", \"src/tools/build-manifest\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n-    rules.build(\"tool-qemu-test-server\", \"src/tools/qemu-test-server\")\n-         .dep(|s| s.name(\"libstd\"))\n-         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-server\"));\n-    rules.build(\"tool-qemu-test-client\", \"src/tools/qemu-test-client\")\n-         .dep(|s| s.name(\"libstd\"))\n-         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-client\"));\n-    rules.build(\"tool-cargo\", \"cargo\")\n-         .dep(|s| s.name(\"libstd\"))\n+    rules.build(\"tool-remote-test-server\", \"src/tools/remote-test-server\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-server\"));\n+    rules.build(\"tool-remote-test-client\", \"src/tools/remote-test-client\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-client\"));\n+    rules.build(\"tool-cargo\", \"src/tools/cargo\")\n+         .host(true)\n+         .default(build.config.extended)\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n          .dep(move |s| {\n              // Cargo depends on procedural macros, which requires a full host\n@@ -570,6 +588,37 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .host(&build.config.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n+    rules.build(\"tool-rls\", \"src/tools/rls\")\n+         .host(true)\n+         .default(build.config.extended)\n+         .dep(|s| s.name(\"librustc-tool\"))\n+         .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n+         .dep(move |s| {\n+             // rls, like cargo, uses procedural macros\n+             s.name(\"librustc-link\")\n+              .target(&build.config.build)\n+              .host(&build.config.build)\n+         })\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n+\n+    // \"pseudo rule\" which represents completely cleaning out the tools dir in\n+    // one stage. This needs to happen whenever a dependency changes (e.g.\n+    // libstd, libtest, librustc) and all of the tool compilations above will\n+    // be sequenced after this rule.\n+    rules.build(\"maybe-clean-tools\", \"path/to/nowhere\")\n+         .after(\"librustc-tool\")\n+         .after(\"libtest-tool\")\n+         .after(\"libstd-tool\");\n+\n+    rules.build(\"librustc-tool\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"librustc\"))\n+         .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Librustc));\n+    rules.build(\"libtest-tool\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"libtest\"))\n+         .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Libtest));\n+    rules.build(\"libstd-tool\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"libstd\"))\n+         .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Libstd));\n \n     // ========================================================================\n     // Documentation targets\n@@ -690,10 +739,15 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"default:doc\"))\n          .run(move |s| dist::docs(build, s.stage, s.target));\n     rules.dist(\"dist-analysis\", \"analysis\")\n+         .default(build.config.extended)\n          .dep(|s| s.name(\"dist-std\"))\n-         .default(true)\n          .only_host_build(true)\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n+    rules.dist(\"dist-rls\", \"rls\")\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"tool-rls\"))\n+         .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n          .run(move |s| install::install(build, s.stage, s.target));\n@@ -711,6 +765,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|d| d.name(\"dist-mingw\"))\n          .dep(|d| d.name(\"dist-docs\"))\n          .dep(|d| d.name(\"dist-cargo\"))\n+         .dep(|d| d.name(\"dist-rls\"))\n+         .dep(|d| d.name(\"dist-analysis\"))\n          .run(move |s| dist::extended(build, s.stage, s.target));\n \n     rules.dist(\"dist-sign\", \"hash-and-sign\")\n@@ -811,6 +867,11 @@ struct Rule<'a> {\n     /// Whether this rule is only for the build triple, not anything in hosts or\n     /// targets.\n     only_build: bool,\n+\n+    /// A list of \"order only\" dependencies. This rules does not actually\n+    /// depend on these rules, but if they show up in the dependency graph then\n+    /// this rule must be executed after all these rules.\n+    after: Vec<&'a str>,\n }\n \n #[derive(PartialEq)]\n@@ -834,6 +895,7 @@ impl<'a> Rule<'a> {\n             host: false,\n             only_host_build: false,\n             only_build: false,\n+            after: Vec::new(),\n         }\n     }\n }\n@@ -853,6 +915,11 @@ impl<'a, 'b> RuleBuilder<'a, 'b> {\n         self\n     }\n \n+    fn after(&mut self, step: &'a str) -> &mut Self {\n+        self.rule.after.push(step);\n+        self\n+    }\n+\n     fn run<F>(&mut self, f: F) -> &mut Self\n         where F: Fn(&Step<'a>) + 'a,\n     {\n@@ -978,26 +1045,25 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         }\n     }\n \n-    pub fn print_help(&self, command: &str) {\n+    pub fn get_help(&self, command: &str) -> Option<String> {\n         let kind = match command {\n             \"build\" => Kind::Build,\n             \"doc\" => Kind::Doc,\n             \"test\" => Kind::Test,\n             \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n-            _ => return,\n+            _ => return None,\n         };\n         let rules = self.rules.values().filter(|r| r.kind == kind);\n         let rules = rules.filter(|r| !r.path.contains(\"nowhere\"));\n         let mut rules = rules.collect::<Vec<_>>();\n         rules.sort_by_key(|r| r.path);\n \n-        println!(\"Available paths:\\n\");\n+        let mut help_string = String::from(\"Available paths:\\n\");\n         for rule in rules {\n-            print!(\"    ./x.py {} {}\", command, rule.path);\n-\n-            println!(\"\");\n+            help_string.push_str(format!(\"    ./x.py {} {}\\n\", command, rule.path).as_str());\n         }\n+        Some(help_string)\n     }\n \n     /// Construct the top-level build steps that we're going to be executing,\n@@ -1137,31 +1203,52 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n     /// From the top level targets `steps` generate a topological ordering of\n     /// all steps needed to run those steps.\n     fn expand(&self, steps: &[Step<'a>]) -> Vec<Step<'a>> {\n+        // First up build a graph of steps and their dependencies. The `nodes`\n+        // map is a map from step to a unique number. The `edges` map is a\n+        // map from these unique numbers to a list of other numbers,\n+        // representing dependencies.\n+        let mut nodes = HashMap::new();\n+        nodes.insert(Step::noop(), 0);\n+        let mut edges = HashMap::new();\n+        edges.insert(0, HashSet::new());\n+        for step in steps {\n+            self.build_graph(step.clone(), &mut nodes, &mut edges);\n+        }\n+\n+        // Now that we've built up the actual dependency graph, draw more\n+        // dependency edges to satisfy the `after` dependencies field for each\n+        // rule.\n+        self.satisfy_after_deps(&nodes, &mut edges);\n+\n+        // And finally, perform a topological sort to return a list of steps to\n+        // execute.\n         let mut order = Vec::new();\n-        let mut added = HashSet::new();\n-        added.insert(Step::noop());\n-        for step in steps.iter().cloned() {\n-            self.fill(step, &mut order, &mut added);\n+        let mut visited = HashSet::new();\n+        visited.insert(0);\n+        let idx_to_node = nodes.iter().map(|p| (*p.1, p.0)).collect::<HashMap<_, _>>();\n+        for idx in 0..nodes.len() {\n+            self.topo_sort(idx, &idx_to_node, &edges, &mut visited, &mut order);\n         }\n         return order\n     }\n \n-    /// Performs topological sort of dependencies rooted at the `step`\n-    /// specified, pushing all results onto the `order` vector provided.\n+    /// Builds the dependency graph rooted at `step`.\n     ///\n-    /// In other words, when this method returns, the `order` vector will\n-    /// contain a list of steps which if executed in order will eventually\n-    /// complete the `step` specified as well.\n-    ///\n-    /// The `added` set specified here is the set of steps that are already\n-    /// present in `order` (and hence don't need to be added again).\n-    fn fill(&self,\n-            step: Step<'a>,\n-            order: &mut Vec<Step<'a>>,\n-            added: &mut HashSet<Step<'a>>) {\n-        if !added.insert(step.clone()) {\n-            return\n+    /// The `nodes` and `edges` maps are filled out according to the rule\n+    /// described by `step.name`.\n+    fn build_graph(&self,\n+                   step: Step<'a>,\n+                   nodes: &mut HashMap<Step<'a>, usize>,\n+                   edges: &mut HashMap<usize, HashSet<usize>>) -> usize {\n+        use std::collections::hash_map::Entry;\n+\n+        let idx = nodes.len();\n+        match nodes.entry(step.clone()) {\n+            Entry::Vacant(e) => { e.insert(idx); }\n+            Entry::Occupied(e) => return *e.get(),\n         }\n+\n+        let mut deps = Vec::new();\n         for dep in self.rules[step.name].deps.iter() {\n             let dep = dep(&step);\n             if dep.name.starts_with(\"default:\") {\n@@ -1173,13 +1260,61 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n                 let host = self.build.config.host.iter().any(|h| h == dep.target);\n                 let rules = self.rules.values().filter(|r| r.default);\n                 for rule in rules.filter(|r| r.kind == kind && (!r.host || host)) {\n-                    self.fill(dep.name(rule.name), order, added);\n+                    deps.push(self.build_graph(dep.name(rule.name), nodes, edges));\n                 }\n             } else {\n-                self.fill(dep, order, added);\n+                deps.push(self.build_graph(dep, nodes, edges));\n+            }\n+        }\n+\n+        edges.entry(idx).or_insert(HashSet::new()).extend(deps);\n+        return idx\n+    }\n+\n+    /// Given a dependency graph with a finished list of `nodes`, fill out more\n+    /// dependency `edges`.\n+    ///\n+    /// This is the step which satisfies all `after` listed dependencies in\n+    /// `Rule` above.\n+    fn satisfy_after_deps(&self,\n+                          nodes: &HashMap<Step<'a>, usize>,\n+                          edges: &mut HashMap<usize, HashSet<usize>>) {\n+        // Reverse map from the name of a step to the node indices that it\n+        // appears at.\n+        let mut name_to_idx = HashMap::new();\n+        for (step, &idx) in nodes {\n+            name_to_idx.entry(step.name).or_insert(Vec::new()).push(idx);\n+        }\n+\n+        for (step, idx) in nodes {\n+            if *step == Step::noop() {\n+                continue\n             }\n+            for after in self.rules[step.name].after.iter() {\n+                // This is the critical piece of an `after` dependency. If the\n+                // dependency isn't actually in our graph then no edge is drawn,\n+                // only if it's already present do we draw the edges.\n+                if let Some(idxs) = name_to_idx.get(after) {\n+                    edges.get_mut(idx).unwrap()\n+                         .extend(idxs.iter().cloned());\n+                }\n+            }\n+        }\n+    }\n+\n+    fn topo_sort(&self,\n+                 cur: usize,\n+                 nodes: &HashMap<usize, &Step<'a>>,\n+                 edges: &HashMap<usize, HashSet<usize>>,\n+                 visited: &mut HashSet<usize>,\n+                 order: &mut Vec<Step<'a>>) {\n+        if !visited.insert(cur) {\n+            return\n+        }\n+        for dep in edges[&cur].iter() {\n+            self.topo_sort(*dep, nodes, edges, visited, order);\n         }\n-        order.push(step);\n+        order.push(nodes[&cur].clone());\n     }\n }\n "}, {"sha": "e01c06b10fcd63097de8a14f8b5e2b0f525bccb3", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -139,6 +139,8 @@ pub fn dylib_path_var() -> &'static str {\n         \"PATH\"\n     } else if cfg!(target_os = \"macos\") {\n         \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n     } else {\n         \"LD_LIBRARY_PATH\"\n     }"}, {"sha": "da00b970da977e950bacdf275403c0a57e0e6ad7", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -198,7 +198,11 @@ pub fn native_lib_boilerplate(src_name: &str,\n     let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n     let out_dir = PathBuf::from(out_dir).join(out_name);\n     t!(create_dir_racy(&out_dir));\n-    println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    if link_name.contains('=') {\n+        println!(\"cargo:rustc-link-lib={}\", link_name);\n+    } else {\n+        println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    }\n     println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n \n     let timestamp = out_dir.join(\"rustbuild.timestamp\");\n@@ -209,6 +213,21 @@ pub fn native_lib_boilerplate(src_name: &str,\n     }\n }\n \n+pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoilerplate, ()> {\n+    let (link_name, search_path) = match &*env::var(\"TARGET\").unwrap() {\n+        \"x86_64-unknown-linux-gnu\" => (\n+            format!(\"clang_rt.{}-x86_64\", sanitizer_name),\n+            \"build/lib/linux\",\n+        ),\n+        \"x86_64-apple-darwin\" => (\n+            format!(\"dylib=clang_rt.{}_osx_dynamic\", sanitizer_name),\n+            \"build/lib/darwin\",\n+        ),\n+        _ => return Err(()),\n+    };\n+    native_lib_boilerplate(\"compiler-rt\", sanitizer_name, &link_name, search_path)\n+}\n+\n fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "6f3a7e091e1edb78ecf2feaa4afdbee02bb16a40", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -152,18 +152,13 @@ For targets: `powerpc-unknown-linux-gnu`\n - Path and misc options > Patches origin = Bundled, then local\n - Path and misc options > Local patch directory = /tmp/patches\n - Target options > Target Architecture = powerpc\n-- Target options > Emit assembly for CPU = power4 -- (+)\n-- Target options > Tune for CPU = power6 -- (+)\n+- Target options > Emit assembly for CPU = powerpc -- pure 32-bit PowerPC\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 2.6.32.68 -- ~RHEL6 kernel\n - C-library > glibc version = 2.12.2 -- ~RHEL6 glibc\n - C compiler > gcc version = 4.9.3\n-- C compiler > Core gcc extra config = --with-cpu-32=power4 --with-cpu=default32 -- (+)\n-- C compiler > gcc extra config = --with-cpu-32=power4 --with-cpu=default32 -- (+)\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-(+) These CPU options match the configuration of the toolchains in RHEL6.\n-\n ## `powerpc64-linux-gnu.config`\n \n For targets: `powerpc64-unknown-linux-gnu`"}, {"sha": "04ca6d76c557b9086af1e91fbc3c4ca9a1e63b73", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -13,7 +13,7 @@ RUN dpkg --add-architecture i386 && \\\n   cmake \\\n   unzip \\\n   expect \\\n-  openjdk-9-jre \\\n+  openjdk-9-jre-headless \\\n   sudo \\\n   libstdc++6:i386 \\\n   xz-utils \\"}, {"sha": "4a73637e9ddbf977d987f4d62423d00c1eac6b6a", "filename": "src/ci/docker/arm-android/start-emulator.sh", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Farm-android%2Fstart-emulator.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Farm-android%2Fstart-emulator.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Fstart-emulator.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -10,7 +10,9 @@\n # except according to those terms.\n \n set -ex\n-ANDROID_EMULATOR_FORCE_32BIT=true \\\n-  nohup nohup emulator @arm-18 -no-window -partition-size 2047 \\\n-  0<&- &>/dev/null &\n+\n+# Setting SHELL to a file instead on a symlink helps android\n+# emulator identify the system\n+export SHELL=/bin/bash\n+nohup nohup emulator @arm-18 -no-window -partition-size 2047 0<&- &>/dev/null &\n exec \"$@\""}, {"sha": "5dfdf093081cb3ba7dd117e1ba5c9e01307dc3d3", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -74,7 +74,7 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "5de00d5b02151af9255852dd3e6f645174e49882", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -22,7 +22,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -74,6 +74,7 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n ENV STAGING_DIR=/tmp\n \n ENV RUST_CONFIGURE_ARGS \\\n+      --enable-extended \\\n       --target=$TARGETS \\\n       --musl-root-arm=/usr/local/arm-linux-musleabi \\\n       --musl-root-armhf=/usr/local/arm-linux-musleabihf \\"}, {"sha": "a694bf84b18cdbc4fbd6f1db28d90a55cb88883b", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -56,28 +56,22 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY armv7-linux-gnueabihf.config /tmp/\n-COPY armv7-linux-gnueabihf.config aarch64-linux-gnu.config build-toolchains.sh /tmp/\n+COPY aarch64-linux-gnu.config build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin\n-ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n \n ENV CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-gcc \\\n     AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-ar \\\n-    CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-g++ \\\n-    CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\\n-    AR_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-ar \\\n-    CXX_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-g++\n+    CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-g++\n \n-ENV HOSTS=armv7-unknown-linux-gnueabihf\n-ENV HOSTS=$HOSTS,aarch64-unknown-linux-gnu\n+ENV HOSTS=aarch64-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/Dockerfile"}, {"sha": "3d30ee49022d8f9318abc0fa52d71cd8310799d1", "filename": "src/ci/docker/dist-aarch64-linux/aarch64-linux-gnu.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/aarch64-linux-gnu.config"}, {"sha": "94f785c96f815ac8d7a72103696a6ae821dd508a", "filename": "src/ci/docker/dist-aarch64-linux/build-toolchains.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Fbuild-toolchains.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,37 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir build\n+cd build\n+cp ../aarch64-linux-gnu.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build"}, {"sha": "1dd97fd4e047145223da8d449263f8c483c3b41e", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -32,19 +32,22 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV TARGETS=arm-linux-androideabi\n+ENV TARGETS=$TARGETS,armv7-linux-androideabi\n ENV TARGETS=$TARGETS,i686-linux-android\n ENV TARGETS=$TARGETS,aarch64-linux-android\n-ENV TARGETS=$TARGETS,armv7-linux-androideabi\n+ENV TARGETS=$TARGETS,x86_64-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n+      --enable-extended \\\n       --arm-linux-androideabi-ndk=/android/ndk-arm-9 \\\n       --armv7-linux-androideabi-ndk=/android/ndk-arm-9 \\\n       --i686-linux-android-ndk=/android/ndk-x86-9 \\\n-      --aarch64-linux-android-ndk=/android/ndk-aarch64\n+      --aarch64-linux-android-ndk=/android/ndk-arm64-21 \\\n+      --x86_64-linux-android-ndk=/android/ndk-x86_64-21\n \n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "d3a2d31754543c0b95c64861062e4367976bb2ac", "filename": "src/ci/docker/dist-android/install-ndk.sh", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -25,7 +25,7 @@ bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n         --platform=android-21 \\\n         --toolchain=aarch64-linux-android-4.9 \\\n-        --install-dir=/android/ndk-aarch64 \\\n+        --install-dir=/android/ndk-arm64-21 \\\n         --ndk-dir=/android/android-ndk-r11c \\\n         --arch=arm64\n bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n@@ -34,5 +34,11 @@ bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n         --install-dir=/android/ndk-x86-9 \\\n         --ndk-dir=/android/android-ndk-r11c \\\n         --arch=x86\n+bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n+        --platform=android-21 \\\n+        --toolchain=x86_64-4.9 \\\n+        --install-dir=/android/ndk-x86_64-21 \\\n+        --ndk-dir=/android/android-ndk-r11c \\\n+        --arch=x86_64\n \n rm -rf ./android-ndk-r11c-linux-x86_64.zip ./android-ndk-r11c"}, {"sha": "3ee183115724201994937c071df0540f47f64790", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -56,27 +56,22 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY arm-linux-gnueabihf.config arm-linux-gnueabi.config build-toolchains.sh /tmp/\n+COPY arm-linux-gnueabi.config build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin\n-ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n \n ENV CC_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-gcc \\\n     AR_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-ar \\\n-    CXX_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-g++ \\\n-    CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\\n-    AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar \\\n-    CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++\n+    CXX_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-g++\n \n ENV HOSTS=arm-unknown-linux-gnueabi\n-ENV HOSTS=$HOSTS,arm-unknown-linux-gnueabihf\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "f78ecf9381a1fce61dc582d29bc1c802ca52fe36", "filename": "src/ci/docker/dist-arm-linux/build-toolchains.sh", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -35,11 +35,3 @@ ct-ng oldconfig\n hide_output ct-ng build\n cd ..\n rm -rf build\n-\n-mkdir build\n-cd build\n-cp ../arm-linux-gnueabihf.config .config\n-ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "902e2e7e6e140265fd01f48bc516c9c055764d56", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,77 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY arm-linux-gnueabihf.config build-toolchains.sh /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n+\n+ENV CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\\n+    AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar \\\n+    CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++\n+\n+ENV HOSTS=arm-unknown-linux-gnueabihf\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "1feeef15557498d7d0be00e216370aa2416b2a2b", "filename": "src/ci/docker/dist-armhf-linux/arm-linux-gnueabihf.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-arm-linux/arm-linux-gnueabihf.config"}, {"sha": "df1134d5483c2ff3d4953e5dba14e1552250fc5d", "filename": "src/ci/docker/dist-armhf-linux/build-toolchains.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Fbuild-toolchains.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,37 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir build\n+cd build\n+cp ../arm-linux-gnueabihf.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build"}, {"sha": "d6a66c2f4a33b5e134371e28d31966f486ba9087", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,77 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY build-toolchains.sh armv7-linux-gnueabihf.config /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n+\n+ENV CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\\n+    AR_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-ar \\\n+    CXX_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-g++\n+\n+ENV HOSTS=armv7-unknown-linux-gnueabihf\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "79d6c77c41152115f176d175483453b85983c408", "filename": "src/ci/docker/dist-armv7-linux/armv7-linux-gnueabihf.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/armv7-linux-gnueabihf.config"}, {"sha": "2d395fee792ec1d96437277424f538b4da47a9be", "filename": "src/ci/docker/dist-armv7-linux/build-toolchains.sh", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fbuild-toolchains.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -35,11 +35,3 @@ ct-ng oldconfig\n hide_output ct-ng build\n cd ..\n rm -rf build\n-\n-mkdir build\n-cd build\n-cp ../aarch64-linux-gnu.config .config\n-ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/build-toolchains.sh"}, {"sha": "b079f12f7e5e8f67efbe6e6011e3ad8c707eac66", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,13 +14,14 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils \\\n   swig \\\n   libedit-dev \\\n-  libncurses5-dev\n+  libncurses5-dev \\\n+  patch\n \n RUN curl -L https://cmake.org/files/v3.8/cmake-3.8.0-rc1-Linux-x86_64.tar.gz | \\\n       tar xzf - -C /usr/local --strip-components=1\n \n WORKDIR /tmp\n-COPY shared.sh build-toolchain.sh /tmp/\n+COPY shared.sh build-toolchain.sh compiler-rt-dso-handle.patch /tmp/\n RUN /tmp/build-toolchain.sh\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -29,7 +30,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\\n@@ -43,5 +44,5 @@ ENV \\\n ENV TARGETS=x86_64-unknown-fuchsia\n ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "10b285a546655a8ba9c99b154d95f5e17c11f838", "filename": "src/ci/docker/dist-fuchsia/build-toolchain.sh", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -9,33 +9,43 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# ignore-tidy-linelength\n+\n set -ex\n source shared.sh\n \n # Download sources\n SRCS=(\n-  \"https://fuchsia.googlesource.com/magenta magenta ac69119\"\n-  \"https://fuchsia.googlesource.com/third_party/llvm llvm 5463083\"\n-  \"https://fuchsia.googlesource.com/third_party/clang llvm/tools/clang 4ff7b4b\"\n-  \"https://fuchsia.googlesource.com/third_party/lld llvm/tools/lld fd465a3\"\n-  \"https://fuchsia.googlesource.com/third_party/lldb llvm/tools/lldb 6bb11f8\"\n-  \"https://fuchsia.googlesource.com/third_party/compiler-rt llvm/runtimes/compiler-rt 52d4ecc\"\n-  \"https://fuchsia.googlesource.com/third_party/libcxx llvm/runtimes/libcxx e891cc8\"\n-  \"https://fuchsia.googlesource.com/third_party/libcxxabi llvm/runtimes/libcxxabi f0f0257\"\n-  \"https://fuchsia.googlesource.com/third_party/libunwind llvm/runtimes/libunwind 50bddc1\"\n+  \"https://fuchsia.googlesource.com/magenta magenta d17073dc8de344ead3b65e8cc6a12280dec38c84\"\n+  \"https://llvm.googlesource.com/llvm llvm 3f58a16d8eec385e2b3ebdfbb84ff9d3bf27e025\"\n+  \"https://llvm.googlesource.com/clang llvm/tools/clang 727ea63e6e82677f6e10e05e08bc7d6bdbae3111\"\n+  \"https://llvm.googlesource.com/lld llvm/tools/lld a31286c1366e5e89b8872803fded13805a1a084b\"\n+  \"https://llvm.googlesource.com/lldb llvm/tools/lldb 0b2384abec4cb99ad66687712e07dee4dd9d187e\"\n+  \"https://llvm.googlesource.com/compiler-rt llvm/runtimes/compiler-rt 9093a35c599fe41278606a20b51095ea8bd5a081\"\n+  \"https://llvm.googlesource.com/libcxx llvm/runtimes/libcxx 607e0c71ec4f7fd377ad3f6c47b08dbe89f66eaa\"\n+  \"https://llvm.googlesource.com/libcxxabi llvm/runtimes/libcxxabi 0a3a1a8a5ca5ef69e0f6b7d5b9d13e63e6fd2c19\"\n+  \"https://llvm.googlesource.com/libunwind llvm/runtimes/libunwind e128003563d99d9ee62247c4cee40f07d21c03e3\"\n )\n \n fetch() {\n   mkdir -p $2\n   pushd $2 > /dev/null\n-  curl -sL $1/+archive/$3.tar.gz | tar xzf -\n+  git init\n+  git remote add origin $1\n+  git fetch --depth=1 origin $3\n+  git reset --hard FETCH_HEAD\n   popd > /dev/null\n }\n \n for i in \"${SRCS[@]}\"; do\n   fetch $i\n done\n \n+# Remove this once https://reviews.llvm.org/D28791 is resolved\n+cd llvm/runtimes/compiler-rt\n+patch -Np1 < /tmp/compiler-rt-dso-handle.patch\n+cd ../../..\n+\n # Build toolchain\n cd llvm\n mkdir build"}, {"sha": "0b702894bb216481125219d51de73ce4fb69cf4d", "filename": "src/ci/docker/dist-fuchsia/compiler-rt-dso-handle.patch", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,41 @@\n+diff --git a/lib/builtins/CMakeLists.txt b/lib/builtins/CMakeLists.txt\n+index fc4384af2..b442264c0 100644\n+--- a/lib/builtins/CMakeLists.txt\n++++ b/lib/builtins/CMakeLists.txt\n+@@ -194,6 +194,12 @@ if(APPLE)\n+     atomic_thread_fence.c)\n+ endif()\n+ \n++if(FUCHSIA)\n++  set(GENERIC_SOURCES\n++    ${GENERIC_SOURCES}\n++    dso_handle.c)\n++endif()\n++\n+ if(NOT WIN32 OR MINGW)\n+   set(GENERIC_SOURCES\n+       ${GENERIC_SOURCES}\n+diff --git a/lib/builtins/dso_handle.c b/lib/builtins/dso_handle.c\n+new file mode 100644\n+index 000000000..7766cd0aa\n+--- /dev/null\n++++ b/lib/builtins/dso_handle.c\n+@@ -0,0 +1,18 @@\n++/* ===-- dso_handle.c - Provide __dso_handle -------------------------------===\n++ *\n++ *               The LLVM Compiler Infrastructure\n++ *\n++ * This file is dual licensed under the MIT and the University of Illinois Open\n++ * Source Licenses. See LICENSE.TXT for details.\n++ *\n++ * ===----------------------------------------------------------------------===\n++ */\n++\n++/* __dso_handle symbol is mandated by C++ ABI with a value which is an address\n++ * in one of the object's segments, and as such this symbol has to be included\n++ * statically and cannot be a part of a shared library. Traditionally, it has\n++ * been defined in crtbegin.o but there's no principled reason for it to be\n++ * there. We defined this symbol in the builtin library which is built as a\n++ * static library and always included in the final link.\n++ */\n++__attribute__((visibility(\"hidden\"))) void *const __dso_handle;"}, {"sha": "6ea7db03cd51f61024e777340460f85d4c528e58", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -26,12 +26,13 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=i686-unknown-linux-musl,i586-unknown-linux-gnu \\\n-      --musl-root-i686=/musl-i686\n+      --musl-root-i686=/musl-i686 \\\n+      --enable-extended\n \n # Newer binutils broke things on some vms/distros (i.e., linking against\n # unknown relocs disabled by the following flag), so we need to go out of our"}, {"sha": "ad285a57a84a3f56891012099ae498dab2503b9b", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/build-musl.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2Fbuild-musl.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -15,11 +15,14 @@ set -ex\n export CFLAGS=\"-fPIC -Wa,-mrelax-relocations=no\"\n export CXXFLAGS=\"-Wa,-mrelax-relocations=no\"\n \n-MUSL=musl-1.1.14\n+MUSL=musl-1.1.16\n curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n cd $MUSL\n-CFLAGS=\"$CFLAGS -m32\" ./configure --prefix=/musl-i686 --disable-shared --target=i686\n-make -j10\n+CC=gcc \\\n+  CFLAGS=\"$CFLAGS -m32\" \\\n+  ./configure --prefix=/musl-i686 --disable-shared \\\n+    --target=i686\n+make AR=ar RANLIB=ranlib -j10\n make install\n cd ..\n "}, {"sha": "b9e5f91b373a8da6eeefaa2d9d58754bd97599c5", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "renamed", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -17,7 +17,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n COPY build-toolchain.sh /tmp/\n-RUN /tmp/build-toolchain.sh x86_64\n RUN /tmp/build-toolchain.sh i686\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -26,19 +25,15 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\\n-    AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-ar \\\n-    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc \\\n-    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++ \\\n     AR_i686_unknown_freebsd=i686-unknown-freebsd10-ar \\\n     CC_i686_unknown_freebsd=i686-unknown-freebsd10-gcc \\\n     CXX_i686_unknown_freebsd=i686-unknown-freebsd10-g++\n \n-ENV HOSTS=x86_64-unknown-freebsd\n-ENV HOSTS=$HOSTS,i686-unknown-freebsd\n+ENV HOSTS=i686-unknown-freebsd\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS", "previous_filename": "src/ci/docker/dist-freebsd/Dockerfile"}, {"sha": "5642e6fc937f9736e14bc23aed1fca4b045bc88a", "filename": "src/ci/docker/dist-i686-freebsd/build-toolchain.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-freebsd/build-toolchain.sh"}, {"sha": "a15d6c4e53dbac3305f50b7ea1af0a5144132cf7", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "renamed", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -2,6 +2,12 @@ FROM centos:5\n \n WORKDIR /build\n \n+# Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n+# to http://vault.centos.org/\n+RUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\n+RUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\n+RUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\n+\n RUN yum upgrade -y && yum install -y \\\n       curl \\\n       bzip2 \\\n@@ -76,11 +82,10 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=i686-unknown-linux-gnu\n-ENV HOSTS=$HOSTS,x86_64-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS \\\n       --host=$HOSTS \\", "previous_filename": "src/ci/docker/dist-x86-linux/Dockerfile"}, {"sha": "80aa1f2a0161308affc245daaf2952f973643918", "filename": "src/ci/docker/dist-i686-linux/build-binutils.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-binutils.sh"}, {"sha": "82e46455cb0f0673fef2fe6442d25aa7c4b8d976", "filename": "src/ci/docker/dist-i686-linux/build-cmake.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-cmake.sh"}, {"sha": "b7d22755a571bab38aa4d85629fa69cbec041c24", "filename": "src/ci/docker/dist-i686-linux/build-curl.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-curl.sh"}, {"sha": "ab2562538d6d7376e942a219ce0f00664082be9f", "filename": "src/ci/docker/dist-i686-linux/build-gcc.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-gcc.sh"}, {"sha": "92fa66b496d933648a0e49c3f83b6565246188a7", "filename": "src/ci/docker/dist-i686-linux/build-git.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-git.sh"}, {"sha": "4ce38fd9205e27b4aff8b169f4ead5c31f731993", "filename": "src/ci/docker/dist-i686-linux/build-headers.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-headers.sh"}, {"sha": "64b1abf82a8277d8ebc1a10c54b40fd7be583bd4", "filename": "src/ci/docker/dist-i686-linux/build-openssl.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-openssl.sh"}, {"sha": "a7a450f3c8de772403b481b96c94b03d5ec2325e", "filename": "src/ci/docker/dist-i686-linux/build-python.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/build-python.sh"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-i686-linux/shared.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-x86-linux/shared.sh"}, {"sha": "dbcdf2eb9d6a5ae2a149baa6da1ce9610bc7de63", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -13,12 +13,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils \\\n   g++-mips-linux-gnu \\\n-  g++-mipsel-linux-gnu \\\n   libssl-dev \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,7 +26,6 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV HOSTS=mips-unknown-linux-gnu\n-ENV HOSTS=$HOSTS,mipsel-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "d0e59253a0f3edfbafb519ab77a3126de1e7e3e3", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -13,12 +13,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils \\\n   g++-mips64-linux-gnuabi64 \\\n-  g++-mips64el-linux-gnuabi64 \\\n   libssl-dev \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,7 +26,6 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV HOSTS=mips64-unknown-linux-gnuabi64\n-ENV HOSTS=$HOSTS,mips64el-unknown-linux-gnuabi64\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "6645d0cbaad5b10f23d9dd3a728ea660274c7e06", "filename": "src/ci/docker/dist-mips64el-linux/Dockerfile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,31 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-mips64el-linux-gnuabi64 \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV HOSTS=mips64el-unknown-linux-gnuabi64\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "dae1972e49688fb441bce99e96f671a153ec8709", "filename": "src/ci/docker/dist-mipsel-linux/Dockerfile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,31 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-mipsel-linux-gnu \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV HOSTS=mipsel-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "b43bf8beb26e1a7c94e9e736cc0f86d26d5d7e16", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -63,7 +63,7 @@ RUN ./build-powerpc-toolchain.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc-unknown-linux-gnu/bin"}, {"sha": "984a0a0304e4754b3e16b0beb60c97e233088725", "filename": "src/ci/docker/dist-powerpc-linux/powerpc-linux-gnu.config", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -101,8 +101,8 @@ CT_ARCH_SUPPORTS_WITH_FLOAT=y\n CT_ARCH_DEFAULT_BE=y\n CT_ARCH_DEFAULT_32=y\n CT_ARCH_ABI=\"\"\n-CT_ARCH_CPU=\"power4\"\n-CT_ARCH_TUNE=\"power6\"\n+CT_ARCH_CPU=\"powerpc\"\n+CT_ARCH_TUNE=\"\"\n CT_ARCH_BE=y\n # CT_ARCH_LE is not set\n CT_ARCH_32=y\n@@ -391,8 +391,8 @@ CT_CC_GCC_HAS_LIBSANITIZER=y\n CT_CC_GCC_VERSION=\"4.9.3\"\n # CT_CC_LANG_FORTRAN is not set\n CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"--with-cpu-32=power4 --with-cpu=default32\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-cpu-32=power4 --with-cpu=default32\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n CT_CC_GCC_STATIC_LIBSTDCXX=y\n # CT_CC_GCC_SYSTEM_ZLIB is not set"}, {"sha": "540415e7e272ee8cd543e57f5e8f4645b9767107", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -62,26 +62,18 @@ RUN ./build-powerpc64-toolchain.sh\n \n USER root\n \n-RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n-COPY build-powerpc64le-toolchain.sh /tmp/\n-RUN ./build-powerpc64le-toolchain.sh\n-\n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc64-unknown-linux-gnu/bin\n \n ENV \\\n     AR_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-ar \\\n     CC_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-gcc \\\n-    CXX_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-g++ \\\n-    AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar \\\n-    CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc \\\n-    CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++\n+    CXX_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-g++\n \n ENV HOSTS=powerpc64-unknown-linux-gnu\n-ENV HOSTS=$HOSTS,powerpc64le-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "08ab0f37b62570627ad6b65f1fae73463bd88d6d", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,77 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+ pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+USER root\n+\n+RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n+COPY shared.sh build-powerpc64le-toolchain.sh /tmp/\n+RUN ./build-powerpc64le-toolchain.sh\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV \\\n+    AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar \\\n+    CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc \\\n+    CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++\n+\n+ENV HOSTS=powerpc64le-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "4d3e638916dbf248b6f52509b4d3f4251acf2d50", "filename": "src/ci/docker/dist-powerpc64le-linux/build-powerpc64le-toolchain.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-powerpc64-linux/build-powerpc64le-toolchain.sh"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-powerpc64le-linux/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fshared.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "a758559e0c108b4d8604ce5dfd53c0412f1e2e1b", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "renamed", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -60,27 +60,20 @@ COPY patches/ /tmp/patches/\n COPY s390x-linux-gnu.config build-s390x-toolchain.sh /tmp/\n RUN ./build-s390x-toolchain.sh\n \n-COPY build-netbsd-toolchain.sh /tmp/\n-RUN ./build-netbsd-toolchain.sh\n-\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n-ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin:/x-tools/x86_64-unknown-netbsd/bin\n+ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin\n \n ENV \\\n-    AR_x86_64_unknown_netbsd=x86_64--netbsd-ar \\\n-    CC_x86_64_unknown_netbsd=x86_64--netbsd-gcc-sysroot \\\n-    CXX_x86_64_unknown_netbsd=x86_64--netbsd-g++-sysroot \\\n     CC_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-gcc \\\n     AR_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-ar \\\n     CXX_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-g++\n \n-ENV HOSTS=x86_64-unknown-netbsd\n-ENV HOSTS=$HOSTS,s390x-unknown-linux-gnu\n+ENV HOSTS=s390x-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/Dockerfile"}, {"sha": "b4995e20dc69b1058bc1577ea3e5aa535d790dd8", "filename": "src/ci/docker/dist-s390x-linux/build-s390x-toolchain.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/build-s390x-toolchain.sh"}, {"sha": "cba416ed2f70bc12990229442e23feb47a0fdd3c", "filename": "src/ci/docker/dist-s390x-linux/patches/glibc/2.12.2/001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fpatches%2Fglibc%2F2.12.2%2F001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fpatches%2Fglibc%2F2.12.2%2F001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fpatches%2Fglibc%2F2.12.2%2F001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/patches/glibc/2.12.2/001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch"}, {"sha": "fa5e4510987f1ca682a642234f52353481e77e1f", "filename": "src/ci/docker/dist-s390x-linux/s390x-linux-gnu.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fs390x-linux-gnu.config?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/s390x-linux-gnu.config"}, {"sha": "8c3e86fd9ad71b19731b1ed8b35d03aa90fe787e", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,39 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  bzip2 \\\n+  xz-utils \\\n+  wget \\\n+  libssl-dev \\\n+  pkg-config\n+\n+COPY build-toolchain.sh /tmp/\n+RUN /tmp/build-toolchain.sh x86_64\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV \\\n+    AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-ar \\\n+    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc \\\n+    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++\n+\n+ENV HOSTS=x86_64-unknown-freebsd\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "5642e6fc937f9736e14bc23aed1fca4b045bc88a", "filename": "src/ci/docker/dist-x86_64-freebsd/build-toolchain.sh", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,112 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+ARCH=$1\n+BINUTILS=2.25.1\n+GCC=5.3.0\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir binutils\n+cd binutils\n+\n+# First up, build binutils\n+curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n+mkdir binutils-build\n+cd binutils-build\n+hide_output ../binutils-$BINUTILS/configure \\\n+  --target=$ARCH-unknown-freebsd10\n+hide_output make -j10\n+hide_output make install\n+cd ../..\n+rm -rf binutils\n+\n+# Next, download the FreeBSD libc and relevant header files\n+\n+mkdir freebsd\n+case \"$ARCH\" in\n+    x86_64)\n+        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/10.2-RELEASE/base.txz\n+        ;;\n+    i686)\n+        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/10.2-RELEASE/base.txz\n+        ;;\n+esac\n+curl $URL | tar xJf - -C freebsd ./usr/include ./usr/lib ./lib\n+\n+dst=/usr/local/$ARCH-unknown-freebsd10\n+\n+cp -r freebsd/usr/include $dst/\n+cp freebsd/usr/lib/crt1.o $dst/lib\n+cp freebsd/usr/lib/Scrt1.o $dst/lib\n+cp freebsd/usr/lib/crti.o $dst/lib\n+cp freebsd/usr/lib/crtn.o $dst/lib\n+cp freebsd/usr/lib/libc.a $dst/lib\n+cp freebsd/usr/lib/libutil.a $dst/lib\n+cp freebsd/usr/lib/libutil_p.a $dst/lib\n+cp freebsd/usr/lib/libm.a $dst/lib\n+cp freebsd/usr/lib/librt.so.1 $dst/lib\n+cp freebsd/usr/lib/libexecinfo.so.1 $dst/lib\n+cp freebsd/lib/libc.so.7 $dst/lib\n+cp freebsd/lib/libm.so.5 $dst/lib\n+cp freebsd/lib/libutil.so.9 $dst/lib\n+cp freebsd/lib/libthr.so.3 $dst/lib/libpthread.so\n+\n+ln -s libc.so.7 $dst/lib/libc.so\n+ln -s libm.so.5 $dst/lib/libm.so\n+ln -s librt.so.1 $dst/lib/librt.so\n+ln -s libutil.so.9 $dst/lib/libutil.so\n+ln -s libexecinfo.so.1 $dst/lib/libexecinfo.so\n+rm -rf freebsd\n+\n+# Finally, download and build gcc to target FreeBSD\n+mkdir gcc\n+cd gcc\n+curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n+cd gcc-$GCC\n+./contrib/download_prerequisites\n+\n+mkdir ../gcc-build\n+cd ../gcc-build\n+hide_output ../gcc-$GCC/configure                \\\n+  --enable-languages=c,c++                       \\\n+  --target=$ARCH-unknown-freebsd10               \\\n+  --disable-multilib                             \\\n+  --disable-nls                                  \\\n+  --disable-libgomp                              \\\n+  --disable-libquadmath                          \\\n+  --disable-libssp                               \\\n+  --disable-libvtv                               \\\n+  --disable-libcilkrts                           \\\n+  --disable-libada                               \\\n+  --disable-libsanitizer                         \\\n+  --disable-libquadmath-support                  \\\n+  --disable-lto\n+hide_output make -j10\n+hide_output make install\n+cd ../..\n+rm -rf gcc"}, {"sha": "d3db8bde0391be158c4f5f135b61dcef87b68bc5", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,101 @@\n+FROM centos:5\n+\n+WORKDIR /build\n+\n+# Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n+# to http://vault.centos.org/\n+RUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\n+RUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\n+RUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\n+\n+RUN yum upgrade -y && yum install -y \\\n+      curl \\\n+      bzip2 \\\n+      gcc \\\n+      gcc-c++ \\\n+      make \\\n+      glibc-devel \\\n+      perl \\\n+      zlib-devel \\\n+      file \\\n+      xz \\\n+      which \\\n+      pkgconfig \\\n+      wget \\\n+      autoconf \\\n+      gettext\n+\n+ENV PATH=/rustroot/bin:$PATH\n+ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n+ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n+WORKDIR /tmp\n+COPY shared.sh build-binutils.sh /tmp/\n+\n+# We need a build of openssl which supports SNI to download artifacts from\n+# static.rust-lang.org. This'll be used to link into libcurl below (and used\n+# later as well), so build a copy of OpenSSL with dynamic libraries into our\n+# generic root.\n+COPY build-openssl.sh /tmp/\n+RUN ./build-openssl.sh\n+\n+# The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n+# some https urls we have, so install a new version of libcurl + curl which is\n+# using the openssl we just built previously.\n+#\n+# Note that we also disable a bunch of optional features of curl that we don't\n+# really need.\n+COPY build-curl.sh /tmp/\n+RUN ./build-curl.sh\n+\n+# binutils < 2.22 has a bug where the 32-bit executables it generates\n+# immediately segfault in Rust, so we need to install our own binutils.\n+#\n+# See https://github.com/rust-lang/rust/issues/20440 for more info\n+RUN ./build-binutils.sh\n+\n+# Need a newer version of gcc than centos has to compile LLVM nowadays\n+COPY build-gcc.sh /tmp/\n+RUN ./build-gcc.sh\n+\n+# CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n+COPY build-python.sh /tmp/\n+RUN ./build-python.sh\n+\n+# Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n+# cloning, so download and build it here.\n+COPY build-git.sh /tmp/\n+RUN ./build-git.sh\n+\n+# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n+# only has 2.6.4, so build our own\n+COPY build-cmake.sh /tmp/\n+RUN ./build-cmake.sh\n+\n+# for sanitizers, we need kernel headers files newer than the ones CentOS ships\n+# with so we install newer ones here\n+COPY build-headers.sh /tmp/\n+RUN ./build-headers.sh\n+\n+RUN curl -Lo /rustroot/dumb-init \\\n+      https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n+      chmod +x /rustroot/dumb-init\n+ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV HOSTS=x86_64-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --enable-extended \\\n+      --enable-sanitizers\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n+\n+# This is the only builder which will create source tarballs\n+ENV DIST_SRC 1\n+\n+# When we build cargo in this container, we don't want it to use the system\n+# libcurl, instead it should compile its own.\n+ENV LIBCURL_NO_PKG_CONFIG 1"}, {"sha": "80aa1f2a0161308affc245daaf2952f973643918", "filename": "src/ci/docker/dist-x86_64-linux/build-binutils.sh", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-binutils.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-binutils.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-binutils.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,26 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+curl https://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.bz2 | tar xfj -\n+\n+mkdir binutils-build\n+cd binutils-build\n+hide_output ../binutils-2.25.1/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf binutils-build\n+rm -rf binutils-2.25.1"}, {"sha": "82e46455cb0f0673fef2fe6442d25aa7c4b8d976", "filename": "src/ci/docker/dist-x86_64-linux/build-cmake.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-cmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-cmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-cmake.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cmake.org/files/v3.6/cmake-3.6.3.tar.gz | tar xzf -\n+\n+mkdir cmake-build\n+cd cmake-build\n+hide_output ../cmake-3.6.3/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf cmake-build\n+rm -rf cmake-3.6.3"}, {"sha": "b7d22755a571bab38aa4d85629fa69cbec041c24", "filename": "src/ci/docker/dist-x86_64-linux/build-curl.sh", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,43 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+VERSION=7.51.0\n+\n+curl http://cool.haxx.se/download/curl-$VERSION.tar.bz2 | tar xjf -\n+\n+mkdir curl-build\n+cd curl-build\n+hide_output ../curl-$VERSION/configure \\\n+      --prefix=/rustroot \\\n+      --with-ssl=/rustroot \\\n+      --disable-sspi \\\n+      --disable-gopher \\\n+      --disable-smtp \\\n+      --disable-smb \\\n+      --disable-imap \\\n+      --disable-pop3 \\\n+      --disable-tftp \\\n+      --disable-telnet \\\n+      --disable-manual \\\n+      --disable-dict \\\n+      --disable-rtsp \\\n+      --disable-ldaps \\\n+      --disable-ldap\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf curl-build\n+rm -rf curl-$VERSION\n+yum erase -y curl"}, {"sha": "ab2562538d6d7376e942a219ce0f00664082be9f", "filename": "src/ci/docker/dist-x86_64-linux/build-gcc.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+GCC=4.8.5\n+\n+curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n+cd gcc-$GCC\n+./contrib/download_prerequisites\n+mkdir ../gcc-build\n+cd ../gcc-build\n+hide_output ../gcc-$GCC/configure \\\n+    --prefix=/rustroot \\\n+    --enable-languages=c,c++\n+hide_output make -j10\n+hide_output make install\n+ln -nsf gcc /rustroot/bin/cc\n+\n+cd ..\n+rm -rf gcc-build\n+rm -rf gcc-$GCC\n+yum erase -y gcc gcc-c++ binutils"}, {"sha": "92fa66b496d933648a0e49c3f83b6565246188a7", "filename": "src/ci/docker/dist-x86_64-linux/build-git.sh", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-git.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,24 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz | tar xzf -\n+\n+cd git-2.10.0\n+make configure\n+hide_output ./configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf git-2.10.0"}, {"sha": "4ce38fd9205e27b4aff8b169f4ead5c31f731993", "filename": "src/ci/docker/dist-x86_64-linux/build-headers.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-headers.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-3.2.84.tar.xz | unxz | tar x\n+\n+cd linux-3.2.84\n+hide_output make mrproper\n+hide_output make INSTALL_HDR_PATH=dest headers_install\n+\n+find dest/include \\( -name .install -o -name ..install.cmd \\) -delete\n+yes | cp -fr dest/include/* /usr/include\n+\n+cd ..\n+rm -rf linux-3.2.84"}, {"sha": "64b1abf82a8277d8ebc1a10c54b40fd7be583bd4", "filename": "src/ci/docker/dist-x86_64-linux/build-openssl.sh", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,27 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+VERSION=1.0.2j\n+\n+curl https://www.openssl.org/source/openssl-$VERSION.tar.gz | tar xzf -\n+\n+cd openssl-$VERSION\n+hide_output ./config --prefix=/rustroot shared -fPIC\n+hide_output make -j10\n+hide_output make install\n+cd ..\n+rm -rf openssl-$VERSION\n+\n+# Make the system cert collection available to the new install.\n+ln -nsf /etc/pki/tls/cert.pem /rustroot/ssl/"}, {"sha": "a7a450f3c8de772403b481b96c94b03d5ec2325e", "filename": "src/ci/docker/dist-x86_64-linux/build-python.sh", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-python.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,30 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz | \\\n+  tar xzf -\n+\n+mkdir python-build\n+cd python-build\n+\n+# Gotta do some hackery to tell python about our custom OpenSSL build, but other\n+# than that fairly normal.\n+CFLAGS='-I /rustroot/include' LDFLAGS='-L /rustroot/lib -L /rustroot/lib64' \\\n+    hide_output ../Python-2.7.12/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf python-build\n+rm -rf Python-2.7.12"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-x86_64-linux/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fshared.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "d58741132dccc905caf206acf132fa237cf06b37", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -26,12 +26,13 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=x86_64-unknown-linux-musl \\\n-      --musl-root-x86_64=/musl-x86_64\n+      --musl-root-x86_64=/musl-x86_64 \\\n+      --enable-extended\n \n # Newer binutils broke things on some vms/distros (i.e., linking against\n # unknown relocs disabled by the following flag), so we need to go out of our"}, {"sha": "776da0093974c0c68c9b59ca84f9fd55eec26059", "filename": "src/ci/docker/dist-x86_64-musl/build-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2Fbuild-musl.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -15,7 +15,7 @@ set -ex\n export CFLAGS=\"-fPIC -Wa,-mrelax-relocations=no\"\n export CXXFLAGS=\"-Wa,-mrelax-relocations=no\"\n \n-MUSL=musl-1.1.14\n+MUSL=musl-1.1.16\n curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n cd $MUSL\n ./configure --prefix=/musl-x86_64 --disable-shared"}, {"sha": "5c2fbbdf30f3618b8f0f3f7e674f9e2cb1ac3714", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,78 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY build-netbsd-toolchain.sh /tmp/\n+RUN ./build-netbsd-toolchain.sh\n+\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/x86_64-unknown-netbsd/bin\n+\n+ENV \\\n+    AR_x86_64_unknown_netbsd=x86_64--netbsd-ar \\\n+    CC_x86_64_unknown_netbsd=x86_64--netbsd-gcc-sysroot \\\n+    CXX_x86_64_unknown_netbsd=x86_64--netbsd-g++-sysroot\n+\n+ENV HOSTS=x86_64-unknown-netbsd\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "ea335a249736c703296840774638e609961625c1", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/build-netbsd-toolchain.sh"}, {"sha": "dcbf1c7396376eb6d8880dfe5b94ee606992e2ee", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   lib32stdc++6\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,10 +27,10 @@ WORKDIR /tmp\n COPY build-emscripten.sh /tmp/\n RUN ./build-emscripten.sh\n ENV PATH=$PATH:/tmp/emsdk_portable\n-ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.1/build_tag-e1.37.1_32/bin\n+ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.10/build_tag-e1.37.10_32/bin\n ENV PATH=$PATH:/tmp/emsdk_portable/node/4.1.1_32bit/bin\n-ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.1\n-ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.1\n+ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.10\n+ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.10\n \n ENV RUST_CONFIGURE_ARGS --target=asmjs-unknown-emscripten\n "}, {"sha": "8d6a28f418bf955b8d75b049d33f49794630e538", "filename": "src/ci/docker/emscripten/build-emscripten.sh", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -29,8 +29,25 @@ exit 1\n }\n \n curl https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n-      tar xzf -\n+    tar xzf -\n+\n+# Some versions of the EMSDK archive have their contents in .emsdk-portable\n+# and others in emsdk_portable. Make sure the EMSDK ends up in a fixed path.\n+if [ -d emsdk-portable ]; then\n+    mv emsdk-portable emsdk_portable\n+fi\n+\n+if [ ! -d emsdk_portable ]; then\n+    echo \"ERROR: Invalid emsdk archive. Dumping working directory.\" >&2\n+    ls -l\n+    exit 1\n+fi\n+\n+# Some versions of the EMSDK set the permissions of the root directory to\n+# 0700. Ensure the directory is readable by all users.\n+chmod 755 emsdk_portable\n+\n source emsdk_portable/emsdk_env.sh\n hide_output emsdk update\n-hide_output emsdk install --build=Release sdk-tag-1.37.1-32bit\n-hide_output emsdk activate --build=Release sdk-tag-1.37.1-32bit\n+hide_output emsdk install --build=Release sdk-tag-1.37.10-32bit\n+hide_output emsdk activate --build=Release sdk-tag-1.37.10-32bit"}, {"sha": "94554111104498bf7611803fc90a9996623afbda", "filename": "src/ci/docker/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "12c9cdf4a112c876d4515afeaa667702c41dd7dd", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "59b93b784b2f6f27db319fc06d23c2fa93a4600c", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -38,7 +38,6 @@ if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n     args=\"$args --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\"\n     args=\"$args --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\"\n     args=\"$args --env SCCACHE_ERROR_LOG=/tmp/sccache/sccache.log\"\n-    args=\"$args --env SCCACHE_LOG_LEVEL=debug\"\n     args=\"$args --volume $objdir/tmp:/tmp/sccache\"\n else\n     mkdir -p $HOME/.cache/sccache\n@@ -57,6 +56,7 @@ exec docker \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n+  --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\\n   --rm \\\n   rust-ci \\"}, {"sha": "d1f421248df5bfadb5f6c1beed987881f06af0d2", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "86704126700be4c9165b0482a5635c474bb89a93", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "26d1f82efcc59ba0945e308f91e0fcc019b65683", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "3626301d7e9a22be0db82bb6c9ca65a9de78353c", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "42b2d98d332eb1fa12822fa220b60609eb74ffd1", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "8bff767609f415117bb86f01c53a6d46c4bc52a4", "filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "c2c1ac8787903117afd29ce7bc910bbf3e2eab4c", "filename": "src/ci/docker/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "727cc84643fbec74b41c14d99930d76f8a994882", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-22-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-29-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "1db2135eb6d868bbf25d45a2b02fe6cb11c6056a", "filename": "src/ci/init_repo.sh", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,86 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -o errexit\n+set -o pipefail\n+set -o nounset\n+\n+set -o xtrace\n+\n+ci_dir=$(cd $(dirname $0) && pwd)\n+. \"$ci_dir/shared.sh\"\n+\n+REPO_DIR=\"$1\"\n+CACHE_DIR=\"$2\"\n+\n+cache_src_dir=\"$CACHE_DIR/src\"\n+# If the layout of the cache directory changes, bump the number here\n+# (and anywhere else this file is referenced) so the cache is wiped\n+cache_valid_file=\"$CACHE_DIR/cache_valid1\"\n+\n+if [ ! -d \"$REPO_DIR\" -o ! -d \"$REPO_DIR/.git\" ]; then\n+    echo \"Error: $REPO_DIR does not exist or is not a git repo\"\n+    exit 1\n+fi\n+cd $REPO_DIR\n+if [ ! -d \"$CACHE_DIR\" ]; then\n+    echo \"Error: $CACHE_DIR does not exist or is not an absolute path\"\n+    exit 1\n+fi\n+\n+# Wipe the cache if it's not valid, or mark it as invalid while we update it\n+if [ ! -f \"$cache_valid_file\" ]; then\n+    rm -rf \"$CACHE_DIR\"\n+    mkdir \"$CACHE_DIR\"\n+else\n+    # Ignore errors while gathering information about the possible brokenness\n+    # of the git repo since our gathered info will tell us something is wrong\n+    set +o errexit\n+    stat_lines=$(cd \"$cache_src_dir\" && git status --porcelain | wc -l)\n+    stat_ec=$(cd \"$cache_src_dir\" && git status >/dev/null 2>&1; echo $?)\n+    set -o errexit\n+    if [ ! -d \"$cache_src_dir/.git\" -o $stat_lines != 0 -o $stat_ec != 0 ]; then\n+        # Something is badly wrong - the cache valid file is here, but something\n+        # about the git repo is fishy. Nuke it all, just in case\n+        echo \"WARNING: $cache_valid_file exists but bad repo: l:$stat_lines, ec:$stat_ec\"\n+        rm -rf \"$CACHE_DIR\"\n+        mkdir \"$CACHE_DIR\"\n+    else\n+        rm \"$cache_valid_file\"\n+    fi\n+fi\n+\n+# Update the cache (a pristine copy of the rust source master)\n+if [ ! -d \"$cache_src_dir/.git\" ]; then\n+    retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n+        git clone https://github.com/rust-lang/rust.git $cache_src_dir\"\n+fi\n+retry sh -c \"cd $cache_src_dir && git reset --hard && git pull\"\n+retry sh -c \"cd $cache_src_dir && \\\n+    git submodule deinit -f . && git submodule sync && git submodule update --init\"\n+\n+# Cache was updated without errors, mark it as valid\n+touch \"$cache_valid_file\"\n+\n+# Update the submodules of the repo we're in, using the pristine repo as\n+# a cache for any object files\n+# No, `git submodule foreach` won't work:\n+# http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n+modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n+for module in $modules; do\n+    if [ ! -d \"$cache_src_dir/$module\" ]; then\n+        echo \"WARNING: $module not found in pristine repo\"\n+        retry sh -c \"git submodule deinit -f $module && git submodule update --init $module\"\n+        continue\n+    fi\n+    retry sh -c \"git submodule deinit -f $module && \\\n+        git submodule update --init --reference $cache_src_dir/$module $module\"\n+done"}, {"sha": "c6510120b47ae7ec3fb500d71df5db6ba5dc52ff", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -42,7 +42,6 @@ fi\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=nightly\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-save-analysis\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\""}, {"sha": "f2e13fc73ae4778930fcd635a8c85f21a9e91d7a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/bin/false\n # Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n@@ -9,13 +9,16 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# This file is intended to be sourced with `. shared.sh` or\n+# `source shared.sh`, hence the invalid shebang and not being\n+# marked as an executable file in git.\n+\n # See http://unix.stackexchange.com/questions/82598\n function retry {\n+  echo \"Attempting with retry:\" \"$@\"\n   local n=1\n   local max=5\n-  local delay=15\n   while true; do\n-    echo \"Attempting:\" \"$@\"\n     \"$@\" && break || {\n       if [[ $n -lt $max ]]; then\n         ((n++))"}, {"sha": "c8a8767c56ad3d3f4eb45c87b95026936fb9aa35", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1 +1 @@\n-Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3\n+Subproject commit c8a8767c56ad3d3f4eb45c87b95026936fb9aa35"}, {"sha": "ad7de198561b3a12217ea2da76d796d9c7fc0ed3", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1 +1 @@\n-Subproject commit 9bd223ca406b1170a24942d6474f9e8a56f4a420\n+Subproject commit ad7de198561b3a12217ea2da76d796d9c7fc0ed3"}, {"sha": "12daa24e857fcbfa62a4f292c1aab804936a57d9", "filename": "src/doc/grammar.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -761,8 +761,6 @@ closure_type := [ 'unsafe' ] [ '<' lifetime-list '>' ] '|' arg-list '|'\n                 [ ':' bound-list ] [ '->' type ]\n lifetime-list := lifetime | lifetime ',' lifetime-list\n arg-list := ident ':' type | ident ':' type ',' arg-list\n-bound-list := bound | bound '+' bound-list\n-bound := path | lifetime\n ```\n \n ### Never type\n@@ -780,6 +778,16 @@ never_type : \"!\" ;\n \n **FIXME:** grammar?\n \n+### Type parameter bounds\n+\n+```antlr\n+bound-list := bound | bound '+' bound-list '+' ?\n+bound := ty_bound | lt_bound\n+lt_bound := lifetime\n+ty_bound := ty_bound_noparen | (ty_bound_noparen)\n+ty_bound_noparen := [?] [ for<lt_param_defs> ] simple_path\n+```\n+\n ### Self types\n \n **FIXME:** grammar?"}, {"sha": "6c511548789b73656a9303f5dbf153274d62f4de", "filename": "src/doc/guide-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Fguide-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Fguide-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugins.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Compiler Plugins Guide\n \n This content has moved into\n-[the Unstable Book](unstable-book/plugin.html).\n+[the Unstable Book](unstable-book/language-features/plugin.html)."}, {"sha": "fd5b120e81faeceb8a0fd3e2898adeb5d24fead2", "filename": "src/doc/index.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -32,16 +32,21 @@ nicknamed 'The Rust Bookshelf.'\n * [The Rustonomicon][nomicon] is your guidebook to the dark arts of unsafe Rust.\n * [The Reference][ref] is not a formal spec, but is more detailed and comprehensive than the book.\n \n+Initially, documentation lands in the Unstable Book, and then, as part of the\n+stabilization process, is moved into the Book, Nomicon, or Reference.\n+\n Another few words about the reference: it is guaranteed to be accurate, but not\n-complete. We now have a policy that all new features must be included in the\n-reference before stabilization; however, we are still back-filling things that\n-landed before then. That work is being tracked [here][38643].\n+complete. We have a policy that features must have documentation to be stabilized,\n+but we did not always have this policy, and so there are some stable things that\n+are not yet in the reference. We're working on back-filling things that landed\n+before this policy was put into place. That work is being tracked\n+[here][refchecklist].\n \n [Rust Learning]: https://github.com/ctjhoa/rust-learning\n [Docs.rs]: https://docs.rs/\n [api]: std/index.html\n [ref]: reference/index.html\n-[38643]: https://github.com/rust-lang/rust/issues/38643\n+[refchecklist]: https://github.com/rust-lang-nursery/reference/issues/9\n [err]: error-index.html\n [book]: book/index.html\n [nomicon]: nomicon/index.html"}, {"sha": "616b98444ff4eb5260deee95ee3e090dfd98b947", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1 +1 @@\n-Subproject commit d08fe97d12b41c1ed8cc7701e545864132783941\n+Subproject commit 616b98444ff4eb5260deee95ee3e090dfd98b947"}, {"sha": "6b0de90d87dda15e323ef24cdf7ed873ac5cf4d3", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1 +1 @@\n-Subproject commit 516549972d61c8946542d1a34afeae97167ff77b\n+Subproject commit 6b0de90d87dda15e323ef24cdf7ed873ac5cf4d3"}, {"sha": "5008b228c5c85fe04df289f4180a83fd4f5ce7b9", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1,3 +1,3 @@\n % The Rust Reference Manual\n \n-The manual has moved, and is now called [the reference](reference.html).\n+The manual has moved, and is now called [the reference](reference/index.html)."}, {"sha": "3d9e7c7fd860dd33f1b3b793f83ca3d102fc0425", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 222, "deletions": 94, "changes": 316, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1,96 +1,224 @@\n [The Unstable Book](the-unstable-book.md)\n \n-- [abi_msp430_interrupt](abi-msp430-interrupt.md)\n-- [abi_ptx](abi-ptx.md)\n-- [abi_sysv64](abi-sysv64.md)\n-- [abi_unadjusted](abi-unadjusted.md)\n-- [abi_vectorcall](abi-vectorcall.md)\n-- [abi_x86_interrupt](abi-x86-interrupt.md)\n-- [advanced_slice_patterns](advanced-slice-patterns.md)\n-- [alloc_jemalloc](alloc-jemalloc.md)\n-- [alloc_system](alloc-system.md)\n-- [allocator](allocator.md)\n-- [allow_internal_unstable](allow-internal-unstable.md)\n-- [asm](asm.md)\n-- [associated_consts](associated-consts.md)\n-- [associated_type_defaults](associated-type-defaults.md)\n-- [attr_literals](attr-literals.md)\n-- [box_patterns](box-patterns.md)\n-- [box_syntax](box-syntax.md)\n-- [cfg_target_feature](cfg-target-feature.md)\n-- [cfg_target_has_atomic](cfg-target-has-atomic.md)\n-- [cfg_target_thread_local](cfg-target-thread-local.md)\n-- [cfg_target_vendor](cfg-target-vendor.md)\n-- [compiler_builtins](compiler-builtins.md)\n-- [concat_idents](concat-idents.md)\n-- [conservative_impl_trait](conservative-impl-trait.md)\n-- [const_fn](const-fn.md)\n-- [const_indexing](const-indexing.md)\n-- [custom_attribute](custom-attribute.md)\n-- [custom_derive](custom-derive.md)\n-- [default_type_parameter_fallback](default-type-parameter-fallback.md)\n-- [drop_types_in_const](drop-types-in-const.md)\n-- [dropck_eyepatch](dropck-eyepatch.md)\n-- [dropck_parametricity](dropck-parametricity.md)\n-- [exclusive_range_pattern](exclusive-range-pattern.md)\n-- [field_init_shorthand](field-init-shorthand.md)\n-- [fundamental](fundamental.md)\n-- [generic_param_attrs](generic-param-attrs.md)\n-- [i128_type](i128-type.md)\n-- [inclusive_range_syntax](inclusive-range-syntax.md)\n-- [intrinsics](intrinsics.md)\n-- [lang_items](lang-items.md)\n-- [link_args](link-args.md)\n-- [link_cfg](link-cfg.md)\n-- [link_llvm_intrinsics](link-llvm-intrinsics.md)\n-- [linkage](linkage.md)\n-- [log_syntax](log-syntax.md)\n-- [loop_break_value](loop-break-value.md)\n-- [macro_reexport](macro-reexport.md)\n-- [main](main.md)\n-- [naked_functions](naked-functions.md)\n-- [needs_allocator](needs-allocator.md)\n-- [needs_panic_runtime](needs-panic-runtime.md)\n-- [never_type](never-type.md)\n-- [no_core](no-core.md)\n-- [no_debug](no-debug.md)\n-- [non_ascii_idents](non-ascii-idents.md)\n-- [omit_gdb_pretty_printer_section](omit-gdb-pretty-printer-section.md)\n-- [on_unimplemented](on-unimplemented.md)\n-- [optin_builtin_traits](optin-builtin-traits.md)\n-- [panic_runtime](panic-runtime.md)\n-- [placement_in_syntax](placement-in-syntax.md)\n-- [platform_intrinsics](platform-intrinsics.md)\n-- [plugin](plugin.md)\n-- [plugin_registrar](plugin-registrar.md)\n-- [prelude_import](prelude-import.md)\n-- [proc_macro](proc-macro.md)\n-- [quote](quote.md)\n-- [relaxed_adts](relaxed-adts.md)\n-- [repr_simd](repr-simd.md)\n-- [rustc_attrs](rustc-attrs.md)\n-- [rustc_diagnostic_macros](rustc-diagnostic-macros.md)\n-- [rvalue_static_promotion](rvalue-static-promotion.md)\n-- [sanitizer_runtime](sanitizer-runtime.md)\n-- [simd](simd.md)\n-- [simd_ffi](simd-ffi.md)\n-- [slice_patterns](slice-patterns.md)\n-- [sort_unstable](sort-unstable.md)\n-- [specialization](specialization.md)\n-- [staged_api](staged-api.md)\n-- [start](start.md)\n-- [static_nobundle](static-nobundle.md)\n-- [static_recursion](static-recursion.md)\n-- [stmt_expr_attributes](stmt-expr-attributes.md)\n-- [struct_field_attributes](struct-field-attributes.md)\n-- [structural_match](structural-match.md)\n-- [target_feature](target-feature.md)\n-- [test](test.md)\n-- [thread_local](thread-local.md)\n-- [trace_macros](trace-macros.md)\n-- [type_ascription](type-ascription.md)\n-- [unboxed_closures](unboxed-closures.md)\n-- [untagged_unions](untagged-unions.md)\n-- [unwind_attributes](unwind-attributes.md)\n-- [use_extern_macros](use-extern-macros.md)\n-- [windows_subsystem](windows-subsystem.md)\n+- [Compiler flags](compiler-flags.md)\n+    - [linker_flavor](compiler-flags/linker-flavor.md)\n+    - [remap_path_prefix](compiler-flags/remap-path-prefix.md)\n+- [Language features](language-features.md)\n+    - [abi_msp430_interrupt](language-features/abi-msp430-interrupt.md)\n+    - [abi_ptx](language-features/abi-ptx.md)\n+    - [abi_sysv64](language-features/abi-sysv64.md)\n+    - [abi_unadjusted](language-features/abi-unadjusted.md)\n+    - [abi_vectorcall](language-features/abi-vectorcall.md)\n+    - [abi_x86_interrupt](language-features/abi-x86-interrupt.md)\n+    - [advanced_slice_patterns](language-features/advanced-slice-patterns.md)\n+    - [allocator](language-features/allocator.md)\n+    - [allow_internal_unstable](language-features/allow-internal-unstable.md)\n+    - [asm](language-features/asm.md)\n+    - [associated_consts](language-features/associated-consts.md)\n+    - [associated_type_defaults](language-features/associated-type-defaults.md)\n+    - [attr_literals](language-features/attr-literals.md)\n+    - [box_patterns](language-features/box-patterns.md)\n+    - [box_syntax](language-features/box-syntax.md)\n+    - [catch_expr](language-features/catch-expr.md)\n+    - [cfg_target_feature](language-features/cfg-target-feature.md)\n+    - [cfg_target_has_atomic](language-features/cfg-target-has-atomic.md)\n+    - [cfg_target_thread_local](language-features/cfg-target-thread-local.md)\n+    - [cfg_target_vendor](language-features/cfg-target-vendor.md)\n+    - [closure_to_fn_coercion](language-features/closure-to-fn-coercion.md)\n+    - [compiler_builtins](language-features/compiler-builtins.md)\n+    - [concat_idents](language-features/concat-idents.md)\n+    - [conservative_impl_trait](language-features/conservative-impl-trait.md)\n+    - [const_fn](language-features/const-fn.md)\n+    - [const_indexing](language-features/const-indexing.md)\n+    - [custom_attribute](language-features/custom-attribute.md)\n+    - [custom_derive](language-features/custom-derive.md)\n+    - [default_type_parameter_fallback](language-features/default-type-parameter-fallback.md)\n+    - [drop_types_in_const](language-features/drop-types-in-const.md)\n+    - [dropck_eyepatch](language-features/dropck-eyepatch.md)\n+    - [dropck_parametricity](language-features/dropck-parametricity.md)\n+    - [exclusive_range_pattern](language-features/exclusive-range-pattern.md)\n+    - [fundamental](language-features/fundamental.md)\n+    - [generic_param_attrs](language-features/generic-param-attrs.md)\n+    - [global_asm](language-features/global_asm.md)\n+    - [i128_type](language-features/i128-type.md)\n+    - [inclusive_range_syntax](language-features/inclusive-range-syntax.md)\n+    - [intrinsics](language-features/intrinsics.md)\n+    - [lang_items](language-features/lang-items.md)\n+    - [link_args](language-features/link-args.md)\n+    - [link_cfg](language-features/link-cfg.md)\n+    - [link_llvm_intrinsics](language-features/link-llvm-intrinsics.md)\n+    - [linkage](language-features/linkage.md)\n+    - [log_syntax](language-features/log-syntax.md)\n+    - [loop_break_value](language-features/loop-break-value.md)\n+    - [macro_reexport](language-features/macro-reexport.md)\n+    - [macro_vis_matcher](language-features/macro-vis-matcher.md)\n+    - [main](language-features/main.md)\n+    - [naked_functions](language-features/naked-functions.md)\n+    - [needs_allocator](language-features/needs-allocator.md)\n+    - [needs_panic_runtime](language-features/needs-panic-runtime.md)\n+    - [never_type](language-features/never-type.md)\n+    - [no_core](language-features/no-core.md)\n+    - [no_debug](language-features/no-debug.md)\n+    - [non_ascii_idents](language-features/non-ascii-idents.md)\n+    - [omit_gdb_pretty_printer_section](language-features/omit-gdb-pretty-printer-section.md)\n+    - [on_unimplemented](language-features/on-unimplemented.md)\n+    - [optin_builtin_traits](language-features/optin-builtin-traits.md)\n+    - [overlapping_marker_traits](language-features/overlapping-marker-traits.md)\n+    - [panic_runtime](language-features/panic-runtime.md)\n+    - [placement_in_syntax](language-features/placement-in-syntax.md)\n+    - [platform_intrinsics](language-features/platform-intrinsics.md)\n+    - [plugin](language-features/plugin.md)\n+    - [plugin_registrar](language-features/plugin-registrar.md)\n+    - [prelude_import](language-features/prelude-import.md)\n+    - [proc_macro](language-features/proc-macro.md)\n+    - [quote](language-features/quote.md)\n+    - [relaxed_adts](language-features/relaxed-adts.md)\n+    - [repr_align](language-features/repr-align.md)\n+    - [repr_simd](language-features/repr-simd.md)\n+    - [rustc_attrs](language-features/rustc-attrs.md)\n+    - [rustc_diagnostic_macros](language-features/rustc-diagnostic-macros.md)\n+    - [rvalue_static_promotion](language-features/rvalue-static-promotion.md)\n+    - [sanitizer_runtime](language-features/sanitizer-runtime.md)\n+    - [simd](language-features/simd.md)\n+    - [simd_ffi](language-features/simd-ffi.md)\n+    - [slice_patterns](language-features/slice-patterns.md)\n+    - [specialization](language-features/specialization.md)\n+    - [staged_api](language-features/staged-api.md)\n+    - [start](language-features/start.md)\n+    - [static_nobundle](language-features/static-nobundle.md)\n+    - [stmt_expr_attributes](language-features/stmt-expr-attributes.md)\n+    - [struct_field_attributes](language-features/struct-field-attributes.md)\n+    - [structural_match](language-features/structural-match.md)\n+    - [target_feature](language-features/target-feature.md)\n+    - [thread_local](language-features/thread-local.md)\n+    - [trace_macros](language-features/trace-macros.md)\n+    - [type_ascription](language-features/type-ascription.md)\n+    - [unboxed_closures](language-features/unboxed-closures.md)\n+    - [untagged_unions](language-features/untagged-unions.md)\n+    - [unwind_attributes](language-features/unwind-attributes.md)\n+    - [use_extern_macros](language-features/use-extern-macros.md)\n+    - [used](language-features/used.md)\n+- [Library Features](library-features.md)\n+    - [alloc_jemalloc](library-features/alloc-jemalloc.md)\n+    - [alloc_system](library-features/alloc-system.md)\n+    - [alloc](library-features/alloc.md)\n+    - [as_c_str](library-features/as-c-str.md)\n+    - [ascii_ctype](library-features/ascii-ctype.md)\n+    - [binary_heap_peek_mut_pop](library-features/binary-heap-peek-mut-pop.md)\n+    - [box_heap](library-features/box-heap.md)\n+    - [c_void_variant](library-features/c-void-variant.md)\n+    - [char_escape_debug](library-features/char-escape-debug.md)\n+    - [coerce_unsized](library-features/coerce-unsized.md)\n+    - [collection_placement](library-features/collection-placement.md)\n+    - [collections_range](library-features/collections-range.md)\n+    - [collections](library-features/collections.md)\n+    - [command_envs](library-features/command-envs.md)\n+    - [compiler_builtins_lib](library-features/compiler-builtins-lib.md)\n+    - [compiler_fences](library-features/compiler-fences.md)\n+    - [concat_idents_macro](library-features/concat-idents-macro.md)\n+    - [core_char_ext](library-features/core-char-ext.md)\n+    - [core_float](library-features/core-float.md)\n+    - [core_intrinsics](library-features/core-intrinsics.md)\n+    - [core_panic](library-features/core-panic.md)\n+    - [core_private_bignum](library-features/core-private-bignum.md)\n+    - [core_private_diy_float](library-features/core-private-diy-float.md)\n+    - [core_slice_ext](library-features/core-slice-ext.md)\n+    - [core_str_ext](library-features/core-str-ext.md)\n+    - [dec2flt](library-features/dec2flt.md)\n+    - [decode_utf8](library-features/decode-utf8.md)\n+    - [derive_clone_copy](library-features/derive-clone-copy.md)\n+    - [derive_eq](library-features/derive-eq.md)\n+    - [discriminant_value](library-features/discriminant-value.md)\n+    - [error_type_id](library-features/error-type-id.md)\n+    - [exact_size_is_empty](library-features/exact-size-is-empty.md)\n+    - [fd](library-features/fd.md)\n+    - [fd_read](library-features/fd-read.md)\n+    - [fixed_size_array](library-features/fixed-size-array.md)\n+    - [float_bits_conv](library-features/float-bits-conv.md)\n+    - [flt2dec](library-features/flt2dec.md)\n+    - [fmt_flags_align](library-features/fmt-flags-align.md)\n+    - [fmt_internals](library-features/fmt-internals.md)\n+    - [fn_traits](library-features/fn-traits.md)\n+    - [fnbox](library-features/fnbox.md)\n+    - [from_utf8_error_as_bytes](library-features/from_utf8_error_as_bytes.md)\n+    - [fused](library-features/fused.md)\n+    - [future_atomic_orderings](library-features/future-atomic-orderings.md)\n+    - [get_type_id](library-features/get-type-id.md)\n+    - [heap_api](library-features/heap-api.md)\n+    - [hint_core_should_pause](library-features/hint-core-should-pause.md)\n+    - [i128](library-features/i128.md)\n+    - [inclusive_range](library-features/inclusive-range.md)\n+    - [integer_atomics](library-features/integer-atomics.md)\n+    - [into_boxed_c_str](library-features/into-boxed-c-str.md)\n+    - [into_boxed_os_str](library-features/into-boxed-os-str.md)\n+    - [into_boxed_path](library-features/into-boxed-path.md)\n+    - [io_error_internals](library-features/io-error-internals.md)\n+    - [io](library-features/io.md)\n+    - [ip](library-features/ip.md)\n+    - [iter_rfind](library-features/iter-rfind.md)\n+    - [libstd_io_internals](library-features/libstd-io-internals.md)\n+    - [libstd_sys_internals](library-features/libstd-sys-internals.md)\n+    - [libstd_thread_internals](library-features/libstd-thread-internals.md)\n+    - [linked_list_extras](library-features/linked-list-extras.md)\n+    - [lookup_host](library-features/lookup-host.md)\n+    - [manually_drop](library-features/manually-drop.md)\n+    - [more_io_inner_methods](library-features/more-io-inner-methods.md)\n+    - [mpsc_select](library-features/mpsc-select.md)\n+    - [n16](library-features/n16.md)\n+    - [never_type_impls](library-features/never-type-impls.md)\n+    - [nonzero](library-features/nonzero.md)\n+    - [offset_to](library-features/offset-to.md)\n+    - [once_poison](library-features/once-poison.md)\n+    - [oom](library-features/oom.md)\n+    - [option_entry](library-features/option-entry.md)\n+    - [osstring_shrink_to_fit](library-features/osstring-shrink-to-fit.md)\n+    - [panic_abort](library-features/panic-abort.md)\n+    - [panic_unwind](library-features/panic-unwind.md)\n+    - [pattern](library-features/pattern.md)\n+    - [peek](library-features/peek.md)\n+    - [placement_in](library-features/placement-in.md)\n+    - [placement_new_protocol](library-features/placement-new-protocol.md)\n+    - [print](library-features/print.md)\n+    - [proc_macro_internals](library-features/proc-macro-internals.md)\n+    - [process_try_wait](library-features/process-try-wait.md)\n+    - [question_mark_carrier](library-features/question-mark-carrier.md)\n+    - [rand](library-features/rand.md)\n+    - [range_contains](library-features/range-contains.md)\n+    - [raw](library-features/raw.md)\n+    - [retain_hash_collection](library-features/retain-hash-collection.md)\n+    - [reverse_cmp_key](library-features/reverse-cmp-key.md)\n+    - [rt](library-features/rt.md)\n+    - [rustc_private](library-features/rustc-private.md)\n+    - [sanitizer_runtime_lib](library-features/sanitizer-runtime-lib.md)\n+    - [set_stdio](library-features/set-stdio.md)\n+    - [shared](library-features/shared.md)\n+    - [sip_hash_13](library-features/sip-hash-13.md)\n+    - [slice_concat_ext](library-features/slice-concat-ext.md)\n+    - [slice_get_slice](library-features/slice-get-slice.md)\n+    - [slice_rsplit](library-features/slice-rsplit.md)\n+    - [sort_internals](library-features/sort-internals.md)\n+    - [sort_unstable](library-features/sort-unstable.md)\n+    - [splice](library-features/splice.md)\n+    - [step_by](library-features/step-by.md)\n+    - [step_trait](library-features/step-trait.md)\n+    - [str_checked_slicing](library-features/str-checked-slicing.md)\n+    - [str_escape](library-features/str-escape.md)\n+    - [str_internals](library-features/str-internals.md)\n+    - [str_box_extras](library-features/str-box-extras.md)\n+    - [str_mut_extras](library-features/str-mut-extras.md)\n+    - [test](library-features/test.md)\n+    - [thread_id](library-features/thread-id.md)\n+    - [thread_local_internals](library-features/thread-local-internals.md)\n+    - [thread_local_state](library-features/thread-local-state.md)\n+    - [toowned_clone_into](library-features/toowned-clone-into.md)\n+    - [trusted_len](library-features/trusted-len.md)\n+    - [try_from](library-features/try-from.md)\n+    - [unicode](library-features/unicode.md)\n+    - [unique](library-features/unique.md)\n+    - [unsize](library-features/unsize.md)\n+    - [utf8_error_error_len](library-features/utf8-error-error-len.md)\n+    - [vec_remove_item](library-features/vec-remove-item.md)\n+    - [windows_c](library-features/windows-c.md)\n+    - [windows_handle](library-features/windows-handle.md)\n+    - [windows_net](library-features/windows-net.md)\n+    - [windows_stdio](library-features/windows-stdio.md)"}, {"sha": "9b2c7f298979d016ec2927f099185b4d54fadbc5", "filename": "src/doc/unstable-book/src/abi-msp430-interrupt.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md?ref=e406cd1ec9abb77236318db30e362e4654411a1a", "patch": "@@ -1,7 +0,0 @@\n-# `abi_msp430_interrupt`\n-\n-The tracking issue for this feature is: [#38487]\n-\n-[#38487]: https://github.com/rust-lang/rust/issues/38487\n-\n-------------------------"}, {"sha": "9c1b8868aceb4bd5d208cf14691f4d781abd4874", "filename": "src/doc/unstable-book/src/abi-ptx.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md?ref=e406cd1ec9abb77236318db30e362e4654411a1a", "patch": "@@ -1,5 +0,0 @@\n-# `abi_ptx`\n-\n-The tracking issue for this feature is: None.\n-\n-------------------------"}, {"sha": "3ec3cba257a99f10b7a2b541a63783c180741dae", "filename": "src/doc/unstable-book/src/compiler-builtins.md", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md?ref=e406cd1ec9abb77236318db30e362e4654411a1a", "patch": "@@ -1,6 +0,0 @@\n-# `compiler_builtins`\n-\n-The tracking issue for this feature is: None.\n-\n-------------------------\n-"}, {"sha": "43eadb351016d4e58969642097778163e5a03d75", "filename": "src/doc/unstable-book/src/compiler-flags.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1 @@\n+# Compiler flags"}, {"sha": "39659602e015c4d4b6ced94ae80458d5ce5399ad", "filename": "src/doc/unstable-book/src/compiler-flags/linker-flavor.md", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flinker-flavor.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flinker-flavor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flinker-flavor.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,61 @@\n+# `linker-flavor`\n+\n+The tracking issue for this feature is: None\n+\n+------------------------\n+\n+Every `rustc` target defaults to some linker. For example, Linux targets default\n+to gcc. In some cases, you may want to override the default; you can do that\n+with the unstable CLI argument: `-Z linker-flavor`.\n+\n+Here how you would use this flag to link a Rust binary for the\n+`thumbv7m-none-eabi` using LLD instead of GCC.\n+\n+``` text\n+$ xargo rustc --target thumbv7m-none-eabi -- \\\n+    -C linker=ld.lld \\\n+    -Z linker-flavor=ld \\\n+    -Z print-link-args | tr ' ' '\\n'\n+\"ld.lld\"\n+\"-L\"\n+\"$SYSROOT/lib/rustlib/thumbv7m-none-eabi/lib\"\n+\"$PWD/target/thumbv7m-none-eabi/debug/deps/app-512e9dbf385f233c.0.o\"\n+\"-o\"\n+\"$PWD/target/thumbv7m-none-eabi/debug/deps/app-512e9dbf385f233c\"\n+\"--gc-sections\"\n+\"-L\"\n+\"$PWD/target/thumbv7m-none-eabi/debug/deps\"\n+\"-L\"\n+\"$PWD/target/debug/deps\"\n+\"-L\"\n+\"$SYSROOT/lib/rustlib/thumbv7m-none-eabi/lib\"\n+\"-Bstatic\"\n+\"$SYSROOT/lib/rustlib/thumbv7m-none-eabi/lib/libcore-e1ccb7dfb1cb9ebb.rlib\"\n+\"-Bdynamic\"\n+```\n+\n+Whereas the default is:\n+\n+``` text\n+$ xargo rustc --target thumbv7m-none-eabi -- \\\n+    -C link-arg=-nostartfiles \\\n+    -Z print-link-args | tr ' ' '\\n'\n+\"arm-none-eabi-gcc\"\n+\"-L\"\n+\"$SYSROOT/lib/rustlib/thumbv7m-none-eabi/lib\"\n+\"$PWD/target/thumbv7m-none-eabi/debug/deps/app-961e39416baa38d9.0.o\"\n+\"-o\"\n+\"$PWD/target/thumbv7m-none-eabi/debug/deps/app-961e39416baa38d9\"\n+\"-Wl,--gc-sections\"\n+\"-nodefaultlibs\"\n+\"-L\"\n+\"$PWD/target/thumbv7m-none-eabi/debug/deps\"\n+\"-L\"\n+\"$PWD/target/debug/deps\"\n+\"-L\"\n+\"$SYSROOT/lib/rustlib/thumbv7m-none-eabi/lib\"\n+\"-Wl,-Bstatic\"\n+\"$SYSROOT/lib/rustlib/thumbv7m-none-eabi/lib/libcore-e1ccb7dfb1cb9ebb.rlib\"\n+\"-nostartfiles\"\n+\"-Wl,-Bdynamic\"\n+```"}, {"sha": "8ca04d253259258af86b8e2546cc28f943d8734d", "filename": "src/doc/unstable-book/src/compiler-flags/remap-path-prefix.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,37 @@\n+# `remap-path-prefix`\n+\n+The tracking issue for this feature is: [#41555](https://github.com/rust-lang/rust/issues/41555)\n+\n+------------------------\n+\n+The `-Z remap-path-prefix-from`, `-Z remap-path-prefix-to` commandline option\n+pair allows to replace prefixes of any file paths the compiler emits in various\n+places. This is useful for bringing debuginfo paths into a well-known form and\n+for achieving reproducible builds independent of the directory the compiler was\n+executed in. All paths emitted by the compiler are affected, including those in\n+error messages.\n+\n+In order to map all paths starting with `/home/foo/my-project/src` to\n+`/sources/my-project`, one would invoke the compiler as follows:\n+\n+```text\n+rustc -Zremap-path-prefix-from=\"/home/foo/my-project/src\" -Zremap-path-prefix-to=\"/sources/my-project\"\n+```\n+\n+Debuginfo for code from the file `/home/foo/my-project/src/foo/mod.rs`,\n+for example, would then point debuggers to `/sources/my-project/foo/mod.rs`\n+instead of the original file.\n+\n+The options can be specified multiple times when multiple prefixes should be\n+mapped:\n+\n+```text\n+rustc -Zremap-path-prefix-from=\"/home/foo/my-project/src\" \\\n+      -Zremap-path-prefix-to=\"/sources/my-project\" \\\n+      -Zremap-path-prefix-from=\"/home/foo/my-project/build-dir\" \\\n+      -Zremap-path-prefix-to=\"/stable-build-dir\"\n+```\n+\n+When the options are given multiple times, the nth `-from` will be matched up\n+with the nth `-to` and they can appear anywhere on the commandline. Mappings\n+specified later on the line will take precedence over earlier ones."}, {"sha": "e737dbaa4ec02cbeb7e24c347a72bdb9441cb48e", "filename": "src/doc/unstable-book/src/field-init-shorthand.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "raw_url": "https://github.com/rust-lang/rust/raw/e406cd1ec9abb77236318db30e362e4654411a1a/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md?ref=e406cd1ec9abb77236318db30e362e4654411a1a", "patch": "@@ -1,10 +0,0 @@\n-# `field_init_shorthand`\n-\n-The tracking issue for this feature is: [#37340]\n-\n-[#37340]: https://github.com/rust-lang/rust/issues/37340\n-\n-------------------------\n-\n-\n-"}, {"sha": "a27514df97d693edee9e983baa79aa08e93287c8", "filename": "src/doc/unstable-book/src/language-features.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1 @@\n+# Language features"}, {"sha": "b10bc41cb1439d08b46195030212d962535a96f3", "filename": "src/doc/unstable-book/src/language-features/abi-msp430-interrupt.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-msp430-interrupt.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,42 @@\n+# `abi_msp430_interrupt`\n+\n+The tracking issue for this feature is: [#38487]\n+\n+[#38487]: https://github.com/rust-lang/rust/issues/38487\n+\n+------------------------\n+\n+In the MSP430 architecture, interrupt handlers have a special calling\n+convention. You can use the `\"msp430-interrupt\"` ABI to make the compiler apply\n+the right calling convention to the interrupt handlers you define.\n+\n+<!-- NOTE(ignore) this example is specific to the msp430 target -->\n+\n+``` rust,ignore\n+#![feature(abi_msp430_interrupt)]\n+#![no_std]\n+\n+// Place the interrupt handler at the appropriate memory address\n+// (Alternatively, you can use `#[used]` and remove `pub` and `#[no_mangle]`)\n+#[link_section = \"__interrupt_vector_10\"]\n+#[no_mangle]\n+pub static TIM0_VECTOR: extern \"msp430-interrupt\" fn() = tim0;\n+\n+// The interrupt handler\n+extern \"msp430-interrupt\" fn tim0() {\n+    // ..\n+}\n+```\n+\n+``` text\n+$ msp430-elf-objdump -CD ./target/msp430/release/app\n+Disassembly of section __interrupt_vector_10:\n+\n+0000fff2 <TIM0_VECTOR>:\n+    fff2:       00 c0           interrupt service routine at 0xc000\n+\n+Disassembly of section .text:\n+\n+0000c000 <int::tim0>:\n+    c000:       00 13           reti\n+```"}, {"sha": "0ded3ceeaef2ce9ea0457dc563aa53a0014b6737", "filename": "src/doc/unstable-book/src/language-features/abi-ptx.md", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-ptx.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,60 @@\n+# `abi_ptx`\n+\n+The tracking issue for this feature is: [#38788]\n+\n+[#38788]: https://github.com/rust-lang/rust/issues/38788\n+\n+------------------------\n+\n+When emitting PTX code, all vanilla Rust functions (`fn`) get translated to\n+\"device\" functions. These functions are *not* callable from the host via the\n+CUDA API so a crate with only device functions is not too useful!\n+\n+OTOH, \"global\" functions *can* be called by the host; you can think of them\n+as the real public API of your crate. To produce a global function use the\n+`\"ptx-kernel\"` ABI.\n+\n+<!-- NOTE(ignore) this example is specific to the nvptx targets -->\n+\n+``` rust,ignore\n+#![feature(abi_ptx)]\n+#![no_std]\n+\n+pub unsafe extern \"ptx-kernel\" fn global_function() {\n+    device_function();\n+}\n+\n+pub fn device_function() {\n+    // ..\n+}\n+```\n+\n+``` text\n+$ xargo rustc --target nvptx64-nvidia-cuda --release -- --emit=asm\n+\n+$ cat $(find -name '*.s')\n+//\n+// Generated by LLVM NVPTX Back-End\n+//\n+\n+.version 3.2\n+.target sm_20\n+.address_size 64\n+\n+        // .globl       _ZN6kernel15global_function17h46111ebe6516b382E\n+\n+.visible .entry _ZN6kernel15global_function17h46111ebe6516b382E()\n+{\n+\n+\n+        ret;\n+}\n+\n+        // .globl       _ZN6kernel15device_function17hd6a0e4993bbf3f78E\n+.visible .func _ZN6kernel15device_function17hd6a0e4993bbf3f78E()\n+{\n+\n+\n+        ret;\n+}\n+```"}, {"sha": "27f61d56342cf786aaed6548c852d338b86f0e4f", "filename": "src/doc/unstable-book/src/language-features/abi-sysv64.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-sysv64.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-sysv64.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-sysv64.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/abi-sysv64.md"}, {"sha": "2e3113abdbf2bcff759c868dede0d62d16a4392a", "filename": "src/doc/unstable-book/src/language-features/abi-unadjusted.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-unadjusted.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-unadjusted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-unadjusted.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/abi-unadjusted.md"}, {"sha": "3e36b1569fd4a4c8ad846316cdfb37ca199e7fa8", "filename": "src/doc/unstable-book/src/language-features/abi-vectorcall.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-vectorcall.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-vectorcall.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-vectorcall.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/abi-vectorcall.md"}, {"sha": "c89d2ee2106c91d7e1b4f9148905d35c7251b485", "filename": "src/doc/unstable-book/src/language-features/abi-x86-interrupt.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-x86-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-x86-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-x86-interrupt.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/abi-x86-interrupt.md"}, {"sha": "30d22ca8208bff24c1b24f3ce7c3833e9a33609a", "filename": "src/doc/unstable-book/src/language-features/advanced-slice-patterns.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/advanced-slice-patterns.md"}, {"sha": "cfcf8e22d7088f3d676dbcc0de2efb09c3f447f8", "filename": "src/doc/unstable-book/src/language-features/allocator.md", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallocator.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -51,6 +51,11 @@ pub extern fn __rust_allocate(size: usize, _align: usize) -> *mut u8 {\n     unsafe { libc::malloc(size as libc::size_t) as *mut u8 }\n }\n \n+#[no_mangle]\n+pub extern fn __rust_allocate_zeroed(size: usize, _align: usize) -> *mut u8 {\n+    unsafe { libc::calloc(size as libc::size_t, 1) as *mut u8 }\n+}\n+\n #[no_mangle]\n pub extern fn __rust_deallocate(ptr: *mut u8, _old_size: usize, _align: usize) {\n     unsafe { libc::free(ptr as *mut libc::c_void) }", "previous_filename": "src/doc/unstable-book/src/allocator.md"}, {"sha": "74709ad5aeb4dedad1e77836a93e88031d08e43f", "filename": "src/doc/unstable-book/src/language-features/allow-internal-unstable.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallow-internal-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallow-internal-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallow-internal-unstable.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/allow-internal-unstable.md"}, {"sha": "5e68be633e7ab2d69aa066853c888b7ccf5c3467", "filename": "src/doc/unstable-book/src/language-features/asm.md", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -189,3 +189,5 @@ constraints, etc.\n \n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n+If you need more power and don't mind losing some of the niceties of\n+`asm!`, check out [global_asm](global_asm.html).", "previous_filename": "src/doc/unstable-book/src/asm.md"}, {"sha": "d661108e7d95ed7517cdaecb67e8deab12c1eccb", "filename": "src/doc/unstable-book/src/language-features/associated-consts.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-consts.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-consts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-consts.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/associated-consts.md"}, {"sha": "56cc8a5b3060aac34be6ea9bd100e74ef1dd7254", "filename": "src/doc/unstable-book/src/language-features/associated-type-defaults.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-type-defaults.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-type-defaults.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-type-defaults.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/associated-type-defaults.md"}, {"sha": "67eee214a4f247e4f012fe59dd0e5574d0b60519", "filename": "src/doc/unstable-book/src/language-features/attr-literals.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/attr-literals.md"}, {"sha": "86346364a71356caf4d19ad45f82c36d05d4d5c3", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/box-patterns.md"}, {"sha": "47aade0d04563016192fac4f0d8a8c0a6f930a79", "filename": "src/doc/unstable-book/src/language-features/box-syntax.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/box-syntax.md"}, {"sha": "44eb2a6dd4fdbda5f4ff346ddf8a36bbf7c85618", "filename": "src/doc/unstable-book/src/language-features/catch-expr.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `catch_expr`\n+\n+The tracking issue for this feature is: [#31436]\n+\n+[#31436]: https://github.com/rust-lang/rust/issues/31436\n+\n+------------------------"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/language-features/cfg-target-feature.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-feature.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/cfg-target-feature.md"}, {"sha": "7496e42e1cd84a6e3d3955146a9c9ec286d75c30", "filename": "src/doc/unstable-book/src/language-features/cfg-target-has-atomic.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-has-atomic.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-has-atomic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-has-atomic.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/cfg-target-has-atomic.md"}, {"sha": "a5adb38db3df0040ce42fbbc9853b37d284b0ef8", "filename": "src/doc/unstable-book/src/language-features/cfg-target-thread-local.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-thread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-thread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-thread-local.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/cfg-target-thread-local.md"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/language-features/cfg-target-vendor.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-vendor.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-vendor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-vendor.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/cfg-target-vendor.md"}, {"sha": "4e3b735e24fb6de326475324f7ad416b619328f9", "filename": "src/doc/unstable-book/src/language-features/closure-to-fn-coercion.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-to-fn-coercion.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-to-fn-coercion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-to-fn-coercion.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `closure_to_fn_coercion`\n+\n+The tracking issue for this feature is: [#39817]\n+\n+[#39817]: https://github.com/rust-lang/rust/issues/39817\n+\n+------------------------"}, {"sha": "52fac575b6e8631cea0c182325979b84d63b18af", "filename": "src/doc/unstable-book/src/language-features/compiler-builtins.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompiler-builtins.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `compiler_builtins`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ecfd34a22e5ccbd39794a260879eb88317088e09", "filename": "src/doc/unstable-book/src/language-features/concat-idents.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconcat-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconcat-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconcat-idents.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/concat-idents.md"}, {"sha": "0be6a321103f0858b9e0d70981b6a6414e72a47c", "filename": "src/doc/unstable-book/src/language-features/conservative-impl-trait.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/conservative-impl-trait.md"}, {"sha": "d5a22436838623d7729d6dbf976ae28bcf2527ed", "filename": "src/doc/unstable-book/src/language-features/const-fn.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/const-fn.md"}, {"sha": "42d46ce15f676e552025619097bd9c90c17730e3", "filename": "src/doc/unstable-book/src/language-features/const-indexing.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-indexing.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-indexing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-indexing.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/const-indexing.md"}, {"sha": "838f09670d2cd2cd6d079133134597dbbf1b6d1b", "filename": "src/doc/unstable-book/src/language-features/custom-attribute.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-attribute.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/custom-attribute.md"}, {"sha": "d5fdd2b708bb8c5c869d610ee017e096f8cec28a", "filename": "src/doc/unstable-book/src/language-features/custom-derive.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-derive.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-derive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-derive.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/custom-derive.md"}, {"sha": "fd16dbf898537141e0c2a5412b9c36ae8d8be119", "filename": "src/doc/unstable-book/src/language-features/default-type-parameter-fallback.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdefault-type-parameter-fallback.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdefault-type-parameter-fallback.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdefault-type-parameter-fallback.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/default-type-parameter-fallback.md"}, {"sha": "b3367d0df4459f877259ad9676003c9d275a3ad3", "filename": "src/doc/unstable-book/src/language-features/drop-types-in-const.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdrop-types-in-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdrop-types-in-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdrop-types-in-const.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/drop-types-in-const.md"}, {"sha": "2f189e9b6454ad6707197b0f0925d38c4d8d3c13", "filename": "src/doc/unstable-book/src/language-features/dropck-eyepatch.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-eyepatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-eyepatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-eyepatch.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/dropck-eyepatch.md"}, {"sha": "c5ae721954b82c11ae19ecec4786fd90ef2b21b6", "filename": "src/doc/unstable-book/src/language-features/dropck-parametricity.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-parametricity.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-parametricity.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-parametricity.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/dropck-parametricity.md"}, {"sha": "b669ce83132d460ea5e9c8f569721e30dfd6698e", "filename": "src/doc/unstable-book/src/language-features/exclusive-range-pattern.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/exclusive-range-pattern.md"}, {"sha": "a068dadf95d12fef85e97707b2bba1e79415b82b", "filename": "src/doc/unstable-book/src/language-features/fundamental.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffundamental.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffundamental.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffundamental.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/fundamental.md"}, {"sha": "ba49c850e4d600cf14d780a301e7b73e68fab0e6", "filename": "src/doc/unstable-book/src/language-features/generic-param-attrs.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgeneric-param-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgeneric-param-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgeneric-param-attrs.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/generic-param-attrs.md"}, {"sha": "44921aa309f8444218554757121cc1b2a9b5967e", "filename": "src/doc/unstable-book/src/language-features/global_asm.md", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,78 @@\n+# `global_asm`\n+\n+The tracking issue for this feature is: [#35119]\n+\n+[#35119]: https://github.com/rust-lang/rust/issues/35119\n+\n+------------------------\n+\n+The `global_asm!` macro allows the programmer to write arbitrary\n+assembly outside the scope of a function body, passing it through\n+`rustc` and `llvm` to the assembler. The macro is a no-frills\n+interface to LLVM's concept of [module-level inline assembly]. That is,\n+all caveats applicable to LLVM's module-level inline assembly apply\n+to `global_asm!`.\n+\n+[module-level inline assembly]: http://llvm.org/docs/LangRef.html#module-level-inline-assembly\n+\n+`global_asm!` fills a role not currently satisfied by either `asm!`\n+or `#[naked]` functions. The programmer has _all_ features of the\n+assembler at their disposal. The linker will expect to resolve any\n+symbols defined in the inline assembly, modulo any symbols marked as\n+external. It also means syntax for directives and assembly follow the\n+conventions of the assembler in your toolchain.\n+\n+A simple usage looks like this:\n+\n+```rust,ignore\n+# #![feature(global_asm)]\n+# you also need relevant target_arch cfgs\n+global_asm!(include_str!(\"something_neato.s\"));\n+```\n+\n+And a more complicated usage looks like this:\n+\n+```rust,ignore\n+# #![feature(global_asm)]\n+# #![cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+\n+pub mod sally {\n+    global_asm!(r#\"\n+        .global foo\n+      foo:\n+        jmp baz\n+    \"#);\n+\n+    #[no_mangle]\n+    pub unsafe extern \"C\" fn baz() {}\n+}\n+\n+// the symbols `foo` and `bar` are global, no matter where\n+// `global_asm!` was used.\n+extern \"C\" {\n+    fn foo();\n+    fn bar();\n+}\n+\n+pub mod harry {\n+    global_asm!(r#\"\n+        .global bar\n+      bar:\n+        jmp quux\n+    \"#);\n+\n+    #[no_mangle]\n+    pub unsafe extern \"C\" fn quux() {}\n+}\n+```\n+\n+You may use `global_asm!` multiple times, anywhere in your crate, in\n+whatever way suits you. The effect is as if you concatenated all\n+usages and placed the larger, single usage in the crate root.\n+\n+------------------------\n+\n+If you don't need quite as much power and flexibility as\n+`global_asm!` provides, and you don't mind restricting your inline\n+assembly to `fn` bodies only, you might try the [asm](asm.html)\n+feature instead."}, {"sha": "a850b7644c3a76fee296606cf1ea858640251c41", "filename": "src/doc/unstable-book/src/language-features/i128-type.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/i128-type.md"}, {"sha": "255445c318dca7c830e4e325df5155715259ba44", "filename": "src/doc/unstable-book/src/language-features/inclusive-range-syntax.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,20 @@\n+# `inclusive_range_syntax`\n+\n+The tracking issue for this feature is: [#28237]\n+\n+[#28237]: https://github.com/rust-lang/rust/issues/28237\n+\n+------------------------\n+\n+To get a range that goes from 0 to 10 and includes the value 10, you\n+can write `0...10`:\n+\n+```rust\n+#![feature(inclusive_range_syntax)]\n+\n+fn main() {\n+    for i in 0...10 {\n+        println!(\"{}\", i);\n+    }\n+}\n+```"}, {"sha": "bc35c2a0305332c3a84037ad967f15dc160286ec", "filename": "src/doc/unstable-book/src/language-features/intrinsics.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/intrinsics.md"}, {"sha": "375b8bd6b8224170b25a61d8e72433ae7430cb62", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/lang-items.md"}, {"sha": "2507197661a9de4d76efc9391dce8c692bedd2e9", "filename": "src/doc/unstable-book/src/language-features/link-args.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/link-args.md"}, {"sha": "7393d0628e4f5b716a2135c801921e33ae0ef195", "filename": "src/doc/unstable-book/src/language-features/link-cfg.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-cfg.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/link-cfg.md"}, {"sha": "ba639cb57fc6d2e9ccab9b14bcd05192650ca079", "filename": "src/doc/unstable-book/src/language-features/link-llvm-intrinsics.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-llvm-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-llvm-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-llvm-intrinsics.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/link-llvm-intrinsics.md"}, {"sha": "5773d28a00ecc2cc7e9e52438331d74972c9f32d", "filename": "src/doc/unstable-book/src/language-features/linkage.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flinkage.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flinkage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flinkage.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/linkage.md"}, {"sha": "b13f5ccfd9179a343bc9813f6768b4aee86a8fb1", "filename": "src/doc/unstable-book/src/language-features/log-syntax.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flog-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flog-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flog-syntax.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/log-syntax.md"}, {"sha": "54d6e62ce4c526b088fbfb2d22940bddd35d4b57", "filename": "src/doc/unstable-book/src/language-features/loop-break-value.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/loop-break-value.md"}, {"sha": "32ffa3b4c31e52a9dce64323578f35da6821ee5d", "filename": "src/doc/unstable-book/src/language-features/macro-reexport.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-reexport.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-reexport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-reexport.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/macro-reexport.md"}, {"sha": "7918a356843298d34cc458ed40d1b9e5fc075478", "filename": "src/doc/unstable-book/src/language-features/macro-vis-matcher.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-vis-matcher.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-vis-matcher.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-vis-matcher.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,14 @@\n+# `macro_vis_matcher`\n+\n+The tracking issue for this feature is: [#41022]\n+\n+With this feature gate enabled, the [list of fragment specifiers][frags] gains one more entry:\n+\n+* `vis`: a visibility qualifier. Examples: nothing (default visibility); `pub`; `pub(crate)`.\n+\n+A `vis` variable may be followed by a comma, ident, type, or path.\n+\n+[#41022]: https://github.com/rust-lang/rust/issues/41022\n+[frags]: ../book/first-edition/macros.html#syntactic-requirements\n+\n+------------------------"}, {"sha": "579aabfff88b90c98639d86ce36d33c46a1da6d9", "filename": "src/doc/unstable-book/src/language-features/main.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmain.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmain.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/main.md"}, {"sha": "e56ce4770aab00a78565e78e5d055243143e5465", "filename": "src/doc/unstable-book/src/language-features/naked-functions.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnaked-functions.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnaked-functions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnaked-functions.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/naked-functions.md"}, {"sha": "22aa10b2183cb2f580a5e9c962cf007aaf0b079f", "filename": "src/doc/unstable-book/src/language-features/needs-allocator.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-allocator.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/needs-allocator.md"}, {"sha": "627c946c1bb271fd9fd91b457ae7d85465fcb6d4", "filename": "src/doc/unstable-book/src/language-features/needs-panic-runtime.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-panic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-panic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-panic-runtime.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/needs-panic-runtime.md"}, {"sha": "3b3729a4b21d79ee0ce5b218cca43fe3919be5e2", "filename": "src/doc/unstable-book/src/language-features/never-type.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnever-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnever-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnever-type.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/never-type.md"}, {"sha": "6238753447c9cdd01ab7868451bf2956e0d8411c", "filename": "src/doc/unstable-book/src/language-features/no-core.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-core.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-core.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-core.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/no-core.md"}, {"sha": "7536ed9d4e106e3469db46bc0ec5639cf28c4838", "filename": "src/doc/unstable-book/src/language-features/no-debug.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-debug.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/no-debug.md"}, {"sha": "d5600c58fd9a657fff7c7e8c4c992335a2b4f666", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/non-ascii-idents.md"}, {"sha": "d8ac520fcb5e2cd1e008566fdbacbfd7482cbb00", "filename": "src/doc/unstable-book/src/language-features/omit-gdb-pretty-printer-section.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fomit-gdb-pretty-printer-section.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fomit-gdb-pretty-printer-section.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fomit-gdb-pretty-printer-section.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/omit-gdb-pretty-printer-section.md"}, {"sha": "81f284d0a6a3e0bb52573dd92ba162ea2ebb2d3a", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/on-unimplemented.md"}, {"sha": "0b2d60accd59a95a3049cf7d5dd7ddc5c0342b2b", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/optin-builtin-traits.md"}, {"sha": "a4920839c6ca9d8199f3ef4cb3232ac94bd3b1c4", "filename": "src/doc/unstable-book/src/language-features/overlapping-marker-traits.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foverlapping-marker-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foverlapping-marker-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foverlapping-marker-traits.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `overlapping_marker_traits`\n+\n+The tracking issue for this feature is: [#29864]\n+\n+[#29864]: https://github.com/rust-lang/rust/issues/29864\n+\n+------------------------"}, {"sha": "65b067e8296131e8ade4df36e8ba7b2b9a9369d2", "filename": "src/doc/unstable-book/src/language-features/panic-runtime.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fpanic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fpanic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fpanic-runtime.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/panic-runtime.md"}, {"sha": "da12559a01b86b0935695b1b84c798621d6ec48e", "filename": "src/doc/unstable-book/src/language-features/placement-in-syntax.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplacement-in-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplacement-in-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplacement-in-syntax.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/placement-in-syntax.md"}, {"sha": "377ac8f7342ef0e36698392230981d27198e31d8", "filename": "src/doc/unstable-book/src/language-features/platform-intrinsics.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplatform-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplatform-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplatform-intrinsics.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/platform-intrinsics.md"}, {"sha": "ca3738bd93f831dbb5b5955f2d227468f121c7f9", "filename": "src/doc/unstable-book/src/language-features/plugin-registrar.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/plugin-registrar.md"}, {"sha": "3a1872e18ddb8a6968594016964fa4f8a5569522", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/plugin.md"}, {"sha": "75dae5cfb7401b0c8766dfb1cd0adea459b0bf00", "filename": "src/doc/unstable-book/src/language-features/prelude-import.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprelude-import.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprelude-import.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprelude-import.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/prelude-import.md"}, {"sha": "f8b53bd5a2fd398a9119c3b1506dff84550f4db3", "filename": "src/doc/unstable-book/src/language-features/proc-macro.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/proc-macro.md"}, {"sha": "b4e078d920c4eec9f12852cb9a36cbf4c22cb003", "filename": "src/doc/unstable-book/src/language-features/quote.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fquote.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fquote.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fquote.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/quote.md"}, {"sha": "170570e06a2ed828c583c5033c5237e973f02345", "filename": "src/doc/unstable-book/src/language-features/relaxed-adts.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frelaxed-adts.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frelaxed-adts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frelaxed-adts.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/relaxed-adts.md"}, {"sha": "deea04f4c51cc7525328b0844034bebe1e603430", "filename": "src/doc/unstable-book/src/language-features/repr-align.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,11 @@\n+# `repr_align`\n+\n+The tracking issue for this feature is: [#33626]\n+\n+[#33626]: https://github.com/rust-lang/rust/issues/33626\n+\n+------------------------\n+\n+\n+\n+"}, {"sha": "c6f051e4fffc1220b137bf8947c49b25d46bf6f5", "filename": "src/doc/unstable-book/src/language-features/repr-simd.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-simd.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-simd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-simd.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/repr-simd.md"}, {"sha": "d1f18cead068372c9c7991ca8f6afe570cd9587f", "filename": "src/doc/unstable-book/src/language-features/rustc-attrs.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/rustc-attrs.md"}, {"sha": "0df6ca12089eebf94b7ed3243c74ae2b0ec2497d", "filename": "src/doc/unstable-book/src/language-features/rustc-diagnostic-macros.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-diagnostic-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-diagnostic-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-diagnostic-macros.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/rustc-diagnostic-macros.md"}, {"sha": "2583d350ebe11d4f6df184e238a471c27334a8b4", "filename": "src/doc/unstable-book/src/language-features/rvalue-static-promotion.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/rvalue-static-promotion.md"}, {"sha": "f19504de58e120ff98c04ca921bc071a7735d9ba", "filename": "src/doc/unstable-book/src/language-features/sanitizer-runtime.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsanitizer-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsanitizer-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsanitizer-runtime.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/sanitizer-runtime.md"}, {"sha": "d85779c3d3dc9c9171d7e7df869a0a21733c18f5", "filename": "src/doc/unstable-book/src/language-features/simd-ffi.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd-ffi.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/simd-ffi.md"}, {"sha": "13c9722c5243a0250c51d82eac5b80f27740fbe2", "filename": "src/doc/unstable-book/src/language-features/simd.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/simd.md"}, {"sha": "1e9e1eaafda46dade9f4c92cc49035259251d6e0", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/slice-patterns.md"}, {"sha": "efc380df6e1194e1de0fa7183b81b39b604a6968", "filename": "src/doc/unstable-book/src/language-features/specialization.md", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fspecialization.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fspecialization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fspecialization.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -2,6 +2,8 @@\n \n The tracking issue for this feature is: [#31844]\n \n+[#31844]: https://github.com/rust-lang/rust/issues/31844\n+\n ------------------------\n \n ", "previous_filename": "src/doc/unstable-book/src/specialization.md"}, {"sha": "1409e570e887ba1cfe6ae87834e6d6d481000d93", "filename": "src/doc/unstable-book/src/language-features/staged-api.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstaged-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstaged-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstaged-api.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/staged-api.md"}, {"sha": "1ea6d59c78d5b46362ce83fdb334b3fc08c56874", "filename": "src/doc/unstable-book/src/language-features/start.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstart.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstart.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstart.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/start.md"}, {"sha": "97b9d71d433a4b5a2e8089ccc3956968def71681", "filename": "src/doc/unstable-book/src/language-features/static-nobundle.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstatic-nobundle.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstatic-nobundle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstatic-nobundle.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/static-nobundle.md"}, {"sha": "71092fcf29040e5635b95db92fcedbde94c9b011", "filename": "src/doc/unstable-book/src/language-features/stmt-expr-attributes.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstmt-expr-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstmt-expr-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstmt-expr-attributes.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/stmt-expr-attributes.md"}, {"sha": "1a94562968d192a11db9be21bda24c6f2e7f081e", "filename": "src/doc/unstable-book/src/language-features/struct-field-attributes.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/struct-field-attributes.md"}, {"sha": "b3ca26e6474deffcc886999d9ccfdd4841b7ccca", "filename": "src/doc/unstable-book/src/language-features/structural-match.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstructural-match.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstructural-match.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstructural-match.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/structural-match.md"}, {"sha": "85ab1ab39efe643901cdd7e1a7fe4457dca80f99", "filename": "src/doc/unstable-book/src/language-features/target-feature.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftarget-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftarget-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftarget-feature.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/target-feature.md"}, {"sha": "83de2f9cd4b5471a88f99711ffd193eda0c0e85c", "filename": "src/doc/unstable-book/src/language-features/thread-local.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fthread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fthread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fthread-local.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/thread-local.md"}, {"sha": "856f1b0a7bbb05446adfaaeffa7f37c69777cba4", "filename": "src/doc/unstable-book/src/language-features/trace-macros.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrace-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrace-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrace-macros.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/trace-macros.md"}, {"sha": "3ebd0d87ccff995850e909133571ebe1d4482be2", "filename": "src/doc/unstable-book/src/language-features/type-ascription.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-ascription.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-ascription.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-ascription.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/type-ascription.md"}, {"sha": "2cbb436ce0bb16446d45fb2299fc85ee09cc530d", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/unboxed-closures.md"}, {"sha": "6fe4f088ac237fcf9b0e83b3ec439af1a9067cf3", "filename": "src/doc/unstable-book/src/language-features/untagged-unions.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funtagged-unions.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funtagged-unions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funtagged-unions.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/untagged-unions.md"}, {"sha": "0167a33b081a568bf32c0f46daea4b86bf3714d1", "filename": "src/doc/unstable-book/src/language-features/unwind-attributes.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funwind-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funwind-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funwind-attributes.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/unwind-attributes.md"}, {"sha": "bc6149115028f393940206e04a62ea25df39314b", "filename": "src/doc/unstable-book/src/language-features/use-extern-macros.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-extern-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-extern-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-extern-macros.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/use-extern-macros.md"}, {"sha": "75a8b2774f42242e4790f7ca521c958c6f7f507d", "filename": "src/doc/unstable-book/src/language-features/used.md", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,153 @@\n+# `used`\n+\n+The tracking issue for this feature\n+is: [40289](https://github.com/rust-lang/rust/issues/40289).\n+\n+------------------------\n+\n+The `#[used]` attribute can be applied to `static` variables to prevent the Rust\n+compiler from optimizing them away even if they appear to be unused by the crate\n+(appear to be \"dead code\").\n+\n+``` rust\n+#![feature(used)]\n+\n+#[used]\n+static FOO: i32 = 1;\n+\n+static BAR: i32 = 2;\n+\n+fn main() {}\n+```\n+\n+If you compile this program into an object file, you'll see that `FOO` makes it\n+to the object file but `BAR` doesn't. Neither static variable is used by the\n+program.\n+\n+``` text\n+$ rustc -C opt-level=3 --emit=obj used.rs\n+\n+$ nm -C used.o\n+0000000000000000 T main\n+                 U std::rt::lang_start\n+0000000000000000 r used::FOO\n+0000000000000000 t used::main\n+```\n+\n+Note that the *linker* knows nothing about the `#[used]` attribute and will\n+remove `#[used]` symbols if they are not referenced by other parts of the\n+program:\n+\n+``` text\n+$ rustc -C opt-level=3 used.rs\n+\n+$ nm -C used | grep FOO\n+```\n+\n+\"This doesn't sound too useful then!\" you may think but keep reading.\n+\n+To preserve the symbols all the way to the final binary, you'll need the\n+cooperation of the linker. Here's one example:\n+\n+The ELF standard defines two special sections, `.init_array` and\n+`.pre_init_array`, that may contain function pointers which will be executed\n+*before* the `main` function is invoked. The linker will preserve symbols placed\n+in these sections (at least when linking programs that target the `*-*-linux-*`\n+targets).\n+\n+``` rust,ignore\n+#![feature(used)]\n+\n+extern \"C\" fn before_main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+#[link_section = \".init_array\"]\n+#[used]\n+static INIT_ARRAY: [extern \"C\" fn(); 1] = [before_main];\n+\n+fn main() {}\n+```\n+\n+So, `#[used]` and `#[link_section]` can be combined to obtain \"life before\n+main\".\n+\n+``` text\n+$ rustc -C opt-level=3 before-main.rs\n+\n+$ ./before-main\n+Hello, world!\n+```\n+\n+Another example: ARM Cortex-M microcontrollers need their reset handler, a\n+pointer to the function that will executed right after the microcontroller is\n+turned on, to be placed near the start of their FLASH memory to boot properly.\n+\n+This condition can be met using `#[used]` and `#[link_section]` plus a linker\n+script.\n+\n+``` rust,ignore\n+#![feature(lang_items)]\n+#![feature(used)]\n+#![no_main]\n+#![no_std]\n+\n+extern \"C\" fn reset_handler() -> ! {\n+    loop {}\n+}\n+\n+#[link_section = \".reset_handler\"]\n+#[used]\n+static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n+\n+#[lang = \"panic_fmt\"]\n+fn panic_fmt() {}\n+```\n+\n+``` text\n+MEMORY\n+{\n+  FLASH : ORIGIN = 0x08000000, LENGTH = 128K\n+  RAM : ORIGIN = 0x20000000, LENGTH = 20K\n+}\n+\n+SECTIONS\n+{\n+  .text ORIGIN(FLASH) :\n+  {\n+    /* Vector table */\n+    LONG(ORIGIN(RAM) + LENGTH(RAM)); /* initial SP value */\n+    KEEP(*(.reset_handler));\n+\n+    /* Omitted: The rest of the vector table */\n+\n+    *(.text.*);\n+  } > FLASH\n+\n+  /DISCARD/ :\n+  {\n+    /* Unused unwinding stuff */\n+    *(.ARM.exidx.*)\n+  }\n+}\n+```\n+\n+``` text\n+$ xargo rustc --target thumbv7m-none-eabi --release -- \\\n+    -C link-arg=-Tlink.x -C link-arg=-nostartfiles\n+\n+$ arm-none-eabi-objdump -Cd target/thumbv7m-none-eabi/release/app\n+./target/thumbv7m-none-eabi/release/app:     file format elf32-littlearm\n+\n+\n+Disassembly of section .text:\n+\n+08000000 <app::RESET_HANDLER-0x4>:\n+ 8000000:       20005000        .word   0x20005000\n+\n+08000004 <app::RESET_HANDLER>:\n+ 8000004:       08000009                                ....\n+\n+08000008 <app::reset_handler>:\n+ 8000008:       e7fe            b.n     8000008 <app::reset_handler>\n+```"}, {"sha": "9f537e26132bc454dea98cf4b216565287ec773e", "filename": "src/doc/unstable-book/src/library-features.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1 @@\n+# Library Features"}, {"sha": "9bffa2ff99bf3d0db7fdcc0455d610fe9b187115", "filename": "src/doc/unstable-book/src/library-features/alloc-jemalloc.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/alloc-jemalloc.md"}, {"sha": "6fa89179d8e1150c54e4367b394ae3f60d1214f3", "filename": "src/doc/unstable-book/src/library-features/alloc-system.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "previous_filename": "src/doc/unstable-book/src/alloc-system.md"}, {"sha": "47eeb0874fba1edf8a4e9b6b683de52a54181f09", "filename": "src/doc/unstable-book/src/library-features/alloc.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `alloc`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "ed32eedb3481e22828bcfb88f4700ba893b7bcdf", "filename": "src/doc/unstable-book/src/library-features/as-c-str.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fas-c-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fas-c-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fas-c-str.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,8 @@\n+# `as_c_str`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------\n+"}, {"sha": "e253b4dcd9b5a1e6e456af8dcd0f235869d43b01", "filename": "src/doc/unstable-book/src/library-features/ascii-ctype.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fascii-ctype.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fascii-ctype.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fascii-ctype.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `ascii_ctype`\n+\n+The tracking issue for this feature is: [#39658]\n+\n+[#39658]: https://github.com/rust-lang/rust/issues/39658"}, {"sha": "f3863ab2a2abb4f98d65648b503c8ac32f09d3bb", "filename": "src/doc/unstable-book/src/library-features/binary-heap-peek-mut-pop.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-peek-mut-pop.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-peek-mut-pop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-peek-mut-pop.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `binary_heap_peek_mut_pop`\n+\n+The tracking issue for this feature is: [#38863]\n+\n+[#38863]: https://github.com/rust-lang/rust/issues/38863\n+\n+------------------------"}, {"sha": "0f3f01ba0e164e0fddbf343c1d38687738cd0297", "filename": "src/doc/unstable-book/src/library-features/box-heap.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbox-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbox-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbox-heap.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `box_heap`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------"}, {"sha": "a2fdc99363007b0ee90445d0045f59cc39f069d6", "filename": "src/doc/unstable-book/src/library-features/c-void-variant.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fc-void-variant.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fc-void-variant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fc-void-variant.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `c_void_variant`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "21aa486219e0de17b2a699c35cc8d34f84b52160", "filename": "src/doc/unstable-book/src/library-features/char-escape-debug.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-escape-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-escape-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-escape-debug.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `char_escape_debug`\n+\n+The tracking issue for this feature is: [#35068]\n+\n+[#35068]: https://github.com/rust-lang/rust/issues/35068\n+\n+------------------------"}, {"sha": "078d3faf42a7b19f032cd3e855ed7a55bf87357a", "filename": "src/doc/unstable-book/src/library-features/coerce-unsized.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcoerce-unsized.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcoerce-unsized.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcoerce-unsized.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `coerce_unsized`\n+\n+The tracking issue for this feature is: [#27732]\n+\n+[#27732]: https://github.com/rust-lang/rust/issues/27732\n+\n+------------------------"}, {"sha": "268ca6ea590d52557083f82ede375cc2e42a69c1", "filename": "src/doc/unstable-book/src/library-features/collection-placement.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollection-placement.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollection-placement.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollection-placement.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `collection_placement`\n+\n+The tracking issue for this feature is: [#30172]\n+\n+[#30172]: https://github.com/rust-lang/rust/issues/30172\n+\n+------------------------"}, {"sha": "ea4f999ba0f9ac6ca1dd640b8a8a6a47cf9339d0", "filename": "src/doc/unstable-book/src/library-features/collections-range.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections-range.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `collections_range`\n+\n+The tracking issue for this feature is: [#30877]\n+\n+[#30877]: https://github.com/rust-lang/rust/issues/30877\n+\n+------------------------"}, {"sha": "5c937833c9e26a4489893b4680a58285f3833a37", "filename": "src/doc/unstable-book/src/library-features/collections.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `collections`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "0ab89e278cdf7bfba028ceb0ebd3152e53059f2f", "filename": "src/doc/unstable-book/src/library-features/command-envs.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcommand-envs.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcommand-envs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcommand-envs.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `command_envs`\n+\n+The tracking issue for this feature is: [#38526]\n+\n+[#38526]: https://github.com/rust-lang/rust/issues/38526\n+\n+------------------------"}, {"sha": "5da8968fd0ce22724a09ae8be37a36ab8053671c", "filename": "src/doc/unstable-book/src/library-features/compiler-builtins-lib.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-builtins-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-builtins-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-builtins-lib.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,35 @@\n+# `compiler_builtins_lib`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+\n+This feature is required to link to the `compiler_builtins` crate which contains\n+\"compiler intrinsics\". Compiler intrinsics are software implementations of basic\n+operations like multiplication of `u64`s. These intrinsics are only required on\n+platforms where these operations don't directly map to a hardware instruction.\n+\n+You should never need to explicitly link to the `compiler_builtins` crate when\n+building \"std\" programs as `compiler_builtins` is already in the dependency\n+graph of `std`. But you may need it when building `no_std` **binary** crates. If\n+you get a *linker* error like:\n+\n+``` text\n+$PWD/src/main.rs:11: undefined reference to `__aeabi_lmul'\n+$PWD/src/main.rs:11: undefined reference to `__aeabi_uldivmod'\n+```\n+\n+That means that you need to link to this crate.\n+\n+When you link to this crate, make sure it only appears once in your crate\n+dependency graph. Also, it doesn't matter where in the dependency graph, you\n+place the `compiler_builtins` crate.\n+\n+<!-- NOTE(ignore) doctests don't support `no_std` binaries -->\n+\n+``` rust,ignore\n+#![feature(compiler_builtins_lib)]\n+#![no_std]\n+\n+extern crate compiler_builtins;\n+```"}, {"sha": "b1e36ab13d5aee82fe881e4833bd2e779a564a27", "filename": "src/doc/unstable-book/src/library-features/compiler-fences.md", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-fences.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-fences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-fences.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,106 @@\n+# `compiler_fences`\n+\n+The tracking issue for this feature is: [#41091]\n+\n+[#41091]: https://github.com/rust-lang/rust/issues/41091\n+\n+------------------------\n+\n+The `compiler_fences` feature exposes the `compiler_fence` function\n+in `std::sync::atomic`. This function is conceptually similar to C++'s\n+`atomic_signal_fence`, which can currently only be accessed in nightly\n+Rust using the `atomic_singlethreadfence_*` instrinsic functions in\n+`core`, or through the mostly equivalent literal assembly:\n+\n+```rust\n+#![feature(asm)]\n+unsafe { asm!(\"\" ::: \"memory\" : \"volatile\") };\n+```\n+\n+A `compiler_fence` restricts the kinds of memory re-ordering the\n+compiler is allowed to do. Specifically, depending on the given ordering\n+semantics, the compiler may be disallowed from moving reads or writes\n+from before or after the call to the other side of the call to\n+`compiler_fence`. Note that it does **not** prevent the *hardware*\n+from doing such re-ordering. This is not a problem in a single-threaded,\n+execution context, but when other threads may modify memory at the same\n+time, stronger synchronization primitives are required.\n+\n+## Examples\n+\n+`compiler_fence` is generally only useful for preventing a thread from\n+racing *with itself*. That is, if a given thread is executing one piece\n+of code, and is then interrupted, and starts executing code elsewhere\n+(while still in the same thread, and conceptually still on the same\n+core). In traditional programs, this can only occur when a signal\n+handler is registered. In more low-level code, such situations can also\n+arise when handling interrupts, when implementing green threads with\n+pre-emption, etc.\n+\n+To give a straightforward example of when a `compiler_fence` is\n+necessary, consider the following example:\n+\n+```rust\n+# use std::sync::atomic::{AtomicBool, AtomicUsize};\n+# use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n+# use std::sync::atomic::Ordering;\n+static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n+static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n+\n+fn main() {\n+    IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n+    IS_READY.store(true, Ordering::Relaxed);\n+}\n+\n+fn signal_handler() {\n+    if IS_READY.load(Ordering::Relaxed) {\n+        assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n+    }\n+}\n+```\n+\n+The way it is currently written, the `assert_eq!` is *not* guaranteed to\n+succeed, despite everything happening in a single thread. To see why,\n+remember that the compiler is free to swap the stores to\n+`IMPORTANT_VARIABLE` and `IS_READ` since they are both\n+`Ordering::Relaxed`. If it does, and the signal handler is invoked right\n+after `IS_READY` is updated, then the signal handler will see\n+`IS_READY=1`, but `IMPORTANT_VARIABLE=0`.\n+\n+Using a `compiler_fence`, we can remedy this situation:\n+\n+```rust\n+#![feature(compiler_fences)]\n+# use std::sync::atomic::{AtomicBool, AtomicUsize};\n+# use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n+# use std::sync::atomic::Ordering;\n+use std::sync::atomic::compiler_fence;\n+\n+static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n+static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n+\n+fn main() {\n+    IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n+    // prevent earlier writes from being moved beyond this point\n+    compiler_fence(Ordering::Release);\n+    IS_READY.store(true, Ordering::Relaxed);\n+}\n+\n+fn signal_handler() {\n+    if IS_READY.load(Ordering::Relaxed) {\n+        assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n+    }\n+}\n+```\n+\n+A deeper discussion of compiler barriers with various re-ordering\n+semantics (such as `Ordering::SeqCst`) is beyond the scope of this text.\n+Curious readers are encouraged to read the Linux kernel's discussion of\n+[memory barriers][1], the C++ references on [`std::memory_order`][2] and\n+[`atomic_signal_fence`][3], and [this StackOverflow answer][4] for\n+further details.\n+\n+[1]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n+[2]: http://en.cppreference.com/w/cpp/atomic/memory_order\n+[3]: http://www.cplusplus.com/reference/atomic/atomic_signal_fence/\n+[4]: http://stackoverflow.com/a/18454971/472927"}, {"sha": "ac2fdd4fceb6dafc9239b52d65484c3d83ce2ce5", "filename": "src/doc/unstable-book/src/library-features/concat-idents-macro.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fconcat-idents-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fconcat-idents-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fconcat-idents-macro.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `concat_idents_macro`\n+\n+The tracking issue for this feature is: [#29599]\n+\n+[#29599]: https://github.com/rust-lang/rust/issues/29599\n+\n+------------------------"}, {"sha": "d37d6b5c6d0bafd9b3025e2940bd9bd996e6be92", "filename": "src/doc/unstable-book/src/library-features/core-char-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-char-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-char-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-char-ext.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `core_char_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "194b2608dd02bfb5c89fe45b456bfab629115a0b", "filename": "src/doc/unstable-book/src/library-features/core-float.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-float.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-float.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `core_float`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "28ad3525ef7a6af41f573733feb5462db15bde97", "filename": "src/doc/unstable-book/src/library-features/core-intrinsics.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-intrinsics.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `core_intrinsics`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "c197588404c9329512da4902c7b1fdbe7c5d7b63", "filename": "src/doc/unstable-book/src/library-features/core-panic.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-panic.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-panic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-panic.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `core_panic`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "f85811c545e43de4ccbbaa22c6342c829894ccb3", "filename": "src/doc/unstable-book/src/library-features/core-private-bignum.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-private-bignum.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-private-bignum.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-private-bignum.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `core_private_bignum`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "8465921d673b1d464d8e728151b894aa53d6de45", "filename": "src/doc/unstable-book/src/library-features/core-private-diy-float.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-private-diy-float.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-private-diy-float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-private-diy-float.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `core_private_diy_float`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "c50d44ac0ce3e1cd44b212f03b38715a798fa12d", "filename": "src/doc/unstable-book/src/library-features/core-slice-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-slice-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-slice-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-slice-ext.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `core_slice_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "08c68f11c6eca6e41b0c1d45ea94dadcabf82355", "filename": "src/doc/unstable-book/src/library-features/core-str-ext.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-str-ext.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-str-ext.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcore-str-ext.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `core_str_ext`\n+\n+The tracking issue for this feature is: [#32110]\n+\n+[#32110]: https://github.com/rust-lang/rust/issues/32110\n+\n+------------------------"}, {"sha": "311ab4adcfd75a3560f49d380ae47a6230fb1b94", "filename": "src/doc/unstable-book/src/library-features/dec2flt.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdec2flt.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdec2flt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdec2flt.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `dec2flt`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b96854ebcd461a27b405c0c77631f5259fb05b6a", "filename": "src/doc/unstable-book/src/library-features/decode-utf8.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdecode-utf8.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdecode-utf8.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdecode-utf8.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `decode_utf8`\n+\n+The tracking issue for this feature is: [#27783]\n+\n+[#27783]: https://github.com/rust-lang/rust/issues/27783\n+\n+------------------------"}, {"sha": "cc603911cbd29c8b349b210f9aa48a90cb1d0e0e", "filename": "src/doc/unstable-book/src/library-features/derive-clone-copy.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fderive-clone-copy.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fderive-clone-copy.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fderive-clone-copy.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `derive_clone_copy`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "68a275f5419d41a17f860c9370532024ef0fa300", "filename": "src/doc/unstable-book/src/library-features/derive-eq.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fderive-eq.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fderive-eq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fderive-eq.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `derive_eq`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "2f99f5ecab39f6cb11609680d6b723a360197a3d", "filename": "src/doc/unstable-book/src/library-features/discriminant-value.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdiscriminant-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdiscriminant-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdiscriminant-value.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `discriminant_value`\n+\n+The tracking issue for this feature is: [#24263]\n+\n+[#24263]: https://github.com/rust-lang/rust/issues/24263\n+\n+------------------------"}, {"sha": "be7a3ffd4dc43ff20f939ba59806cca9117be0d6", "filename": "src/doc/unstable-book/src/library-features/error-type-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ferror-type-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ferror-type-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ferror-type-id.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `error_type_id`\n+\n+The tracking issue for this feature is: [#27745]\n+\n+[#27745]: https://github.com/rust-lang/rust/issues/27745\n+\n+------------------------"}, {"sha": "200ec38725176b0235ceec6d67c85aecfe46ba90", "filename": "src/doc/unstable-book/src/library-features/exact-size-is-empty.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fexact-size-is-empty.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fexact-size-is-empty.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fexact-size-is-empty.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `exact_size_is_empty`\n+\n+The tracking issue for this feature is: [#35428]\n+\n+[#35428]: https://github.com/rust-lang/rust/issues/35428\n+\n+------------------------"}, {"sha": "e78d4330abfc04da7467c26f7131869146cfef58", "filename": "src/doc/unstable-book/src/library-features/fd-read.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffd-read.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffd-read.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffd-read.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `fd_read`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "0414244285ba72de76a9f562569edfd6f6d9c6ce", "filename": "src/doc/unstable-book/src/library-features/fd.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffd.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffd.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `fd`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "9e24e6a0850d1acc27b73c7d1ac55caeb5da5102", "filename": "src/doc/unstable-book/src/library-features/fixed-size-array.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffixed-size-array.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffixed-size-array.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffixed-size-array.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `fixed_size_array`\n+\n+The tracking issue for this feature is: [#27778]\n+\n+[#27778]: https://github.com/rust-lang/rust/issues/27778\n+\n+------------------------"}, {"sha": "f519545ac78b5208bd2f0fa6e30690e896bae186", "filename": "src/doc/unstable-book/src/library-features/float-bits-conv.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffloat-bits-conv.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffloat-bits-conv.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffloat-bits-conv.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `float_bits_conv`\n+\n+The tracking issue for this feature is: [#40470]\n+\n+[#40470]: https://github.com/rust-lang/rust/issues/40470\n+\n+------------------------"}, {"sha": "15e62a3a7dad0bd115a51c3a309da0311f2fb9be", "filename": "src/doc/unstable-book/src/library-features/flt2dec.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fflt2dec.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fflt2dec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fflt2dec.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `flt2dec`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "755263bd9a61fbf60589745d5101abb90f1cb72c", "filename": "src/doc/unstable-book/src/library-features/fmt-flags-align.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffmt-flags-align.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffmt-flags-align.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffmt-flags-align.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `fmt_flags_align`\n+\n+The tracking issue for this feature is: [#27726]\n+\n+[#27726]: https://github.com/rust-lang/rust/issues/27726\n+\n+------------------------"}, {"sha": "7cbe3c89a644164c448bfbb4f450f042aeafce61", "filename": "src/doc/unstable-book/src/library-features/fmt-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffmt-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffmt-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffmt-internals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `fmt_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "3942cda553889a0374d38aafada58cd688e81fe0", "filename": "src/doc/unstable-book/src/library-features/fn-traits.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `fn_traits`\n+\n+The tracking issue for this feature is: [#29625]\n+\n+[#29625]: https://github.com/rust-lang/rust/issues/29625\n+\n+------------------------"}, {"sha": "a9b74d4f00470a16aaa18a5d149782ffec60df45", "filename": "src/doc/unstable-book/src/library-features/fnbox.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `fnbox`\n+\n+The tracking issue for this feature is: [#28796]\n+\n+[#28796]: https://github.com/rust-lang/rust/issues/28796\n+\n+------------------------"}, {"sha": "570f779417f0980056664c3569c33a8b57c134db", "filename": "src/doc/unstable-book/src/library-features/from_utf8_error_as_bytes.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffrom_utf8_error_as_bytes.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffrom_utf8_error_as_bytes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffrom_utf8_error_as_bytes.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `from_utf8_error_as_bytes`\n+\n+The tracking issue for this feature is: [#40895]\n+\n+[#40895]: https://github.com/rust-lang/rust/issues/40895\n+\n+------------------------"}, {"sha": "460555bf1b0dbee4a6b1e501d65c294726eef506", "filename": "src/doc/unstable-book/src/library-features/fused.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffused.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffused.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `fused`\n+\n+The tracking issue for this feature is: [#35602]\n+\n+[#35602]: https://github.com/rust-lang/rust/issues/35602\n+\n+------------------------"}, {"sha": "40c2ef2db0551ec64fbe1b671bb6c5cb62582e74", "filename": "src/doc/unstable-book/src/library-features/future-atomic-orderings.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffuture-atomic-orderings.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `future_atomic_orderings`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "afdb030c406dd194ace707858584d537be1ce232", "filename": "src/doc/unstable-book/src/library-features/get-type-id.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fget-type-id.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fget-type-id.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fget-type-id.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `get_type_id`\n+\n+The tracking issue for this feature is: [#27745]\n+\n+[#27745]: https://github.com/rust-lang/rust/issues/27745\n+\n+------------------------"}, {"sha": "01404e49dbda369559530ea824e2a14d6e21aed8", "filename": "src/doc/unstable-book/src/library-features/heap-api.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fheap-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fheap-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fheap-api.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `heap_api`\n+\n+The tracking issue for this feature is: [#27700]\n+\n+[#27700]: https://github.com/rust-lang/rust/issues/27700\n+\n+------------------------"}, {"sha": "05e057be4932df41e80dfb9c52a3538e3ba1d8c5", "filename": "src/doc/unstable-book/src/library-features/hint-core-should-pause.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fhint-core-should-pause.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,41 @@\n+# `hint_core_should_pause`\n+\n+The tracking issue for this feature is: [#41196]\n+\n+[#41196]: https://github.com/rust-lang/rust/issues/41196\n+\n+------------------------\n+\n+Many programs have spin loops like the following:\n+\n+```rust,no_run\n+use std::sync::atomic::{AtomicBool,Ordering};\n+\n+fn spin_loop(value: &AtomicBool) {\n+    loop {\n+        if value.load(Ordering::Acquire) {\n+             break;\n+        }\n+    }\n+}\n+```\n+\n+These programs can be improved in performance like so:\n+\n+```rust,no_run\n+#![feature(hint_core_should_pause)]\n+use std::sync::atomic;\n+use std::sync::atomic::{AtomicBool,Ordering};\n+\n+fn spin_loop(value: &AtomicBool) {\n+    loop {\n+        if value.load(Ordering::Acquire) {\n+             break;\n+        }\n+        atomic::hint_core_should_pause();\n+    }\n+}\n+```\n+\n+Further improvements could combine `hint_core_should_pause` with\n+exponential backoff or `std::thread::yield_now`."}, {"sha": "a1a7ce8e63f443d3cdcc11fe57726c6874e3e466", "filename": "src/doc/unstable-book/src/library-features/i128.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fi128.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fi128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fi128.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `i128`\n+\n+The tracking issue for this feature is: [#35118]\n+\n+[#35118]: https://github.com/rust-lang/rust/issues/35118\n+\n+------------------------"}, {"sha": "2e88e2047868d2a9029ae11d4c8b73fd4c2636c3", "filename": "src/doc/unstable-book/src/library-features/inclusive-range.md", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finclusive-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finclusive-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finclusive-range.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -1,10 +1,7 @@\n-# `inclusive_range_syntax`\n+# `inclusive_range`\n \n The tracking issue for this feature is: [#28237]\n \n [#28237]: https://github.com/rust-lang/rust/issues/28237\n \n ------------------------\n-\n-\n-", "previous_filename": "src/doc/unstable-book/src/inclusive-range-syntax.md"}, {"sha": "402e4fa5ef6d73fcf3f4f2ef0a610add95f9d018", "filename": "src/doc/unstable-book/src/library-features/int-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fint-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fint-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fint-error-internals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `int_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "50db9fd4ca45c6976b58981296bc305e381a02bd", "filename": "src/doc/unstable-book/src/library-features/integer-atomics.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finteger-atomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finteger-atomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finteger-atomics.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `integer_atomics`\n+\n+The tracking issue for this feature is: [#32976]\n+\n+[#32976]: https://github.com/rust-lang/rust/issues/32976\n+\n+------------------------"}, {"sha": "0d94b4fc560571a2c18701369ef6797f1b606ec3", "filename": "src/doc/unstable-book/src/library-features/into-boxed-c-str.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-c-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-c-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-c-str.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_c_str`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "7636e20b14d88fc4f52875ea6257ef8775c044f8", "filename": "src/doc/unstable-book/src/library-features/into-boxed-os-str.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-os-str.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-os-str.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-os-str.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_os_str`\n+\n+The tracking issue for this feature is: [#into_boxed_os_str]\n+\n+[#into_boxed_os_str]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "754c6042f07f6a2360050876e29a39a7c1cd925a", "filename": "src/doc/unstable-book/src/library-features/into-boxed-path.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-path.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-path.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finto-boxed-path.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `into_boxed_path`\n+\n+The tracking issue for this feature is: [#40380]\n+\n+[#40380]: https://github.com/rust-lang/rust/issues/40380\n+\n+------------------------"}, {"sha": "5bee18d33d61bcf21538e1f4c21bf36bf76facce", "filename": "src/doc/unstable-book/src/library-features/io-error-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio-error-internals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `io_error_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "ed6cae24e32de7267f1d8693f9900eb7707fa708", "filename": "src/doc/unstable-book/src/library-features/io.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fio.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `io`\n+\n+The tracking issue for this feature is: [#27802]\n+\n+[#27802]: https://github.com/rust-lang/rust/issues/27802\n+\n+------------------------"}, {"sha": "7e7d52adbdb0fd76bafbdc14703e0b8dc6323b89", "filename": "src/doc/unstable-book/src/library-features/ip.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fip.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fip.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fip.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `ip`\n+\n+The tracking issue for this feature is: [#27709]\n+\n+[#27709]: https://github.com/rust-lang/rust/issues/27709\n+\n+------------------------"}, {"sha": "444714490345b3b0a2938a65ec66a85d3b5431cc", "filename": "src/doc/unstable-book/src/library-features/iter-rfind.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiter-rfind.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiter-rfind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiter-rfind.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `iter_rfind`\n+\n+The tracking issue for this feature is: [#39480]\n+\n+[#39480]: https://github.com/rust-lang/rust/issues/39480\n+\n+------------------------"}, {"sha": "8bcc2769db71e3a32c84e67a58f19b191f10a3ff", "filename": "src/doc/unstable-book/src/library-features/libstd-io-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-io-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-io-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-io-internals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_io_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "1b53faa8a0071170aebf00bbba17de7525a18ddf", "filename": "src/doc/unstable-book/src/library-features/libstd-sys-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-sys-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-sys-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-sys-internals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_sys_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "b682d12e7cdd1e9b2cf76b0823652c931da1dae8", "filename": "src/doc/unstable-book/src/library-features/libstd-thread-internals.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-thread-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-thread-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flibstd-thread-internals.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `libstd_thread_internals`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "be3b96aea70d8933ec5d0b2275dcd17aab91f1a1", "filename": "src/doc/unstable-book/src/library-features/linked-list-extras.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flinked-list-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flinked-list-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flinked-list-extras.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `linked_list_extras`\n+\n+The tracking issue for this feature is: [#27794]\n+\n+[#27794]: https://github.com/rust-lang/rust/issues/27794\n+\n+------------------------"}, {"sha": "b60e7a010945a423269242cdf77f463c469ed3ce", "filename": "src/doc/unstable-book/src/library-features/lookup-host.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flookup-host.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flookup-host.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Flookup-host.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `lookup_host`\n+\n+The tracking issue for this feature is: [#27705]\n+\n+[#27705]: https://github.com/rust-lang/rust/issues/27705\n+\n+------------------------"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/doc/unstable-book/src/library-features/manually-drop.md", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmanually-drop.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmanually-drop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmanually-drop.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6"}, {"sha": "c84f40e7ee551ffa53a4e3abb710f7cfef45432d", "filename": "src/doc/unstable-book/src/library-features/more-io-inner-methods.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,11 @@\n+# `more_io_inner_methods`\n+\n+The tracking issue for this feature is: [#41519]\n+\n+[#41519]: https://github.com/rust-lang/rust/issues/41519\n+\n+------------------------\n+\n+This feature enables several internal accessor methods on structures in\n+`std::io` including `Take::{get_ref, get_mut}` and `Chain::{into_inner, get_ref,\n+get_mut}`."}, {"sha": "1405b6c5cb245f48883efa2fa20de5feeac70426", "filename": "src/doc/unstable-book/src/library-features/mpsc-select.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmpsc-select.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmpsc-select.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmpsc-select.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `mpsc_select`\n+\n+The tracking issue for this feature is: [#27800]\n+\n+[#27800]: https://github.com/rust-lang/rust/issues/27800"}, {"sha": "e556adaa13ea738db2fdb9b30069fa8ac06583ea", "filename": "src/doc/unstable-book/src/library-features/n16.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fn16.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fn16.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fn16.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,5 @@\n+# `n16`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "4063cd0db01d60c0d7ac647b726df7f9bac37f12", "filename": "src/doc/unstable-book/src/library-features/never-type-impls.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fnever-type-impls.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fnever-type-impls.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fnever-type-impls.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `never_type_impls`\n+\n+The tracking issue for this feature is: [#35121]\n+\n+[#35121]: https://github.com/rust-lang/rust/issues/35121\n+\n+------------------------"}, {"sha": "f200f8e2786fa40c262299f14136c3357d5f2c20", "filename": "src/doc/unstable-book/src/library-features/nonzero.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fnonzero.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fnonzero.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fnonzero.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `nonzero`\n+\n+The tracking issue for this feature is: [#27730]\n+\n+[#27730]: https://github.com/rust-lang/rust/issues/27730\n+\n+------------------------"}, {"sha": "03d990eb4ae970421d5bdea89b0d6c76ba71076a", "filename": "src/doc/unstable-book/src/library-features/offset-to.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foffset-to.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foffset-to.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foffset-to.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `offset_to`\n+\n+The tracking issue for this feature is: [#41079]\n+\n+[#41079]: https://github.com/rust-lang/rust/issues/41079\n+\n+------------------------"}, {"sha": "3c16cafae5014ff95d4116fdbf22dd801c7e2b89", "filename": "src/doc/unstable-book/src/library-features/once-poison.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fonce-poison.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fonce-poison.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fonce-poison.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `once_poison`\n+\n+The tracking issue for this feature is: [#33577]\n+\n+[#33577]: https://github.com/rust-lang/rust/issues/33577\n+\n+------------------------"}, {"sha": "908caeb75c60166333fa3bbc9ff824d75093c2cd", "filename": "src/doc/unstable-book/src/library-features/oom.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foom.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foom.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `oom`\n+\n+The tracking issue for this feature is: [#27700]\n+\n+[#27700]: https://github.com/rust-lang/rust/issues/27700\n+\n+------------------------"}, {"sha": "edb4efc09e5877de1103df4954c08397d5e788e0", "filename": "src/doc/unstable-book/src/library-features/option-entry.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foption-entry.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foption-entry.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Foption-entry.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `option_entry`\n+\n+The tracking issue for this feature is: [#39288]\n+\n+[#39288]: https://github.com/rust-lang/rust/issues/39288\n+\n+------------------------"}, {"sha": "21dc7d095c808c5845267a54b39d15379453ada0", "filename": "src/doc/unstable-book/src/library-features/osstring-shrink-to-fit.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fosstring-shrink-to-fit.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7df6dcd7399e0c49b6008ab3b82c979dba835a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fosstring-shrink-to-fit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fosstring-shrink-to-fit.md?ref=d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "patch": "@@ -0,0 +1,7 @@\n+# `osstring_shrink_to_fit`\n+\n+The tracking issue for this feature is: [#40421]\n+\n+[#40421]: https://github.com/rust-lang/rust/issues/40421\n+\n+------------------------"}]}