{"sha": "acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZDhkZDZhNTBkNTA1MDU3YTdkN2FkOGQwZDdhNGMyYmQyNzQyMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-05T17:45:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-05T17:45:43Z"}, "message": "Auto merge of #59500 - crlf0710:boxed-closure-impls, r=cramertj\n\nUnsized rvalues: implement boxed closure impls. (2nd try)\n\nThis is a rebase of S-blocked-closed PR #55431 to current master. LLVM has moved forward since then, so maybe we can check whether the new LLVM 8.0 version unblocked this work.", "tree": {"sha": "db3cdcdf3bc1a839ef3ce43ca6eddef9225c1094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db3cdcdf3bc1a839ef3ce43ca6eddef9225c1094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "html_url": "https://github.com/rust-lang/rust/commit/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20dbf28624db446c0cf67be4cc71a85931947907", "url": "https://api.github.com/repos/rust-lang/rust/commits/20dbf28624db446c0cf67be4cc71a85931947907", "html_url": "https://github.com/rust-lang/rust/commit/20dbf28624db446c0cf67be4cc71a85931947907"}, {"sha": "812d89c87d9346ac4b70426b67a8eb989a13c853", "url": "https://api.github.com/repos/rust-lang/rust/commits/812d89c87d9346ac4b70426b67a8eb989a13c853", "html_url": "https://github.com/rust-lang/rust/commit/812d89c87d9346ac4b70426b67a8eb989a13c853"}], "stats": {"total": 219, "additions": 119, "deletions": 100}, "files": [{"sha": "cb3386b7152112a5953d457b12c36c181f061618", "filename": "src/doc/unstable-book/src/library-features/fnbox.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffnbox.md?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -0,0 +1,32 @@\n+# `fnbox`\n+\n+The tracking issue for this feature is [#28796]\n+\n+[#28796]: https://github.com/rust-lang/rust/issues/28796\n+\n+------------------------\n+\n+This had been a temporary alternative to the following impls:\n+\n+```rust,ignore\n+impl<A, F> FnOnce for Box<F> where F: FnOnce<A> + ?Sized {}\n+impl<A, F> FnMut for Box<F> where F: FnMut<A> + ?Sized {}\n+impl<A, F> Fn for Box<F> where F: Fn<A> + ?Sized {}\n+```\n+\n+The impls are parallel to these (relatively old) impls:\n+\n+```rust,ignore\n+impl<A, F> FnOnce for &mut F where F: FnMut<A> + ?Sized {}\n+impl<A, F> FnMut for &mut F where F: FnMut<A> + ?Sized {}\n+impl<A, F> Fn for &mut F where F: Fn<A> + ?Sized {}\n+impl<A, F> FnOnce for &F where F: Fn<A> + ?Sized {}\n+impl<A, F> FnMut for &F where F: Fn<A> + ?Sized {}\n+impl<A, F> Fn for &F where F: Fn<A> + ?Sized {}\n+```\n+\n+Before the introduction of [`unsized_locals`][unsized_locals], we had been unable to provide the former impls. That means, unlike `&dyn Fn()` or `&mut dyn FnMut()` we could not use `Box<dyn FnOnce()>` at that time.\n+\n+[unsized_locals]: language-features/unsized-locals.html\n+\n+`FnBox()` is an alternative approach to `Box<dyn FnBox()>` is delegated to `FnBox::call_box` which doesn't need unsized locals. As we now have `Box<dyn FnOnce()>` working, the `fnbox` feature is going to be removed."}, {"sha": "f6dee7c9eefd6e0f42e7f2cfd2ba251cef394449", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -694,6 +694,28 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n \n+#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+impl<A, F: FnOnce<A> + ?Sized> FnOnce<A> for Box<F> {\n+    type Output = <F as FnOnce<A>>::Output;\n+\n+    extern \"rust-call\" fn call_once(self, args: A) -> Self::Output {\n+        <F as FnOnce<A>>::call_once(*self, args)\n+    }\n+}\n+\n+#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+impl<A, F: FnMut<A> + ?Sized> FnMut<A> for Box<F> {\n+    extern \"rust-call\" fn call_mut(&mut self, args: A) -> Self::Output {\n+        <F as FnMut<A>>::call_mut(self, args)\n+    }\n+}\n+\n+#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n+impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n+    extern \"rust-call\" fn call(&self, args: A) -> Self::Output {\n+        <F as Fn<A>>::call(self, args)\n+    }\n+}\n \n /// `FnBox` is a version of the `FnOnce` intended for use with boxed\n /// closure objects. The idea is that where one would normally store a\n@@ -735,9 +757,7 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n #[rustc_paren_sugar]\n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-pub trait FnBox<A> {\n-    type Output;\n-\n+pub trait FnBox<A>: FnOnce<A> {\n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n \n@@ -746,33 +766,11 @@ pub trait FnBox<A> {\n impl<A, F> FnBox<A> for F\n     where F: FnOnce<A>\n {\n-    type Output = F::Output;\n-\n     fn call_box(self: Box<F>, args: A) -> F::Output {\n         self.call_once(args)\n     }\n }\n \n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + '_> {\n-    type Output = R;\n-\n-    extern \"rust-call\" fn call_once(self, args: A) -> R {\n-        self.call_box(args)\n-    }\n-}\n-\n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + '_> {\n-    type Output = R;\n-\n-    extern \"rust-call\" fn call_once(self, args: A) -> R {\n-        self.call_box(args)\n-    }\n-}\n-\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n "}, {"sha": "9064b4ccd6a88a31d8099bd029913693dcbd34ec", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -107,6 +107,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode_internals)]\n #![feature(unsize)]\n+#![feature(unsized_locals)]\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(rustc_const_unstable)]"}, {"sha": "16bdeae4fad41fc2708c5a468efe2ec8b141ef8f", "filename": "src/test/run-pass/unsized-locals/box-fnonce.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Frun-pass%2Funsized-locals%2Fbox-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Frun-pass%2Funsized-locals%2Fbox-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Fbox-fnonce.rs?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -0,0 +1,8 @@\n+fn call_it<T>(f: Box<dyn FnOnce() -> T>) -> T {\n+    f()\n+}\n+\n+fn main() {\n+    let s = \"hello\".to_owned();\n+    assert_eq!(&call_it(Box::new(|| s)) as &str, \"hello\");\n+}"}, {"sha": "5ec54ada13bb0f396c56fb94b5e1d7e27b4e8213", "filename": "src/test/run-pass/unsized-locals/fnbox-compat.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -0,0 +1,12 @@\n+#![feature(fnbox)]\n+\n+use std::boxed::FnBox;\n+\n+fn call_it<T>(f: Box<dyn FnBox() -> T>) -> T {\n+    f()\n+}\n+\n+fn main() {\n+    let s = \"hello\".to_owned();\n+    assert_eq!(&call_it(Box::new(|| s)) as &str, \"hello\");\n+}"}, {"sha": "223de36f0df312370409b21af17a41250ddbc88b", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.nll.stderr", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -7,17 +7,15 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n-   |                     - consider adding a `Copy` constraint to this type argument\n+   |                                            - move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n-   |\n-   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -28,30 +26,18 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:9\n-   |\n-LL |         f(f(10));\n-   |         ^\n-\n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n-   |\n-LL |         f(f(10));\n-   |           ^\n-\n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n    |\n+LL |     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+   |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n-   |\n-   = note: move occurs because `*f` has type `dyn std::ops::FnOnce(i32) -> i32`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:129:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:125:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -60,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:157:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:153:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -70,7 +56,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:163:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:159:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -79,7 +65,7 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow occurs here\n    |     mutable borrow later used here\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0161, E0382, E0499, E0502.\n-For more information about an error, try `rustc --explain E0161`.\n+Some errors occurred: E0382, E0499, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "d98b272944fdc0ff64e1138d3f0ae83f2983f4cf", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.stderr?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -15,15 +15,15 @@ LL |         f(f(10));\n    |         | second mutable borrow occurs here\n    |         first mutable borrow occurs here\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n    |\n-   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -34,18 +34,18 @@ LL |         f(f(10));\n    |         | second mutable borrow occurs here\n    |         first mutable borrow occurs here\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n    |\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n    |\n-   = note: move occurs because `*f` has type `(dyn std::ops::FnOnce(i32) -> i32 + 'static)`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `std::boxed::Box<(dyn std::ops::FnOnce(i32) -> i32 + 'static)>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:129:28\n+  --> $DIR/two-phase-nonrecv-autoref.rs:125:28\n    |\n LL |     double_access(&mut a, &a);\n    |                        -   ^- mutable borrow ends here\n@@ -54,7 +54,7 @@ LL |     double_access(&mut a, &a);\n    |                        mutable borrow occurs here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:135:9\n+  --> $DIR/two-phase-nonrecv-autoref.rs:131:9\n    |\n LL |     a.m(a.i(10));\n    |     -   ^      - mutable borrow ends here\n@@ -63,7 +63,7 @@ LL |     a.m(a.i(10));\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:157:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:153:7\n    |\n LL |     i[i[3]] = 4;\n    |     - ^   - mutable borrow ends here\n@@ -72,7 +72,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:163:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:159:7\n    |\n LL |     i[i[3]] = i[4];\n    |     - ^   - mutable borrow ends here\n@@ -81,7 +81,7 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:172:12\n+  --> $DIR/two-phase-nonrecv-autoref.rs:168:12\n    |\n LL |     v.push(v.len());\n    |     -      ^      - mutable borrow ends here\n@@ -90,7 +90,7 @@ LL |     v.push(v.len());\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:183:9\n+  --> $DIR/two-phase-nonrecv-autoref.rs:179:9\n    |\n LL |     s.m(s.i(10));\n    |     -   ^      - mutable borrow ends here\n@@ -99,7 +99,7 @@ LL |     s.m(s.i(10));\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `t` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:188:9\n+  --> $DIR/two-phase-nonrecv-autoref.rs:184:9\n    |\n LL |     t.m(t.i(10));\n    |     -   ^      - mutable borrow ends here"}, {"sha": "223de36f0df312370409b21af17a41250ddbc88b", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -7,17 +7,15 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n-   |                     - consider adding a `Copy` constraint to this type argument\n+   |                                            - move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n-   |\n-   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -28,30 +26,18 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:9\n-   |\n-LL |         f(f(10));\n-   |         ^\n-\n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n-   |\n-LL |         f(f(10));\n-   |           ^\n-\n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n    |\n+LL |     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+   |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n-   |\n-   = note: move occurs because `*f` has type `dyn std::ops::FnOnce(i32) -> i32`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:129:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:125:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -60,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:157:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:153:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -70,7 +56,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:163:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:159:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -79,7 +65,7 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow occurs here\n    |     mutable borrow later used here\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0161, E0382, E0499, E0502.\n-For more information about an error, try `rustc --explain E0161`.\n+Some errors occurred: E0382, E0499, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "1005da052970bf35e6bcccd243a3fd0a7bc7028a", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -67,9 +67,9 @@ fn overloaded_call_traits() {\n     }\n     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n         f(f(10));\n-        //[nll]~^   ERROR use of moved value: `*f`\n-        //[g2p]~^^  ERROR use of moved value: `*f`\n-        //[ast]~^^^ ERROR use of moved value: `*f`\n+        //[nll]~^   ERROR use of moved value: `f`\n+        //[g2p]~^^  ERROR use of moved value: `f`\n+        //[ast]~^^^ ERROR use of moved value: `f`\n     }\n \n     fn twice_ten_om(f: &mut FnMut(i32) -> i32) {\n@@ -83,13 +83,9 @@ fn overloaded_call_traits() {\n     }\n     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n         f(f(10));\n-        //[nll]~^          ERROR cannot move a value of type\n-        //[nll]~^^         ERROR cannot move a value of type\n-        //[nll]~^^^        ERROR use of moved value: `*f`\n-        //[g2p]~^^^^       ERROR cannot move a value of type\n-        //[g2p]~^^^^^      ERROR cannot move a value of type\n-        //[g2p]~^^^^^^     ERROR use of moved value: `*f`\n-        //[ast]~^^^^^^^    ERROR use of moved value: `*f`\n+        //[nll]~^   ERROR use of moved value: `f`\n+        //[g2p]~^^  ERROR use of moved value: `f`\n+        //[ast]~^^^ ERROR use of moved value: `f`\n     }\n \n     twice_ten_sm(&mut |x| x + 1);"}, {"sha": "4e2ab59f8224520d82e9f830a22852423e086741", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -18,7 +18,7 @@ LL | fn test2<F>(f: &F) where F: FnMut() {\n LL |     (*f)();\n    |     ^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow `*f.f` as mutable, as it is behind a `&` reference\n+error[E0596]: cannot borrow `f.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:34:5\n    |\n LL | fn test4(f: &Test) {"}, {"sha": "f246f1118bf4e6584ff40b6e8cd5d3b02b890d65", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -32,7 +32,7 @@ fn test3<F>(f: &mut F) where F: FnMut() {\n \n fn test4(f: &Test) {\n     f.f.call_mut(())\n-    //~^ ERROR: cannot borrow `Box` content `*f.f` of immutable binding as mutable\n+    //~^ ERROR: cannot borrow field `f.f` of immutable binding as mutable\n }\n \n fn test5(f: &mut Test) {"}, {"sha": "a61ee8334afff1da6aad1e3815c22fb1d9a4ef7e", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "patch": "@@ -19,13 +19,13 @@ LL | fn test2<F>(f: &F) where F: FnMut() {\n LL |     (*f)();\n    |     ^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow `Box` content `*f.f` of immutable binding as mutable\n+error[E0596]: cannot borrow field `f.f` of immutable binding as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:34:5\n    |\n LL | fn test4(f: &Test) {\n    |             ----- use `&mut Test` here to make mutable\n LL |     f.f.call_mut(())\n-   |     ^^^ cannot borrow as mutable\n+   |     ^^^ cannot mutably borrow field of immutable binding\n \n error[E0504]: cannot move `f` into closure because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:56:13"}]}