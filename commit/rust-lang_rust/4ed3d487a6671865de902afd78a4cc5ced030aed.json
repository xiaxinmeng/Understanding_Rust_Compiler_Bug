{"sha": "4ed3d487a6671865de902afd78a4cc5ced030aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZDNkNDg3YTY2NzE4NjVkZTkwMmFmZDc4YTRjYzVjZWQwMzBhZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T08:25:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T08:25:34Z"}, "message": "Auto merge of #1333 - RalfJung:flag-test, r=RalfJung\n\nMake sure we find many failures even with other checks disabled", "tree": {"sha": "3ff076728efbb16fbeed00f7f171fa3700ebe64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff076728efbb16fbeed00f7f171fa3700ebe64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed3d487a6671865de902afd78a4cc5ced030aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed3d487a6671865de902afd78a4cc5ced030aed", "html_url": "https://github.com/rust-lang/rust/commit/4ed3d487a6671865de902afd78a4cc5ced030aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed3d487a6671865de902afd78a4cc5ced030aed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03715907f46f79250904c799a59b87c26c2b0377", "url": "https://api.github.com/repos/rust-lang/rust/commits/03715907f46f79250904c799a59b87c26c2b0377", "html_url": "https://github.com/rust-lang/rust/commit/03715907f46f79250904c799a59b87c26c2b0377"}, {"sha": "e6822d60b3e2cc63ff0ae4603b1021cd0fb4dae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6822d60b3e2cc63ff0ae4603b1021cd0fb4dae8", "html_url": "https://github.com/rust-lang/rust/commit/e6822d60b3e2cc63ff0ae4603b1021cd0fb4dae8"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "e088a5532581fcae1e99035272570a17e36239a9", "filename": "tests/compile-fail/dangling_pointers/dangling_pointer_deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_deref.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,6 @@\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+\n fn main() {\n     let p = {\n         let b = Box::new(42);"}, {"sha": "f1b5149dabb41ffc6c6e3bf6cfb1c270ee8bdea9", "filename": "tests/compile-fail/dangling_pointers/dangling_zst_deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_zst_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_zst_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_zst_deref.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,6 @@\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+\n fn main() {\n     let p = {\n         let b = Box::new(42);"}, {"sha": "deb3586c781e264c3b96ddcf6c1d55a15bf37db0", "filename": "tests/compile-fail/intrinsics/uninit_uninhabited_type.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fintrinsics%2Funinit_uninhabited_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fintrinsics%2Funinit_uninhabited_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funinit_uninhabited_type.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,4 +1,4 @@\n- // error-pattern: the evaluated program aborted execution: attempted to instantiate uninhabited type `!`\n+// error-pattern: the evaluated program aborted execution: attempted to instantiate uninhabited type `!`\n #![feature(never_type)]\n \n #[allow(deprecated, invalid_value)]", "previous_filename": "tests/compile-fail/uninit_uninhabited_type.rs"}, {"sha": "81dbf6c429b3319bd9a8ba624c33199a4a85fd89", "filename": "tests/compile-fail/intrinsics/zero_fn_ptr.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fintrinsics%2Fzero_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fintrinsics%2Fzero_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fzero_fn_ptr.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: the evaluated program aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n+\n+#[allow(deprecated, invalid_value)]\n+fn main() {\n+    unsafe { std::mem::zeroed::<fn()>() };\n+}"}, {"sha": "38033146ade828ac0d66aad0959e9f3d654d528d", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,5 +1,6 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };"}, {"sha": "ab10ab1e2173dc266c5450e7dd0cbd569039e713", "filename": "tests/compile-fail/invalid_char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,5 +1,6 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());"}, {"sha": "cdbea6aa1223455df83a2a18c4722a3746e70709", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,5 +1,6 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n // error-pattern: invalid enum discriminant\n "}, {"sha": "26a85802079b0f0ddbc5383e7cb761c652b5dd02", "filename": "tests/compile-fail/invalid_int.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Finvalid_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_int.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -0,0 +1,8 @@\n+// Validation makes this fail in the wrong place\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+\n+fn main() {\n+    let i = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() };\n+    let _x = i + 0; //~ ERROR this operation requires initialized memory\n+}"}, {"sha": "78c2b0fbeeb7232f6e142b15ac799edfbb24a74f", "filename": "tests/compile-fail/invalid_zero_init.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/tests%2Fcompile-fail%2Finvalid_zero_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/tests%2Fcompile-fail%2Finvalid_zero_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_zero_init.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -1,6 +0,0 @@\n- // error-pattern: the evaluated program aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n-\n-#[allow(deprecated, invalid_value)]\n-fn main() {\n-    unsafe { std::mem::zeroed::<fn()>() };\n-}"}, {"sha": "3eab4c0f3d5eb5f6bd2fa2a5f55cbe55a1e7dc50", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,6 @@\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+\n fn main() {\n     let mut p = &42;\n     unsafe {"}, {"sha": "c2c4ce6726dfb9f1d04167d7ded1d3a0e3cfa95a", "filename": "tests/compile-fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,6 @@\n+// Make sure we catch this even without validation\n+// compile-flags: -Zmiri-disable-validation\n+\n // Make sure that we cannot load from memory a `&mut` that got already invalidated.\n fn main() {\n     let x = &mut 42;"}, {"sha": "7d681f649a107f623ef449813b5c32e7b55ba1d7", "filename": "tests/compile-fail/stacked_borrows/load_invalid_shr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,6 @@\n+// Make sure we catch this even without validation\n+// compile-flags: -Zmiri-disable-validation\n+\n // Make sure that we cannot load from memory a `&` that got already invalidated.\n fn main() {\n     let x = &mut 42;"}, {"sha": "0a67cfc5a1b362ead0f71b7a38b52d4398f2d4ed", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,5 +1,5 @@\n-// This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+// This should fail even without validation or Stacked Borrows.\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error."}, {"sha": "b1fb2f4aa9762646d9ec8705bdab8cec1b355e9f", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,5 +1,5 @@\n-// This should fail even without validation.\n-// compile-flags: -Zmiri-disable-validation\n+// This should fail even without validation or Stacked Borrows.\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error."}, {"sha": "c5a3398384e495ea6830b306c83345825288de2d", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,5 +1,5 @@\n-// This should fail even without validation.\n-// compile-flags: -Zmiri-disable-validation\n+// This should fail even without validation or Stacked Borrows.\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error."}, {"sha": "a83c6af21acfd62e2c3474d96c2e16c6472991ec", "filename": "tests/compile-fail/validity/dangling_ref1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,5 @@\n+// Make sure we catch this even without Stacked Borrows\n+// compile-flags: -Zmiri-disable-stacked-borrows\n use std::mem;\n \n fn main() {"}, {"sha": "7aff1a49785cc4b848aed83a96e6f4e7175dbc5a", "filename": "tests/compile-fail/validity/dangling_ref2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,5 @@\n+// Make sure we catch this even without Stacked Borrows\n+// compile-flags: -Zmiri-disable-stacked-borrows\n use std::mem;\n \n fn main() {"}, {"sha": "495a266a85dc64e382b33fa856e57592b4a34721", "filename": "tests/compile-fail/validity/dangling_ref3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3d487a6671865de902afd78a4cc5ced030aed/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref3.rs?ref=4ed3d487a6671865de902afd78a4cc5ced030aed", "patch": "@@ -1,3 +1,5 @@\n+// Make sure we catch this even without Stacked Borrows\n+// compile-flags: -Zmiri-disable-stacked-borrows\n use std::mem;\n \n fn dangling() -> *const u8 {"}]}