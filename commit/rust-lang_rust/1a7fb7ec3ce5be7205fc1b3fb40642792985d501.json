{"sha": "1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2ZiN2VjM2NlNWJlNzIwNWZjMWIzZmI0MDY0Mjc5Mjk4NWQ1MDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-22T10:51:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-22T10:51:47Z"}, "message": "expand comment about incomplete support for interior mutability", "tree": {"sha": "09dfac54e18d8b37464b6720382f8a7ee4fdc62a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09dfac54e18d8b37464b6720382f8a7ee4fdc62a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "html_url": "https://github.com/rust-lang/rust/commit/1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7fb7ec3ce5be7205fc1b3fb40642792985d501/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b22a1c9d950f741db8f144a61891166df69dbbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b22a1c9d950f741db8f144a61891166df69dbbd", "html_url": "https://github.com/rust-lang/rust/commit/0b22a1c9d950f741db8f144a61891166df69dbbd"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "077deceecf2a6768f6a538217d2a163d38a795b1", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a7fb7ec3ce5be7205fc1b3fb40642792985d501/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7fb7ec3ce5be7205fc1b3fb40642792985d501/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=1a7fb7ec3ce5be7205fc1b3fb40642792985d501", "patch": "@@ -264,11 +264,12 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         borrow_kind: Option<mir::BorrowKind>,\n     ) -> EvalResult<'tcx, Borrow> {\n         let time = self.machine.stacked_borrows.increment_clock();\n-        // FIXME This does not do enough checking when only part of the data has\n-        // interior mutability.\n         let new_bor = match borrow_kind {\n             Some(mir::BorrowKind::Mut { .. }) => Borrow::Mut(Mut::Uniq(time)),\n             Some(_) =>\n+                // FIXME This does not do enough checking when only part of the data has\n+                // interior mutability. When the type is `(i32, Cell<i32>)`, we want the\n+                // first field to be frozen but not the second.\n                 if self.type_is_freeze(pointee_ty) {\n                     Borrow::Frz(time)\n                 } else {"}]}