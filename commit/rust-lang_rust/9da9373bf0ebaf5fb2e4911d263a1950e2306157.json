{"sha": "9da9373bf0ebaf5fb2e4911d263a1950e2306157", "node_id": "C_kwDOAAsO6NoAKDlkYTkzNzNiZjBlYmFmNWZiMmU0OTExZDI2M2ExOTUwZTIzMDYxNTc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-07T16:23:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-08T10:29:16Z"}, "message": "rustc_middle: Remove `Option` from `module_reexports` query", "tree": {"sha": "062fda7f9ea739cf075bd1b3fa367c32404a85e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062fda7f9ea739cf075bd1b3fa367c32404a85e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da9373bf0ebaf5fb2e4911d263a1950e2306157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da9373bf0ebaf5fb2e4911d263a1950e2306157", "html_url": "https://github.com/rust-lang/rust/commit/9da9373bf0ebaf5fb2e4911d263a1950e2306157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da9373bf0ebaf5fb2e4911d263a1950e2306157/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612ddd2196fc2573baf8b1be85eb326f882fd2d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/612ddd2196fc2573baf8b1be85eb326f882fd2d3", "html_url": "https://github.com/rust-lang/rust/commit/612ddd2196fc2573baf8b1be85eb326f882fd2d3"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "4291b9aa14266a68a3299434198dcbd04db75d62", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -1327,8 +1327,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }\n             }));\n \n-            if let Some(reexports) = tcx.module_reexports(local_def_id) {\n-                assert!(!reexports.is_empty());\n+            let reexports = tcx.module_reexports(local_def_id);\n+            if !reexports.is_empty() {\n                 record_array!(self.tables.module_reexports[def_id] <- reexports);\n             }\n         }"}, {"sha": "a0fce4b47ca30b16cfe1de1fcd9fc4538fd08822", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -1510,7 +1510,7 @@ rustc_queries! {\n         desc { \"getting traits in scope at a block\" }\n     }\n \n-    query module_reexports(def_id: LocalDefId) -> Option<&'tcx [ModChild]> {\n+    query module_reexports(def_id: LocalDefId) -> &'tcx [ModChild] {\n         desc { |tcx| \"looking up reexports of module `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n "}, {"sha": "2ef6180c4cbd2d95415b71d03545b55588aaade8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -2502,7 +2502,7 @@ pub struct DeducedParamAttrs {\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.module_reexports =\n-        |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n+        |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map_or(&[], |v| &v[..]);\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.names_imported_by_glob_use = |tcx, id| {"}, {"sha": "089e043d61c3c0bce58a25cb47088bdcdf6237ec", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -515,16 +515,12 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.local_visibility(item_id.owner_id.def_id);\n             self.update_macro_reachable_def(item_id.owner_id.def_id, def_kind, vis, defining_mod);\n         }\n-        if let Some(exports) = self.tcx.module_reexports(module_def_id) {\n-            for export in exports {\n-                if export.vis.is_accessible_from(defining_mod, self.tcx) {\n-                    if let Res::Def(def_kind, def_id) = export.res {\n-                        if let Some(def_id) = def_id.as_local() {\n-                            let vis = self.tcx.local_visibility(def_id);\n-                            self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);\n-                        }\n-                    }\n-                }\n+        for export in self.tcx.module_reexports(module_def_id) {\n+            if export.vis.is_accessible_from(defining_mod, self.tcx)\n+                && let Res::Def(def_kind, def_id) = export.res\n+                && let Some(def_id) = def_id.as_local() {\n+                let vis = self.tcx.local_visibility(def_id);\n+                self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);\n             }\n         }\n     }"}, {"sha": "9270d1c02e21135ff0de2da8d6c3f014de7f3285", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -153,7 +153,6 @@ pub(crate) fn try_inline_glob(\n             let reexports = cx\n                 .tcx\n                 .module_reexports(current_mod)\n-                .unwrap_or_default()\n                 .iter()\n                 .filter_map(|child| child.res.opt_def_id())\n                 .collect();"}, {"sha": "7f150f3802538b366bf7529247e5b73c659bea94", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -2062,7 +2062,7 @@ pub(crate) fn reexport_chain<'tcx>(\n     import_def_id: LocalDefId,\n     target_def_id: LocalDefId,\n ) -> &'tcx [Reexport] {\n-    for child in tcx.module_reexports(tcx.local_parent(import_def_id)).unwrap_or_default() {\n+    for child in tcx.module_reexports(tcx.local_parent(import_def_id)) {\n         if child.res.opt_def_id() == Some(target_def_id.to_def_id())\n             && child.reexport_chain[0].id() == Some(import_def_id.to_def_id())\n         {"}, {"sha": "393d51fe0906949e2af836f3aa7445c24e598e4b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da9373bf0ebaf5fb2e4911d263a1950e2306157/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da9373bf0ebaf5fb2e4911d263a1950e2306157/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9da9373bf0ebaf5fb2e4911d263a1950e2306157", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n+        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID) {\n             if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n                 let Some(local_def_id) = def_id.as_local() &&\n                 self.cx.tcx.has_attr(def_id, sym::macro_export) &&"}]}