{"sha": "4a940b321534a1024078cce92fc69030bfd6c60d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTQwYjMyMTUzNGExMDI0MDc4Y2NlOTJmYzY5MDMwYmZkNmM2MGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-03T17:49:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:27:46Z"}, "message": "move `flow_in_progress` into `dataflow` and document it", "tree": {"sha": "14620fb255a57a2fa9e89b125d40d64175ac0376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14620fb255a57a2fa9e89b125d40d64175ac0376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a940b321534a1024078cce92fc69030bfd6c60d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a940b321534a1024078cce92fc69030bfd6c60d", "html_url": "https://github.com/rust-lang/rust/commit/4a940b321534a1024078cce92fc69030bfd6c60d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a940b321534a1024078cce92fc69030bfd6c60d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebd086b67fe19d9fd861ec26eddf3eee2f734378", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd086b67fe19d9fd861ec26eddf3eee2f734378", "html_url": "https://github.com/rust-lang/rust/commit/ebd086b67fe19d9fd861ec26eddf3eee2f734378"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "576d598579876b81a474da4c60beee8d971b1369", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4a940b321534a1024078cce92fc69030bfd6c60d", "patch": "@@ -22,16 +22,16 @@ use rustc::mir::{Field, Statement, StatementKind, Terminator, TerminatorKind};\n use rustc::mir::ClosureRegionRequirements;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::indexed_set::{IdxSetBuf};\n+use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n \n use syntax::ast;\n use syntax_pos::Span;\n \n use dataflow::{do_dataflow, DebugFormatted};\n+use dataflow::FlowAtLocation;\n use dataflow::MoveDataParamEnv;\n use dataflow::{DataflowAnalysis, DataflowResultsConsumer};\n-use dataflow::{FlowAtLocation, FlowsAtLocation};\n use dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n use dataflow::{EverInitializedLvals, MovingOutStatements};\n use dataflow::{Borrows, BorrowData, ReserveOrActivateIndex};"}, {"sha": "5564a0d98afa31a2132d86813d0a69ea783d2bef", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=4a940b321534a1024078cce92fc69030bfd6c60d", "patch": "@@ -22,7 +22,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::util::common::ErrorReported;\n use rustc_data_structures::fx::FxHashSet;\n use syntax::codemap::DUMMY_SP;\n-use borrow_check::{FlowAtLocation, FlowsAtLocation};\n+use dataflow::{FlowAtLocation, FlowsAtLocation};\n use dataflow::MaybeInitializedLvals;\n use dataflow::move_paths::{HasMoveData, MoveData};\n "}, {"sha": "c616f027331b7731d302564ffeb17e6dadbe1953", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=4a940b321534a1024078cce92fc69030bfd6c60d", "patch": "@@ -17,7 +17,7 @@ use std::collections::BTreeSet;\n use std::io;\n use transform::MirSource;\n use util::liveness::{LivenessResults, LocalSet};\n-use borrow_check::FlowAtLocation;\n+use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedLvals;\n use dataflow::move_paths::MoveData;\n "}, {"sha": "7f243ad6e264c7da515b1dd10af9f8943b4bbef2", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a940b321534a1024078cce92fc69030bfd6c60d/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=4a940b321534a1024078cce92fc69030bfd6c60d", "patch": "@@ -25,26 +25,43 @@ use std::iter;\n /// There's probably a way to auto-impl this, but I think\n /// it is cleaner to have manual visitor impls.\n pub trait FlowsAtLocation {\n-    // reset the state bitvector to represent the entry to block `bb`.\n+    /// Reset the state bitvector to represent the entry to block `bb`.\n     fn reset_to_entry_of(&mut self, bb: BasicBlock);\n \n-    // build gen + kill sets for statement at `loc`.\n+    /// Build gen + kill sets for statement at `loc`.\n+    ///\n+    /// Note that invoking this method alone does not change the\n+    /// `curr_state` -- you must invoke `apply_local_effect`\n+    /// afterwards.\n     fn reconstruct_statement_effect(&mut self, loc: Location);\n \n-    // build gen + kill sets for terminator for `loc`.\n+    /// Build gen + kill sets for terminator for `loc`.\n+    ///\n+    /// Note that invoking this method alone does not change the\n+    /// `curr_state` -- you must invoke `apply_local_effect`\n+    /// afterwards.\n     fn reconstruct_terminator_effect(&mut self, loc: Location);\n \n-    // apply current gen + kill sets to `flow_state`.\n-    //\n-    // (`bb` and `stmt_idx` parameters can be ignored if desired by\n-    // client. For the terminator, the `stmt_idx` will be the number\n-    // of statements in the block.)\n+    /// Apply current gen + kill sets to `flow_state`.\n+    ///\n+    /// (`loc` parameters can be ignored if desired by\n+    /// client. For the terminator, the `stmt_idx` will be the number\n+    /// of statements in the block.)\n     fn apply_local_effect(&mut self, loc: Location);\n }\n \n /// Represents the state of dataflow at a particular\n /// CFG location, both before and after it is\n /// executed.\n+///\n+/// Data flow results are typically computed only as basic block\n+/// boundaries. A `FlowInProgress` allows you to reconstruct the\n+/// effects at any point in the control-flow graph by starting with\n+/// the state at the start of the basic block (`reset_to_entry_of`)\n+/// and then replaying the effects of statements and terminators\n+/// (e.g. via `reconstruct_statement_effect` and\n+/// `reconstruct_terminator_effect`; don't forget to call\n+/// `apply_local_effect`).\n pub struct FlowAtLocation<BD>\n where\n     BD: BitDenotation,\n@@ -59,6 +76,7 @@ impl<BD> FlowAtLocation<BD>\n where\n     BD: BitDenotation,\n {\n+    /// Iterate over each bit set in the current state.\n     pub fn each_state_bit<F>(&self, f: F)\n     where\n         F: FnMut(BD::Idx),\n@@ -67,6 +85,9 @@ where\n             .each_bit(self.base_results.operator().bits_per_block(), f)\n     }\n \n+    /// Iterate over each `gen` bit in the current effect (invoke\n+    /// `reconstruct_statement_effect` or\n+    /// `reconstruct_terminator_effect` first).\n     pub fn each_gen_bit<F>(&self, f: F)\n     where\n         F: FnMut(BD::Idx),\n@@ -88,6 +109,7 @@ where\n         }\n     }\n \n+    /// Access the underlying operator.\n     pub fn operator(&self) -> &BD {\n         self.base_results.operator()\n     }\n@@ -96,11 +118,15 @@ where\n         self.curr_state.contains(x)\n     }\n \n+    /// Returns an iterator over the elements present in the current state.\n     pub fn elems_incoming(&self) -> iter::Peekable<indexed_set::Elems<BD::Idx>> {\n         let univ = self.base_results.sets().bits_per_block();\n         self.curr_state.elems(univ).peekable()\n     }\n \n+    /// Creates a clone of the current state and applies the local\n+    /// effects to the clone (leaving the state of self intact).\n+    /// Invokes `f` with an iterator over the resulting state.\n     pub fn with_elems_outgoing<F>(&self, f: F)\n     where\n         F: FnOnce(indexed_set::Elems<BD::Idx>),"}]}