{"sha": "edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWFjMTc3OGNiYWIyOGJiMWQxNDFlOTBlN2FlNmRjMmViOTdlNjA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-30T01:28:08Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-30T14:50:02Z"}, "message": "Rename kw::Invalid -> kw::Empty\n\nSee https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Is.20there.20a.20symbol.20for.20the.20empty.20string.3F/near/220054471\nfor context.", "tree": {"sha": "8b00c7938bca20d3b1e56a509d2d75f38788ae37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b00c7938bca20d3b1e56a509d2d75f38788ae37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "html_url": "https://github.com/rust-lang/rust/commit/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6121ca681e3aef09b93afb13637632dcdc0e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6121ca681e3aef09b93afb13637632dcdc0e9a", "html_url": "https://github.com/rust-lang/rust/commit/dc6121ca681e3aef09b93afb13637632dcdc0e9a"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "9dc6d6c98c753817c3853c8d6b8c6913f1210d16", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -1716,7 +1716,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         self.arena.alloc_from_iter(inputs.iter().map(|param| match param.pat.kind {\n             PatKind::Ident(_, ident, _) => ident,\n-            _ => Ident::new(kw::Invalid, param.pat.span),\n+            _ => Ident::new(kw::Empty, param.pat.span),\n         }))\n     }\n "}, {"sha": "f9eb69bb438156d63b47f3282336562ae46d6ee3", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -184,7 +184,7 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn check_lifetime(&self, ident: Ident) {\n-        let valid_names = [kw::UnderscoreLifetime, kw::StaticLifetime, kw::Invalid];\n+        let valid_names = [kw::UnderscoreLifetime, kw::StaticLifetime, kw::Empty];\n         if !valid_names.contains(&ident.name) && ident.without_first_quote().is_reserved() {\n             self.err_handler().span_err(ident.span, \"lifetimes cannot use keyword names\");\n         }"}, {"sha": "333a396a0b4fc694e9dfd07482e8807fe7eb09f0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -2787,7 +2787,7 @@ impl<'a> State<'a> {\n                     self.print_explicit_self(&eself);\n                 } else {\n                     let invalid = if let PatKind::Ident(_, ident, _) = input.pat.kind {\n-                        ident.name == kw::Invalid\n+                        ident.name == kw::Empty\n                     } else {\n                         false\n                     };"}, {"sha": "5f2b1c34d2b68fa063b99c59cab92b59b1b5aad5", "filename": "compiler/rustc_builtin_macros/src/llvm_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -93,7 +93,7 @@ fn parse_inline_asm<'a>(\n         })\n         .unwrap_or(tts.len());\n     let mut p = cx.new_parser_from_tts(tts.trees().skip(first_colon).collect());\n-    let mut asm = kw::Invalid;\n+    let mut asm = kw::Empty;\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();"}, {"sha": "f1eae605da0181b12967dea276510702b23f894c", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // (after #67586 gets fixed).\n                 None\n             } else {\n-                let name = kw::Invalid;\n+                let name = kw::Empty;\n                 let decl = &self.mir.local_decls[local];\n                 let dbg_var = if full_debug_info {\n                     self.adjusted_span_and_dbg_scope(decl.source_info).map(\n@@ -204,7 +204,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             None\n         } else {\n             Some(match whole_local_var.or(fallback_var) {\n-                Some(var) if var.name != kw::Invalid => var.name.to_string(),\n+                Some(var) if var.name != kw::Empty => var.name.to_string(),\n                 _ => format!(\"{:?}\", local),\n             })\n         };"}, {"sha": "b18d75dc6a30c9b4e9a7bedb73ff9f60241a24bd", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -28,7 +28,7 @@ pub struct Lifetime {\n     pub span: Span,\n \n     /// Either \"`'a`\", referring to a named lifetime definition,\n-    /// or \"``\" (i.e., `kw::Invalid`), for elision placeholders.\n+    /// or \"``\" (i.e., `kw::Empty`), for elision placeholders.\n     ///\n     /// HIR lowering inserts these placeholders in type paths that\n     /// refer to type definitions needing lifetime parameters,"}, {"sha": "a8371274f61f8cabf9cc5ca1f655a51db67c4a80", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -868,7 +868,7 @@ impl EarlyLintPass for AnonymousParameters {\n         if let ast::AssocItemKind::Fn(_, ref sig, _, _) = it.kind {\n             for arg in sig.decl.inputs.iter() {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {\n-                    if ident.name == kw::Invalid {\n+                    if ident.name == kw::Empty {\n                         cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {\n                             let ty_snip = cx.sess.source_map().span_to_snippet(arg.ty.span);\n "}, {"sha": "ea4f7daec43d198219649ef40fb470093d51ad9a", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -728,7 +728,7 @@ impl<'tcx> LateContext<'tcx> {\n \n     /// Check if a `DefId`'s path matches the given absolute type path usage.\n     ///\n-    /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;\n+    /// Anonymous scopes such as `extern` imports are matched with `kw::Empty`;\n     /// inherent `impl` blocks are matched with the name of the type.\n     ///\n     /// Instead of using this method, it is often preferable to instead use"}, {"sha": "744fdc83a91ec8d3089ce74ebf634062a7b2a62a", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -132,7 +132,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n impl Collector<'tcx> {\n     fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLib) {\n-        if lib.name.as_ref().map(|&s| s == kw::Invalid).unwrap_or(false) {\n+        if lib.name.as_ref().map(|&s| s == kw::Empty).unwrap_or(false) {\n             match span {\n                 Some(span) => {\n                     struct_span_err!("}, {"sha": "09d5b102103120aebae9b7084e1aaf7f5c055547", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -379,7 +379,7 @@ impl<'hir> Map<'hir> {\n     pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {\n         self.body(id).params.iter().map(|arg| match arg.pat.kind {\n             PatKind::Binding(_, _, ident, _) => ident,\n-            _ => Ident::new(kw::Invalid, rustc_span::DUMMY_SP),\n+            _ => Ident::new(kw::Empty, rustc_span::DUMMY_SP),\n         })\n     }\n "}, {"sha": "893572785f76b0dde108da22218cc9de28b4dfb5", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -1481,7 +1481,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n         let name = disambiguated_data.data.name();\n-        if name != DefPathDataName::Named(kw::Invalid) {\n+        if name != DefPathDataName::Named(kw::Empty) {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n@@ -1608,14 +1608,14 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                data.name != kw::Invalid && data.name != kw::UnderscoreLifetime\n+                data.name != kw::Empty && data.name != kw::UnderscoreLifetime\n             }\n \n             ty::ReLateBound(_, ty::BoundRegion { kind: br })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name != kw::Invalid && name != kw::UnderscoreLifetime {\n+                    if name != kw::Empty && name != kw::UnderscoreLifetime {\n                         return true;\n                     }\n                 }\n@@ -1685,7 +1685,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n         // `explain_region()` or `note_and_explain_region()`.\n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                if data.name != kw::Invalid {\n+                if data.name != kw::Empty {\n                     p!(write(\"{}\", data.name));\n                     return Ok(self);\n                 }\n@@ -1694,7 +1694,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name != kw::Invalid && name != kw::UnderscoreLifetime {\n+                    if name != kw::Empty && name != kw::UnderscoreLifetime {\n                         p!(write(\"{}\", name));\n                         return Ok(self);\n                     }"}, {"sha": "996615995259d58bf77b17dd8d987516585a5394", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -854,7 +854,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let mut mutability = Mutability::Not;\n \n                     // FIXME(project-rfc-2229#8): Store more precise information\n-                    let mut name = kw::Invalid;\n+                    let mut name = kw::Empty;\n                     if let Some(Node::Binding(pat)) = tcx_hir.find(var_id) {\n                         if let hir::PatKind::Binding(_, _, ident, _) = pat.kind {\n                             name = ident.name;"}, {"sha": "c6669f0468296cb3217fdf2ed1c083f422b26ac6", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -494,7 +494,7 @@ impl<'a> Parser<'a> {\n         let polarity = self.parse_polarity();\n \n         // Parse both types and traits as a type, then reinterpret if necessary.\n-        let err_path = |span| ast::Path::from_ident(Ident::new(kw::Invalid, span));\n+        let err_path = |span| ast::Path::from_ident(Ident::new(kw::Empty, span));\n         let ty_first = if self.token.is_keyword(kw::For) && self.look_ahead(1, |t| t != &token::Lt)\n         {\n             let span = self.prev_token.span.between(self.token.span);\n@@ -1699,7 +1699,7 @@ impl<'a> Parser<'a> {\n                 // Skip every token until next possible arg or end.\n                 p.eat_to_tokens(&[&token::Comma, &token::CloseDelim(token::Paren)]);\n                 // Create a placeholder argument for proper arg count (issue #34264).\n-                Ok(dummy_arg(Ident::new(kw::Invalid, lo.to(p.prev_token.span))))\n+                Ok(dummy_arg(Ident::new(kw::Empty, lo.to(p.prev_token.span))))\n             });\n             // ...now that we've parsed the first argument, `self` is no longer allowed.\n             first_param = false;\n@@ -1759,7 +1759,7 @@ impl<'a> Parser<'a> {\n             }\n             match ty {\n                 Ok(ty) => {\n-                    let ident = Ident::new(kw::Invalid, self.prev_token.span);\n+                    let ident = Ident::new(kw::Empty, self.prev_token.span);\n                     let bm = BindingMode::ByValue(Mutability::Not);\n                     let pat = self.mk_pat_ident(ty.span, bm, ident);\n                     (pat, ty)"}, {"sha": "b6f631300905ede478010a1cb961a781f86a5142", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -1385,7 +1385,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n \n     fn should_warn(&self, var: Variable) -> Option<String> {\n         let name = self.ir.variable_name(var);\n-        if name == kw::Invalid {\n+        if name == kw::Empty {\n             return None;\n         }\n         let name: &str = &name.as_str();"}, {"sha": "b13377bb2b1d54420eb86dcd836859b5d37f83e4", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -959,7 +959,7 @@ impl<'tcx> NamePrivacyVisitor<'tcx> {\n         in_update_syntax: bool,\n     ) {\n         // definition of the field\n-        let ident = Ident::new(kw::Invalid, use_ctxt);\n+        let ident = Ident::new(kw::Empty, use_ctxt);\n         let current_hir = self.current_item.unwrap();\n         let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, current_hir).1;\n         if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {"}, {"sha": "6657201aaebdd848341097f3fca0c2ed7a7d0b70", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let field_names = vdata\n             .fields()\n             .iter()\n-            .map(|field| respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name)))\n+            .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))\n             .collect();\n         self.insert_field_names(def_id, field_names);\n     }\n@@ -527,7 +527,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         // HACK(eddyb) unclear how good this is, but keeping `$crate`\n                         // in `source` breaks `src/test/compile-fail/import-crate-var.rs`,\n                         // while the current crate doesn't have a valid `crate_name`.\n-                        if crate_name != kw::Invalid {\n+                        if crate_name != kw::Empty {\n                             // `crate_name` should not be interpreted as relative.\n                             module_path.push(Segment {\n                                 ident: Ident { name: kw::PathRoot, span: source.ident.span },\n@@ -656,7 +656,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n     /// Constructs the reduced graph for one item.\n     fn build_reduced_graph_for_item(&mut self, item: &'b Item) {\n-        if matches!(item.kind, ItemKind::Mod(..)) && item.ident.name == kw::Invalid {\n+        if matches!(item.kind, ItemKind::Mod(..)) && item.ident.name == kw::Empty {\n             // Fake crate root item from expand.\n             return;\n         }"}, {"sha": "48bce88439424524a678b10dd90abe0c60a6893e", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         // information we encapsulate into, the better\n         let def_data = match &i.kind {\n             ItemKind::Impl { .. } => DefPathData::Impl,\n-            ItemKind::Mod(..) if i.ident.name == kw::Invalid => {\n+            ItemKind::Mod(..) if i.ident.name == kw::Empty => {\n                 // Fake crate root item from expand.\n                 return visit::walk_item(self, i);\n             }"}, {"sha": "e45d7223849b9edb082b58ffcc51f66bad561935", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -1641,7 +1641,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n \n         // Record as bound if it's valid:\n-        let ident_valid = ident.name != kw::Invalid;\n+        let ident_valid = ident.name != kw::Empty;\n         if ident_valid {\n             bindings.last_mut().unwrap().1.insert(ident);\n         }"}, {"sha": "c2780b46f6cfb5d327cfc7b1a42e7a50c84ab27e", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -1182,12 +1182,12 @@ impl<'a> Resolver<'a> {\n     ) -> Resolver<'a> {\n         let root_local_def_id = LocalDefId { local_def_index: CRATE_DEF_INDEX };\n         let root_def_id = root_local_def_id.to_def_id();\n-        let root_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Invalid);\n+        let root_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty);\n         let graph_root = arenas.alloc_module(ModuleData {\n             no_implicit_prelude: session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n             ..ModuleData::new(None, root_module_kind, root_def_id, ExpnId::root(), krate.span)\n         });\n-        let empty_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Invalid);\n+        let empty_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty);\n         let empty_module = arenas.alloc_module(ModuleData {\n             no_implicit_prelude: true,\n             ..ModuleData::new(\n@@ -1797,7 +1797,7 @@ impl<'a> Resolver<'a> {\n         ribs: &[Rib<'a>],\n     ) -> Option<LexicalScopeBinding<'a>> {\n         assert!(ns == TypeNS || ns == ValueNS);\n-        if ident.name == kw::Invalid {\n+        if ident.name == kw::Empty {\n             return Some(LexicalScopeBinding::Res(Res::Err));\n         }\n         let (general_span, normalized_span) = if ident.name == kw::SelfUpper {"}, {"sha": "5ad7c83ca36afd8b140730a2640bf503632e84d7", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -160,7 +160,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         hygiene::update_dollar_crate_names(|ctxt| {\n             let ident = Ident::new(kw::DollarCrate, DUMMY_SP.with_ctxt(ctxt));\n             match self.resolve_crate_root(ident).kind {\n-                ModuleKind::Def(.., name) if name != kw::Invalid => name,\n+                ModuleKind::Def(.., name) if name != kw::Empty => name,\n                 _ => kw::Crate,\n             }\n         });"}, {"sha": "fdc0d225bb82d9f1f98b06cfc5052a5a5a88b500", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -1065,7 +1065,7 @@ pub fn decode_syntax_context<\n             parent: SyntaxContext::root(),\n             opaque: SyntaxContext::root(),\n             opaque_and_semitransparent: SyntaxContext::root(),\n-            dollar_crate_name: kw::Invalid,\n+            dollar_crate_name: kw::Empty,\n         });\n         let mut ctxts = outer_ctxts.lock();\n         let new_len = raw_id as usize + 1;\n@@ -1092,7 +1092,7 @@ pub fn decode_syntax_context<\n             ctxt_data,\n         );\n         // Make sure nothing weird happening while `decode_data` was running\n-        assert_eq!(dummy.dollar_crate_name, kw::Invalid);\n+        assert_eq!(dummy.dollar_crate_name, kw::Empty);\n     });\n \n     Ok(new_ctxt)"}, {"sha": "d324465c895fb9d9892981ad5018bf9dc3bcdf19", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -25,7 +25,7 @@ symbols! {\n     Keywords {\n         // Special reserved identifiers used internally for elided lifetimes,\n         // unnamed method parameters, crate root module, error recovery etc.\n-        Invalid:            \"\",\n+        Empty:              \"\",\n         PathRoot:           \"{{root}}\",\n         DollarCrate:        \"$crate\",\n         Underscore:         \"_\",\n@@ -1273,7 +1273,7 @@ impl Ident {\n \n     #[inline]\n     pub fn invalid() -> Ident {\n-        Ident::with_dummy_span(kw::Invalid)\n+        Ident::with_dummy_span(kw::Empty)\n     }\n \n     /// Maps a string to an identifier with a dummy span.\n@@ -1470,7 +1470,7 @@ impl Symbol {\n     }\n \n     pub fn is_empty(self) -> bool {\n-        self == kw::Invalid\n+        self == kw::Empty\n     }\n \n     /// This method is supposed to be used in error messages, so it's expected to be\n@@ -1654,7 +1654,7 @@ impl Symbol {\n \n     /// Returns `true` if this symbol can be a raw identifier.\n     pub fn can_be_raw(self) -> bool {\n-        self != kw::Invalid && self != kw::Underscore && !self.is_path_segment_keyword()\n+        self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()\n     }\n }\n "}, {"sha": "93eb2cfc72a8059d903db58ec5b0bf81f223a764", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -883,7 +883,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Ok(method)\n             }\n             Err(error) => {\n-                if segment.ident.name != kw::Invalid {\n+                if segment.ident.name != kw::Empty {\n                     self.report_extended_method_error(segment, span, args, rcvr_t, error);\n                 }\n                 Err(())\n@@ -1547,7 +1547,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return field_ty;\n         }\n \n-        if field.name == kw::Invalid {\n+        if field.name == kw::Empty {\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n             self.ban_take_value_of_method(expr, expr_t, field);\n         } else if !expr_t.is_primitive_ty() {"}, {"sha": "2a8b77da44fc461530d769aae82aa143b53dff93", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -914,7 +914,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n                 _ => Err(ErrorReported),\n             };\n-            if item_name.name != kw::Invalid {\n+            if item_name.name != kw::Empty {\n                 if let Some(mut e) = self.report_method_error(\n                     span,\n                     ty,"}, {"sha": "657b8d3879f8cbb496c565222ff04474c0544d6c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -941,7 +941,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| {\n-                    let mut name = self.1.get(i).map(|ident| ident.name).unwrap_or(kw::Invalid);\n+                    let mut name = self.1.get(i).map(|ident| ident.name).unwrap_or(kw::Empty);\n                     if name.is_empty() {\n                         name = kw::Underscore;\n                     }\n@@ -1000,7 +1000,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                     .iter()\n                     .map(|t| Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map(|i| i.name).unwrap_or(kw::Invalid),\n+                        name: names.next().map(|i| i.name).unwrap_or(kw::Empty),\n                     })\n                     .collect(),\n             },"}, {"sha": "a6ac3bdb714f6ab9417c0758678e84e487966a17", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -2086,8 +2086,8 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 (true, false) => return Ordering::Greater,\n             }\n         }\n-        let lhs = i1.name.unwrap_or(kw::Invalid).as_str();\n-        let rhs = i2.name.unwrap_or(kw::Invalid).as_str();\n+        let lhs = i1.name.unwrap_or(kw::Empty).as_str();\n+        let rhs = i2.name.unwrap_or(kw::Empty).as_str();\n         compare_names(&lhs, &rhs)\n     }\n \n@@ -4206,7 +4206,7 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer, cache:\n                 ty: \\\"{ty}\\\", \\\n                 relpath: \\\"{path}\\\"\\\n             }};</script>\",\n-        name = it.name.unwrap_or(kw::Invalid),\n+        name = it.name.unwrap_or(kw::Empty),\n         ty = it.type_(),\n         path = relpath\n     );"}, {"sha": "e84c8b4e5b3e0317e7006e84abd689f1dca56d4b", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edeac1778cbab28bb1d141e90e7ae6dc2eb97e60/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=edeac1778cbab28bb1d141e90e7ae6dc2eb97e60", "patch": "@@ -501,7 +501,7 @@ impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n \n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name.ident().name != kw::Invalid && lifetime.name.ident().name != kw::StaticLifetime {\n+        if lifetime.name.ident().name != kw::Empty && lifetime.name.ident().name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}]}