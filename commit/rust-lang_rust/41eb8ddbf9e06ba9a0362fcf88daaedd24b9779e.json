{"sha": "41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "node_id": "C_kwDOAAsO6NoAKDQxZWI4ZGRiZjllMDZiYTlhMDM2MmZjZjg4ZGFhZWRkMjRiOTc3OWU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-07-13T08:38:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-13T08:38:45Z"}, "message": "Rollup merge of #99148 - SOF3:clarify-xsize-bound, r=scottmcm\n\nClarify that [iu]size bounds were only defined for the target arch", "tree": {"sha": "f346efbbd163b7af05906ecb34b8ae38298dd291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f346efbbd163b7af05906ecb34b8ae38298dd291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizoSVCRBK7hj4Ov3rIwAAn8UIAFqfzbrCmOuAuXjzJUPiReEJ\nyHhuprG5hnWA9AD9aD71HHe6ERRSyIGMwaCZuFy/al0gFGqrfDD1yQDZJkc+EChg\ndbXJciMR8iu74k1jjnw0EKUJvjLTm9Q9p15p59NCQ4hregAoZ6xRezZLHpECI8JN\nKxQcZoiYJ+Ny+gqIqAutWyACsGmrudmlLKWfZQPU0dFRkvfzPE80JbEdOmv/qnIm\nC2Mt1mzg3j97kH/pxilJBiT2C2bdcDg4ZOg33QTsHBcJKBBI6wUx9nZ+WMDk5jid\nPK25kmjr4fZAQY9XvMsd4ChESsgeqXsyCLRMjeFft4fJJpdH+uxTjUm3RUf5pas=\n=5PeH\n-----END PGP SIGNATURE-----\n", "payload": "tree f346efbbd163b7af05906ecb34b8ae38298dd291\nparent 876d59999a3d6a2f31b9a9ec96dc274eb9340450\nparent 01a9ff0e8574de7f495a8f2a78f0fe6384777b8e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1657701525 +0200\ncommitter GitHub <noreply@github.com> 1657701525 +0200\n\nRollup merge of #99148 - SOF3:clarify-xsize-bound, r=scottmcm\n\nClarify that [iu]size bounds were only defined for the target arch\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "html_url": "https://github.com/rust-lang/rust/commit/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876d59999a3d6a2f31b9a9ec96dc274eb9340450", "url": "https://api.github.com/repos/rust-lang/rust/commits/876d59999a3d6a2f31b9a9ec96dc274eb9340450", "html_url": "https://github.com/rust-lang/rust/commit/876d59999a3d6a2f31b9a9ec96dc274eb9340450"}, {"sha": "01a9ff0e8574de7f495a8f2a78f0fe6384777b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a9ff0e8574de7f495a8f2a78f0fe6384777b8e", "html_url": "https://github.com/rust-lang/rust/commit/01a9ff0e8574de7f495a8f2a78f0fe6384777b8e"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "147f04a3f125d7910ff23a4187ea05c72263d2a7", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "patch": "@@ -2,9 +2,10 @@ macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $BITS_MINUS_ONE:expr, $Min:expr, $Max:expr,\n      $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n      $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n-        /// The smallest value that can be represented by this integer type,\n-        #[doc = concat!(\"&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>.\")]\n+     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n+     $bound_condition:expr) => {\n+        /// The smallest value that can be represented by this integer type\n+        #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \")\")]\n         ///\n         /// # Examples\n         ///\n@@ -16,8 +17,8 @@ macro_rules! int_impl {\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n         pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n \n-        /// The largest value that can be represented by this integer type,\n-        #[doc = concat!(\"2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1.\")]\n+        /// The largest value that can be represented by this integer type\n+        #[doc = concat!(\"(2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1\", $bound_condition, \")\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "f481399fdcf9255404ca6a4eef9e2105f36e5427", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "patch": "@@ -196,25 +196,25 @@ macro_rules! widening_impl {\n \n impl i8 {\n     int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n-    \"[0x12]\", \"[0x12]\", \"\", \"\" }\n+    \"[0x12]\", \"[0x12]\", \"\", \"\", \"\" }\n }\n \n impl i16 {\n     int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n+    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n }\n \n impl i32 {\n     int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n+    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n }\n \n impl i64 {\n     int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n+    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\", \"\" }\n }\n \n impl i128 {\n@@ -225,22 +225,24 @@ impl i128 {\n     \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n       0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\" }\n+      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl isize {\n     int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 16-bit targets\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n impl isize {\n     int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 32-bit targets\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -249,15 +251,16 @@ impl isize {\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 64-bit targets\" }\n }\n \n /// If 6th bit set ascii is upper case.\n const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n impl u8 {\n     uint_impl! { u8, u8, i8, NonZeroU8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n-    \"[0x12]\", \"\", \"\" }\n+    \"[0x12]\", \"\", \"\", \"\" }\n     widening_impl! { u8, u16, 8, unsigned }\n \n     /// Checks if the value is within the ASCII range.\n@@ -810,7 +813,7 @@ impl u8 {\n \n impl u16 {\n     uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-    \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n+    \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n     widening_impl! { u16, u32, 16, unsigned }\n \n     /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n@@ -841,7 +844,7 @@ impl u16 {\n \n impl u32 {\n     uint_impl! { u32, u32, i32, NonZeroU32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n+    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n     widening_impl! { u32, u64, 32, unsigned }\n }\n \n@@ -850,7 +853,7 @@ impl u64 {\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    \"\", \"\"}\n+    \"\", \"\", \"\"}\n     widening_impl! { u64, u128, 64, unsigned }\n }\n \n@@ -862,21 +865,23 @@ impl u128 {\n       0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n       0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n-     \"\", \"\"}\n+     \"\", \"\", \"\"}\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl usize {\n     uint_impl! { usize, u16, isize, NonZeroUsize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 16-bit targets\" }\n     widening_impl! { usize, u32, 16, unsigned }\n }\n #[cfg(target_pointer_width = \"32\")]\n impl usize {\n     uint_impl! { usize, u32, isize, NonZeroUsize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 32-bit targets\" }\n     widening_impl! { usize, u64, 32, unsigned }\n }\n \n@@ -886,7 +891,8 @@ impl usize {\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 64-bit targets\" }\n     widening_impl! { usize, u128, 64, unsigned }\n }\n "}, {"sha": "715e78350a499d07566e00480d9ed75a2c8bbaa3", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=41eb8ddbf9e06ba9a0362fcf88daaedd24b9779e", "patch": "@@ -3,7 +3,8 @@ macro_rules! uint_impl {\n         $BITS:expr, $MaxV:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-        $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n+        $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n+        $bound_condition:expr) => {\n         /// The smallest value that can be represented by this integer type.\n         ///\n         /// # Examples\n@@ -16,8 +17,8 @@ macro_rules! uint_impl {\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n         pub const MIN: Self = 0;\n \n-        /// The largest value that can be represented by this integer type,\n-        #[doc = concat!(\"2<sup>\", $BITS, \"</sup> &minus; 1.\")]\n+        /// The largest value that can be represented by this integer type\n+        #[doc = concat!(\"(2<sup>\", $BITS, \"</sup> &minus; 1\", $bound_condition, \")\")]\n         ///\n         /// # Examples\n         ///"}]}