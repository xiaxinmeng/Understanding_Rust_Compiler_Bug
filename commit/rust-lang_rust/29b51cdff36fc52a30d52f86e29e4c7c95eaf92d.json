{"sha": "29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "node_id": "C_kwDOAAsO6NoAKDI5YjUxY2RmZjM2ZmM1MmEzMGQ1MmY4NmUyOWU0YzdjOTVlYWY5MmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T03:24:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-23T20:08:40Z"}, "message": "Tweak the slice interners.\n\nAll the slice interners have a wrapper that handles the empty slice\ncase. We can instead handle this in the `slice_interners!` macro,\navoiding the need for most of the wrappers, and allowing the interner\nfunctions to be renamed from `_intern_foos` to `intern_foos`.\n\nThe two exceptions:\n- intern_predicates: I kept this wrapper because there's a FIXME\n  comment about a possible future change.\n- intern_poly_existential_predicates: I kept this wrapper because it\n  asserts that the slice is empty and sorted.", "tree": {"sha": "869d63d61cf28f92539dcd103f4e9a86b26b155a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/869d63d61cf28f92539dcd103f4e9a86b26b155a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "html_url": "https://github.com/rust-lang/rust/commit/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c993eba8b76eae497e98433ae075b00f01be10", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c993eba8b76eae497e98433ae075b00f01be10", "html_url": "https://github.com/rust-lang/rust/commit/07c993eba8b76eae497e98433ae075b00f01be10"}], "stats": {"total": 83, "additions": 24, "deletions": 59}, "files": [{"sha": "ef1166374999ec1d3180ed4af27f3a2e26daba9f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 24, "deletions": 59, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "patch": "@@ -6,7 +6,7 @@ pub mod tls;\n \n use crate::arena::Arena;\n use crate::dep_graph::{DepGraph, DepKindStruct};\n-use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n+use crate::infer::canonical::CanonicalVarInfo;\n use crate::lint::struct_lint_level;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::resolve_bound_vars;\n@@ -1565,24 +1565,28 @@ macro_rules! slice_interners {\n     ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (\n         impl<'tcx> TyCtxt<'tcx> {\n             $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n-                self.interners.$field.intern_ref(v, || {\n-                    InternedInSet(List::from_arena(&*self.arena, v))\n-                }).0\n+                if v.is_empty() {\n+                    List::empty()\n+                } else {\n+                    self.interners.$field.intern_ref(v, || {\n+                        InternedInSet(List::from_arena(&*self.arena, v))\n+                    }).0\n+                }\n             })+\n         }\n     );\n }\n \n slice_interners!(\n-    const_lists: _intern_const_list(Const<'tcx>),\n-    substs: _intern_substs(GenericArg<'tcx>),\n-    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n+    const_lists: intern_const_list(Const<'tcx>),\n+    substs: intern_substs(GenericArg<'tcx>),\n+    canonical_var_infos: intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n     poly_existential_predicates:\n         _intern_poly_existential_predicates(PolyExistentialPredicate<'tcx>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n-    projs: _intern_projs(ProjectionKind),\n-    place_elems: _intern_place_elems(PlaceElem<'tcx>),\n-    bound_variable_kinds: _intern_bound_variable_kinds(ty::BoundVariableKind),\n+    projs: intern_projs(ProjectionKind),\n+    place_elems: intern_place_elems(PlaceElem<'tcx>),\n+    bound_variable_kinds: intern_bound_variable_kinds(ty::BoundVariableKind),\n );\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -2152,12 +2156,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // FIXME consider asking the input slice to be sorted to avoid\n         // re-interning permutations, in which case that would be asserted\n         // here.\n-        if preds.is_empty() {\n-            // The macro-generated method below asserts we don't intern an empty slice.\n-            List::empty()\n-        } else {\n-            self._intern_predicates(preds)\n-        }\n+        self._intern_predicates(preds)\n     }\n \n     pub fn mk_const_list<I, T>(self, iter: I) -> T::Output\n@@ -2168,50 +2167,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         T::collect_and_apply(iter, |xs| self.intern_const_list(xs))\n     }\n \n-    pub fn intern_const_list(self, cs: &[ty::Const<'tcx>]) -> &'tcx List<ty::Const<'tcx>> {\n-        if cs.is_empty() { List::empty() } else { self._intern_const_list(cs) }\n-    }\n-\n     pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {\n-        if ts.is_empty() {\n-            List::empty()\n-        } else {\n-            // Actually intern type lists as lists of `GenericArg`s.\n-            //\n-            // Transmuting from `Ty<'tcx>` to `GenericArg<'tcx>` is sound\n-            // as explained in ty_slice_as_generic_arg`. With this,\n-            // we guarantee that even when transmuting between `List<Ty<'tcx>>`\n-            // and `List<GenericArg<'tcx>>`, the uniqueness requirement for\n-            // lists is upheld.\n-            let substs = self._intern_substs(ty::subst::ty_slice_as_generic_args(ts));\n-            substs.try_as_type_list().unwrap()\n-        }\n-    }\n-\n-    pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {\n-        if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }\n-    }\n-\n-    pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {\n-        if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }\n-    }\n-\n-    pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {\n-        if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }\n-    }\n-\n-    pub fn intern_canonical_var_infos(\n-        self,\n-        ts: &[CanonicalVarInfo<'tcx>],\n-    ) -> CanonicalVarInfos<'tcx> {\n-        if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }\n-    }\n-\n-    pub fn intern_bound_variable_kinds(\n-        self,\n-        ts: &[ty::BoundVariableKind],\n-    ) -> &'tcx List<ty::BoundVariableKind> {\n-        if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }\n+        // Actually intern type lists as lists of `GenericArg`s.\n+        //\n+        // Transmuting from `Ty<'tcx>` to `GenericArg<'tcx>` is sound\n+        // as explained in ty_slice_as_generic_arg`. With this,\n+        // we guarantee that even when transmuting between `List<Ty<'tcx>>`\n+        // and `List<GenericArg<'tcx>>`, the uniqueness requirement for\n+        // lists is upheld.\n+        let substs = self.intern_substs(ty::subst::ty_slice_as_generic_args(ts));\n+        substs.try_as_type_list().unwrap()\n     }\n \n     // Unlike various other `mk_*` functions, this one uses `I: IntoIterator`"}]}