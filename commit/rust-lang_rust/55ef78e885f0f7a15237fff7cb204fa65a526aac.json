{"sha": "55ef78e885f0f7a15237fff7cb204fa65a526aac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZWY3OGU4ODVmMGY3YTE1MjM3ZmZmN2NiMjA0ZmE2NWE1MjZhYWM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-02T14:40:08Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-02T16:35:20Z"}, "message": "hir: add HirId to main Hir nodes", "tree": {"sha": "bf5973210ba4a4701fe53214dd161cfc59568461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf5973210ba4a4701fe53214dd161cfc59568461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ef78e885f0f7a15237fff7cb204fa65a526aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ef78e885f0f7a15237fff7cb204fa65a526aac", "html_url": "https://github.com/rust-lang/rust/commit/55ef78e885f0f7a15237fff7cb204fa65a526aac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ef78e885f0f7a15237fff7cb204fa65a526aac/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a86879515ed1677196f4d3585ec7a5935d2712", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a86879515ed1677196f4d3585ec7a5935d2712", "html_url": "https://github.com/rust-lang/rust/commit/c9a86879515ed1677196f4d3585ec7a5935d2712"}], "stats": {"total": 371, "additions": 257, "deletions": 114}, "files": [{"sha": "4ce41fec18240ed15a1036f7c83c1fd31d3967d0", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -362,7 +362,7 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n     if let hir::ItemKind::Enum(ref def, _) = item.node {\n         for variant in &def.variants {\n             match variant.node.data {\n-                hir::VariantData::Unit(_) => { /* continue */ }\n+                hir::VariantData::Unit(..) => { /* continue */ }\n                 _ => { return false; }\n             }\n         }"}, {"sha": "5f85e33fb87ee3f3eed6bde5348bef4510e3b753", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -694,7 +694,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatKind::Ref(ref subpattern, _) => {\n             visitor.visit_pat(subpattern)\n         }\n-        PatKind::Binding(_, canonical_id, ident, ref optional_subpattern) => {\n+        PatKind::Binding(_, canonical_id, _hir_id, ident, ref optional_subpattern) => {\n             visitor.visit_def_mention(Def::Local(canonical_id));\n             visitor.visit_ident(ident);\n             walk_list!(visitor, visit_pat, optional_subpattern);"}, {"sha": "e3c913313adee5a7d10f11e0cf28ecbf9b2d14df", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 179, "deletions": 78, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -741,7 +741,7 @@ impl<'a> LoweringContext<'a> {\n         let params = lifetimes_to_define\n             .into_iter()\n             .map(|(span, hir_name)| {\n-                let def_node_id = self.next_id().node_id;\n+                let LoweredNodeId { node_id, hir_id } = self.next_id();\n \n                 // Get the name we'll use to make the def-path. Note\n                 // that collisions are ok here and this shouldn't\n@@ -764,15 +764,16 @@ impl<'a> LoweringContext<'a> {\n                 // Add a definition for the in-band lifetime def.\n                 self.resolver.definitions().create_def_with_parent(\n                     parent_id.index,\n-                    def_node_id,\n+                    node_id,\n                     DefPathData::LifetimeParam(str_name),\n                     DefIndexAddressSpace::High,\n                     Mark::root(),\n                     span,\n                 );\n \n                 hir::GenericParam {\n-                    id: def_node_id,\n+                    id: node_id,\n+                    hir_id,\n                     name: hir_name,\n                     attrs: hir_vec![],\n                     bounds: hir_vec![],\n@@ -1138,8 +1139,11 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_ty_binding(&mut self, b: &TypeBinding,\n                         itctx: ImplTraitContext<'_>) -> hir::TypeBinding {\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(b.id);\n+\n         hir::TypeBinding {\n-            id: self.lower_node_id(b.id).node_id,\n+            id: node_id,\n+            hir_id,\n             ident: b.ident,\n             ty: self.lower_ty(&b.ty, itctx),\n             span: b.span,\n@@ -1261,7 +1265,7 @@ impl<'a> LoweringContext<'a> {\n                         )\n                     }\n                     ImplTraitContext::Universal(in_band_ty_params) => {\n-                        self.lower_node_id(def_node_id);\n+                        let LoweredNodeId { node_id: _, hir_id } =  self.lower_node_id(def_node_id);\n                         // Add a definition for the in-band `Param`.\n                         let def_index = self\n                             .resolver\n@@ -1277,6 +1281,7 @@ impl<'a> LoweringContext<'a> {\n                         let ident = Ident::from_str(&pprust::ty_to_string(t)).with_span_pos(span);\n                         in_band_ty_params.push(hir::GenericParam {\n                             id: def_node_id,\n+                            hir_id,\n                             name: ParamName::Plain(ident),\n                             pure_wrt_drop: false,\n                             attrs: hir_vec![],\n@@ -1368,11 +1373,13 @@ impl<'a> LoweringContext<'a> {\n         );\n \n         self.with_hir_id_owner(exist_ty_node_id, |lctx| {\n+            let LoweredNodeId { node_id, hir_id } = lctx.next_id();\n             let exist_ty_item_kind = hir::ItemKind::Existential(hir::ExistTy {\n                 generics: hir::Generics {\n                     params: lifetime_defs,\n                     where_clause: hir::WhereClause {\n-                        id: lctx.next_id().node_id,\n+                        id: node_id,\n+                        hir_id,\n                         predicates: Vec::new().into(),\n                     },\n                     span,\n@@ -1505,8 +1512,10 @@ impl<'a> LoweringContext<'a> {\n                     && !self.already_defined_lifetimes.contains(&name) {\n                     self.already_defined_lifetimes.insert(name);\n \n+                    let LoweredNodeId { node_id, hir_id } = self.context.next_id();\n                     self.output_lifetimes.push(hir::GenericArg::Lifetime(hir::Lifetime {\n-                        id: self.context.next_id().node_id,\n+                        id: node_id,\n+                        hir_id,\n                         span: lifetime.span,\n                         name,\n                     }));\n@@ -1515,7 +1524,8 @@ impl<'a> LoweringContext<'a> {\n                     // definitions will go into the explicit `existential type`\n                     // declaration and thus need to have their owner set to that item\n                     let def_node_id = self.context.sess.next_node_id();\n-                    let _ = self.context.lower_node_id_with_owner(def_node_id, self.exist_ty_id);\n+                    let LoweredNodeId { node_id: _, hir_id } =\n+                        self.context.lower_node_id_with_owner(def_node_id, self.exist_ty_id);\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n                         def_node_id,\n@@ -1539,6 +1549,7 @@ impl<'a> LoweringContext<'a> {\n \n                     self.output_lifetime_params.push(hir::GenericParam {\n                         id: def_node_id,\n+                        hir_id,\n                         name,\n                         span: lifetime.span,\n                         pure_wrt_drop: false,\n@@ -1904,6 +1915,7 @@ impl<'a> LoweringContext<'a> {\n         hir::PathSegment::new(\n             segment.ident,\n             Some(id.node_id),\n+            Some(id.hir_id),\n             Some(def),\n             generic_args,\n             infer_types,\n@@ -1950,13 +1962,15 @@ impl<'a> LoweringContext<'a> {\n                     let LoweredNodeId { node_id, hir_id } = this.next_id();\n                     hir::Ty { node: hir::TyKind::Tup(tys), id: node_id, hir_id, span }\n                 };\n+                let LoweredNodeId { node_id, hir_id } = this.next_id();\n \n                 (\n                     hir::GenericArgs {\n                         args: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n-                                id: this.next_id().node_id,\n+                                id: node_id,\n+                                hir_id,\n                                 ident: Ident::from_str(FN_OUTPUT_NAME),\n                                 ty: output\n                                     .as_ref()\n@@ -2286,20 +2300,22 @@ impl<'a> LoweringContext<'a> {\n                     let LoweredNodeId { node_id, hir_id } = this.next_id();\n                     P(hir::Ty {\n                         id: node_id,\n-                        hir_id: hir_id,\n+                        hir_id,\n                         node: hir::TyKind::Tup(hir_vec![]),\n                         span: *span,\n                     })\n                 }\n             };\n \n             // \"<Output = T>\"\n+            let LoweredNodeId { node_id, hir_id } = this.next_id();\n             let future_params = P(hir::GenericArgs {\n                 args: hir_vec![],\n                 bindings: hir_vec![hir::TypeBinding {\n                     ident: Ident::from_str(FN_OUTPUT_NAME),\n                     ty: output_ty,\n-                    id: this.next_id().node_id,\n+                    id: node_id,\n+                    hir_id,\n                     span,\n                 }],\n                 parenthesized: false,\n@@ -2325,8 +2341,9 @@ impl<'a> LoweringContext<'a> {\n             ];\n \n             if let Some((name, span)) = bound_lifetime {\n+                let LoweredNodeId { node_id, hir_id } = this.next_id();\n                 bounds.push(hir::GenericBound::Outlives(\n-                    hir::Lifetime { id: this.next_id().node_id, name, span }));\n+                    hir::Lifetime { id: node_id, hir_id, name, span }));\n             }\n \n             hir::HirVec::from(bounds)\n@@ -2393,8 +2410,11 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         name: hir::LifetimeName,\n     ) -> hir::Lifetime {\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+\n         hir::Lifetime {\n-            id: self.lower_node_id(id).node_id,\n+            id: node_id,\n+            hir_id,\n             span,\n             name: name,\n         }\n@@ -2439,6 +2459,7 @@ impl<'a> LoweringContext<'a> {\n                 };\n                 let param = hir::GenericParam {\n                     id: lt.id,\n+                    hir_id: lt.hir_id,\n                     name: param_name,\n                     span: lt.span,\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n@@ -2470,9 +2491,11 @@ impl<'a> LoweringContext<'a> {\n                                    .chain(params)\n                                    .collect();\n                 }\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(param.id);\n \n                 hir::GenericParam {\n-                    id: self.lower_node_id(param.id).node_id,\n+                    id: node_id,\n+                    hir_id,\n                     name: hir::ParamName::Plain(ident),\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n                     attrs: self.lower_attrs(&param.attrs),\n@@ -2562,8 +2585,11 @@ impl<'a> LoweringContext<'a> {\n         self.with_anonymous_lifetime_mode(\n             AnonymousLifetimeMode::ReportError,\n             |this| {\n+                let LoweredNodeId { node_id, hir_id } = this.lower_node_id(wc.id);\n+\n                 hir::WhereClause {\n-                    id: this.lower_node_id(wc.id).node_id,\n+                    id: node_id,\n+                    hir_id,\n                     predicates: wc.predicates\n                         .iter()\n                         .map(|predicate| this.lower_where_predicate(predicate))\n@@ -2622,34 +2648,53 @@ impl<'a> LoweringContext<'a> {\n                 ref lhs_ty,\n                 ref rhs_ty,\n                 span,\n-            }) => hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                id: self.lower_node_id(id).node_id,\n-                lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n-                rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n-                span,\n-            }),\n+            }) => {\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+\n+                hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n+                    id: node_id,\n+                    hir_id,\n+                    lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n+                    rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n+                    span,\n+                })\n+            },\n         }\n     }\n \n     fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData {\n         match *vdata {\n-            VariantData::Struct(ref fields, id) => hir::VariantData::Struct(\n-                fields\n-                    .iter()\n-                    .enumerate()\n-                    .map(|f| self.lower_struct_field(f))\n-                    .collect(),\n-                self.lower_node_id(id).node_id,\n-            ),\n-            VariantData::Tuple(ref fields, id) => hir::VariantData::Tuple(\n-                fields\n-                    .iter()\n-                    .enumerate()\n-                    .map(|f| self.lower_struct_field(f))\n-                    .collect(),\n-                self.lower_node_id(id).node_id,\n-            ),\n-            VariantData::Unit(id) => hir::VariantData::Unit(self.lower_node_id(id).node_id),\n+            VariantData::Struct(ref fields, id) => {\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+\n+                hir::VariantData::Struct(\n+                    fields\n+                        .iter()\n+                        .enumerate()\n+                        .map(|f| self.lower_struct_field(f))\n+                        .collect(),\n+                    node_id,\n+                    hir_id,\n+                )\n+            },\n+            VariantData::Tuple(ref fields, id) => {\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+\n+                hir::VariantData::Tuple(\n+                    fields\n+                        .iter()\n+                        .enumerate()\n+                        .map(|f| self.lower_struct_field(f))\n+                        .collect(),\n+                    node_id,\n+                    hir_id,\n+                )\n+            },\n+            VariantData::Unit(id) => {\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+\n+                hir::VariantData::Unit(node_id, hir_id)\n+            },\n         }\n     }\n \n@@ -2689,9 +2734,12 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField {\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(f.id);\n+\n         hir::StructField {\n             span: f.span,\n-            id: self.lower_node_id(f.id).node_id,\n+            id: node_id,\n+            hir_id,\n             ident: match f.ident {\n                 Some(ident) => ident,\n                 // FIXME(jseyfried): positional field hygiene\n@@ -2704,8 +2752,11 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field {\n+        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+\n         hir::Field {\n-            id: self.next_id().node_id,\n+            id: node_id,\n+            hir_id,\n             ident: f.ident,\n             expr: P(self.lower_expr(&f.expr)),\n             span: f.span,\n@@ -3463,11 +3514,13 @@ impl<'a> LoweringContext<'a> {\n             if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n                               attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n+                let hir_id = self.lower_node_id(i.id).hir_id;\n                 self.exported_macros.push(hir::MacroDef {\n                     name: ident.name,\n                     vis,\n                     attrs,\n                     id: i.id,\n+                    hir_id,\n                     span: i.span,\n                     body,\n                     legacy: def.legacy,\n@@ -3492,10 +3545,11 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem {\n-        let node_id = self.lower_node_id(i.id).node_id;\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n         let def_id = self.resolver.definitions().local_def_id(node_id);\n         hir::ForeignItem {\n             id: node_id,\n+            hir_id,\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             node: match i.node {\n@@ -3632,9 +3686,11 @@ impl<'a> LoweringContext<'a> {\n                             Some(Def::Local(id)) => id,\n                             _ => p.id,\n                         };\n+                        let hir_id = self.lower_node_id(canonical_id).hir_id;\n                         hir::PatKind::Binding(\n                             self.lower_binding_mode(binding_mode),\n                             canonical_id,\n+                            hir_id,\n                             ident,\n                             sub.as_ref().map(|x| self.lower_pat(x)),\n                         )\n@@ -3685,14 +3741,19 @@ impl<'a> LoweringContext<'a> {\n \n                 let fs = fields\n                     .iter()\n-                    .map(|f| Spanned {\n-                        span: f.span,\n-                        node: hir::FieldPat {\n-                            id: self.next_id().node_id,\n-                            ident: f.node.ident,\n-                            pat: self.lower_pat(&f.node.pat),\n-                            is_shorthand: f.node.is_shorthand,\n-                        },\n+                    .map(|f| {\n+                        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+\n+                        Spanned {\n+                            span: f.span,\n+                            node: hir::FieldPat {\n+                                id: node_id,\n+                                hir_id,\n+                                ident: f.node.ident,\n+                                pat: self.lower_pat(&f.node.pat),\n+                                is_shorthand: f.node.is_shorthand,\n+                            },\n+                        }\n                     })\n                     .collect();\n                 hir::PatKind::Struct(qpath, fs, etc)\n@@ -4347,8 +4408,10 @@ impl<'a> LoweringContext<'a> {\n                         ThinVec::new(),\n                     ))\n                 };\n+                let LoweredNodeId { node_id, hir_id } = self.next_id();\n                 let match_stmt = hir::Stmt {\n-                    id: self.next_id().node_id,\n+                    id: node_id,\n+                    hir_id,\n                     node: hir::StmtKind::Expr(match_expr),\n                     span: head_sp,\n                 };\n@@ -4374,8 +4437,10 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n+                let LoweredNodeId { node_id, hir_id } = self.next_id();\n                 let body_stmt = hir::Stmt {\n-                    id: self.next_id().node_id,\n+                    id: node_id,\n+                    hir_id,\n                     node: hir::StmtKind::Expr(body_expr),\n                     span: body.span,\n                 };\n@@ -4551,16 +4616,26 @@ impl<'a> LoweringContext<'a> {\n                 let (l, item_ids) = self.lower_local(l);\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n                     .into_iter()\n-                    .map(|item_id| hir::Stmt {\n-                        id: self.next_id().node_id,\n-                        node: hir::StmtKind::Item(P(item_id)),\n-                        span: s.span,\n+                    .map(|item_id| {\n+                        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+\n+                        hir::Stmt {\n+                            id: node_id,\n+                            hir_id,\n+                            node: hir::StmtKind::Item(P(item_id)),\n+                            span: s.span,\n+                        }\n                     })\n                     .collect();\n-                ids.push(hir::Stmt {\n-                    id: self.lower_node_id(s.id).node_id,\n-                    node: hir::StmtKind::Local(P(l)),\n-                    span: s.span,\n+                ids.push({\n+                    let LoweredNodeId { node_id, hir_id } = self.lower_node_id(s.id);\n+\n+                    hir::Stmt {\n+                        id: node_id,\n+                        hir_id,\n+                        node: hir::StmtKind::Local(P(l)),\n+                        span: s.span,\n+                    }\n                 });\n                 return ids;\n             },\n@@ -4569,24 +4644,39 @@ impl<'a> LoweringContext<'a> {\n                 let mut id = Some(s.id);\n                 return self.lower_item_id(it)\n                     .into_iter()\n-                    .map(|item_id| hir::Stmt {\n-                        id: id.take()\n-                              .map(|id| self.lower_node_id(id).node_id)\n-                              .unwrap_or_else(|| self.next_id().node_id),\n-                        node: hir::StmtKind::Item(P(item_id)),\n-                        span: s.span,\n+                    .map(|item_id| {\n+                        let LoweredNodeId { node_id, hir_id } = id.take()\n+                          .map(|id| self.lower_node_id(id))\n+                          .unwrap_or_else(|| self.next_id());\n+\n+                        hir::Stmt {\n+                            id: node_id,\n+                            hir_id,\n+                            node: hir::StmtKind::Item(P(item_id)),\n+                            span: s.span,\n+                        }\n                     })\n                     .collect();\n             }\n-            StmtKind::Expr(ref e) => hir::Stmt {\n-                id: self.lower_node_id(s.id).node_id,\n-                node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n-                span: s.span,\n+            StmtKind::Expr(ref e) => {\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(s.id);\n+\n+                hir::Stmt {\n+                    id: node_id,\n+                    hir_id,\n+                    node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n+                    span: s.span,\n+                }\n             },\n-            StmtKind::Semi(ref e) => hir::Stmt {\n-                id: self.lower_node_id(s.id).node_id,\n-                node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n-                span: s.span,\n+            StmtKind::Semi(ref e) => {\n+                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(s.id);\n+\n+                hir::Stmt {\n+                    id: node_id,\n+                    hir_id,\n+                    node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n+                    span: s.span,\n+                }\n             },\n             StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n         }]\n@@ -4697,8 +4787,11 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn field(&mut self, ident: Ident, expr: P<hir::Expr>, span: Span) -> hir::Field {\n+        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+\n         hir::Field {\n-            id: self.next_id().node_id,\n+            id: node_id,\n+            hir_id,\n             ident,\n             span,\n             expr,\n@@ -4810,8 +4903,11 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n             source,\n         };\n+\n+        let LoweredNodeId { node_id, hir_id } = self.next_id();\n         hir::Stmt {\n-            id: self.next_id().node_id,\n+            id: node_id,\n+            hir_id,\n             node: hir::StmtKind::Local(P(local)),\n             span: sp\n         }\n@@ -4906,7 +5002,7 @@ impl<'a> LoweringContext<'a> {\n         P(hir::Pat {\n             id: node_id,\n             hir_id,\n-            node: hir::PatKind::Binding(bm, node_id, ident.with_span_pos(span), None),\n+            node: hir::PatKind::Binding(bm, node_id, hir_id, ident.with_span_pos(span), None),\n             span,\n         })\n     }\n@@ -4992,8 +5088,10 @@ impl<'a> LoweringContext<'a> {\n             // `'f`.\n             AnonymousLifetimeMode::CreateParameter => {\n                 let fresh_name = self.collect_fresh_in_band_lifetime(span);\n+                let LoweredNodeId { node_id, hir_id } = self.next_id();\n                 hir::Lifetime {\n-                    id: self.next_id().node_id,\n+                    id: node_id,\n+                    hir_id,\n                     span,\n                     name: hir::LifetimeName::Param(fresh_name),\n                 }\n@@ -5093,8 +5191,11 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n+        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+\n         hir::Lifetime {\n-            id: self.next_id().node_id,\n+            id: node_id,\n+            hir_id,\n             span,\n             name: hir::LifetimeName::Implicit,\n         }"}, {"sha": "9066f2238cf2469a5e7bd96cc07f8db5409694a6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -875,7 +875,7 @@ impl<'hir> Map<'hir> {\n             Node::Field(f) => f.ident.name,\n             Node::Lifetime(lt) => lt.name.ident().name,\n             Node::GenericParam(param) => param.name.ident().name,\n-            Node::Binding(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.name,\n+            Node::Binding(&Pat { node: PatKind::Binding(_, _, _, l, _), .. }) => l.name,\n             Node::StructCtor(_) => self.name(self.get_parent(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }"}, {"sha": "924b044da5fc3f7777e02df8865c7651528a53e8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -146,6 +146,7 @@ pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n #[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub span: Span,\n \n     /// Either \"'a\", referring to a named lifetime definition,\n@@ -321,6 +322,7 @@ pub struct PathSegment {\n     // affected. (In general, we don't bother to get the defs for synthesized\n     // segments, only for segments which have come from the AST).\n     pub id: Option<NodeId>,\n+    pub hir_id: Option<HirId>,\n     pub def: Option<Def>,\n \n     /// Type/lifetime parameters attached to this path. They come in\n@@ -343,6 +345,7 @@ impl PathSegment {\n         PathSegment {\n             ident,\n             id: None,\n+            hir_id: None,\n             def: None,\n             infer_types: true,\n             args: None,\n@@ -352,13 +355,15 @@ impl PathSegment {\n     pub fn new(\n         ident: Ident,\n         id: Option<NodeId>,\n+        hir_id: Option<HirId>,\n         def: Option<Def>,\n         args: GenericArgs,\n         infer_types: bool,\n     ) -> Self {\n         PathSegment {\n             ident,\n             id,\n+            hir_id,\n             def,\n             infer_types,\n             args: if args.is_empty() {\n@@ -528,6 +533,7 @@ pub enum GenericParamKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct GenericParam {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub name: ParamName,\n     pub attrs: HirVec<Attribute>,\n     pub bounds: GenericBounds,\n@@ -558,6 +564,7 @@ impl Generics {\n             params: HirVec::new(),\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n+                hir_id: DUMMY_HIR_ID,\n                 predicates: HirVec::new(),\n             },\n             span: DUMMY_SP,\n@@ -601,6 +608,7 @@ pub enum SyntheticTyParamKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereClause {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub predicates: HirVec<WherePredicate>,\n }\n \n@@ -661,6 +669,7 @@ pub struct WhereRegionPredicate {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub span: Span,\n     pub lhs_ty: P<Ty>,\n     pub rhs_ty: P<Ty>,\n@@ -789,6 +798,7 @@ pub struct MacroDef {\n     pub vis: Visibility,\n     pub attrs: HirVec<Attribute>,\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub span: Span,\n     pub body: TokenStream,\n     pub legacy: bool,\n@@ -878,6 +888,7 @@ impl Pat {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FieldPat {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     /// The identifier for the field\n     pub ident: Ident,\n     /// The pattern the field is destructured to\n@@ -924,7 +935,7 @@ pub enum PatKind {\n     /// The `NodeId` is the canonical ID for the variable being bound,\n     /// e.g., in `Ok(x) | Err(x)`, both `x` use the same canonical ID,\n     /// which is the pattern ID of the first `x`.\n-    Binding(BindingAnnotation, NodeId, Ident, Option<P<Pat>>),\n+    Binding(BindingAnnotation, NodeId, HirId, Ident, Option<P<Pat>>),\n \n     /// A struct or struct variant pattern, e.g., `Variant {x, y, ..}`.\n     /// The `bool` is `true` in the presence of a `..`.\n@@ -1137,6 +1148,7 @@ impl UnOp {\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Stmt {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub node: StmtKind,\n     pub span: Span,\n }\n@@ -1204,6 +1216,7 @@ pub enum Guard {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Field {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub ident: Ident,\n     pub expr: P<Expr>,\n     pub span: Span,\n@@ -1711,6 +1724,7 @@ pub enum ImplItemKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeBinding {\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub ident: Ident,\n     pub ty: P<Ty>,\n     pub span: Span,\n@@ -2106,6 +2120,7 @@ pub struct StructField {\n     pub ident: Ident,\n     pub vis: Visibility,\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub ty: P<Ty>,\n     pub attrs: HirVec<Attribute>,\n }\n@@ -2131,21 +2146,30 @@ impl StructField {\n /// Id of the whole struct lives in `Item`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantData {\n-    Struct(HirVec<StructField>, NodeId),\n-    Tuple(HirVec<StructField>, NodeId),\n-    Unit(NodeId),\n+    Struct(HirVec<StructField>, NodeId, HirId),\n+    Tuple(HirVec<StructField>, NodeId, HirId),\n+    Unit(NodeId, HirId),\n }\n \n impl VariantData {\n     pub fn fields(&self) -> &[StructField] {\n         match *self {\n-            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => fields,\n+            VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => fields,\n             _ => &[],\n         }\n     }\n     pub fn id(&self) -> NodeId {\n         match *self {\n-            VariantData::Struct(_, id) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id,\n+            VariantData::Struct(_, id, ..)\n+            | VariantData::Tuple(_, id, ..)\n+            | VariantData::Unit(id, ..) => id,\n+        }\n+    }\n+    pub fn hir_id(&self) -> HirId {\n+        match *self {\n+            VariantData::Struct(_, _, hir_id)\n+            | VariantData::Tuple(_, _, hir_id)\n+            | VariantData::Unit(_, hir_id) => hir_id,\n         }\n     }\n     pub fn is_struct(&self) -> bool {\n@@ -2343,6 +2367,7 @@ pub struct ForeignItem {\n     pub attrs: HirVec<Attribute>,\n     pub node: ForeignItemKind,\n     pub id: NodeId,\n+    pub hir_id: HirId,\n     pub span: Span,\n     pub vis: Visibility,\n }"}, {"sha": "e2a03c638764d124810bcd4c2f3a14aeb9cb1b88", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -83,7 +83,7 @@ impl hir::Pat {\n         where F: FnMut(hir::BindingAnnotation, HirId, Span, ast::Ident),\n     {\n         self.walk(|p| {\n-            if let PatKind::Binding(binding_mode, _, ident, _) = p.node {\n+            if let PatKind::Binding(binding_mode, _, _, ident, _) = p.node {\n                 f(binding_mode, p.hir_id, p.span, ident);\n             }\n             true\n@@ -123,8 +123,8 @@ impl hir::Pat {\n \n     pub fn simple_ident(&self) -> Option<ast::Ident> {\n         match self.node {\n-            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, None) |\n-            PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, None) => Some(ident),\n+            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, _, ident, None) |\n+            PatKind::Binding(hir::BindingAnnotation::Mutable, _, _, ident, None) => Some(ident),\n             _ => None,\n         }\n     }"}, {"sha": "89b5b7a190df640c43081c182dad7ee7d89857fb", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -1768,7 +1768,7 @@ impl<'a> State<'a> {\n         // is that it doesn't matter\n         match pat.node {\n             PatKind::Wild => self.s.word(\"_\")?,\n-            PatKind::Binding(binding_mode, _, ident, ref sub) => {\n+            PatKind::Binding(binding_mode, _, _, ident, ref sub) => {\n                 match binding_mode {\n                     hir::BindingAnnotation::Ref => {\n                         self.word_nbsp(\"ref\")?;\n@@ -2246,6 +2246,7 @@ impl<'a> State<'a> {\n             params: hir::HirVec::new(),\n             where_clause: hir::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n+                hir_id: hir::DUMMY_HIR_ID,\n                 predicates: hir::HirVec::new(),\n             },\n             span: syntax_pos::DUMMY_SP,"}, {"sha": "1061ea752af117b73af01e74f068442ac6125f88", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -159,6 +159,7 @@ impl_stable_hash_for!(struct ast::Label {\n \n impl_stable_hash_for!(struct hir::Lifetime {\n     id,\n+    hir_id,\n     span,\n     name\n });\n@@ -172,6 +173,7 @@ impl_stable_hash_for!(struct hir::Path {\n impl_stable_hash_for!(struct hir::PathSegment {\n     ident -> (ident.name),\n     id,\n+    hir_id,\n     def,\n     infer_types,\n     args\n@@ -200,6 +202,7 @@ impl_stable_hash_for!(enum hir::TraitBoundModifier {\n \n impl_stable_hash_for!(struct hir::GenericParam {\n     id,\n+    hir_id,\n     name,\n     pure_wrt_drop,\n     attrs,\n@@ -244,6 +247,7 @@ impl_stable_hash_for!(enum hir::SyntheticTyParamKind {\n \n impl_stable_hash_for!(struct hir::WhereClause {\n     id,\n+    hir_id,\n     predicates\n });\n \n@@ -268,6 +272,7 @@ impl_stable_hash_for!(struct hir::WhereRegionPredicate {\n \n impl_stable_hash_for!(struct hir::WhereEqPredicate {\n     id,\n+    hir_id,\n     span,\n     lhs_ty,\n     rhs_ty\n@@ -285,6 +290,7 @@ impl_stable_hash_for!(struct hir::MethodSig {\n \n impl_stable_hash_for!(struct hir::TypeBinding {\n     id,\n+    hir_id,\n     ident -> (ident.name),\n     ty,\n     span\n@@ -397,6 +403,7 @@ impl_stable_hash_for!(struct hir::MacroDef {\n     vis,\n     attrs,\n     id,\n+    hir_id,\n     span,\n     legacy,\n     body\n@@ -423,6 +430,7 @@ impl_stable_hash_for_spanned!(hir::FieldPat);\n \n impl_stable_hash_for!(struct hir::FieldPat {\n     id -> _,\n+    hir_id -> _,\n     ident -> (ident.name),\n     pat,\n     is_shorthand,\n@@ -442,7 +450,7 @@ impl_stable_hash_for!(enum hir::RangeEnd {\n \n impl_stable_hash_for!(enum hir::PatKind {\n     Wild,\n-    Binding(binding_mode, var, name, sub),\n+    Binding(binding_mode, var, hir_id, name, sub),\n     Struct(path, field_pats, dotdot),\n     TupleStruct(path, field_pats, dotdot),\n     Path(path),\n@@ -485,6 +493,7 @@ impl_stable_hash_for!(enum hir::UnOp {\n \n impl_stable_hash_for!(struct hir::Stmt {\n     id,\n+    hir_id,\n     node,\n     span,\n });\n@@ -514,6 +523,7 @@ impl_stable_hash_for!(enum hir::Guard {\n \n impl_stable_hash_for!(struct hir::Field {\n     id -> _,\n+    hir_id -> _,\n     ident,\n     expr,\n     span,\n@@ -836,14 +846,15 @@ impl_stable_hash_for!(struct hir::StructField {\n     ident -> (ident.name),\n     vis,\n     id,\n+    hir_id,\n     ty,\n     attrs\n });\n \n impl_stable_hash_for!(enum hir::VariantData {\n-    Struct(fields, id),\n-    Tuple(fields, id),\n-    Unit(id)\n+    Struct(fields, id, hir_id),\n+    Tuple(fields, id, hir_id),\n+    Unit(id, hir_id)\n });\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {\n@@ -929,6 +940,7 @@ impl_stable_hash_for!(struct hir::ForeignItem {\n     attrs,\n     node,\n     id,\n+    hir_id,\n     span,\n     vis\n });"}, {"sha": "d47ad009c1db646572cdcbd5ef7efd6f0d1e3b0a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -408,7 +408,7 @@ fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n     while let Some(pat) = pats.pop_front() {\n         use hir::PatKind::*;\n         match pat.node {\n-            Binding(_, _, _, ref inner_pat) => {\n+            Binding(_, _, _, _, ref inner_pat) => {\n                 pats.extend(inner_pat.iter());\n             }\n             Struct(_, ref fields, _) => {"}, {"sha": "ea3ea59c7613f49d717961fc656a36165da23126", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -1024,7 +1024,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             Node::Variant(&hir::Variant {\n                 span,\n                 node: hir::VariantKind {\n-                    data: hir::VariantData::Tuple(ref fields, _),\n+                    data: hir::VariantData::Tuple(ref fields, ..),\n                     ..\n                 },\n                 .."}, {"sha": "f5e27a953c27de2e4a602c2acda09baa758ce1f7", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -99,7 +99,7 @@ pub fn gather_move_from_pat<'a, 'c, 'tcx: 'c>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                               cmt: &'c mc::cmt_<'tcx>) {\n     let source = get_pattern_source(bccx.tcx,move_pat);\n     let pat_span_path_opt = match move_pat.node {\n-        PatKind::Binding(_, _, ident, _) => {\n+        PatKind::Binding(_, _, _, ident, _) => {\n             Some(MovePlace {\n                      span: move_pat.span,\n                      name: ident.name,"}, {"sha": "7c25d8d8b793f7ccc04e2311fc6a9980006511f5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -191,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                     // (Issue #49588)\n                     continue;\n                 }\n-                if let PatKind::Binding(_, _, ident, None) = fieldpat.node.pat.node {\n+                if let PatKind::Binding(_, _, _, ident, None) = fieldpat.node.pat.node {\n                     if cx.tcx.find_field_index(ident, &variant) ==\n                        Some(cx.tcx.field_index(fieldpat.node.id, cx.tables)) {\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,"}, {"sha": "ae2ed28104e5b4a5aab9b91b1118eb0cc9f7605c", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n-        if let &PatKind::Binding(_, _, ident, _) = &p.node {\n+        if let &PatKind::Binding(_, _, _, ident, _) = &p.node {\n             self.check_snake_case(cx, \"variable\", &ident);\n         }\n     }"}, {"sha": "3b212f3b7472de2b8cee894a0f4adfe70dce5809", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -977,7 +977,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             let body = self.tcx.hir().body(body_id);\n             self.lazy_seq(body.arguments.iter().map(|arg| {\n                 match arg.pat.node {\n-                    PatKind::Binding(_, _, ident, _) => ident.name,\n+                    PatKind::Binding(_, _, _, ident, _) => ident.name,\n                     _ => keywords::Invalid.name(),\n                 }\n             }))"}, {"sha": "9d3ce7693ea86b22c2aaeeb86ac419beeb2d12a7", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -312,6 +312,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n                         _,\n+                        _,\n                         upvar_ident,\n                         _,\n                     ) = pat.node"}, {"sha": "f38648fda0e36355d3a4c1ba92f782b0f884140d", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -229,7 +229,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      -> Mir<'tcx>\n {\n     let span = tcx.hir().span(ctor_id);\n-    if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n+    if let hir::VariantData::Tuple(ref fields, ctor_id, _) = *v {\n         tcx.infer_ctxt().enter(|infcx| {\n             let mut mir = shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n \n@@ -671,7 +671,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 mutability: Mutability::Not,\n             };\n             if let Some(Node::Binding(pat)) = tcx_hir.find(var_node_id) {\n-                if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n+                if let hir::PatKind::Binding(_, _, _, ident, _) = pat.node {\n                     decl.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {\n                         if bm == ty::BindByValue(hir::MutMutable) {\n@@ -877,8 +877,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let mut name = None;\n             if let Some(pat) = pattern {\n                 match pat.node {\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, _)\n-                    | hir::PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, _) => {\n+                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, _, ident, _)\n+                    | hir::PatKind::Binding(hir::BindingAnnotation::Mutable, _, _, ident, _) => {\n                         name = Some(ident.name);\n                     }\n                     _ => (),"}, {"sha": "a47d64319bdc5a63336dcb98bfd28c667b6a3574", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -285,7 +285,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n     pat.walk(|p| {\n-        if let PatKind::Binding(_, _, ident, None) = p.node {\n+        if let PatKind::Binding(_, _, _, ident, None) = p.node {\n             if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n                 if bm != ty::BindByValue(hir::MutImmutable) {\n                     // Nothing to check.\n@@ -503,7 +503,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n \n     for pat in pats {\n         pat.walk(|p| {\n-            if let PatKind::Binding(_, _, _, ref sub) = p.node {\n+            if let PatKind::Binding(_, _, _, _, ref sub) = p.node {\n                 if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n                     match bm {\n                         ty::BindByValue(..) => {"}, {"sha": "6b7e14161186d0f2599830851030b6e94df0ca93", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -513,7 +513,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }\n \n-            PatKind::Binding(_, id, ident, ref sub) => {\n+            PatKind::Binding(_, id, _, ident, ref sub) => {\n                 let var_ty = self.tables.node_id_to_type(pat.hir_id);\n                 if let ty::Error = var_ty.sty {\n                     // Avoid ICE"}, {"sha": "a4f011b2e2ec9354f3d2c3fb95213c4c7d38cbed", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -80,7 +80,7 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n                               _: &'tcx hir::Generics,\n                               _: ast::NodeId,\n                               _: Span) {\n-            if let hir::VariantData::Tuple(_, node_id) = *v {\n+            if let hir::VariantData::Tuple(_, node_id, _) = *v {\n                 self.set.insert(self.tcx.hir().local_def_id(node_id));\n             }\n             intravisit::walk_struct_def(self, v)"}, {"sha": "a90d83f3f8be05042318f7b93a449466d4b56436", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.demand_eqtype_pat(pat.span, expected, rhs_ty, match_discrim_span);\n                 common_type\n             }\n-            PatKind::Binding(ba, var_id, _, ref sub) => {\n+            PatKind::Binding(ba, var_id, _, _, ref sub) => {\n                 let bm = if ba == hir::BindingAnnotation::Unannotated {\n                     def_bm\n                 } else {"}, {"sha": "3e2a9d720f1c178455b6487b99fe308e0d3839b3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -1005,7 +1005,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n \n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'gcx hir::Pat) {\n-        if let PatKind::Binding(_, _, ident, _) = p.node {\n+        if let PatKind::Binding(_, _, _, ident, _) = p.node {\n             let var_ty = self.assign(p.span, p.id, None);\n \n             if !self.fcx.tcx.features().unsized_locals {"}, {"sha": "1c8dffaf628c4ba0338bf0a4f03653e21eca7233", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -1455,11 +1455,11 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig\n             compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n         }\n \n-        StructCtor(&VariantData::Tuple(ref fields, _))\n+        StructCtor(&VariantData::Tuple(ref fields, ..))\n         | Variant(&Spanned {\n             node:\n                 hir::VariantKind {\n-                    data: VariantData::Tuple(ref fields, _),\n+                    data: VariantData::Tuple(ref fields, ..),\n                     ..\n                 },\n             .."}, {"sha": "c328dbe82e4b1017d4eec948d801cb56a28f3319", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -3692,7 +3692,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n \n     match p.node {\n         PatKind::Wild => \"_\".to_string(),\n-        PatKind::Binding(_, _, ident, _) => ident.to_string(),\n+        PatKind::Binding(_, _, _, ident, _) => ident.to_string(),\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n         PatKind::Struct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", qpath_to_string(name),\n@@ -4071,6 +4071,7 @@ where F: Fn(DefId) -> Def {\n         segments: hir::HirVec::from_vec(apb.names.iter().map(|s| hir::PathSegment {\n             ident: ast::Ident::from_str(&s),\n             id: None,\n+            hir_id: None,\n             def: None,\n             args: None,\n             infer_types: false,"}, {"sha": "2cff6bb3924fe3eb185cb307558c8ddfbcd625af", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ef78e885f0f7a15237fff7cb204fa65a526aac/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=55ef78e885f0f7a15237fff7cb204fa65a526aac", "patch": "@@ -174,6 +174,7 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n             real_name.unwrap_or(last.ident),\n             None,\n             None,\n+            None,\n             self.generics_to_path_params(generics.clone()),\n             false,\n         ));\n@@ -206,6 +207,7 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n \n                     args.push(hir::GenericArg::Lifetime(hir::Lifetime {\n                         id: ast::DUMMY_NODE_ID,\n+                        hir_id: hir::DUMMY_HIR_ID,\n                         span: DUMMY_SP,\n                         name: hir::LifetimeName::Param(name),\n                     }));"}]}