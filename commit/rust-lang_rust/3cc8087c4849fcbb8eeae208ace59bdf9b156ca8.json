{"sha": "3cc8087c4849fcbb8eeae208ace59bdf9b156ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYzgwODdjNDg0OWZjYmI4ZWVhZTIwOGFjZTU5YmRmOWIxNTZjYTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T06:52:13Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-31T00:45:51Z"}, "message": "qualify_consts: extractt 'determine_mode'.", "tree": {"sha": "289b4caa282251d0060c83c9ceea34d628f92041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289b4caa282251d0060c83c9ceea34d628f92041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc8087c4849fcbb8eeae208ace59bdf9b156ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc8087c4849fcbb8eeae208ace59bdf9b156ca8", "html_url": "https://github.com/rust-lang/rust/commit/3cc8087c4849fcbb8eeae208ace59bdf9b156ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc8087c4849fcbb8eeae208ace59bdf9b156ca8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4295eea903a9e1014ee30f82930f5ec08d888077", "url": "https://api.github.com/repos/rust-lang/rust/commits/4295eea903a9e1014ee30f82930f5ec08d888077", "html_url": "https://github.com/rust-lang/rust/commit/4295eea903a9e1014ee30f82930f5ec08d888077"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "959d21ecfadebd30b7ca9f79cb69310490655545", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3cc8087c4849fcbb8eeae208ace59bdf9b156ca8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc8087c4849fcbb8eeae208ace59bdf9b156ca8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3cc8087c4849fcbb8eeae208ace59bdf9b156ca8", "patch": "@@ -30,6 +30,7 @@ use std::fmt;\n use std::ops::{Deref, Index, IndexMut};\n use std::usize;\n \n+use rustc::hir::HirId;\n use crate::transform::{MirPass, MirSource};\n use super::promote_consts::{self, Candidate, TempState};\n \n@@ -1596,27 +1597,12 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n         }\n \n         let def_id = src.def_id();\n-        let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-        let mut const_promoted_temps = None;\n-        let mode = match tcx.hir().body_owner_kind(id) {\n-            hir::BodyOwnerKind::Closure => Mode::NonConstFn,\n-            hir::BodyOwnerKind::Fn => {\n-                if tcx.is_const_fn(def_id) {\n-                    Mode::ConstFn\n-                } else {\n-                    Mode::NonConstFn\n-                }\n-            }\n-            hir::BodyOwnerKind::Const => {\n-                const_promoted_temps = Some(tcx.mir_const_qualif(def_id).1);\n-                Mode::Const\n-            }\n-            hir::BodyOwnerKind::Static(hir::MutImmutable) => Mode::Static,\n-            hir::BodyOwnerKind::Static(hir::MutMutable) => Mode::StaticMut,\n-        };\n+        let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+\n+        let mode = determine_mode(tcx, hir_id, def_id);\n \n         debug!(\"run_pass: mode={:?}\", mode);\n-        if mode == Mode::NonConstFn || mode == Mode::ConstFn {\n+        if let Mode::NonConstFn | Mode::ConstFn = mode {\n             // This is ugly because Checker holds onto mir,\n             // which can't be mutated until its scope ends.\n             let (temps, candidates) = {\n@@ -1664,6 +1650,11 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n                 promote_consts::promote_candidates(def_id, body, tcx, temps, candidates)\n             );\n         } else {\n+            let const_promoted_temps = match mode {\n+                Mode::Const => Some(tcx.mir_const_qualif(def_id).1),\n+                _ => None,\n+            };\n+\n             if !body.control_flow_destroyed.is_empty() {\n                 let mut locals = body.vars_iter();\n                 if let Some(local) = locals.next() {\n@@ -1695,11 +1686,10 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n                     error.emit();\n                 }\n             }\n-            let promoted_temps = if mode == Mode::Const {\n+            let promoted_temps = match mode {\n                 // Already computed by `mir_const_qualif`.\n-                const_promoted_temps.unwrap()\n-            } else {\n-                Checker::new(tcx, def_id, body, mode).check_const().1\n+                Mode::Const => const_promoted_temps.unwrap(),\n+                _ => Checker::new(tcx, def_id, body, mode).check_const().1,\n             };\n \n             // In `const` and `static` everything without `StorageDead`\n@@ -1747,7 +1737,7 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n             let ty = body.return_ty();\n             tcx.infer_ctxt().enter(|infcx| {\n                 let param_env = ty::ParamEnv::empty();\n-                let cause = traits::ObligationCause::new(body.span, id, traits::SharedStatic);\n+                let cause = traits::ObligationCause::new(body.span, hir_id, traits::SharedStatic);\n                 let mut fulfillment_cx = traits::FulfillmentContext::new();\n                 fulfillment_cx.register_bound(&infcx,\n                                               param_env,\n@@ -1765,6 +1755,17 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n     }\n }\n \n+fn determine_mode(tcx: TyCtxt<'_>, hir_id: HirId, def_id: DefId) -> Mode {\n+    match tcx.hir().body_owner_kind(hir_id) {\n+        hir::BodyOwnerKind::Closure => Mode::NonConstFn,\n+        hir::BodyOwnerKind::Fn if tcx.is_const_fn(def_id) => Mode::ConstFn,\n+        hir::BodyOwnerKind::Fn => Mode::NonConstFn,\n+        hir::BodyOwnerKind::Const => Mode::Const,\n+        hir::BodyOwnerKind::Static(hir::MutImmutable) => Mode::Static,\n+        hir::BodyOwnerKind::Static(hir::MutMutable) => Mode::StaticMut,\n+    }\n+}\n+\n fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(sym::rustc_args_required_const))?;"}]}