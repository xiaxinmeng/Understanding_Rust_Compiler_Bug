{"sha": "4af76e88f3e40d44b06e58d14ba35c0f1114bcdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjc2ZTg4ZjNlNDBkNDRiMDZlNThkMTRiYTM1YzBmMTExNGJjZGQ=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-01-29T18:35:40Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-01-29T20:44:55Z"}, "message": "Add Iterator::rfind.", "tree": {"sha": "52ec55bf19ad05cd756bdef2562f88bcad83203c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ec55bf19ad05cd756bdef2562f88bcad83203c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af76e88f3e40d44b06e58d14ba35c0f1114bcdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af76e88f3e40d44b06e58d14ba35c0f1114bcdd", "html_url": "https://github.com/rust-lang/rust/commit/4af76e88f3e40d44b06e58d14ba35c0f1114bcdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af76e88f3e40d44b06e58d14ba35c0f1114bcdd/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be49e1937e25cc9c78d7758e095046563052dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be49e1937e25cc9c78d7758e095046563052dec", "html_url": "https://github.com/rust-lang/rust/commit/4be49e1937e25cc9c78d7758e095046563052dec"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "0d34e06193c8fcb143a6f2048d1a5a4d245adb6f", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4af76e88f3e40d44b06e58d14ba35c0f1114bcdd/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af76e88f3e40d44b06e58d14ba35c0f1114bcdd/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=4af76e88f3e40d44b06e58d14ba35c0f1114bcdd", "patch": "@@ -1488,6 +1488,64 @@ pub trait Iterator {\n         None\n     }\n \n+    /// Searches for an element of an iterator from the right that satisfies a predicate.\n+    ///\n+    /// `rfind()` takes a closure that returns `true` or `false`. It applies\n+    /// this closure to each element of the iterator, starting at the end, and if any\n+    /// of them return `true`, then `rfind()` returns [`Some(element)`]. If they all return\n+    /// `false`, it returns [`None`].\n+    ///\n+    /// `rfind()` is short-circuiting; in other words, it will stop processing\n+    /// as soon as the closure returns `true`.\n+    ///\n+    /// Because `rfind()` takes a reference, and many iterators iterate over\n+    /// references, this leads to a possibly confusing situation where the\n+    /// argument is a double reference. You can see this effect in the\n+    /// examples below, with `&&x`.\n+    ///\n+    /// [`Some(element)`]: ../../std/option/enum.Option.html#variant.Some\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_rfind)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// assert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n+    ///\n+    /// assert_eq!(a.iter().rfind(|&&x| x == 5), None);\n+    /// ```\n+    ///\n+    /// Stopping at the first `true`:\n+    ///\n+    /// ```\n+    /// #![feature(iter_rfind)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.rfind(|&&x| x == 2), Some(&2));\n+    ///\n+    /// // we can still use `iter`, as there are more elements.\n+    /// assert_eq!(iter.next_back(), Some(&1));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_rfind\", issue = \"0\")]\n+    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+        Self: Sized + DoubleEndedIterator,\n+        P: FnMut(&Self::Item) -> bool\n+    {\n+        for x in self.by_ref().rev() {\n+            if predicate(&x) { return Some(x) }\n+        }\n+        None\n+    }\n+\n     /// Searches for an element in an iterator, returning its index.\n     ///\n     /// `position()` takes a closure that returns `true` or `false`. It applies"}]}