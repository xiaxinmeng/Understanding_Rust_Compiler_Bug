{"sha": "e63a94fca6cf6809938b4dbcda69b2d064614129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2M2E5NGZjYTZjZjY4MDk5MzhiNGRiY2RhNjliMmQwNjQ2MTQxMjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-22T13:49:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-22T15:53:06Z"}, "message": "Rustup to rustc 1.42.0-nightly (fc5deca21 2019-12-21)", "tree": {"sha": "e4d6c208f7d31e7179b1f7099b1c44f2bb4723ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d6c208f7d31e7179b1f7099b1c44f2bb4723ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e63a94fca6cf6809938b4dbcda69b2d064614129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e63a94fca6cf6809938b4dbcda69b2d064614129", "html_url": "https://github.com/rust-lang/rust/commit/e63a94fca6cf6809938b4dbcda69b2d064614129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e63a94fca6cf6809938b4dbcda69b2d064614129/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24859948034772efeba917bccb568ec3e67c108e", "url": "https://api.github.com/repos/rust-lang/rust/commits/24859948034772efeba917bccb568ec3e67c108e", "html_url": "https://github.com/rust-lang/rust/commit/24859948034772efeba917bccb568ec3e67c108e"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "28cc04bd484ec5b6ada28b2384493816f2739ac7", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=e63a94fca6cf6809938b4dbcda69b2d064614129", "patch": "@@ -633,7 +633,7 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n                         &ty::RegionKind::ReErased,\n                         TypeAndMut {\n                             ty,\n-                            mutbl: crate::rustc::hir::Mutability::Mutable,\n+                            mutbl: crate::rustc::hir::Mutability::Mut,\n                         },\n                     ),\n                 );"}, {"sha": "d0c3385df6c14e34fa5971ea5c06e724ce7dff84", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e63a94fca6cf6809938b4dbcda69b2d064614129", "patch": "@@ -72,7 +72,7 @@ pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types:\n \n /// Is a pointer to this type a fat ptr?\n pub fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc::hir::Mutability::Immutable });\n+    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc::hir::Mutability::Not });\n     match &tcx.layout_of(ParamEnv::reveal_all().and(ptr_ty)).unwrap().abi {\n         Abi::Scalar(_) => false,\n         Abi::ScalarPair(_, _) => true,"}, {"sha": "2e40e7c4cadf62688f5d8f4364199e75642a5ce6", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=e63a94fca6cf6809938b4dbcda69b2d064614129", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n                 let type_entry = self.dwarf.unit.get_mut(type_id);\n \n-                //type_entry.set(gimli::DW_AT_mutable, AttributeValue::Flag(mutbl == rustc::hir::Mutability::MutMutable));\n+                //type_entry.set(gimli::DW_AT_mutable, AttributeValue::Flag(mutbl == rustc::hir::Mutability::Mut));\n                 type_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(pointee));\n \n                 type_id"}, {"sha": "b1e96d2ce2c089ac4d5ffbe1c1e60774289a73f3", "filename": "src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63a94fca6cf6809938b4dbcda69b2d064614129/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=e63a94fca6cf6809938b4dbcda69b2d064614129", "patch": "@@ -346,8 +346,6 @@ impl<'tcx> CPlace<'tcx> {\n     }\n \n     pub fn write_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, from: CValue<'tcx>) {\n-        use rustc::hir::Mutability::*;\n-\n         let from_ty = from.layout().ty;\n         let to_ty = self.layout().ty;\n \n@@ -357,14 +355,14 @@ impl<'tcx> CPlace<'tcx> {\n             to_ty: Ty<'tcx>,\n         ) {\n             match (&from_ty.kind, &to_ty.kind) {\n-                (ty::Ref(_, t, Immutable), ty::Ref(_, u, Immutable))\n-                | (ty::Ref(_, t, Mutable), ty::Ref(_, u, Immutable))\n-                | (ty::Ref(_, t, Mutable), ty::Ref(_, u, Mutable)) => {\n+                (ty::Ref(_, t, Mutability::Not), ty::Ref(_, u, Mutability::Not))\n+                | (ty::Ref(_, t, Mutability::Mut), ty::Ref(_, u, Mutability::Not))\n+                | (ty::Ref(_, t, Mutability::Mut), ty::Ref(_, u, Mutability::Mut)) => {\n                     assert_assignable(fx, t, u);\n                     // &mut T -> &T is allowed\n                     // &'a T -> &'b T is allowed\n                 }\n-                (ty::Ref(_, _, Immutable), ty::Ref(_, _, Mutable)) => panic!(\n+                (ty::Ref(_, _, Mutability::Not), ty::Ref(_, _, Mutability::Mut)) => panic!(\n                     \"Cant assign value of type {} to place of type {}\",\n                     from_ty, to_ty\n                 ),"}, {"sha": "e502a20db5bef37fe15f6ee0b04e52e3fcff9699", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e63a94fca6cf6809938b4dbcda69b2d064614129/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e63a94fca6cf6809938b4dbcda69b2d064614129/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=e63a94fca6cf6809938b4dbcda69b2d064614129", "patch": "@@ -52,7 +52,8 @@ $RUSTC example/alloc_example.rs --crate-type bin\n jit std_example example/std_example.rs\n \n echo \"[AOT] dst_field_align\"\n-$RUSTC example/dst-field-align.rs -Zmir-opt-level=2 --crate-name dst_field_align --crate-type bin\n+# FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n+$RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin\n ./target/out/dst_field_align\n \n echo \"[AOT] std_example\""}]}