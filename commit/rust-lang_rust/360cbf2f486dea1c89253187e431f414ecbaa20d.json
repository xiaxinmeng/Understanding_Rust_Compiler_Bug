{"sha": "360cbf2f486dea1c89253187e431f414ecbaa20d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MGNiZjJmNDg2ZGVhMWM4OTI1MzE4N2U0MzFmNDE0ZWNiYWEyMGQ=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-02-07T18:17:31Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-05-02T13:36:10Z"}, "message": "change skolemizations to use universe index\n\nThis is sort of confusing \"side step\". All it does is to change the\nrepresentation of a skolemized region. but the source of that universe\nindex is not the inference context, which is what we eventually want,\nbut rather an internal counter in the region inference context.\n\nWe'll patch that up later. But doing this now ought to help with\nconfusing diffs later.", "tree": {"sha": "dd8b152e2a6187fb672f173a9a5f5f2cecb1c8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd8b152e2a6187fb672f173a9a5f5f2cecb1c8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360cbf2f486dea1c89253187e431f414ecbaa20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360cbf2f486dea1c89253187e431f414ecbaa20d", "html_url": "https://github.com/rust-lang/rust/commit/360cbf2f486dea1c89253187e431f414ecbaa20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360cbf2f486dea1c89253187e431f414ecbaa20d/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e904d56928b20b854c26447553525b6585172d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/e904d56928b20b854c26447553525b6585172d89", "html_url": "https://github.com/rust-lang/rust/commit/e904d56928b20b854c26447553525b6585172d89"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "bfae2b8b1c2894a48c9bbe916bc49f6deaff8bf4", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=360cbf2f486dea1c89253187e431f414ecbaa20d", "patch": "@@ -48,7 +48,7 @@ pub struct RegionConstraintCollector<'tcx> {\n     glbs: CombineMap<'tcx>,\n \n     /// Number of skolemized variables currently active.\n-    skolemization_count: u32,\n+    skolemization_count: ty::UniverseIndex,\n \n     /// Global counter used during the GLB algorithm to create unique\n     /// names for fresh bound regions\n@@ -233,7 +233,7 @@ type CombineMap<'tcx> = FxHashMap<TwoRegions<'tcx>, RegionVid>;\n pub struct RegionSnapshot {\n     length: usize,\n     region_snapshot: ut::Snapshot<ut::InPlace<ty::RegionVid>>,\n-    skolemization_count: u32,\n+    skolemization_count: ty::UniverseIndex,\n }\n \n /// When working with skolemized regions, we often wish to find all of\n@@ -277,7 +277,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data: RegionConstraintData::default(),\n             lubs: FxHashMap(),\n             glbs: FxHashMap(),\n-            skolemization_count: 0,\n+            skolemization_count: ty::UniverseIndex::ROOT,\n             bound_count: 0,\n             undo_log: Vec::new(),\n             unification_table: ut::UnificationTable::new(),\n@@ -329,7 +329,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             unification_table,\n         } = self;\n \n-        assert_eq!(*skolemization_count, 0);\n+        assert_eq!(*skolemization_count, ty::UniverseIndex::ROOT);\n \n         // Clear the tables of (lubs, glbs), so that we will create\n         // fresh regions if we do a LUB operation. As it happens,\n@@ -375,7 +375,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n             self.skolemization_count == snapshot.skolemization_count,\n-            \"failed to pop skolemized regions: {} now vs {} at start\",\n+            \"failed to pop skolemized regions: {:?} now vs {:?} at start\",\n             self.skolemization_count,\n             snapshot.skolemization_count\n         );\n@@ -485,9 +485,9 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n \n-        let sc = self.skolemization_count;\n-        self.skolemization_count = sc + 1;\n-        tcx.mk_region(ReSkolemized(ty::SkolemizedRegionVid { index: sc }, br))\n+        let universe = self.skolemization_count.subuniverse();\n+        self.skolemization_count = universe;\n+        tcx.mk_region(ReSkolemized(universe, br))\n     }\n \n     /// Removes all the edges to/from the skolemized regions that are\n@@ -505,34 +505,34 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n-            self.skolemization_count as usize >= skols.len(),\n+            self.skolemization_count.as_usize() >= skols.len(),\n             \"popping more skolemized variables than actually exist, \\\n-             sc now = {}, skols.len = {}\",\n+             sc now = {:?}, skols.len = {:?}\",\n             self.skolemization_count,\n             skols.len()\n         );\n \n-        let last_to_pop = self.skolemization_count;\n-        let first_to_pop = last_to_pop - (skols.len() as u32);\n+        let last_to_pop = self.skolemization_count.subuniverse();\n+        let first_to_pop = ty::UniverseIndex::from(last_to_pop.as_u32() - skols.len() as u32);\n \n         assert!(\n             first_to_pop >= snapshot.skolemization_count,\n             \"popping more regions than snapshot contains, \\\n-             sc now = {}, sc then = {}, skols.len = {}\",\n+             sc now = {:?}, sc then = {:?}, skols.len = {:?}\",\n             self.skolemization_count,\n             snapshot.skolemization_count,\n             skols.len()\n         );\n         debug_assert! {\n             skols.iter()\n                  .all(|&k| match *k {\n-                     ty::ReSkolemized(index, _) =>\n-                         index.index >= first_to_pop &&\n-                         index.index < last_to_pop,\n+                     ty::ReSkolemized(universe, _) =>\n+                         universe >= first_to_pop &&\n+                         universe < last_to_pop,\n                      _ =>\n                          false\n                  }),\n-            \"invalid skolemization keys or keys out of range ({}..{}): {:?}\",\n+            \"invalid skolemization keys or keys out of range ({:?}..{:?}): {:?}\",\n             snapshot.skolemization_count,\n             self.skolemization_count,\n             skols\n@@ -867,7 +867,7 @@ impl fmt::Debug for RegionSnapshot {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             f,\n-            \"RegionSnapshot(length={},skolemization={})\",\n+            \"RegionSnapshot(length={},skolemization={:?})\",\n             self.length,\n             self.skolemization_count\n         )"}, {"sha": "c4fe112a9e913206ffbd1466d14cb9f390972bcf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=360cbf2f486dea1c89253187e431f414ecbaa20d", "patch": "@@ -69,7 +69,7 @@ pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const};\n pub use self::sty::{BoundRegion, EarlyBoundRegion, FreeRegion, Region};\n pub use self::sty::RegionKind;\n-pub use self::sty::{TyVid, IntVid, FloatVid, RegionVid, SkolemizedRegionVid};\n+pub use self::sty::{TyVid, IntVid, FloatVid, RegionVid};\n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n pub use self::sty::RegionKind::*;\n@@ -1370,7 +1370,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// type name in a non-zero universe is a skolemized type -- an\n /// idealized representative of \"types in general\" that we use for\n /// checking generic functions.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct UniverseIndex(u32);\n \n impl UniverseIndex {\n@@ -1390,7 +1390,21 @@ impl UniverseIndex {\n     /// region `'a`, but that region was not nameable from `U` because\n     /// it was not in scope there.\n     pub fn subuniverse(self) -> UniverseIndex {\n-        UniverseIndex(self.0 + 1)\n+        UniverseIndex(self.0.checked_add(1).unwrap())\n+    }\n+\n+    pub fn as_u32(&self) -> u32 {\n+        self.0\n+    }\n+\n+    pub fn as_usize(&self) -> usize {\n+        self.0 as usize\n+    }\n+}\n+\n+impl From<u32> for UniverseIndex {\n+    fn from(index: u32) -> Self {\n+        UniverseIndex(index)\n     }\n }\n "}, {"sha": "382db571b524eea6bdad0f09c15aa4977661edde", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=360cbf2f486dea1c89253187e431f414ecbaa20d", "patch": "@@ -1021,7 +1021,7 @@ pub enum RegionKind {\n \n     /// A skolemized region - basically the higher-ranked version of ReFree.\n     /// Should not exist after typeck.\n-    ReSkolemized(SkolemizedRegionVid, BoundRegion),\n+    ReSkolemized(ty::UniverseIndex, BoundRegion),\n \n     /// Empty lifetime is for data that is never accessed.\n     /// Bottom in the region lattice. We treat ReEmpty somewhat\n@@ -1075,11 +1075,6 @@ newtype_index!(RegionVid\n         DEBUG_FORMAT = custom,\n     });\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n-pub struct SkolemizedRegionVid {\n-    pub index: u32,\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum InferTy {\n     TyVar(TyVid),"}, {"sha": "894a18b79ccb2ad8916312e3a1921224c4db663a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360cbf2f486dea1c89253187e431f414ecbaa20d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=360cbf2f486dea1c89253187e431f414ecbaa20d", "patch": "@@ -808,8 +808,8 @@ define_print! {\n                     write!(f, \"'?{}\", c.index())\n                 }\n \n-                ty::ReSkolemized(id, ref bound_region) => {\n-                    write!(f, \"ReSkolemized({}, {:?})\", id.index, bound_region)\n+                ty::ReSkolemized(universe, ref bound_region) => {\n+                    write!(f, \"ReSkolemized({:?}, {:?})\", universe, bound_region)\n                 }\n \n                 ty::ReEmpty => write!(f, \"ReEmpty\"),"}]}