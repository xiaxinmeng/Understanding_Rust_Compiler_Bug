{"sha": "0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNTZmZjJhMDJiNWQ0OTAwNThmOWVhMmU2ZGE4ZDlmNDQ4NTljMGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-02T13:00:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T13:00:07Z"}, "message": "Merge #9758\n\n9758: internal: explain that we don't `ref` in style.md r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2ff0abc5e29624ba33c96ded3f72735e832ce928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff0abc5e29624ba33c96ded3f72735e832ce928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhB+xXCRBK7hj4Ov3rIwAAJzsIAKgR6wWoJDQmHe8hrMVgNxHW\nBLON9Xlk0GgfM/uAYhjnTKvQSWCy1syh8c1r18GqR5xZT+x2LYSwnJTiQGjVTUDd\nDorgH0iohd/8vxzdnBPf4hbRlzYKU3Uxm9jbPtA06FBI/KDf6TMmHwUOxKxZml1b\n5nvn1x6PJ+O/6jpJMTkVNV3q981MyxqDEVrlLQ1HPbx+lBMdnjMiSPe0DxwtKlKr\nQjCcWaFl8rh6fcxe1vC6bFJ/G8Gx3U1PlrSQHLQlkk2ilckzMAY4+6WLtSiFf0t/\n2PAqE4O1bOQWb0xrtIhN3RWgbPOOBMsq2JOHg7Lq3cf6rgY3eD5Tlzefd1HYCx4=\n=PFKO\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ff0abc5e29624ba33c96ded3f72735e832ce928\nparent d6f2352a084ad405f1380c7b9389aa8ddf326760\nparent 12d7f5b56e23d2d62884e941fa81937ce8799960\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627909207 +0000\ncommitter GitHub <noreply@github.com> 1627909207 +0000\n\nMerge #9758\n\n9758: internal: explain that we don't `ref` in style.md r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "html_url": "https://github.com/rust-lang/rust/commit/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f2352a084ad405f1380c7b9389aa8ddf326760", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2352a084ad405f1380c7b9389aa8ddf326760", "html_url": "https://github.com/rust-lang/rust/commit/d6f2352a084ad405f1380c7b9389aa8ddf326760"}, {"sha": "12d7f5b56e23d2d62884e941fa81937ce8799960", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d7f5b56e23d2d62884e941fa81937ce8799960", "html_url": "https://github.com/rust-lang/rust/commit/12d7f5b56e23d2d62884e941fa81937ce8799960"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "76a7f75b7a3eb5fb70614847117bae58fcba80cf", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -217,7 +217,7 @@ impl Crate {\n \n         let doc_url = doc_attr_q.tt_values().map(|tt| {\n             let name = tt.token_trees.iter()\n-                .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident{text: ref ident, ..})) if ident == \"html_root_url\"))\n+                .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident { text, ..} )) if text == \"html_root_url\"))\n                 .nth(2);\n \n             match name {\n@@ -2397,9 +2397,9 @@ impl Type {\n     }\n \n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n-        let (variant_id, substs) = match *self.ty.kind(&Interner) {\n-            TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),\n-            TyKind::Adt(hir_ty::AdtId(AdtId::UnionId(u)), ref substs) => (u.into(), substs),\n+        let (variant_id, substs) = match self.ty.kind(&Interner) {\n+            TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), substs) => ((*s).into(), substs),\n+            TyKind::Adt(hir_ty::AdtId(AdtId::UnionId(u)), substs) => ((*u).into(), substs),\n             _ => return Vec::new(),\n         };\n "}, {"sha": "0ef046e4690916ed89bcd5f493dc0c84eaa80cd9", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -615,7 +615,7 @@ impl DocsRangeMap {\n \n         let relative_range = range - line_docs_range.start();\n \n-        let &InFile { file_id, value: ref source } = &self.source_map.source_of_id(idx);\n+        let InFile { file_id, value: source } = self.source_map.source_of_id(idx);\n         match source {\n             Either::Left(_) => None, // FIXME, figure out a nice way to handle doc attributes here\n             // as well as for whats done in syntax highlight doc injection"}, {"sha": "cd1a6c6864f67917e11ef3ae7539efa7d168bcc2", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -479,7 +479,8 @@ impl Scope {\n                     });\n                 }\n             }\n-            &Scope::GenericParams { ref params, def: parent } => {\n+            Scope::GenericParams { params, def: parent } => {\n+                let parent = *parent;\n                 for (local_id, param) in params.types.iter() {\n                     if let Some(ref name) = param.name {\n                         let id = TypeParamId { parent, local_id };"}, {"sha": "9a6d5e082babd8edd2f1a1ee60731cbd42169f10", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -376,12 +376,12 @@ impl ExprValidator {\n         };\n \n         let (params, required) = match mismatch.expected.kind(&Interner) {\n-            TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), ref parameters)\n+            TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), parameters)\n                 if *enum_id == core_result_enum =>\n             {\n                 (parameters, \"Ok\".to_string())\n             }\n-            TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), ref parameters)\n+            TyKind::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), parameters)\n                 if *enum_id == core_option_enum =>\n             {\n                 (parameters, \"Some\".to_string())"}, {"sha": "3f7455959d763779e5311901c95805111f643c8f", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -381,12 +381,13 @@ impl HirDisplay for Ty {\n                     TyKind::Dyn(dyn_ty) if dyn_ty.bounds.skip_binders().interned().len() > 1 => {\n                         dyn_ty.bounds.skip_binders().interned().iter().cloned().collect()\n                     }\n-                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n+                    TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n                         opaque_ty_id,\n-                        substitution: ref parameters,\n+                        substitution: parameters,\n                     }))\n-                    | &TyKind::OpaqueType(opaque_ty_id, ref parameters) => {\n-                        let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty_id.into());\n+                    | TyKind::OpaqueType(opaque_ty_id, parameters) => {\n+                        let impl_trait_id =\n+                            f.db.lookup_intern_impl_trait_id((*opaque_ty_id).into());\n                         if let ImplTraitId::ReturnTypeImplTrait(func, idx) = impl_trait_id {\n                             datas =\n                                 f.db.return_type_impl_traits(func)"}, {"sha": "df438d2ac4c333715818e02554f1d3315448b47b", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -132,15 +132,15 @@ impl<'a> InferenceContext<'a> {\n         let expected = expected;\n \n         let ty = match &body[pat] {\n-            &Pat::Tuple { ref args, ellipsis } => {\n+            Pat::Tuple { args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n                     Some(parameters) => &*parameters.as_slice(&Interner),\n                     _ => &[],\n                 };\n \n                 let ((pre, post), n_uncovered_patterns) = match ellipsis {\n                     Some(idx) => {\n-                        (args.split_at(idx), expectations.len().saturating_sub(args.len()))\n+                        (args.split_at(*idx), expectations.len().saturating_sub(args.len()))\n                     }\n                     None => ((&args[..], &[][..]), 0),\n                 };\n@@ -157,7 +157,7 @@ impl<'a> InferenceContext<'a> {\n                 TyKind::Tuple(inner_tys.len(), Substitution::from_iter(&Interner, inner_tys))\n                     .intern(&Interner)\n             }\n-            Pat::Or(ref pats) => {\n+            Pat::Or(pats) => {\n                 if let Some((first_pat, rest)) = pats.split_first() {\n                     let ty = self.infer_pat(*first_pat, &expected, default_bm);\n                     for pat in rest {"}, {"sha": "b7b4bd8fbee6d6e749fb10dbe9d677bfe5b86ae1", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -133,12 +133,12 @@ pub(crate) fn annotations(\n }\n \n pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation) -> Annotation {\n-    match annotation.kind {\n-        AnnotationKind::HasImpls { position, ref mut data } => {\n-            *data = goto_implementation(db, position).map(|range| range.info);\n+    match &mut annotation.kind {\n+        AnnotationKind::HasImpls { position, data } => {\n+            *data = goto_implementation(db, *position).map(|range| range.info);\n         }\n-        AnnotationKind::HasReferences { position, ref mut data } => {\n-            *data = find_all_refs(&Semantics::new(db), position, None).map(|result| {\n+        AnnotationKind::HasReferences { position, data } => {\n+            *data = find_all_refs(&Semantics::new(db), *position, None).map(|result| {\n                 result\n                     .references\n                     .into_iter()"}, {"sha": "d5340e2b8e38a9cbc7a940e21b14ddc2cf6799a0", "filename": "docs/dev/style.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "patch": "@@ -915,6 +915,15 @@ if let Some(expected_type) = ctx.expected_type.as_ref() {\n **Rationale:** `match` is almost always more compact.\n The `else` branch can get a more precise pattern: `None` or `Err(_)` instead of `_`.\n \n+## Match Ergonomics\n+\n+Don't use the `ref` keyword.\n+\n+**Rationale:** consistency & simplicity.\n+`ref` was required before [match ergonomics](https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md).\n+Today, it is redundant.\n+Between `ref` and mach ergonomics, the latter is more ergonomic in most cases, and is simpler (does not require a keyword).\n+\n ## Helper Functions\n \n Avoid creating singe-use helper functions:"}]}