{"sha": "b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMzU0N2JhYzEzMDFkYTBhMDUzZTFlNzNhNTkxZWJkYjBjY2QxY2E=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-26T13:33:45Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-26T13:33:45Z"}, "message": "syntax: ViewItemUse no longer contains multiple view paths.\n\nit reflected the obsolete syntax `use a, b, c;` and did not make\npast the parser (though it was a non-fatal error so we can continue).\nthis legacy affected many portions of rustc and rustdoc as well,\nso this commit cleans them up altogether.", "tree": {"sha": "4548245ecf0084513ef81ac742441400cb363878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4548245ecf0084513ef81ac742441400cb363878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "html_url": "https://github.com/rust-lang/rust/commit/b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea4909a8713a54b3c47e871a70baf6c722999a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea4909a8713a54b3c47e871a70baf6c722999a3", "html_url": "https://github.com/rust-lang/rust/commit/eea4909a8713a54b3c47e871a70baf6c722999a3"}], "stats": {"total": 397, "additions": 187, "deletions": 210}, "files": [{"sha": "f9d2ac5afd8841c05f467b4501cd4b035af4414a", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -130,16 +130,14 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) {\n         match i.node {\n-            ast::ViewItemUse(ref paths) => {\n-                for path in paths.iter() {\n-                    match path.node {\n-                        ast::ViewPathGlob(..) => {\n-                            self.gate_feature(\"globs\", path.span,\n-                                              \"glob import statements are \\\n-                                               experimental and possibly buggy\");\n-                        }\n-                        _ => {}\n+            ast::ViewItemUse(ref path) => {\n+                match path.node {\n+                    ast::ViewPathGlob(..) => {\n+                        self.gate_feature(\"globs\", path.span,\n+                                          \"glob import statements are \\\n+                                           experimental and possibly buggy\");\n                     }\n+                    _ => {}\n                 }\n             }\n             ast::ViewItemExternCrate(..) => {"}, {"sha": "7f4c560c146a12f0d0ffe91c9f0b26b734d9e27a", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -166,7 +166,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n \n         let vp = @codemap::dummy_spanned(ast::ViewPathGlob(prelude_path, ast::DUMMY_NODE_ID));\n         let vi2 = ast::ViewItem {\n-            node: ast::ViewItemUse(vec!(vp)),\n+            node: ast::ViewItemUse(vp),\n             attrs: Vec::new(),\n             vis: ast::Inherited,\n             span: DUMMY_SP,"}, {"sha": "34d09ffba95da0480fef791934df99eaf2b4764f", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -299,9 +299,9 @@ fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n     let id_test = token::str_to_ident(\"test\");\n     let (vi, vis) = if cx.is_test_crate {\n         (ast::ViewItemUse(\n-            vec!(@nospan(ast::ViewPathSimple(id_test,\n-                                             path_node(vec!(id_test)),\n-                                             ast::DUMMY_NODE_ID)))),\n+            @nospan(ast::ViewPathSimple(id_test,\n+                                        path_node(vec!(id_test)),\n+                                        ast::DUMMY_NODE_ID))),\n          ast::Public)\n     } else {\n         (ast::ViewItemExternCrate(id_test,"}, {"sha": "6d79fe1f3be0fd87d4f45ec3dc3c4d4e894aad29", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -872,26 +872,24 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n     fn visit_view_item(&mut self, a: &ast::ViewItem, _: ()) {\n         match a.node {\n             ast::ViewItemExternCrate(..) => {}\n-            ast::ViewItemUse(ref uses) => {\n-                for vpath in uses.iter() {\n-                    match vpath.node {\n-                        ast::ViewPathSimple(..) | ast::ViewPathGlob(..) => {}\n-                        ast::ViewPathList(_, ref list, _) => {\n-                            for pid in list.iter() {\n-                                debug!(\"privacy - list {}\", pid.node.id);\n-                                let seg = ast::PathSegment {\n-                                    identifier: pid.node.name,\n-                                    lifetimes: Vec::new(),\n-                                    types: OwnedSlice::empty(),\n-                                };\n-                                let segs = vec!(seg);\n-                                let path = ast::Path {\n-                                    global: false,\n-                                    span: pid.span,\n-                                    segments: segs,\n-                                };\n-                                self.check_path(pid.span, pid.node.id, &path);\n-                            }\n+            ast::ViewItemUse(ref vpath) => {\n+                match vpath.node {\n+                    ast::ViewPathSimple(..) | ast::ViewPathGlob(..) => {}\n+                    ast::ViewPathList(_, ref list, _) => {\n+                        for pid in list.iter() {\n+                            debug!(\"privacy - list {}\", pid.node.id);\n+                            let seg = ast::PathSegment {\n+                                identifier: pid.node.name,\n+                                lifetimes: Vec::new(),\n+                                types: OwnedSlice::empty(),\n+                            };\n+                            let segs = vec!(seg);\n+                            let path = ast::Path {\n+                                global: false,\n+                                span: pid.span,\n+                                segments: segs,\n+                            };\n+                            self.check_path(pid.span, pid.node.id, &path);\n                         }\n                     }\n                 }"}, {"sha": "cd6cd48508d73ac132d5fd67b38cc558db3e8f24", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 71, "deletions": 75, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -1417,72 +1417,70 @@ impl<'a> Resolver<'a> {\n     fn build_reduced_graph_for_view_item(&mut self, view_item: &ViewItem,\n                                          parent: ReducedGraphParent) {\n         match view_item.node {\n-            ViewItemUse(ref view_paths) => {\n-                for view_path in view_paths.iter() {\n-                    // Extract and intern the module part of the path. For\n-                    // globs and lists, the path is found directly in the AST;\n-                    // for simple paths we have to munge the path a little.\n-\n-                    let mut module_path = Vec::new();\n-                    match view_path.node {\n-                        ViewPathSimple(_, ref full_path, _) => {\n-                            let path_len = full_path.segments.len();\n-                            assert!(path_len != 0);\n-\n-                            for (i, segment) in full_path.segments\n-                                                         .iter()\n-                                                         .enumerate() {\n-                                if i != path_len - 1 {\n-                                    module_path.push(segment.identifier)\n-                                }\n-                            }\n-                        }\n-\n-                        ViewPathGlob(ref module_ident_path, _) |\n-                        ViewPathList(ref module_ident_path, _, _) => {\n-                            for segment in module_ident_path.segments.iter() {\n+            ViewItemUse(ref view_path) => {\n+                // Extract and intern the module part of the path. For\n+                // globs and lists, the path is found directly in the AST;\n+                // for simple paths we have to munge the path a little.\n+\n+                let mut module_path = Vec::new();\n+                match view_path.node {\n+                    ViewPathSimple(_, ref full_path, _) => {\n+                        let path_len = full_path.segments.len();\n+                        assert!(path_len != 0);\n+\n+                        for (i, segment) in full_path.segments\n+                                                     .iter()\n+                                                     .enumerate() {\n+                            if i != path_len - 1 {\n                                 module_path.push(segment.identifier)\n                             }\n                         }\n                     }\n \n-                    // Build up the import directives.\n-                    let module_ = parent.module();\n-                    let is_public = view_item.vis == ast::Public;\n-                    match view_path.node {\n-                        ViewPathSimple(binding, ref full_path, id) => {\n-                            let source_ident =\n-                                full_path.segments.last().unwrap().identifier;\n-                            let subclass = SingleImport(binding,\n-                                                        source_ident);\n-                            self.build_import_directive(&*module_,\n-                                                        module_path,\n-                                                        subclass,\n-                                                        view_path.span,\n-                                                        id,\n-                                                        is_public);\n+                    ViewPathGlob(ref module_ident_path, _) |\n+                    ViewPathList(ref module_ident_path, _, _) => {\n+                        for segment in module_ident_path.segments.iter() {\n+                            module_path.push(segment.identifier)\n                         }\n-                        ViewPathList(_, ref source_idents, _) => {\n-                            for source_ident in source_idents.iter() {\n-                                let name = source_ident.node.name;\n-                                self.build_import_directive(\n-                                    &*module_,\n-                                    module_path.clone(),\n-                                    SingleImport(name, name),\n-                                    source_ident.span,\n-                                    source_ident.node.id,\n-                                    is_public);\n-                            }\n-                        }\n-                        ViewPathGlob(_, id) => {\n-                            self.build_import_directive(&*module_,\n-                                                        module_path,\n-                                                        GlobImport,\n-                                                        view_path.span,\n-                                                        id,\n-                                                        is_public);\n+                    }\n+                }\n+\n+                // Build up the import directives.\n+                let module_ = parent.module();\n+                let is_public = view_item.vis == ast::Public;\n+                match view_path.node {\n+                    ViewPathSimple(binding, ref full_path, id) => {\n+                        let source_ident =\n+                            full_path.segments.last().unwrap().identifier;\n+                        let subclass = SingleImport(binding,\n+                                                    source_ident);\n+                        self.build_import_directive(&*module_,\n+                                                    module_path,\n+                                                    subclass,\n+                                                    view_path.span,\n+                                                    id,\n+                                                    is_public);\n+                    }\n+                    ViewPathList(_, ref source_idents, _) => {\n+                        for source_ident in source_idents.iter() {\n+                            let name = source_ident.node.name;\n+                            self.build_import_directive(\n+                                &*module_,\n+                                module_path.clone(),\n+                                SingleImport(name, name),\n+                                source_ident.span,\n+                                source_ident.node.id,\n+                                is_public);\n                         }\n                     }\n+                    ViewPathGlob(_, id) => {\n+                        self.build_import_directive(&*module_,\n+                                                    module_path,\n+                                                    GlobImport,\n+                                                    view_path.span,\n+                                                    id,\n+                                                    is_public);\n+                    }\n                 }\n             }\n \n@@ -5226,23 +5224,21 @@ impl<'a> Resolver<'a> {\n \n         match vi.node {\n             ViewItemExternCrate(..) => {} // ignore\n-            ViewItemUse(ref path) => {\n-                for p in path.iter() {\n-                    match p.node {\n-                        ViewPathSimple(_, _, id) => self.finalize_import(id, p.span),\n-                        ViewPathList(_, ref list, _) => {\n-                            for i in list.iter() {\n-                                self.finalize_import(i.node.id, i.span);\n-                            }\n-                        },\n-                        ViewPathGlob(_, id) => {\n-                            if !self.used_imports.contains(&(id, TypeNS)) &&\n-                               !self.used_imports.contains(&(id, ValueNS)) {\n-                                self.session.add_lint(UnusedImports, id, p.span,\n-                                                      \"unused import\".to_owned());\n-                            }\n-                        },\n-                    }\n+            ViewItemUse(ref p) => {\n+                match p.node {\n+                    ViewPathSimple(_, _, id) => self.finalize_import(id, p.span),\n+                    ViewPathList(_, ref list, _) => {\n+                        for i in list.iter() {\n+                            self.finalize_import(i.node.id, i.span);\n+                        }\n+                    },\n+                    ViewPathGlob(_, id) => {\n+                        if !self.used_imports.contains(&(id, TypeNS)) &&\n+                           !self.used_imports.contains(&(id, ValueNS)) {\n+                            self.session.add_lint(UnusedImports, id, p.span,\n+                                                  \"unused import\".to_owned());\n+                        }\n+                    },\n                 }\n             }\n         }"}, {"sha": "c6c117e02bec622c36fbb4db36eb444c5041f305", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -1085,7 +1085,7 @@ impl Clean<Item> for ast::ViewItem {\n #[deriving(Clone, Encodable, Decodable)]\n pub enum ViewItemInner {\n     ExternCrate(~str, Option<~str>, ast::NodeId),\n-    Import(Vec<ViewPath>)\n+    Import(ViewPath)\n }\n \n impl Clean<ViewItemInner> for ast::ViewItem_ {\n@@ -1099,7 +1099,7 @@ impl Clean<ViewItemInner> for ast::ViewItem_ {\n                 ExternCrate(i.clean(), string, *id)\n             }\n             &ast::ViewItemUse(ref vp) => {\n-                Import(vp.clean().move_iter().collect())\n+                Import(vp.clean())\n             }\n         }\n     }"}, {"sha": "4840efcc4b1a9bc2d95eadf76bbc984614e5eecd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -1165,12 +1165,10 @@ fn item_module(w: &mut Writer, cx: &Context,\n                         try!(write!(w, \";</code></td></tr>\"));\n                     }\n \n-                    clean::Import(ref imports) => {\n-                        for import in imports.iter() {\n-                            try!(write!(w, \"<tr><td><code>{}{}</code></td></tr>\",\n-                                          VisSpace(myitem.visibility),\n-                                          *import));\n-                        }\n+                    clean::Import(ref import) => {\n+                        try!(write!(w, \"<tr><td><code>{}{}</code></td></tr>\",\n+                                      VisSpace(myitem.visibility),\n+                                      *import));\n                     }\n                 }\n "}, {"sha": "c4afdc35a105bf275b190ac3e7128b82127f1932", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -133,14 +133,12 @@ impl<'a> RustdocVisitor<'a> {\n             return om.view_items.push(item.clone());\n         }\n         let item = match item.node {\n-            ast::ViewItemUse(ref paths) => {\n-                // rustc no longer supports \"use foo, bar;\"\n-                assert_eq!(paths.len(), 1);\n-                match self.visit_view_path(*paths.get(0), om) {\n+            ast::ViewItemUse(ref vpath) => {\n+                match self.visit_view_path(*vpath, om) {\n                     None => return,\n                     Some(path) => {\n                         ast::ViewItem {\n-                            node: ast::ViewItemUse(vec!(path)),\n+                            node: ast::ViewItemUse(path),\n                             .. item.clone()\n                         }\n                     }"}, {"sha": "9c9560e6dead6a164ba4b5071dc1edb59fadc4b0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -1003,7 +1003,7 @@ pub enum ViewItem_ {\n     // (containing arbitrary characters) from which to fetch the crate sources\n     // For example, extern crate whatever = \"github.com/mozilla/rust\"\n     ViewItemExternCrate(Ident, Option<(InternedString,StrStyle)>, NodeId),\n-    ViewItemUse(Vec<@ViewPath> ),\n+    ViewItemUse(@ViewPath),\n }\n \n // Meta-data associated with an item"}, {"sha": "cdae6e663b8056cf4915a10388afa8aea4fde80d", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -407,18 +407,16 @@ impl<'a, O: IdVisitingOperation> Visitor<()> for IdVisitor<'a, O> {\n             ViewItemExternCrate(_, _, node_id) => {\n                 self.operation.visit_id(node_id)\n             }\n-            ViewItemUse(ref view_paths) => {\n-                for view_path in view_paths.iter() {\n-                    match view_path.node {\n-                        ViewPathSimple(_, _, node_id) |\n-                        ViewPathGlob(_, node_id) => {\n-                            self.operation.visit_id(node_id)\n-                        }\n-                        ViewPathList(_, ref paths, node_id) => {\n-                            self.operation.visit_id(node_id);\n-                            for path in paths.iter() {\n-                                self.operation.visit_id(path.node.id)\n-                            }\n+            ViewItemUse(ref view_path) => {\n+                match view_path.node {\n+                    ViewPathSimple(_, _, node_id) |\n+                    ViewPathGlob(_, node_id) => {\n+                        self.operation.visit_id(node_id)\n+                    }\n+                    ViewPathList(_, ref paths, node_id) => {\n+                        self.operation.visit_id(node_id);\n+                        for path in paths.iter() {\n+                            self.operation.visit_id(path.node.id)\n                         }\n                     }\n                 }"}, {"sha": "dbf3c75401ce3c5d0c05878b9110a420730e2cba", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -246,7 +246,7 @@ pub trait AstBuilder {\n                        -> @ast::MetaItem;\n \n     fn view_use(&self, sp: Span,\n-                vis: ast::Visibility, vp: Vec<@ast::ViewPath> ) -> ast::ViewItem;\n+                vis: ast::Visibility, vp: @ast::ViewPath) -> ast::ViewItem;\n     fn view_use_simple(&self, sp: Span, vis: ast::Visibility, path: ast::Path) -> ast::ViewItem;\n     fn view_use_simple_(&self, sp: Span, vis: ast::Visibility,\n                         ident: ast::Ident, path: ast::Path) -> ast::ViewItem;\n@@ -949,7 +949,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn view_use(&self, sp: Span,\n-                vis: ast::Visibility, vp: Vec<@ast::ViewPath> ) -> ast::ViewItem {\n+                vis: ast::Visibility, vp: @ast::ViewPath) -> ast::ViewItem {\n         ast::ViewItem {\n             node: ast::ViewItemUse(vp),\n             attrs: Vec::new(),\n@@ -966,10 +966,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn view_use_simple_(&self, sp: Span, vis: ast::Visibility,\n                         ident: ast::Ident, path: ast::Path) -> ast::ViewItem {\n         self.view_use(sp, vis,\n-                      vec!(@respan(sp,\n-                                ast::ViewPathSimple(ident,\n-                                                    path,\n-                                                    ast::DUMMY_NODE_ID))))\n+                      @respan(sp,\n+                           ast::ViewPathSimple(ident,\n+                                               path,\n+                                               ast::DUMMY_NODE_ID)))\n     }\n \n     fn view_use_list(&self, sp: Span, vis: ast::Visibility,\n@@ -979,17 +979,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }).collect();\n \n         self.view_use(sp, vis,\n-                      vec!(@respan(sp,\n-                                ast::ViewPathList(self.path(sp, path),\n-                                                  imports,\n-                                                  ast::DUMMY_NODE_ID))))\n+                      @respan(sp,\n+                           ast::ViewPathList(self.path(sp, path),\n+                                             imports,\n+                                             ast::DUMMY_NODE_ID)))\n     }\n \n     fn view_use_glob(&self, sp: Span,\n                      vis: ast::Visibility, path: Vec<ast::Ident> ) -> ast::ViewItem {\n         self.view_use(sp, vis,\n-                      vec!(@respan(sp,\n-                                ast::ViewPathGlob(self.path(sp, path), ast::DUMMY_NODE_ID))))\n+                      @respan(sp,\n+                           ast::ViewPathGlob(self.path(sp, path), ast::DUMMY_NODE_ID)))\n     }\n }\n "}, {"sha": "a4219d152a9ec33b93cf4a46a8ae4503b5761f6c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -28,44 +28,42 @@ pub trait Folder {\n         meta_items.iter().map(|x| fold_meta_item_(*x, self)).collect()\n     }\n \n-    fn fold_view_paths(&mut self, view_paths: &[@ViewPath]) -> Vec<@ViewPath> {\n-        view_paths.iter().map(|view_path| {\n-            let inner_view_path = match view_path.node {\n-                ViewPathSimple(ref ident, ref path, node_id) => {\n-                    let id = self.new_id(node_id);\n-                    ViewPathSimple(ident.clone(),\n-                                   self.fold_path(path),\n-                                   id)\n-                }\n-                ViewPathGlob(ref path, node_id) => {\n-                    let id = self.new_id(node_id);\n-                    ViewPathGlob(self.fold_path(path), id)\n-                }\n-                ViewPathList(ref path, ref path_list_idents, node_id) => {\n-                    let id = self.new_id(node_id);\n-                    ViewPathList(self.fold_path(path),\n-                                 path_list_idents.iter().map(|path_list_ident| {\n-                                    let id = self.new_id(path_list_ident.node\n-                                                                        .id);\n-                                    Spanned {\n-                                        node: PathListIdent_ {\n-                                            name: path_list_ident.node\n-                                                                 .name\n-                                                                 .clone(),\n-                                            id: id,\n-                                        },\n-                                        span: self.new_span(\n-                                            path_list_ident.span)\n-                                    }\n-                                 }).collect(),\n-                                 id)\n-                }\n-            };\n-            @Spanned {\n-                node: inner_view_path,\n-                span: self.new_span(view_path.span),\n+    fn fold_view_path(&mut self, view_path: @ViewPath) -> @ViewPath {\n+        let inner_view_path = match view_path.node {\n+            ViewPathSimple(ref ident, ref path, node_id) => {\n+                let id = self.new_id(node_id);\n+                ViewPathSimple(ident.clone(),\n+                               self.fold_path(path),\n+                               id)\n             }\n-        }).collect()\n+            ViewPathGlob(ref path, node_id) => {\n+                let id = self.new_id(node_id);\n+                ViewPathGlob(self.fold_path(path), id)\n+            }\n+            ViewPathList(ref path, ref path_list_idents, node_id) => {\n+                let id = self.new_id(node_id);\n+                ViewPathList(self.fold_path(path),\n+                             path_list_idents.iter().map(|path_list_ident| {\n+                                let id = self.new_id(path_list_ident.node\n+                                                                    .id);\n+                                Spanned {\n+                                    node: PathListIdent_ {\n+                                        name: path_list_ident.node\n+                                                             .name\n+                                                             .clone(),\n+                                        id: id,\n+                                    },\n+                                    span: self.new_span(\n+                                        path_list_ident.span)\n+                                }\n+                             }).collect(),\n+                             id)\n+            }\n+        };\n+        @Spanned {\n+            node: inner_view_path,\n+            span: self.new_span(view_path.span),\n+        }\n     }\n \n     fn fold_view_item(&mut self, vi: &ViewItem) -> ViewItem {\n@@ -557,8 +555,8 @@ pub fn noop_fold_view_item<T: Folder>(vi: &ViewItem, folder: &mut T)\n                               (*string).clone(),\n                               folder.new_id(node_id))\n         }\n-        ViewItemUse(ref view_paths) => {\n-            ViewItemUse(folder.fold_view_paths(view_paths.as_slice()))\n+        ViewItemUse(ref view_path) => {\n+            ViewItemUse(folder.fold_view_path(*view_path))\n         }\n     };\n     ViewItem {"}, {"sha": "88110a87e6cf84c4a809ef7b3ee16563c72912f3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -4918,12 +4918,12 @@ impl<'a> Parser<'a> {\n     }\n \n     // matches view_paths = view_path | view_path , view_paths\n-    fn parse_view_paths(&mut self) -> Vec<@ViewPath> {\n-        let mut vp = vec!(self.parse_view_path());\n+    fn parse_view_paths(&mut self) -> @ViewPath {\n+        let vp = self.parse_view_path();\n         while self.token == token::COMMA {\n             self.bump();\n             self.obsolete(self.last_span, ObsoleteMultipleImport);\n-            vp.push(self.parse_view_path());\n+            let _ = self.parse_view_path();\n         }\n         return vp;\n     }"}, {"sha": "7ea4dcbf28a2e20b9e1837420b6b97fa42abfd70", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -1995,11 +1995,6 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_view_paths(&mut self,\n-                            vps: &[@ast::ViewPath]) -> IoResult<()> {\n-        self.commasep(Inconsistent, vps, |s, &vp| s.print_view_path(vp))\n-    }\n-\n     pub fn print_view_item(&mut self, item: &ast::ViewItem) -> IoResult<()> {\n         try!(self.hardbreak_if_not_bol());\n         try!(self.maybe_print_comment(item.span.lo));\n@@ -2017,9 +2012,9 @@ impl<'a> State<'a> {\n                 }\n             }\n \n-            ast::ViewItemUse(ref vps) => {\n+            ast::ViewItemUse(ref vp) => {\n                 try!(self.head(\"use\"));\n-                try!(self.print_view_paths(vps.as_slice()));\n+                try!(self.print_view_path(*vp));\n             }\n         }\n         try!(word(&mut self.s, \";\"));"}, {"sha": "260ba2470921e1715a5590becb8c1bf395466eb8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03547bac1301da0a053e1e73a591ebdb0ccd1ca/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b03547bac1301da0a053e1e73a591ebdb0ccd1ca", "patch": "@@ -150,22 +150,20 @@ pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, e\n         ViewItemExternCrate(name, _, _) => {\n             visitor.visit_ident(vi.span, name, env)\n         }\n-        ViewItemUse(ref paths) => {\n-            for vp in paths.iter() {\n-                match vp.node {\n-                    ViewPathSimple(ident, ref path, id) => {\n-                        visitor.visit_ident(vp.span, ident, env.clone());\n-                        visitor.visit_path(path, id, env.clone());\n-                    }\n-                    ViewPathGlob(ref path, id) => {\n-                        visitor.visit_path(path, id, env.clone());\n-                    }\n-                    ViewPathList(ref path, ref list, _) => {\n-                        for id in list.iter() {\n-                            visitor.visit_ident(id.span, id.node.name, env.clone())\n-                        }\n-                        walk_path(visitor, path, env.clone());\n+        ViewItemUse(ref vp) => {\n+            match vp.node {\n+                ViewPathSimple(ident, ref path, id) => {\n+                    visitor.visit_ident(vp.span, ident, env.clone());\n+                    visitor.visit_path(path, id, env.clone());\n+                }\n+                ViewPathGlob(ref path, id) => {\n+                    visitor.visit_path(path, id, env.clone());\n+                }\n+                ViewPathList(ref path, ref list, _) => {\n+                    for id in list.iter() {\n+                        visitor.visit_ident(id.span, id.node.name, env.clone())\n                     }\n+                    walk_path(visitor, path, env.clone());\n                 }\n             }\n         }"}]}