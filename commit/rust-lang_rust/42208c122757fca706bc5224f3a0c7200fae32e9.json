{"sha": "42208c122757fca706bc5224f3a0c7200fae32e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMjA4YzEyMjc1N2ZjYTcwNmJjNTIyNGYzYTBjNzIwMGZhZTMyZTk=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-20T09:54:43Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-20T09:54:43Z"}, "message": "Handle shifts properly\n\n* The overflow-checking shift items need to take a full 128-bit type, since they need to be able to detect idiocy like `1i128 << (1u128 << 127)`\n* The unchecked ones just take u32, like the `*_sh?` methods in core\n* Because shift-by-anything is allowed, cast into a new local for every shift", "tree": {"sha": "83e34bff2c2bfdecea7387d3354a9dc7f3a93b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83e34bff2c2bfdecea7387d3354a9dc7f3a93b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42208c122757fca706bc5224f3a0c7200fae32e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42208c122757fca706bc5224f3a0c7200fae32e9", "html_url": "https://github.com/rust-lang/rust/commit/42208c122757fca706bc5224f3a0c7200fae32e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42208c122757fca706bc5224f3a0c7200fae32e9/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5a086fd61a87d36cfa3652b279c543601860da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5a086fd61a87d36cfa3652b279c543601860da", "html_url": "https://github.com/rust-lang/rust/commit/6a5a086fd61a87d36cfa3652b279c543601860da"}], "stats": {"total": 160, "additions": 112, "deletions": 48}, "files": [{"sha": "9dc5fdadbb195cf9739e2332fe452d8a2720f3e9", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 86, "deletions": 32, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/42208c122757fca706bc5224f3a0c7200fae32e9/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42208c122757fca706bc5224f3a0c7200fae32e9/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=42208c122757fca706bc5224f3a0c7200fae32e9", "patch": "@@ -41,21 +41,41 @@ impl Lower128Bit {\n         let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n         for block in basic_blocks.iter_mut() {\n             for i in (0..block.statements.len()).rev() {\n-                let lang_item =\n-                    if let Some(lang_item) = lower_to(&block.statements[i], local_decls, tcx) {\n-                        lang_item\n+                let (lang_item, rhs_kind) =\n+                    if let Some((lang_item, rhs_kind)) =\n+                        lower_to(&block.statements[i], local_decls, tcx)\n+                    {\n+                        (lang_item, rhs_kind)\n                     } else {\n                         continue;\n                     };\n \n+                let rhs_override_ty = rhs_kind.ty(tcx);\n+                let cast_local =\n+                    match rhs_override_ty {\n+                        None => None,\n+                        Some(ty) => {\n+                            let local_decl = LocalDecl::new_internal(\n+                                ty, block.statements[i].source_info.span);\n+                            Some(local_decls.push(local_decl))\n+                        },\n+                    };\n+\n+                let storage_dead = cast_local.map(|local| {\n+                    Statement {\n+                        source_info: block.statements[i].source_info,\n+                        kind: StatementKind::StorageDead(local),\n+                    }\n+                });\n                 let after_call = BasicBlockData {\n-                    statements: block.statements.drain((i+1)..).collect(),\n+                    statements: storage_dead.into_iter()\n+                        .chain(block.statements.drain((i+1)..)).collect(),\n                     is_cleanup: block.is_cleanup,\n                     terminator: block.terminator.take(),\n                 };\n \n                 let bin_statement = block.statements.pop().unwrap();\n-                let (source_info, lvalue, lhs, rhs) = match bin_statement {\n+                let (source_info, lvalue, lhs, mut rhs) = match bin_statement {\n                     Statement {\n                         source_info,\n                         kind: StatementKind::Assign(\n@@ -71,6 +91,23 @@ impl Lower128Bit {\n                     _ => bug!(\"Statement doesn't match pattern any more?\"),\n                 };\n \n+                if let Some(local) = cast_local {\n+                    block.statements.push(Statement {\n+                        source_info: source_info,\n+                        kind: StatementKind::StorageLive(local),\n+                    });\n+                    block.statements.push(Statement {\n+                        source_info: source_info,\n+                        kind: StatementKind::Assign(\n+                            Lvalue::Local(local),\n+                            Rvalue::Cast(\n+                                CastKind::Misc,\n+                                rhs,\n+                                rhs_override_ty.unwrap())),\n+                    });\n+                    rhs = Operand::Consume(Lvalue::Local(local));\n+                }\n+\n                 let call_did = check_lang_item_type(\n                     lang_item, &lvalue, &lhs, &rhs, local_decls, tcx);\n \n@@ -118,7 +155,7 @@ fn check_lang_item_type<'a, 'tcx, D>(\n }\n \n fn lower_to<'a, 'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-    -> Option<LangItem>\n+    -> Option<(LangItem, RhsKind)>\n     where D: HasLocalDecls<'tcx>\n {\n     match statement.kind {\n@@ -139,6 +176,23 @@ fn lower_to<'a, 'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCt\n     None\n }\n \n+#[derive(Copy, Clone)]\n+enum RhsKind {\n+    Unchanged,\n+    ForceU128,\n+    ForceU32,\n+}\n+\n+impl RhsKind {\n+    fn ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Ty<'tcx>> {\n+        match *self {\n+            RhsKind::Unchanged => None,\n+            RhsKind::ForceU128 => Some(tcx.types.u128),\n+            RhsKind::ForceU32 => Some(tcx.types.u32),\n+        }\n+    }\n+}\n+\n fn sign_of_128bit(ty: Ty) -> Option<bool> {\n     match ty.sty {\n         TypeVariants::TyInt(syntax::ast::IntTy::I128) => Some(true),\n@@ -147,39 +201,39 @@ fn sign_of_128bit(ty: Ty) -> Option<bool> {\n     }\n }\n \n-fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<LangItem> {\n+fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n     let i = match (bin_op, is_signed) {\n-        (BinOp::Add, true) => LangItem::I128AddFnLangItem,\n-        (BinOp::Add, false) => LangItem::U128AddFnLangItem,\n-        (BinOp::Sub, true) => LangItem::I128SubFnLangItem,\n-        (BinOp::Sub, false) => LangItem::U128SubFnLangItem,\n-        (BinOp::Mul, true) => LangItem::I128MulFnLangItem,\n-        (BinOp::Mul, false) => LangItem::U128MulFnLangItem,\n-        (BinOp::Div, true) => LangItem::I128DivFnLangItem,\n-        (BinOp::Div, false) => LangItem::U128DivFnLangItem,\n-        (BinOp::Rem, true) => LangItem::I128RemFnLangItem,\n-        (BinOp::Rem, false) => LangItem::U128RemFnLangItem,\n-        (BinOp::Shl, true) => LangItem::I128ShlFnLangItem,\n-        (BinOp::Shl, false) => LangItem::U128ShlFnLangItem,\n-        (BinOp::Shr, true) => LangItem::I128ShrFnLangItem,\n-        (BinOp::Shr, false) => LangItem::U128ShrFnLangItem,\n+        (BinOp::Add, true) => (LangItem::I128AddFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Add, false) => (LangItem::U128AddFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, true) => (LangItem::I128SubFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, false) => (LangItem::U128SubFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, true) => (LangItem::I128MulFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, false) => (LangItem::U128MulFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Div, true) => (LangItem::I128DivFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Div, false) => (LangItem::U128DivFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Rem, true) => (LangItem::I128RemFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Rem, false) => (LangItem::U128RemFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Shl, true) => (LangItem::I128ShlFnLangItem, RhsKind::ForceU32),\n+        (BinOp::Shl, false) => (LangItem::U128ShlFnLangItem, RhsKind::ForceU32),\n+        (BinOp::Shr, true) => (LangItem::I128ShrFnLangItem, RhsKind::ForceU32),\n+        (BinOp::Shr, false) => (LangItem::U128ShrFnLangItem, RhsKind::ForceU32),\n         _ => return None,\n     };\n     Some(i)\n }\n \n-fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<LangItem> {\n+fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n     let i = match (bin_op, is_signed) {\n-        (BinOp::Add, true) => LangItem::I128AddoFnLangItem,\n-        (BinOp::Add, false) => LangItem::U128AddoFnLangItem,\n-        (BinOp::Sub, true) => LangItem::I128SuboFnLangItem,\n-        (BinOp::Sub, false) => LangItem::U128SuboFnLangItem,\n-        (BinOp::Mul, true) => LangItem::I128MuloFnLangItem,\n-        (BinOp::Mul, false) => LangItem::U128MuloFnLangItem,\n-        (BinOp::Shl, true) => LangItem::I128ShloFnLangItem,\n-        (BinOp::Shl, false) => LangItem::U128ShloFnLangItem,\n-        (BinOp::Shr, true) => LangItem::I128ShroFnLangItem,\n-        (BinOp::Shr, false) => LangItem::U128ShroFnLangItem,\n+        (BinOp::Add, true) => (LangItem::I128AddoFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Add, false) => (LangItem::U128AddoFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, true) => (LangItem::I128SuboFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, false) => (LangItem::U128SuboFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, true) => (LangItem::I128MuloFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, false) => (LangItem::U128MuloFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Shl, true) => (LangItem::I128ShloFnLangItem, RhsKind::ForceU128),\n+        (BinOp::Shl, false) => (LangItem::U128ShloFnLangItem, RhsKind::ForceU128),\n+        (BinOp::Shr, true) => (LangItem::I128ShroFnLangItem, RhsKind::ForceU128),\n+        (BinOp::Shr, false) => (LangItem::U128ShroFnLangItem, RhsKind::ForceU128),\n         _ => bug!(\"That should be all the checked ones?\"),\n     };\n     Some(i)"}, {"sha": "4626dc17e1f6efe75dd347cc7c95741d6a0ab6fe", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/42208c122757fca706bc5224f3a0c7200fae32e9/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42208c122757fca706bc5224f3a0c7200fae32e9/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=42208c122757fca706bc5224f3a0c7200fae32e9", "patch": "@@ -35,13 +35,13 @@ fn i128_mulo(_x: i128, _y: i128) -> (i128, bool) { (4, false) }\n #[lang=\"u128_mulo\"]\n fn u128_mulo(_x: u128, _y: u128) -> (u128, bool) { (5, false) }\n #[lang=\"i128_shlo\"]\n-fn i128_shlo(_x: i128, _y: i32) -> (i128, bool) { (6, false) }\n+fn i128_shlo(_x: i128, _y: u128) -> (i128, bool) { (6, false) }\n #[lang=\"u128_shlo\"]\n-fn u128_shlo(_x: u128, _y: i32) -> (u128, bool) { (6, false) }\n+fn u128_shlo(_x: u128, _y: u128) -> (u128, bool) { (6, false) }\n #[lang=\"i128_shro\"]\n-fn i128_shro(_x: i128, _y: i32) -> (i128, bool) { (7, false) }\n+fn i128_shro(_x: i128, _y: u128) -> (i128, bool) { (7, false) }\n #[lang=\"u128_shro\"]\n-fn u128_shro(_x: u128, _y: i32) -> (u128, bool) { (8, false) }\n+fn u128_shro(_x: u128, _y: u128) -> (u128, bool) { (8, false) }\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -88,7 +88,9 @@ fn main() {\n //     _1 = const i128_rem(_1, const 5i128) -> bb15;\n //     ...\n //     _1 = (_13.0: i128);\n-//     _14 = const i128_shro(_1, const 7i32) -> bb16;\n+//     ...\n+//     _17 = const 7i32 as u128 (Misc);\n+//     _14 = const i128_shro(_1, _17) -> bb16;\n //     ...\n //     _1 = (_14.0: i128);\n //     ...\n@@ -100,7 +102,8 @@ fn main() {\n //     ...\n //     assert(!(_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n //     ...\n-//     _13 = const i128_shlo(_1, const 6i32) -> bb14;\n+//     _16 = const 6i32 as u128 (Misc);\n+//     _13 = const i128_shlo(_1, _16) -> bb14;\n //     ...\n //     assert(!(_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n // END rustc.test_signed.Lower128Bit.after.mir\n@@ -121,7 +124,9 @@ fn main() {\n //     _1 = const u128_rem(_1, const 5u128) -> bb13;\n //     ...\n //     _1 = (_7.0: u128);\n-//     _8 = const u128_shro(_1, const 7i32) -> bb14;\n+//     ...\n+//     _11 = const 7i32 as u128 (Misc);\n+//     _8 = const u128_shro(_1, _11) -> bb14;\n //     ...\n //     _1 = (_8.0: u128);\n //     ...\n@@ -133,7 +138,8 @@ fn main() {\n //     ...\n //     assert(!(_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n //     ...\n-//     _7 = const u128_shlo(_1, const 6i32) -> bb12;\n+//     _10 = const 6i32 as u128 (Misc);\n+//     _7 = const u128_shlo(_1, _10) -> bb12;\n //     ...\n //     assert(!(_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "207cd0ac57eb0d683feb0b8cbe189be0f22ef0ea", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42208c122757fca706bc5224f3a0c7200fae32e9/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42208c122757fca706bc5224f3a0c7200fae32e9/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=42208c122757fca706bc5224f3a0c7200fae32e9", "patch": "@@ -34,13 +34,13 @@ fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n #[lang=\"u128_rem\"]\n fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n #[lang=\"i128_shl\"]\n-fn i128_shl(_x: i128, _y: i32) -> i128 { 7 }\n+fn i128_shl(_x: i128, _y: u32) -> i128 { 7 }\n #[lang=\"u128_shl\"]\n-fn u128_shl(_x: u128, _y: i32) -> u128 { 7 }\n+fn u128_shl(_x: u128, _y: u32) -> u128 { 7 }\n #[lang=\"i128_shr\"]\n-fn i128_shr(_x: i128, _y: i32) -> i128 { 8 }\n+fn i128_shr(_x: i128, _y: u32) -> i128 { 8 }\n #[lang=\"u128_shr\"]\n-fn u128_shr(_x: u128, _y: i32) -> u128 { 9 }\n+fn u128_shr(_x: u128, _y: u32) -> u128 { 9 }\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -82,9 +82,11 @@ fn main() {\n //     ...\n //     _1 = const i128_sub(_1, const 2i128) -> bb6;\n //     ...\n-//     _1 = const i128_shr(_1, const 7i32) -> bb9;\n+//     _11 = const 7i32 as u32 (Misc);\n+//     _1 = const i128_shr(_1, _11) -> bb9;\n //     ...\n-//     _1 = const i128_shl(_1, const 6i32) -> bb10;\n+//     _12 = const 6i32 as u32 (Misc);\n+//     _1 = const i128_shl(_1, _12) -> bb10;\n // END rustc.test_signed.Lower128Bit.after.mir\n \n // START rustc.test_unsigned.Lower128Bit.after.mir\n@@ -98,7 +100,9 @@ fn main() {\n //     ...\n //     _1 = const u128_sub(_1, const 2u128) -> bb4;\n //     ...\n-//     _1 = const u128_shr(_1, const 7i32) -> bb7;\n+//     _5 = const 7i32 as u32 (Misc);\n+//     _1 = const u128_shr(_1, _5) -> bb7;\n //     ...\n-//     _1 = const u128_shl(_1, const 6i32) -> bb8;\n+//     _6 = const 6i32 as u32 (Misc);\n+//     _1 = const u128_shl(_1, _6) -> bb8;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}]}