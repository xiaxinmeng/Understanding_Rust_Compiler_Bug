{"sha": "bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMmMzNWYwNWRhYzQyMTA5MWNkZTVhYWU2YzBhNjhmYmZlN2MzZDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-19T17:37:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-19T17:37:34Z"}, "message": "Implement char to uint cast", "tree": {"sha": "4d811fa3a27185cc2db5b92d32667db776e5cf2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d811fa3a27185cc2db5b92d32667db776e5cf2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "html_url": "https://github.com/rust-lang/rust/commit/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1138d38d870e3915884e88df921588f1d1117644", "url": "https://api.github.com/repos/rust-lang/rust/commits/1138d38d870e3915884e88df921588f1d1117644", "html_url": "https://github.com/rust-lang/rust/commit/1138d38d870e3915884e88df921588f1d1117644"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "f0078c5a239cbd166a5066f0e70f541e40f17017", "filename": "example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "patch": "@@ -135,6 +135,10 @@ fn int_cast(a: u16, b: i16) -> (u8, u16, u32, usize, i8, i16, i32, isize) {\n     )\n }\n \n+fn char_cast(c: char) -> u8 {\n+    c as u8\n+}\n+\n struct DebugTuple(());\n \n fn debug_tuple() -> DebugTuple {"}, {"sha": "773ba27dc71fee5c5aadc338b06deb2902983550", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "patch": "@@ -298,6 +298,7 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                         (TypeVariants::TyRawPtr(..), TypeVariants::TyRawPtr(..)) => {\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n+                        (TypeVariants::TyChar, TypeVariants::TyUint(_)) |\n                         (TypeVariants::TyUint(_), TypeVariants::TyInt(_)) |\n                         (TypeVariants::TyUint(_), TypeVariants::TyUint(_)) => {\n                             let from = operand.load_value(fx);"}, {"sha": "7e471bf40a22c313177b9b26d838c91131c63ac3", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=bf2c35f05dac421091cde5aae6c0a68fbfe7c3d1", "patch": "@@ -48,6 +48,7 @@ pub fn cton_type_from_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>\n                 IntTy::Isize => types::I64,\n             }\n         }\n+        TypeVariants::TyChar => types::I32,\n         TypeVariants::TyFnPtr(_) => types::I64,\n         TypeVariants::TyRawPtr(TypeAndMut { ty, mutbl: _ }) | TypeVariants::TyRef(_, ty, _) => {\n             if ty.is_sized(tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n@@ -100,7 +101,7 @@ impl<'tcx> CValue<'tcx> {\n     pub fn load_value<'a>(self, fx: &mut FunctionCx<'a, 'tcx>) -> Value where 'tcx: 'a{\n         match self {\n             CValue::ByRef(addr, layout) => {\n-                let cton_ty = fx.cton_type(layout.ty).expect(&format!(\"{:?}\", layout.ty));\n+                let cton_ty = fx.cton_type(layout.ty).expect(&format!(\"load_value of type {:?}\", layout.ty));\n                 fx.bcx.ins().load(cton_ty, MemFlags::new(), addr, 0)\n             }\n             CValue::ByVal(value, _layout) => value,"}]}