{"sha": "2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMGEyMWVhZDE1YzM2NTFmNzhiMzIwM2M1NmNjZjAyYzMxYWFjYjI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-05T16:44:07Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:16:08Z"}, "message": "rustc: use LocalDefId instead of DefIndex in ich.", "tree": {"sha": "2d28a628bee36e6e46b113f95bd435c1d35315b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d28a628bee36e6e46b113f95bd435c1d35315b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "html_url": "https://github.com/rust-lang/rust/commit/2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "html_url": "https://github.com/rust-lang/rust/commit/f3ec0698865d70571f5308f912c63dbc5ad2a9ed"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "34b41c32dab5cddd05ad7071d246c2eba0496358", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIndex};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n@@ -124,15 +124,15 @@ impl<'a> StableHashingContext<'a> {\n     #[inline]\n     pub fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n         if let Some(def_id) = def_id.as_local() {\n-            self.definitions.def_path_hash(def_id.local_def_index)\n+            self.local_def_path_hash(def_id)\n         } else {\n             self.cstore.def_path_hash(def_id)\n         }\n     }\n \n     #[inline]\n-    pub fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash {\n-        self.definitions.def_path_hash(def_index)\n+    pub fn local_def_path_hash(&self, def_id: LocalDefId) -> DefPathHash {\n+        self.definitions.def_path_hash(def_id.local_def_index)\n     }\n \n     #[inline]"}, {"sha": "1722b29266ad264e2238bb46d5d5f65eefd13f1b", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "patch": "@@ -6,7 +6,7 @@ use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use std::mem;\n \n@@ -21,7 +21,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n             NodeIdHashingMode::HashDefPath => {\n                 let hir::HirId { owner, local_id } = hir_id;\n \n-                hcx.local_def_path_hash(owner.local_def_index).hash_stable(hcx, hasher);\n+                hcx.local_def_path_hash(owner).hash_stable(hcx, hasher);\n                 local_id.hash_stable(hcx, hasher);\n             }\n         }\n@@ -116,8 +116,8 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n     }\n \n     #[inline]\n-    fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash {\n-        self.local_def_path_hash(def_index)\n+    fn local_def_path_hash(&self, def_id: LocalDefId) -> DefPathHash {\n+        self.local_def_path_hash(def_id)\n     }\n }\n \n@@ -197,21 +197,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::BodyId {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::def_id::DefIndex {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.local_def_path_hash(*self).hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::def_id::DefIndex {\n-    type KeyType = DefPathHash;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> DefPathHash {\n-        hcx.local_def_path_hash(*self)\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitCandidate {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -231,7 +216,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n \n         let import_keys = import_ids\n             .iter()\n-            .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner.local_def_index), hir_id.local_id))\n+            .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner), hir_id.local_id))\n             .collect();\n         (hcx.def_path_hash(*def_id), import_keys)\n     }"}, {"sha": "996b310896904221a96028f83899f2aee0998b05", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0a21ead15c3651f78b3203c56ccf02c31aacb2/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=2b0a21ead15c3651f78b3203c56ccf02c31aacb2", "patch": "@@ -5,7 +5,7 @@ use crate::hir::{\n     VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n-use rustc_span::def_id::{DefIndex, DefPathHash};\n+use rustc_span::def_id::{DefPathHash, LocalDefId};\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n@@ -21,15 +21,15 @@ pub trait HashStableContext:\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n     fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n     fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F);\n-    fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash;\n+    fn local_def_path_hash(&self, def_id: LocalDefId) -> DefPathHash;\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n     type KeyType = (DefPathHash, ItemLocalId);\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n-        let def_path_hash = hcx.local_def_path_hash(self.owner.local_def_index);\n+        let def_path_hash = hcx.local_def_path_hash(self.owner);\n         (def_path_hash, self.local_id)\n     }\n }"}]}