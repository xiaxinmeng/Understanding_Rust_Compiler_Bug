{"sha": "b4f323254a2cf227852eec1b40db0b152fc6042c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjMyMzI1NGEyY2YyMjc4NTJlZWMxYjQwZGIwYjE1MmZjNjA0MmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-15T10:50:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-15T10:50:20Z"}, "message": "Auto merge of #46706 - sunjay:gat-lifetimes, r=nikomatsakis\n\nLifetime Resolution for Generic Associated Types\n\nTracking Issue: https://github.com/rust-lang/rust/issues/44265\n\nr? @nikomatsakis\n\nThis PR implements lifetime resolution for generic associated types. :tada:\n\n## Remaining Work Before Merge\n\nI'm going to go do these things in the next day or so. Please let me know if you spot anything in my changes until then.\n\n- [x] If I'm not mistaken, at least some tests should pass now. I need to go through the tests and re-enable the ones that should work by removing the appropriate `~ ERROR` comments", "tree": {"sha": "90c265f1c98fbaffcbc2385d892ee42a9a6b2466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c265f1c98fbaffcbc2385d892ee42a9a6b2466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f323254a2cf227852eec1b40db0b152fc6042c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f323254a2cf227852eec1b40db0b152fc6042c", "html_url": "https://github.com/rust-lang/rust/commit/b4f323254a2cf227852eec1b40db0b152fc6042c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f323254a2cf227852eec1b40db0b152fc6042c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b23449c0eac1923472a117a3bc57eab8ff1868", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b23449c0eac1923472a117a3bc57eab8ff1868", "html_url": "https://github.com/rust-lang/rust/commit/04b23449c0eac1923472a117a3bc57eab8ff1868"}, {"sha": "f701b4cca07d740d4d17c906ff982d40101ec09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f701b4cca07d740d4d17c906ff982d40101ec09e", "html_url": "https://github.com/rust-lang/rust/commit/f701b4cca07d740d4d17c906ff982d40101ec09e"}], "stats": {"total": 208, "additions": 155, "deletions": 53}, "files": [{"sha": "188dbe2f1de51d08a068f36999d42a71d503e190", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 67, "deletions": 20, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -646,30 +646,77 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        let tcx = self.tcx;\n-        if let hir::TraitItemKind::Method(ref sig, _) = trait_item.node {\n-            self.visit_early_late(\n-                Some(tcx.hir.get_parent(trait_item.id)),\n-                &sig.decl,\n-                &trait_item.generics,\n-                |this| intravisit::walk_trait_item(this, trait_item),\n-            )\n-        } else {\n-            intravisit::walk_trait_item(self, trait_item);\n+        use self::hir::TraitItemKind::*;\n+        match trait_item.node {\n+            Method(ref sig, _) => {\n+                let tcx = self.tcx;\n+                self.visit_early_late(\n+                    Some(tcx.hir.get_parent(trait_item.id)),\n+                    &sig.decl,\n+                    &trait_item.generics,\n+                    |this| intravisit::walk_trait_item(this, trait_item),\n+                );\n+            },\n+            Type(ref bounds, ref ty) => {\n+                let generics = &trait_item.generics;\n+                let mut index = self.next_early_index();\n+                debug!(\"visit_ty: index = {}\", index);\n+                let lifetimes = generics.lifetimes.iter()\n+                    .map(|lt_def| Region::early(&self.tcx.hir, &mut index, lt_def))\n+                    .collect();\n+\n+                let next_early_index = index + generics.ty_params.len() as u32;\n+                let scope = Scope::Binder { lifetimes, next_early_index, s: self.scope };\n+                self.with(scope, |_old_scope, this| {\n+                    this.visit_generics(generics);\n+                    for bound in bounds {\n+                        this.visit_ty_param_bound(bound);\n+                    }\n+                    if let Some(ty) = ty {\n+                        this.visit_ty(ty);\n+                    }\n+                });\n+            },\n+            Const(_, _) => {\n+                // Only methods and types support generics.\n+                assert!(!trait_item.generics.is_parameterized());\n+                intravisit::walk_trait_item(self, trait_item);\n+            },\n         }\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        let tcx = self.tcx;\n-        if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n-            self.visit_early_late(\n-                Some(tcx.hir.get_parent(impl_item.id)),\n-                &sig.decl,\n-                &impl_item.generics,\n-                |this| intravisit::walk_impl_item(this, impl_item),\n-            )\n-        } else {\n-            intravisit::walk_impl_item(self, impl_item);\n+        use self::hir::ImplItemKind::*;\n+        match impl_item.node {\n+            Method(ref sig, _) => {\n+                let tcx = self.tcx;\n+                self.visit_early_late(\n+                    Some(tcx.hir.get_parent(impl_item.id)),\n+                    &sig.decl,\n+                    &impl_item.generics,\n+                    |this| intravisit::walk_impl_item(this, impl_item),\n+                )\n+            },\n+            Type(ref ty) => {\n+                let generics = &impl_item.generics;\n+                let mut index = self.next_early_index();\n+                debug!(\"visit_ty: index = {}\", index);\n+                let lifetimes = generics.lifetimes.iter()\n+                    .map(|lt_def| Region::early(&self.tcx.hir, &mut index, lt_def))\n+                    .collect();\n+\n+                let next_early_index = index + generics.ty_params.len() as u32;\n+                let scope = Scope::Binder { lifetimes, next_early_index, s: self.scope };\n+                self.with(scope, |_old_scope, this| {\n+                    this.visit_generics(generics);\n+                    this.visit_ty(ty);\n+                });\n+            },\n+            Const(_, _) => {\n+                // Only methods and types support generics.\n+                assert!(!impl_item.generics.is_parameterized());\n+                intravisit::walk_impl_item(self, impl_item);\n+            },\n         }\n     }\n "}, {"sha": "0d9b487876e211d57c2add25c1a311522e6fd5d0", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -10,7 +10,8 @@\n \n #![feature(generic_associated_types)]\n \n-//FIXME(#44265): \"undeclared lifetime\" errors will be addressed in a follow-up PR\n+//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+//follow-up PR\n \n trait Foo {\n     type Bar<'a, 'b>;\n@@ -22,8 +23,7 @@ trait Baz {\n \n impl<T> Baz for T where T: Foo {\n     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n-    //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n }\n \n fn main() {}"}, {"sha": "e74592fa9ff98e2ad4c9423dd1e41da6001d96b5", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -1,14 +1,8 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/construct_with_other_type.rs:24:37\n-   |\n-24 |     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n-   |                                     ^^ undeclared lifetime\n-\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/construct_with_other_type.rs:24:37\n+  --> $DIR/construct_with_other_type.rs:25:37\n    |\n-24 |     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+25 |     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n    |                                     ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "9b59b24b105d2e09e0164399db639b98ccaf9dfd", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -13,8 +13,6 @@\n // Checking the interaction with this other feature\n #![feature(associated_type_defaults)]\n \n-//FIXME(#44265): \"undeclared lifetime\" errors will be addressed in a follow-up PR\n-\n use std::fmt::{Display, Debug};\n \n trait Foo {\n@@ -32,7 +30,6 @@ impl Foo for Bar {\n     type Assoc2<T> = Vec<T>;\n     type Assoc3<T> where T: Iterator = Vec<T>;\n     type WithDefault<'a, T> = &'a Iterator<T>;\n-    //~^ ERROR undeclared lifetime\n     type NoGenerics = ::std::cell::Cell<i32>;\n }\n "}, {"sha": "bb55d86f620b75fc9dcc5145d9be00f7e72e6965", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -1,8 +1,2 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/generic-associated-types-where.rs:34:32\n-   |\n-34 |     type WithDefault<'a, T> = &'a Iterator<T>;\n-   |                                ^^ undeclared lifetime\n-\n error: cannot continue compilation due to previous error\n "}, {"sha": "263b3cb42eb4f32d465de767687b79ea25f954cf", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_associated_types)]\n+\n+use std::ops::Deref;\n+\n+//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+//follow-up PR\n+\n+trait Iterable {\n+    type Item<'a>;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>>\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+        + Deref<Target = Self::Item<'b>>;\n+    //~^ ERROR undeclared lifetime\n+    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+    //~^ ERROR undeclared lifetime\n+    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+}\n+\n+fn main() {}"}, {"sha": "587be7113cec7a444993c7e787195834e5d31e4c", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -0,0 +1,32 @@\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:22:37\n+   |\n+22 |         + Deref<Target = Self::Item<'b>>;\n+   |                                     ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'undeclared`\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:26:41\n+   |\n+26 |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+   |                                         ^^^^^^^^^^^ undeclared lifetime\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:20:47\n+   |\n+20 |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n+   |                                               ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:22:37\n+   |\n+22 |         + Deref<Target = Self::Item<'b>>;\n+   |                                     ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:26:41\n+   |\n+26 |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+   |                                         ^^^^^^^^^^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "1287ddaf7f7feb3f722b1896a88042f2ef856904", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -10,13 +10,20 @@\n \n #![feature(generic_associated_types)]\n \n-//FIXME(#44265): \"undeclared lifetime\" errors will be addressed in a follow-up PR\n+use std::ops::Deref;\n+\n+//FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n+//follow-up PR\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-    //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+\n+    // This weird type tests that we can use universal function call syntax to access the Item on\n+    // Self::Iter which we have declared to be an Iterator\n+    type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]"}, {"sha": "d12ca5e5d4ef74fa4043f9475a327763b70f4862", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4f323254a2cf227852eec1b40db0b152fc6042c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=b4f323254a2cf227852eec1b40db0b152fc6042c", "patch": "@@ -1,19 +1,19 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/iterable.rs:17:47\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/iterable.rs:20:47\n    |\n-17 |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-   |                                               ^^ undeclared lifetime\n+20 |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n+   |                                               ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:17:47\n+  --> $DIR/iterable.rs:25:48\n    |\n-17 |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-   |                                               ^^ lifetime parameter not allowed on this type\n+25 |     type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n+   |                                                ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:21:41\n+  --> $DIR/iterable.rs:28:41\n    |\n-21 |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n+28 |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime parameter not allowed on this type\n \n error: aborting due to 3 previous errors"}]}