{"sha": "eafed93d72845581e04bacd3aaea4b28a3f49396", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmVkOTNkNzI4NDU1ODFlMDRiYWNkM2FhZWE0YjI4YTNmNDkzOTY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-13T23:28:49Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:15:54Z"}, "message": "convert ast::struct_field_ into a struct", "tree": {"sha": "db06c066bac579039938a5a7774e0df627540a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db06c066bac579039938a5a7774e0df627540a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafed93d72845581e04bacd3aaea4b28a3f49396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafed93d72845581e04bacd3aaea4b28a3f49396", "html_url": "https://github.com/rust-lang/rust/commit/eafed93d72845581e04bacd3aaea4b28a3f49396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafed93d72845581e04bacd3aaea4b28a3f49396/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5e9ff362042fe815fddfdaf211f782aa944229", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5e9ff362042fe815fddfdaf211f782aa944229", "html_url": "https://github.com/rust-lang/rust/commit/1f5e9ff362042fe815fddfdaf211f782aa944229"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "2d6c848be893de6270c2ec032cb6a27a894c8c62", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eafed93d72845581e04bacd3aaea4b28a3f49396/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafed93d72845581e04bacd3aaea4b28a3f49396/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=eafed93d72845581e04bacd3aaea4b28a3f49396", "patch": "@@ -1457,11 +1457,11 @@ impl visibility : cmp::Eq {\n \n #[auto_encode]\n #[auto_decode]\n-type struct_field_ = {\n+struct struct_field_ {\n     kind: struct_field_kind,\n     id: node_id,\n-    ty: @Ty\n-};\n+    ty: @Ty,\n+}\n \n type struct_field = spanned<struct_field_>;\n "}, {"sha": "23c3694ebb2e7f488eaad43ddb4510cc39244b8e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eafed93d72845581e04bacd3aaea4b28a3f49396/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafed93d72845581e04bacd3aaea4b28a3f49396/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=eafed93d72845581e04bacd3aaea4b28a3f49396", "patch": "@@ -216,9 +216,9 @@ fn noop_fold_item(&&i: @item, fld: ast_fold) -> Option<@item> {\n \n fn noop_fold_struct_field(&&sf: @struct_field, fld: ast_fold)\n                        -> @struct_field {\n-    @spanned { node: { kind: copy sf.node.kind,\n-                       id: sf.node.id,\n-                       ty: fld.fold_ty(sf.node.ty) },\n+    @spanned { node: ast::struct_field_ { kind: copy sf.node.kind,\n+                                          id: sf.node.id,\n+                                          ty: fld.fold_ty(sf.node.ty) },\n                span: sf.span }\n }\n \n@@ -293,9 +293,9 @@ fn fold_trait_ref(&&p: @trait_ref, fld: ast_fold) -> @trait_ref {\n }\n \n fn fold_struct_field(&&f: @struct_field, fld: ast_fold) -> @struct_field {\n-    @spanned { node: { kind: copy f.node.kind,\n-                       id: fld.new_id(f.node.id),\n-                       ty: fld.fold_ty(f.node.ty) },\n+    @spanned { node: ast::struct_field_ { kind: copy f.node.kind,\n+                                          id: fld.new_id(f.node.id),\n+                                          ty: fld.fold_ty(f.node.ty) },\n                span: fld.new_span(f.span) }\n }\n \n@@ -693,10 +693,14 @@ impl ast_fold_fns: ast_fold {\n         return (self.fold_item)(i, self as ast_fold);\n     }\n     fn fold_struct_field(&&sf: @struct_field) -> @struct_field {\n-        @spanned { node: { kind: copy sf.node.kind,\n-                           id: sf.node.id,\n-                           ty: (self as ast_fold).fold_ty(sf.node.ty) },\n-                   span: (self.new_span)(sf.span) }\n+        @spanned {\n+            node: ast::struct_field_ {\n+                kind: copy sf.node.kind,\n+                id: sf.node.id,\n+                ty: (self as ast_fold).fold_ty(sf.node.ty),\n+            },\n+            span: (self.new_span)(sf.span),\n+        }\n     }\n     fn fold_item_underscore(i: item_) ->\n        item_ {"}, {"sha": "f7651d31766f7f90793301cd77e286acc56414cd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eafed93d72845581e04bacd3aaea4b28a3f49396/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafed93d72845581e04bacd3aaea4b28a3f49396/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eafed93d72845581e04bacd3aaea4b28a3f49396", "patch": "@@ -2150,11 +2150,11 @@ impl Parser {\n         let name = self.parse_ident();\n         self.expect(token::COLON);\n         let ty = self.parse_ty(false);\n-        return @spanned(lo, self.last_span.hi, {\n+        @spanned(lo, self.last_span.hi, ast::struct_field_ {\n             kind: named_field(name, is_mutbl, pr),\n             id: self.get_id(),\n             ty: ty\n-        });\n+        })\n     }\n \n     fn parse_stmt(+first_item_attrs: ~[attribute]) -> @stmt {\n@@ -2816,7 +2816,7 @@ impl Parser {\n                                                  seq_sep_trailing_allowed\n                                                     (token::COMMA)) |p| {\n                 let lo = p.span.lo;\n-                let struct_field_ = {\n+                let struct_field_ = ast::struct_field_ {\n                     kind: unnamed_field,\n                     id: self.get_id(),\n                     ty: p.parse_ty(false)\n@@ -2893,7 +2893,9 @@ impl Parser {\n             self.parse_method();\n             // bogus value\n             @spanned(self.span.lo, self.span.hi,\n-                     { kind: unnamed_field, id: self.get_id(),\n+                     ast::struct_field_ {\n+                       kind: unnamed_field,\n+                       id: self.get_id(),\n                        ty: @{id: self.get_id(),\n                              node: ty_nil,\n                              span: copy self.span} })"}]}