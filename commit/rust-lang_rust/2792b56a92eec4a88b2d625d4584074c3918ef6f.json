{"sha": "2792b56a92eec4a88b2d625d4584074c3918ef6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTJiNTZhOTJlZWM0YTg4YjJkNjI1ZDQ1ODQwNzRjMzkxOGVmNmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-15T09:31:23Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-15T10:20:28Z"}, "message": "Support `extern type` in rustdoc.\n\nFixes #45640.", "tree": {"sha": "895476395f965c2f059bd57194ec4d9ae565eb72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895476395f965c2f059bd57194ec4d9ae565eb72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2792b56a92eec4a88b2d625d4584074c3918ef6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAloMFOwACgkQ/vbIBR0O\nATzC2w//Q2J1G1n4Vn6E0vV+HAmWUClqpcPsJB09HRUFRpSHECZkfcM7BJr7iD+0\neAuNWW+/IR5qp36c0efaZxC4H6HYkFUks9CUzHvAb3EhZRsd0fE+rNOXjTW94iO8\n9T0qb7h8YMdT/bHa3sephWHnVMOqSaJfPGSZsdeaF27L+IKVmA6Ulh67lXq+fHpF\nPf1W44D5CdScJmjMmH9FzI5M0W+OKQ4d6/rYQ39rjPo6PPhkp8Cq1HaJ+92g99/0\n3CNL1J6uXDFZa31APC8WaUO7AUMbLMwFnbSfw2Rww1T3QIRF95GfGGouncmjXtZK\nssZNYrMoIG+uoVH+cRclDEU6sbkU4eVnetwcVyiYmQ1AQ6hOCUZpvSxbnRSRz92+\niF5PQTvEHkbnizsHYGrEiYqNP9t0PUyqYjFjjmcewhUMCYgrGk+sZwtaIT98Q0/6\nNlOPdgHF8cGZUN86sbblYUj1suB4reu0h7QEORD5SEOVr8l08aSWNxnzXLkjkTsH\nKgP5WAjdR2srDoooi0tqUq+roImA7MhlrLr4GldBMsxpN/t02ETt85k8Okb8AEK8\nFz/UHpwsbPZBDpRqeyyrj2DR1MfMJaB7hhvR9fbE0HdOnLlRlU95AsLaYCxITmdy\nmRmFEGEh6Wbg7r3Hji9bPwVD5Ec9xqR1Olsm9MjBJ+E6x3lzhEA=\n=5Rvd\n-----END PGP SIGNATURE-----", "payload": "tree 895476395f965c2f059bd57194ec4d9ae565eb72\nparent f93a4928c2168bcc475b4fe77ba9f9e5494ffe1c\nauthor kennytm <kennytm@gmail.com> 1510738283 +0800\ncommitter kennytm <kennytm@gmail.com> 1510741228 +0800\n\nSupport `extern type` in rustdoc.\n\nFixes #45640.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2792b56a92eec4a88b2d625d4584074c3918ef6f", "html_url": "https://github.com/rust-lang/rust/commit/2792b56a92eec4a88b2d625d4584074c3918ef6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2792b56a92eec4a88b2d625d4584074c3918ef6f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93a4928c2168bcc475b4fe77ba9f9e5494ffe1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93a4928c2168bcc475b4fe77ba9f9e5494ffe1c", "html_url": "https://github.com/rust-lang/rust/commit/f93a4928c2168bcc475b4fe77ba9f9e5494ffe1c"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "4c518167e088d5767b85de4ac08d6ea0fa0d1454", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2792b56a92eec4a88b2d625d4584074c3918ef6f", "patch": "@@ -77,6 +77,11 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n             ret.extend(build_impls(cx, did));\n             clean::EnumItem(build_enum(cx, did))\n         }\n+        Def::TyForeign(did) => {\n+            record_extern_fqn(cx, did, clean::TypeKind::Foreign);\n+            ret.extend(build_impls(cx, did));\n+            clean::ForeignTypeItem\n+        }\n         // Never inline enum variants but leave them shown as reexports.\n         Def::Variant(..) => return None,\n         // Assume that enum variants and struct types are reexported next to"}, {"sha": "27a27c71bc9da18da2916c42f00bd38e2778687c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2792b56a92eec4a88b2d625d4584074c3918ef6f", "patch": "@@ -1257,7 +1257,7 @@ impl DocFolder for Cache {\n             clean::FunctionItem(..) | clean::ModuleItem(..) |\n             clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n             clean::ConstantItem(..) | clean::StaticItem(..) |\n-            clean::UnionItem(..)\n+            clean::UnionItem(..) | clean::ForeignTypeItem\n             if !self.stripped_mod => {\n                 // Reexported items mean that the same id can show up twice\n                 // in the rustdoc ast that we're looking at. We know,\n@@ -1292,7 +1292,7 @@ impl DocFolder for Cache {\n         // Maintain the parent stack\n         let orig_parent_is_trait_impl = self.parent_is_trait_impl;\n         let parent_pushed = match item.inner {\n-            clean::TraitItem(..) | clean::EnumItem(..) |\n+            clean::TraitItem(..) | clean::EnumItem(..) | clean::ForeignTypeItem |\n             clean::StructItem(..) | clean::UnionItem(..) => {\n                 self.parent_stack.push(item.def_id);\n                 self.parent_is_trait_impl = false;\n@@ -1711,6 +1711,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n             clean::StaticItem(..) | clean::ForeignStaticItem(..) => write!(fmt, \"Static \")?,\n             clean::ConstantItem(..) => write!(fmt, \"Constant \")?,\n+            clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -1775,6 +1776,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) =>\n                 item_static(fmt, self.cx, self.item, i),\n             clean::ConstantItem(ref c) => item_constant(fmt, self.cx, self.item, c),\n+            clean::ForeignTypeItem => item_foreign_type(fmt, self.cx, self.item),\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -3429,6 +3431,21 @@ fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n }\n \n+fn item_foreign_type(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item) -> fmt::Result {\n+    writeln!(w, \"<pre class='rust foreigntype'>extern {{\")?;\n+    render_attributes(w, it)?;\n+    write!(\n+        w,\n+        \"    {}type {};\\n}}</pre>\",\n+        VisSpace(&it.visibility),\n+        it.name.as_ref().unwrap(),\n+    )?;\n+\n+    document(w, cx, it)?;\n+\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+}\n+\n impl<'a> fmt::Display for Sidebar<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let cx = self.cx;\n@@ -3446,6 +3463,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 clean::UnionItem(..) => write!(fmt, \"Union \")?,\n                 clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n                 clean::TypedefItem(..) => write!(fmt, \"Type Definition \")?,\n+                clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n                 clean::ModuleItem(..) => if it.is_crate() {\n                     write!(fmt, \"Crate \")?;\n                 } else {\n@@ -3474,6 +3492,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 clean::EnumItem(ref e) => sidebar_enum(fmt, it, e)?,\n                 clean::TypedefItem(ref t, _) => sidebar_typedef(fmt, it, t)?,\n                 clean::ModuleItem(ref m) => sidebar_module(fmt, it, &m.items)?,\n+                clean::ForeignTypeItem => sidebar_foreign_type(fmt, it)?,\n                 _ => (),\n             }\n         }\n@@ -3897,6 +3916,14 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n     Ok(())\n }\n \n+fn sidebar_foreign_type(fmt: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {\n+    let sidebar = sidebar_assoc_items(it);\n+    if !sidebar.is_empty() {\n+        write!(fmt, \"<div class=\\\"block items\\\">{}</div>\", sidebar)?;\n+    }\n+    Ok(())\n+}\n+\n impl<'a> fmt::Display for Source<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Source(s) = *self;"}, {"sha": "3350a9f73876f6636479cfd069417f8e1c0d8dd2", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=2792b56a92eec4a88b2d625d4584074c3918ef6f", "patch": "@@ -37,7 +37,8 @@\n                      \"associatedtype\",\n                      \"constant\",\n                      \"associatedconstant\",\n-                     \"union\"];\n+                     \"union\",\n+                     \"foreigntype\"];\n \n     // On the search screen, so you remain on the last tab you opened.\n     //\n@@ -1445,6 +1446,7 @@\n         block(\"trait\", \"Traits\");\n         block(\"fn\", \"Functions\");\n         block(\"type\", \"Type Definitions\");\n+        block(\"foreigntype\", \"Foreign Types\");\n     }\n \n     window.initSidebarItems = initSidebarItems;"}, {"sha": "cb19034bf0612d19952e8932df5a73fdfc91791f", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=2792b56a92eec4a88b2d625d4584074c3918ef6f", "patch": "@@ -104,6 +104,7 @@ pre {\n .content .highlighted.method,\n .content .highlighted.tymethod { background-color: #c6afb3; }\n .content .highlighted.type { background-color: #ffc891; }\n+.content .highlighted.foreigntype { background-color: #f5c4ff; }\n .content .highlighted.macro { background-color: #8ce488; }\n .content .highlighted.constant,\n .content .highlighted.static { background-color: #c3e0ff; }\n@@ -112,6 +113,7 @@ pre {\n .content span.enum, .content a.enum, .block a.current.enum { color: #508157; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #df3600; }\n .content span.type, .content a.type, .block a.current.type { color: #ba5d00; }\n+.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #cd00e2; }\n .content span.macro, .content a.macro, .block a.current.macro { color: #068000; }\n .content span.union, .content a.union, .block a.current.union { color: #767b27; }\n .content span.constant, .content a.constant, .block a.current.constant,"}, {"sha": "06447ffaa753db78d8440c5298002a939bf40314", "filename": "src/test/rustdoc/foreigntype.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Ftest%2Frustdoc%2Fforeigntype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2792b56a92eec4a88b2d625d4584074c3918ef6f/src%2Ftest%2Frustdoc%2Fforeigntype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforeigntype.rs?ref=2792b56a92eec4a88b2d625d4584074c3918ef6f", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    // @has foreigntype/foreigntype.ExtType.html\n+    pub type ExtType;\n+}\n+\n+impl ExtType {\n+    // @has - '//a[@class=\"fnname\"]' 'do_something'\n+    pub fn do_something(&self) {}\n+}\n+\n+pub trait Trait {}\n+\n+// @has foreigntype/trait.Trait.html '//a[@class=\"foreigntype\"]' 'ExtType'\n+impl Trait for ExtType {}\n+\n+// @has foreigntype/index.html '//a[@class=\"foreigntype\"]' 'ExtType'"}]}