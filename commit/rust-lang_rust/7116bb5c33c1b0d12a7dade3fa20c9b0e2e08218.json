{"sha": "7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMTZiYjVjMzNjMWIwZDEyYTdkYWRlM2ZhMjBjOWIwZTJlMDgyMTg=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-20T22:34:58Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T17:16:20Z"}, "message": "Update with comments", "tree": {"sha": "ce8200a765d85029008d9697312d4d08b7313bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8200a765d85029008d9697312d4d08b7313bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "html_url": "https://github.com/rust-lang/rust/commit/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea2af704669f630c4184bb2c0befeb6cb7d78d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2af704669f630c4184bb2c0befeb6cb7d78d29", "html_url": "https://github.com/rust-lang/rust/commit/ea2af704669f630c4184bb2c0befeb6cb7d78d29"}], "stats": {"total": 105, "additions": 72, "deletions": 33}, "files": [{"sha": "84f8ce5706ae61aef168ce381b933ca50a8dafce", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -2659,7 +2659,6 @@ impl<'a> State<'a> {\n                     s.word_space(\":\");\n                     s.print_type(ty);\n                     s.print_type_bounds(\":\", &param.bounds);\n-                    // FIXME(const_generic_defaults)\n                     if let Some(ref default) = default {\n                         s.s.space();\n                         s.word_space(\"=\");"}, {"sha": "98904206b215c2a2c88c95a136bc0c9d8cc95a56", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -957,34 +957,45 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> SubstsRef<'tcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let mut num_supplied_defaults = 0;\n-        let mut type_params = generics\n-            .params\n-            .iter()\n-            .rev()\n-            .filter_map(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => None,\n-                ty::GenericParamDefKind::Type { has_default, .. } => {\n-                    Some((param.def_id, has_default))\n-                }\n-                // FIXME(const_generics:defaults)\n-                ty::GenericParamDefKind::Const { has_default: _has_default } => None,\n-            })\n-            .peekable();\n-        let has_default = {\n-            let has_default = type_params.peek().map(|(_, has_default)| has_default);\n-            *has_default.unwrap_or(&false)\n-        };\n-        if has_default {\n-            let types = substs.types().rev();\n-            for ((def_id, has_default), actual) in type_params.zip(types) {\n-                if !has_default {\n-                    break;\n+\n+        #[derive(PartialEq, Eq, Copy, Clone)]\n+        enum Kind {\n+            Const,\n+            Type,\n+        }\n+        let default_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n+            ty::GenericParamDefKind::Type { has_default: true, .. } => {\n+                Some((param.def_id, Kind::Type))\n+            }\n+            ty::GenericParamDefKind::Const { has_default: true } => {\n+                Some((param.def_id, Kind::Const))\n+            }\n+            _ => None,\n+        });\n+        let mut types = substs.types().rev();\n+        let mut consts = substs.consts().rev();\n+        for (def_id, kind) in default_params {\n+            match kind {\n+                Kind::Const => {\n+                    if let Some(actual) = consts.next() {\n+                        if ty::Const::from_anon_const(self.tcx, def_id.expect_local()) != actual {\n+                            break;\n+                        }\n+                    } else {\n+                        break;\n+                    }\n                 }\n-                if self.tcx.type_of(def_id).subst(self.tcx, substs) != actual {\n-                    break;\n+                Kind::Type => {\n+                    if let Some(actual) = types.next() {\n+                        if self.tcx.type_of(def_id).subst(self.tcx, substs) != actual {\n+                            break;\n+                        }\n+                    } else {\n+                        break;\n+                    }\n                 }\n-                num_supplied_defaults += 1;\n             }\n+            num_supplied_defaults += 1;\n         }\n         let len = generics.params.len();\n         let mut generics = generics.clone();"}, {"sha": "d055c275299a6e2ae328a647818e117ec2efa219", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -1880,7 +1880,6 @@ impl EncodeContext<'a, 'tcx> {\n                     let def_id = def_id.to_def_id();\n                     self.encode_info_for_generic_param(def_id, EntryKind::ConstParam, true);\n                     if default.is_some() {\n-                        self.encode_stability(def_id);\n                         record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))\n                     }\n                 }"}, {"sha": "36162cfe92452a14bcfcc2adfb0f698cf2c09fac", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -94,7 +94,7 @@ rustc_queries! {\n     }\n \n     /// Given the def_id of a const-generic parameter, computes the associated default const\n-    /// parameter. i.e. `fn example<const N: usize=3>` called on N would return 3.\n+    /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n     query const_param_default(param: DefId) -> &'tcx ty::Const<'tcx> {\n         desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n     }"}, {"sha": "c78151271c171fdb8d8f30da1ab80833ada2d52c", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -212,7 +212,7 @@ pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Cons\n         }) => tcx.hir().local_def_id(ac.hir_id),\n         _ => span_bug!(\n             tcx.def_span(def_id),\n-            \"const_param_defaults expected a generic parameter with a constant\"\n+            \"`const_param_default` expected a generic parameter with a constant\"\n         ),\n     };\n     Const::from_anon_const(tcx, default_def_id)"}, {"sha": "5f302f7d0a94e7eb8be786f7481a40e306396c6b", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -775,7 +775,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             GenericParamDefKind::Const { .. } => {\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id);\n-                    // Const params have to currently be concrete.\n+                    // Const params currently have to be concrete.\n                     assert!(!default_ct.needs_subst());\n                     default_ct.into()\n                 } else {"}, {"sha": "ae82c85eb7e4be6031348c389cd4ec5937af50af", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -0,0 +1,9 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features, dead_code)]\n+\n+struct Both<const N: usize=3, T> {\n+//~^ ERROR: generic parameters with a default must be\n+  v: T\n+}"}, {"sha": "f7a2e484fc61bcbcb5e709cbded0e1850004215e", "filename": "src/test/ui/const-generics/min_const_generics/const_default_first.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst_default_first.stderr?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -0,0 +1,8 @@\n+error: generic parameters with a default must be trailing\n+  --> $DIR/const_default_first.rs:6:19\n+   |\n+LL | struct Both<const N: usize=3, T> {\n+   |                   ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "435a63a5283457a576e99abdf381fa60a8464e31", "filename": "src/test/ui/const-generics/min_const_generics/type_and_const_defaults.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftype_and_const_defaults.rs?ref=7116bb5c33c1b0d12a7dade3fa20c9b0e2e08218", "patch": "@@ -1,7 +1,7 @@\n-// check-pass\n-#![crate_type = \"lib\"]\n+// run-pass\n+#![feature(const_generics)]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n+#![allow(incomplete_features, dead_code)]\n \n struct Both<T=u32, const N: usize=3> {\n   arr: [T; N]\n@@ -12,3 +12,16 @@ trait BothTrait<T=u32, const N: usize=3> {}\n enum BothEnum<T=u32, const N: usize=3> {\n   Dummy([T; N])\n }\n+\n+struct OppOrder<const N: usize=3, T=u32> {\n+  arr: [T; N]\n+}\n+\n+fn main() {\n+  let _ = OppOrder::<3, u32> {\n+    arr: [0,0,0],\n+  };\n+  let _ = Both::<u8, 1> {\n+    arr: [0],\n+  };\n+}"}]}