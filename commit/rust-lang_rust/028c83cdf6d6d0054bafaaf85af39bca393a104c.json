{"sha": "028c83cdf6d6d0054bafaaf85af39bca393a104c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOGM4M2NkZjZkNmQwMDU0YmFmYWFmODVhZjM5YmNhMzkzYTEwNGM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-08T22:11:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-12T19:14:53Z"}, "message": "Rename in librustc_typecheck.", "tree": {"sha": "70e488b95c26fb124d845f79eb7991977275566c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e488b95c26fb124d845f79eb7991977275566c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/028c83cdf6d6d0054bafaaf85af39bca393a104c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/028c83cdf6d6d0054bafaaf85af39bca393a104c", "html_url": "https://github.com/rust-lang/rust/commit/028c83cdf6d6d0054bafaaf85af39bca393a104c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/028c83cdf6d6d0054bafaaf85af39bca393a104c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32", "html_url": "https://github.com/rust-lang/rust/commit/ff6b7cd7c13c172b829b0dc12edfc2a20f7c3c32"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "ee3ebd691e4538612dc90c329771a9e50aaf2fec", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=028c83cdf6d6d0054bafaaf85af39bca393a104c", "patch": "@@ -18,7 +18,6 @@ use rustc::ty::{self, DefIdTree, Ty, TyCtxt, Const, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{self, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n-use rustc::mir::interpret::ConstValue;\n use rustc_target::spec::abi;\n use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n@@ -2226,7 +2225,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let def_id = tcx.hir().local_def_id(ast_const.hir_id);\n \n         let mut const_ = ty::Const {\n-            val: ConstValue::Unevaluated(\n+            val: ty::ConstKind::Unevaluated(\n                 def_id,\n                 InternalSubsts::identity_for_item(tcx, def_id),\n             ),\n@@ -2243,7 +2242,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n             let name = tcx.hir().name(hir_id);\n-            const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n+            const_.val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n         }\n \n         tcx.mk_const(const_)"}, {"sha": "2363dbc53039787fa9172d6aead4eed2618514d3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=028c83cdf6d6d0054bafaaf85af39bca393a104c", "patch": "@@ -1688,7 +1688,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n-        let alloc = if let ConstValue::ByRef { alloc, .. } = static_.val {\n+        let alloc = if let ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) = static_.val {\n             alloc\n         } else {\n             bug!(\"Matching on non-ByRef static\")"}, {"sha": "fd97493b5912af078d1273fd5f2a0db501759b69", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=028c83cdf6d6d0054bafaaf85af39bca393a104c", "patch": "@@ -6,7 +6,6 @@ use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n-use rustc::mir::interpret::ConstValue;\n use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_opaque_type;\n \n@@ -536,7 +535,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             }\n \n             fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-                if let ConstValue::Param(param) = c.val {\n+                if let ty::ConstKind::Param(param) = c.val {\n                     self.params.insert(param.index);\n                 }\n                 c.super_visit_with(self)\n@@ -705,7 +704,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                 }\n \n                                 ty::subst::GenericArgKind::Const(ct) => match ct.val {\n-                                    ConstValue::Param(_) => {}\n+                                    ty::ConstKind::Param(_) => {}\n                                     _ => {\n                                         tcx.sess\n                                             .struct_span_err("}, {"sha": "0523de56512aeeaf2cc7ed01512da03fd0a6c899", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028c83cdf6d6d0054bafaaf85af39bca393a104c/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=028c83cdf6d6d0054bafaaf85af39bca393a104c", "patch": "@@ -1,7 +1,6 @@\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FxHashSet;\n-use rustc::mir::interpret::ConstValue;\n use syntax::source_map::Span;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n@@ -77,7 +76,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n \n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-        if let ConstValue::Param(data) = c.val {\n+        if let ty::ConstKind::Param(data) = c.val {\n             self.parameters.push(Parameter::from(data));\n         }\n         false"}]}