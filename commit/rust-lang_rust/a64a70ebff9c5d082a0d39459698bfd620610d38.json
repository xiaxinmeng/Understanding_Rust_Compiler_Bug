{"sha": "a64a70ebff9c5d082a0d39459698bfd620610d38", "node_id": "C_kwDOAAsO6NoAKGE2NGE3MGViZmY5YzVkMDgyYTBkMzk0NTk2OThiZmQ2MjA2MTBkMzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-12T16:03:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T16:03:12Z"}, "message": "Merge #11967\n\n11967: fix: Fix trait impl completions not triggering after `fn`/`const`/`type` r=jonas-schievink a=jonas-schievink\n\n![screenshot-2022-04-12-17:13:01](https://user-images.githubusercontent.com/1786438/162996087-56540f5e-a6be-4111-a4a5-8de21f483a5e.png)\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11467\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/11860\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "e65b7ef94c5233dac661c2c71d11fea2a672ffe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65b7ef94c5233dac661c2c71d11fea2a672ffe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64a70ebff9c5d082a0d39459698bfd620610d38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVaLACRBK7hj4Ov3rIwAAPb4IAAkNXKcbUD6xZhMHNXV7xA0s\nY0qmZNwDTPJuTOAQhft42GQysFxRGz5QeouU7UCVCDDD35znO0Ot6e5vodN07eLO\n7hfOb5skhvSFf2l8GA8cawbYMKbfbQ06MGEs70KEgZBQHlXSjrXOnwTWOQNuTZbI\ncjya3UypPHOhY1COzNXaSRwD6DABiyYPKMAIcAwLTtfo2lcE+jea0cGdtRQE75WQ\n8eMzgg2TbOfmc7r7VJK0xx9OSFkcU1pavT2sWuIBnhoy7tkK9/SxSmobfUqJBgYr\nlMDfMrZmuWGIk+pkyelQMZd9yYxxuTwWAu0FtvNiA7bZ5IcCFen2HzkTp9laRXU=\n=CG7y\n-----END PGP SIGNATURE-----\n", "payload": "tree e65b7ef94c5233dac661c2c71d11fea2a672ffe8\nparent 49847a25ae086549ef940f0c176f21f4f32ef83b\nparent 3328a0a11bac22629e00e45fd82aadc1396cb40b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649779392 +0000\ncommitter GitHub <noreply@github.com> 1649779392 +0000\n\nMerge #11967\n\n11967: fix: Fix trait impl completions not triggering after `fn`/`const`/`type` r=jonas-schievink a=jonas-schievink\n\n![screenshot-2022-04-12-17:13:01](https://user-images.githubusercontent.com/1786438/162996087-56540f5e-a6be-4111-a4a5-8de21f483a5e.png)\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11467\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/11860\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64a70ebff9c5d082a0d39459698bfd620610d38", "html_url": "https://github.com/rust-lang/rust/commit/a64a70ebff9c5d082a0d39459698bfd620610d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64a70ebff9c5d082a0d39459698bfd620610d38/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49847a25ae086549ef940f0c176f21f4f32ef83b", "url": "https://api.github.com/repos/rust-lang/rust/commits/49847a25ae086549ef940f0c176f21f4f32ef83b", "html_url": "https://github.com/rust-lang/rust/commit/49847a25ae086549ef940f0c176f21f4f32ef83b"}, {"sha": "3328a0a11bac22629e00e45fd82aadc1396cb40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3328a0a11bac22629e00e45fd82aadc1396cb40b", "html_url": "https://github.com/rust-lang/rust/commit/3328a0a11bac22629e00e45fd82aadc1396cb40b"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "8c15aee0ddde1332035a47e93e0ce7957d6eb89c", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a64a70ebff9c5d082a0d39459698bfd620610d38/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64a70ebff9c5d082a0d39459698bfd620610d38/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=a64a70ebff9c5d082a0d39459698bfd620610d38", "patch": "@@ -167,7 +167,7 @@ fn add_function_impl(\n     };\n \n     let mut item = CompletionItem::new(completion_kind, replacement_range, label);\n-    item.lookup_by(fn_name)\n+    item.lookup_by(format!(\"fn {}\", fn_name))\n         .set_documentation(func.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n \n@@ -232,7 +232,7 @@ fn add_type_alias_impl(\n \n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, replacement_range, label);\n     item.text_edit(TextEdit::replace(replacement_range, snippet))\n-        .lookup_by(alias_name)\n+        .lookup_by(format!(\"type {}\", alias_name))\n         .set_documentation(type_alias.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n     item.add_to(acc);\n@@ -261,7 +261,7 @@ fn add_const_impl(\n \n                 let mut item = CompletionItem::new(SymbolKind::Const, replacement_range, label);\n                 item.text_edit(TextEdit::replace(replacement_range, snippet))\n-                    .lookup_by(const_name)\n+                    .lookup_by(format!(\"const {}\", const_name))\n                     .set_documentation(const_.docs(ctx.db))\n                     .set_relevance(CompletionRelevance {\n                         is_item_from_trait: true,\n@@ -549,7 +549,7 @@ impl Test for T {\n     #[test]\n     fn name_ref_single_function() {\n         check_edit(\n-            \"test\",\n+            \"fn test\",\n             r#\"\n trait Test {\n     fn test();\n@@ -578,7 +578,7 @@ impl Test for T {\n     #[test]\n     fn single_function() {\n         check_edit(\n-            \"test\",\n+            \"fn test\",\n             r#\"\n trait Test {\n     fn test();\n@@ -607,7 +607,7 @@ impl Test for T {\n     #[test]\n     fn generic_fn() {\n         check_edit(\n-            \"foo\",\n+            \"fn foo\",\n             r#\"\n trait Test {\n     fn foo<T>();\n@@ -632,7 +632,7 @@ impl Test for T {\n \"#,\n         );\n         check_edit(\n-            \"foo\",\n+            \"fn foo\",\n             r#\"\n trait Test {\n     fn foo<T>() where T: Into<String>;\n@@ -662,7 +662,7 @@ where T: Into<String> {\n     #[test]\n     fn associated_type() {\n         check_edit(\n-            \"SomeType\",\n+            \"type SomeType\",\n             r#\"\n trait Test {\n     type SomeType;\n@@ -687,7 +687,7 @@ impl Test for () {\n     #[test]\n     fn associated_const() {\n         check_edit(\n-            \"SOME_CONST\",\n+            \"const SOME_CONST\",\n             r#\"\n trait Test {\n     const SOME_CONST: u16;\n@@ -709,7 +709,7 @@ impl Test for () {\n         );\n \n         check_edit(\n-            \"SOME_CONST\",\n+            \"const SOME_CONST\",\n             r#\"\n trait Test {\n     const SOME_CONST: u16 = 92;\n@@ -783,9 +783,9 @@ impl Test for T {{\n             \"default type OtherType = i32;\",\n             \"default const OTHER_CONST: i32 = 0;\",\n         ] {\n-            test(\"bar\", \"fn $0\", \"fn bar() {\\n    $0\\n}\", next_sibling);\n-            test(\"Foo\", \"type $0\", \"type Foo = \", next_sibling);\n-            test(\"CONST\", \"const $0\", \"const CONST: u16 = \", next_sibling);\n+            test(\"fn bar\", \"fn $0\", \"fn bar() {\\n    $0\\n}\", next_sibling);\n+            test(\"type Foo\", \"type $0\", \"type Foo = \", next_sibling);\n+            test(\"const CONST\", \"const $0\", \"const CONST: u16 = \", next_sibling);\n         }\n     }\n \n@@ -830,15 +830,15 @@ impl Foo for T {{\n                 ),\n             )\n         };\n-        test(\"function\", \"fn f$0\", \"fn function() {\\n    $0\\n}\");\n-        test(\"Type\", \"type T$0\", \"type Type = \");\n-        test(\"CONST\", \"const C$0\", \"const CONST: i32 = \");\n+        test(\"fn function\", \"fn f$0\", \"fn function() {\\n    $0\\n}\");\n+        test(\"type Type\", \"type T$0\", \"type Type = \");\n+        test(\"const CONST\", \"const C$0\", \"const CONST: i32 = \");\n     }\n \n     #[test]\n     fn generics_are_inlined_in_return_type() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T> {\n     fn function() -> T;\n@@ -867,7 +867,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_in_parameter() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T> {\n     fn function(bar: T);\n@@ -896,7 +896,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_when_part_of_other_types() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T> {\n     fn function(bar: Vec<T>);\n@@ -925,7 +925,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_complex() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait Foo<T, U, V> {\n     fn function(bar: Vec<T>, baz: U) -> Arc<Vec<V>>;\n@@ -954,7 +954,7 @@ impl Foo<u32, Vec<usize>, u8> for Bar {\n     #[test]\n     fn generics_are_inlined_in_associated_const() {\n         check_edit(\n-            \"BAR\",\n+            \"const BAR\",\n             r#\"\n trait Foo<T> {\n     const BAR: T;\n@@ -981,7 +981,7 @@ impl Foo<u32> for Bar {\n     #[test]\n     fn generics_are_inlined_in_where_clause() {\n         check_edit(\n-            \"function\",\n+            \"fn function\",\n             r#\"\n trait SomeTrait<T> {}\n "}]}