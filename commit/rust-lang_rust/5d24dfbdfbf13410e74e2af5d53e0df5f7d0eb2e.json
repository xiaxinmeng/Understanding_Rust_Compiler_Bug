{"sha": "5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjRkZmJkZmJmMTM0MTBlNzRlMmFmNWQ1M2UwZGY1ZjdkMGViMmU=", "commit": {"author": {"name": "Pascal Seitz", "email": "pascal.seitz@gmail.com", "date": "2018-02-11T18:44:47Z"}, "committer": {"name": "Pascal Seitz", "email": "pascal.seitz@gmail.com", "date": "2018-02-13T18:43:56Z"}, "message": "scale WidthHeuristics by max_width\n\nscale WidthHeuristics by max_width", "tree": {"sha": "2050231cf28afa8b9750d719bb2b4992344bb80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2050231cf28afa8b9750d719bb2b4992344bb80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "html_url": "https://github.com/rust-lang/rust/commit/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/comments", "author": {"login": "PSeitz", "id": 1109503, "node_id": "MDQ6VXNlcjExMDk1MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1109503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PSeitz", "html_url": "https://github.com/PSeitz", "followers_url": "https://api.github.com/users/PSeitz/followers", "following_url": "https://api.github.com/users/PSeitz/following{/other_user}", "gists_url": "https://api.github.com/users/PSeitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/PSeitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PSeitz/subscriptions", "organizations_url": "https://api.github.com/users/PSeitz/orgs", "repos_url": "https://api.github.com/users/PSeitz/repos", "events_url": "https://api.github.com/users/PSeitz/events{/privacy}", "received_events_url": "https://api.github.com/users/PSeitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PSeitz", "id": 1109503, "node_id": "MDQ6VXNlcjExMDk1MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1109503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PSeitz", "html_url": "https://github.com/PSeitz", "followers_url": "https://api.github.com/users/PSeitz/followers", "following_url": "https://api.github.com/users/PSeitz/following{/other_user}", "gists_url": "https://api.github.com/users/PSeitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/PSeitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PSeitz/subscriptions", "organizations_url": "https://api.github.com/users/PSeitz/orgs", "repos_url": "https://api.github.com/users/PSeitz/repos", "events_url": "https://api.github.com/users/PSeitz/events{/privacy}", "received_events_url": "https://api.github.com/users/PSeitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f8ee9e66040df6b02bb7cd6bb777ab2fc4069d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8ee9e66040df6b02bb7cd6bb777ab2fc4069d8", "html_url": "https://github.com/rust-lang/rust/commit/8f8ee9e66040df6b02bb7cd6bb777ab2fc4069d8"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "81d1c11f56cc7a7bb9b38a3228fdef6c476234be", "filename": "rustfmt-config/src/config_type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/rustfmt-config%2Fsrc%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/rustfmt-config%2Fsrc%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Fconfig_type.rs?ref=5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "patch": "@@ -359,7 +359,8 @@ macro_rules! create_config {\n \n             fn set_heuristics(&mut self) {\n                 if self.use_small_heuristics.2 {\n-                    self.set().width_heuristics(WidthHeuristics::default());\n+                    let max_width = self.max_width.2;\n+                    self.set().width_heuristics(WidthHeuristics::scaled(max_width));\n                 } else {\n                     self.set().width_heuristics(WidthHeuristics::null());\n                 }"}, {"sha": "3b6dca769d96eb5cb783cb5775a8913970e455e5", "filename": "rustfmt-config/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/rustfmt-config%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/rustfmt-config%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Flib.rs?ref=5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "patch": "@@ -150,7 +150,7 @@ create_config! {\n     file_lines: FileLines, FileLines::all(), false,\n         \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n          via the --file-lines option\";\n-    width_heuristics: WidthHeuristics, WidthHeuristics::default(), false,\n+    width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n         \"'small' heuristic values\";\n }\n "}, {"sha": "396c5e4fc9f29850e470aa16b00a8a2c14429e01", "filename": "rustfmt-config/src/options.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/rustfmt-config%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e/rustfmt-config%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Foptions.rs?ref=5d24dfbdfbf13410e74e2af5d53e0df5f7d0eb2e", "patch": "@@ -220,17 +220,17 @@ impl WidthHeuristics {\n             single_line_if_else_max_width: 0,\n         }\n     }\n-}\n-\n-impl Default for WidthHeuristics {\n-    fn default() -> WidthHeuristics {\n+    // scale the default WidthHeuristics according to max_width\n+    pub fn scaled(max_width: usize) -> WidthHeuristics {\n+        let mut max_width_ratio: f32 = max_width as f32 / 100.0; // 100 is the default width -> default ratio is 1\n+        max_width_ratio = (max_width_ratio * 10.0).round() / 10.0; // round to the closest 0.1\n         WidthHeuristics {\n-            fn_call_width: 60,\n-            struct_lit_width: 18,\n-            struct_variant_width: 35,\n-            array_width: 60,\n-            chain_width: 60,\n-            single_line_if_else_max_width: 50,\n+            fn_call_width: (60.0 * max_width_ratio).round() as usize,\n+            struct_lit_width: (18.0 * max_width_ratio).round() as usize,\n+            struct_variant_width: (35.0 * max_width_ratio).round() as usize,\n+            array_width: (60.0 * max_width_ratio).round() as usize,\n+            chain_width: (60.0 * max_width_ratio).round() as usize,\n+            single_line_if_else_max_width: (50.0 * max_width_ratio).round() as usize,\n         }\n     }\n }"}]}