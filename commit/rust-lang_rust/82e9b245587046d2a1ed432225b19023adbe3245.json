{"sha": "82e9b245587046d2a1ed432225b19023adbe3245", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZTliMjQ1NTg3MDQ2ZDJhMWVkNDMyMjI1YjE5MDIzYWRiZTMyNDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:34:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:36:14Z"}, "message": "Move traits to the new loc", "tree": {"sha": "acabb715858003dcab9af2810065b8fe40095e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acabb715858003dcab9af2810065b8fe40095e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82e9b245587046d2a1ed432225b19023adbe3245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82e9b245587046d2a1ed432225b19023adbe3245", "html_url": "https://github.com/rust-lang/rust/commit/82e9b245587046d2a1ed432225b19023adbe3245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82e9b245587046d2a1ed432225b19023adbe3245/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0644d81e52d00a7a6795b187f356213ff68225", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0644d81e52d00a7a6795b187f356213ff68225", "html_url": "https://github.com/rust-lang/rust/commit/7b0644d81e52d00a7a6795b187f356213ff68225"}], "stats": {"total": 105, "additions": 70, "deletions": 35}, "files": [{"sha": "78c7792bf3e8afc23196cd4b6ed609fb118260dd", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -577,7 +577,7 @@ pub struct Trait {\n \n impl Trait {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {"}, {"sha": "0cf4bcae15b8b87b40d84c36b0c0418dd070bf11", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -44,8 +44,10 @@ impl FromSource for Enum {\n impl FromSource for Trait {\n     type Ast = ast::TraitDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Trait { id })\n+        // XXX: use `.parent()` to avoid finding ourselves\n+        let parent = src.value.syntax().parent()?;\n+        let container = Container::find(db, src.with_value(parent).as_ref())?;\n+        container.child_by_source(db)[keys::TRAIT].get(&src).copied().map(Trait::from)\n     }\n }\n impl FromSource for Function {"}, {"sha": "c4c6d66b7568e2c19d4a8ecb96dcaf264f96c42e", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -93,7 +93,7 @@ impl HasSource for Static {\n impl HasSource for Trait {\n     type Ast = ast::TraitDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::TraitDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for TypeAlias {"}, {"sha": "3347d819c707d0c124f8d11ba2e04cdd35600943", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -60,7 +60,7 @@ impl Attrs {\n                 AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n                 AdtId::UnionId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             },\n-            AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::TraitId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::MacroDefId(it) => {\n                 it.ast_id.map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n             }"}, {"sha": "88c2d3f242ded649633f396bcc8262c543744766", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -94,6 +94,10 @@ impl ChildBySource for ModuleId {\n                     let src = ty.lookup(db).source(db);\n                     res[keys::TYPE_ALIAS].insert(src, ty)\n                 }\n+                ModuleDefId::TraitId(trait_) => {\n+                    let src = trait_.lookup(db).source(db);\n+                    res[keys::TRAIT].insert(src, trait_)\n+                }\n                 _ => (),\n             }\n         }"}, {"sha": "b2dac183e3bdbd077b06616ad4bc9d81af7dce7a", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     db::DefDatabase,\n     src::HasSource,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, AstItemDef, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId,\n-    Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocItemId, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId, Intern, Lookup,\n+    StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -94,7 +94,7 @@ pub struct TraitData {\n \n impl TraitData {\n     pub(crate) fn trait_data_query(db: &impl DefDatabase, tr: TraitId) -> Arc<TraitData> {\n-        let src = tr.source(db);\n+        let src = tr.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let auto = src.value.is_auto();\n         let ast_id_map = db.ast_id_map(src.file_id);"}, {"sha": "f0c2ae559a5540bb51b3536ffaffb8664b6ee85d", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -18,8 +18,8 @@ use crate::{\n         CrateDefMap,\n     },\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TypeAliasId,\n-    TypeAliasLoc, UnionId,\n+    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TraitLoc,\n+    TypeAliasId, TypeAliasLoc, UnionId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -37,7 +37,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_static(&self, loc: StaticLoc) -> StaticId;\n     #[salsa::interned]\n-    fn intern_trait(&self, loc: ItemLoc<ast::TraitDef>) -> TraitId;\n+    fn intern_trait(&self, loc: TraitLoc) -> TraitId;\n     #[salsa::interned]\n     fn intern_type_alias(&self, loc: TypeAliasLoc) -> TypeAliasId;\n     #[salsa::interned]"}, {"sha": "1921681fbd8b9847c982e9ca0e1427618a801cbf", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -59,7 +59,7 @@ impl Documentation {\n                 let src = it.parent.child_source(db);\n                 docs_from_ast(&src.value[it.local_id])\n             }\n-            AttrDefId::TraitId(it) => docs_from_ast(&it.source(db).value),\n+            AttrDefId::TraitId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::MacroDefId(it) => docs_from_ast(&it.ast_id?.to_node(db)),\n             AttrDefId::ConstId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::StaticId(it) => docs_from_ast(&it.lookup(db).source(db).value),"}, {"sha": "cbfc3ff049184bb05961738ee8459f59ad337cab", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -86,7 +86,7 @@ impl GenericParams {\n                 src.file_id\n             }\n             GenericDefId::TraitId(it) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n \n                 // traits get the Self type as an implicit first type parameter\n                 let self_param_id ="}, {"sha": "6ec58f5f9a3974a20c971c3767e5534329d783b8", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -8,7 +8,8 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, TypeAliasId, TypeParamId,\n+    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, TraitId, TypeAliasId,\n+    TypeParamId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -18,6 +19,7 @@ pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplBlock, ImplId> = Key::new();\n+pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();"}, {"sha": "0fcc2cde4977c3bbfe6cb91c8cc7ad064cb8fd49", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -253,12 +253,24 @@ impl Lookup for StaticId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TraitId(salsa::InternId);\n impl_intern_key!(TraitId);\n-impl AstItemDef<ast::TraitDef> for TraitId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n-        db.intern_trait(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TraitLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::TraitDef>,\n+}\n+\n+impl Intern for TraitLoc {\n+    type ID = TraitId;\n+    fn intern(self, db: &impl db::DefDatabase) -> TraitId {\n+        db.intern_trait(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TraitDef> {\n-        db.lookup_intern_trait(self)\n+}\n+\n+impl Lookup for TraitId {\n+    type Data = TraitLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> TraitLoc {\n+        db.lookup_intern_trait(*self)\n     }\n }\n \n@@ -492,7 +504,7 @@ impl HasModule for FunctionLoc {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -502,7 +514,7 @@ impl HasModule for TypeAliasLoc {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -512,7 +524,7 @@ impl HasModule for ConstLoc {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -542,7 +554,7 @@ impl HasModule for GenericDefId {\n         match self {\n             GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n             GenericDefId::AdtId(it) => it.module(db),\n-            GenericDefId::TraitId(it) => it.module(db),\n+            GenericDefId::TraitId(it) => it.lookup(db).container,\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n             GenericDefId::EnumVariantId(it) => it.parent.module(db),"}, {"sha": "a7bdd620b428b3b14ba20293e94acc382544b977", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     per_ns::PerNs,\n     AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplLoc,\n     Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n-    TraitId, TypeAliasLoc, UnionId,\n+    TraitLoc, TypeAliasLoc, UnionId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -796,7 +796,12 @@ where\n \n                 PerNs::values(def.into())\n             }\n-            raw::DefKind::Trait(ast_id) => PerNs::types(TraitId::from_ast_id(ctx, ast_id).into()),\n+            raw::DefKind::Trait(ast_id) => {\n+                let def = TraitLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+\n+                PerNs::types(def.into())\n+            }\n             raw::DefKind::TypeAlias(ast_id) => {\n                 let def = TypeAliasLoc {\n                     container: ContainerId::ModuleId(module),"}, {"sha": "17b2169d2a527e49b016d8223de3f422a5f73677", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -17,9 +17,9 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{Path, PathKind},\n     per_ns::PerNs,\n-    AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId,\n-    StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n+    HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -524,7 +524,7 @@ impl HasResolver for ModuleId {\n \n impl HasResolver for TraitId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db).resolver(db).push_generic_params_scope(db, self.into())\n+        self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n "}, {"sha": "858e4861eb69ea34c8fb6cf2d1e0ab95d124cd52", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -4,7 +4,7 @@ use hir_expand::InFile;\n use ra_arena::map::ArenaMap;\n use ra_syntax::ast;\n \n-use crate::{db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, TypeAliasLoc};\n+use crate::{db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, TraitLoc, TypeAliasLoc};\n \n pub trait HasSource {\n     type Value;\n@@ -56,6 +56,15 @@ impl HasSource for ImplLoc {\n     }\n }\n \n+impl HasSource for TraitLoc {\n+    type Value = ast::TraitDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::TraitDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "be5f3cbe35eee9b4735c7ec17a865950d6431a7a", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -367,6 +367,9 @@ mod tests {\n             BuiltinFnLikeExpander::FormatArgs,\n         );\n \n-        assert_eq!(expanded, r#\"std::fmt::Arguments::new_v1(&[] ,&[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#);\n+        assert_eq!(\n+            expanded,\n+            r#\"std::fmt::Arguments::new_v1(&[] ,&[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#\n+        );\n     }\n }"}, {"sha": "fc21872b2bd15bfd28ea411fd95744d8fd593ff5", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e9b245587046d2a1ed432225b19023adbe3245/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=82e9b245587046d2a1ed432225b19023adbe3245", "patch": "@@ -9,9 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{\n-    AssocItemId, AstItemDef, ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId,\n-};\n+use hir_def::{AssocItemId, ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId};\n use ra_db::{\n     salsa::{InternId, InternKey},\n     CrateId,\n@@ -593,7 +591,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.module(db).krate != krate,\n+        upstream: trait_.lookup(db).container.krate != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME set these flags correctly"}]}