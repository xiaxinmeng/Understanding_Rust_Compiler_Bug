{"sha": "39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTEyNmMwMDEzY2EwM2E2YjBhYmZjYWQ3ZmRiZTM2MWU2M2I2ZTc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-11-28T11:49:06Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-13T19:50:40Z"}, "message": "Refactoring alpha-rename  `place` (`BorrowData` field) to `borrowed_place`.", "tree": {"sha": "5f99ec1e6f52c43e212b4d3a4f5318b1bfe9cb18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f99ec1e6f52c43e212b4d3a4f5318b1bfe9cb18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "html_url": "https://github.com/rust-lang/rust/commit/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e123117cb7c1b7f8854858721ccbdbca4e918061", "url": "https://api.github.com/repos/rust-lang/rust/commits/e123117cb7c1b7f8854858721ccbdbca4e918061", "html_url": "https://github.com/rust-lang/rust/commit/e123117cb7c1b7f8854858721ccbdbca4e918061"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1d5e09b164a1c8020c5aabb9745e43dfad8d8c94", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "patch": "@@ -96,7 +96,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n-        let borrow_msg = match self.describe_place(&borrow.place) {\n+        let borrow_msg = match self.describe_place(&borrow.borrowed_place) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n@@ -124,7 +124,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             span,\n             &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n             self.retrieve_borrow_span(borrow),\n-            &self.describe_place(&borrow.place).unwrap_or(\"_\".to_owned()),\n+            &self.describe_place(&borrow.borrowed_place).unwrap_or(\"_\".to_owned()),\n             Origin::Mir,\n         );\n \n@@ -328,7 +328,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ) {\n         let end_span = borrows.opt_region_end_span(&borrow.region);\n         let scope_tree = borrows.scope_tree();\n-        let root_place = self.prefixes(&borrow.place, PrefixSet::All).last().unwrap();\n+        let root_place = self.prefixes(&borrow.borrowed_place, PrefixSet::All).last().unwrap();\n \n         match root_place {\n             &Place::Local(local) => {\n@@ -357,7 +357,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => drop_span,\n         };\n \n-        match (borrow.region, &self.describe_place(&borrow.place)) {\n+        match (borrow.region, &self.describe_place(&borrow.borrowed_place)) {\n             (RegionKind::ReScope(_), Some(name)) => {\n                 self.report_scoped_local_value_does_not_live_long_enough(\n                     name, &scope_tree, &borrow, drop_span, borrow_span, proper_span, end_span);"}, {"sha": "98f974aba506833eb1a7527c6e3883d78ea22353", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "patch": "@@ -917,7 +917,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                       flow_state: &Flows<'cx, 'gcx, 'tcx>)\n     {\n         debug!(\"check_for_invalidation_at_exit({:?})\", borrow);\n-        let place = &borrow.place;\n+        let place = &borrow.borrowed_place;\n         let root_place = self.prefixes(place, PrefixSet::All).last().unwrap();\n \n         // FIXME(nll-rfc#40): do more precise destructor tracking here. For now\n@@ -1792,7 +1792,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         for i in flow_state.borrows.elems_incoming() {\n             let borrowed = &data[i];\n \n-            if self.places_conflict(&borrowed.place, place, access) {\n+            if self.places_conflict(&borrowed.borrowed_place, place, access) {\n                 let ctrl = op(self, i, borrowed);\n                 if ctrl == Control::Break { return; }\n             }"}, {"sha": "e6a682e1be919d84179d8f44345cda9b795f445a", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e126c0013ca03a6b0abfcad7fdbe361e63b6e7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=39e126c0013ca03a6b0abfcad7fdbe361e63b6e7", "patch": "@@ -49,15 +49,15 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n }\n \n // temporarily allow some dead fields: `kind` and `region` will be\n-// needed by borrowck; `place` will probably be a MovePathIndex when\n+// needed by borrowck; `borrowed_place` will probably be a MovePathIndex when\n // that is extended to include borrowed data paths.\n #[allow(dead_code)]\n #[derive(Debug)]\n pub struct BorrowData<'tcx> {\n     pub(crate) location: Location,\n     pub(crate) kind: mir::BorrowKind,\n     pub(crate) region: Region<'tcx>,\n-    pub(crate) place: mir::Place<'tcx>,\n+    pub(crate) borrowed_place: mir::Place<'tcx>,\n }\n \n impl<'tcx> fmt::Display for BorrowData<'tcx> {\n@@ -69,7 +69,7 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n         };\n         let region = format!(\"{}\", self.region);\n         let region = if region.len() > 0 { format!(\"{} \", region) } else { region };\n-        write!(w, \"&{}{}{:?}\", region, kind, self.place)\n+        write!(w, \"&{}{}{:?}\", region, kind, self.borrowed_place)\n     }\n }\n \n@@ -131,7 +131,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     if is_unsafe_place(self.tcx, self.mir, place) { return; }\n \n                     let borrow = BorrowData {\n-                        location: location, kind: kind, region: region, place: place.clone(),\n+                        location, kind, region, borrowed_place: place.clone(),\n                     };\n                     let idx = self.idx_vec.push(borrow);\n                     self.location_map.insert(location, idx);"}]}