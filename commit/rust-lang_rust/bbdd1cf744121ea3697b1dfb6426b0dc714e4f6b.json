{"sha": "bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZGQxY2Y3NDQxMjFlYTM2OTdiMWRmYjY0MjZiMGRjNzE0ZTRmNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-22T02:18:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-22T02:18:41Z"}, "message": "Auto merge of #49757 - GuillaumeGomez:never-search, r=QuietMisdreavus\n\nAdd specific never search\n\nFixes #49529.\n\nr? @QuietMisdreavus", "tree": {"sha": "3843e10ed381f0964fe54612b73d342f30eebda8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3843e10ed381f0964fe54612b73d342f30eebda8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "html_url": "https://github.com/rust-lang/rust/commit/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5616e1f18abb46071581d096994a0ff6581e3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5616e1f18abb46071581d096994a0ff6581e3f9", "html_url": "https://github.com/rust-lang/rust/commit/d5616e1f18abb46071581d096994a0ff6581e3f9"}, {"sha": "1ed3e77b8a254fd9cbf8f922d1f910d375a9d1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed3e77b8a254fd9cbf8f922d1f910d375a9d1e4", "html_url": "https://github.com/rust-lang/rust/commit/1ed3e77b8a254fd9cbf8f922d1f910d375a9d1e4"}], "stats": {"total": 304, "additions": 293, "deletions": 11}, "files": [{"sha": "7f110d6a3d22c20e4550047121fad058f565312e", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -373,3 +373,19 @@ This is an internal flag intended for the standard library and compiler that app\n `#[unstable]` attribute to any dependent crate that doesn't have another stability attribute. This\n allows `rustdoc` to be able to generate documentation for the compiler crates and the standard\n library, as an equivalent command-line argument is provided to `rustc` when building those crates.\n+\n+### `doc_alias` feature\n+\n+This feature allows you to add alias(es) to an item when using the `rustdoc` search through the\n+`doc(alias)` attribute. Example:\n+\n+```rust,no_run\n+#![feature(doc_alias)]\n+\n+#[doc(alias = \"x\")]\n+#[doc(alias = \"big\")]\n+pub struct BigX;\n+```\n+\n+Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n+\"big\", search will show the `BigX` struct first."}, {"sha": "647ac0cf663fdc4cedc99dafe239bed8e4d16989", "filename": "src/doc/unstable-book/src/language-features/doc-alias.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-alias.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-alias.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-alias.md?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,23 @@\n+# `doc_alias`\n+\n+The tracking issue for this feature is: [#50146]\n+\n+[#50146]: https://github.com/rust-lang/rust/issues/50146\n+\n+------------------------\n+\n+You can add alias(es) to an item when using the `rustdoc` search through the\n+`doc(alias)` attribute. Example:\n+\n+```rust,no_run\n+#![feature(doc_alias)]\n+\n+#[doc(alias = \"x\")]\n+#[doc(alias = \"big\")]\n+pub struct BigX;\n+```\n+\n+Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n+\"big\", search will show the `BigX` struct first.\n+\n+Note that this feature is currently hidden behind the `feature(doc_alias)` gate."}, {"sha": "7da5d9f76b55a0acc930ba2757b299665fcbb847", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -102,6 +102,7 @@\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n+#![feature(doc_alias)]\n \n #![cfg_attr(not(stage0), feature(mmx_target_feature))]\n #![cfg_attr(not(stage0), feature(tbm_target_feature))]"}, {"sha": "346d404fa8c5924d5e6dd8186792ab40bdc275d5", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -295,6 +295,7 @@ macro_rules! debug_assert_ne {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"?\")]\n macro_rules! try {\n     ($expr:expr) => (match $expr {\n         $crate::result::Result::Ok(val) => val,"}, {"sha": "a1f6030428f1ef073b7d95d8fe4fa9ca37e01291", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -87,6 +87,7 @@\n     message=\"cannot add `{RHS}` to `{Self}`\",\n     label=\"no implementation for `{Self} + {RHS}`\",\n )]\n+#[doc(alias = \"+\")]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -183,6 +184,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot subtract `{RHS}` from `{Self}`\",\n                          label=\"no implementation for `{Self} - {RHS}`\")]\n+#[doc(alias = \"-\")]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -301,6 +303,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n                          label=\"no implementation for `{Self} * {RHS}`\")]\n+#[doc(alias = \"*\")]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -423,6 +426,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n                          label=\"no implementation for `{Self} / {RHS}`\")]\n+#[doc(alias = \"/\")]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -506,6 +510,7 @@ div_impl_float! { f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n                          label=\"no implementation for `{Self} % {RHS}`\")]\n+#[doc(alias = \"%\")]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -589,6 +594,7 @@ rem_impl_float! { f32 f64 }\n /// ```\n #[lang = \"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"-\")]\n pub trait Neg {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -664,6 +670,8 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot add-assign `{Rhs}` to `{Self}`\",\n                          label=\"no implementation for `{Self} += {Rhs}`\")]\n+#[doc(alias = \"+\")]\n+#[doc(alias = \"+=\")]\n pub trait AddAssign<Rhs=Self> {\n     /// Performs the `+=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -718,6 +726,8 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot subtract-assign `{Rhs}` from `{Self}`\",\n                          label=\"no implementation for `{Self} -= {Rhs}`\")]\n+#[doc(alias = \"-\")]\n+#[doc(alias = \"-=\")]\n pub trait SubAssign<Rhs=Self> {\n     /// Performs the `-=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -763,6 +773,8 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot multiply-assign `{Rhs}` to `{Self}`\",\n                          label=\"no implementation for `{Self} *= {Rhs}`\")]\n+#[doc(alias = \"*\")]\n+#[doc(alias = \"*=\")]\n pub trait MulAssign<Rhs=Self> {\n     /// Performs the `*=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -808,6 +820,8 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot divide-assign `{Self}` by `{Rhs}`\",\n                          label=\"no implementation for `{Self} /= {Rhs}`\")]\n+#[doc(alias = \"/\")]\n+#[doc(alias = \"/=\")]\n pub trait DivAssign<Rhs=Self> {\n     /// Performs the `/=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -856,6 +870,8 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot mod-assign `{Self}` by `{Rhs}``\",\n                          label=\"no implementation for `{Self} %= {Rhs}`\")]\n+#[doc(alias = \"%\")]\n+#[doc(alias = \"%=\")]\n pub trait RemAssign<Rhs=Self> {\n     /// Performs the `%=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "0a0e92a91800614a75608bd7099eb2e4fe79ab54", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -62,6 +62,9 @@\n #[lang = \"index\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"]\")]\n+#[doc(alias = \"[\")]\n+#[doc(alias = \"[]\")]\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -146,6 +149,9 @@ pub trait Index<Idx: ?Sized> {\n #[lang = \"index_mut\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"[\")]\n+#[doc(alias = \"]\")]\n+#[doc(alias = \"[]\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4f2d30aa6a8a77b79fe8401f7acfed8904c38b86", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -28,6 +28,7 @@\n                that implement `{Try}`\",\n       label=\"the `?` operator cannot be applied to type `{Self}`\")\n )]\n+#[doc(alias = \"?\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "537828de2c7f35fd56bdabc7a4e89b5400c60675", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -19,7 +19,7 @@ use clean;\n /// discriminants. JavaScript then is used to decode them into the original value.\n /// Consequently, every change to this type should be synchronized to\n /// the `itemTypes` mapping table in `static/main.js`.\n-#[derive(Copy, PartialEq, Clone)]\n+#[derive(Copy, PartialEq, Clone, Debug)]\n pub enum ItemType {\n     Module          = 0,\n     ExternCrate     = 1,"}, {"sha": "1880baeddf4daa6d21c9c791e8e8375c8164019e", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -145,6 +145,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     </script>\\\n     <script src=\\\"{root_path}main{suffix}.js\\\"></script>\\\n     <script defer src=\\\"{root_path}search-index.js\\\"></script>\\\n+    <script defer src=\\\"{root_path}aliases.js\\\"></script>\\\n </body>\\\n </html>\",\n     css_extension = if css_file_extension {"}, {"sha": "09a11073a3950a0e667672c8081f0a0c652e5847", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 78, "deletions": 6, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -329,6 +329,10 @@ pub struct Cache {\n     // yet when its implementation methods are being indexed. Caches such methods\n     // and their parent id here and indexes them at the end of crate parsing.\n     orphan_impl_items: Vec<(DefId, clean::Item)>,\n+\n+    /// Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n+    /// we need the alias element to have an array of items.\n+    aliases: FxHashMap<String, Vec<IndexItem>>,\n }\n \n /// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n@@ -369,6 +373,7 @@ struct Sidebar<'a> { cx: &'a Context, item: &'a clean::Item, }\n \n /// Struct representing one entry in the JS search index. These are all emitted\n /// by hand to a large JS file at the end of cache-creation.\n+#[derive(Debug)]\n struct IndexItem {\n     ty: ItemType,\n     name: String,\n@@ -396,6 +401,7 @@ impl ToJson for IndexItem {\n }\n \n /// A type used for the search index.\n+#[derive(Debug)]\n struct Type {\n     name: Option<String>,\n     generics: Option<Vec<String>>,\n@@ -418,9 +424,10 @@ impl ToJson for Type {\n }\n \n /// Full type of functions/methods in the search index.\n+#[derive(Debug)]\n struct IndexItemFunctionType {\n     inputs: Vec<Type>,\n-    output: Option<Type>\n+    output: Option<Type>,\n }\n \n impl ToJson for IndexItemFunctionType {\n@@ -609,6 +616,7 @@ pub fn run(mut krate: clean::Crate,\n         owned_box_did,\n         masked_crates: mem::replace(&mut krate.masked_crates, FxHashSet()),\n         typarams: external_typarams,\n+        aliases: FxHashMap(),\n     };\n \n     // Cache where all our extern crates are located\n@@ -847,8 +855,7 @@ themePicker.onclick = function() {{\n     write(cx.dst.join(\"COPYRIGHT.txt\"),\n           include_bytes!(\"static/COPYRIGHT.txt\"))?;\n \n-    fn collect(path: &Path, krate: &str,\n-               key: &str) -> io::Result<Vec<String>> {\n+    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<Vec<String>> {\n         let mut ret = Vec::new();\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n@@ -865,6 +872,40 @@ themePicker.onclick = function() {{\n         Ok(ret)\n     }\n \n+    fn show_item(item: &IndexItem, krate: &str) -> String {\n+        format!(\"{{'crate':'{}','ty':{},'name':'{}','path':'{}'{}}}\",\n+                krate, item.ty as usize, item.name, item.path,\n+                if let Some(p) = item.parent_idx {\n+                    format!(\",'parent':{}\", p)\n+                } else {\n+                    String::new()\n+                })\n+    }\n+\n+    let dst = cx.dst.join(\"aliases.js\");\n+    {\n+        let mut all_aliases = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n+        let mut w = try_err!(File::create(&dst), &dst);\n+        let mut output = String::with_capacity(100);\n+        for (alias, items) in &cache.aliases {\n+            if items.is_empty() {\n+                continue\n+            }\n+            output.push_str(&format!(\"\\\"{}\\\":[{}],\",\n+                                     alias,\n+                                     items.iter()\n+                                          .map(|v| show_item(v, &krate.name))\n+                                          .collect::<Vec<_>>()\n+                                          .join(\",\")));\n+        }\n+        all_aliases.push(format!(\"ALIASES['{}'] = {{{}}};\", krate.name, output));\n+        all_aliases.sort();\n+        try_err!(writeln!(&mut w, \"var ALIASES = {{}};\"), &dst);\n+        for aliases in &all_aliases {\n+            try_err!(writeln!(&mut w, \"{}\", aliases), &dst);\n+        }\n+    }\n+\n     // Update the search index\n     let dst = cx.dst.join(\"search-index.js\");\n     let mut all_indexes = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n@@ -1251,13 +1292,13 @@ impl DocFolder for Cache {\n                 // `public_items` map, so we can skip inserting into the\n                 // paths map if there was already an entry present and we're\n                 // not a public item.\n-                if\n-                    !self.paths.contains_key(&item.def_id) ||\n-                    self.access_levels.is_public(item.def_id)\n+                if !self.paths.contains_key(&item.def_id) ||\n+                   self.access_levels.is_public(item.def_id)\n                 {\n                     self.paths.insert(item.def_id,\n                                       (self.stack.clone(), item.type_()));\n                 }\n+                self.add_aliases(&item);\n             }\n             // Link variants to their parent enum because pages aren't emitted\n             // for each variant.\n@@ -1268,6 +1309,7 @@ impl DocFolder for Cache {\n             }\n \n             clean::PrimitiveItem(..) if item.visibility.is_some() => {\n+                self.add_aliases(&item);\n                 self.paths.insert(item.def_id, (self.stack.clone(),\n                                                 item.type_()));\n             }\n@@ -1372,6 +1414,36 @@ impl<'a> Cache {\n             }\n         }\n     }\n+\n+    fn add_aliases(&mut self, item: &clean::Item) {\n+        if item.def_id.index == CRATE_DEF_INDEX {\n+            return\n+        }\n+        if let Some(ref item_name) = item.name {\n+            let path = self.paths.get(&item.def_id)\n+                                 .map(|p| p.0.join(\"::\").to_string())\n+                                 .unwrap_or(\"std\".to_owned());\n+            for alias in item.attrs.lists(\"doc\")\n+                                   .filter(|a| a.check_name(\"alias\"))\n+                                   .filter_map(|a| a.value_str()\n+                                                    .map(|s| s.to_string().replace(\"\\\"\", \"\")))\n+                                   .filter(|v| !v.is_empty())\n+                                   .collect::<FxHashSet<_>>()\n+                                   .into_iter() {\n+                self.aliases.entry(alias)\n+                            .or_insert(Vec::with_capacity(1))\n+                            .push(IndexItem {\n+                                ty: item.type_(),\n+                                name: item_name.to_string(),\n+                                path: path.clone(),\n+                                desc: String::new(),\n+                                parent: None,\n+                                parent_idx: None,\n+                                search_type: get_index_search_type(&item),\n+                            });\n+            }\n+        }\n+    }\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]"}, {"sha": "962ff14d09aefd73f80c7e216b7e639d747d0666", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -1012,11 +1012,21 @@\n                 }\n             }\n \n-            return {\n+            var ret = {\n                 'in_args': sortResults(results_in_args, true),\n                 'returned': sortResults(results_returned, true),\n                 'others': sortResults(results),\n             };\n+            if (ALIASES[window.currentCrate][query.raw]) {\n+                var aliases = ALIASES[window.currentCrate][query.raw];\n+                for (var i = 0; i < aliases.length; ++i) {\n+                    ret['others'].unshift(aliases[i]);\n+                    if (ret['others'].length > MAX_RESULTS) {\n+                        ret['others'].pop();\n+                    }\n+                }\n+            }\n+            return ret;\n         }\n \n         /**\n@@ -1197,11 +1207,13 @@\n                 array.forEach(function(item) {\n                     var name, type, href, displayPath;\n \n-                    if (shown.indexOf(item) !== -1) {\n+                    var id_ty = item.ty + item.path + item.name;\n+                    if (shown.indexOf(id_ty) !== -1) {\n                         return;\n                     }\n \n-                    shown.push(item);\n+                    console.log(item);\n+                    shown.push(id_ty);\n                     name = item.name;\n                     type = itemTypes[item.ty];\n \n@@ -1369,7 +1381,7 @@\n \n         function search(e) {\n             var params = getQueryStringParams();\n-            var query = getQuery(document.getElementsByClassName('search-input')[0].value);\n+            var query = getQuery(document.getElementsByClassName('search-input')[0].value.trim());\n \n             if (e) {\n                 e.preventDefault();"}, {"sha": "43a8d4446fa46ccb66db2da313aafe596342c00a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -319,6 +319,7 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n+#![feature(doc_alias)]\n \n #![default_lib_allocator]\n "}, {"sha": "919d964829718f0c0653e88086137a579bb317bf", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #[doc(primitive = \"bool\")]\n+#[doc(alias = \"true\")]\n+#[doc(alias = \"false\")]\n //\n /// The boolean type.\n ///\n@@ -68,6 +70,7 @@\n mod prim_bool { }\n \n #[doc(primitive = \"never\")]\n+#[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n ///\n@@ -501,6 +504,9 @@ mod prim_pointer { }\n mod prim_array { }\n \n #[doc(primitive = \"slice\")]\n+#[doc(alias = \"[\")]\n+#[doc(alias = \"]\")]\n+#[doc(alias = \"[]\")]\n //\n /// A dynamically-sized view into a contiguous sequence, `[T]`.\n ///\n@@ -599,6 +605,9 @@ mod prim_slice { }\n mod prim_str { }\n \n #[doc(primitive = \"tuple\")]\n+#[doc(alias = \"(\")]\n+#[doc(alias = \")\")]\n+#[doc(alias = \"()\")]\n //\n /// A finite heterogeneous sequence, `(T, U, ..)`.\n ///\n@@ -821,6 +830,7 @@ mod prim_isize { }\n mod prim_usize { }\n \n #[doc(primitive = \"reference\")]\n+#[doc(alias = \"&\")]\n //\n /// References, both shared and mutable.\n ///"}, {"sha": "e4bfdf25001a86edb9ed9372f2a49ad7a146e6b1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -463,6 +463,9 @@ declare_features! (\n     (active, proc_macro_mod, \"1.27.0\", None, None),\n     (active, proc_macro_expr, \"1.27.0\", None, None),\n     (active, proc_macro_non_items, \"1.27.0\", None, None),\n+\n+    // #[doc(alias = \"...\")]\n+    (active, doc_alias, \"1.27.0\", Some(50146), None),\n );\n \n declare_features! (\n@@ -1458,6 +1461,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, doc_spotlight, attr.span,\n                         \"#[doc(spotlight)] is experimental\"\n                     );\n+                } else if content.iter().any(|c| c.check_name(\"alias\")) {\n+                    gate_feature_post!(&self, doc_alias, attr.span,\n+                        \"#[doc(alias = \\\"...\\\")] is experimental\"\n+                    );\n                 }\n             }\n         }"}, {"sha": "496bd559b877f2ff8405607e3b01e2869baa193f", "filename": "src/test/rustdoc-js/alias-1.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias-1.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias-1.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Falias-1.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = '&';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'reference' },\n+    ],\n+};"}, {"sha": "f31786df67cc35d39fe22b4f43dc3b2802d36431", "filename": "src/test/rustdoc-js/alias-2.js", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias-2.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias-2.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Falias-2.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = '+';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::ops::AddAssign', 'name': 'AddAssign' },\n+        { 'path': 'std::ops::Add', 'name': 'Add' },\n+    ],\n+};"}, {"sha": "d9e1ca5f760d5bce368dfffe2737d1170f349855", "filename": "src/test/rustdoc-js/alias-3.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias-3.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias-3.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Falias-3.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = '!';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'never' },\n+    ],\n+};"}, {"sha": "a0500f24c17ee61454872cd88649595be78403b8", "filename": "src/test/rustdoc-js/alias.js", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Falias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Falias.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = '[';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'slice' },\n+        { 'path': 'std::ops::IndexMut', 'name': 'IndexMut' },\n+        { 'path': 'std::ops::Index', 'name': 'Index' },\n+    ],\n+};"}, {"sha": "d9e1ca5f760d5bce368dfffe2737d1170f349855", "filename": "src/test/rustdoc-js/never.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Fnever.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Frustdoc-js%2Fnever.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fnever.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = '!';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'never' },\n+    ],\n+};"}, {"sha": "1503dfe81fb7ddbf38002fcf999a389cc6506231", "filename": "src/test/ui/feature-gate-doc_alias.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Fui%2Ffeature-gate-doc_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Fui%2Ffeature-gate-doc_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_alias.rs?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(alias = \"foo\")] //~ ERROR: #[doc(alias = \"...\")] is experimental\n+pub struct Foo;\n+\n+fn main() {}"}, {"sha": "a987e03c0aaf1b854ad88b064d180204084c7928", "filename": "src/test/ui/feature-gate-doc_alias.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Fui%2Ffeature-gate-doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftest%2Fui%2Ffeature-gate-doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_alias.stderr?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: #[doc(alias = \"...\")] is experimental (see issue #50146)\n+  --> $DIR/feature-gate-doc_alias.rs:11:1\n+   |\n+LL | #[doc(alias = \"foo\")] //~ ERROR: #[doc(alias = \"...\")] is experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(doc_alias)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6992f2ba123378d481baa367a5947e30f8f32d6d", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=bbdd1cf744121ea3697b1dfb6426b0dc714e4f6b", "patch": "@@ -144,6 +144,7 @@ function main(argv) {\n     var toolchain = argv[2];\n \n     var mainJs = readFile(\"build/\" + toolchain + \"/doc/main.js\");\n+    var ALIASES = readFile(\"build/\" + toolchain + \"/doc/aliases.js\");\n     var searchIndex = readFile(\"build/\" + toolchain + \"/doc/search-index.js\").split(\"\\n\");\n     if (searchIndex[searchIndex.length - 1].length === 0) {\n         searchIndex.pop();\n@@ -161,6 +162,7 @@ function main(argv) {\n                            \"execSearch\"];\n \n     finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += ALIASES;\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);"}]}