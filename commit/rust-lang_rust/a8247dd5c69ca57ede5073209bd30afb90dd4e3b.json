{"sha": "a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MjQ3ZGQ1YzY5Y2E1N2VkZTUwNzMyMDliZDMwYWZiOTBkZDRlM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-19T13:46:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-19T13:46:15Z"}, "message": "Auto merge of #52197 - euclio:exit-code, r=oli-obk\n\noverhaul exit codes for rustc and rustdoc\n\nThis commit changes the exit status of rustc to 1 in the presence of\ncompilation errors. In the event of an unexpected panic (ICE) the\nstandard panic error exit status of 101 remains.\n\nA run-make test is added to ensure that the exit code does not regress,\nand compiletest is updated to check for an exit status of 1 or 101,\ndepending on the mode and suite.\n\nThis is a breaking change for custom drivers.\n\nNote that while changes were made to the rustdoc binary, there is no\nintended behavior change. rustdoc errors (i.e., failed lints) will still\nreport 101. While this could *also* hide potential ICEs, I will leave\nthat work to a future PR.\n\nFixes #51971.", "tree": {"sha": "9e4448039b750a3c9f4ab55d8ece746bca816890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4448039b750a3c9f4ab55d8ece746bca816890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "html_url": "https://github.com/rust-lang/rust/commit/a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba21844f6c85a0cd55c8ea0250d5cd758134f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba21844f6c85a0cd55c8ea0250d5cd758134f84", "html_url": "https://github.com/rust-lang/rust/commit/5ba21844f6c85a0cd55c8ea0250d5cd758134f84"}, {"sha": "8f4ccac5e24ab9f0a786a87eb08d633c28d076ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4ccac5e24ab9f0a786a87eb08d633c28d076ef", "html_url": "https://github.com/rust-lang/rust/commit/8f4ccac5e24ab9f0a786a87eb08d633c28d076ef"}], "stats": {"total": 135, "additions": 110, "deletions": 25}, "files": [{"sha": "f60954ea02166398216ae597daee4879783a1257", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -94,7 +94,9 @@ use std::cmp::max;\n use std::default::Default;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::env;\n+use std::error::Error;\n use std::ffi::OsString;\n+use std::fmt::{self, Display};\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::mem;\n@@ -146,6 +148,12 @@ pub mod target_features {\n     }\n }\n \n+/// Exit status code used for successful compilation and help output.\n+pub const EXIT_SUCCESS: isize = 0;\n+\n+/// Exit status code used for compilation failures and  invalid flags.\n+pub const EXIT_FAILURE: isize = 1;\n+\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n@@ -178,7 +186,7 @@ pub fn abort_on_err<T>(result: Result<T, CompileIncomplete>, sess: &Session) ->\n pub fn run<F>(run_compiler: F) -> isize\n     where F: FnOnce() -> (CompileResult, Option<Session>) + Send + 'static\n {\n-    monitor(move || {\n+    let result = monitor(move || {\n         let (result, session) = run_compiler();\n         if let Err(CompileIncomplete::Errored(_)) = result {\n             match session {\n@@ -201,7 +209,11 @@ pub fn run<F>(run_compiler: F) -> isize\n             }\n         }\n     });\n-    0\n+\n+    match result {\n+        Ok(()) => EXIT_SUCCESS,\n+        Err(_) => EXIT_FAILURE,\n+    }\n }\n \n fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n@@ -1625,20 +1637,30 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct CompilationFailure;\n+\n+impl Error for CompilationFailure {}\n+\n+impl Display for CompilationFailure {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"compilation had errors\")\n+    }\n+}\n+\n /// Run a procedure which will detect panics in the compiler and print nicer\n /// error messages rather than just failing the test.\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n-pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n-    let result = in_rustc_thread(move || {\n+pub fn monitor<F: FnOnce() + Send + 'static>(f: F) -> Result<(), CompilationFailure> {\n+    in_rustc_thread(move || {\n         f()\n-    });\n-\n-    if let Err(value) = result {\n-        // Thread panicked without emitting a fatal diagnostic\n-        if !value.is::<errors::FatalErrorMarker>() {\n-            // Emit a newline\n+    }).map_err(|value| {\n+        if value.is::<errors::FatalErrorMarker>() {\n+            CompilationFailure\n+        } else {\n+            // Thread panicked without emitting a fatal diagnostic\n             eprintln!(\"\");\n \n             let emitter =\n@@ -1677,10 +1699,10 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              &note,\n                              errors::Level::Note);\n             }\n-        }\n \n-        panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n-    }\n+            panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+        }\n+    })\n }\n \n pub fn diagnostics_registry() -> errors::registry::Registry {"}, {"sha": "089ecebbc9c07644f0b71be83d3180b05726a76a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -57,6 +57,7 @@ use errors::ColorConfig;\n use std::collections::{BTreeMap, BTreeSet};\n use std::default::Default;\n use std::env;\n+use std::panic;\n use std::path::{Path, PathBuf};\n use std::process;\n use std::sync::mpsc::channel;\n@@ -115,7 +116,7 @@ pub fn main() {\n         syntax::with_globals(move || {\n             get_args().map(|args| main_args(&args)).unwrap_or(1)\n         })\n-    }).unwrap().join().unwrap_or(101);\n+    }).unwrap().join().unwrap_or(rustc_driver::EXIT_FAILURE);\n     process::exit(res as i32);\n }\n \n@@ -667,7 +668,7 @@ where R: 'static + Send,\n \n     let (tx, rx) = channel();\n \n-    rustc_driver::monitor(move || syntax::with_globals(move || {\n+    let result = rustc_driver::monitor(move || syntax::with_globals(move || {\n         use rustc::session::config::Input;\n \n         let (mut krate, renderinfo) =\n@@ -771,7 +772,11 @@ where R: 'static + Send,\n \n         tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes })).unwrap();\n     }));\n-    rx.recv().unwrap()\n+\n+    match result {\n+        Ok(()) => rx.recv().unwrap(),\n+        Err(_) => panic::resume_unwind(Box::new(errors::FatalErrorMarker)),\n+    }\n }\n \n /// Prints deprecation warnings for deprecated options"}, {"sha": "007f19852a66233e2dcae0517bcd760b2dc0138f", "filename": "src/test/run-make-fulldeps/exit-code/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2FMakefile?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) success.rs; [ $$? -eq 0 ]\n+\t$(RUSTC) --invalid-arg-foo; [ $$? -eq 1 ]\n+\t$(RUSTC) compile-error.rs; [ $$? -eq 1 ]\n+\t$(RUSTC) -Ztreat-err-as-bug compile-error.rs; [ $$? -eq 101 ]\n+\t$(RUSTDOC) -o $(TMPDIR)/exit-code success.rs; [ $$? -eq 0 ]\n+\t$(RUSTDOC) --invalid-arg-foo; [ $$? -eq 1 ]\n+\t$(RUSTDOC) compile-error.rs; [ $$? -eq 1 ]\n+\t$(RUSTDOC) lint-failure.rs; [ $$? -eq 1 ]"}, {"sha": "8c05318a5081922c07a5a25c43b71199546944ce", "filename": "src/test/run-make-fulldeps/exit-code/compile-error.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Fcompile-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Fcompile-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Fcompile-error.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    compile_error!(\"kaboom\");\n+}"}, {"sha": "3bf40b753c1feb5cbdb86350fcf33452ea09df16", "filename": "src/test/run-make-fulldeps/exit-code/lint-failure.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Flint-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Flint-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Flint-failure.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+/// [intradoc::failure]\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "9f6c5734a3097f565caea4d8f2846ccdb879ebd8", "filename": "src/test/run-make-fulldeps/exit-code/success.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Fsuccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Fsuccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fexit-code%2Fsuccess.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// Main function\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "0e8b7fb903769e7797d25d5c38cc91aa107de0f9", "filename": "src/test/ui/issue-20801.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Fui%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftest%2Fui%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20801.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test currently ICEs when using NLL (#52416)\n+\n // We used to ICE when moving out of a `*mut T` or `*const T`.\n \n struct T(u8);"}, {"sha": "edab2a5ec034c15511349c0c86635c4a535c8805", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -14,8 +14,7 @@ use std::io::prelude::*;\n use std::io::BufReader;\n use std::path::{Path, PathBuf};\n \n-use common;\n-use common::Config;\n+use common::{self, Config, Mode};\n use util;\n \n use extract_gdb_version;\n@@ -262,7 +261,7 @@ impl TestProps {\n             disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n-            failure_status: 101,\n+            failure_status: -1,\n             run_rustfix: false,\n         }\n     }\n@@ -393,6 +392,11 @@ impl TestProps {\n \n             if let Some(code) = config.parse_failure_status(ln) {\n                 self.failure_status = code;\n+            } else {\n+                self.failure_status = match config.mode {\n+                    Mode::RunFail => 101,\n+                    _ => 1,\n+                };\n             }\n \n             if !self.run_rustfix {"}, {"sha": "fcc474362253d3dd37e73f001ba24a49aab3407e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247dd5c69ca57ede5073209bd30afb90dd4e3b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "patch": "@@ -1170,12 +1170,10 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn check_no_compiler_crash(&self, proc_res: &ProcRes) {\n-        for line in proc_res.stderr.lines() {\n-            if line.contains(\"error: internal compiler error\") {\n-                self.fatal_proc_rec(\"compiler encountered internal error\", proc_res);\n-            } else if line.contains(\" panicked at \") {\n-                self.fatal_proc_rec(\"compiler panicked\", proc_res);\n-            }\n+        match proc_res.status.code() {\n+            Some(101) => self.fatal_proc_rec(\"compiler encountered internal error\", proc_res),\n+            None => self.fatal_proc_rec(\"compiler terminated by signal\", proc_res),\n+            _ => (),\n         }\n     }\n "}]}