{"sha": "a5f88599377179b5964b0b47fae035ac39926de9", "node_id": "C_kwDOAAsO6NoAKGE1Zjg4NTk5Mzc3MTc5YjU5NjRiMGI0N2ZhZTAzNWFjMzk5MjZkZTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-16T19:53:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T19:53:23Z"}, "message": "Rollup merge of #112684 - saethlin:ignore-windows-alignment, r=wesleywiser\n\nDisable alignment checks on i686-pc-windows-msvc\n\nr? `@wesleywiser` Because you were in the Zulip discussion of this: https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202023-06-15\n\ncc #112480", "tree": {"sha": "f9926d04aa34b61a32acd2c1a333000ba0bebd38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9926d04aa34b61a32acd2c1a333000ba0bebd38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f88599377179b5964b0b47fae035ac39926de9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjL2zCRBK7hj4Ov3rIwAAQj8IAG8HvBeqmalic3L7esQtN10j\nU1YvpVjf7M0trJ8WhJgqKtjPEJ8x0BG5AIGYDZVATTz+QX4B+1STaq4qQKpICEK/\nhjNJigTSTF/pS9Q5YefK7VrOUQNfi0Q4/UJ/Wq6SL7DRDjfqxCoPseYAvniEoVek\nw7mfmiw77z6Dp9VqTScL1QC04zq1Bf0I2BkYxVOFHz9cTWpC6/LyU/fYBbIDxJLw\nWRs3hOCTXY8cW2SIYJhDairRTYigrQHmVOATmdtPn+mVCj0FwVWYB4V3c2IFlTYU\noaQaG5rhiJlJN7MNrdKh8LT8DOMVc+RZoaEomGg36jZ4tB3+WgIBozBH6pFzYwU=\n=jdrE\n-----END PGP SIGNATURE-----\n", "payload": "tree f9926d04aa34b61a32acd2c1a333000ba0bebd38\nparent cef94ecedfc87fcf570c76fc1dad674592dcdb98\nparent 4ef316f397956fda8a478a2233ebc4392a1f7203\nauthor Michael Goulet <michael@errs.io> 1686945203 -0700\ncommitter GitHub <noreply@github.com> 1686945203 -0700\n\nRollup merge of #112684 - saethlin:ignore-windows-alignment, r=wesleywiser\n\nDisable alignment checks on i686-pc-windows-msvc\n\nr? `@wesleywiser` Because you were in the Zulip discussion of this: https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202023-06-15\n\ncc #112480\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f88599377179b5964b0b47fae035ac39926de9", "html_url": "https://github.com/rust-lang/rust/commit/a5f88599377179b5964b0b47fae035ac39926de9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f88599377179b5964b0b47fae035ac39926de9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef94ecedfc87fcf570c76fc1dad674592dcdb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef94ecedfc87fcf570c76fc1dad674592dcdb98", "html_url": "https://github.com/rust-lang/rust/commit/cef94ecedfc87fcf570c76fc1dad674592dcdb98"}, {"sha": "4ef316f397956fda8a478a2233ebc4392a1f7203", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef316f397956fda8a478a2233ebc4392a1f7203", "html_url": "https://github.com/rust-lang/rust/commit/4ef316f397956fda8a478a2233ebc4392a1f7203"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "fd349c07040fe00e1a017ac0c6efaf9146a427ff", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5f88599377179b5964b0b47fae035ac39926de9/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f88599377179b5964b0b47fae035ac39926de9/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=a5f88599377179b5964b0b47fae035ac39926de9", "patch": "@@ -15,6 +15,10 @@ pub struct CheckAlignment;\n \n impl<'tcx> MirPass<'tcx> for CheckAlignment {\n     fn is_enabled(&self, sess: &Session) -> bool {\n+        // FIXME(#112480) MSVC and rustc disagree on minimum stack alignment on x86 Windows\n+        if sess.target.llvm_target == \"i686-pc-windows-msvc\" {\n+            return false;\n+        }\n         sess.opts.debug_assertions\n     }\n "}, {"sha": "d1bf3d46a7c7abc96adb79ff7b526b3b58326917", "filename": "tests/ui/mir/mir_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5f88599377179b5964b0b47fae035ac39926de9/tests%2Fui%2Fmir%2Fmir_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f88599377179b5964b0b47fae035ac39926de9/tests%2Fui%2Fmir%2Fmir_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fmir_alignment_check.rs?ref=a5f88599377179b5964b0b47fae035ac39926de9", "patch": "@@ -1,5 +1,6 @@\n // run-fail\n // ignore-wasm32-bare: No panic messages\n+// ignore-i686-pc-windows-msvc: #112480\n // compile-flags: -C debug-assertions\n // error-pattern: misaligned pointer dereference: address must be a multiple of 0x4 but is\n "}, {"sha": "56388c1047e9adff8280561bafa71ae64d7491ba", "filename": "tests/ui/mir/mir_alignment_check_i686-pc-windows-msvc.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5f88599377179b5964b0b47fae035ac39926de9/tests%2Fui%2Fmir%2Fmir_alignment_check_i686-pc-windows-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f88599377179b5964b0b47fae035ac39926de9/tests%2Fui%2Fmir%2Fmir_alignment_check_i686-pc-windows-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fmir_alignment_check_i686-pc-windows-msvc.rs?ref=a5f88599377179b5964b0b47fae035ac39926de9", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+// only-i686-pc-windows-msvc\n+// compile-flags: -Copt-level=0 -Cdebug-assertions=yes\n+\n+// MSVC isn't sure if on 32-bit Windows its u64 type is 8-byte-aligned or 4-byte-aligned.\n+// So this test ensures that on i686-pc-windows-msvc, we do not insert a runtime check\n+// that will fail on dereferencing of a pointer to u64 which is not 8-byte-aligned but is\n+// 4-byte-aligned.\n+\n+#![feature(strict_provenance)]\n+\n+fn main() {\n+    let mut x = [0u64; 2];\n+    let ptr: *mut u8 = x.as_mut_ptr().cast::<u8>();\n+    unsafe {\n+        let misaligned = ptr.add(4).cast::<u64>();\n+        assert!(misaligned.addr() % 8 != 0);\n+        assert!(misaligned.addr() % 4 == 0);\n+        *misaligned = 42;\n+    }\n+}"}]}