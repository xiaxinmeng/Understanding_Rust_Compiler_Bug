{"sha": "9fe94bd995ab13afab7078a708b01f365740d2cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTk0YmQ5OTVhYjEzYWZhYjcwNzhhNzA4YjAxZjM2NTc0MGQyY2Q=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-09T06:24:14Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:02:44Z"}, "message": "Move abs_sub to FloatMath\n\nThis removes the need for libcore to depend on libm. `abs_sub` is not as useful for integers.", "tree": {"sha": "e92121add768458f0055949991505c17c272f400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e92121add768458f0055949991505c17c272f400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe94bd995ab13afab7078a708b01f365740d2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe94bd995ab13afab7078a708b01f365740d2cd", "html_url": "https://github.com/rust-lang/rust/commit/9fe94bd995ab13afab7078a708b01f365740d2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe94bd995ab13afab7078a708b01f365740d2cd/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6db701d5b09c169297aaaf2d5d53f64bcb4676e", "html_url": "https://github.com/rust-lang/rust/commit/e6db701d5b09c169297aaaf2d5d53f64bcb4676e"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "3763fb14b41454f60db98932baa3dc4c73f8d7d2", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9fe94bd995ab13afab7078a708b01f365740d2cd", "patch": "@@ -164,12 +164,6 @@ pub trait Signed: Num + Neg<Self> {\n     /// For signed integers, `::MIN` will be returned if the number is `::MIN`.\n     fn abs(self) -> Self;\n \n-    /// The positive difference of two numbers.\n-    ///\n-    /// Returns `zero` if the number is less than or equal to `other`, otherwise the difference\n-    /// between `self` and `other` is returned.\n-    fn abs_sub(self, other: Self) -> Self;\n-\n     /// Returns the sign of the number.\n     ///\n     /// For `f32` and `f64`:\n@@ -200,11 +194,6 @@ macro_rules! signed_impl(\n                 if self.is_negative() { -self } else { self }\n             }\n \n-            #[inline]\n-            fn abs_sub(self, other: $T) -> $T {\n-                if self <= other { 0 } else { self - other }\n-            }\n-\n             #[inline]\n             fn signum(self) -> $T {\n                 match self {\n@@ -234,15 +223,6 @@ macro_rules! signed_float_impl(\n                 unsafe { $fabs(self) }\n             }\n \n-            /// The positive difference of two numbers. Returns `0.0` if the number is\n-            /// less than or equal to `other`, otherwise the difference between`self`\n-            /// and `other` is returned.\n-            #[inline]\n-            fn abs_sub(self, other: $T) -> $T {\n-                extern { fn $fdim(a: $T, b: $T) -> $T; }\n-                unsafe { $fdim(self, other) }\n-            }\n-\n             /// # Returns\n             ///\n             /// - `1.0` if the number is positive, `+0.0` or `INFINITY`\n@@ -1546,5 +1526,3 @@ pub trait Float: Signed + Primitive {\n \n #[deprecated = \"Use `Signed::abs`\"]\n pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n-#[deprecated = \"Use `Signed::abs_sub`\"]\n-pub fn abs_sub<T: Signed>(x: T, y: T) -> T { x.abs_sub(y) }"}, {"sha": "21b8f31dbf0091552de42b115336d854177dc2d2", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=9fe94bd995ab13afab7078a708b01f365740d2cd", "patch": "@@ -37,14 +37,6 @@ mod tests {\n         assert!((-1 as $T).abs() == 1 as $T);\n     }\n \n-    #[test]\n-    fn test_abs_sub() {\n-        assert!((-1 as $T).abs_sub(1 as $T) == 0 as $T);\n-        assert!((1 as $T).abs_sub(1 as $T) == 0 as $T);\n-        assert!((1 as $T).abs_sub(0 as $T) == 1 as $T);\n-        assert!((1 as $T).abs_sub(-1 as $T) == 2 as $T);\n-    }\n-\n     #[test]\n     fn test_signum() {\n         assert!((1 as $T).signum() == 1 as $T);"}, {"sha": "6e2e8b8752f2ae9fa80a0742518c58c44090aba7", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=9fe94bd995ab13afab7078a708b01f365740d2cd", "patch": "@@ -108,6 +108,11 @@ impl FloatMath for f32 {\n         unsafe { cmath::fminf(self, other) }\n     }\n \n+    #[inline]\n+    fn abs_sub(self, other: f32) -> f32 {\n+        unsafe { cmath::fdimf(self, other) }\n+    }\n+\n     #[inline]\n     fn cbrt(self) -> f32 {\n         unsafe { cmath::cbrtf(self) }"}, {"sha": "591ca3486d2998afba675f64086843b805cb13dc", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=9fe94bd995ab13afab7078a708b01f365740d2cd", "patch": "@@ -116,6 +116,11 @@ impl FloatMath for f64 {\n         unsafe { cmath::fmin(self, other) }\n     }\n \n+    #[inline]\n+    fn abs_sub(self, other: f64) -> f64 {\n+        unsafe { cmath::fdim(self, other) }\n+    }\n+\n     #[inline]\n     fn cbrt(self) -> f64 {\n         unsafe { cmath::cbrt(self) }"}, {"sha": "3f8504f455351fe1aa35095c25bfb6f4b15c31aa", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe94bd995ab13afab7078a708b01f365740d2cd/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=9fe94bd995ab13afab7078a708b01f365740d2cd", "patch": "@@ -21,7 +21,7 @@ use option::Option;\n #[cfg(test)] use fmt::Show;\n \n pub use core::num::{Num, div_rem, Zero, zero, One, one};\n-pub use core::num::{Signed, abs, abs_sub, signum};\n+pub use core::num::{Signed, abs, signum};\n pub use core::num::{Unsigned, pow, Bounded};\n pub use core::num::{Primitive, Int, Saturating};\n pub use core::num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n@@ -58,6 +58,11 @@ pub trait FloatMath: Float {\n     /// Returns the minimum of the two numbers.\n     fn min(self, other: Self) -> Self;\n \n+    /// The positive difference of two numbers. Returns `0.0` if the number is\n+    /// less than or equal to `other`, otherwise the difference between`self`\n+    /// and `other` is returned.\n+    fn abs_sub(self, other: Self) -> Self;\n+\n     /// Take the cubic root of a number.\n     fn cbrt(self) -> Self;\n     /// Calculate the length of the hypotenuse of a right-angle triangle given\n@@ -122,6 +127,13 @@ pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: uint) -> Option<T> {\n     FromStrRadix::from_str_radix(str, radix)\n }\n \n+// DEPRECATED\n+\n+#[deprecated = \"Use `FloatMath::abs_sub`\"]\n+pub fn abs_sub<T: FloatMath>(x: T, y: T) -> T {\n+    x.abs_sub(y)\n+}\n+\n /// Helper function for testing numeric operations\n #[cfg(test)]\n pub fn test_num<T:Num + NumCast + Show>(ten: T, two: T) {"}]}