{"sha": "d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "node_id": "C_kwDOAAsO6NoAKGQzN2NiM2ZmODkzNWE5ZDI4YWEyZmRjYmEyYjQ2NGJiZGE5NjIxM2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-28T13:40:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-28T13:40:03Z"}, "message": "Rollup merge of #106199 - estebank:quiet-type-err-in-binding, r=compiler-errors\n\nSilence knock-down errors on `[type error]` bindings\n\nFix #56036, fix #76589.", "tree": {"sha": "3cb246f7094533982b2c9169a6e68b677e4f27f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb246f7094533982b2c9169a6e68b677e4f27f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrEczCRBK7hj4Ov3rIwAA+i8IAIuEL3bYK/iI2gy7J0qivjPZ\nESxd8YmP6xCnUeIpG9cxXISTBJtuyIKwf+mMbomtAvUxlR5Fg61Pho+4lcOKU8+X\nU3yGenknY2lo3P0RS3JU1OCvsrA0LN8f+8cDIWUlpMnlOb+Lx4N+Bahtd17DOOxq\n2orpZMoMYFl6LTknAcNFPMYJnLM/bSNbi2VJvMrXGL8CoFTKn7mA+IJpmliVQm1G\n2+qlfOHGa3eVzY629TUDxmdI1tp8q0tM/mFdR2blf+VYNYXKM6jSM3vkm+BjVZVi\nDKFI0AgD2GS9loQ9fVGvhi11GAh8crphZ6oGJwkfUVOnQmJ7h9TguLtV5xxE2o4=\n=meml\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cb246f7094533982b2c9169a6e68b677e4f27f7\nparent 08e2e4e4e4fc58c3fe3d3403e26f3d1f916b223b\nparent 8e039b6948f26cbcc1d1e344c45789b814cedbba\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672234803 +0100\ncommitter GitHub <noreply@github.com> 1672234803 +0100\n\nRollup merge of #106199 - estebank:quiet-type-err-in-binding, r=compiler-errors\n\nSilence knock-down errors on `[type error]` bindings\n\nFix #56036, fix #76589.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "html_url": "https://github.com/rust-lang/rust/commit/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e2e4e4e4fc58c3fe3d3403e26f3d1f916b223b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e2e4e4e4fc58c3fe3d3403e26f3d1f916b223b", "html_url": "https://github.com/rust-lang/rust/commit/08e2e4e4e4fc58c3fe3d3403e26f3d1f916b223b"}, {"sha": "8e039b6948f26cbcc1d1e344c45789b814cedbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e039b6948f26cbcc1d1e344c45789b814cedbba", "html_url": "https://github.com/rust-lang/rust/commit/8e039b6948f26cbcc1d1e344c45789b814cedbba"}], "stats": {"total": 216, "additions": 76, "deletions": 140}, "files": [{"sha": "d342d96a10fad74a3dd8feb6ff80eda3f74ba0e6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1307,7 +1307,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Type check the initializer.\n         if let Some(ref init) = decl.init {\n             let init_ty = self.check_decl_initializer(decl.hir_id, decl.pat, &init);\n-            self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, decl_ty, init_ty);\n+            self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, init_ty);\n         }\n \n         // Does the expected pattern type originate from an expression and what is the span?\n@@ -1322,7 +1322,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Type check the pattern. Override if necessary to avoid knock-on errors.\n         self.check_pat_top(&decl.pat, decl_ty, ty_span, origin_expr);\n         let pat_ty = self.node_ty(decl.pat.hir_id);\n-        self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, decl_ty, pat_ty);\n+        self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, pat_ty);\n \n         if let Some(blk) = decl.els {\n             let previous_diverges = self.diverges.get();\n@@ -1627,14 +1627,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         pat: &'tcx hir::Pat<'tcx>,\n-        decl_ty: Ty<'tcx>,\n         ty: Ty<'tcx>,\n     ) {\n         if ty.references_error() {\n             // Override the types everywhere with `err()` to avoid knock on errors.\n-            self.write_ty(hir_id, ty);\n-            self.write_ty(pat.hir_id, ty);\n-            let local_ty = LocalTy { decl_ty, revealed_ty: ty };\n+            let err = self.tcx.ty_error();\n+            self.write_ty(hir_id, err);\n+            self.write_ty(pat.hir_id, err);\n+            let local_ty = LocalTy { decl_ty: err, revealed_ty: err };\n             self.locals.borrow_mut().insert(hir_id, local_ty);\n             self.locals.borrow_mut().insert(pat.hir_id, local_ty);\n         }"}, {"sha": "289561bad8a0963a9b28a36b6b0334db00f72728", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1,13 +1,13 @@\n // compile-flags: -Z teach\n-\n trait SomeTrait {\n-    fn foo(); //~ associated function `foo` has no `self` parameter\n+    fn foo(&self);\n+}\n+struct S;\n+impl SomeTrait for S {\n+    fn foo(&self) {}\n }\n-\n fn main() {\n-    let trait_obj: &dyn SomeTrait = SomeTrait;\n-    //~^ ERROR expected value, found trait `SomeTrait`\n-    //~| ERROR E0038\n+    let trait_obj: &dyn SomeTrait = &S;\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "31bc6719a562e59ec7a78b3e47d9512c522a1ca8", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1,31 +1,3 @@\n-error[E0423]: expected value, found trait `SomeTrait`\n-  --> $DIR/E0033-teach.rs:8:37\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                                     ^^^^^^^^^ not a value\n-\n-error[E0038]: the trait `SomeTrait` cannot be made into an object\n-  --> $DIR/E0033-teach.rs:8:20\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n-   |\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/E0033-teach.rs:4:8\n-   |\n-LL | trait SomeTrait {\n-   |       --------- this trait cannot be made into an object...\n-LL |     fn foo();\n-   |        ^^^ ...because associated function `foo` has no `self` parameter\n-help: consider turning `foo` into a method by giving it a `&self` argument\n-   |\n-LL |     fn foo(&self);\n-   |            +++++\n-help: alternatively, consider constraining `foo` so it does not apply to trait objects\n-   |\n-LL |     fn foo() where Self: Sized;\n-   |              +++++++++++++++++\n-\n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:12:9\n    |\n@@ -36,7 +8,6 @@ LL |     let &invalid = trait_obj;\n            \n            You can read more about trait objects in the Trait Objects section of the Reference: https://doc.rust-lang.org/reference/types.html#trait-objects\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0033, E0038, E0423.\n-For more information about an error, try `rustc --explain E0033`.\n+For more information about this error, try `rustc --explain E0033`."}, {"sha": "bd6ec20722313a9c56170ca87161b21031fbb5e5", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1,11 +1,12 @@\n trait SomeTrait {\n-    fn foo(); //~ associated function `foo` has no `self` parameter\n+    fn foo(&self);\n+}\n+struct S;\n+impl SomeTrait for S {\n+    fn foo(&self) {}\n }\n-\n fn main() {\n-    let trait_obj: &dyn SomeTrait = SomeTrait;\n-    //~^ ERROR expected value, found trait `SomeTrait`\n-    //~| ERROR E0038\n+    let trait_obj: &dyn SomeTrait = &S;\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "ab2e780ee624d335bec00638975d1ac68b397efd", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1,38 +1,9 @@\n-error[E0423]: expected value, found trait `SomeTrait`\n-  --> $DIR/E0033.rs:6:37\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                                     ^^^^^^^^^ not a value\n-\n-error[E0038]: the trait `SomeTrait` cannot be made into an object\n-  --> $DIR/E0033.rs:6:20\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n-   |\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/E0033.rs:2:8\n-   |\n-LL | trait SomeTrait {\n-   |       --------- this trait cannot be made into an object...\n-LL |     fn foo();\n-   |        ^^^ ...because associated function `foo` has no `self` parameter\n-help: consider turning `foo` into a method by giving it a `&self` argument\n-   |\n-LL |     fn foo(&self);\n-   |            +++++\n-help: alternatively, consider constraining `foo` so it does not apply to trait objects\n-   |\n-LL |     fn foo() where Self: Sized;\n-   |              +++++++++++++++++\n-\n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033.rs:10:9\n+  --> $DIR/E0033.rs:11:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0033, E0038, E0423.\n-For more information about an error, try `rustc --explain E0033`.\n+For more information about this error, try `rustc --explain E0033`."}, {"sha": "1b498c0fbca67cc05cb75d31072d0296c3cbfd3f", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.rs?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -7,10 +7,8 @@ fn main() {\n     //~^ ERROR: character literal may only contain one codepoint\n \n     if x == y {}\n-    //~^ ERROR: can't compare `&str` with `char`\n     if y == z {}  // no error here\n     if x == z {}\n-    //~^ ERROR: can't compare `&str` with `char`\n \n     let a: usize = \"\";\n     //~^ ERROR: mismatched types"}, {"sha": "2fe30304a50d694709c25690f35d4d432cb9d538", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -31,49 +31,14 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     let z = \"ef\";\n    |             ~~~~\n \n-error[E0277]: can't compare `&str` with `char`\n-  --> $DIR/lex-bad-char-literals-6.rs:9:10\n-   |\n-LL |     if x == y {}\n-   |          ^^ no implementation for `&str == char`\n-   |\n-   = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <&'a str as PartialEq<OsString>>\n-             <&'a str as PartialEq<String>>\n-             <&'b str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<OsStr>>\n-             <str as PartialEq<OsString>>\n-             <str as PartialEq<String>>\n-             <str as PartialEq>\n-\n error[E0308]: mismatched types\n-  --> $DIR/lex-bad-char-literals-6.rs:15:20\n+  --> $DIR/lex-bad-char-literals-6.rs:13:20\n    |\n LL |     let a: usize = \"\";\n    |            -----   ^^ expected `usize`, found `&str`\n    |            |\n    |            expected due to this\n \n-error[E0277]: can't compare `&str` with `char`\n-  --> $DIR/lex-bad-char-literals-6.rs:12:10\n-   |\n-LL |     if x == z {}\n-   |          ^^ no implementation for `&str == char`\n-   |\n-   = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <&'a str as PartialEq<OsString>>\n-             <&'a str as PartialEq<String>>\n-             <&'b str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<OsStr>>\n-             <str as PartialEq<OsString>>\n-             <str as PartialEq<String>>\n-             <str as PartialEq>\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e3fa22a8f66f4123a0afe3dcb44bed96c9aafc6b", "filename": "src/test/ui/suggestions/issue-104287.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1,9 +1,13 @@\n // The purpose of this test is not to validate the output of the compiler.\n // Instead, it ensures the suggestion is generated without performing an arithmetic overflow.\n \n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n fn main() {\n-    let x = not_found; //~ ERROR cannot find value `not_found` in this scope\n-    simd_gt::<()>(x);\n+    let x = S;\n+    foo::<()>(x);\n     //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n-    //~| ERROR cannot find function `simd_gt` in this scope\n+    //~| ERROR cannot find function `foo` in this scope\n }"}, {"sha": "602a01828b28b331626e1151a4d2639f8abe0d5b", "filename": "src/test/ui/suggestions/issue-104287.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -1,30 +1,30 @@\n-error[E0425]: cannot find value `not_found` in this scope\n-  --> $DIR/issue-104287.rs:5:13\n-   |\n-LL |     let x = not_found;\n-   |             ^^^^^^^^^ not found in this scope\n-\n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/issue-104287.rs:6:5\n+  --> $DIR/issue-104287.rs:10:5\n    |\n-LL |     simd_gt::<()>(x);\n-   |     ^^^^^^^------ help: remove these generics\n+LL |     foo::<()>(x);\n+   |     ^^^------ help: remove these generics\n    |     |\n    |     expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-104287.rs:6:8\n+   |\n+LL |     fn foo(&self) {}\n+   |        ^^^\n \n-error[E0425]: cannot find function `simd_gt` in this scope\n-  --> $DIR/issue-104287.rs:6:5\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/issue-104287.rs:10:5\n    |\n-LL |     simd_gt::<()>(x);\n-   |     ^^^^^^^ not found in this scope\n+LL |     foo::<()>(x);\n+   |     ^^^ not found in this scope\n    |\n-help: use the `.` operator to call the method `SimdPartialOrd::simd_gt` on `[type error]`\n+help: use the `.` operator to call the method `foo` on `&S`\n    |\n-LL -     simd_gt::<()>(x);\n-LL +     x.simd_gt();\n+LL -     foo::<()>(x);\n+LL +     x.foo();\n    |\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0107, E0425.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "a6eab536a6b0957d8823c33a64aea2736968d620", "filename": "src/test/ui/typeck/quiet-type-err-let-binding.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.rs?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -0,0 +1,17 @@\n+// fn foo() -> String {\n+//    String::new()\n+// }\n+\n+fn test(s: &str) {\n+    println!(\"{}\", s);\n+}\n+\n+fn test2(s: String) {\n+    println!(\"{}\", s);\n+}\n+\n+fn main() {\n+    let x = foo(); //~ERROR cannot find function `foo` in this scope\n+    test(&x);\n+    test2(x); // Does not complain about `x` being a `&str`.\n+}"}, {"sha": "ad7f85e01ec06a0d219ceec1d72f7ea125d0a3e9", "filename": "src/test/ui/typeck/quiet-type-err-let-binding.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.stderr?ref=d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/quiet-type-err-let-binding.rs:14:13\n+   |\n+LL |     let x = foo();\n+   |             ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}