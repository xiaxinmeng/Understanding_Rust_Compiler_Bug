{"sha": "506f4308b757e64ceb9e894e27265c103593cd9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNmY0MzA4Yjc1N2U2NGNlYjllODk0ZTI3MjY1YzEwMzU5M2NkOWU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-18T18:33:52Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "progress", "tree": {"sha": "a43bd12da3d4815136f8b10734240703cd5d3884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43bd12da3d4815136f8b10734240703cd5d3884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506f4308b757e64ceb9e894e27265c103593cd9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506f4308b757e64ceb9e894e27265c103593cd9e", "html_url": "https://github.com/rust-lang/rust/commit/506f4308b757e64ceb9e894e27265c103593cd9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506f4308b757e64ceb9e894e27265c103593cd9e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441", "html_url": "https://github.com/rust-lang/rust/commit/4c3b1e89cff55b1f337c5c95c4988ea5a82e2441"}], "stats": {"total": 100, "additions": 54, "deletions": 46}, "files": [{"sha": "2a09d9dbee39988e7e2ba61c1f110f5e38ddec5a", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -3,7 +3,7 @@ use smallvec::smallvec;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::ty::outlives::Component;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, TyCtxt, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::Span;\n \n pub fn anonymize_predicate<'tcx>(\n@@ -330,8 +330,8 @@ impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToT\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         while let Some(obligation) = self.base_iterator.next() {\n-            if let ty::PredicateKind::Trait(data, _) = obligation.predicate.kind() {\n-                return Some(data.to_poly_trait_ref());\n+            if let Some(data) = obligation.predicate.to_opt_poly_trait_ref() {\n+                return Some(data);\n             }\n         }\n         None"}, {"sha": "a9490c954b55ebaeec0614bb7faf2f68daad9cb3", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -1202,13 +1202,15 @@ declare_lint_pass!(\n impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         use rustc_middle::ty::fold::TypeFoldable;\n-        use rustc_middle::ty::PredicateKind::*;\n+        use rustc_middle::ty::PredicateKint::*;\n \n         if cx.tcx.features().trivial_bounds {\n             let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let predicates = cx.tcx.predicates_of(def_id);\n             for &(predicate, span) in predicates.predicates {\n-                let predicate_kind_name = match predicate.kind() {\n+                // We don't actually look inside of the predicate,\n+                // so it is safe to skip this binder here.\n+                let predicate_kind_name = match predicate.kint(cx.tcx).ignore_qualifiers().skip_binder() {\n                     Trait(..) => \"Trait\",\n                     TypeOutlives(..) |\n                     RegionOutlives(..) => \"Lifetime\",\n@@ -1223,6 +1225,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     Subtype(..) |\n                     ConstEvaluatable(..) |\n                     ConstEquate(..) => continue,\n+                    ForAll(_) => bug!(\"unexpected predicate: {:?}\", predicate)\n                 };\n                 if predicate.is_global() {\n                     cx.struct_span_lint(TRIVIAL_BOUNDS, span, |lint| {"}, {"sha": "62127f3e12ca159f3c23cdc6eba0f0127e74e9ee", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -146,11 +146,11 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n-                        if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) =\n-                            predicate.kind()\n+                        // We only look at the `DefId`, so it is safe to skip the binder here.\n+                        if let ty::PredicateKint::Trait(ref poly_trait_predicate, _) =\n+                            predicate.kint(cx.tcx).ignore_qualifiers().skip_binder()\n                         {\n-                            let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n-                            let def_id = trait_ref.def_id;\n+                            let def_id = poly_trait_predicate.trait_ref.def_id;\n                             let descr_pre =\n                                 &format!(\"{}implementer{} of \", descr_pre, plural_suffix,);\n                             if check_must_use_def(cx, def_id, span, descr_pre, descr_post) {"}, {"sha": "b8f95501262474d672ecfc6d44fba030d77a4fce", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -1217,6 +1217,16 @@ pub enum PredicateKind<'tcx> {\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n }\n \n+impl<'tcx> PredicateKint<'tcx> {\n+    /// Skips `PredicateKint::ForAll`.\n+    pub fn ignore_qualifiers(&'tcx self) -> Binder<&'tcx PredicateKint<'tcx>> {\n+        match self {\n+            &PredicateKint::ForAll(binder) => binder,\n+            pred => Binder::dummy(pred),\n+        }\n+    }\n+}\n+\n /// The crate outlives map is computed during typeck and contains the\n /// outlives of every item in the local crate. You should not use it\n /// directly, because to do so will make your pass dependent on the\n@@ -1513,34 +1523,37 @@ impl ToPredicate<'tcx> for PredicateKint<'tcx> {\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        ty::PredicateKind::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value }),\n-            self.constness,\n-        )\n-        .to_predicate(tcx)\n-    }\n-}\n-\n-impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        ty::PredicateKind::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: *self.value }),\n-            self.constness,\n-        )\n-        .to_predicate(tcx)\n+        ty::PredicateKint::Trait(ty::TraitPredicate { trait_ref: self.value }, self.constness)\n+            .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        ty::PredicateKind::Trait(self.value.to_poly_trait_predicate(), self.constness)\n-            .to_predicate(tcx)\n+        if let Some(trait_ref) = self.value.no_bound_vars() {\n+            ty::PredicateKint::Trait(ty::TraitPredicate { trait_ref }, self.constness)\n+        } else {\n+            ty::PredicateKint::ForAll(self.value.map_bound(|trait_ref| {\n+                tcx.intern_predicate_kint(ty::PredicateKint::Trait(\n+                    ty::TraitPredicate { trait_ref },\n+                    self.constness,\n+                ))\n+            }))\n+        }\n+        .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::RegionOutlives(self).to_predicate(tcx)\n+        if let Some(outlives) = self.no_bound_vars() {\n+            PredicateKint::RegionOutlives(outlives)\n+        } else {\n+            ty::PredicateKint::ForAll(self.map_bound(|outlives| {\n+                tcx.intern_predicate_kint(PredicateKint::RegionOutlives(outlives))\n+            }))\n+        }\n+        .to_predicate(tcx)\n     }\n }\n "}, {"sha": "cf9d40a6dc6c59329906c918bc89debb99a52664", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -652,8 +652,7 @@ impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n                 Binder(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)\n             }\n             ExistentialPredicate::Projection(p) => {\n-                ty::PredicateKind::Projection(Binder(p.with_self_ty(tcx, self_ty)))\n-                    .to_predicate(tcx)\n+                Binder(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n                 let trait_ref ="}, {"sha": "9fc5dc0d131c65347369d8c052a6fcf5e45fc91e", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPredicate, Ty,\n-    TyCtxt, UserType, UserTypeAnnotationIndex,\n+    TyCtxt, UserType, UserTypeAnnotationIndex, WithConstness,\n };\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n@@ -2022,18 +2022,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                         traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                     ),\n                                     self.param_env,\n-                                    ty::PredicateKind::Trait(\n-                                        ty::Binder::bind(ty::TraitPredicate {\n-                                            trait_ref: ty::TraitRef::new(\n-                                                self.tcx().require_lang_item(\n-                                                    CopyTraitLangItem,\n-                                                    Some(self.last_span),\n-                                                ),\n-                                                tcx.mk_substs_trait(ty, &[]),\n-                                            ),\n-                                        }),\n-                                        hir::Constness::NotConst,\n-                                    )\n+                                    ty::Binder::bind(ty::TraitRef::new(\n+                                        self.tcx().require_lang_item(\n+                                            CopyTraitLangItem,\n+                                            Some(self.last_span),\n+                                        ),\n+                                        tcx.mk_substs_trait(ty, &[]),\n+                                    ))\n+                                    .without_const()\n                                     .to_predicate(self.tcx()),\n                                 ),\n                                 &traits::SelectionError::Unimplemented,"}, {"sha": "0b97695041be75e0bcda85b705d0b61a6d8b3c43", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506f4308b757e64ceb9e894e27265c103593cd9e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=506f4308b757e64ceb9e894e27265c103593cd9e", "patch": "@@ -68,10 +68,7 @@ trait DefIdVisitor<'tcx> {\n     }\n }\n \n-struct DefIdVisitorSkeleton<'v, 'tcx, V>\n-where\n-    V: DefIdVisitor<'tcx> + ?Sized,\n-{\n+struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {\n     def_id_visitor: &'v mut V,\n     visited_opaque_tys: FxHashSet<DefId>,\n     dummy: PhantomData<TyCtxt<'tcx>>,"}]}