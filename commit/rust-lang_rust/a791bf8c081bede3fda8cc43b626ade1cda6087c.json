{"sha": "a791bf8c081bede3fda8cc43b626ade1cda6087c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OTFiZjhjMDgxYmVkZTNmZGE4Y2M0M2I2MjZhZGUxY2RhNjA4N2M=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-28T22:19:11Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-28T22:19:11Z"}, "message": "Merge #3372\n\n3372: UI test cleanup: Extract explicit_counter_loop tests r=matthiaskrgr a=phansch\n\ncc #2038 \n\nCo-authored-by: Philipp Hansch <dev@phansch.net>", "tree": {"sha": "37f38b9a1365856041549fdf21b9582e33b7b693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f38b9a1365856041549fdf21b9582e33b7b693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a791bf8c081bede3fda8cc43b626ade1cda6087c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a791bf8c081bede3fda8cc43b626ade1cda6087c", "html_url": "https://github.com/rust-lang/rust/commit/a791bf8c081bede3fda8cc43b626ade1cda6087c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a791bf8c081bede3fda8cc43b626ade1cda6087c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "14d2700b6f1fa838884d32c9e40c3da32bf9a1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d2700b6f1fa838884d32c9e40c3da32bf9a1b1", "html_url": "https://github.com/rust-lang/rust/commit/14d2700b6f1fa838884d32c9e40c3da32bf9a1b1"}, {"sha": "18b122005fa297c9c39a1ef3fb6973e955ea43c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b122005fa297c9c39a1ef3fb6973e955ea43c4", "html_url": "https://github.com/rust-lang/rust/commit/18b122005fa297c9c39a1ef3fb6973e955ea43c4"}], "stats": {"total": 368, "additions": 191, "deletions": 177}, "files": [{"sha": "eaed606b89e9f7e1d3c072f8a08d4a6c244d9aff", "filename": "tests/ui/explicit_counter_loop.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=a791bf8c081bede3fda8cc43b626ade1cda6087c", "patch": "@@ -0,0 +1,122 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::explicit_counter_loop)]\n+\n+fn main() {\n+    let mut vec = vec![1, 2, 3, 4];\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 1;\n+    _index = 0;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+}\n+\n+mod issue_1219 {\n+    pub fn test() {\n+        // should not trigger the lint because variable is used after the loop #473\n+        let vec = vec![1,2,3];\n+        let mut index = 0;\n+        for _v in &vec { index += 1 }\n+        println!(\"index: {}\", index);\n+\n+        // should not trigger the lint because the count is conditional #1219\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            if ch == 'a' {\n+                continue;\n+            }\n+            count += 1;\n+            println!(\"{}\", count);\n+        }\n+\n+        // should not trigger the lint because the count is conditional\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            if ch == 'a' {\n+                count += 1;\n+            }\n+            println!(\"{}\", count);\n+        }\n+\n+        // should trigger the lint because the count is not conditional\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            count += 1;\n+            if ch == 'a' {\n+                continue;\n+            }\n+            println!(\"{}\", count);\n+        }\n+\n+        // should trigger the lint because the count is not conditional\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            count += 1;\n+            for i in 0..2 {\n+                let _ = 123;\n+            }\n+            println!(\"{}\", count);\n+        }\n+\n+        // should not trigger the lint because the count is incremented multiple times\n+        let text = \"banana\";\n+        let mut count = 0;\n+        for ch in text.chars() {\n+            count += 1;\n+            for i in 0..2 {\n+                count += 1;\n+            }\n+            println!(\"{}\", count);\n+        }\n+    }\n+}\n+\n+mod issue_3308 {\n+    pub fn test() {\n+        // should not trigger the lint because the count is incremented multiple times\n+        let mut skips = 0;\n+        let erasures = vec![];\n+        for i in 0..10 {\n+            while erasures.contains(&(i + skips)) {\n+                skips += 1;\n+            }\n+            println!(\"{}\", skips);\n+        }\n+\n+        // should not trigger the lint because the count is incremented multiple times\n+        let mut skips = 0;\n+        for i in 0..10 {\n+            let mut j = 0;\n+            while j < 5 {\n+                skips += 1;\n+                j += 1;\n+            }\n+            println!(\"{}\", skips);\n+        }\n+\n+        // should not trigger the lint because the count is incremented multiple times\n+        let mut skips = 0;\n+        for i in 0..10 {\n+            for j in 0..5 {\n+                skips += 1;\n+            }\n+            println!(\"{}\", skips);\n+        }\n+    }\n+}"}, {"sha": "023f7f299a720067c49dd119842380836caf8429", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=a791bf8c081bede3fda8cc43b626ade1cda6087c", "patch": "@@ -0,0 +1,28 @@\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:15:15\n+   |\n+15 |     for _v in &vec {\n+   |               ^^^^\n+   |\n+   = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n+\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:21:15\n+   |\n+21 |     for _v in &vec {\n+   |               ^^^^\n+\n+error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:58:19\n+   |\n+58 |         for ch in text.chars() {\n+   |                   ^^^^^^^^^^^^\n+\n+error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n+  --> $DIR/explicit_counter_loop.rs:69:19\n+   |\n+69 |         for ch in text.chars() {\n+   |                   ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "eefb43172762915e2789a37bed5e4621055ea81a", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 111, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=a791bf8c081bede3fda8cc43b626ade1cda6087c", "patch": "@@ -84,7 +84,7 @@ impl Unrelated {\n }\n \n #[warn(clippy::needless_range_loop, clippy::explicit_iter_loop, clippy::explicit_into_iter_loop, clippy::iter_next_loop, clippy::reverse_range_loop,\n-       clippy::explicit_counter_loop, clippy::for_kv_map)]\n+       clippy::for_kv_map)]\n #[warn(clippy::unused_collect)]\n #[allow(clippy::linkedlist, clippy::shadow_unrelated, clippy::unnecessary_mut_passed, clippy::cyclomatic_complexity, clippy::similar_names)]\n #[allow(clippy::many_single_char_names, unused_variables)]\n@@ -275,16 +275,6 @@ fn main() {\n     let _y = vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n \n     // Loop with explicit counter variable\n-    let mut _index = 0;\n-    for _v in &vec {\n-        _index += 1\n-    }\n-\n-    let mut _index = 1;\n-    _index = 0;\n-    for _v in &vec {\n-        _index += 1\n-    }\n \n     // Potential false positives\n     let mut _index = 0;\n@@ -594,103 +584,3 @@ mod issue_2496 {\n         unimplemented!()\n     }\n }\n-\n-mod issue_1219 {\n-    #[warn(clippy::explicit_counter_loop)]\n-    pub fn test() {\n-        // should not trigger the lint because variable is used after the loop #473\n-        let vec = vec![1,2,3];\n-        let mut index = 0;\n-        for _v in &vec { index += 1 }\n-        println!(\"index: {}\", index);\n-\n-        // should not trigger the lint because the count is conditional #1219\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            if ch == 'a' {\n-                continue;\n-            }\n-            count += 1;\n-            println!(\"{}\", count);\n-        }\n-\n-        // should not trigger the lint because the count is conditional\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            if ch == 'a' {\n-                count += 1;\n-            }\n-            println!(\"{}\", count);\n-        }\n-\n-        // should trigger the lint because the count is not conditional\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            count += 1;\n-            if ch == 'a' {\n-                continue;\n-            }\n-            println!(\"{}\", count);\n-        }\n-\n-        // should trigger the lint because the count is not conditional\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            count += 1;\n-            for i in 0..2 {\n-                let _ = 123;\n-            }\n-            println!(\"{}\", count);\n-        }\n-\n-        // should not trigger the lint because the count is incremented multiple times\n-        let text = \"banana\";\n-        let mut count = 0;\n-        for ch in text.chars() {\n-            count += 1;\n-            for i in 0..2 {\n-                count += 1;\n-            }\n-            println!(\"{}\", count);\n-        }\n-    }\n-}\n-\n-mod issue_3308 {\n-    #[warn(clippy::explicit_counter_loop)]\n-    pub fn test() {\n-        // should not trigger the lint because the count is incremented multiple times\n-        let mut skips = 0;\n-        let erasures = vec![];\n-        for i in 0..10 {\n-            while erasures.contains(&(i + skips)) {\n-                skips += 1;\n-            }\n-            println!(\"{}\", skips);\n-        }\n-\n-        // should not trigger the lint because the count is incremented multiple times\n-        let mut skips = 0;\n-        for i in 0..10 {\n-            let mut j = 0;\n-            while j < 5 {\n-                skips += 1;\n-                j += 1;\n-            }\n-            println!(\"{}\", skips);\n-        }\n-\n-        // should not trigger the lint because the count is incremented multiple times\n-        let mut skips = 0;\n-        for i in 0..10 {\n-            for j in 0..5 {\n-                skips += 1;\n-            }\n-            println!(\"{}\", skips);\n-        }\n-    }\n-}"}, {"sha": "0318b6694e414d3e8be6479c24326fce2ef8b561", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 40, "deletions": 66, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a791bf8c081bede3fda8cc43b626ade1cda6087c/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=a791bf8c081bede3fda8cc43b626ade1cda6087c", "patch": "@@ -360,156 +360,130 @@ error: you are collect()ing an iterator and throwing away the result. Consider u\n     |\n     = note: `-D clippy::unused-collect` implied by `-D warnings`\n \n-error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:279:15\n-    |\n-279 |     for _v in &vec {\n-    |               ^^^^\n-    |\n-    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n-\n-error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:285:15\n-    |\n-285 |     for _v in &vec {\n-    |               ^^^^\n-\n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:395:19\n+   --> $DIR/for_loop.rs:385:19\n     |\n-395 |     for (_, v) in &m {\n+385 |     for (_, v) in &m {\n     |                   ^^\n     |\n     = note: `-D clippy::for-kv-map` implied by `-D warnings`\n help: use the corresponding method\n     |\n-395 |     for v in m.values() {\n+385 |     for v in m.values() {\n     |         ^    ^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:400:19\n+   --> $DIR/for_loop.rs:390:19\n     |\n-400 |     for (_, v) in &*m {\n+390 |     for (_, v) in &*m {\n     |                   ^^^\n help: use the corresponding method\n     |\n-400 |     for v in (*m).values() {\n+390 |     for v in (*m).values() {\n     |         ^    ^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:408:19\n+   --> $DIR/for_loop.rs:398:19\n     |\n-408 |     for (_, v) in &mut m {\n+398 |     for (_, v) in &mut m {\n     |                   ^^^^^^\n help: use the corresponding method\n     |\n-408 |     for v in m.values_mut() {\n+398 |     for v in m.values_mut() {\n     |         ^    ^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:413:19\n+   --> $DIR/for_loop.rs:403:19\n     |\n-413 |     for (_, v) in &mut *m {\n+403 |     for (_, v) in &mut *m {\n     |                   ^^^^^^^\n help: use the corresponding method\n     |\n-413 |     for v in (*m).values_mut() {\n+403 |     for v in (*m).values_mut() {\n     |         ^    ^^^^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's keys\n-   --> $DIR/for_loop.rs:419:24\n+   --> $DIR/for_loop.rs:409:24\n     |\n-419 |     for (k, _value) in rm {\n+409 |     for (k, _value) in rm {\n     |                        ^^\n help: use the corresponding method\n     |\n-419 |     for k in rm.keys() {\n+409 |     for k in rm.keys() {\n     |         ^    ^^^^^^^^^\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:472:14\n+   --> $DIR/for_loop.rs:462:14\n     |\n-472 |     for i in 0..src.len() {\n+462 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n     |\n     = note: `-D clippy::manual-memcpy` implied by `-D warnings`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:477:14\n+   --> $DIR/for_loop.rs:467:14\n     |\n-477 |     for i in 0..src.len() {\n+467 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[10..(src.len() + 10)].clone_from_slice(&src[..])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:482:14\n+   --> $DIR/for_loop.rs:472:14\n     |\n-482 |     for i in 0..src.len() {\n+472 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[10..])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:487:14\n+   --> $DIR/for_loop.rs:477:14\n     |\n-487 |     for i in 11..src.len() {\n+477 |     for i in 11..src.len() {\n     |              ^^^^^^^^^^^^^ help: try replacing the loop by: `dst[11..src.len()].clone_from_slice(&src[(11 - 10)..(src.len() - 10)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:492:14\n+   --> $DIR/for_loop.rs:482:14\n     |\n-492 |     for i in 0..dst.len() {\n+482 |     for i in 0..dst.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst.clone_from_slice(&src[..dst.len()])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:505:14\n+   --> $DIR/for_loop.rs:495:14\n     |\n-505 |     for i in 10..256 {\n+495 |     for i in 10..256 {\n     |              ^^^^^^^\n help: try replacing the loop by\n     |\n-505 |     for i in dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])\n-506 |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n+495 |     for i in dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])\n+496 |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n     |\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:517:14\n+   --> $DIR/for_loop.rs:507:14\n     |\n-517 |     for i in 10..LOOP_OFFSET {\n+507 |     for i in 10..LOOP_OFFSET {\n     |              ^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[(10 + LOOP_OFFSET)..(LOOP_OFFSET + LOOP_OFFSET)].clone_from_slice(&src[(10 - some_var)..(LOOP_OFFSET - some_var)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:530:14\n+   --> $DIR/for_loop.rs:520:14\n     |\n-530 |     for i in 0..src_vec.len() {\n+520 |     for i in 0..src_vec.len() {\n     |              ^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst_vec[..src_vec.len()].clone_from_slice(&src_vec[..])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:559:14\n+   --> $DIR/for_loop.rs:549:14\n     |\n-559 |     for i in from..from + src.len() {\n+549 |     for i in from..from + src.len() {\n     |              ^^^^^^^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + src.len()].clone_from_slice(&src[0..(from + src.len() - from)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:563:14\n+   --> $DIR/for_loop.rs:553:14\n     |\n-563 |     for i in from..from + 3 {\n+553 |     for i in from..from + 3 {\n     |              ^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + 3].clone_from_slice(&src[0..(from + 3 - from)])`\n \n error: it looks like you're manually copying between slices\n-   --> $DIR/for_loop.rs:570:14\n+   --> $DIR/for_loop.rs:560:14\n     |\n-570 |     for i in 0..src.len() {\n+560 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n \n-error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:631:19\n-    |\n-631 |         for ch in text.chars() {\n-    |                   ^^^^^^^^^^^^\n-\n-error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:642:19\n-    |\n-642 |         for ch in text.chars() {\n-    |                   ^^^^^^^^^^^^\n-\n-error: aborting due to 63 previous errors\n+error: aborting due to 59 previous errors\n "}]}