{"sha": "477c1ac105a3b2ed8aafc8c3b09da81984725461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3N2MxYWMxMDVhM2IyZWQ4YWFmYzhjM2IwOWRhODE5ODQ3MjU0NjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-02T00:01:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T00:01:14Z"}, "message": "Merge #7827\n\n7827: Fix proc macro TokenStream::from_str token ids r=vlad20012 a=vlad20012\n\nTo be honest, I don't know what it changes from a user perspective.\r\n\r\nInternally, this fixes spans (token ids) of a `TokenStream` parsed from a string:\r\n\r\n```rust\r\n#[proc_macro_derive(FooDerive)]\r\npub fn foo_derive(item: TokenStream) -> TokenStream {\r\n    \"fn foo() {}\".parse().unwrap()\r\n}\r\n```\r\n\r\nPreviously, `TokenStream` was constructed from tokens with incremental ids (that conflicted with call-site tokens). Now they are `-1`.\n\nCo-authored-by: vlad20012 <beskvlad@gmail.com>", "tree": {"sha": "b6fc2472e099bcd7237b2d6f8d79b1484112d7c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6fc2472e099bcd7237b2d6f8d79b1484112d7c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477c1ac105a3b2ed8aafc8c3b09da81984725461", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPYBKCRBK7hj4Ov3rIwAAdHIIAHcsUhH2SAW1ayfCM4n7A+0w\nSlshZUSjlInUm6RkTXj/9kMQyR8W1UVbqwbbpb0TMSMrbKk12Ou2mNQQYj08cLv5\nZb/zfuAeq0xhFvhQnpMRkY+FlL+5PLkz8IaAInFR2jGtCoqXMFByTUSJBlNpuZZL\nAynCxZ5msQMqoTrTiV2XEI1p70PDgIOj69V87FPyYEFB1MrY39ZDqZ6B/TwsvME3\n38Mg6gQ3/0kMR8j1i3Yw/gaMde5k5Uc5FY5+mxvAsCXjk2hSyV924NHdAlWipONj\nP5rDsDeVwoTTinUmw0hfjEg6nImohxrk6hLEXzQ83k164G/gzN4eVsBaxmwcg9k=\n=o6QW\n-----END PGP SIGNATURE-----\n", "payload": "tree b6fc2472e099bcd7237b2d6f8d79b1484112d7c4\nparent 10a57b8109cbc54c6f6aaae3b61a56fd0529a24a\nparent a157f19bf5bcfe6d59a754a0cb28ece30c526848\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614643274 +0000\ncommitter GitHub <noreply@github.com> 1614643274 +0000\n\nMerge #7827\n\n7827: Fix proc macro TokenStream::from_str token ids r=vlad20012 a=vlad20012\n\nTo be honest, I don't know what it changes from a user perspective.\r\n\r\nInternally, this fixes spans (token ids) of a `TokenStream` parsed from a string:\r\n\r\n```rust\r\n#[proc_macro_derive(FooDerive)]\r\npub fn foo_derive(item: TokenStream) -> TokenStream {\r\n    \"fn foo() {}\".parse().unwrap()\r\n}\r\n```\r\n\r\nPreviously, `TokenStream` was constructed from tokens with incremental ids (that conflicted with call-site tokens). Now they are `-1`.\n\nCo-authored-by: vlad20012 <beskvlad@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477c1ac105a3b2ed8aafc8c3b09da81984725461", "html_url": "https://github.com/rust-lang/rust/commit/477c1ac105a3b2ed8aafc8c3b09da81984725461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477c1ac105a3b2ed8aafc8c3b09da81984725461/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a57b8109cbc54c6f6aaae3b61a56fd0529a24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a57b8109cbc54c6f6aaae3b61a56fd0529a24a", "html_url": "https://github.com/rust-lang/rust/commit/10a57b8109cbc54c6f6aaae3b61a56fd0529a24a"}, {"sha": "a157f19bf5bcfe6d59a754a0cb28ece30c526848", "url": "https://api.github.com/repos/rust-lang/rust/commits/a157f19bf5bcfe6d59a754a0cb28ece30c526848", "html_url": "https://github.com/rust-lang/rust/commit/a157f19bf5bcfe6d59a754a0cb28ece30c526848"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "952b4a97fbb22728d301b80eda19634828c9d64d", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/477c1ac105a3b2ed8aafc8c3b09da81984725461/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477c1ac105a3b2ed8aafc8c3b09da81984725461/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=477c1ac105a3b2ed8aafc8c3b09da81984725461", "patch": "@@ -14,7 +14,6 @@ use std::collections::HashMap;\n use std::hash::Hash;\n use std::iter::FromIterator;\n use std::ops::Bound;\n-use std::str::FromStr;\n use std::{ascii, vec::IntoIter};\n \n type Group = tt::Subtree;\n@@ -278,6 +277,42 @@ impl server::FreeFunctions for Rustc {\n     }\n }\n \n+fn subtree_replace_token_ids_with_unspecified(subtree: tt::Subtree) -> tt::Subtree {\n+    tt::Subtree {\n+        delimiter: subtree.delimiter.map(|d| tt::Delimiter { id: tt::TokenId::unspecified(), ..d }),\n+        token_trees: subtree\n+            .token_trees\n+            .into_iter()\n+            .map(|t| token_tree_replace_token_ids_with_unspecified(t))\n+            .collect(),\n+    }\n+}\n+\n+fn token_tree_replace_token_ids_with_unspecified(tt: tt::TokenTree) -> tt::TokenTree {\n+    match tt {\n+        tt::TokenTree::Leaf(leaf) => {\n+            tt::TokenTree::Leaf(leaf_replace_token_ids_with_unspecified(leaf))\n+        }\n+        tt::TokenTree::Subtree(subtree) => {\n+            tt::TokenTree::Subtree(subtree_replace_token_ids_with_unspecified(subtree))\n+        }\n+    }\n+}\n+\n+fn leaf_replace_token_ids_with_unspecified(leaf: tt::Leaf) -> tt::Leaf {\n+    match leaf {\n+        tt::Leaf::Literal(lit) => {\n+            tt::Leaf::Literal(tt::Literal { id: tt::TokenId::unspecified(), ..lit })\n+        }\n+        tt::Leaf::Punct(punct) => {\n+            tt::Leaf::Punct(tt::Punct { id: tt::TokenId::unspecified(), ..punct })\n+        }\n+        tt::Leaf::Ident(ident) => {\n+            tt::Leaf::Ident(tt::Ident { id: tt::TokenId::unspecified(), ..ident })\n+        }\n+    }\n+}\n+\n impl server::TokenStream for Rustc {\n     fn new(&mut self) -> Self::TokenStream {\n         Self::TokenStream::new()\n@@ -287,7 +322,8 @@ impl server::TokenStream for Rustc {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        Self::TokenStream::from_str(src).expect(\"cannot parse string\")\n+        let (subtree, _) = mbe::parse_to_token_tree(src).expect(\"cannot parse string\");\n+        TokenStream::with_subtree(subtree_replace_token_ids_with_unspecified(subtree))\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n         stream.to_string()"}]}