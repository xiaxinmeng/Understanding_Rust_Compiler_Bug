{"sha": "c69f367bafb3a2f90d44fe54fc20d57996fa294a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OWYzNjdiYWZiM2EyZjkwZDQ0ZmU1NGZjMjBkNTc5OTZmYTI5NGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-07-25T16:44:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-07-26T14:35:59Z"}, "message": "std: Add more accessors for `Metadata` on Windows\n\nThis commit adds accessors for more fields in `fs::Metadata` on Windows\nwhich weren't previously exposed. There's two sources of `fs::Metadata`\non Windows currently, one from `DirEntry` and one from a file itself.\nThese two sources of information don't actually have the same set of\nfields exposed in their stat information, however. To handle this the\nplatform-specific accessors of Windows-specific information all return\n`Option` to return `None` in the case a metadata comes from a\n`DirEntry`, but they're guaranteed to return `Some` if it comes from a\nfile itself.\n\nThis is motivated by some changes in CraneStation/wasi-common#42, and\nI'm curious how others feel about this platform-specific functionality!", "tree": {"sha": "7357175a38b067541a03d76c4d27a277d5c5f765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7357175a38b067541a03d76c4d27a277d5c5f765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c69f367bafb3a2f90d44fe54fc20d57996fa294a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c69f367bafb3a2f90d44fe54fc20d57996fa294a", "html_url": "https://github.com/rust-lang/rust/commit/c69f367bafb3a2f90d44fe54fc20d57996fa294a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c69f367bafb3a2f90d44fe54fc20d57996fa294a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a563362865e6051d4c350544131228e8eff5138", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a563362865e6051d4c350544131228e8eff5138", "html_url": "https://github.com/rust-lang/rust/commit/1a563362865e6051d4c350544131228e8eff5138"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "23964dc5bd5df9bf2233d8fea660dc8e51803d07", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c69f367bafb3a2f90d44fe54fc20d57996fa294a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69f367bafb3a2f90d44fe54fc20d57996fa294a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=c69f367bafb3a2f90d44fe54fc20d57996fa294a", "patch": "@@ -437,6 +437,33 @@ pub trait MetadataExt {\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_size(&self) -> u64;\n+\n+    /// Returns the value of the `dwVolumeSerialNumber` field of this\n+    /// metadata.\n+    ///\n+    /// This will return `None` if the `Metadata` instance was created from a\n+    /// call to `DirEntry::metadata`. If this `Metadata` was created by using\n+    /// `fs::metadata` or `File::metadata`, then this will return `Some`.\n+    #[unstable(feature = \"windows_by_handle\", issue = \"63010\")]\n+    fn volume_serial_number(&self) -> Option<u32>;\n+\n+    /// Returns the value of the `nNumberOfLinks` field of this\n+    /// metadata.\n+    ///\n+    /// This will return `None` if the `Metadata` instance was created from a\n+    /// call to `DirEntry::metadata`. If this `Metadata` was created by using\n+    /// `fs::metadata` or `File::metadata`, then this will return `Some`.\n+    #[unstable(feature = \"windows_by_handle\", issue = \"63010\")]\n+    fn number_of_links(&self) -> Option<u32>;\n+\n+    /// Returns the value of the `nFileIndex{Low,High}` fields of this\n+    /// metadata.\n+    ///\n+    /// This will return `None` if the `Metadata` instance was created from a\n+    /// call to `DirEntry::metadata`. If this `Metadata` was created by using\n+    /// `fs::metadata` or `File::metadata`, then this will return `Some`.\n+    #[unstable(feature = \"windows_by_handle\", issue = \"63010\")]\n+    fn file_index(&self) -> Option<u64>;\n }\n \n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -446,6 +473,9 @@ impl MetadataExt for Metadata {\n     fn last_access_time(&self) -> u64 { self.as_inner().accessed_u64() }\n     fn last_write_time(&self) -> u64 { self.as_inner().modified_u64() }\n     fn file_size(&self) -> u64 { self.as_inner().size() }\n+    fn volume_serial_number(&self) -> Option<u32> { self.as_inner().volume_serial_number() }\n+    fn number_of_links(&self) -> Option<u32> { self.as_inner().number_of_links() }\n+    fn file_index(&self) -> Option<u64> { self.as_inner().file_index() }\n }\n \n /// Windows-specific extensions to [`FileType`]."}, {"sha": "5bae6ba4749bd1e2f8bea3f0df94a5023e20ef39", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c69f367bafb3a2f90d44fe54fc20d57996fa294a/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69f367bafb3a2f90d44fe54fc20d57996fa294a/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=c69f367bafb3a2f90d44fe54fc20d57996fa294a", "patch": "@@ -25,6 +25,9 @@ pub struct FileAttr {\n     last_write_time: c::FILETIME,\n     file_size: u64,\n     reparse_tag: c::DWORD,\n+    volume_serial_number: Option<u32>,\n+    number_of_links: Option<u32>,\n+    file_index: Option<u64>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n@@ -156,6 +159,9 @@ impl DirEntry {\n                 } else {\n                     0\n                 },\n+            volume_serial_number: None,\n+            number_of_links: None,\n+            file_index: None,\n         })\n     }\n }\n@@ -291,23 +297,26 @@ impl File {\n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n         unsafe {\n             let mut info: c::BY_HANDLE_FILE_INFORMATION = mem::zeroed();\n-            cvt(c::GetFileInformationByHandle(self.handle.raw(),\n-                                              &mut info))?;\n-            let mut attr = FileAttr {\n-                attributes: info.dwFileAttributes,\n-                creation_time: info.ftCreationTime,\n-                last_access_time: info.ftLastAccessTime,\n-                last_write_time: info.ftLastWriteTime,\n-                file_size: ((info.nFileSizeHigh as u64) << 32) | (info.nFileSizeLow as u64),\n-                reparse_tag: 0,\n-            };\n-            if attr.is_reparse_point() {\n+            cvt(c::GetFileInformationByHandle(self.handle.raw(), &mut info))?;\n+            let mut reparse_tag = 0;\n+            if info.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n                 let mut b = [0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n-                    attr.reparse_tag = buf.ReparseTag;\n+                    reparse_tag = buf.ReparseTag;\n                 }\n             }\n-            Ok(attr)\n+            Ok(FileAttr {\n+                attributes: info.dwFileAttributes,\n+                creation_time: info.ftCreationTime,\n+                last_access_time: info.ftLastAccessTime,\n+                last_write_time: info.ftLastWriteTime,\n+                file_size: (info.nFileSizeLow as u64) | ((info.nFileSizeHigh as u64) << 32),\n+                reparse_tag,\n+                volume_serial_number: Some(info.dwVolumeSerialNumber),\n+                number_of_links: Some(info.nNumberOfLinks),\n+                file_index: Some((info.nFileIndexLow as u64) |\n+                                 ((info.nFileIndexHigh as u64) << 32)),\n+            })\n         }\n     }\n \n@@ -336,6 +345,9 @@ impl File {\n                 },\n                 file_size: 0,\n                 reparse_tag: 0,\n+                volume_serial_number: None,\n+                number_of_links: None,\n+                file_index: None,\n             };\n             let mut info: c::FILE_STANDARD_INFO = mem::zeroed();\n             let size = mem::size_of_val(&info);\n@@ -344,6 +356,7 @@ impl File {\n                                                 &mut info as *mut _ as *mut libc::c_void,\n                                                 size as c::DWORD))?;\n             attr.file_size = info.AllocationSize as u64;\n+            attr.number_of_links = Some(info.NumberOfLinks);\n             if attr.is_reparse_point() {\n                 let mut b = [0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n                 if let Ok((_, buf)) = self.reparse_point(&mut b) {\n@@ -507,7 +520,9 @@ impl FileAttr {\n         FilePermissions { attrs: self.attributes }\n     }\n \n-    pub fn attrs(&self) -> u32 { self.attributes as u32 }\n+    pub fn attrs(&self) -> u32 {\n+        self.attributes\n+    }\n \n     pub fn file_type(&self) -> FileType {\n         FileType::new(self.attributes, self.reparse_tag)\n@@ -537,8 +552,16 @@ impl FileAttr {\n         to_u64(&self.creation_time)\n     }\n \n-    fn is_reparse_point(&self) -> bool {\n-        self.attributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0\n+    pub fn volume_serial_number(&self) -> Option<u32> {\n+        self.volume_serial_number\n+    }\n+\n+    pub fn number_of_links(&self) -> Option<u32> {\n+        self.number_of_links\n+    }\n+\n+    pub fn file_index(&self) -> Option<u64> {\n+        self.file_index\n     }\n }\n "}]}