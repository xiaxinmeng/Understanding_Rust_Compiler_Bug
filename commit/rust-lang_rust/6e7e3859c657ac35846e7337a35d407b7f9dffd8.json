{"sha": "6e7e3859c657ac35846e7337a35d407b7f9dffd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlN2UzODU5YzY1N2FjMzU4NDZlNzMzN2EzNWQ0MDdiN2Y5ZGZmZDg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T19:46:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T19:46:37Z"}, "message": "Rollup merge of #52942 - llogiq:smallvec-opt, r=Mark-Simulacrum\n\nAnother SmallVec.extend optimization\n\nThis improves SmallVec.extend even more over #52859 while making the code easier to read.\n\nBefore\n\n```\ntest small_vec::tests::fill_small_vec_1_10_with_cap  ... bench:          31 ns/iter (+/- 5)\ntest small_vec::tests::fill_small_vec_1_10_wo_cap    ... bench:          70 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_1_50_with_cap  ... bench:          36 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_1_50_wo_cap    ... bench:         256 ns/iter (+/- 17)\ntest small_vec::tests::fill_small_vec_32_10_with_cap ... bench:          31 ns/iter (+/- 5)\ntest small_vec::tests::fill_small_vec_32_10_wo_cap   ... bench:          26 ns/iter (+/- 1)\ntest small_vec::tests::fill_small_vec_32_50_with_cap ... bench:          49 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_32_50_wo_cap   ... bench:         219 ns/iter (+/- 11)\ntest small_vec::tests::fill_small_vec_8_10_with_cap  ... bench:          32 ns/iter (+/- 2)\ntest small_vec::tests::fill_small_vec_8_10_wo_cap    ... bench:          61 ns/iter (+/- 12)\ntest small_vec::tests::fill_small_vec_8_50_with_cap  ... bench:          37 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_8_50_wo_cap    ... bench:         210 ns/iter (+/- 10)\n```\n\nAfter:\n\n```\ntest small_vec::tests::fill_small_vec_1_10_wo_cap    ... bench:          31 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_1_50_with_cap  ... bench:          39 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_1_50_wo_cap    ... bench:          35 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_32_10_with_cap ... bench:          37 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_32_10_wo_cap   ... bench:          32 ns/iter (+/- 2)\ntest small_vec::tests::fill_small_vec_32_50_with_cap ... bench:          52 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_32_50_wo_cap   ... bench:          46 ns/iter (+/- 0)\ntest small_vec::tests::fill_small_vec_8_10_with_cap  ... bench:          35 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_8_10_wo_cap    ... bench:          31 ns/iter (+/- 0)\ntest small_vec::tests::fill_small_vec_8_50_with_cap  ... bench:          40 ns/iter (+/- 15)\ntest small_vec::tests::fill_small_vec_8_50_wo_cap    ... bench:          36 ns/iter (+/- 2)\n```", "tree": {"sha": "7fc050f3df0ee7bc4be61b0d2084077418966363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc050f3df0ee7bc4be61b0d2084077418966363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7e3859c657ac35846e7337a35d407b7f9dffd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYg4dCRBK7hj4Ov3rIwAAdHIIAHumEFG+AzLxl/EZgI6I1Xx4\njazhdU06D6T8xvYT7iI8AlUIR4VGxcCGHnqDbsJ5mJ9m91chLSs73kcMRrdxWINX\ndaEGp1sbBMK5NceGci3Xv3Wdysm13j51pV5vTXXF5e53biWPyrHYp4WFRDsOCgVd\nNZ7O+bIcSTJ3qYfyKWsjgdiBf56ci7liWFbGSfRLPhfhqk+dOkOaS/wG+dzz/LjL\nJD/U1r6SJQWdL626HRdPjP9mdoe37XIDLxiYHts2MR7adkm1QB0MT9DuB+/J2lhJ\ny7EltOMfila8b67GqUp2tVItdMFLV7Whf3Wl/1snt/7f/o2guldeTBp7mLnbJDo=\n=Vget\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fc050f3df0ee7bc4be61b0d2084077418966363\nparent eeb7b6ae093c666084bb0f35e73151dcbe7a93af\nparent e462c06a280e4198b404323d7754e1308817b22e\nauthor Pietro Albini <pietro@pietroalbini.org> 1533152797 +0200\ncommitter GitHub <noreply@github.com> 1533152797 +0200\n\nRollup merge of #52942 - llogiq:smallvec-opt, r=Mark-Simulacrum\n\nAnother SmallVec.extend optimization\n\nThis improves SmallVec.extend even more over #52859 while making the code easier to read.\n\nBefore\n\n```\ntest small_vec::tests::fill_small_vec_1_10_with_cap  ... bench:          31 ns/iter (+/- 5)\ntest small_vec::tests::fill_small_vec_1_10_wo_cap    ... bench:          70 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_1_50_with_cap  ... bench:          36 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_1_50_wo_cap    ... bench:         256 ns/iter (+/- 17)\ntest small_vec::tests::fill_small_vec_32_10_with_cap ... bench:          31 ns/iter (+/- 5)\ntest small_vec::tests::fill_small_vec_32_10_wo_cap   ... bench:          26 ns/iter (+/- 1)\ntest small_vec::tests::fill_small_vec_32_50_with_cap ... bench:          49 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_32_50_wo_cap   ... bench:         219 ns/iter (+/- 11)\ntest small_vec::tests::fill_small_vec_8_10_with_cap  ... bench:          32 ns/iter (+/- 2)\ntest small_vec::tests::fill_small_vec_8_10_wo_cap    ... bench:          61 ns/iter (+/- 12)\ntest small_vec::tests::fill_small_vec_8_50_with_cap  ... bench:          37 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_8_50_wo_cap    ... bench:         210 ns/iter (+/- 10)\n```\n\nAfter:\n\n```\ntest small_vec::tests::fill_small_vec_1_10_wo_cap    ... bench:          31 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_1_50_with_cap  ... bench:          39 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_1_50_wo_cap    ... bench:          35 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_32_10_with_cap ... bench:          37 ns/iter (+/- 3)\ntest small_vec::tests::fill_small_vec_32_10_wo_cap   ... bench:          32 ns/iter (+/- 2)\ntest small_vec::tests::fill_small_vec_32_50_with_cap ... bench:          52 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_32_50_wo_cap   ... bench:          46 ns/iter (+/- 0)\ntest small_vec::tests::fill_small_vec_8_10_with_cap  ... bench:          35 ns/iter (+/- 4)\ntest small_vec::tests::fill_small_vec_8_10_wo_cap    ... bench:          31 ns/iter (+/- 0)\ntest small_vec::tests::fill_small_vec_8_50_with_cap  ... bench:          40 ns/iter (+/- 15)\ntest small_vec::tests::fill_small_vec_8_50_wo_cap    ... bench:          36 ns/iter (+/- 2)\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7e3859c657ac35846e7337a35d407b7f9dffd8", "html_url": "https://github.com/rust-lang/rust/commit/6e7e3859c657ac35846e7337a35d407b7f9dffd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7e3859c657ac35846e7337a35d407b7f9dffd8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "html_url": "https://github.com/rust-lang/rust/commit/eeb7b6ae093c666084bb0f35e73151dcbe7a93af"}, {"sha": "e462c06a280e4198b404323d7754e1308817b22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e462c06a280e4198b404323d7754e1308817b22e", "html_url": "https://github.com/rust-lang/rust/commit/e462c06a280e4198b404323d7754e1308817b22e"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "76b01beb4bad3dbcd524fb2c07bee6ccb210f434", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e7e3859c657ac35846e7337a35d407b7f9dffd8/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7e3859c657ac35846e7337a35d407b7f9dffd8/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=6e7e3859c657ac35846e7337a35d407b7f9dffd8", "patch": "@@ -169,18 +169,11 @@ impl<A: Array> FromIterator<A::Element> for SmallVec<A> {\n \n impl<A: Array> Extend<A::Element> for SmallVec<A> {\n     fn extend<I: IntoIterator<Item=A::Element>>(&mut self, iter: I) {\n-        if self.is_array() {\n-            let iter = iter.into_iter();\n-            self.reserve(iter.size_hint().0);\n-\n-            for el in iter {\n-                self.push(el);\n-            }\n-        } else {\n-            match self.0 {\n-                AccumulateVec::Heap(ref mut vec) => vec.extend(iter),\n-                _ => unreachable!()\n-            }\n+        let iter = iter.into_iter();\n+        self.reserve(iter.size_hint().0);\n+        match self.0 {\n+            AccumulateVec::Heap(ref mut vec) => vec.extend(iter),\n+            _ => iter.for_each(|el| self.push(el))\n         }\n     }\n }"}]}