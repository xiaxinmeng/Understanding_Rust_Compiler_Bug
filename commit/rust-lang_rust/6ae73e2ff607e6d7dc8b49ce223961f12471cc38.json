{"sha": "6ae73e2ff607e6d7dc8b49ce223961f12471cc38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZTczZTJmZjYwN2U2ZDdkYzhiNDljZTIyMzk2MWYxMjQ3MWNjMzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-07T14:48:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-21T21:49:43Z"}, "message": "Improve bounds search", "tree": {"sha": "990851b993c9ab3b2df2d7220a108530b9969ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990851b993c9ab3b2df2d7220a108530b9969ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae73e2ff607e6d7dc8b49ce223961f12471cc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae73e2ff607e6d7dc8b49ce223961f12471cc38", "html_url": "https://github.com/rust-lang/rust/commit/6ae73e2ff607e6d7dc8b49ce223961f12471cc38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae73e2ff607e6d7dc8b49ce223961f12471cc38/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d611301e3e7e5800fe3267b7ad55ac8822adc89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d611301e3e7e5800fe3267b7ad55ac8822adc89a", "html_url": "https://github.com/rust-lang/rust/commit/d611301e3e7e5800fe3267b7ad55ac8822adc89a"}], "stats": {"total": 63, "additions": 11, "deletions": 52}, "files": [{"sha": "f92f129d803f9aafd1ffcad6c2ce38581e4a5886", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 48, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6ae73e2ff607e6d7dc8b49ce223961f12471cc38/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae73e2ff607e6d7dc8b49ce223961f12471cc38/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6ae73e2ff607e6d7dc8b49ce223961f12471cc38", "patch": "@@ -1755,35 +1755,24 @@ pub fn get_real_types(\n     generics: &Generics,\n     arg: &Type,\n     cx: &DocContext<'_, '_, '_>,\n-    debug: bool,\n ) -> Option<Vec<Type>> {\n     let mut res = Vec::new();\n-    if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-        println!(\"0. {:?}\", arg);\n-    }\n     if let Some(where_pred) = generics.where_predicates.iter().find(|g| {\n         match g {\n             &WherePredicate::BoundPredicate { ref ty, .. } => ty.def_id() == arg.def_id(),\n             _ => false,\n         }\n     }) {\n-        if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-            println!(\"1. {:?} => {:?}\", arg, where_pred);\n-        }\n         let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n         for bound in bounds.iter() {\n             match *bound {\n                 GenericBound::TraitBound(ref poly_trait, _) => {\n-                    if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-                        println!(\"    {:?}\", poly_trait.trait_);\n-                    }\n                     for x in poly_trait.generic_params.iter() {\n                         if !x.is_type() {\n                             continue\n                         }\n                         if let Some(ty) = x.get_type(cx) {\n-                            if let Some(mut adds) = get_real_types(generics, &ty, cx,\n-                                arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug) {\n+                            if let Some(mut adds) = get_real_types(generics, &ty, cx) {\n                                 res.append(&mut adds);\n                             } else if !ty.is_full_generic() {\n                                 res.push(ty);\n@@ -1799,51 +1788,25 @@ pub fn get_real_types(\n         if let Some(bound) = generics.params.iter().find(|g| {\n             g.is_type() && g.name == arg_s\n         }) {\n-            if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-                println!(\"2. {:?} => {:?}\", arg, bound);\n-            }\n             for bound in bound.get_bounds().unwrap_or_else(|| &[]) {\n                 if let Some(ty) = bound.get_trait_type() {\n-                    if let Some(mut adds) = get_real_types(generics, &ty, cx,\n-                        arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug) {\n-                        if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-                            println!(\"3. {:?}\", adds);\n-                        }\n+                    if let Some(mut adds) = get_real_types(generics, &ty, cx) {\n                         res.append(&mut adds);\n                     } else {\n-                        if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-                            println!(\"4. {:?}\", ty);\n-                        }\n                         if !ty.is_full_generic() {\n                             res.push(ty.clone());\n                         }\n                     }\n                 }\n             }\n-            /*if let Some(ty) = bound.get_type(cx) {\n-                if let Some(mut adds) = get_real_types(generics, &ty, cx, level + 1) {\n-                    res.append(&mut adds);\n-                } else {\n-                    res.push(ty);\n-                }\n-            } else {\n-                res.push(arg.clone());\n-            }*/\n         } else if let Some(gens) = arg.generics() {\n             res.push(arg.clone());\n             for gen in gens.iter() {\n                 if gen.is_full_generic() {\n-                    if let Some(mut adds) = get_real_types(generics, gen, cx,\n-                        arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug) {\n-                        if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-                            println!(\"5. {:?}\", adds);\n-                        }\n+                    if let Some(mut adds) = get_real_types(generics, gen, cx) {\n                         res.append(&mut adds);\n                     }\n                 } else {\n-                    if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-                        println!(\"6. {:?}\", gen);\n-                    }\n                     res.push(gen.clone());\n                 }\n             }\n@@ -1852,9 +1815,6 @@ pub fn get_real_types(\n     if res.is_empty() && !arg.is_full_generic() {\n         res.push(arg.clone());\n     }\n-    if arg.to_string() == \"W\" || arg.to_string() == \"Z\" || debug {\n-        println!(\"7. /!\\\\ {:?}\", res);\n-    }\n     Some(res)\n }\n \n@@ -1868,17 +1828,15 @@ pub fn get_all_types(\n         if arg.type_.is_self_type() {\n             continue;\n         }\n-        if let Some(mut args) = get_real_types(generics, &arg.type_, cx, false) {\n+        if let Some(mut args) = get_real_types(generics, &arg.type_, cx) {\n             all_types.append(&mut args);\n         } else {\n             all_types.push(arg.type_.clone());\n         }\n     }\n-    all_types.sort_unstable_by(|a, b| a.to_string().partial_cmp(&b.to_string()).expect(\"a\") );\n+    // FIXME: use a HashSet instead?\n+    all_types.sort_unstable_by(|a, b| a.to_string().partial_cmp(&b.to_string()).unwrap());\n     all_types.dedup();\n-    if decl.inputs.values.iter().any(|s| s.type_.to_string() == \"W\" || s.type_.to_string() == \"Z\") {\n-        println!(\"||||> {:?}\", all_types);\n-    }\n     all_types\n }\n "}, {"sha": "5c2051710f869cddcd5eeb2cd361841f0561ea29", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ae73e2ff607e6d7dc8b49ce223961f12471cc38/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae73e2ff607e6d7dc8b49ce223961f12471cc38/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6ae73e2ff607e6d7dc8b49ce223961f12471cc38", "patch": "@@ -5029,16 +5029,17 @@ fn get_index_search_type(item: &clean::Item) -> Option<IndexItemFunctionType> {\n         clean::FunctionItem(ref f) => (&f.decl, &f.all_types),\n         clean::MethodItem(ref m) => (&m.decl, &m.all_types),\n         clean::TyMethodItem(ref m) => (&m.decl, &m.all_types),\n-        _ => return None\n+        _ => return None,\n     };\n \n-    println!(\"====> {:?}\", all_types);\n     let inputs = all_types.iter().map(|arg| {\n         get_index_type(&arg)\n     }).collect();\n     let output = match decl.output {\n-        clean::FunctionRetTy::Return(ref return_type) => Some(get_index_type(return_type)),\n-        _ => None\n+        clean::FunctionRetTy::Return(ref return_type) => {\n+            Some(get_index_type(return_type))\n+        },\n+        _ => None,\n     };\n \n     Some(IndexItemFunctionType { inputs: inputs, output: output })"}]}