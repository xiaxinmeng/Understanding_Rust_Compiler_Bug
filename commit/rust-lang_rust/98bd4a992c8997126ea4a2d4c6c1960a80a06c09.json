{"sha": "98bd4a992c8997126ea4a2d4c6c1960a80a06c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YmQ0YTk5MmM4OTk3MTI2ZWE0YTJkNGM2YzE5NjBhODBhMDZjMDk=", "commit": {"author": {"name": "Drew Willcoxon", "email": "adw@mozilla.com", "date": "2012-09-11T06:50:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T00:22:24Z"}, "message": "Improve unexpected error scanner for compile-fail tests (Closes #1476)", "tree": {"sha": "336aad2e77a4a42524cbe2bed08eb2ade23614db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336aad2e77a4a42524cbe2bed08eb2ade23614db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98bd4a992c8997126ea4a2d4c6c1960a80a06c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98bd4a992c8997126ea4a2d4c6c1960a80a06c09", "html_url": "https://github.com/rust-lang/rust/commit/98bd4a992c8997126ea4a2d4c6c1960a80a06c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98bd4a992c8997126ea4a2d4c6c1960a80a06c09/comments", "author": {"login": "0c0w3", "id": 451203, "node_id": "MDQ6VXNlcjQ1MTIwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/451203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0c0w3", "html_url": "https://github.com/0c0w3", "followers_url": "https://api.github.com/users/0c0w3/followers", "following_url": "https://api.github.com/users/0c0w3/following{/other_user}", "gists_url": "https://api.github.com/users/0c0w3/gists{/gist_id}", "starred_url": "https://api.github.com/users/0c0w3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0c0w3/subscriptions", "organizations_url": "https://api.github.com/users/0c0w3/orgs", "repos_url": "https://api.github.com/users/0c0w3/repos", "events_url": "https://api.github.com/users/0c0w3/events{/privacy}", "received_events_url": "https://api.github.com/users/0c0w3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc11e87b84cce79c68b9782cb7bd66decbf2b001", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc11e87b84cce79c68b9782cb7bd66decbf2b001", "html_url": "https://github.com/rust-lang/rust/commit/dc11e87b84cce79c68b9782cb7bd66decbf2b001"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "f76a469d501434dfce340a6f47b1556311af27cd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/98bd4a992c8997126ea4a2d4c6c1960a80a06c09/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd4a992c8997126ea4a2d4c6c1960a80a06c09/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=98bd4a992c8997126ea4a2d4c6c1960a80a06c09", "patch": "@@ -289,9 +289,9 @@ fn check_expected_errors(expected_errors: ~[errors::expected_error],\n             was_expected = true;\n         }\n \n-        if !was_expected && (str::contains(line, ~\"error\") ||\n-                             str::contains(line, ~\"warning\")) {\n-            fatal_procres(fmt!(\"unexpected error pattern '%s'!\", line),\n+        if !was_expected && is_compiler_error_or_warning(line) {\n+            fatal_procres(fmt!(\"unexpected compiler error or warning: '%s'\",\n+                               line),\n                           procres);\n         }\n     }\n@@ -305,6 +305,81 @@ fn check_expected_errors(expected_errors: ~[errors::expected_error],\n     }\n }\n \n+fn is_compiler_error_or_warning(line: ~str) -> bool {\n+    let mut i = 0u;\n+    return\n+        scan_until_char(line, ':', &mut i) &&\n+        scan_char(line, ':', &mut i) &&\n+        scan_integer(line, &mut i) &&\n+        scan_char(line, ':', &mut i) &&\n+        scan_integer(line, &mut i) &&\n+        scan_char(line, ':', &mut i) &&\n+        scan_char(line, ' ', &mut i) &&\n+        scan_integer(line, &mut i) &&\n+        scan_char(line, ':', &mut i) &&\n+        scan_integer(line, &mut i) &&\n+        scan_char(line, ' ', &mut i) &&\n+        (scan_string(line, ~\"error\", &mut i) ||\n+         scan_string(line, ~\"warning\", &mut i));\n+}\n+\n+fn scan_until_char(haystack: ~str, needle: char, idx: &mut uint) -> bool {\n+    if *idx >= haystack.len() {\n+        return false;\n+    }\n+    let opt = str::find_char_from(haystack, needle, *idx);\n+    if opt.is_none() {\n+        return false;\n+    }\n+    *idx = opt.get();\n+    return true;\n+}\n+\n+fn scan_char(haystack: ~str, needle: char, idx: &mut uint) -> bool {\n+    if *idx >= haystack.len() {\n+        return false;\n+    }\n+    let {ch, next} = str::char_range_at(haystack, *idx);\n+    if ch != needle {\n+        return false;\n+    }\n+    *idx = next;\n+    return true;\n+}\n+\n+fn scan_integer(haystack: ~str, idx: &mut uint) -> bool {\n+    let mut i = *idx;\n+    while i < haystack.len() {\n+        let {ch, next} = str::char_range_at(haystack, i);\n+        if ch < '0' || '9' < ch {\n+            break;\n+        }\n+        i = next;\n+    }\n+    if i == *idx {\n+        return false;\n+    }\n+    *idx = i;\n+    return true;\n+}\n+\n+fn scan_string(haystack: ~str, needle: ~str, idx: &mut uint) -> bool {\n+    let mut haystack_i = *idx;\n+    let mut needle_i = 0u;\n+    while needle_i < needle.len() {\n+        if haystack_i >= haystack.len() {\n+            return false;\n+        }\n+        let {ch, next} = str::char_range_at(haystack, haystack_i);\n+        haystack_i = next;\n+        if !scan_char(needle, ch, &mut needle_i) {\n+            return false;\n+        }\n+    }\n+    *idx = haystack_i;\n+    return true;\n+}\n+\n type procargs = {prog: ~str, args: ~[~str]};\n \n type procres = {status: int, stdout: ~str, stderr: ~str, cmdline: ~str};"}, {"sha": "daddf7d4cf0ce4f77f7b78be26b14aa350835010", "filename": "src/test/compile-fail/issue-1476.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98bd4a992c8997126ea4a2d4c6c1960a80a06c09/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd4a992c8997126ea4a2d4c6c1960a80a06c09/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=98bd4a992c8997126ea4a2d4c6c1960a80a06c09", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    log(error, x); //~ ERROR unresolved name: x\n+}"}]}