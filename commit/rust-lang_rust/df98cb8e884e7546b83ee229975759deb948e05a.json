{"sha": "df98cb8e884e7546b83ee229975759deb948e05a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOThjYjhlODg0ZTc1NDZiODNlZTIyOTk3NTc1OWRlYjk0OGUwNWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-05T22:48:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-06T02:06:24Z"}, "message": "Replace box types section with pointer types section.", "tree": {"sha": "8e089f61f7c8ca8861e51bd38fcbac7f3bb0bdbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e089f61f7c8ca8861e51bd38fcbac7f3bb0bdbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df98cb8e884e7546b83ee229975759deb948e05a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df98cb8e884e7546b83ee229975759deb948e05a", "html_url": "https://github.com/rust-lang/rust/commit/df98cb8e884e7546b83ee229975759deb948e05a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df98cb8e884e7546b83ee229975759deb948e05a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e513bc98754c1dfa33e8d71b7352a0409905e5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e513bc98754c1dfa33e8d71b7352a0409905e5f3", "html_url": "https://github.com/rust-lang/rust/commit/e513bc98754c1dfa33e8d71b7352a0409905e5f3"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "31b734b9f6d637b705246e435ba2ae58ffe9291e", "filename": "doc/rust.md", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/df98cb8e884e7546b83ee229975759deb948e05a/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/df98cb8e884e7546b83ee229975759deb948e05a/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=df98cb8e884e7546b83ee229975759deb948e05a", "patch": "@@ -2510,27 +2510,53 @@ tuple of arguments.\n Enumerated types cannot be denoted *structurally* as types, but must be\n denoted by named reference to an [*enumeration* item](#enumerations).\n \n-### Box types\n-\n-Box types are represented as pointers. There are three flavours of\n-pointers:\n-\n-Shared boxes (`@`)\n-  : These are reference-counted boxes. Their type is written\n-    `@content`, for example `@int` means a shared box containing an\n-    integer. Copying a value of such a type means copying the pointer\n-    and increasing the reference count.\n-\n-Unique boxes (`~`)\n-  : Unique boxes have only a single owner, and are freed when their\n-    owner releases them. They are written `~content`. Copying a\n-    unique box involves copying the contents into a new box.\n-\n-Unsafe pointers (`*`)\n-  : Unsafe pointers are pointers without safety guarantees or\n-    language-enforced semantics. Their type is written `*content`.\n-    They can be copied and dropped freely. Dereferencing an unsafe\n-    pointer is part of the unsafe sub-dialect of Rust.\n+### Pointer types\n+\n+All pointers in Rust are explicit first-class values.\n+They can be copied, stored into data structures, and returned from functions.\n+There are four varieties of pointer in Rust:\n+\n+Managed pointers (`@`)\n+  : These point to managed heap allocations (or \"boxes\") in the task-local, managed heap.\n+    Managed pointers are written `@content`,\n+    for example `@int` means a managed pointer to a managed box containing an integer.\n+    Copying a managed pointer is a \"shallow\" operation:\n+    it involves only copying the pointer itself\n+    (as well as any reference-count or GC-barriers required by the managed heap).\n+    Dropping a managed pointer does not necessarily release the box it points to;\n+    the lifecycles of managed boxes are subject to an unspecified garbage collection algorithm.\n+\n+Owning pointers (`~`)\n+  : These point to owned heap allocations (or \"boxes\") in the shared, inter-task heap.\n+    Each owned box has a single owning pointer; pointer and pointee retain a 1:1 relationship at all times.\n+    Owning pointers are written `~content`,\n+    for example `~int` means an owning pointer to an owned box containing an integer.\n+    Copying an owned box is a \"deep\" operation:\n+    it involves allocating a new owned box and copying the contents of the old box into the new box.\n+    Releasing an owning pointer immediately releases its corresponding owned box.\n+\n+Borrowed pointers (`&`)\n+  : These point to memory _owned by some other value_.\n+    Borrowed pointers arise by (automatic) conversion from owning pointers, managed pointers,\n+    or by applying the borrowing operator `&` to some other value,\n+    including [lvalues, rvalues or temporaries](#lvalues-rvalues-and-temporaries).\n+    Borrowed pointers are written `&content`, or in some cases `&f/content` for some lifetime-variable `f`,\n+    for example `&int` means a borrowed pointer to an integer.\n+    Copying a borrowed pointer is a \"shallow\" operation:\n+    it involves only copying the pointer itself.\n+    Releasing a borrowed pointer typically has no effect on the value it points to,\n+    with the exception of temporary values,\n+    which are released when the last borrowed pointer to them is released.\n+\n+Raw pointers (`*`)\n+  : Raw pointers are pointers without safety or liveness guarantees.\n+    Raw pointers are written `*content`,\n+    for example `*int` means a raw pointer to an integer.\n+    Copying or dropping a raw pointer is has no effect on the lifecycle of any other value.\n+    Dereferencing a raw pointer or converting it to any other pointer type is an [`unsafe` operation](#unsafe-functions).\n+    Raw pointers are generally discouraged in Rust code;\n+    they exist to support interoperability with foreign code,\n+    and writing performance-critical or low-level functions.\n \n ### Function types\n "}]}