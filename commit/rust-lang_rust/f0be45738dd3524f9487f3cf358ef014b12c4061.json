{"sha": "f0be45738dd3524f9487f3cf358ef014b12c4061", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmU0NTczOGRkMzUyNGY5NDg3ZjNjZjM1OGVmMDE0YjEyYzQwNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-27T01:22:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-27T01:22:13Z"}, "message": "Auto merge of #58321 - csmoe:substs, r=oli-obk\n\n[Step 1] Implement \"small substs optimization\" for substs of length 1\n\naddresses part of #58310\nr?@arielb1", "tree": {"sha": "10903749fd196862b24badae951b280ba79a2401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10903749fd196862b24badae951b280ba79a2401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0be45738dd3524f9487f3cf358ef014b12c4061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0be45738dd3524f9487f3cf358ef014b12c4061", "html_url": "https://github.com/rust-lang/rust/commit/f0be45738dd3524f9487f3cf358ef014b12c4061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0be45738dd3524f9487f3cf358ef014b12c4061/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c4c28920ddfdb43e68a363b7fe59ac4c92399c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c4c28920ddfdb43e68a363b7fe59ac4c92399c", "html_url": "https://github.com/rust-lang/rust/commit/02c4c28920ddfdb43e68a363b7fe59ac4c92399c"}, {"sha": "cf1172978729ecaf62492622498f4ca75137c390", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1172978729ecaf62492622498f4ca75137c390", "html_url": "https://github.com/rust-lang/rust/commit/cf1172978729ecaf62492622498f4ca75137c390"}], "stats": {"total": 764, "additions": 385, "deletions": 379}, "files": [{"sha": "0d8f71a50ce5234ed6270222886bd25781fed812", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -67,7 +67,7 @@ use crate::traits::query::{\n };\n use crate::ty::{TyCtxt, FnSig, Instance, InstanceDef,\n          ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n // is repeated (i.e., which sub-expression of the macro we are in) but don't need\n@@ -661,7 +661,7 @@ define_dep_nodes!( <'tcx>\n     [] TypeOpNormalizePolyFnSig(CanonicalTypeOpNormalizeGoal<'tcx, PolyFnSig<'tcx>>),\n     [] TypeOpNormalizeFnSig(CanonicalTypeOpNormalizeGoal<'tcx, FnSig<'tcx>>),\n \n-    [] SubstituteNormalizeAndTestPredicates { key: (DefId, &'tcx Substs<'tcx>) },\n+    [] SubstituteNormalizeAndTestPredicates { key: (DefId, SubstsRef<'tcx>) },\n     [] MethodAutoderefSteps(CanonicalTyGoal<'tcx>),\n \n     [input] TargetFeaturesWhitelist,"}, {"sha": "6ef902a47dc8d768c931156e9a8b2bf485979acf", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -34,7 +34,7 @@ use crate::ty::{IntType, UintType};\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::error::TypeError;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::traits::{Obligation, PredicateObligations};\n \n use syntax::ast;\n@@ -373,9 +373,9 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n \n     fn relate_item_substs(&mut self,\n                           item_def_id: DefId,\n-                          a_subst: &'tcx Substs<'tcx>,\n-                          b_subst: &'tcx Substs<'tcx>)\n-                          -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+                          a_subst: SubstsRef<'tcx>,\n+                          b_subst: SubstsRef<'tcx>)\n+                          -> RelateResult<'tcx, SubstsRef<'tcx>>\n     {\n         if self.ambient_variance == ty::Variance::Invariant {\n             // Avoid fetching the variance if we are in an invariant"}, {"sha": "31b01eecf5cb6e88231f428b7f908c0a93f41178", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -5,7 +5,7 @@ use crate::hir::def_id::DefId;\n \n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::TyVar;\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n@@ -33,9 +33,9 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n \n     fn relate_item_substs(&mut self,\n                           _item_def_id: DefId,\n-                          a_subst: &'tcx Substs<'tcx>,\n-                          b_subst: &'tcx Substs<'tcx>)\n-                          -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+                          a_subst: SubstsRef<'tcx>,\n+                          b_subst: SubstsRef<'tcx>)\n+                          -> RelateResult<'tcx, SubstsRef<'tcx>>\n     {\n         // N.B., once we are equating types, we don't care about\n         // variance, so don't try to lookup the variance here. This"}, {"sha": "3dace2f2e89b0ba7655c8643e492831264695dd5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -56,7 +56,7 @@ use crate::hir::Node;\n use crate::middle::region;\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::error::TypeError;\n-use crate::ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n+use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use std::{cmp, fmt};\n use syntax_pos::{Pos, Span};\n@@ -570,7 +570,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         value: &mut DiagnosticStyledString,\n         other_value: &mut DiagnosticStyledString,\n         name: String,\n-        sub: &ty::subst::Substs<'tcx>,\n+        sub: ty::subst::SubstsRef<'tcx>,\n         pos: usize,\n         other_ty: &Ty<'tcx>,\n     ) {\n@@ -648,7 +648,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         mut t1_out: &mut DiagnosticStyledString,\n         mut t2_out: &mut DiagnosticStyledString,\n         path: String,\n-        sub: &ty::subst::Substs<'tcx>,\n+        sub: ty::subst::SubstsRef<'tcx>,\n         other_path: String,\n         other_ty: &Ty<'tcx>,\n     ) -> Option<()> {\n@@ -687,8 +687,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn strip_generic_default_params(\n         &self,\n         def_id: DefId,\n-        substs: &ty::subst::Substs<'tcx>,\n-    ) -> &'tcx ty::subst::Substs<'tcx> {\n+        substs: ty::subst::SubstsRef<'tcx>,\n+    ) -> SubstsRef<'tcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let mut num_supplied_defaults = 0;\n         let mut type_params = generics"}, {"sha": "506388c268bb107e01ecade10240980af9297ab7", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -7,7 +7,7 @@ use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty;\n use crate::ty::error::ExpectedFound;\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::util::ppaux::RegionHighlightMode;\n \n impl NiceRegionError<'me, 'gcx, 'tcx> {\n@@ -175,8 +175,8 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         sub_placeholder: Option<ty::Region<'tcx>>,\n         sup_placeholder: Option<ty::Region<'tcx>>,\n         trait_def_id: DefId,\n-        expected_substs: &'tcx Substs<'tcx>,\n-        actual_substs: &'tcx Substs<'tcx>,\n+        expected_substs: SubstsRef<'tcx>,\n+        actual_substs: SubstsRef<'tcx>,\n     ) -> DiagnosticBuilder<'me> {\n         debug!(\n             \"try_report_placeholders_trait(\\"}, {"sha": "84ad742d3c9722e4f252e90df12d3e225eaa23ff", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -18,7 +18,7 @@ use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::relate::RelateResult;\n-use crate::ty::subst::{Kind, Substs};\n+use crate::ty::subst::{Kind, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n use crate::ty::{FloatVid, IntVid, TyVid};\n use crate::util::nodemap::FxHashMap;\n@@ -1088,8 +1088,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Given a set of generics defined on a type or impl, returns a substitution mapping each\n     /// type/region parameter to a fresh inference variable.\n-    pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> &'tcx Substs<'tcx> {\n-        Substs::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))\n+    pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {\n+        InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))\n     }\n \n     /// Returns `true` if errors have been reported since this infcx was"}, {"sha": "159bc1ceae26c2329ca0f152d10f2cd9002b4dbd", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -9,7 +9,7 @@ use crate::traits::{self, PredicateObligation};\n use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n use crate::ty::outlives::Component;\n-use crate::ty::subst::{Kind, Substs, UnpackedKind};\n+use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, UnpackedKind};\n use crate::util::nodemap::DefIdMap;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n@@ -30,7 +30,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n     ///     fn foo<'a, 'b, T>() -> Foo<'a, T>\n     ///\n     /// then `substs` would be `['a, T]`.\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n \n     /// The type variable that represents the value of the abstract type\n     /// that we require. In other words, after we compile this function,\n@@ -437,7 +437,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n-        let id_substs = Substs::identity_for_item(gcx, def_id);\n+        let id_substs = InternalSubsts::identity_for_item(gcx, def_id);\n         let map: FxHashMap<Kind<'tcx>, Kind<'gcx>> = opaque_defn\n             .substs\n             .iter()\n@@ -740,7 +740,7 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n         &mut self,\n         ty: Ty<'tcx>,\n         def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> Ty<'tcx> {\n         let infcx = self.infcx;\n         let tcx = infcx.tcx;"}, {"sha": "e1ad5aeea19fcb189ec636562a1eef7d1c3a3019", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -2,7 +2,7 @@ use crate::hir::def_id::DefId;\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::{GenericKind, VerifyBound};\n use crate::traits;\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, InternalSubsts};\n use crate::ty::{self, Ty, TyCtxt};\n use crate::util::captures::Captures;\n \n@@ -292,7 +292,7 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n             .iter()\n             .map(|(p, _)| *p)\n             .collect();\n-        let identity_substs = Substs::identity_for_item(tcx, assoc_item_def_id);\n+        let identity_substs = InternalSubsts::identity_for_item(tcx, assoc_item_def_id);\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n         self.collect_outlives_from_predicate_list(\n             move |ty| ty == identity_proj,"}, {"sha": "32c7216765533cf65fc925b962b74d1096752dca", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n use std::cmp;\n use std::mem;\n use crate::ty;\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n /// the symbol will be exported. `C` symbols will be exported from any\n@@ -33,7 +33,7 @@ impl SymbolExportLevel {\n #[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable)]\n pub enum ExportedSymbol<'tcx> {\n     NonGeneric(DefId),\n-    Generic(DefId, &'tcx Substs<'tcx>),\n+    Generic(DefId, SubstsRef<'tcx>),\n     NoDefId(ty::SymbolName),\n }\n "}, {"sha": "bfc74979af42c8630164e7823a05881cdefbb535", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -27,7 +27,7 @@ use syntax::ast::{self, Name};\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::layout::VariantIdx;\n use crate::ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n@@ -2151,7 +2151,7 @@ impl<'tcx> Operand<'tcx> {\n     pub fn function_handle<'a>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         span: Span,\n     ) -> Self {\n         let ty = tcx.type_of(def_id).subst(tcx, substs);\n@@ -2247,7 +2247,7 @@ pub enum AggregateKind<'tcx> {\n     Adt(\n         &'tcx AdtDef,\n         VariantIdx,\n-        &'tcx Substs<'tcx>,\n+        SubstsRef<'tcx>,\n         Option<UserTypeAnnotationIndex>,\n         Option<usize>,\n     ),"}, {"sha": "dbf911851bf2d785227ccf85d16244c19251d091", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@\n  */\n \n use crate::mir::*;\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, AdtDef, Ty, TyCtxt};\n use crate::ty::layout::VariantIdx;\n use crate::hir;\n@@ -17,7 +17,7 @@ pub enum PlaceTy<'tcx> {\n \n     /// Downcast to a particular variant of an enum.\n     Downcast { adt_def: &'tcx AdtDef,\n-               substs: &'tcx Substs<'tcx>,\n+               substs: SubstsRef<'tcx>,\n                variant_index: VariantIdx },\n }\n "}, {"sha": "4f31cebca088d9c3fb8afdc939bc8e5c45e95776", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,5 +1,5 @@\n use crate::hir::def_id::DefId;\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n use crate::mir::*;\n use syntax_pos::Span;\n@@ -238,7 +238,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_substs(&mut self,\n-                            substs: & $($mutability)? &'tcx Substs<'tcx>,\n+                            substs: & $($mutability)? SubstsRef<'tcx>,\n                             _: Location) {\n                 self.super_substs(substs);\n             }\n@@ -889,7 +889,7 @@ macro_rules! make_mir_visitor {\n             fn super_const(&mut self, _const: & $($mutability)? &'tcx ty::LazyConst<'tcx>) {\n             }\n \n-            fn super_substs(&mut self, _substs: & $($mutability)? &'tcx Substs<'tcx>) {\n+            fn super_substs(&mut self, _substs: & $($mutability)? SubstsRef<'tcx>) {\n             }\n \n             fn super_generator_substs(&mut self,"}, {"sha": "e93351197fe4702c269de8bb3b21fdac02554dc7", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -631,7 +631,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         finished_map\n     }\n \n-    fn is_param_no_infer(&self, substs: &Substs<'_>) -> bool {\n+    fn is_param_no_infer(&self, substs: SubstsRef<'_>) -> bool {\n         return self.is_of_param(substs.type_at(0)) &&\n             !substs.types().any(|t| t.has_infer_types());\n     }"}, {"sha": "9b0a3820c859ce2fe7d13d928a91b4e0cae7af41", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -11,7 +11,7 @@ use syntax_pos::Span;\n use crate::traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n              TraitEngine, Vtable};\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::fold::TypeFoldable;\n \n /// Attempts to resolve an obligation to a vtable. The result is\n@@ -82,7 +82,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// types.\n     pub fn subst_and_normalize_erasing_regions<T>(\n         self,\n-        param_substs: &Substs<'tcx>,\n+        param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         value: &T\n     ) -> T"}, {"sha": "ee7893a27de7dd6caad1226c9feff3498437fac1", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -29,7 +29,7 @@ use crate::mir::interpret::ErrorHandled;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::{self, AdtKind, List, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n@@ -565,7 +565,7 @@ pub enum Vtable<'tcx, N> {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableImplData<'tcx, N> {\n     pub impl_def_id: DefId,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     pub nested: Vec<N>\n }\n \n@@ -622,7 +622,7 @@ pub struct VtableFnPointerData<'tcx, N> {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     pub nested: Vec<N>,\n }\n \n@@ -963,7 +963,7 @@ fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn substitute_normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                      key: (DefId, &'tcx Substs<'tcx>))\n+                                                      key: (DefId, SubstsRef<'tcx>))\n                                                       -> bool\n {\n     debug!(\"substitute_normalize_and_test_predicates(key={:?})\",\n@@ -983,7 +983,7 @@ fn substitute_normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n fn vtable_methods<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n-    -> Lrc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>\n+    -> Lrc<Vec<Option<(DefId, SubstsRef<'tcx>)>>>\n {\n     debug!(\"vtable_methods({:?})\", trait_ref);\n \n@@ -992,7 +992,7 @@ fn vtable_methods<'a, 'tcx>(\n             let trait_methods = tcx.associated_items(trait_ref.def_id())\n                 .filter(|item| item.kind == ty::AssociatedKind::Method);\n \n-            // Now list each method's DefId and Substs (for within its trait).\n+            // Now list each method's DefId and InternalSubsts (for within its trait).\n             // If the method can never be called from this object, produce None.\n             trait_methods.map(move |trait_method| {\n                 debug!(\"vtable_methods: trait_method={:?}\", trait_method);\n@@ -1007,7 +1007,7 @@ fn vtable_methods<'a, 'tcx>(\n                 // the method may have some early-bound lifetimes, add\n                 // regions for those\n                 let substs = trait_ref.map_bound(|trait_ref|\n-                    Substs::for_item(tcx, def_id, |param, _|\n+                    InternalSubsts::for_item(tcx, def_id, |param, _|\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                             GenericParamDefKind::Type {..} => {"}, {"sha": "b2079c2516935c5e1c11b125b29608d72de7e310", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -15,7 +15,7 @@ use crate::hir::def_id::DefId;\n use crate::lint;\n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable, Predicate, ToPredicate};\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, InternalSubsts};\n use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self, Name};\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         self, receiver_ty: Ty<'tcx>, self_ty: Ty<'tcx>, method_def_id: DefId\n     ) -> Ty<'tcx> {\n         debug!(\"receiver_for_self_ty({:?}, {:?}, {:?})\", receiver_ty, self_ty, method_def_id);\n-        let substs = Substs::for_item(self, method_def_id, |param, _| {\n+        let substs = InternalSubsts::for_item(self, method_def_id, |param, _| {\n             if param.index == 0 {\n                 self_ty.into()\n             } else {\n@@ -559,13 +559,17 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n             // U: Trait<Arg1, ..., ArgN>\n             let trait_predicate = {\n-                let substs = Substs::for_item(self, method.container.assert_trait(), |param, _| {\n-                    if param.index == 0 {\n-                        unsized_self_ty.into()\n-                    } else {\n-                        self.mk_param_from_def(param)\n-                    }\n-                });\n+                let substs = InternalSubsts::for_item(\n+                    self,\n+                    method.container.assert_trait(),\n+                    |param, _| {\n+                        if param.index == 0 {\n+                            unsized_self_ty.into()\n+                        } else {\n+                            self.mk_param_from_def(param)\n+                        }\n+                    },\n+                );\n \n                 ty::TraitRef {\n                     def_id: unsize_did,"}, {"sha": "72df12bc535a66e304d38449951af9f9568395b8", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -18,7 +18,7 @@ use crate::infer::type_variable::TypeVariableOrigin;\n use crate::mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast::Ident;\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, InternalSubsts};\n use crate::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::util::common::FN_OUTPUT_NAME;\n@@ -401,7 +401,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_placeholders() {\n-                    let identity_substs = Substs::identity_for_item(tcx, def_id);\n+                    let identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {\n                         let cid = GlobalId {\n@@ -1490,7 +1490,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n     }\n     let substs = translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.node);\n     let ty = if let ty::AssociatedKind::Existential = assoc_ty.item.kind {\n-        let item_substs = Substs::identity_for_item(tcx, assoc_ty.item.def_id);\n+        let item_substs = InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         tcx.mk_opaque(assoc_ty.item.def_id, item_substs)\n     } else {\n         tcx.type_of(assoc_ty.item.def_id)"}, {"sha": "8a30c18d6e5f7fc565b638e93973acdc4ae829c2", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -9,7 +9,7 @@ use crate::mir::interpret::GlobalId;\n use crate::traits::project::Normalized;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, InternalSubsts};\n use crate::ty::{self, Ty, TyCtxt};\n \n use super::NoSolution;\n@@ -193,7 +193,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_placeholders() {\n-                    let identity_substs = Substs::identity_for_item(tcx, def_id);\n+                    let identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {\n                         let cid = GlobalId {"}, {"sha": "e85b84bce4321d5e036c3ca67a9c70c46cd5e1d0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -34,7 +34,7 @@ use crate::middle::lang_items;\n use crate::mir::interpret::GlobalId;\n use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n use crate::hir;\n@@ -2944,7 +2944,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn vtable_impl(\n         &mut self,\n         impl_def_id: DefId,\n-        mut substs: Normalized<'tcx, &'tcx Substs<'tcx>>,\n+        mut substs: Normalized<'tcx, SubstsRef<'tcx>>,\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -3538,7 +3538,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n         snapshot: &CombinedSnapshot<'_, 'tcx>,\n-    ) -> Normalized<'tcx, &'tcx Substs<'tcx>> {\n+    ) -> Normalized<'tcx, SubstsRef<'tcx>> {\n         match self.match_impl(impl_def_id, obligation, snapshot) {\n             Ok(substs) => substs,\n             Err(()) => {\n@@ -3556,7 +3556,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n         snapshot: &CombinedSnapshot<'_, 'tcx>,\n-    ) -> Result<Normalized<'tcx, &'tcx Substs<'tcx>>, ()> {\n+    ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {\n         let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n \n         // Before we create the substitutions and everything, first\n@@ -3761,7 +3761,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n         def_id: DefId,         // of impl or trait\n-        substs: &Substs<'tcx>, // for impl or trait\n+        substs: SubstsRef<'tcx>,  // for impl or trait\n     ) -> Vec<PredicateObligation<'tcx>> {\n         debug!(\"impl_or_trait_obligations(def_id={:?})\", def_id);\n         let tcx = self.tcx();"}, {"sha": "1d84f22acd9f8cc0cebb0bddefc9827aa37d0201", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, InternalSubsts, SubstsRef};\n \n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;\n@@ -73,9 +73,9 @@ pub struct OverlapError {\n pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                         param_env: ty::ParamEnv<'tcx>,\n                                         source_impl: DefId,\n-                                        source_substs: &'tcx Substs<'tcx>,\n+                                        source_substs: SubstsRef<'tcx>,\n                                         target_node: specialization_graph::Node)\n-                                        -> &'tcx Substs<'tcx> {\n+                                        -> SubstsRef<'tcx> {\n     debug!(\"translate_substs({:?}, {:?}, {:?}, {:?})\",\n            param_env, source_impl, source_substs, target_node);\n     let source_trait_ref = infcx.tcx\n@@ -114,9 +114,9 @@ pub fn find_associated_item<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     item: &ty::AssociatedItem,\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n     impl_data: &super::VtableImplData<'tcx, ()>,\n-) -> (DefId, &'tcx Substs<'tcx>) {\n+) -> (DefId, SubstsRef<'tcx>) {\n     debug!(\"find_associated_item({:?}, {:?}, {:?}, {:?})\",\n            param_env, item, substs, impl_data);\n     assert!(!substs.needs_infer());\n@@ -214,7 +214,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                        param_env: ty::ParamEnv<'tcx>,\n                                        source_trait_ref: ty::TraitRef<'tcx>,\n                                        target_impl: DefId)\n-                                       -> Result<&'tcx Substs<'tcx>, ()> {\n+                                       -> Result<SubstsRef<'tcx>, ()> {\n     debug!(\"fulfill_implication({:?}, trait_ref={:?} |- {:?} applies)\",\n            param_env, source_trait_ref, target_impl);\n \n@@ -399,7 +399,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_, '_, '_>, impl_def_id: DefId) -> Option<\n \n     let mut w = \"impl\".to_owned();\n \n-    let substs = Substs::identity_for_item(tcx, impl_def_id);\n+    let substs = InternalSubsts::identity_for_item(tcx, impl_def_id);\n \n     // FIXME: Currently only handles ?Sized.\n     //        Needs to support ?Move and ?DynSized when they are implemented."}, {"sha": "c3223f0cd6331d9c8c1088b9b51d58384294a033", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -3,7 +3,7 @@ use crate::hir::def_id::DefId;\n use crate::traits::specialize::specialization_graph::NodeItem;\n use crate::ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use crate::ty::outlives::Component;\n-use crate::ty::subst::{Kind, Subst, Substs};\n+use crate::ty::subst::{Kind, Subst, SubstsRef};\n use crate::util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n@@ -358,7 +358,7 @@ impl<'tcx, I: Iterator<Item = ty::Predicate<'tcx>>> Iterator for FilterToTraits<\n pub fn impl_trait_ref_and_oblig<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tcx>,\n                                                 param_env: ty::ParamEnv<'tcx>,\n                                                 impl_def_id: DefId,\n-                                                impl_substs: &Substs<'tcx>)\n+                                                impl_substs: SubstsRef<'tcx>,)\n                                                 -> (ty::TraitRef<'tcx>,\n                                                     Vec<PredicateObligation<'tcx>>)\n {"}, {"sha": "8d449f5c44cf4b246d56d5700a9db6c8c6af8104", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,7 +1,7 @@\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n \n \n /// Represents coercing a value to a different type of value.\n@@ -98,7 +98,7 @@ pub struct OverloadedDeref<'tcx> {\n \n impl<'a, 'gcx, 'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, source: Ty<'tcx>)\n-                       -> (DefId, &'tcx Substs<'tcx>) {\n+                       -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {\n             hir::MutImmutable => tcx.lang_items().deref_trait(),\n             hir::MutMutable => tcx.lang_items().deref_mut_trait()"}, {"sha": "3ab744ebaeb17d0541961cb90bf347054428f2d0", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -13,7 +13,7 @@ use crate::rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n use std::intrinsics;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::mir::interpret::Allocation;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n@@ -185,7 +185,7 @@ pub fn decode_predicates<'a, 'tcx, D>(decoder: &mut D)\n }\n \n #[inline]\n-pub fn decode_substs<'a, 'tcx, D>(decoder: &mut D) -> Result<&'tcx Substs<'tcx>, D::Error>\n+pub fn decode_substs<'a, 'tcx, D>(decoder: &mut D) -> Result<SubstsRef<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n {\n@@ -281,7 +281,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::infer::canonical::CanonicalVarInfos;\n             use $crate::ty;\n             use $crate::ty::codec::*;\n-            use $crate::ty::subst::Substs;\n+            use $crate::ty::subst::SubstsRef;\n             use $crate::hir::def_id::{CrateNum};\n             use crate::rustc_serialize::{Decoder, SpecializedDecoder};\n             use std::borrow::Cow;\n@@ -344,9 +344,9 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx Substs<'tcx>>\n+            impl<$($typaram),*> SpecializedDecoder<SubstsRef<'tcx>>\n             for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> {\n+                fn specialized_decode(&mut self) -> Result<SubstsRef<'tcx>, Self::Error> {\n                     decode_substs(self)\n                 }\n             }"}, {"sha": "b37b632f4beec655cec6b0dc9191f6ccb1e2597a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -22,7 +22,7 @@ use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::{self, Mir, interpret, ProjectionKind};\n use crate::mir::interpret::Allocation;\n-use crate::ty::subst::{Kind, Substs, Subst};\n+use crate::ty::subst::{Kind, InternalSubsts, Subst, SubstsRef};\n use crate::ty::ReprOptions;\n use crate::traits;\n use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n@@ -118,7 +118,7 @@ pub struct CtxtInterners<'tcx> {\n     /// they're accessed quite often.\n     type_: InternedSet<'tcx, TyS<'tcx>>,\n     type_list: InternedSet<'tcx, List<Ty<'tcx>>>,\n-    substs: InternedSet<'tcx, Substs<'tcx>>,\n+    substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo>>,\n     region: InternedSet<'tcx, RegionKind>,\n     existential_predicates: InternedSet<'tcx, List<ExistentialPredicate<'tcx>>>,\n@@ -325,7 +325,7 @@ pub struct ResolvedOpaqueTy<'tcx> {\n     /// Generic parameters on the opaque type as passed by this function.\n     /// For `existential type Foo<A, B>; fn foo<T, U>() -> Foo<T, U> { .. }` this is `[T, U]`, not\n     /// `[A, B]`\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug)]\n@@ -352,7 +352,7 @@ pub struct TypeckTables<'tcx> {\n     /// of this node. This only applies to nodes that refer to entities\n     /// parameterized by type parameters, such as generic fns, types, or\n     /// other items.\n-    node_substs: ItemLocalMap<&'tcx Substs<'tcx>>,\n+    node_substs: ItemLocalMap<SubstsRef<'tcx>>,\n \n     /// This will either store the canonicalized types provided by the user\n     /// or the substitutions that the user explicitly gave (if any) attached\n@@ -548,19 +548,19 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.node_types.get(&id.local_id).cloned()\n     }\n \n-    pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, &'tcx Substs<'tcx>> {\n+    pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.node_substs\n         }\n     }\n \n-    pub fn node_substs(&self, id: hir::HirId) -> &'tcx Substs<'tcx> {\n+    pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n-        self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| Substs::empty())\n+        self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())\n     }\n \n-    pub fn node_substs_opt(&self, id: hir::HirId) -> Option<&'tcx Substs<'tcx>> {\n+    pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.node_substs.get(&id.local_id).cloned()\n     }\n@@ -1733,7 +1733,7 @@ impl<'gcx> GlobalCtxt<'gcx> {\n /// A trait implemented for all X<'a> types which can be safely and\n /// efficiently converted to X<'tcx> as long as they are part of the\n /// provided TyCtxt<'tcx>.\n-/// This can be done, for example, for Ty<'tcx> or &'tcx Substs<'tcx>\n+/// This can be done, for example, for Ty<'tcx> or SubstsRef<'tcx>\n /// by looking them up in their respective interners.\n ///\n /// However, this is still not the best implementation as it does\n@@ -1807,7 +1807,7 @@ nop_list_lift!{Predicate<'a> => Predicate<'tcx>}\n nop_list_lift!{CanonicalVarInfo => CanonicalVarInfo}\n nop_list_lift!{ProjectionKind<'a> => ProjectionKind<'tcx>}\n \n-// this is the impl for `&'a Substs<'a>`\n+// this is the impl for `&'a InternalSubsts<'a>`\n nop_list_lift!{Kind<'a> => Kind<'tcx>}\n \n impl<'a, 'tcx> Lift<'tcx> for &'a mir::interpret::Allocation {\n@@ -2183,7 +2183,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             Generator, GeneratorWitness, Dynamic, Closure, Tuple, Bound,\n             Param, Infer, UnnormalizedProjection, Projection, Opaque, Foreign);\n \n-        println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n+        println!(\"InternalSubsts interner: #{}\", self.interners.substs.borrow().len());\n         println!(\"Region interner: #{}\", self.interners.region.borrow().len());\n         println!(\"Stability interner: #{}\", self.stability_interner.borrow().len());\n         println!(\"Allocation interner: #{}\", self.allocation_interner.borrow().len());\n@@ -2250,7 +2250,7 @@ impl<'tcx: 'lcx, 'lcx> Borrow<[CanonicalVarInfo]> for Interned<'tcx, List<Canoni\n     }\n }\n \n-impl<'tcx: 'lcx, 'lcx> Borrow<[Kind<'lcx>]> for Interned<'tcx, Substs<'tcx>> {\n+impl<'tcx: 'lcx, 'lcx> Borrow<[Kind<'lcx>]> for Interned<'tcx, InternalSubsts<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a [Kind<'lcx>] {\n         &self.0[..]\n     }\n@@ -2507,7 +2507,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_adt(self, def: &'tcx AdtDef, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n         // take a copy of substs so that we own the vectors inside\n         self.mk_ty(Adt(def, substs))\n     }\n@@ -2520,7 +2520,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n         let adt_def = self.adt_def(def_id);\n-        let substs = Substs::for_item(self, def_id, |param, substs| {\n+        let substs = InternalSubsts::for_item(self, def_id, |param, substs| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => bug!(),\n                 GenericParamDefKind::Type { has_default, .. } => {\n@@ -2613,7 +2613,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_fn_def(self, def_id: DefId,\n-                     substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+                     substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(FnDef(def_id, substs))\n     }\n \n@@ -2634,7 +2634,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     #[inline]\n     pub fn mk_projection(self,\n                          item_def_id: DefId,\n-                         substs: &'tcx Substs<'tcx>)\n+                         substs: SubstsRef<'tcx>)\n         -> Ty<'tcx> {\n             self.mk_ty(Projection(ProjectionTy {\n                 item_def_id,\n@@ -2704,7 +2704,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_opaque(self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(Opaque(def_id, substs))\n     }\n \n@@ -2817,7 +2817,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_substs_trait(self,\n                      self_ty: Ty<'tcx>,\n                      rest: &[Kind<'tcx>])\n-                    -> &'tcx Substs<'tcx>\n+                    -> SubstsRef<'tcx>\n     {\n         self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n     }"}, {"sha": "2b12dcca93ad7c7a1022c66d3030aaf90b9b5336", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TypeFlags, TypeFoldable};\n \n #[derive(Debug)]\n@@ -241,7 +241,7 @@ impl FlagComputation {\n         self.add_substs(projection_ty.substs);\n     }\n \n-    fn add_substs(&mut self, substs: &Substs<'_>) {\n+    fn add_substs(&mut self, substs: SubstsRef<'_>) {\n         for ty in substs.types() {\n             self.add_ty(ty);\n         }"}, {"sha": "33ec9c874f9ef1e5e4f3ecd4907bb8ff7c87a22d", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,6 +1,6 @@\n use crate::ty::context::TyCtxt;\n use crate::ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n-use crate::ty::{self, DefId, Substs};\n+use crate::ty::{self, DefId, SubstsRef};\n use crate::ty::{AdtKind, Visibility};\n use crate::ty::TyKind::*;\n \n@@ -108,21 +108,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn is_enum_variant_uninhabited_from(self,\n                                             module: DefId,\n                                             variant: &'tcx VariantDef,\n-                                            substs: &'tcx Substs<'tcx>)\n+                                            substs: SubstsRef<'tcx>)\n                                             -> bool\n     {\n         self.variant_inhabitedness_forest(variant, substs).contains(self, module)\n     }\n \n     pub fn is_variant_uninhabited_from_all_modules(self,\n                                                    variant: &'tcx VariantDef,\n-                                                   substs: &'tcx Substs<'tcx>)\n+                                                   substs: SubstsRef<'tcx>)\n                                                    -> bool\n     {\n         !self.variant_inhabitedness_forest(variant, substs).is_empty()\n     }\n \n-    fn variant_inhabitedness_forest(self, variant: &'tcx VariantDef, substs: &'tcx Substs<'tcx>)\n+    fn variant_inhabitedness_forest(self, variant: &'tcx VariantDef, substs: SubstsRef<'tcx>)\n                                     -> DefIdForest {\n         // Determine the ADT kind:\n         let adt_def_id = self.adt_def_id_of_variant(variant);\n@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     fn uninhabited_from(\n         &self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        substs: &'tcx Substs<'tcx>) -> DefIdForest\n+        substs: SubstsRef<'tcx>) -> DefIdForest\n     {\n         DefIdForest::intersection(tcx, self.variants.iter().map(|v| {\n             v.uninhabited_from(tcx, substs, self.adt_kind())\n@@ -151,7 +151,7 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n     fn uninhabited_from(\n         &self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         adt_kind: AdtKind) -> DefIdForest\n     {\n         let is_enum = match adt_kind {\n@@ -172,7 +172,7 @@ impl<'a, 'gcx, 'tcx> FieldDef {\n     fn uninhabited_from(\n         &self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         is_enum: bool,\n     ) -> DefIdForest {\n         let data_uninhabitedness = move || {"}, {"sha": "709dce4589f6be0a77a033553ab3140e9be91772", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::Unsafety;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n+use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, SubstsRef, TyCtxt};\n use crate::traits;\n use rustc_target::spec::abi::Abi;\n use crate::util::ppaux;\n@@ -11,7 +11,7 @@ use std::iter;\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Instance<'tcx> {\n     pub def: InstanceDef<'tcx>,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n@@ -203,7 +203,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Instance<'tcx> {\n-    pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>)\n+    pub fn new(def_id: DefId, substs: SubstsRef<'tcx>)\n                -> Instance<'tcx> {\n         assert!(!substs.has_escaping_bound_vars(),\n                 \"substs of instance {:?} not normalized for codegen: {:?}\",\n@@ -241,7 +241,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n     pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>,\n                    def_id: DefId,\n-                   substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n+                   substs: SubstsRef<'tcx>) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n             debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n@@ -293,7 +293,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n     pub fn resolve_for_vtable(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               param_env: ty::ParamEnv<'tcx>,\n                               def_id: DefId,\n-                              substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n+                              substs: SubstsRef<'tcx>) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let fn_sig = tcx.fn_sig(def_id);\n         let is_vtable_shim =\n@@ -338,7 +338,7 @@ fn resolve_associated_item<'a, 'tcx>(\n     trait_item: &ty::AssociatedItem,\n     param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,\n-    rcvr_substs: &'tcx Substs<'tcx>,\n+    rcvr_substs: SubstsRef<'tcx>,\n ) -> Option<Instance<'tcx>> {\n     let def_id = trait_item.def_id;\n     debug!(\"resolve_associated_item(trait_item={:?}, \\"}, {"sha": "5243c4dbfd209ea6787857c5697a5adc2d762203", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -22,7 +22,7 @@ use crate::session::CrateDisambiguator;\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::layout::VariantIdx;\n-use crate::ty::subst::{Subst, Substs};\n+use crate::ty::subst::{Subst, InternalSubsts, SubstsRef};\n use crate::ty::util::{IntTypeExt, Discr};\n use crate::ty::walk::TypeWalker;\n use crate::util::captures::Captures;\n@@ -982,14 +982,14 @@ impl<'tcx> serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n \n impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> {\n-    pub fn instantiate(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: &Substs<'tcx>)\n+    pub fn instantiate(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         let mut instantiated = InstantiatedPredicates::empty();\n         self.instantiate_into(tcx, &mut instantiated, substs);\n         instantiated\n     }\n \n-    pub fn instantiate_own(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: &Substs<'tcx>)\n+    pub fn instantiate_own(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n                            -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n             predicates: self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)).collect(),\n@@ -998,7 +998,7 @@ impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> {\n \n     fn instantiate_into(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                         instantiated: &mut InstantiatedPredicates<'tcx>,\n-                        substs: &Substs<'tcx>) {\n+                        substs: SubstsRef<'tcx>) {\n         if let Some(def_id) = self.parent {\n             tcx.predicates_of(def_id).instantiate_into(tcx, instantiated, substs);\n         }\n@@ -1067,7 +1067,7 @@ pub enum Predicate<'tcx> {\n     Subtype(PolySubtypePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(DefId, &'tcx Substs<'tcx>),\n+    ConstEvaluatable(DefId, SubstsRef<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -2261,7 +2261,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     ) -> Option<Discr<'tcx>> {\n         let param_env = ParamEnv::empty();\n         let repr_type = self.repr.discr_type();\n-        let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n+        let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), expr_did);\n         let instance = ty::Instance::new(expr_did, substs);\n         let cid = GlobalId {\n             instance,\n@@ -2463,7 +2463,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n }\n \n impl<'a, 'gcx, 'tcx> FieldDef {\n-    pub fn ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, subst: &Substs<'tcx>) -> Ty<'tcx> {\n+    pub fn ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }\n }"}, {"sha": "0d3e9f7914ba7ac436fc1f3f7fca725888be89a1", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -9,7 +9,7 @@ use crate::traits::query::{\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::ty::query::queries;\n use crate::ty::query::Query;\n use crate::ty::query::QueryCache;\n@@ -914,7 +914,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::substitute_normalize_and_test_predicates<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, &'tcx Substs<'tcx>)) -> Cow<'static, str> {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, SubstsRef<'tcx>)) -> Cow<'static, str> {\n         format!(\"testing substituted normalized predicates:`{}`\", tcx.item_path_str(key.0)).into()\n     }\n }"}, {"sha": "d353da801778d5999f6426caa0665af8da36bb6b", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@ use crate::infer::canonical::Canonical;\n use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n use crate::traits;\n use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::mir;\n \n@@ -109,7 +109,7 @@ impl Key for (DefId, SimplifiedType) {\n     }\n }\n \n-impl<'tcx> Key for (DefId, &'tcx Substs<'tcx>) {\n+impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }"}, {"sha": "ee36a1af8f400f77e311a6428ff78bb1310b7ac6", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -36,8 +36,8 @@ use crate::traits::specialization_graph;\n use crate::traits::Clauses;\n use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, AdtSizedConstraint};\n use crate::ty::steal::Steal;\n-use crate::ty::subst::Substs;\n use crate::ty::util::NeedsDrop;\n+use crate::ty::subst::SubstsRef;\n use crate::util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n use crate::util::common::{ErrorReported};\n use crate::util::profiling::ProfileCategory::*;\n@@ -393,7 +393,7 @@ define_queries! { <'tcx>\n \n     Other {\n         [] fn vtable_methods: vtable_methods_node(ty::PolyTraitRef<'tcx>)\n-                            -> Lrc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>,\n+                            -> Lrc<Vec<Option<(DefId, SubstsRef<'tcx>)>>>,\n     },\n \n     Codegen {\n@@ -493,9 +493,9 @@ define_queries! { <'tcx>\n \n     Codegen {\n         [] fn upstream_monomorphizations: UpstreamMonomorphizations(CrateNum)\n-            -> Lrc<DefIdMap<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>>,\n+            -> Lrc<DefIdMap<Lrc<FxHashMap<SubstsRef<'tcx>, CrateNum>>>>,\n         [] fn upstream_monomorphizations_for: UpstreamMonomorphizationsFor(DefId)\n-            -> Option<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>,\n+            -> Option<Lrc<FxHashMap<SubstsRef<'tcx>, CrateNum>>>,\n     },\n \n     Other {\n@@ -714,7 +714,7 @@ define_queries! { <'tcx>\n         >,\n \n         [] fn substitute_normalize_and_test_predicates:\n-            substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n+            substitute_normalize_and_test_predicates_node((DefId, SubstsRef<'tcx>)) -> bool,\n \n         [] fn method_autoderef_steps: MethodAutoderefSteps(\n             CanonicalTyGoal<'tcx>\n@@ -906,7 +906,7 @@ fn vtable_methods_node<'tcx>(trait_ref: ty::PolyTraitRef<'tcx>) -> DepConstructo\n     DepConstructor::VtableMethods{ trait_ref }\n }\n \n-fn substitute_normalize_and_test_predicates_node<'tcx>(key: (DefId, &'tcx Substs<'tcx>))\n+fn substitute_normalize_and_test_predicates_node<'tcx>(key: (DefId, SubstsRef<'tcx>))\n                                             -> DepConstructor<'tcx> {\n     DepConstructor::SubstituteNormalizeAndTestPredicates { key }\n }"}, {"sha": "b15aa8629016641cc7b68b5022953e847ea37c2f", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -5,7 +5,7 @@\n //! subtyping, type equality, etc.\n \n use crate::hir::def_id::DefId;\n-use crate::ty::subst::{Kind, UnpackedKind, Substs};\n+use crate::ty::subst::{Kind, UnpackedKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::mir::interpret::GlobalId;\n@@ -50,9 +50,9 @@ pub trait TypeRelation<'a, 'gcx: 'a+'tcx, 'tcx: 'a> : Sized {\n     /// accordingly.\n     fn relate_item_substs(&mut self,\n                           item_def_id: DefId,\n-                          a_subst: &'tcx Substs<'tcx>,\n-                          b_subst: &'tcx Substs<'tcx>)\n-                          -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+                          a_subst: SubstsRef<'tcx>,\n+                          b_subst: SubstsRef<'tcx>)\n+                          -> RelateResult<'tcx, SubstsRef<'tcx>>\n     {\n         debug!(\"relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})\",\n                item_def_id,\n@@ -123,9 +123,9 @@ impl<'tcx> Relate<'tcx> for ty::TypeAndMut<'tcx> {\n \n pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                                         variances: Option<&Vec<ty::Variance>>,\n-                                        a_subst: &'tcx Substs<'tcx>,\n-                                        b_subst: &'tcx Substs<'tcx>)\n-                                        -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+                                        a_subst: SubstsRef<'tcx>,\n+                                        b_subst: SubstsRef<'tcx>)\n+                                        -> RelateResult<'tcx, SubstsRef<'tcx>>\n     where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n {\n     let tcx = relation.tcx();\n@@ -624,11 +624,11 @@ impl<'tcx> Relate<'tcx> for ty::GeneratorSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for &'tcx Substs<'tcx> {\n+impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {\n     fn relate<'a, 'gcx, R>(relation: &mut R,\n-                           a: &&'tcx Substs<'tcx>,\n-                           b: &&'tcx Substs<'tcx>)\n-                           -> RelateResult<'tcx, &'tcx Substs<'tcx>>\n+                           a: &SubstsRef<'tcx>,\n+                           b: &SubstsRef<'tcx>)\n+                           -> RelateResult<'tcx, SubstsRef<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n         relate_substs(relation, None, a, b)"}, {"sha": "df8b14b1f10c71c80cb801ce939f9c0ec2a4a0e9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -7,7 +7,7 @@ use crate::mir::interpret::{ConstValue, truncate};\n use crate::middle::region;\n use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n-use crate::ty::subst::{Substs, Subst, Kind, UnpackedKind};\n+use crate::ty::subst::{InternalSubsts, Subst, SubstsRef, Kind, UnpackedKind};\n use crate::ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::util::captures::Captures;\n@@ -101,11 +101,11 @@ pub enum TyKind<'tcx> {\n \n     /// Structures, enumerations and unions.\n     ///\n-    /// Substs here, possibly against intuition, *may* contain `Param`s.\n+    /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.\n     /// That is, even after substitution it is possible that there are type\n     /// variables. This happens when the `Adt` corresponds to an ADT\n     /// definition and not a concrete use of it.\n-    Adt(&'tcx AdtDef, &'tcx Substs<'tcx>),\n+    Adt(&'tcx AdtDef, SubstsRef<'tcx>),\n \n     /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.\n     Foreign(DefId),\n@@ -136,7 +136,7 @@ pub enum TyKind<'tcx> {\n     /// fn foo() -> i32 { 1 }\n     /// let bar = foo; // bar: fn() -> i32 {foo}\n     /// ```\n-    FnDef(DefId, &'tcx Substs<'tcx>),\n+    FnDef(DefId, SubstsRef<'tcx>),\n \n     /// A pointer to a function. Written as `fn() -> i32`.\n     ///\n@@ -184,7 +184,7 @@ pub enum TyKind<'tcx> {\n     /// * or the `existential type` declaration\n     /// The substitutions are for the generics of the function in question.\n     /// After typeck, the concrete type can be found in the `types` map.\n-    Opaque(DefId, &'tcx Substs<'tcx>),\n+    Opaque(DefId, SubstsRef<'tcx>),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n     Param(ParamTy),\n@@ -309,7 +309,7 @@ pub struct ClosureSubsts<'tcx> {\n     ///\n     /// These are separated out because codegen wants to pass them around\n     /// when monomorphizing.\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n }\n \n /// Struct returned by `split()`. Note that these are subslices of the\n@@ -387,7 +387,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct GeneratorSubsts<'tcx> {\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n }\n \n struct SplitGeneratorSubsts<'tcx> {\n@@ -672,11 +672,11 @@ impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n }\n \n impl<'tcx> TraitRef<'tcx> {\n-    pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>) -> TraitRef<'tcx> {\n+    pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {\n         TraitRef { def_id: def_id, substs: substs }\n     }\n \n@@ -685,7 +685,7 @@ impl<'tcx> TraitRef<'tcx> {\n     pub fn identity<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n         TraitRef {\n             def_id,\n-            substs: Substs::identity_for_item(tcx, def_id),\n+            substs: InternalSubsts::identity_for_item(tcx, def_id),\n         }\n     }\n \n@@ -704,7 +704,7 @@ impl<'tcx> TraitRef<'tcx> {\n \n     pub fn from_method(tcx: TyCtxt<'_, '_, 'tcx>,\n                        trait_id: DefId,\n-                       substs: &Substs<'tcx>)\n+                       substs: SubstsRef<'tcx>)\n                        -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n \n@@ -742,7 +742,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ExistentialTraitRef<'tcx> {\n     pub def_id: DefId,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n@@ -915,7 +915,7 @@ impl<T> Binder<T> {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n \n     /// The `DefId` of the `TraitItem` for the associated type `N`.\n     ///\n@@ -1120,7 +1120,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// These are regions that are stored behind a binder and must be substituted\n /// with some concrete region before being used. There are two kind of\n /// bound regions: early-bound, which are bound in an item's `Generics`,\n-/// and are substituted by a `Substs`, and late-bound, which are part of\n+/// and are substituted by a `InternalSubsts`, and late-bound, which are part of\n /// higher-ranked types (e.g., `for<'a> fn(&'a ())`), and are substituted by\n /// the likes of `liberate_late_bound_regions`. The distinction exists\n /// because higher-ranked lifetimes aren't supported in all places. See [1][2].\n@@ -1297,7 +1297,7 @@ impl From<BoundVar> for BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     pub ty: Ty<'tcx>,\n }\n \n@@ -2060,7 +2060,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to `Evaluated` if the\n /// code is monomorphic enough for that.\n pub enum LazyConst<'tcx> {\n-    Unevaluated(DefId, &'tcx Substs<'tcx>),\n+    Unevaluated(DefId, SubstsRef<'tcx>),\n     Evaluated(Const<'tcx>),\n }\n "}, {"sha": "450fab81661fc72336319c4298ca548ff3b220bf", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -157,26 +157,28 @@ impl<'tcx> Decodable for Kind<'tcx> {\n }\n \n /// A substitution mapping generic parameters to new values.\n-pub type Substs<'tcx> = List<Kind<'tcx>>;\n+pub type InternalSubsts<'tcx> = List<Kind<'tcx>>;\n \n-impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n-    /// Creates a `Substs` that maps each generic parameter to itself.\n+pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n+\n+impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n+    /// Creates a `InternalSubsts` that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId)\n-                             -> &'tcx Substs<'tcx> {\n-        Substs::for_item(tcx, def_id, |param, _| {\n+                             -> SubstsRef<'tcx> {\n+        Self::for_item(tcx, def_id, |param, _| {\n             tcx.mk_param_from_def(param)\n         })\n     }\n \n-    /// Creates a `Substs` that maps each generic parameter to a higher-ranked\n+    /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked\n     /// var bound at index `0`. For types, we use a `BoundVar` index equal to\n     /// the type parameter index. For regions, we use the `BoundRegion::BrNamed`\n     /// variant (which has a `DefId`).\n     pub fn bound_vars_for_item(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         def_id: DefId\n-    ) -> &'tcx Substs<'tcx> {\n-        Substs::for_item(tcx, def_id, |param, _| {\n+    ) -> SubstsRef<'tcx> {\n+        Self::for_item(tcx, def_id, |param, _| {\n             match param.kind {\n                 ty::GenericParamDefKind::Type { .. } => {\n                     tcx.mk_ty(\n@@ -197,32 +199,32 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         })\n     }\n \n-    /// Creates a `Substs` for generic parameter definitions,\n+    /// Creates a `InternalSubsts` for generic parameter definitions,\n     /// by calling closures to obtain each kind.\n-    /// The closures get to observe the `Substs` as they're\n+    /// The closures get to observe the `InternalSubsts` as they're\n     /// being built, which can be used to correctly\n     /// substitute defaults of generic parameters.\n     pub fn for_item<F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                        def_id: DefId,\n                        mut mk_kind: F)\n-                       -> &'tcx Substs<'tcx>\n+                       -> SubstsRef<'tcx>\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n         let count = defs.count();\n         let mut substs = SmallVec::with_capacity(count);\n-        Substs::fill_item(&mut substs, tcx, defs, &mut mk_kind);\n+        Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);\n         tcx.intern_substs(&substs)\n     }\n \n     pub fn extend_to<F>(&self,\n                         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                         def_id: DefId,\n                         mut mk_kind: F)\n-                        -> &'tcx Substs<'tcx>\n+                        -> SubstsRef<'tcx>\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n-        Substs::for_item(tcx, def_id, |param, substs| {\n+        Self::for_item(tcx, def_id, |param, substs| {\n             self.get(param.index as usize)\n                 .cloned()\n                 .unwrap_or_else(|| mk_kind(param, substs))\n@@ -237,9 +239,9 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     {\n         if let Some(def_id) = defs.parent {\n             let parent_defs = tcx.generics_of(def_id);\n-            Substs::fill_item(substs, tcx, parent_defs, mk_kind);\n+            Self::fill_item(substs, tcx, parent_defs, mk_kind);\n         }\n-        Substs::fill_single(substs, defs, mk_kind)\n+        Self::fill_single(substs, defs, mk_kind)\n     }\n \n     fn fill_single<F>(substs: &mut SmallVec<[Kind<'tcx>; 8]>,\n@@ -311,19 +313,19 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     /// parameters (e.g., method parameters) on top of that base.\n     pub fn rebase_onto(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                        source_ancestor: DefId,\n-                       target_substs: &Substs<'tcx>)\n-                       -> &'tcx Substs<'tcx> {\n+                       target_substs: SubstsRef<'tcx>)\n+                       -> SubstsRef<'tcx> {\n         let defs = tcx.generics_of(source_ancestor);\n         tcx.mk_substs(target_substs.iter().chain(&self[defs.params.len()..]).cloned())\n     }\n \n     pub fn truncate_to(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, generics: &ty::Generics)\n-                       -> &'tcx Substs<'tcx> {\n+                       -> SubstsRef<'tcx> {\n         tcx.mk_substs(self.iter().take(generics.count()).cloned())\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let params: SmallVec<[_; 8]> = self.iter().map(|k| k.fold_with(folder)).collect();\n \n@@ -341,7 +343,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Substs<'tcx> {}\n+impl<'tcx> serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`\n@@ -563,7 +565,7 @@ pub type CanonicalUserSubsts<'tcx> = Canonical<'tcx, UserSubsts<'tcx>>;\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UserSubsts<'tcx> {\n     /// The substitutions for the item as given by the user.\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n \n     /// The self type, in the case of a `<T>::Item` path (when applied\n     /// to an inherent impl). See `UserSelfTy` below."}, {"sha": "7374eba2e317b466da5bf9b5880fedc12cfd1988", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -7,7 +7,7 @@ use crate::hir::{self, Node};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n-use crate::ty::subst::{Subst, Substs, UnpackedKind};\n+use crate::ty::subst::{Subst, InternalSubsts, SubstsRef, UnpackedKind};\n use crate::ty::query::TyCtxtAt;\n use crate::ty::TyKind::*;\n use crate::ty::layout::{Integer, IntegerExt};\n@@ -588,8 +588,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Given the `DefId` of some item that has no type parameters, make\n     /// a suitable \"empty substs\" for it.\n-    pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> &'tcx Substs<'tcx> {\n-        Substs::for_item(self, item_def_id, |param, _| {\n+    pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> SubstsRef<'tcx> {\n+        InternalSubsts::for_item(self, item_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.types.re_erased.into(),\n                 GenericParamDefKind::Type {..} => {\n@@ -633,7 +633,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_expand_impl_trait_type(\n         self,\n         def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> Result<Ty<'tcx>, Ty<'tcx>> {\n         use crate::ty::fold::TypeFolder;\n \n@@ -652,7 +652,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             fn expand_opaque_ty(\n                 &mut self,\n                 def_id: DefId,\n-                substs: &'tcx Substs<'tcx>,\n+                substs: SubstsRef<'tcx>,\n             ) -> Option<Ty<'tcx>> {\n                 if self.found_recursion {\n                     None"}, {"sha": "d9f309ae58e0357b3c03f1bb99921963b9287c1c", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -99,7 +99,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n                         (p.substs, Some(p.ty)),\n                     ty::ExistentialPredicate::AutoTrait(_) =>\n                         // Empty iterator\n-                        (ty::Substs::empty(), None),\n+                        (ty::InternalSubsts::empty(), None),\n                 };\n \n                 substs.types().rev().chain(opt_ty)"}, {"sha": "599d38bc4ab6ee56c76fee7d674729b5e3ac0784", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,7 +1,7 @@\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::infer::InferCtxt;\n-use crate::ty::subst::Substs;\n+use crate::ty::subst::SubstsRef;\n use crate::traits;\n use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n@@ -432,7 +432,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n     fn nominal_obligations(&mut self,\n                            def_id: DefId,\n-                           substs: &Substs<'tcx>)\n+                           substs: SubstsRef<'tcx>)\n                            -> Vec<traits::PredicateObligation<'tcx>>\n     {\n         let predicates ="}, {"sha": "fbe9e3359bfeb7437d7af7d80ec27ad60c9c2515", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::def_id::DefId;\n use crate::hir::map::definitions::DefPathData;\n use crate::middle::region;\n-use crate::ty::subst::{self, Subst};\n+use crate::ty::subst::{self, Subst, SubstsRef};\n use crate::ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use crate::ty::{Bool, Char, Adt};\n use crate::ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n@@ -384,7 +384,7 @@ impl PrintContext {\n \n     fn parameterized<F: fmt::Write>(&mut self,\n                                     f: &mut F,\n-                                    substs: &subst::Substs<'_>,\n+                                    substs: SubstsRef<'_>,\n                                     did: DefId,\n                                     projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n@@ -692,7 +692,7 @@ pub fn identify_regions() -> bool {\n }\n \n pub fn parameterized<F: fmt::Write>(f: &mut F,\n-                                    substs: &subst::Substs<'_>,\n+                                    substs: SubstsRef<'_>,\n                                     did: DefId,\n                                     projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n@@ -1290,7 +1290,7 @@ define_print! {\n                         Ok(())\n                     }\n                 }\n-                Foreign(def_id) => parameterized(f, subst::Substs::empty(), def_id, &[]),\n+                Foreign(def_id) => parameterized(f, subst::InternalSubsts::empty(), def_id, &[]),\n                 Projection(ref data) => data.print(f, cx),\n                 UnnormalizedProjection(ref data) => {\n                     write!(f, \"Unnormalized(\")?;"}, {"sha": "c0869bb889afaba430b916ab5278f651bd076079", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -15,7 +15,7 @@ use crate::llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, D\n     DISPFlags, DILexicalBlock};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n-use rustc::ty::subst::{Substs, UnpackedKind};\n+use rustc::ty::subst::{SubstsRef, UnpackedKind};\n \n use crate::abi::Abi;\n use crate::common::CodegenCx;\n@@ -399,7 +399,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         fn get_template_parameters<'ll, 'tcx>(\n             cx: &CodegenCx<'ll, 'tcx>,\n             generics: &ty::Generics,\n-            substs: &Substs<'tcx>,\n+            substs: SubstsRef<'tcx>,\n             file_metadata: &'ll DIFile,\n             name_to_append_suffix_to: &mut String,\n         ) -> &'ll DIArray {"}, {"sha": "176c9b8c542b184172cd2bb63bf78f1ff86c0c5b", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -2,7 +2,7 @@\n \n use crate::common::CodegenCx;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty};\n use rustc_codegen_ssa::traits::*;\n \n@@ -193,13 +193,13 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n     }\n \n-    // Pushes the type parameters in the given `Substs` to the output string.\n+    // Pushes the type parameters in the given `InternalSubsts` to the output string.\n     // This ignores region parameters, since they can't reliably be\n     // reconstructed for items from non-local crates. For local crates, this\n     // would be possible but with inlining and LTO we have to use the least\n     // common denominator - otherwise we would run into conflicts.\n     fn push_type_params<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                                  substs: &Substs<'tcx>,\n+                                  substs: SubstsRef<'tcx>,\n                                   output: &mut String) {\n         if substs.types().next().is_none() {\n             return;"}, {"sha": "4b01e264f19eda5b38951da3aae6e105e548e569", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -11,7 +11,7 @@ use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadat\n use rustc::session::config;\n use rustc::ty::{TyCtxt, SymbolName};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::util::nodemap::{FxHashMap, DefIdMap};\n use rustc_allocator::ALLOCATOR_METHODS;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -282,7 +282,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn upstream_monomorphizations_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cnum: CrateNum)\n-    -> Lrc<DefIdMap<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>>\n+    -> Lrc<DefIdMap<Lrc<FxHashMap<SubstsRef<'tcx>, CrateNum>>>>\n {\n     debug_assert!(cnum == LOCAL_CRATE);\n \n@@ -334,7 +334,7 @@ fn upstream_monomorphizations_provider<'a, 'tcx>(\n fn upstream_monomorphizations_for_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId)\n-    -> Option<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>\n+    -> Option<Lrc<FxHashMap<SubstsRef<'tcx>, CrateNum>>>\n {\n     debug_assert!(!def_id.is_local());\n     tcx.upstream_monomorphizations(LOCAL_CRATE)"}, {"sha": "4744dd6302fb3200f1527371a04f35d19eaa598c", "filename": "src/librustc_codegen_ssa/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcallee.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,12 +1,12 @@\n use crate::traits::*;\n use rustc::ty;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::hir::def_id::DefId;\n \n pub fn resolve_and_get_fn<'tcx, Cx: CodegenMethods<'tcx>>(\n     cx: &Cx,\n     def_id: DefId,\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n ) -> Cx::Value {\n     cx.get_fn(\n         ty::Instance::resolve(\n@@ -23,7 +23,7 @@ pub fn resolve_and_get_fn_for_vtable<'tcx,\n >(\n     cx: &Cx,\n     def_id: DefId,\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n ) -> Cx::Value {\n     cx.get_fn(\n         ty::Instance::resolve_for_vtable("}, {"sha": "e1528921a596218f4adc04f68cc14648bf95f1a4", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -2,7 +2,7 @@ use libc::c_uint;\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{TyLayout, HasTyCtxt};\n use rustc::mir::{self, Mir};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::session::config::DebugInfo;\n use rustc_mir::monomorphize::Instance;\n use rustc_target::abi::call::{FnType, PassMode};\n@@ -85,7 +85,7 @@ pub struct FunctionCx<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n     scopes: IndexVec<mir::SourceScope, debuginfo::MirDebugScope<Bx::DIScope>>,\n \n     /// If this function is being monomorphized, this contains the type substitutions used.\n-    param_substs: &'tcx Substs<'tcx>,\n+    param_substs: SubstsRef<'tcx>,\n }\n \n impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {"}, {"sha": "f529cf30a62ea604ada3e4d05ef21304a820f28f", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -94,7 +94,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::ich::NodeIdHashingMode;\n use rustc::ty::item_path::{self, ItemPathBuffer, RootMode};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::record_time;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -134,7 +134,7 @@ fn get_symbol_hash<'a, 'tcx>(\n \n     // values for generic type parameters,\n     // if any.\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n ) -> u64 {\n     debug!(\n         \"get_symbol_hash(def_id={:?}, parameters={:?})\","}, {"sha": "a56c3215f9d69f4b10ff8ecad840556201b808d8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,7 +1,7 @@\n #![allow(non_snake_case)]\n \n use rustc::hir::Node;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, VariantIdx};\n use rustc::{lint, util};\n@@ -445,7 +445,7 @@ enum FfiResult<'tcx> {\n /// FIXME: This duplicates code in codegen.\n fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   def: &'tcx ty::AdtDef,\n-                                  substs: &Substs<'tcx>)\n+                                  substs: SubstsRef<'tcx>)\n                                   -> bool {\n     if def.variants.len() == 2 {\n         let data_idx;"}, {"sha": "9eb09b514741cb2730acf0b84ba62a7c1866d868", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -10,8 +10,8 @@ use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n use rustc::mir::{SourceInfo, Statement, Terminator};\n use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::Substs;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid};\n+use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n@@ -50,7 +50,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n     /// We sometimes have `substs` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n-    fn visit_substs(&mut self, substs: &&'tcx Substs<'tcx>, location: Location) {\n+    fn visit_substs(&mut self, substs: &SubstsRef<'tcx>, location: Location) {\n         self.add_regular_live_constraint(*substs, location);\n         self.super_substs(substs);\n     }"}, {"sha": "cc01f632e075cac4210a3b0b40c7169058a55d66", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -6,7 +6,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::Mir;\n-use rustc::ty::subst::{Substs, UnpackedKind};\n+use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n use rustc::util::ppaux::RegionHighlightMode;\n use rustc_errors::DiagnosticBuilder;\n@@ -541,7 +541,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// types+hir to search through).\n     fn match_adt_and_segment<'hir>(\n         &self,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         needle_fr: RegionVid,\n         last_segment: &'hir hir::PathSegment,\n         counter: &mut usize,\n@@ -587,7 +587,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// `search_stack` the types+hir to search through.\n     fn try_match_adt_and_generic_args<'hir>(\n         &self,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         needle_fr: RegionVid,\n         args: &'hir hir::GenericArgs,\n         search_stack: &mut Vec<(Ty<'tcx>, &'hir hir::Ty)>,"}, {"sha": "785f810d9415907fd89da70fae1e9c5fa3c62bdf", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -14,7 +14,7 @@ use rustc::mir::{\n     ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements,\n     ConstraintCategory, Local, Location, Mir,\n };\n-use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::{self, ErrorReported};\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -1359,7 +1359,7 @@ pub trait ClosureRegionRequirementsExt<'gcx, 'tcx> {\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         location: Location,\n         closure_def_id: DefId,\n-        closure_substs: &'tcx ty::subst::Substs<'tcx>,\n+        closure_substs: SubstsRef<'tcx>,\n     ) -> Vec<QueryRegionConstraint<'tcx>>;\n \n     fn subst_closure_mapping<T>(\n@@ -1390,7 +1390,7 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         location: Location,\n         closure_def_id: DefId,\n-        closure_substs: &'tcx ty::subst::Substs<'tcx>,\n+        closure_substs: SubstsRef<'tcx>,\n     ) -> Vec<QueryRegionConstraint<'tcx>> {\n         debug!(\n             \"apply_requirements(location={:?}, closure_def_id={:?}, closure_substs={:?})\","}, {"sha": "eab9e0ae171ed229c8b14a4bd5f326634dcfaeea", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n use rustc::mir::{Location, Mir};\n use rustc::mir::visit::{MutVisitor, TyContext};\n@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n-    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n+    fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         debug!(\"visit_substs(substs={:?}, location={:?})\", substs, location);\n \n         *substs = self.renumber_regions(&{ *substs });"}, {"sha": "4202d10aa63d0cc790c1d22ad3da7a2fc0a0208b", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -36,7 +36,7 @@ use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::{Subst, Substs, UnpackedKind, UserSubsts};\n+use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind, UserSubsts};\n use rustc::ty::{\n     self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind, UserType,\n     CanonicalUserTypeAnnotation, UserTypeAnnotationIndex,\n@@ -2261,7 +2261,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         location: Location,\n     ) -> ty::InstantiatedPredicates<'tcx> {\n         if let Some(closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements {"}, {"sha": "4d9a3775b31230f83d94404ca73ff902d17a5cc7", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::{self, BodyOwnerKind, HirId};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -94,12 +94,12 @@ pub enum DefiningTy<'tcx> {\n \n     /// The MIR is a fn item with the given `DefId` and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query.\n-    FnDef(DefId, &'tcx Substs<'tcx>),\n+    FnDef(DefId, SubstsRef<'tcx>),\n \n     /// The MIR represents some form of constant. The signature then\n     /// is that it has no inputs and a single return value, which is\n     /// the value of the constant.\n-    Const(DefId, &'tcx Substs<'tcx>),\n+    Const(DefId, SubstsRef<'tcx>),\n }\n \n impl<'tcx> DefiningTy<'tcx> {\n@@ -138,7 +138,7 @@ struct UniversalRegionIndices<'tcx> {\n     /// used because trait matching and type-checking will feed us\n     /// region constraints that reference those regions and we need to\n     /// be able to map them our internal `RegionVid`. This is\n-    /// basically equivalent to a `Substs`, except that it also\n+    /// basically equivalent to a `InternalSubsts`, except that it also\n     /// contains an entry for `ReStatic` -- it might be nice to just\n     /// use a substs, and then handle `ReStatic` another way.\n     indices: FxHashMap<ty::Region<'tcx>, RegionVid>,\n@@ -222,7 +222,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// `V[1]: V[2]`.\n     pub fn closure_mapping(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n-        closure_substs: &'tcx Substs<'tcx>,\n+        closure_substs: SubstsRef<'tcx>,\n         expected_num_vars: usize,\n         closure_base_def_id: DefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n@@ -507,7 +507,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n \n             BodyOwnerKind::Const | BodyOwnerKind::Static(..) => {\n                 assert_eq!(closure_base_def_id, self.mir_def_id);\n-                let identity_substs = Substs::identity_for_item(tcx, closure_base_def_id);\n+                let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n                 let substs = self.infcx\n                     .replace_free_regions_with_nll_infer_vars(FR, &identity_substs);\n                 DefiningTy::Const(self.mir_def_id, substs)\n@@ -527,7 +527,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let gcx = tcx.global_tcx();\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n-        let identity_substs = Substs::identity_for_item(gcx, closure_base_def_id);\n+        let identity_substs = InternalSubsts::identity_for_item(gcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n             DefiningTy::Closure(_, ClosureSubsts { ref substs })\n             | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {"}, {"sha": "19507c900da6442fd83935790452e04f1bd0fcf8", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -12,7 +12,7 @@ use rustc::middle::region;\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::util::nodemap::NodeMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -212,7 +212,7 @@ impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n         }\n     }\n \n-    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, _: Location) {\n+    fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, _: Location) {\n         if let Some(lifted) = self.tcx.lift(substs) {\n             *substs = lifted;\n         } else {"}, {"sha": "5548366db66ecf75930be90c6b46bf67a2ce1762", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -9,6 +9,7 @@ use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::cast::CastKind as TyCastKind;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n use rustc::mir::BorrowKind;\n@@ -560,7 +561,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n             let def_id = cx.tcx.hir().local_def_id(count.id);\n-            let substs = Substs::identity_for_item(cx.tcx.global_tcx(), def_id);\n+            let substs = InternalSubsts::identity_for_item(cx.tcx.global_tcx(), def_id);\n             let instance = ty::Instance::resolve(\n                 cx.tcx.global_tcx(),\n                 cx.param_env,\n@@ -716,7 +717,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         Some(did) => {\n                             // in case we are offsetting from a computed discriminant\n                             // and not the beginning of discriminants (which is always `0`)\n-                            let substs = Substs::identity_for_item(cx.tcx(), did);\n+                            let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(ty::LazyConst::Unevaluated(did, substs));\n                             let bin = ExprKind::Binary {\n                                 op: BinOp::Add,\n@@ -834,7 +835,7 @@ fn method_callee<'a, 'gcx, 'tcx>(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     expr: &hir::Expr,\n     span: Span,\n-    overloaded_callee: Option<(DefId, &'tcx Substs<'tcx>)>,\n+    overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n ) -> Expr<'tcx> {\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n     let (def_id, substs, user_ty) = match overloaded_callee {\n@@ -1133,7 +1134,7 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     expr: &'tcx hir::Expr,\n     place_ty: Ty<'tcx>,\n-    overloaded_callee: Option<(DefId, &'tcx Substs<'tcx>)>,\n+    overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n     args: Vec<ExprRef<'tcx>>,\n ) -> ExprKind<'tcx> {\n     // For an overloaded *x or x[y] expression of type T, the method"}, {"sha": "70f04fb892866814111092e3af74106b6f4a9323", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -12,7 +12,7 @@ use rustc::middle::region;\n use rustc::infer::InferCtxt;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::subst::{Kind, InternalSubsts};\n use rustc::ty::layout::VariantIdx;\n use syntax::ast;\n use syntax::attr;\n@@ -29,8 +29,8 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     pub root_lint_level: hir::HirId,\n     pub param_env: ty::ParamEnv<'gcx>,\n \n-    /// Identity `Substs` for use with const-evaluation.\n-    pub identity_substs: &'gcx Substs<'gcx>,\n+    /// Identity `InternalSubsts` for use with const-evaluation.\n+    pub identity_substs: &'gcx InternalSubsts<'gcx>,\n \n     pub region_scope_tree: Lrc<region::ScopeTree>,\n     pub tables: &'a ty::TypeckTables<'gcx>,\n@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             infcx,\n             root_lint_level: lint_level,\n             param_env: tcx.param_env(src_def_id),\n-            identity_substs: Substs::identity_for_item(tcx.global_tcx(), src_def_id),\n+            identity_substs: InternalSubsts::identity_for_item(tcx.global_tcx(), src_def_id),\n             region_scope_tree: tcx.region_scope_tree(src_def_id),\n             tables: tcx.typeck_tables_of(src_def_id),\n             constness,"}, {"sha": "2efdacd7622c91868e2851f4afcc8a712f4864d8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, LazyConst, UserType};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n@@ -261,7 +261,7 @@ pub enum ExprKind<'tcx> {\n     Adt {\n         adt_def: &'tcx AdtDef,\n         variant_index: VariantIdx,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n \n         /// Optional user-given substs: for something like `let x =\n         /// Bar::<T> { ... }`."}, {"sha": "9e9a5d0f82ada34712aef90aba9b42f339919e01", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -168,7 +168,7 @@ use super::{PatternFoldable, PatternFolder, compare_const_vals};\n \n use rustc::hir::def_id::DefId;\n use rustc::hir::RangeEnd;\n-use rustc::ty::{self, Ty, TyCtxt, TypeFoldable, Const};\n+use rustc::ty::{self, subst::SubstsRef, Ty, TyCtxt, TypeFoldable, Const};\n use rustc::ty::layout::{Integer, IntegerExt, VariantIdx, Size};\n \n use rustc::mir::Field;\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n \n     fn is_variant_uninhabited(&self,\n                               variant: &'tcx ty::VariantDef,\n-                              substs: &'tcx ty::subst::Substs<'tcx>)\n+                              substs: SubstsRef<'tcx>)\n                               -> bool\n     {\n         if self.tcx.features().exhaustive_patterns {"}, {"sha": "9cecf4af7d44a4462f77aadd3163d9059d8be577", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -11,7 +11,7 @@ use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::region;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::lint;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc::util::common::ErrorReported;\n@@ -51,7 +51,7 @@ pub(crate) fn check_match<'a, 'tcx>(\n             tables: tcx.body_tables(body_id),\n             region_scope_tree: &tcx.region_scope_tree(def_id),\n             param_env: tcx.param_env(def_id),\n-            identity_substs: Substs::identity_for_item(tcx, def_id),\n+            identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n         }.visit_body(tcx.hir().body(body_id));\n     })\n }\n@@ -64,7 +64,7 @@ struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    identity_substs: &'tcx Substs<'tcx>,\n+    identity_substs: SubstsRef<'tcx>,\n     region_scope_tree: &'a region::ScopeTree,\n }\n "}, {"sha": "c234c2474ff1bfc079869ff22c0792a865ed2454", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::{UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift, UserType};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n-use rustc::ty::subst::{Substs, Kind};\n+use rustc::ty::subst::{SubstsRef, Kind};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, PatKind, RangeEnd};\n use rustc::hir::def::{Def, CtorKind};\n@@ -135,7 +135,7 @@ pub enum PatternKind<'tcx> {\n     /// multiple variants.\n     Variant {\n         adt_def: &'tcx AdtDef,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         variant_index: VariantIdx,\n         subpatterns: Vec<FieldPattern<'tcx>>,\n     },\n@@ -330,13 +330,13 @@ pub struct PatternContext<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     pub errors: Vec<PatternError>,\n }\n \n impl<'a, 'tcx> Pattern<'tcx> {\n     pub fn from_hir(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    param_env_and_substs: ty::ParamEnvAnd<'tcx, &'tcx Substs<'tcx>>,\n+                    param_env_and_substs: ty::ParamEnvAnd<'tcx, SubstsRef<'tcx>>,\n                     tables: &'a ty::TypeckTables<'tcx>,\n                     pat: &'tcx hir::Pat) -> Self {\n         let mut pcx = PatternContext::new(tcx, param_env_and_substs, tables);\n@@ -352,7 +352,7 @@ impl<'a, 'tcx> Pattern<'tcx> {\n \n impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               param_env_and_substs: ty::ParamEnvAnd<'tcx, &'tcx Substs<'tcx>>,\n+               param_env_and_substs: ty::ParamEnvAnd<'tcx, SubstsRef<'tcx>>,\n                tables: &'a ty::TypeckTables<'tcx>) -> Self {\n         PatternContext {\n             tcx,\n@@ -1093,7 +1093,7 @@ macro_rules! CloneImpls {\n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, &'tcx AdtDef,\n-    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserType<'tcx>,\n+    SubstsRef<'tcx>, &'tcx Kind<'tcx>, UserType<'tcx>,\n     UserTypeProjection<'tcx>, PatternTypeProjection<'tcx>\n }\n "}, {"sha": "8a32c3b636c71242eea742f4e549e5a196e5d771", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -9,7 +9,7 @@ use rustc::mir;\n use rustc::ty::layout::{\n     self, Size, Align, HasDataLayout, LayoutOf, TyLayout\n };\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -244,7 +244,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     pub(super) fn resolve(\n         &self,\n         def_id: DefId,\n-        substs: &'tcx Substs<'tcx>\n+        substs: SubstsRef<'tcx>\n     ) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"param_env: {:#?}\", self.param_env);\n@@ -306,7 +306,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     fn monomorphize_with_substs<T: TypeFoldable<'tcx> + Subst<'tcx>>(\n         &self,\n         t: T,\n-        substs: &'tcx Substs<'tcx>\n+        substs: SubstsRef<'tcx>\n     ) -> T {\n         // miri doesn't care about lifetimes, and will choke on some crazy ones\n         // let's simply get rid of them"}, {"sha": "c795b412bfa93611f0726499ee9325f155508ef8", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Mir, TerminatorKind};\n use rustc::ty::{AssociatedItem, AssociatedItemContainer, Instance, TyCtxt, TyKind};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::InternalSubsts;\n \n pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n              mir: &Mir<'tcx>,\n@@ -69,7 +69,7 @@ fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }) => tcx.generics_of(trait_def_id).count(),\n             _ => 0\n         };\n-    let caller_substs = &Substs::identity_for_item(tcx, def_id)[..trait_substs_count];\n+    let caller_substs = &InternalSubsts::identity_for_item(tcx, def_id)[..trait_substs_count];\n \n     while let Some(bb) = reachable_without_self_call_queue.pop() {\n         if visited.contains(bb) {"}, {"sha": "4cec306412e8bf9dc923ae06a9a5bb16bf2da6a5", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -180,7 +180,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::session::config::EntryFnType;\n@@ -500,7 +500,7 @@ struct MirNeighborCollector<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &'a mir::Mir<'tcx>,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n-    param_substs: &'tcx Substs<'tcx>,\n+    param_substs: SubstsRef<'tcx>,\n }\n \n impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n@@ -748,7 +748,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n \n     fn is_available_upstream_generic<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                def_id: DefId,\n-                                               substs: &'tcx Substs<'tcx>)\n+                                               substs: SubstsRef<'tcx>)\n                                                -> bool {\n         debug_assert!(!def_id.is_local());\n \n@@ -956,7 +956,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                         debug!(\"RootCollector: ADT drop-glue for {}\",\n                                def_id_to_string(self.tcx, def_id));\n \n-                        let ty = Instance::new(def_id, Substs::empty()).ty(self.tcx);\n+                        let ty = Instance::new(def_id, InternalSubsts::empty()).ty(self.tcx);\n                         visit_drop_use(self.tcx, ty, true, self.output);\n                     }\n                 }\n@@ -1116,7 +1116,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    let substs = Substs::for_item(tcx, method.def_id, |param, _| {\n+                    let substs = InternalSubsts::for_item(tcx, method.def_id, |param, _| {\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                             GenericParamDefKind::Type {..} => {\n@@ -1218,7 +1218,7 @@ fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn collect_lazy_const<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     constant: &ty::LazyConst<'tcx>,\n-    param_substs: &'tcx Substs<'tcx>,\n+    param_substs: SubstsRef<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     let (def_id, substs) = match *constant {"}, {"sha": "a26a1a7861eb0146ef84c80ba6232a80ed990180", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::OptLevel;\n use rustc::ty::{self, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{SubstsRef, InternalSubsts};\n use syntax::ast;\n use syntax::attr::InlineAttr;\n use std::fmt::{self, Write};\n@@ -151,7 +151,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         debug!(\"is_instantiable({:?})\", self);\n         let (def_id, substs) = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n-            MonoItem::Static(def_id) => (def_id, Substs::empty()),\n+            MonoItem::Static(def_id) => (def_id, InternalSubsts::empty()),\n             // global asm never has predicates\n             MonoItem::GlobalAsm(..) => return true\n         };\n@@ -422,7 +422,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n     }\n \n     fn push_type_params<I>(&self,\n-                            substs: &Substs<'tcx>,\n+                            substs: SubstsRef<'tcx>,\n                             projections: I,\n                             output: &mut String,\n                             debug: bool)"}, {"sha": "ce7c9af81cb0741d56d2402956a6287a03ef5b9b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@ use rustc::infer;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::layout::VariantIdx;\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::query::Providers;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -183,7 +183,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let substs = if let Some(ty) = ty {\n         tcx.intern_substs(&[ty.into()])\n     } else {\n-        Substs::identity_for_item(tcx, def_id)\n+        InternalSubsts::identity_for_item(tcx, def_id)\n     };\n     let sig = tcx.fn_sig(def_id).subst(tcx, substs);\n     let sig = tcx.erase_late_bound_regions(&sig);\n@@ -451,7 +451,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n \n-        let substs = Substs::for_item(tcx, self.def_id, |param, _| {\n+        let substs = InternalSubsts::for_item(tcx, self.def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                 GenericParamDefKind::Type {..} => ty.into(),"}, {"sha": "5ed0055e7c4f43862e034f03e8bd0e8b6ab7f335", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -10,7 +10,7 @@ use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUs\n use rustc::mir::interpret::{EvalErrorKind, Scalar, GlobalId, EvalResult};\n use rustc::ty::{TyCtxt, self, Instance};\n use syntax::source_map::{Span, DUMMY_SP};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::ParamEnv;\n use rustc::ty::layout::{\n@@ -288,7 +288,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }\n-                let substs = Substs::identity_for_item(self.tcx, self.source.def_id());\n+                let substs = InternalSubsts::identity_for_item(self.tcx, self.source.def_id());\n                 let instance = Instance::new(self.source.def_id(), substs);\n                 let cid = GlobalId {\n                     instance,"}, {"sha": "9494d4b1f6c392d831a4a8025114118876ebda5d", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@\n //! N.B., we do _not_ erase regions of statements that are relevant for\n //! \"types-as-contracts\"-validation, namely, `AcquireValid` and `ReleaseValid`.\n \n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n@@ -36,7 +36,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n         *constant = self.tcx.erase_regions(constant);\n     }\n \n-    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, _: Location) {\n+    fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, _: Location) {\n         *substs = self.tcx.erase_regions(substs);\n     }\n "}, {"sha": "09142828f18af33a603099c1285061d16cdca831", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -55,7 +55,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutVisitor};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n use rustc::ty::layout::VariantIdx;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bit_set::BitSet;\n@@ -154,7 +154,7 @@ struct SuspensionPoint {\n struct TransformVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     state_adt_ref: &'tcx AdtDef,\n-    state_substs: &'tcx Substs<'tcx>,\n+    state_substs: SubstsRef<'tcx>,\n \n     // The index of the generator state in the generator struct\n     state_field: usize,"}, {"sha": "56e4926090eac7abc9c7fc7f1da5f72c15345452", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::mir::*;\n use rustc::mir::visit::*;\n use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n-use rustc::ty::subst::{Subst,Substs};\n+use rustc::ty::subst::{Subst, SubstsRef};\n \n use std::collections::VecDeque;\n use std::iter;\n@@ -32,7 +32,7 @@ pub struct Inline;\n #[derive(Copy, Clone, Debug)]\n struct CallSite<'tcx> {\n     callee: DefId,\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n     bb: BasicBlock,\n     location: SourceInfo,\n }"}, {"sha": "cf3ba1765406c47989f917780d27eb9ee4cc1173", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -5,7 +5,7 @@ use rustc::middle::lang_items;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::VariantIdx;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n use crate::util::patch::MirPatch;\n@@ -189,7 +189,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                              base_place: &Place<'tcx>,\n                              variant_path: D::Path,\n                              variant: &'tcx ty::VariantDef,\n-                             substs: &'tcx Substs<'tcx>)\n+                             substs: SubstsRef<'tcx>)\n                              -> Vec<(Place<'tcx>, Option<D::Path>)>\n     {\n         variant.fields.iter().enumerate().map(|(i, f)| {\n@@ -328,7 +328,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_ladder(fields, succ, unwind).0\n     }\n \n-    fn open_drop_for_box<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: &'tcx Substs<'tcx>)\n+    fn open_drop_for_box<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n                              -> BasicBlock\n     {\n         debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n@@ -346,7 +346,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_subpath(&interior, interior_path, succ, unwind_succ)\n     }\n \n-    fn open_drop_for_adt<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: &'tcx Substs<'tcx>)\n+    fn open_drop_for_adt<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n                              -> BasicBlock {\n         debug!(\"open_drop_for_adt({:?}, {:?}, {:?})\", self, adt, substs);\n         if adt.variants.len() == 0 {\n@@ -376,7 +376,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     }\n \n     fn open_drop_for_adt_contents(&mut self, adt: &'tcx ty::AdtDef,\n-                                  substs: &'tcx Substs<'tcx>)\n+                                  substs: SubstsRef<'tcx>)\n                                   -> (BasicBlock, Unwind) {\n         let (succ, unwind) = self.drop_ladder_bottom();\n         if !adt.is_enum() {\n@@ -393,7 +393,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     }\n \n     fn open_drop_for_multivariant(&mut self, adt: &'tcx ty::AdtDef,\n-                                  substs: &'tcx Substs<'tcx>,\n+                                  substs: SubstsRef<'tcx>,\n                                   succ: BasicBlock,\n                                   unwind: Unwind)\n                                   -> (BasicBlock, Unwind) {\n@@ -867,7 +867,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     fn box_free_block<'a>(\n         &mut self,\n         adt: &'tcx ty::AdtDef,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         target: BasicBlock,\n         unwind: Unwind,\n     ) -> BasicBlock {\n@@ -878,7 +878,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     fn unelaborated_free_block<'a>(\n         &mut self,\n         adt: &'tcx ty::AdtDef,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         target: BasicBlock,\n         unwind: Unwind\n     ) -> BasicBlock {"}, {"sha": "6b8e37b3b31330b2ecd5d7ba0e9aad410b73f409", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -22,7 +22,7 @@ use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::util::nodemap::{ItemLocalSet, HirIdSet};\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n@@ -75,7 +75,7 @@ fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         in_static: false,\n         mut_rvalue_borrows: Default::default(),\n         param_env: ty::ParamEnv::empty(),\n-        identity_substs: Substs::empty(),\n+        identity_substs: InternalSubsts::empty(),\n         result: ItemLocalSet::default(),\n     };\n \n@@ -94,7 +94,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     in_static: bool,\n     mut_rvalue_borrows: HirIdSet,\n     param_env: ty::ParamEnv<'tcx>,\n-    identity_substs: &'tcx Substs<'tcx>,\n+    identity_substs: SubstsRef<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     result: ItemLocalSet,\n }\n@@ -199,7 +199,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n         self.tables = self.tcx.typeck_tables_of(item_def_id);\n         self.param_env = self.tcx.param_env(item_def_id);\n-        self.identity_substs = Substs::identity_for_item(self.tcx, item_def_id);\n+        self.identity_substs = InternalSubsts::identity_for_item(self.tcx, item_def_id);\n \n         let body = self.tcx.hir().body(body_id);\n "}, {"sha": "27103ab99651bd68ae0cadd4061962245fdd3ab9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TraitRef, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::InternalSubsts;\n use rustc::util::nodemap::HirIdSet;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -127,7 +127,7 @@ impl<'a, 'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n {\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         let tcx = self.def_id_visitor.tcx();\n-        // Substs are not visited here because they are visited below in `super_visit_with`.\n+        // InternalSubsts are not visited here because they are visited below in `super_visit_with`.\n         match ty.sty {\n             ty::Adt(&ty::AdtDef { did: def_id, .. }, ..) |\n             ty::Foreign(def_id) |\n@@ -180,7 +180,7 @@ impl<'a, 'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n                         ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,\n                         ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n                         ty::ExistentialPredicate::AutoTrait(def_id) =>\n-                            ty::ExistentialTraitRef { def_id, substs: Substs::empty() },\n+                            ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() },\n                     };\n                     let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;\n                     if self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref) {"}, {"sha": "ac572b652130c74b591e867909fb1c6b1c27481e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -863,7 +863,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n \n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n         // For type parameter defaults, we have to ban access\n-        // to following type parameters, as the Substs can only\n+        // to following type parameters, as the InternalSubsts can only\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available."}, {"sha": "4d8a67ca638634b69999b0b306749ab1958ccc3a", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -10,7 +10,7 @@ use rustc::traits::{\n     Environment,\n };\n use rustc::ty;\n-use rustc::ty::subst::{Substs, Subst};\n+use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n@@ -129,7 +129,7 @@ fn assemble_builtin_sized_impls<'tcx>(\n \n         // Struct def\n         ty::Adt(adt_def, _) => {\n-            let substs = Substs::bound_vars_for_item(tcx, adt_def.did);\n+            let substs = InternalSubsts::bound_vars_for_item(tcx, adt_def.did);\n             let adt = tcx.mk_ty(ty::Adt(adt_def, substs));\n             let sized_constraint = adt_def.sized_constraint(tcx)\n                 .iter()"}, {"sha": "49fcb7cd8335532546e82a0ce5b97fbb409a30de", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@ use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstrai\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::{TraitEngine, Normalized, ObligationCause, TraitEngineExt};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -291,7 +291,7 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     if def.is_phantom_data() {\n         // The first generic parameter here is guaranteed to be a type because it's\n         // `PhantomData`.\n-        let substs = Substs::identity_for_item(tcx, def_id);\n+        let substs = InternalSubsts::identity_for_item(tcx, def_id);\n         assert_eq!(substs.len(), 1);\n         let result = DtorckConstraint {\n             outlives: vec![],"}, {"sha": "634c024b064660f840b593d153efa68ce050fe5d", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -1,7 +1,7 @@\n //! Utilities for creating generic types with bound vars in place of parameter values.\n \n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::InternalSubsts;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n@@ -64,17 +64,17 @@ crate fn ref_ty(tcx: ty::TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tc\n }\n \n crate fn fn_def(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n-    tcx.mk_ty(ty::FnDef(def_id, Substs::bound_vars_for_item(tcx, def_id)))\n+    tcx.mk_ty(ty::FnDef(def_id, InternalSubsts::bound_vars_for_item(tcx, def_id)))\n }\n \n crate fn closure(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_closure(def_id, ty::ClosureSubsts {\n-        substs: Substs::bound_vars_for_item(tcx, def_id),\n+        substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     })\n }\n \n crate fn generator(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_generator(def_id, ty::GeneratorSubsts {\n-        substs: Substs::bound_vars_for_item(tcx, def_id),\n+        substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     }, hir::GeneratorMovability::Movable)\n }"}, {"sha": "d261b2382e7a6396025e3f602d0a49e846150568", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -18,7 +18,7 @@ use rustc::traits::{\n };\n use rustc::ty::query::Providers;\n use rustc::ty::{self, List, TyCtxt};\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts};\n use syntax::ast;\n \n use std::iter;\n@@ -182,7 +182,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // }\n     // ```\n \n-    let bound_vars = Substs::bound_vars_for_item(tcx, def_id);\n+    let bound_vars = InternalSubsts::bound_vars_for_item(tcx, def_id);\n \n     // `Self: Trait<P1..Pn>`\n     let trait_pred = ty::TraitPredicate {\n@@ -294,7 +294,7 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     // }\n     // ```\n \n-    let bound_vars = Substs::bound_vars_for_item(tcx, def_id);\n+    let bound_vars = InternalSubsts::bound_vars_for_item(tcx, def_id);\n \n     let trait_ref = tcx.impl_trait_ref(def_id)\n         .expect(\"not an impl\")\n@@ -336,7 +336,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     // }\n     // ```\n \n-    let bound_vars = Substs::bound_vars_for_item(tcx, def_id);\n+    let bound_vars = InternalSubsts::bound_vars_for_item(tcx, def_id);\n \n     // `Ty<...>`\n     let ty = tcx.type_of(def_id).subst(tcx, bound_vars);\n@@ -426,7 +426,7 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n         _ => bug!(\"not an trait container\"),\n     };\n \n-    let trait_bound_vars = Substs::bound_vars_for_item(tcx, trait_id);\n+    let trait_bound_vars = InternalSubsts::bound_vars_for_item(tcx, trait_id);\n     let trait_ref = ty::TraitRef {\n         def_id: trait_id,\n         substs: trait_bound_vars,\n@@ -564,7 +564,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n         _ => bug!(\"not an impl container\"),\n     };\n \n-    let impl_bound_vars = Substs::bound_vars_for_item(tcx, impl_id);\n+    let impl_bound_vars = InternalSubsts::bound_vars_for_item(tcx, impl_id);\n \n     // `A0 as Trait<A1..An>`\n     let trait_ref = tcx.impl_trait_ref(impl_id)"}, {"sha": "6f3dc8b969cf4e776a5ad2bd3f807dc8d0519581", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -14,7 +14,7 @@ use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n-use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::subst::{Kind, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n@@ -177,7 +177,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         span: Span,\n         def_id: DefId,\n         item_segment: &hir::PathSegment)\n-        -> &'tcx Substs<'tcx>\n+        -> SubstsRef<'tcx>\n     {\n         let (substs, assoc_bindings, _) = item_segment.with_generic_args(|generic_args| {\n             self.create_substs_for_ast_path(\n@@ -436,7 +436,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         args_for_def_id: impl Fn(DefId) -> (Option<&'b GenericArgs>, bool),\n         provided_kind: impl Fn(&GenericParamDef, &GenericArg) -> Kind<'tcx>,\n         inferred_kind: impl Fn(Option<&[Kind<'tcx>]>, &GenericParamDef, bool) -> Kind<'tcx>,\n-    ) -> &'tcx Substs<'tcx> {\n+    ) -> SubstsRef<'tcx> {\n         // Collect the segments of the path; we need to substitute arguments\n         // for parameters throughout the entire path (wherever there are\n         // generic parameters).\n@@ -548,7 +548,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         generic_args: &hir::GenericArgs,\n         infer_types: bool,\n         self_ty: Option<Ty<'tcx>>)\n-        -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>, Option<Vec<Span>>)\n+        -> (SubstsRef<'tcx>, Vec<ConvertedBinding<'tcx>>, Option<Vec<Span>>)\n     {\n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n@@ -760,7 +760,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         trait_segment: &hir::PathSegment,\n-    ) -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>, Option<Vec<Span>>) {\n+    ) -> (SubstsRef<'tcx>, Vec<ConvertedBinding<'tcx>>, Option<Vec<Span>>) {\n         debug!(\"create_substs_for_ast_trait_ref(trait_segment={:?})\",\n                trait_segment);\n \n@@ -1798,7 +1798,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length_def_id = tcx.hir().local_def_id(length.id);\n-                let substs = Substs::identity_for_item(tcx, length_def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx, length_def_id);\n                 let length = ty::LazyConst::Unevaluated(length_def_id, substs);\n                 let length = tcx.mk_lazy_const(length);\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(&ty), length));\n@@ -1839,7 +1839,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let generics = tcx.generics_of(def_id);\n \n         debug!(\"impl_trait_ty_to_ty: generics={:?}\", generics);\n-        let substs = Substs::for_item(tcx, def_id, |param, _| {\n+        let substs = InternalSubsts::for_item(tcx, def_id, |param, _| {\n             if let Some(i) = (param.index as usize).checked_sub(generics.parent_count) {\n                 // Our own parameters are the resolved lifetimes.\n                 match param.kind {"}, {"sha": "87276b8c66ca4a8102963aa68ebe20577ee60521", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -37,9 +37,9 @@ use rustc::hir;\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::{self, Ty, TypeFoldable, TypeAndMut};\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::cast::{CastKind, CastTy};\n-use rustc::ty::subst::Substs;\n use rustc::middle::lang_items;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -69,7 +69,7 @@ enum PointerKind<'tcx> {\n     /// The unsize info of this projection\n     OfProjection(&'tcx ty::ProjectionTy<'tcx>),\n     /// The unsize info of this opaque ty\n-    OfOpaque(DefId, &'tcx Substs<'tcx>),\n+    OfOpaque(DefId, SubstsRef<'tcx>),\n     /// The unsize info of this parameter\n     OfParam(&'tcx ty::ParamTy),\n }"}, {"sha": "2a4b17a639956c5b7dbccd783b3eaee8c0abe810", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -12,7 +12,7 @@ use rustc::traits::Obligation;\n use rustc::traits::error_reporting::ArgKind;\n use rustc::ty::{self, Ty, GenericParamDefKind};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::InternalSubsts;\n use std::cmp;\n use std::iter;\n use rustc_target::spec::abi::Abi;\n@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // types of upvars. These will be unified during the upvar\n         // inference phase (`upvar.rs`).\n         let base_substs =\n-            Substs::identity_for_item(self.tcx, self.tcx.closure_base_def_id(expr_def_id));\n+            InternalSubsts::identity_for_item(self.tcx, self.tcx.closure_base_def_id(expr_def_id));\n         let substs = base_substs.extend_to(self.tcx,expr_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {"}, {"sha": "64f61d5e5232e988c6e93a4a4c93d0950bea3e4f", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -823,7 +823,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"coercion::try_find_coercion_lub({:?}, {:?})\", prev_ty, new_ty);\n \n         // Special-case that coercion alone cannot handle:\n-        // Two function item types of differing IDs or Substs.\n+        // Two function item types of differing IDs or InternalSubsts.\n         if let (&ty::FnDef(..), &ty::FnDef(..)) = (&prev_ty.sty, &new_ty.sty) {\n             // Don't reify if the function types have a LUB, i.e., they\n             // are the same function and their parameters have a LUB."}, {"sha": "e061a5304eb28dbe9f2ccf1230678bdef6ad452d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::{self, TyCtxt, GenericParamDefKind};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts, SubstsRef};\n use rustc::util::common::ErrorReported;\n use errors::Applicability;\n \n@@ -160,7 +160,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // a fresh FulfillmentCtxt, and invoke select_all_or_error.\n \n     // Create mapping from impl to placeholder.\n-    let impl_to_skol_substs = Substs::identity_for_item(tcx, impl_m.def_id);\n+    let impl_to_skol_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n \n     // Create mapping from trait to placeholder.\n     let trait_to_skol_substs = impl_to_skol_substs.rebase_onto(tcx,\n@@ -361,7 +361,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_m: &ty::AssociatedItem,\n                                                 trait_generics: &ty::Generics,\n                                                 impl_generics: &ty::Generics,\n-                                                trait_to_skol_substs: &Substs<'tcx>)\n+                                                trait_to_skol_substs: SubstsRef<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n     let trait_params = trait_generics.own_counts().lifetimes;\n     let impl_params = impl_generics.own_counts().lifetimes;"}, {"sha": "12c7484f0f9213c672d99995067c5cbfbf94925f", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -6,7 +6,7 @@ use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, InferOk, SuppressRegionErrors};\n use rustc::middle::region;\n use rustc::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n-use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n+use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n \n@@ -145,7 +145,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n     drop_impl_did: DefId,\n     dtor_predicates: &ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n-    self_to_impl_substs: &Substs<'tcx>,\n+    self_to_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorReported> {\n     let mut result = Ok(());\n "}, {"sha": "996d6cfd5683069cbce19ebaed5c5995f2baa638", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,10 +4,9 @@ use crate::astconv::AstConv;\n use crate::check::{FnCtxt, PlaceOp, callee, Needs};\n use crate::hir::GenericArg;\n use crate::hir::def_id::DefId;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::traits;\n use rustc::ty::{self, Ty, GenericParamDefKind};\n-use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n@@ -209,7 +208,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n     fn fresh_receiver_substs(&mut self,\n                              self_ty: Ty<'tcx>,\n                              pick: &probe::Pick<'tcx>)\n-                             -> &'tcx Substs<'tcx> {\n+                             -> SubstsRef<'tcx> {\n         match pick.kind {\n             probe::InherentImplPick => {\n                 let impl_def_id = pick.item.container.id();\n@@ -300,8 +299,8 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         &mut self,\n         pick: &probe::Pick<'tcx>,\n         seg: &hir::PathSegment,\n-        parent_substs: &Substs<'tcx>,\n-    ) -> &'tcx Substs<'tcx> {\n+        parent_substs: SubstsRef<'tcx>,\n+    ) -> SubstsRef<'tcx> {\n         // Determine the values for the generic parameters of the method.\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n@@ -369,7 +368,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n     // until we unify the `Self` type.\n     fn instantiate_method_sig(&mut self,\n                               pick: &probe::Pick<'tcx>,\n-                              all_substs: &'tcx Substs<'tcx>)\n+                              all_substs: SubstsRef<'tcx>)\n                               -> (ty::FnSig<'tcx>, ty::InstantiatedPredicates<'tcx>) {\n         debug!(\"instantiate_method_sig(pick={:?}, all_substs={:?})\",\n                pick,\n@@ -404,7 +403,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n     fn add_obligations(&mut self,\n                        fty: Ty<'tcx>,\n-                       all_substs: &Substs<'tcx>,\n+                       all_substs: SubstsRef<'tcx>,\n                        method_predicates: &ty::InstantiatedPredicates<'tcx>) {\n         debug!(\"add_obligations: fty={:?} all_substs={:?} method_predicates={:?}\",\n                fty,"}, {"sha": "d81d24e6d2b0356eeac16de309e01ca7aea47c3c", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -18,7 +18,7 @@ use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::subst::Subst;\n@@ -38,7 +38,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n pub struct MethodCallee<'tcx> {\n     /// Impl method ID, for inherent methods, or trait method ID, otherwise.\n     pub def_id: DefId,\n-    pub substs: &'tcx Substs<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n \n     /// Instantiated method signature, i.e., it has been\n     /// substituted, normalized, and has had late-bound\n@@ -281,7 +281,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                trait_def_id);\n \n         // Construct a trait-reference `self_ty : Trait<input_tys>`\n-        let substs = Substs::for_item(self.tcx, trait_def_id, |param, _| {\n+        let substs = InternalSubsts::for_item(self.tcx, trait_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {}\n                 GenericParamDefKind::Type {..} => {"}, {"sha": "a4624eebcba830e11304c9c43a7cd03c9394b042", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc::hir;\n use rustc::lint;\n use rustc::session::config::nightly_options;\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts, SubstsRef};\n use rustc::traits::{self, ObligationCause};\n use rustc::traits::query::{CanonicalTyGoal};\n use rustc::traits::query::method_autoderef::{CandidateStep, MethodAutoderefStepsResult};\n@@ -125,7 +125,7 @@ struct Candidate<'tcx> {\n \n #[derive(Debug)]\n enum CandidateKind<'tcx> {\n-    InherentImplCandidate(&'tcx Substs<'tcx>,\n+    InherentImplCandidate(SubstsRef<'tcx>,\n                           // Normalize obligations\n                           Vec<traits::PredicateObligation<'tcx>>),\n     ObjectCandidate,\n@@ -1480,7 +1480,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     fn xform_self_ty(&self,\n                      item: &ty::AssociatedItem,\n                      impl_ty: Ty<'tcx>,\n-                     substs: &Substs<'tcx>)\n+                     substs: SubstsRef<'tcx>)\n                      -> (Ty<'tcx>, Option<Ty<'tcx>>) {\n         if item.kind == ty::AssociatedKind::Method && self.mode == Mode::MethodCall {\n             let sig = self.xform_method_sig(item.def_id, substs);\n@@ -1492,7 +1492,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n     fn xform_method_sig(&self,\n                         method: DefId,\n-                        substs: &Substs<'tcx>)\n+                        substs: SubstsRef<'tcx>)\n                         -> ty::FnSig<'tcx>\n     {\n         let fn_sig = self.tcx.fn_sig(method);\n@@ -1517,7 +1517,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         if generics.params.is_empty() {\n             xform_fn_sig.subst(self.tcx, substs)\n         } else {\n-            let substs = Substs::for_item(self.tcx, method, |param, _| {\n+            let substs = InternalSubsts::for_item(self.tcx, method, |param, _| {\n                 let i = param.index as usize;\n                 if i < substs.len() {\n                     substs[i]\n@@ -1537,12 +1537,12 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     /// Gets the type of an impl and generate substitutions with placeholders.\n-    fn impl_ty_and_substs(&self, impl_def_id: DefId) -> (Ty<'tcx>, &'tcx Substs<'tcx>) {\n+    fn impl_ty_and_substs(&self, impl_def_id: DefId) -> (Ty<'tcx>, SubstsRef<'tcx>) {\n         (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n     }\n \n-    fn fresh_item_substs(&self, def_id: DefId) -> &'tcx Substs<'tcx> {\n-        Substs::for_item(self.tcx, def_id, |param, _| {\n+    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {\n+        InternalSubsts::for_item(self.tcx, def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.tcx.types.re_erased.into(),\n                 GenericParamDefKind::Type {..} => {"}, {"sha": "202d8bec4e9578551405610c0e35e44694f3ad19", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -109,7 +109,7 @@ use rustc::ty::{\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::{UnpackedKind, Subst, Substs, UserSelfTy, UserSubsts};\n+use rustc::ty::subst::{UnpackedKind, Subst, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n use rustc::ty::util::{Representability, IntTypeExt, Discr};\n use rustc::ty::layout::VariantIdx;\n use syntax_pos::{self, BytePos, Span, MultiSpan};\n@@ -1318,7 +1318,7 @@ fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn check_opaque<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n     span: Span,\n ) {\n     if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id, substs) {\n@@ -1385,7 +1385,7 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n         hir::ItemKind::Existential(..) => {\n             let def_id = tcx.hir().local_def_id(it.id);\n \n-            let substs = Substs::identity_for_item(tcx, def_id);\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             check_opaque(tcx, def_id, substs, it.span);\n         }\n         hir::ItemKind::Ty(..) => {\n@@ -1809,7 +1809,7 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n \n     // For each field, figure out if it's known to be a ZST and align(1)\n     let field_infos = adt.non_enum_variant().fields.iter().map(|field| {\n-        let ty = field.ty(tcx, Substs::identity_for_item(tcx, field.did));\n+        let ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, field.did));\n         let param_env = tcx.param_env(field.did);\n         let layout = tcx.layout_of(param_env.and(ty));\n         // We are currently checking the type this field came from, so it must be local\n@@ -2177,7 +2177,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if !method_generics.params.is_empty() {\n                 let user_type_annotation = self.infcx.probe(|_| {\n                     let user_substs = UserSubsts {\n-                        substs: Substs::for_item(self.tcx, method.def_id, |param, _| {\n+                        substs: InternalSubsts::for_item(self.tcx, method.def_id, |param, _| {\n                             let i = param.index as usize;\n                             if i < method_generics.parent_count {\n                                 self.infcx.var_for_def(DUMMY_SP, param)\n@@ -2200,7 +2200,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn write_substs(&self, node_id: hir::HirId, substs: &'tcx Substs<'tcx>) {\n+    pub fn write_substs(&self, node_id: hir::HirId, substs: SubstsRef<'tcx>) {\n         if !substs.is_noop() {\n             debug!(\"write_substs({:?}, {:?}) in fcx {}\",\n                    node_id,\n@@ -2222,7 +2222,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         user_self_ty: Option<UserSelfTy<'tcx>>,\n     ) {\n         debug!(\n@@ -2303,7 +2303,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// types as well. This function combines the two.\n     fn instantiate_type_scheme<T>(&self,\n                                   span: Span,\n-                                  substs: &Substs<'tcx>,\n+                                  substs: SubstsRef<'tcx>,\n                                   value: &T)\n                                   -> T\n         where T : TypeFoldable<'tcx>\n@@ -2319,7 +2319,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     /// As `instantiate_type_scheme`, but for the bounds found in a\n     /// generic type scheme.\n-    fn instantiate_bounds(&self, span: Span, def_id: DefId, substs: &Substs<'tcx>)\n+    fn instantiate_bounds(&self, span: Span, def_id: DefId, substs: SubstsRef<'tcx>)\n                           -> ty::InstantiatedPredicates<'tcx> {\n         let bounds = self.tcx.predicates_of(def_id);\n         let result = bounds.instantiate(self.tcx, substs);\n@@ -2477,7 +2477,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Registers obligations that all types appearing in `substs` are well-formed.\n-    pub fn add_wf_bounds(&self, substs: &Substs<'tcx>, expr: &hir::Expr) {\n+    pub fn add_wf_bounds(&self, substs: SubstsRef<'tcx>, expr: &hir::Expr) {\n         for ty in substs.types() {\n             self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n         }\n@@ -2521,7 +2521,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn field_ty(&self,\n                     span: Span,\n                     field: &'tcx ty::FieldDef,\n-                    substs: &Substs<'tcx>)\n+                    substs: SubstsRef<'tcx>)\n                     -> Ty<'tcx>\n     {\n         self.normalize_associated_types_in(span, &field.ty(self.tcx, substs))\n@@ -4554,7 +4554,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ExprKind::Repeat(ref element, ref count) => {\n                 let count_def_id = tcx.hir().local_def_id(count.id);\n                 let param_env = ty::ParamEnv::empty();\n-                let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n                 let instance = ty::Instance::resolve(\n                     tcx.global_tcx(),\n                     param_env,"}, {"sha": "b549986777c84dcbd7f1da5fefc36db5d1ae48d2", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -81,7 +81,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty};\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -1393,7 +1393,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     fn substs_wf_in_scope(\n         &mut self,\n         origin: infer::ParameterOrigin,\n-        substs: &Substs<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         expr_span: Span,\n         expr_region: ty::Region<'tcx>,\n     ) {"}, {"sha": "69f2a17fdf11c01f9026f6f7f3bbae90e866bfba", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@ use crate::constrained_type_params::{identify_constrained_type_params, Parameter\n use crate::hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable, ToPredicate};\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_existential_type;\n@@ -459,7 +459,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     // For more examples see tests `defaults-well-formedness.rs` and `type-check-defaults.rs`.\n     //\n     // First we build the defaulted substitution.\n-    let substs = Substs::for_item(fcx.tcx, def_id, |param, _| {\n+    let substs = InternalSubsts::for_item(fcx.tcx, def_id, |param, _| {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 // All regions are identity."}, {"sha": "167fb109567d5737af6e10d96f7c3884b95d32a7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -23,7 +23,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::UnpackedKind;\n@@ -1149,7 +1149,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     match tcx.hir().get(node_id) {\n         Node::TraitItem(item) => match item.node {\n             TraitItemKind::Method(..) => {\n-                let substs = Substs::identity_for_item(tcx, def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n@@ -1160,7 +1160,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n \n         Node::ImplItem(item) => match item.node {\n             ImplItemKind::Method(..) => {\n-                let substs = Substs::identity_for_item(tcx, def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n             ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n@@ -1193,12 +1193,12 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n                 | ItemKind::Ty(ref t, _)\n                 | ItemKind::Impl(.., ref t, _) => icx.to_ty(t),\n                 ItemKind::Fn(..) => {\n-                    let substs = Substs::identity_for_item(tcx, def_id);\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id, substs)\n                 }\n                 ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) => {\n                     let def = tcx.adt_def(def_id);\n-                    let substs = Substs::identity_for_item(tcx, def_id);\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemKind::Existential(hir::ExistTy {\n@@ -1246,7 +1246,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n \n         Node::ForeignItem(foreign_item) => match foreign_item.node {\n             ForeignItemKind::Fn(..) => {\n-                let substs = Substs::identity_for_item(tcx, def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n             ForeignItemKind::Static(ref t, _) => icx.to_ty(t),\n@@ -1262,7 +1262,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n                 tcx.type_of(tcx.hir().get_parent_did(node_id))\n             }\n             VariantData::Tuple(..) => {\n-                let substs = Substs::identity_for_item(tcx, def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n         },\n@@ -1279,7 +1279,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             }\n \n             let substs = ty::ClosureSubsts {\n-                substs: Substs::identity_for_item(tcx, def_id),\n+                substs: InternalSubsts::identity_for_item(tcx, def_id),\n             };\n \n             tcx.mk_closure(def_id, substs)\n@@ -1829,7 +1829,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n \n         Node::ImplItem(item) => match item.node {\n             ImplItemKind::Existential(ref bounds) => {\n-                let substs = Substs::identity_for_item(tcx, def_id);\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 let opaque_ty = tcx.mk_opaque(def_id, substs);\n \n                 // Collect the bounds, i.e., the `A+B+'c` in `impl A+B+'c`.\n@@ -1874,7 +1874,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n                     impl_trait_fn,\n                     ref generics,\n                 }) => {\n-                    let substs = Substs::identity_for_item(tcx, def_id);\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     let opaque_ty = tcx.mk_opaque(def_id, substs);\n \n                     // Collect the bounds, i.e., the `A+B+'c` in `impl A+B+'c`."}, {"sha": "419796a2014e04d8d965d40aeb986a57fd4fbfd7", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -105,7 +105,7 @@ use rustc::session;\n use rustc::session::CompileIncomplete;\n use rustc::session::config::{EntryFnType, nightly_options};\n use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n use rustc::util;\n@@ -116,7 +116,7 @@ use util::common::time;\n use std::iter;\n \n pub struct TypeAndSubsts<'tcx> {\n-    substs: &'tcx Substs<'tcx>,\n+    substs: SubstsRef<'tcx>,\n     ty: Ty<'tcx>,\n }\n "}, {"sha": "7b94b047c92e2e7e332117f706c7ea5f4d534a89", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -4,7 +4,7 @@\n //! We walk the set of items and, for each member, generate new constraints.\n \n use hir::def_id::DefId;\n-use rustc::ty::subst::{Substs, UnpackedKind};\n+use rustc::ty::subst::{UnpackedKind, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use rustc::hir;\n@@ -222,7 +222,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n     fn add_constraints_from_invariant_substs(&mut self,\n                                              current: &CurrentItem,\n-                                             substs: &Substs<'tcx>,\n+                                             substs: SubstsRef<'tcx>,\n                                              variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_invariant_substs: substs={:?} variance={:?}\",\n                substs,\n@@ -344,7 +344,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn add_constraints_from_substs(&mut self,\n                                    current: &CurrentItem,\n                                    def_id: DefId,\n-                                   substs: &Substs<'tcx>,\n+                                   substs: SubstsRef<'tcx>,\n                                    variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_substs(def_id={:?}, substs={:?}, variance={:?})\",\n                def_id,"}, {"sha": "72abbae231aa6e188b6fb8cb43fd89aad65ada65", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be45738dd3524f9487f3cf358ef014b12c4061/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f0be45738dd3524f9487f3cf358ef014b12c4061", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::interpret::GlobalId;\n use rustc::hir::{self, GenericArg, HirVec};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::layout::VariantIdx;\n@@ -1089,7 +1089,7 @@ impl Clean<GenericBound> for hir::GenericBound {\n }\n \n fn external_generic_args(cx: &DocContext<'_, '_, '_>, trait_did: Option<DefId>, has_self: bool,\n-                        bindings: Vec<TypeBinding>, substs: &Substs<'_>) -> GenericArgs {\n+                        bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> GenericArgs {\n     let lifetimes = substs.regions().filter_map(|v| v.clean(cx)).collect();\n     let types = substs.types().skip(has_self as usize).collect::<Vec<_>>();\n \n@@ -1131,7 +1131,7 @@ fn external_generic_args(cx: &DocContext<'_, '_, '_>, trait_did: Option<DefId>,\n // trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n // from Fn<(A, B,), C> to Fn(A, B) -> C\n fn external_path(cx: &DocContext<'_, '_, '_>, name: &str, trait_did: Option<DefId>, has_self: bool,\n-                 bindings: Vec<TypeBinding>, substs: &Substs<'_>) -> Path {\n+                 bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> Path {\n     Path {\n         global: false,\n         def: Def::Err,\n@@ -1192,7 +1192,7 @@ impl<'tcx> Clean<GenericBound> for ty::TraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<Option<Vec<GenericBound>>> for Substs<'tcx> {\n+impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n     fn clean(&self, cx: &DocContext<'_, '_, '_>) -> Option<Vec<GenericBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().filter_map(|r| r.clean(cx)).map(GenericBound::Outlives));\n@@ -2532,7 +2532,7 @@ impl Clean<Type> for hir::Ty {\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.id);\n                 let param_env = cx.tcx.param_env(def_id);\n-                let substs = Substs::identity_for_item(cx.tcx, def_id);\n+                let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n                 let cid = GlobalId {\n                     instance: ty::Instance::new(def_id, substs),\n                     promoted: None\n@@ -2776,7 +2776,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n                 let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n-                                         None, false, vec![], Substs::empty());\n+                                         None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath {\n                     path: path,\n                     typarams: None,"}]}