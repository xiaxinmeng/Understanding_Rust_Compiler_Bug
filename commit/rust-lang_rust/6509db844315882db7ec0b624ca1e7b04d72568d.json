{"sha": "6509db844315882db7ec0b624ca1e7b04d72568d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MDlkYjg0NDMxNTg4MmRiN2VjMGI2MjRjYTFlN2IwNGQ3MjU2OGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-05T04:03:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-05T05:55:41Z"}, "message": "or_patterns: harden bindings test", "tree": {"sha": "e9fe3458ec2c0acf2f1bb54ffb4aa50be2cbeb3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fe3458ec2c0acf2f1bb54ffb4aa50be2cbeb3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6509db844315882db7ec0b624ca1e7b04d72568d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6509db844315882db7ec0b624ca1e7b04d72568d", "html_url": "https://github.com/rust-lang/rust/commit/6509db844315882db7ec0b624ca1e7b04d72568d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6509db844315882db7ec0b624ca1e7b04d72568d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9290dceee2cb6b882b26ec6e294560e51ef0853", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9290dceee2cb6b882b26ec6e294560e51ef0853", "html_url": "https://github.com/rust-lang/rust/commit/c9290dceee2cb6b882b26ec6e294560e51ef0853"}], "stats": {"total": 252, "additions": 245, "deletions": 7}, "files": [{"sha": "5ec7dc6962c18ef3bdf249410856c0802f8a5359", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.rs", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6509db844315882db7ec0b624ca1e7b04d72568d/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6509db844315882db7ec0b624ca1e7b04d72568d/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs?ref=6509db844315882db7ec0b624ca1e7b04d72568d", "patch": "@@ -1,4 +1,68 @@\n-enum Blah { A(isize, isize, usize), B(isize, isize) }\n+// Here we test type checking of bindings when combined with or-patterns.\n+// Specifically, we ensure that introducing bindings of different types result in type errors.\n \n-fn main() { match Blah::A(1, 1, 2) { Blah::A(_, x, y) | Blah::B(x, y) => { } } }\n-//~^ ERROR mismatched types\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    enum Blah {\n+        A(isize, isize, usize),\n+        B(isize, isize),\n+    }\n+\n+    match Blah::A(1, 1, 2) {\n+        Blah::A(_, x, y) | Blah::B(x, y) => {} //~ ERROR mismatched types\n+    }\n+\n+    match Some(Blah::A(1, 1, 2)) {\n+        Some(Blah::A(_, x, y) | Blah::B(x, y)) => {} //~ ERROR mismatched types\n+    }\n+\n+    match (0u8, 1u16) {\n+        (x, y) | (y, x) => {} //~ ERROR mismatched types\n+                              //~^ ERROR mismatched types\n+    }\n+\n+    match Some((0u8, Some((1u16, 2u32)))) {\n+        Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n+        _ => {}\n+    }\n+\n+    if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n+        //~^ ERROR mismatched types\n+    }\n+\n+    if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2)) {\n+        //~^ ERROR mismatched types\n+    }\n+\n+    if let (x, y) | (y, x) = (0u8, 1u16) {\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+    }\n+\n+    if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n+    = Some((0u8, Some((1u16, 2u32))))\n+    {}\n+\n+    let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2);\n+    //~^ ERROR mismatched types\n+\n+    let (x, y) | (y, x) = (0u8, 1u16);\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+\n+    fn f1((Blah::A(_, x, y) | Blah::B(x, y)): Blah) {}\n+    //~^ ERROR mismatched types\n+\n+    fn f2(((x, y) | (y, x)): (u8, u16)) {}\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "84c38e3be9019335a467913799a62e90c634f36f", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.stderr", "status": "modified", "additions": 178, "deletions": 4, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/6509db844315882db7ec0b624ca1e7b04d72568d/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6509db844315882db7ec0b624ca1e7b04d72568d/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr?ref=6509db844315882db7ec0b624ca1e7b04d72568d", "patch": "@@ -1,9 +1,183 @@\n error[E0308]: mismatched types\n-  --> $DIR/or-pattern-mismatch.rs:3:68\n+  --> $DIR/or-pattern-mismatch.rs:13:39\n    |\n-LL | fn main() { match Blah::A(1, 1, 2) { Blah::A(_, x, y) | Blah::B(x, y) => { } } }\n-   |                   ---------------- this expression has type `Blah` ^ expected `usize`, found `isize`\n+LL |     match Blah::A(1, 1, 2) {\n+   |           ---------------- this expression has type `main::Blah`\n+LL |         Blah::A(_, x, y) | Blah::B(x, y) => {}\n+   |                                       ^ expected `usize`, found `isize`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:17:44\n+   |\n+LL |     match Some(Blah::A(1, 1, 2)) {\n+   |           ---------------------- this expression has type `std::option::Option<main::Blah>`\n+LL |         Some(Blah::A(_, x, y) | Blah::B(x, y)) => {}\n+   |                                            ^ expected `usize`, found `isize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:21:19\n+   |\n+LL |     match (0u8, 1u16) {\n+   |           ----------- this expression has type `(u8, u16)`\n+LL |         (x, y) | (y, x) => {}\n+   |                   ^ expected `u16`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:21:22\n+   |\n+LL |     match (0u8, 1u16) {\n+   |           ----------- this expression has type `(u8, u16)`\n+LL |         (x, y) | (y, x) => {}\n+   |                      ^ expected `u8`, found `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:26:41\n+   |\n+LL |     match Some((0u8, Some((1u16, 2u32)))) {\n+   |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n+   |                                         ^ expected `u16`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:26:50\n+   |\n+LL |     match Some((0u8, Some((1u16, 2u32)))) {\n+   |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n+   |                                                  ^ expected `u8`, found `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:26:59\n+   |\n+LL |     match Some((0u8, Some((1u16, 2u32)))) {\n+   |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n+   |                                                           ^ expected `u32`, found `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:26:62\n+   |\n+LL |     match Some((0u8, Some((1u16, 2u32)))) {\n+   |           ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+LL |         Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x)))) => {}\n+   |                                                              ^ expected `u8`, found `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:34:42\n+   |\n+LL |     if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n+   |                                          ^    ---------------- this expression has type `main::Blah`\n+   |                                          |\n+   |                                          expected `usize`, found `isize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:38:47\n+   |\n+LL |     if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2)) {\n+   |                                               ^     ---------------------- this expression has type `std::option::Option<main::Blah>`\n+   |                                               |\n+   |                                               expected `usize`, found `isize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:42:22\n+   |\n+LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n+   |                      ^       ----------- this expression has type `(u8, u16)`\n+   |                      |\n+   |                      expected `u16`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:42:25\n+   |\n+LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n+   |                         ^    ----------- this expression has type `(u8, u16)`\n+   |                         |\n+   |                         expected `u8`, found `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:47:44\n+   |\n+LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n+   |                                            ^ expected `u16`, found `u8`\n+...\n+LL |     = Some((0u8, Some((1u16, 2u32))))\n+   |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:47:53\n+   |\n+LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n+   |                                                     ^ expected `u8`, found `u16`\n+...\n+LL |     = Some((0u8, Some((1u16, 2u32))))\n+   |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:47:62\n+   |\n+LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n+   |                                                              ^ expected `u32`, found `u16`\n+...\n+LL |     = Some((0u8, Some((1u16, 2u32))))\n+   |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:47:65\n+   |\n+LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n+   |                                                                 ^ expected `u8`, found `u32`\n+...\n+LL |     = Some((0u8, Some((1u16, 2u32))))\n+   |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:55:39\n+   |\n+LL |     let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2);\n+   |                                       ^    ---------------- this expression has type `main::Blah`\n+   |                                       |\n+   |                                       expected `usize`, found `isize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:58:19\n+   |\n+LL |     let (x, y) | (y, x) = (0u8, 1u16);\n+   |                   ^       ----------- this expression has type `(u8, u16)`\n+   |                   |\n+   |                   expected `u16`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:58:22\n+   |\n+LL |     let (x, y) | (y, x) = (0u8, 1u16);\n+   |                      ^    ----------- this expression has type `(u8, u16)`\n+   |                      |\n+   |                      expected `u8`, found `u16`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:62:42\n+   |\n+LL |     fn f1((Blah::A(_, x, y) | Blah::B(x, y)): Blah) {}\n+   |                                          ^    ---- expected due to this\n+   |                                          |\n+   |                                          expected `usize`, found `isize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:65:22\n+   |\n+LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n+   |                      ^       --------- expected due to this\n+   |                      |\n+   |                      expected `u16`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-pattern-mismatch.rs:65:25\n+   |\n+LL |     fn f2(((x, y) | (y, x)): (u8, u16)) {}\n+   |                         ^    --------- expected due to this\n+   |                         |\n+   |                         expected `u8`, found `u16`\n+\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}