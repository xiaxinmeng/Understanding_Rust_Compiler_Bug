{"sha": "ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDdiZDVkMjNhY2VkNmQ0YmFhNTY5NjIxM2IxMWNhODMyYzFhNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-04T19:20:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-04T19:20:58Z"}, "message": "Auto merge of #40236 - petrochenkov:btweak, r=alexcrichton\n\nrustbuild: A few tweaks\n\nFixes https://github.com/rust-lang/rust/issues/40016\nFixes https://github.com/rust-lang/rust/issues/39507\n\nr? @alexcrichton", "tree": {"sha": "ef19c01e9179f6d455cc6c6a7b3a0cbf316f3119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef19c01e9179f6d455cc6c6a7b3a0cbf316f3119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "html_url": "https://github.com/rust-lang/rust/commit/ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83cbaf5e66752018e5bf0207b2b34f0e6be4227e", "url": "https://api.github.com/repos/rust-lang/rust/commits/83cbaf5e66752018e5bf0207b2b34f0e6be4227e", "html_url": "https://github.com/rust-lang/rust/commit/83cbaf5e66752018e5bf0207b2b34f0e6be4227e"}, {"sha": "428f063fcdc35e048ff79d059a8963334ba2281c", "url": "https://api.github.com/repos/rust-lang/rust/commits/428f063fcdc35e048ff79d059a8963334ba2281c", "html_url": "https://github.com/rust-lang/rust/commit/428f063fcdc35e048ff79d059a8963334ba2281c"}], "stats": {"total": 333, "additions": 179, "deletions": 154}, "files": [{"sha": "f4174693a5771872cef659c99a00c2272e5b268e", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -80,7 +80,7 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -202,7 +202,7 @@ dependencies = [\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.20\"\n+version = \"0.1.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -221,6 +221,7 @@ dependencies = [\n name = \"compiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n+ \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n  \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -486,7 +487,7 @@ name = \"libgit2-sys\"\n version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.3.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -501,7 +502,7 @@ name = \"libssh2-sys\"\n version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -893,7 +894,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1036,7 +1037,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1080,7 +1081,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1172,7 +1173,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1572,7 +1573,7 @@ dependencies = [\n \"checksum bufstream 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b48dbe2ff0e98fa2f03377d204a9637d3c9816cd431bfe05a8abbd0ea11d074\"\n \"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c\"\n \"checksum clap 2.20.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7db281b0520e97fbd15cd615dcd8f8bcad0c26f5f7d5effe705f090f39e9a758\"\n-\"checksum cmake 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a3a6805df695087e7c1bcd9a82e03ad6fb864c8e67ac41b1348229ce5b7f0407\"\n+\"checksum cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1acc68a3f714627af38f9f5d09706a28584ba60dfe2cca68f40bf779f941b25\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n \"checksum curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c90e1240ef340dd4027ade439e5c7c2064dd9dc652682117bd50d1486a3add7b\"\n \"checksum curl-sys 0.3.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0d909dc402ae80b6f7b0118c039203436061b9d9a3ca5d2c2546d93e0a61aaa\""}, {"sha": "7dd53f41a214adb838a281bdef446e56590931be", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -8,6 +8,7 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+from __future__ import print_function\n import argparse\n import contextlib\n import datetime\n@@ -501,7 +502,7 @@ def build_triple(self):\n \n         return \"{}-{}\".format(cputype, ostype)\n \n-def main():\n+def bootstrap():\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n     parser.add_argument('--clean', action='store_true')\n@@ -564,8 +565,6 @@ def main():\n     rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n     rb._cargo_rev = data['cargo']\n \n-    start_time = time()\n-\n     # Fetch/build the bootstrap\n     rb.build = rb.build_triple()\n     rb.download_stage0()\n@@ -582,9 +581,19 @@ def main():\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     rb.run(args, env)\n \n-    end_time = time()\n-\n-    print(\"Build completed in %s\" % format_build_time(end_time - start_time))\n+def main():\n+    start_time = time()\n+    try:\n+        bootstrap()\n+        print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n+    except (SystemExit, KeyboardInterrupt) as e:\n+        if hasattr(e, 'code') and isinstance(e.code, int):\n+            exit_code = e.code\n+        else:\n+            exit_code = 1\n+            print(e)\n+        print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n+        sys.exit(exit_code)\n \n if __name__ == '__main__':\n     main()"}, {"sha": "98b68d870d375b529706c5af008a4598e8c33bfb", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -740,7 +740,7 @@ impl Build {\n         } else {\n             let base = self.llvm_out(&self.config.build).join(\"build\");\n             let exe = exe(\"FileCheck\", target);\n-            if self.config.build.contains(\"msvc\") {\n+            if !self.config.ninja && self.config.build.contains(\"msvc\") {\n                 base.join(\"Release/bin\").join(exe)\n             } else {\n                 base.join(\"bin\").join(exe)"}, {"sha": "483f45fdd621877a2e6772277111f13d3c47280d", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -41,28 +41,32 @@ pub fn llvm(build: &Build, target: &str) {\n         }\n     }\n \n-    // If the cleaning trigger is newer than our built artifacts (or if the\n-    // artifacts are missing) then we keep going, otherwise we bail out.\n-    let dst = build.llvm_out(target);\n-    let stamp = build.src.join(\"src/rustllvm/llvm-auto-clean-trigger\");\n-    let mut stamp_contents = String::new();\n-    t!(t!(File::open(&stamp)).read_to_string(&mut stamp_contents));\n-    let done_stamp = dst.join(\"llvm-finished-building\");\n+    let clean_trigger = build.src.join(\"src/rustllvm/llvm-auto-clean-trigger\");\n+    let mut clean_trigger_contents = String::new();\n+    t!(t!(File::open(&clean_trigger)).read_to_string(&mut clean_trigger_contents));\n+\n+    let out_dir = build.llvm_out(target);\n+    let done_stamp = out_dir.join(\"llvm-finished-building\");\n     if done_stamp.exists() {\n         let mut done_contents = String::new();\n         t!(t!(File::open(&done_stamp)).read_to_string(&mut done_contents));\n-        if done_contents == stamp_contents {\n+\n+        // LLVM was already built previously.\n+        // We don't track changes in LLVM sources, so we need to choose between reusing\n+        // what was built previously, or cleaning the directory and doing a fresh build.\n+        // The choice depends on contents of the clean-trigger file.\n+        // If the contents are the same as during the previous build, then no action is required.\n+        // If the contents differ from the previous build, then cleaning is triggered.\n+        if done_contents == clean_trigger_contents {\n             return\n+        } else {\n+            t!(fs::remove_dir_all(&out_dir));\n         }\n     }\n-    drop(fs::remove_dir_all(&dst));\n \n     println!(\"Building LLVM for {}\", target);\n-\n     let _time = util::timeit();\n-    let _ = fs::remove_dir_all(&dst.join(\"build\"));\n-    t!(fs::create_dir_all(&dst.join(\"build\")));\n-    let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n+    t!(fs::create_dir_all(&out_dir));\n \n     // http://llvm.org/docs/CMake.html\n     let mut cfg = cmake::Config::new(build.src.join(\"src/llvm\"));\n@@ -82,9 +86,11 @@ pub fn llvm(build: &Build, target: &str) {\n         None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n     };\n \n+    let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n+\n     cfg.target(target)\n        .host(&build.config.build)\n-       .out_dir(&dst)\n+       .out_dir(&out_dir)\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n        .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n@@ -142,7 +148,7 @@ pub fn llvm(build: &Build, target: &str) {\n     //        tools and libs on all platforms.\n     cfg.build();\n \n-    t!(t!(File::create(&done_stamp)).write_all(stamp_contents.as_bytes()));\n+    t!(t!(File::create(&done_stamp)).write_all(clean_trigger_contents.as_bytes()));\n }\n \n fn check_llvm_version(build: &Build, llvm_config: &Path) {"}, {"sha": "a5c0d11d21985bd227582d1dfccf4409d495cb20", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -312,6 +312,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  });\n         };\n \n+        suite(\"check-ui\", \"src/test/ui\", \"ui\", \"ui\");\n         suite(\"check-rpass\", \"src/test/run-pass\", \"run-pass\", \"run-pass\");\n         suite(\"check-cfail\", \"src/test/compile-fail\", \"compile-fail\", \"compile-fail\");\n         suite(\"check-pfail\", \"src/test/parse-fail\", \"parse-fail\", \"parse-fail\");\n@@ -372,7 +373,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  });\n         };\n \n-        suite(\"check-ui\", \"src/test/ui\", \"ui\", \"ui\");\n+        suite(\"check-ui-full\", \"src/test/ui-fulldeps\", \"ui\", \"ui-fulldeps\");\n         suite(\"check-rpass-full\", \"src/test/run-pass-fulldeps\",\n               \"run-pass\", \"run-pass-fulldeps\");\n         suite(\"check-rfail-full\", \"src/test/run-fail-fulldeps\",\n@@ -1530,7 +1531,8 @@ mod tests {\n         assert!(plan.iter().all(|s| s.host == \"A\"));\n         assert!(plan.iter().all(|s| s.target == \"C\"));\n \n-        assert!(!plan.iter().any(|s| s.name.contains(\"-ui\")));\n+        assert!(plan.iter().any(|s| s.name.contains(\"-ui\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"ui-full\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n         assert!(!plan.iter().any(|s| s.name.contains(\"cfail-full\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"codegen-units\")));"}, {"sha": "dffaebbd92914b0a2270037f903ccd3f1675c108", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -12,7 +12,8 @@\n \n extern crate filetime;\n \n-use std::fs;\n+use std::{fs, env};\n+use std::fs::File;\n use std::process::{Command, Stdio};\n use std::path::{Path, PathBuf};\n \n@@ -166,6 +167,47 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n     }\n }\n \n+#[must_use]\n+pub struct NativeLibBoilerplate {\n+    pub src_dir: PathBuf,\n+    pub out_dir: PathBuf,\n+}\n+\n+impl Drop for NativeLibBoilerplate {\n+    fn drop(&mut self) {\n+        t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n+    }\n+}\n+\n+// Perform standard preparations for native libraries that are build only once for all stages.\n+// Emit rerun-if-changed and linking attributes for Cargo, check if any source files are\n+// updated, calculate paths used later in actual build with CMake/make or C/C++ compiler.\n+// If Err is returned, then everything is up-to-date and further build actions can be skipped.\n+// Timestamps are created automatically when the result of `native_lib_boilerplate` goes out\n+// of scope, so all the build actions should be completed until then.\n+pub fn native_lib_boilerplate(src_name: &str,\n+                              out_name: &str,\n+                              link_name: &str,\n+                              search_subdir: &str)\n+                              -> Result<NativeLibBoilerplate, ()> {\n+    let current_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n+    let src_dir = current_dir.join(\"..\").join(src_name);\n+    rerun_if_changed_anything_in_dir(&src_dir);\n+\n+    let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n+    let out_dir = PathBuf::from(out_dir).join(out_name);\n+    let _ = fs::create_dir_all(&out_dir);\n+    println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n+\n+    let timestamp = out_dir.join(\"rustbuild.timestamp\");\n+    if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(&src_dir, &timestamp) {\n+        Ok(NativeLibBoilerplate { src_dir: src_dir, out_dir: out_dir })\n+    } else {\n+        Err(())\n+    }\n+}\n+\n fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "ae040a23906595683cc072cf30d7021209349a27", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -10,19 +10,15 @@\n \n #![deny(warnings)]\n \n-#[macro_use]\n extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::fs::{self, File};\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::process::Command;\n-use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n-\n     // FIXME: This is a hack to support building targets that don't\n     // support jemalloc alongside hosts that do. The jemalloc build is\n     // controlled by a feature of the std crate, and if that feature\n@@ -61,22 +57,11 @@ fn main() {\n         return;\n     }\n \n-    let build_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n-    let build_dir = PathBuf::from(build_dir).join(\"jemalloc\");\n-    let _ = fs::create_dir_all(&build_dir);\n-\n-    if target.contains(\"windows\") {\n-        println!(\"cargo:rustc-link-lib=static=jemalloc\");\n-    } else {\n-        println!(\"cargo:rustc-link-lib=static=jemalloc_pic\");\n-    }\n-    println!(\"cargo:rustc-link-search=native={}/lib\", build_dir.display());\n-    let src_dir = env::current_dir().unwrap().join(\"../jemalloc\");\n-    rerun_if_changed_anything_in_dir(&src_dir);\n-    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n-    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n-        return\n-    }\n+    let link_name = if target.contains(\"windows\") { \"jemalloc\" } else { \"jemalloc_pic\" };\n+    let native = match native_lib_boilerplate(\"jemalloc\", \"jemalloc\", link_name, \"lib\") {\n+        Ok(native) => native,\n+        _ => return,\n+    };\n \n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n@@ -88,12 +73,12 @@ fn main() {\n         .join(\" \");\n \n     let mut cmd = Command::new(\"sh\");\n-    cmd.arg(src_dir.join(\"configure\")\n-                   .to_str()\n-                   .unwrap()\n-                   .replace(\"C:\\\\\", \"/c/\")\n-                   .replace(\"\\\\\", \"/\"))\n-       .current_dir(&build_dir)\n+    cmd.arg(native.src_dir.join(\"configure\")\n+                          .to_str()\n+                          .unwrap()\n+                          .replace(\"C:\\\\\", \"/c/\")\n+                          .replace(\"\\\\\", \"/\"))\n+       .current_dir(&native.out_dir)\n        .env(\"CC\", compiler.path())\n        .env(\"EXTRA_CFLAGS\", cflags.clone())\n        // jemalloc generates Makefile deps using GCC's \"-MM\" flag. This means\n@@ -166,7 +151,7 @@ fn main() {\n     run(&mut cmd);\n \n     let mut make = Command::new(build_helper::make(&host));\n-    make.current_dir(&build_dir)\n+    make.current_dir(&native.out_dir)\n         .arg(\"build_lib_static\");\n \n     // mingw make seems... buggy? unclear...\n@@ -187,6 +172,4 @@ fn main() {\n             .file(\"pthread_atfork_dummy.c\")\n             .compile(\"libpthread_atfork_dummy.a\");\n     }\n-\n-    t!(File::create(&timestamp));\n }"}, {"sha": "3f844b3f09e3a28648d4c3b76b30e3a9cb1f3c59", "filename": "src/libcompiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibcompiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibcompiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2FCargo.toml?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -15,4 +15,5 @@ doc = false\n core = { path = \"../libcore\" }\n \n [build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n gcc = \"0.3.27\""}, {"sha": "bcd3a92dd430548704981736f5c8fe9ca153c21d", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -33,11 +33,13 @@\n //! error (if any) and then we just add it to the list. Overall, that cost is\n //! far far less than working with compiler-rt's build system over time.\n \n+extern crate build_helper;\n extern crate gcc;\n \n use std::collections::BTreeMap;\n use std::env;\n use std::path::Path;\n+use build_helper::native_lib_boilerplate;\n \n struct Sources {\n     // SYMBOL -> PATH TO SOURCE\n@@ -79,7 +81,14 @@ fn main() {\n         return;\n     }\n \n+    // Can't reuse `sources` list for the freshness check becuse it doesn't contain header files.\n+    let native = match native_lib_boilerplate(\"compiler-rt\", \"compiler-rt\", \"compiler-rt\", \".\") {\n+        Ok(native) => native,\n+        _ => return,\n+    };\n+\n     let cfg = &mut gcc::Config::new();\n+    cfg.out_dir(&native.out_dir);\n \n     if target.contains(\"msvc\") {\n         // Don't pull in extra libraries on MSVC"}, {"sha": "78d2ef1e37d2ac16111f4a71a1ea33bf926bfd1a", "filename": "src/libflate/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibflate%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibflate%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -11,6 +11,7 @@\n extern crate gcc;\n \n fn main() {\n+    println!(\"cargo:rerun-if-changed=../rt/miniz.c\");\n     gcc::Config::new()\n         .file(\"../rt/miniz.c\")\n         .compile(\"libminiz.a\");"}, {"sha": "2df2e001e6ff2d75594ac65896cd7e27852ba421", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -11,29 +11,26 @@\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"asan\", \"clang_rt.asan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"asan\")\n             .build();\n-\n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.asan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n     }\n-\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n }"}, {"sha": "b74bccb70593f7517e5d5a5838a78b11300359f1", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -144,9 +144,7 @@ fn main() {\n         cfg.flag(\"-DLLVM_RUSTLLVM\");\n     }\n \n-    println!(\"cargo:rerun-if-changed=../rustllvm/PassWrapper.cpp\");\n-    println!(\"cargo:rerun-if-changed=../rustllvm/RustWrapper.cpp\");\n-    println!(\"cargo:rerun-if-changed=../rustllvm/ArchiveWrapper.cpp\");\n+    build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../rustllvm\"));\n     cfg.file(\"../rustllvm/PassWrapper.cpp\")\n        .file(\"../rustllvm/RustWrapper.cpp\")\n        .file(\"../rustllvm/ArchiveWrapper.cpp\")"}, {"sha": "005163f41026c39c1a99860cdd523f9f4bb4da7f", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -11,29 +11,26 @@\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"lsan\", \"clang_rt.lsan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"lsan\")\n             .build();\n-\n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.lsan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n     }\n-\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n }"}, {"sha": "c438b5250463b8aa4ce446fad1d3f32fbcc8bc1a", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -11,29 +11,26 @@\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"msan\", \"clang_rt.msan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"msan\")\n             .build();\n-\n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.msan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n     }\n-\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n }"}, {"sha": "055b344d2e9479da49ee6bc7533d2152bce9d67a", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -11,29 +11,26 @@\n extern crate build_helper;\n extern crate cmake;\n \n-use std::path::PathBuf;\n use std::env;\n+use build_helper::native_lib_boilerplate;\n \n use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let dst = Config::new(\"../compiler-rt\")\n+        let native = match native_lib_boilerplate(\"compiler-rt\", \"tsan\", \"clang_rt.tsan-x86_64\",\n+                                                  \"build/lib/linux\") {\n+            Ok(native) => native,\n+            _ => return,\n+        };\n+\n+        Config::new(&native.src_dir)\n             .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n             .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .out_dir(&native.out_dir)\n             .build_target(\"tsan\")\n             .build();\n-\n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 dst.join(\"build/lib/linux\").display());\n-        println!(\"cargo:rustc-link-lib=static=clang_rt.tsan-x86_64\");\n-\n-        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n-                .unwrap())\n-            .join(\"../compiler-rt\"));\n     }\n-\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n }"}, {"sha": "9fa6406c1d8b69d14175484997cf569f76eec5f1", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate build_helper;\n extern crate gcc;\n \n fn main() {\n+    let src_dir = std::path::Path::new(\"../rt/hoedown/src\");\n+    build_helper::rerun_if_changed_anything_in_dir(src_dir);\n     let mut cfg = gcc::Config::new();\n     cfg.file(\"../rt/hoedown/src/autolink.c\")\n        .file(\"../rt/hoedown/src/buffer.c\")\n@@ -21,6 +24,6 @@ fn main() {\n        .file(\"../rt/hoedown/src/html_smartypants.c\")\n        .file(\"../rt/hoedown/src/stack.c\")\n        .file(\"../rt/hoedown/src/version.c\")\n-       .include(\"../rt/hoedown/src\")\n+       .include(src_dir)\n        .compile(\"libhoedown.a\");\n }"}, {"sha": "9fb83ad75980aeb399747ff2a8315d5645151c04", "filename": "src/libstd/build.rs", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -10,24 +10,19 @@\n \n #![deny(warnings)]\n \n-#[macro_use]\n extern crate build_helper;\n extern crate gcc;\n \n use std::env;\n-use std::fs::{self, File};\n-use std::path::{Path, PathBuf};\n use std::process::Command;\n-use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     if cfg!(feature = \"backtrace\") && !target.contains(\"apple\") && !target.contains(\"msvc\") &&\n         !target.contains(\"emscripten\") && !target.contains(\"fuchsia\") && !target.contains(\"redox\") {\n-        build_libbacktrace(&host, &target);\n+        let _ = build_libbacktrace(&host, &target);\n     }\n \n     if target.contains(\"linux\") {\n@@ -69,19 +64,8 @@ fn main() {\n     }\n }\n \n-fn build_libbacktrace(host: &str, target: &str) {\n-    let build_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n-    let build_dir = PathBuf::from(build_dir).join(\"libbacktrace\");\n-    let _ = fs::create_dir_all(&build_dir);\n-\n-    println!(\"cargo:rustc-link-lib=static=backtrace\");\n-    println!(\"cargo:rustc-link-search=native={}/.libs\", build_dir.display());\n-    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n-    rerun_if_changed_anything_in_dir(&src_dir);\n-    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n-    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n-        return\n-    }\n+fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n+    let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\", \".libs\")?;\n \n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n@@ -90,10 +74,10 @@ fn build_libbacktrace(host: &str, target: &str) {\n                              .collect::<Vec<_>>().join(\" \");\n     cflags.push_str(\" -fvisibility=hidden\");\n     run(Command::new(\"sh\")\n-                .current_dir(&build_dir)\n-                .arg(src_dir.join(\"configure\").to_str().unwrap()\n-                            .replace(\"C:\\\\\", \"/c/\")\n-                            .replace(\"\\\\\", \"/\"))\n+                .current_dir(&native.out_dir)\n+                .arg(native.src_dir.join(\"configure\").to_str().unwrap()\n+                                   .replace(\"C:\\\\\", \"/c/\")\n+                                   .replace(\"\\\\\", \"/\"))\n                 .arg(\"--with-pic\")\n                 .arg(\"--disable-multilib\")\n                 .arg(\"--disable-shared\")\n@@ -106,9 +90,8 @@ fn build_libbacktrace(host: &str, target: &str) {\n                 .env(\"CFLAGS\", cflags));\n \n     run(Command::new(build_helper::make(host))\n-                .current_dir(&build_dir)\n-                .arg(format!(\"INCDIR={}\", src_dir.display()))\n+                .current_dir(&native.out_dir)\n+                .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n                 .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n-\n-    t!(File::create(&timestamp));\n+    Ok(())\n }"}, {"sha": "ed3d5212bf25677a3372f0764927a7ce02d767e0", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -11,6 +11,7 @@\n use std::env;\n \n fn main() {\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if target.contains(\"linux\") {"}, {"sha": "47ec762b3e94c86ebceea79022d5dba0be923911", "filename": "src/test/run-make/cdylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Frun-make%2Fcdylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Frun-make%2Fcdylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcdylib%2FMakefile?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -8,7 +8,7 @@ all: $(call RUN_BINFILE,foo)\n \n ifdef IS_MSVC\n $(call RUN_BINFILE,foo): $(call DYLIB,foo)\n-\t$(CC) $(CFLAGS) foo.c $(TMPDIR)/foo.dll.lib -Fe:`cygpath -w $@`\n+\t$(CC) $(CFLAGS) foo.c $(TMPDIR)/foo.dll.lib $(call OUT_EXE,foo)\n else\n $(call RUN_BINFILE,foo): $(call DYLIB,foo)\n \t$(CC) $(CFLAGS) foo.c -lfoo -o $(call RUN_BINFILE,foo) -L $(TMPDIR)"}, {"sha": "c5ba2aa9413e7f8d0adbf5f054119bd6d3960012", "filename": "src/test/ui-fulldeps/custom-derive/auxiliary/plugin.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fauxiliary%2Fplugin.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "previous_filename": "src/test/ui/custom-derive/auxiliary/plugin.rs"}, {"sha": "2231c3c242285e68c30ca4b59521ffbdd99f437e", "filename": "src/test/ui-fulldeps/custom-derive/issue-36935.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.rs?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "previous_filename": "src/test/ui/custom-derive/issue-36935.rs"}, {"sha": "46cc7a42b04299a1ffca2ba1a10c2e37d0e4dac1", "filename": "src/test/ui-fulldeps/custom-derive/issue-36935.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "previous_filename": "src/test/ui/custom-derive/issue-36935.stderr"}, {"sha": "8f528889d6020282c569c02b5e92059282214596", "filename": "x.py", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/ba07bd5d23aced6d4baa5696213b11ca832c1a5d/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=ba07bd5d23aced6d4baa5696213b11ca832c1a5d", "patch": "@@ -9,14 +9,12 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-import sys\n+# This file is only a \"symlink\" to boostrap.py, all logic should go there.\n+\n import os\n-dir = os.path.dirname(__file__)\n-sys.path.append(os.path.abspath(os.path.join(dir, \"src\", \"bootstrap\")))\n+import sys\n+rust_dir = os.path.dirname(os.path.abspath(__file__))\n+sys.path.append(os.path.join(rust_dir, \"src\", \"bootstrap\"))\n \n import bootstrap\n-\n-try:\n-    bootstrap.main()\n-except KeyboardInterrupt:\n-    sys.exit()\n+bootstrap.main()"}]}