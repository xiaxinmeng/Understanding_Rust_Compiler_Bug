{"sha": "70960df43771e81b5d797332322c6df7ec25f257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTYwZGY0Mzc3MWU4MWI1ZDc5NzMzMjMyMmM2ZGY3ZWMyNWYyNTc=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-03-31T18:25:03Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-04-01T10:14:41Z"}, "message": "Don't show chaining hints for record literals and unit structs", "tree": {"sha": "cc564f54c7b213b9a817bcb86f3e38d0a47507b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc564f54c7b213b9a817bcb86f3e38d0a47507b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70960df43771e81b5d797332322c6df7ec25f257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70960df43771e81b5d797332322c6df7ec25f257", "html_url": "https://github.com/rust-lang/rust/commit/70960df43771e81b5d797332322c6df7ec25f257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70960df43771e81b5d797332322c6df7ec25f257/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77fc158fc6502cede48c94bbabb040c77b38c08", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77fc158fc6502cede48c94bbabb040c77b38c08", "html_url": "https://github.com/rust-lang/rust/commit/f77fc158fc6502cede48c94bbabb040c77b38c08"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "4b133b19baf988efe5c8eabcec4f96657ab3e9ad", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/70960df43771e81b5d797332322c6df7ec25f257/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70960df43771e81b5d797332322c6df7ec25f257/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=70960df43771e81b5d797332322c6df7ec25f257", "patch": "@@ -75,8 +75,7 @@ fn get_chaining_hints(\n         return None;\n     }\n \n-    let ty = sema.type_of_expr(&expr)?;\n-    if ty.is_unknown() {\n+    if matches!(expr, ast::Expr::RecordLit(_)) {\n         return None;\n     }\n \n@@ -95,6 +94,17 @@ fn get_chaining_hints(\n     let next = tokens.next()?.kind();\n     let next_next = tokens.next()?.kind();\n     if next == SyntaxKind::WHITESPACE && next_next == SyntaxKind::DOT {\n+        let ty = sema.type_of_expr(&expr)?;\n+        if ty.is_unknown() {\n+            return None;\n+        }\n+        if matches!(expr, ast::Expr::PathExpr(_)) {\n+            if let Some(Adt::Struct(st)) = ty.as_adt() {\n+                if st.fields(sema.db).is_empty() {\n+                    return None;\n+                }\n+            }\n+        }\n         let label = ty.display_truncated(sema.db, config.max_length).to_string();\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n@@ -1154,32 +1164,35 @@ fn main() {\n             struct A { pub b: B }\n             struct B { pub c: C }\n             struct C(pub bool);\n+            struct D;\n+\n+            impl D {\n+                fn foo(&self) -> i32 { 42 }\n+            }\n \n             fn main() {\n                 let x = A { b: B { c: C(true) } }\n                     .b\n                     .c\n                     .0;\n+                let x = D\n+                    .foo();\n             }\"#,\n         );\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: [150; 221),\n+                range: [252; 323),\n                 kind: ChainingHint,\n                 label: \"C\",\n             },\n             InlayHint {\n-                range: [150; 198),\n+                range: [252; 300),\n                 kind: ChainingHint,\n                 label: \"B\",\n             },\n-            InlayHint {\n-                range: [150; 175),\n-                kind: ChainingHint,\n-                label: \"A\",\n-            },\n-        ]\"###);\n+        ]\n+        \"###);\n     }\n \n     #[test]"}]}