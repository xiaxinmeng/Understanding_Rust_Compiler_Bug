{"sha": "ff364b0082502dc967f1a08d39e0f338a68fe277", "node_id": "C_kwDOAAsO6NoAKGZmMzY0YjAwODI1MDJkYzk2N2YxYTA4ZDM5ZTBmMzM4YTY4ZmUyNzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-17T13:41:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-17T13:41:54Z"}, "message": "Rollup merge of #111557 - cjgillot:revert-111020, r=petrochenkov\n\nRevert \"Validate resolution for SelfCtor too.\"\n\nThis reverts commit 83453408a0ce91b9e3d3ae6e7f117b1fd28b487d.\n\nThat PR introduced a breaking change.\n\nFixes https://github.com/rust-lang/rust/issues/111541\nReopens https://github.com/rust-lang/rust/issues/89868\n\nr? `@petrochenkov`", "tree": {"sha": "10205fa3dd3a4fd678ffd2f13061eb779f548ded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10205fa3dd3a4fd678ffd2f13061eb779f548ded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff364b0082502dc967f1a08d39e0f338a68fe277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZNmiCRBK7hj4Ov3rIwAAvNwIAIE0SjQUx9yxMcnwP68NkpNH\n5I8GBq8m0p9uZseboVaZ2lG2JdHWWNsTUS3e+ziRswCZrHOUn16htBLRvhxpxjvO\nrrck3L6pJehBRpH+PPIq0d+7JP21hYkv6iQgSHKE3oQx5DX0VHwVQPMNSx88eqNW\nztwKaNqADbY/apI9HYfEtSUbn77qo5/XyoNOyLJYwELyzZ+7euW5/2Nk3ZyofaM9\n15OGbN215AfJIOgqVmlWUq0QVHwlywr6qyEK18pi+sbu/9OLyrwgwpKDDQOHJ1fj\nle/VC0FYtjq9/dJbwCydqSwUmb/9Y4atMPdj7BkbqT5vpi5mm6F980OwrtepOcE=\n=KENL\n-----END PGP SIGNATURE-----\n", "payload": "tree 10205fa3dd3a4fd678ffd2f13061eb779f548ded\nparent 828caa80a942e9e923b75e4806da93c6e85f9752\nparent 33ec632381cb0732dd7db3836116e5e273ab908b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684330914 +0530\ncommitter GitHub <noreply@github.com> 1684330914 +0530\n\nRollup merge of #111557 - cjgillot:revert-111020, r=petrochenkov\n\nRevert \"Validate resolution for SelfCtor too.\"\n\nThis reverts commit 83453408a0ce91b9e3d3ae6e7f117b1fd28b487d.\n\nThat PR introduced a breaking change.\n\nFixes https://github.com/rust-lang/rust/issues/111541\nReopens https://github.com/rust-lang/rust/issues/89868\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff364b0082502dc967f1a08d39e0f338a68fe277", "html_url": "https://github.com/rust-lang/rust/commit/ff364b0082502dc967f1a08d39e0f338a68fe277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff364b0082502dc967f1a08d39e0f338a68fe277/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828caa80a942e9e923b75e4806da93c6e85f9752", "url": "https://api.github.com/repos/rust-lang/rust/commits/828caa80a942e9e923b75e4806da93c6e85f9752", "html_url": "https://github.com/rust-lang/rust/commit/828caa80a942e9e923b75e4806da93c6e85f9752"}, {"sha": "33ec632381cb0732dd7db3836116e5e273ab908b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ec632381cb0732dd7db3836116e5e273ab908b", "html_url": "https://github.com/rust-lang/rust/commit/33ec632381cb0732dd7db3836116e5e273ab908b"}], "stats": {"total": 72, "additions": 17, "deletions": 55}, "files": [{"sha": "59eda9db97f49f9fa4c8f9d87e4c1abe052ec94d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff364b0082502dc967f1a08d39e0f338a68fe277/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff364b0082502dc967f1a08d39e0f338a68fe277/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ff364b0082502dc967f1a08d39e0f338a68fe277", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 let sm = self.tcx.sess.source_map();\n                 let def_id = match outer_res {\n-                    Res::SelfTyParam { .. } | Res::SelfCtor(_) => {\n+                    Res::SelfTyParam { .. } => {\n                         err.span_label(span, \"can't use `Self` here\");\n                         return err;\n                     }"}, {"sha": "f065c4ddd2e1d3e2f8b20e2fcacf9c593a16b9ae", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff364b0082502dc967f1a08d39e0f338a68fe277/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff364b0082502dc967f1a08d39e0f338a68fe277/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=ff364b0082502dc967f1a08d39e0f338a68fe277", "patch": "@@ -1174,10 +1174,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _)\n-            | Res::SelfTyParam { .. }\n-            | Res::SelfTyAlias { .. }\n-            | Res::SelfCtor(_) => {\n+            Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n                         RibKind::Normal"}, {"sha": "b015397a5bc5f66928fbd81af2a12461c1722682", "filename": "tests/ui/self/self-ctor-inner-const.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/828caa80a942e9e923b75e4806da93c6e85f9752/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828caa80a942e9e923b75e4806da93c6e85f9752/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs?ref=828caa80a942e9e923b75e4806da93c6e85f9752", "patch": "@@ -1,17 +0,0 @@\n-// Verify that we ban usage of `Self` as constructor from inner items.\n-\n-struct S0<T>(T);\n-\n-impl<T> S0<T> {\n-    fn foo() {\n-        const C: S0<u8> = Self(0);\n-        //~^ ERROR can't use generic parameters from outer function\n-        fn bar() -> Self {\n-            //~^ ERROR can't use generic parameters from outer function\n-            Self(0)\n-            //~^ ERROR can't use generic parameters from outer function\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "7287c64c659b72fc1a5c628a96506dd96c3d2c58", "filename": "tests/ui/self/self-ctor-inner-const.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/828caa80a942e9e923b75e4806da93c6e85f9752/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/828caa80a942e9e923b75e4806da93c6e85f9752/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr?ref=828caa80a942e9e923b75e4806da93c6e85f9752", "patch": "@@ -1,33 +0,0 @@\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:7:27\n-   |\n-LL |         const C: S0<u8> = Self(0);\n-   |                           ^^^^\n-   |                           |\n-   |                           use of generic parameter from outer function\n-   |                           can't use `Self` here\n-\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:9:21\n-   |\n-LL | impl<T> S0<T> {\n-   | ---- `Self` type implicitly declared here, by this `impl`\n-...\n-LL |         fn bar() -> Self {\n-   |                     ^^^^\n-   |                     |\n-   |                     use of generic parameter from outer function\n-   |                     use a type here instead\n-\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:11:13\n-   |\n-LL |             Self(0)\n-   |             ^^^^\n-   |             |\n-   |             use of generic parameter from outer function\n-   |             can't use `Self` here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0401`."}, {"sha": "0ae7f8da4b4b9328fd62e187d875a2880d9d9379", "filename": "tests/ui/self/self-ctor-nongeneric.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff364b0082502dc967f1a08d39e0f338a68fe277/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff364b0082502dc967f1a08d39e0f338a68fe277/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs?ref=ff364b0082502dc967f1a08d39e0f338a68fe277", "patch": "@@ -0,0 +1,15 @@\n+// `Self` as a constructor is currently allowed when the outer item is not generic.\n+// check-pass\n+\n+struct S0(usize);\n+\n+impl S0 {\n+    fn foo() {\n+        const C: S0 = Self(0);\n+        fn bar() -> S0 {\n+            Self(0)\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}