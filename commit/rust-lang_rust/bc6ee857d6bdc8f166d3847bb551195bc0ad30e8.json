{"sha": "bc6ee857d6bdc8f166d3847bb551195bc0ad30e8", "node_id": "C_kwDOAAsO6NoAKGJjNmVlODU3ZDZiZGM4ZjE2NmQzODQ3YmI1NTExOTViYzBhZDMwZTg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-15T14:43:55Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-15T14:43:55Z"}, "message": "Merge branch 'sync_from_rust'", "tree": {"sha": "88e4d7dd16d168ae7700eb2433827d30cbe898bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e4d7dd16d168ae7700eb2433827d30cbe898bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6ee857d6bdc8f166d3847bb551195bc0ad30e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6ee857d6bdc8f166d3847bb551195bc0ad30e8", "html_url": "https://github.com/rust-lang/rust/commit/bc6ee857d6bdc8f166d3847bb551195bc0ad30e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6ee857d6bdc8f166d3847bb551195bc0ad30e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec0daa8f6d0a0e1c702f169abb6bf3eee198c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec0daa8f6d0a0e1c702f169abb6bf3eee198c67", "html_url": "https://github.com/rust-lang/rust/commit/dec0daa8f6d0a0e1c702f169abb6bf3eee198c67"}, {"sha": "7b3bd56ed99d5031f57b1aaf814117b2a7ce9c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3bd56ed99d5031f57b1aaf814117b2a7ce9c84", "html_url": "https://github.com/rust-lang/rust/commit/7b3bd56ed99d5031f57b1aaf814117b2a7ce9c84"}], "stats": {"total": 371, "additions": 292, "deletions": 79}, "files": [{"sha": "6ad3268e70dd229278b33c6b7e66e2697ace038e", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 292, "deletions": 79, "changes": 371, "blob_url": "https://github.com/rust-lang/rust/blob/bc6ee857d6bdc8f166d3847bb551195bc0ad30e8/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6ee857d6bdc8f166d3847bb551195bc0ad30e8/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=bc6ee857d6bdc8f166d3847bb551195bc0ad30e8", "patch": "@@ -4,13 +4,13 @@\n \n extern crate mini_core;\n \n-use mini_core::*;\n use mini_core::libc::*;\n+use mini_core::*;\n \n macro_rules! assert {\n     ($e:expr) => {\n         if !$e {\n-            panic(stringify!(! $e));\n+            panic(stringify!(!$e));\n         }\n     };\n }\n@@ -20,7 +20,7 @@ macro_rules! assert_eq {\n         if $l != $r {\n             panic(stringify!($l != $r));\n         }\n-    }\n+    };\n }\n \n #[lang = \"termination\"]\n@@ -96,9 +96,15 @@ fn start<T: Termination + 'static>(\n     _sigpipe: u8,\n ) -> isize {\n     if argc == 3 {\n-        unsafe { puts(*argv as *const i8); }\n-        unsafe { puts(*((argv as usize + intrinsics::size_of::<*const u8>()) as *const *const i8)); }\n-        unsafe { puts(*((argv as usize + 2 * intrinsics::size_of::<*const u8>()) as *const *const i8)); }\n+        unsafe {\n+            puts(*argv as *const i8);\n+        }\n+        unsafe {\n+            puts(*((argv as usize + intrinsics::size_of::<*const u8>()) as *const *const i8));\n+        }\n+        unsafe {\n+            puts(*((argv as usize + 2 * intrinsics::size_of::<*const u8>()) as *const *const i8));\n+        }\n     }\n \n     main().report() as isize\n@@ -107,7 +113,6 @@ fn start<T: Termination + 'static>(\n static mut NUM: u8 = 6 * 7;\n static NUM_REF: &'static u8 = unsafe { &NUM };\n \n-\n unsafe fn zeroed<T>() -> T {\n     let mut uninit = MaybeUninit { uninit: () };\n     intrinsics::write_bytes(&mut uninit.value.value as *mut T, 0, 1);\n@@ -144,10 +149,7 @@ extern \"C\" fn bool_struct_in_11(_arg0: bool_11) {}\n \n #[allow(unreachable_code)] // FIXME false positive\n fn main() {\n-    take_unique(Unique {\n-        pointer: unsafe { NonNull(1 as *mut ()) },\n-        _marker: PhantomData,\n-    });\n+    take_unique(Unique { pointer: unsafe { NonNull(1 as *mut ()) }, _marker: PhantomData });\n     take_f32(0.1);\n \n     call_return_u128_pair();\n@@ -202,17 +204,17 @@ fn main() {\n         assert_eq!(intrinsics::size_of_val(&0u32) as u8, 4);\n \n         assert_eq!(intrinsics::min_align_of::<u16>() as u8, 2);\n-        assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n+        assert_eq!(\n+            intrinsics::min_align_of_val(&a) as u8,\n+            intrinsics::min_align_of::<&str>() as u8\n+        );\n \n         assert!(!intrinsics::needs_drop::<u8>());\n         assert!(!intrinsics::needs_drop::<[u8]>());\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n         assert!(intrinsics::needs_drop::<NoisyDropUnsized>());\n \n-        Unique {\n-            pointer: NonNull(1 as *mut &str),\n-            _marker: PhantomData,\n-        } as Unique<dyn SomeTrait>;\n+        Unique { pointer: NonNull(1 as *mut &str), _marker: PhantomData } as Unique<dyn SomeTrait>;\n \n         struct MyDst<T: ?Sized>(T);\n \n@@ -238,19 +240,17 @@ fn main() {\n         }\n     }\n \n-    let _ = Box::new(NoisyDrop {\n-        text: \"Boxed outer got dropped!\\0\",\n-        inner: NoisyDropInner,\n-    }) as Box<dyn SomeTrait>;\n+    let _ = Box::new(NoisyDrop { text: \"Boxed outer got dropped!\\0\", inner: NoisyDropInner })\n+        as Box<dyn SomeTrait>;\n \n     const FUNC_REF: Option<fn()> = Some(main);\n     match FUNC_REF {\n-        Some(_) => {},\n+        Some(_) => {}\n         None => assert!(false),\n     }\n \n     match Ordering::Less {\n-        Ordering::Less => {},\n+        Ordering::Less => {}\n         _ => assert!(false),\n     }\n \n@@ -266,19 +266,21 @@ fn main() {\n \n     #[cfg(not(any(jit, windows)))]\n     {\n-        extern {\n+        extern \"C\" {\n             #[linkage = \"extern_weak\"]\n             static ABC: *const u8;\n         }\n \n         {\n-            extern {\n+            extern \"C\" {\n                 #[linkage = \"extern_weak\"]\n                 static ABC: *const u8;\n             }\n         }\n \n-        unsafe { assert_eq!(ABC as usize, 0); }\n+        unsafe {\n+            assert_eq!(ABC as usize, 0);\n+        }\n     }\n \n     &mut (|| Some(0 as *const ())) as &mut dyn FnMut() -> Option<*const ()>;\n@@ -398,13 +400,10 @@ extern \"C\" {\n         native: *mut pthread_t,\n         attr: *const pthread_attr_t,\n         f: extern \"C\" fn(_: *mut c_void) -> *mut c_void,\n-        value: *mut c_void\n+        value: *mut c_void,\n     ) -> c_int;\n \n-    fn pthread_join(\n-        native: pthread_t,\n-        value: *mut *mut c_void\n-    ) -> c_int;\n+    fn pthread_join(native: pthread_t, value: *mut *mut c_void) -> c_int;\n }\n \n type DWORD = u32;\n@@ -416,18 +415,15 @@ type HANDLE = *mut c_void;\n #[link(name = \"msvcrt\")]\n #[cfg(windows)]\n extern \"C\" {\n-    fn WaitForSingleObject(\n-        hHandle: LPVOID,\n-        dwMilliseconds: DWORD\n-    ) -> DWORD;\n+    fn WaitForSingleObject(hHandle: LPVOID, dwMilliseconds: DWORD) -> DWORD;\n \n     fn CreateThread(\n         lpThreadAttributes: LPVOID, // Technically LPSECURITY_ATTRIBUTES, but we don't use it anyway\n         dwStackSize: usize,\n         lpStartAddress: extern \"C\" fn(_: *mut c_void) -> *mut c_void,\n         lpParameter: LPVOID,\n         dwCreationFlags: DWORD,\n-        lpThreadId: LPDWORD\n+        lpThreadId: LPDWORD,\n     ) -> HANDLE;\n }\n \n@@ -453,9 +449,7 @@ impl Thread {\n                 assert!(false);\n             }\n \n-            Thread {\n-                handle: thread,\n-            }\n+            Thread { handle: thread }\n         }\n \n         #[cfg(windows)]\n@@ -466,13 +460,10 @@ impl Thread {\n                 assert!(false);\n             }\n \n-            Thread {\n-                handle,\n-            }\n+            Thread { handle }\n         }\n     }\n \n-\n     unsafe fn join(self) {\n         #[cfg(unix)]\n         {\n@@ -489,16 +480,15 @@ impl Thread {\n     }\n }\n \n-\n-\n-\n #[thread_local]\n #[cfg(not(jit))]\n static mut TLS: u8 = 42;\n \n #[cfg(not(jit))]\n extern \"C\" fn mutate_tls(_: *mut c_void) -> *mut c_void {\n-    unsafe { TLS = 0; }\n+    unsafe {\n+        TLS = 0;\n+    }\n     0 as *mut c_void\n }\n \n@@ -537,44 +527,267 @@ pub enum E1 {\n pub enum E2<X> {\n     V1 { f: bool },\n \n-    /*_00*/ _01(X), _02(X), _03(X), _04(X), _05(X), _06(X), _07(X),\n-    _08(X), _09(X), _0A(X), _0B(X), _0C(X), _0D(X), _0E(X), _0F(X),\n-    _10(X), _11(X), _12(X), _13(X), _14(X), _15(X), _16(X), _17(X),\n-    _18(X), _19(X), _1A(X), _1B(X), _1C(X), _1D(X), _1E(X), _1F(X),\n-    _20(X), _21(X), _22(X), _23(X), _24(X), _25(X), _26(X), _27(X),\n-    _28(X), _29(X), _2A(X), _2B(X), _2C(X), _2D(X), _2E(X), _2F(X),\n-    _30(X), _31(X), _32(X), _33(X), _34(X), _35(X), _36(X), _37(X),\n-    _38(X), _39(X), _3A(X), _3B(X), _3C(X), _3D(X), _3E(X), _3F(X),\n-    _40(X), _41(X), _42(X), _43(X), _44(X), _45(X), _46(X), _47(X),\n-    _48(X), _49(X), _4A(X), _4B(X), _4C(X), _4D(X), _4E(X), _4F(X),\n-    _50(X), _51(X), _52(X), _53(X), _54(X), _55(X), _56(X), _57(X),\n-    _58(X), _59(X), _5A(X), _5B(X), _5C(X), _5D(X), _5E(X), _5F(X),\n-    _60(X), _61(X), _62(X), _63(X), _64(X), _65(X), _66(X), _67(X),\n-    _68(X), _69(X), _6A(X), _6B(X), _6C(X), _6D(X), _6E(X), _6F(X),\n-    _70(X), _71(X), _72(X), _73(X), _74(X), _75(X), _76(X), _77(X),\n-    _78(X), _79(X), _7A(X), _7B(X), _7C(X), _7D(X), _7E(X), _7F(X),\n-    _80(X), _81(X), _82(X), _83(X), _84(X), _85(X), _86(X), _87(X),\n-    _88(X), _89(X), _8A(X), _8B(X), _8C(X), _8D(X), _8E(X), _8F(X),\n-    _90(X), _91(X), _92(X), _93(X), _94(X), _95(X), _96(X), _97(X),\n-    _98(X), _99(X), _9A(X), _9B(X), _9C(X), _9D(X), _9E(X), _9F(X),\n-    _A0(X), _A1(X), _A2(X), _A3(X), _A4(X), _A5(X), _A6(X), _A7(X),\n-    _A8(X), _A9(X), _AA(X), _AB(X), _AC(X), _AD(X), _AE(X), _AF(X),\n-    _B0(X), _B1(X), _B2(X), _B3(X), _B4(X), _B5(X), _B6(X), _B7(X),\n-    _B8(X), _B9(X), _BA(X), _BB(X), _BC(X), _BD(X), _BE(X), _BF(X),\n-    _C0(X), _C1(X), _C2(X), _C3(X), _C4(X), _C5(X), _C6(X), _C7(X),\n-    _C8(X), _C9(X), _CA(X), _CB(X), _CC(X), _CD(X), _CE(X), _CF(X),\n-    _D0(X), _D1(X), _D2(X), _D3(X), _D4(X), _D5(X), _D6(X), _D7(X),\n-    _D8(X), _D9(X), _DA(X), _DB(X), _DC(X), _DD(X), _DE(X), _DF(X),\n-    _E0(X), _E1(X), _E2(X), _E3(X), _E4(X), _E5(X), _E6(X), _E7(X),\n-    _E8(X), _E9(X), _EA(X), _EB(X), _EC(X), _ED(X), _EE(X), _EF(X),\n-    _F0(X), _F1(X), _F2(X), _F3(X), _F4(X), _F5(X), _F6(X), _F7(X),\n-    _F8(X), _F9(X), _FA(X), _FB(X), _FC(X), _FD(X), _FE(X), _FF(X),\n+    /*_00*/ _01(X),\n+    _02(X),\n+    _03(X),\n+    _04(X),\n+    _05(X),\n+    _06(X),\n+    _07(X),\n+    _08(X),\n+    _09(X),\n+    _0A(X),\n+    _0B(X),\n+    _0C(X),\n+    _0D(X),\n+    _0E(X),\n+    _0F(X),\n+    _10(X),\n+    _11(X),\n+    _12(X),\n+    _13(X),\n+    _14(X),\n+    _15(X),\n+    _16(X),\n+    _17(X),\n+    _18(X),\n+    _19(X),\n+    _1A(X),\n+    _1B(X),\n+    _1C(X),\n+    _1D(X),\n+    _1E(X),\n+    _1F(X),\n+    _20(X),\n+    _21(X),\n+    _22(X),\n+    _23(X),\n+    _24(X),\n+    _25(X),\n+    _26(X),\n+    _27(X),\n+    _28(X),\n+    _29(X),\n+    _2A(X),\n+    _2B(X),\n+    _2C(X),\n+    _2D(X),\n+    _2E(X),\n+    _2F(X),\n+    _30(X),\n+    _31(X),\n+    _32(X),\n+    _33(X),\n+    _34(X),\n+    _35(X),\n+    _36(X),\n+    _37(X),\n+    _38(X),\n+    _39(X),\n+    _3A(X),\n+    _3B(X),\n+    _3C(X),\n+    _3D(X),\n+    _3E(X),\n+    _3F(X),\n+    _40(X),\n+    _41(X),\n+    _42(X),\n+    _43(X),\n+    _44(X),\n+    _45(X),\n+    _46(X),\n+    _47(X),\n+    _48(X),\n+    _49(X),\n+    _4A(X),\n+    _4B(X),\n+    _4C(X),\n+    _4D(X),\n+    _4E(X),\n+    _4F(X),\n+    _50(X),\n+    _51(X),\n+    _52(X),\n+    _53(X),\n+    _54(X),\n+    _55(X),\n+    _56(X),\n+    _57(X),\n+    _58(X),\n+    _59(X),\n+    _5A(X),\n+    _5B(X),\n+    _5C(X),\n+    _5D(X),\n+    _5E(X),\n+    _5F(X),\n+    _60(X),\n+    _61(X),\n+    _62(X),\n+    _63(X),\n+    _64(X),\n+    _65(X),\n+    _66(X),\n+    _67(X),\n+    _68(X),\n+    _69(X),\n+    _6A(X),\n+    _6B(X),\n+    _6C(X),\n+    _6D(X),\n+    _6E(X),\n+    _6F(X),\n+    _70(X),\n+    _71(X),\n+    _72(X),\n+    _73(X),\n+    _74(X),\n+    _75(X),\n+    _76(X),\n+    _77(X),\n+    _78(X),\n+    _79(X),\n+    _7A(X),\n+    _7B(X),\n+    _7C(X),\n+    _7D(X),\n+    _7E(X),\n+    _7F(X),\n+    _80(X),\n+    _81(X),\n+    _82(X),\n+    _83(X),\n+    _84(X),\n+    _85(X),\n+    _86(X),\n+    _87(X),\n+    _88(X),\n+    _89(X),\n+    _8A(X),\n+    _8B(X),\n+    _8C(X),\n+    _8D(X),\n+    _8E(X),\n+    _8F(X),\n+    _90(X),\n+    _91(X),\n+    _92(X),\n+    _93(X),\n+    _94(X),\n+    _95(X),\n+    _96(X),\n+    _97(X),\n+    _98(X),\n+    _99(X),\n+    _9A(X),\n+    _9B(X),\n+    _9C(X),\n+    _9D(X),\n+    _9E(X),\n+    _9F(X),\n+    _A0(X),\n+    _A1(X),\n+    _A2(X),\n+    _A3(X),\n+    _A4(X),\n+    _A5(X),\n+    _A6(X),\n+    _A7(X),\n+    _A8(X),\n+    _A9(X),\n+    _AA(X),\n+    _AB(X),\n+    _AC(X),\n+    _AD(X),\n+    _AE(X),\n+    _AF(X),\n+    _B0(X),\n+    _B1(X),\n+    _B2(X),\n+    _B3(X),\n+    _B4(X),\n+    _B5(X),\n+    _B6(X),\n+    _B7(X),\n+    _B8(X),\n+    _B9(X),\n+    _BA(X),\n+    _BB(X),\n+    _BC(X),\n+    _BD(X),\n+    _BE(X),\n+    _BF(X),\n+    _C0(X),\n+    _C1(X),\n+    _C2(X),\n+    _C3(X),\n+    _C4(X),\n+    _C5(X),\n+    _C6(X),\n+    _C7(X),\n+    _C8(X),\n+    _C9(X),\n+    _CA(X),\n+    _CB(X),\n+    _CC(X),\n+    _CD(X),\n+    _CE(X),\n+    _CF(X),\n+    _D0(X),\n+    _D1(X),\n+    _D2(X),\n+    _D3(X),\n+    _D4(X),\n+    _D5(X),\n+    _D6(X),\n+    _D7(X),\n+    _D8(X),\n+    _D9(X),\n+    _DA(X),\n+    _DB(X),\n+    _DC(X),\n+    _DD(X),\n+    _DE(X),\n+    _DF(X),\n+    _E0(X),\n+    _E1(X),\n+    _E2(X),\n+    _E3(X),\n+    _E4(X),\n+    _E5(X),\n+    _E6(X),\n+    _E7(X),\n+    _E8(X),\n+    _E9(X),\n+    _EA(X),\n+    _EB(X),\n+    _EC(X),\n+    _ED(X),\n+    _EE(X),\n+    _EF(X),\n+    _F0(X),\n+    _F1(X),\n+    _F2(X),\n+    _F3(X),\n+    _F4(X),\n+    _F5(X),\n+    _F6(X),\n+    _F7(X),\n+    _F8(X),\n+    _F9(X),\n+    _FA(X),\n+    _FB(X),\n+    _FC(X),\n+    _FD(X),\n+    _FE(X),\n+    _FF(X),\n \n     V3,\n     V4,\n }\n \n-fn check_niche_behavior () {\n+fn check_niche_behavior() {\n     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n         intrinsics::abort();\n     }"}]}