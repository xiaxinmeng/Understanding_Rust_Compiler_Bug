{"sha": "dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDVjMzAyOWRkNmEzZTJkNDBmNWI5ODNjNWNlYWI5YTc5YzQyODc=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-21T10:28:58Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-21T10:28:58Z"}, "message": "Time type checking passes separately", "tree": {"sha": "a6f20509f461682faabf13e826ca2cc2902e5dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f20509f461682faabf13e826ca2cc2902e5dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "html_url": "https://github.com/rust-lang/rust/commit/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d923f7ddf467e5dfa1999329362c42c892bf3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d923f7ddf467e5dfa1999329362c42c892bf3d", "html_url": "https://github.com/rust-lang/rust/commit/64d923f7ddf467e5dfa1999329362c42c892bf3d"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "37f9bc7dd6f5400999b549caa88f3755548380b6", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "patch": "@@ -244,11 +244,9 @@ pub fn compile_rest(sess: Session, cfg: ast::crate_cfg,\n         let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n                                 region_map, rp_set, lang_items, crate);\n \n-        let (method_map, vtable_map) =\n-            time(time_passes, ~\"typechecking\", ||\n-                 typeck::check_crate(ty_cx,\n-                                     trait_map,\n-                                     crate));\n+        // passes are timed inside typeck\n+        let (method_map, vtable_map) = typeck::check_crate(\n+            ty_cx, trait_map, crate);\n \n         // These next two const passes can probably be merged\n         time(time_passes, ~\"const marking\", ||"}, {"sha": "1787c733ed54b804ca7128913d20e89080b0d28b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "patch": "@@ -53,6 +53,7 @@ use core::prelude::*;\n use middle::resolve;\n use middle::ty::{ty_param_substs_and_ty, vstore_uniq};\n use middle::ty;\n+use util::common::time;\n use util::ppaux;\n \n use core::result;\n@@ -329,17 +330,24 @@ pub fn check_crate(tcx: ty::ctxt,\n                    trait_map: resolve::TraitMap,\n                    crate: @ast::crate)\n                 -> (method_map, vtable_map) {\n+    let time_passes = tcx.sess.time_passes();\n     let ccx = @mut CrateCtxt {\n         trait_map: trait_map,\n         method_map: oldmap::HashMap(),\n         vtable_map: oldmap::HashMap(),\n         coherence_info: @coherence::CoherenceInfo(),\n         tcx: tcx\n     };\n-    collect::collect_item_types(ccx, crate);\n-    coherence::check_coherence(ccx, crate);\n \n-    check::check_item_types(ccx, crate);\n+    time(time_passes, ~\"type collecting\", ||\n+        collect::collect_item_types(ccx, crate));\n+\n+    time(time_passes, ~\"method resolution\", ||\n+        coherence::check_coherence(ccx, crate));\n+\n+    time(time_passes, ~\"type checking\", ||\n+        check::check_item_types(ccx, crate));\n+\n     check_for_main_fn(ccx);\n     tcx.sess.abort_if_errors();\n     (ccx.method_map, ccx.vtable_map)"}]}