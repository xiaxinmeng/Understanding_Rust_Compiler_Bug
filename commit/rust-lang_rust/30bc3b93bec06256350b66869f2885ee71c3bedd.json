{"sha": "30bc3b93bec06256350b66869f2885ee71c3bedd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmMzYjkzYmVjMDYyNTYzNTBiNjY4NjlmMjg4NWVlNzFjM2JlZGQ=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-02T18:16:20Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-02T18:16:20Z"}, "message": "rustfmt", "tree": {"sha": "87422290ad2ea1a85f1805a2e9431b2983f0974c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87422290ad2ea1a85f1805a2e9431b2983f0974c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30bc3b93bec06256350b66869f2885ee71c3bedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30bc3b93bec06256350b66869f2885ee71c3bedd", "html_url": "https://github.com/rust-lang/rust/commit/30bc3b93bec06256350b66869f2885ee71c3bedd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30bc3b93bec06256350b66869f2885ee71c3bedd/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c417b98f02004a10819111903882482b39e50d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/c417b98f02004a10819111903882482b39e50d17", "html_url": "https://github.com/rust-lang/rust/commit/c417b98f02004a10819111903882482b39e50d17"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "67cb19615d1d9eba5c4a27a30692dc846f1f906f", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/30bc3b93bec06256350b66869f2885ee71c3bedd/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bc3b93bec06256350b66869f2885ee71c3bedd/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=30bc3b93bec06256350b66869f2885ee71c3bedd", "patch": "@@ -23,8 +23,8 @@ use crate::{\n         scope::{ExprScopes, ScopeId},\n         BodySourceMap,\n     },\n-    ty::method_resolution::implements_trait,\n     ids::LocationCtx,\n+    ty::method_resolution::implements_trait,\n     AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HirDatabase, HirFileId,\n     MacroDef, Module, Name, Path, PerNs, Resolver, Static, Struct, Trait, Ty,\n };\n@@ -414,22 +414,25 @@ impl SourceAnalyzer {\n     /// This function is used in `.await` syntax completion.\n     pub fn impls_future(&self, db: &impl HirDatabase, ty: Ty) -> bool {\n         // Search for std::future::Future trait in scope\n-        let future_trait = self.resolver.traits_in_scope(db)\n+        let future_trait = self\n+            .resolver\n+            .traits_in_scope(db)\n             .into_iter()\n             .filter(|t| {\n-                let std = t.module(db).parent(db)\n-                    .and_then(|m| m\n-                        .name(db)\n-                        .and_then(|n| Some(n.to_string() == \"std\")))\n+                let std = t\n+                    .module(db)\n+                    .parent(db)\n+                    .and_then(|m| m.name(db).and_then(|n| Some(n.to_string() == \"std\")))\n                     .unwrap_or(false);\n \n-                let future = t.module(db).name(db)\n+                let future = t\n+                    .module(db)\n+                    .name(db)\n                     .and_then(|n| Some(n.to_string() == \"future\"))\n                     .unwrap_or(false);\n \n-                let future_trait = t.name(db)\n-                    .and_then(|n| Some(n.to_string() == \"Future\"))\n-                    .unwrap_or(false);\n+                let future_trait =\n+                    t.name(db).and_then(|n| Some(n.to_string() == \"Future\")).unwrap_or(false);\n \n                 std && future && future_trait\n             })"}, {"sha": "8731d6ba49037e739e8ec9c813020ee04c6bdd6f", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30bc3b93bec06256350b66869f2885ee71c3bedd/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bc3b93bec06256350b66869f2885ee71c3bedd/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=30bc3b93bec06256350b66869f2885ee71c3bedd", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     resolve::Resolver,\n     traits::TraitItem,\n     ty::primitive::{FloatBitness, UncertainFloatTy, UncertainIntTy},\n-    ty::{Ty, TypeCtor, traits::Solution},\n+    ty::{traits::Solution, Ty, TypeCtor},\n     Crate, Function, HirDatabase, Module, Name, Trait,\n };\n \n@@ -255,14 +255,20 @@ fn iterate_inherent_methods<T>(\n     None\n }\n \n-pub(crate) fn implements_trait(ty: &Canonical<Ty>, db: &impl HirDatabase, resolver: &Resolver, krate: Crate, trait_: Trait) -> bool {\n+pub(crate) fn implements_trait(\n+    ty: &Canonical<Ty>,\n+    db: &impl HirDatabase,\n+    resolver: &Resolver,\n+    krate: Crate,\n+    trait_: Trait,\n+) -> bool {\n     let env = lower::trait_env(db, resolver);\n     let goal = generic_implements_goal(db, env.clone(), trait_, ty.clone());\n     let solution = db.trait_solve(krate, goal);\n \n     if let Some(solution) = solution {\n         if let Solution::Unique(_) = solution {\n-            return true\n+            return true;\n         }\n     }\n "}, {"sha": "1dbbdb1bc132d38eef8bd60b345a144677585812", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30bc3b93bec06256350b66869f2885ee71c3bedd/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bc3b93bec06256350b66869f2885ee71c3bedd/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=30bc3b93bec06256350b66869f2885ee71c3bedd", "patch": "@@ -1,14 +1,14 @@\n use hir::{AdtDef, Ty, TypeCtor};\n \n-use crate::{completion::{\n-    completion_context::CompletionContext,\n-    completion_item::Completions,\n-}, CompletionItem};\n+use crate::completion::completion_item::{Builder, CompletionKind};\n+use crate::{\n+    completion::{completion_context::CompletionContext, completion_item::Completions},\n+    CompletionItem,\n+};\n use ra_syntax::ast::AstNode;\n+use ra_syntax::TextRange;\n use ra_text_edit::TextEditBuilder;\n use rustc_hash::FxHashSet;\n-use crate::completion::completion_item::{Builder, CompletionKind};\n-use ra_syntax::TextRange;\n \n /// Applies postfix edition but with CompletionKind::Reference\n fn postfix_reference(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {"}]}