{"sha": "c0ec385caca94e0940ae1680a5504acd12835657", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZWMzODVjYWNhOTRlMDk0MGFlMTY4MGE1NTA0YWNkMTI4MzU2NTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-07T15:27:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-07T15:27:49Z"}, "message": "Auto merge of #43099 - japaric:msp430, r=alexcrichton\n\nadd a built-in MSP430 target\n\nthe MSP430 backend has been enabled for a while but no target was added to rustc\nto encourage out of tree experimentation.\n\nWe believe the out of tree (custom) target has been iterated long enough and is\nstable enough for inclusion in the compiler. Kudos to @pftbest and @awygle for\nfixing several LLVM / codegen bugs this target had!\n\nThe target name chosen is a slight variation of the triple gcc uses, which is\nsimply `msp430-elf`. We picked `msp430-none-elf` to leave room for custom\ntargets that target some embedded OS running on MSP430 devices. (cf. the\ncustom `thumbv7m-tockos-eabi` target TockOS uses vs the built-in\n`thumbv7m-none-eabi`).\n\nThere's one expected change in the specification of the proposed target: the\n`asm_args` and `no_integrated_as` fields will change to their default values.\nOnce the LLVM backend gains the ability to directly produce MSP430 object files\nwe can stop depending on `msp430-elf-gcc` for producing object files; when that\noccurs the `asm` related fields will change. This change won't break existing\nuser code.\n\nr? @alexcrichton\ncc @brson", "tree": {"sha": "69345f8ad5bade3a2b0cf8a688613c73627be664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69345f8ad5bade3a2b0cf8a688613c73627be664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ec385caca94e0940ae1680a5504acd12835657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ec385caca94e0940ae1680a5504acd12835657", "html_url": "https://github.com/rust-lang/rust/commit/c0ec385caca94e0940ae1680a5504acd12835657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ec385caca94e0940ae1680a5504acd12835657/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703341051d857bba054f97c38f80d10aab44521c", "url": "https://api.github.com/repos/rust-lang/rust/commits/703341051d857bba054f97c38f80d10aab44521c", "html_url": "https://github.com/rust-lang/rust/commit/703341051d857bba054f97c38f80d10aab44521c"}, {"sha": "fc0275af24e7e35f8cb07543462255c7a4e9ce29", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0275af24e7e35f8cb07543462255c7a4e9ce29", "html_url": "https://github.com/rust-lang/rust/commit/fc0275af24e7e35f8cb07543462255c7a4e9ce29"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "edbbcf6f0b64701c3f1d33a219d61ba65e528170", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec385caca94e0940ae1680a5504acd12835657/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec385caca94e0940ae1680a5504acd12835657/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=c0ec385caca94e0940ae1680a5504acd12835657", "patch": "@@ -220,6 +220,8 @@ supported_targets! {\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),\n     (\"thumbv7em-none-eabi\", thumbv7em_none_eabi),\n     (\"thumbv7em-none-eabihf\", thumbv7em_none_eabihf),\n+\n+    (\"msp430-none-elf\", msp430_none_elf),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "588a8bde79b986b40b042efcc0305d29cc1651b9", "filename": "src/librustc_back/target/msp430_none_elf.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec385caca94e0940ae1680a5504acd12835657/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec385caca94e0940ae1680a5504acd12835657/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs?ref=c0ec385caca94e0940ae1680a5504acd12835657", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use {LinkerFlavor, PanicStrategy};\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"msp430-none-elf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"16\".to_string(),\n+        data_layout: \"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16\".to_string(),\n+        arch: \"msp430\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            executables: true,\n+\n+            // The LLVM backend currently can't generate object files. To\n+            // workaround this LLVM generates assembly files which then we feed\n+            // to gcc to get object files. For this reason we have a hard\n+            // dependency on this specific gcc.\n+            asm_args: vec![\"-mcpu=msp430\".to_string()],\n+            linker: \"msp430-elf-gcc\".to_string(),\n+            no_integrated_as: true,\n+\n+            // There are no atomic instructions available in the MSP430\n+            // instruction set\n+            max_atomic_width: Some(0),\n+\n+            // Because these devices have very little resources having an\n+            // unwinder is too onerous so we default to \"abort\" because the\n+            // \"unwind\" strategy is very rare.\n+            panic_strategy: PanicStrategy::Abort,\n+\n+            // Similarly, one almost always never wants to use relocatable\n+            // code because of the extra costs it involves.\n+            relocation_model: \"static\".to_string(),\n+\n+            .. Default::default( )\n+        }\n+    })\n+}"}]}