{"sha": "481e85cc5847b02458288cc068816625a21dcfad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MWU4NWNjNTg0N2IwMjQ1ODI4OGNjMDY4ODE2NjI1YTIxZGNmYWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-11T09:35:10Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-24T03:46:39Z"}, "message": "formatting", "tree": {"sha": "693e54480c6fa7fc3ebde8ba111da39d72291b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693e54480c6fa7fc3ebde8ba111da39d72291b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481e85cc5847b02458288cc068816625a21dcfad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481e85cc5847b02458288cc068816625a21dcfad", "html_url": "https://github.com/rust-lang/rust/commit/481e85cc5847b02458288cc068816625a21dcfad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481e85cc5847b02458288cc068816625a21dcfad/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "html_url": "https://github.com/rust-lang/rust/commit/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4"}], "stats": {"total": 279, "additions": 154, "deletions": 125}, "files": [{"sha": "7767ea847646081bb62b78725611bf90c831200a", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -422,8 +422,7 @@ fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n             // we will do comparison later, so here tries to canonicalize first\n             // to get the expected behavior.\n             p.canonicalize().unwrap_or(p)\n-        })\n-        .collect();\n+        }).collect();\n \n     Ok(Operation::Format {\n         files,"}, {"sha": "2d8234ef41e39a50e9dae1d79cbed67a40e6bd62", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -163,8 +163,7 @@ fn format_crate(\n             if verbosity == Verbosity::Verbose {\n                 println!(\"[{}] {:?}\", t.kind, t.path)\n             }\n-        })\n-        .map(|t| t.path)\n+        }).map(|t| t.path)\n         .collect();\n \n     run_rustfmt(&files, &rustfmt_args, verbosity)"}, {"sha": "439c0d188a269aeeb6627838b81ca9f5cd33d25f", "filename": "src/chains.rs", "status": "modified", "additions": 87, "deletions": 36, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -113,11 +113,7 @@ impl Rewrite for ChainItem {\n impl ChainItem {\n     // Rewrite the last element in the chain `expr`. E.g., given `a.b.c` we rewrite\n     // `.c` and any trailing `?`s.\n-    fn rewrite_postfix(\n-        &self,\n-        context: &RewriteContext,\n-        shape: Shape,\n-    ) -> Option<String> {\n+    fn rewrite_postfix(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let shape = shape.sub_width(self.tries)?;\n         let mut rewrite = match self.expr.node {\n             ast::ExprKind::MethodCall(ref segment, ref expressions) => {\n@@ -128,14 +124,22 @@ impl ChainItem {\n                     },\n                     _ => &[],\n                 };\n-                Self::rewrite_method_call(segment.ident, types, expressions, self.expr.span, context, shape)?\n+                Self::rewrite_method_call(\n+                    segment.ident,\n+                    types,\n+                    expressions,\n+                    self.expr.span,\n+                    context,\n+                    shape,\n+                )?\n             }\n             ast::ExprKind::Field(ref nested, ref field) => {\n-                let space = if Self::is_tup_field_access(&self.expr) && Self::is_tup_field_access(nested) {\n-                    \" \"\n-                } else {\n-                    \"\"\n-                };\n+                let space =\n+                    if Self::is_tup_field_access(&self.expr) && Self::is_tup_field_access(nested) {\n+                        \" \"\n+                    } else {\n+                        \"\"\n+                    };\n                 let result = format!(\"{}.{}\", space, field.name);\n                 if result.len() <= shape.width {\n                     result\n@@ -296,10 +300,20 @@ trait ChainFormatter {\n     //     .baz()\n     // ```\n     // If `bar` were not part of the root, then baz would be orphaned and 'float'.\n-    fn format_root(&mut self, parent: &ChainItem, context: &RewriteContext, shape: Shape) -> Option<()>;\n+    fn format_root(\n+        &mut self,\n+        parent: &ChainItem,\n+        context: &RewriteContext,\n+        shape: Shape,\n+    ) -> Option<()>;\n     fn child_shape(&self, context: &RewriteContext, shape: Shape) -> Shape;\n     fn format_children(&mut self, context: &RewriteContext, child_shape: Shape) -> Option<()>;\n-    fn format_last_child(&mut self, context: &RewriteContext, shape: Shape, child_shape: Shape) -> Option<()>;\n+    fn format_last_child(\n+        &mut self,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        child_shape: Shape,\n+    ) -> Option<()>;\n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String>;\n     // Returns `Some` if the chain is only a root, None otherwise.\n     fn pure_root(&mut self) -> Option<String>;\n@@ -309,7 +323,7 @@ trait ChainFormatter {\n // formatters can delegate much behaviour to `ChainFormatterShared`.\n struct ChainFormatterShared<'a> {\n     // The current working set of child items.\n-    children: &'a[ChainItem],\n+    children: &'a [ChainItem],\n     // The current rewrites of items (includes trailing `?`s, but not any way to\n     // connect the rewrites together).\n     rewrites: Vec<String>,\n@@ -320,7 +334,7 @@ struct ChainFormatterShared<'a> {\n     child_count: usize,\n }\n \n-impl <'a> ChainFormatterShared<'a> {\n+impl<'a> ChainFormatterShared<'a> {\n     fn new(chain: &'a Chain) -> ChainFormatterShared<'a> {\n         ChainFormatterShared {\n             children: &chain.children,\n@@ -371,9 +385,16 @@ impl <'a> ChainFormatterShared<'a> {\n     //     result\n     // })\n     // ```\n-    fn format_last_child(&mut self, may_extend: bool, context: &RewriteContext, shape: Shape, child_shape: Shape) -> Option<()> {\n+    fn format_last_child(\n+        &mut self,\n+        may_extend: bool,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        child_shape: Shape,\n+    ) -> Option<()> {\n         let last = &self.children[0];\n-        let extendable = may_extend && last_line_extendable(&self.rewrites[self.rewrites.len() - 1]);\n+        let extendable =\n+            may_extend && last_line_extendable(&self.rewrites[self.rewrites.len() - 1]);\n \n         // Total of all items excluding the last.\n         let almost_total = if extendable {\n@@ -387,7 +408,8 @@ impl <'a> ChainFormatterShared<'a> {\n             min(shape.width, context.config.width_heuristics().chain_width)\n         }.saturating_sub(almost_total);\n \n-        let all_in_one_line = self.rewrites.iter().all(|s| !s.contains('\\n')) && one_line_budget > 0;\n+        let all_in_one_line =\n+            self.rewrites.iter().all(|s| !s.contains('\\n')) && one_line_budget > 0;\n         let last_shape = if all_in_one_line {\n             shape.sub_width(last.tries)?\n         } else {\n@@ -413,7 +435,8 @@ impl <'a> ChainFormatterShared<'a> {\n                         // layout, just by looking at the overflowed rewrite. Now we rewrite the\n                         // last child on its own line, and compare two rewrites to choose which is\n                         // better.\n-                        let last_shape = child_shape.sub_width(shape.rhs_overhead(context.config) + last.tries)?;\n+                        let last_shape = child_shape\n+                            .sub_width(shape.rhs_overhead(context.config) + last.tries)?;\n                         match last.rewrite_postfix(context, last_shape) {\n                             Some(ref new_rw) if !could_fit_single_line => {\n                                 last_subexpr_str = Some(new_rw.clone());\n@@ -440,7 +463,12 @@ impl <'a> ChainFormatterShared<'a> {\n         Some(())\n     }\n \n-    fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape, block_like_iter: impl Iterator<Item=bool>) -> Option<String> {\n+    fn join_rewrites(\n+        &self,\n+        context: &RewriteContext,\n+        child_shape: Shape,\n+        block_like_iter: impl Iterator<Item = bool>,\n+    ) -> Option<String> {\n         let connector = if self.fits_single_line {\n             // Yay, we can put everything on one line.\n             Cow::from(\"\")\n@@ -473,7 +501,7 @@ struct ChainFormatterBlock<'a> {\n     is_block_like: Vec<bool>,\n }\n \n-impl <'a> ChainFormatterBlock<'a> {\n+impl<'a> ChainFormatterBlock<'a> {\n     fn new(chain: &'a Chain) -> ChainFormatterBlock<'a> {\n         ChainFormatterBlock {\n             shared: ChainFormatterShared::new(chain),\n@@ -482,8 +510,13 @@ impl <'a> ChainFormatterBlock<'a> {\n     }\n }\n \n-impl <'a> ChainFormatter for ChainFormatterBlock<'a> {\n-    fn format_root(&mut self, parent: &ChainItem, context: &RewriteContext, shape: Shape) -> Option<()> {\n+impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n+    fn format_root(\n+        &mut self,\n+        parent: &ChainItem,\n+        context: &RewriteContext,\n+        shape: Shape,\n+    ) -> Option<()> {\n         let mut root_rewrite: String = parent.rewrite(context, shape)?;\n \n         let mut root_ends_with_block = is_block_expr(context, &parent.expr, &root_rewrite);\n@@ -520,18 +553,26 @@ impl <'a> ChainFormatter for ChainFormatterBlock<'a> {\n     fn format_children(&mut self, context: &RewriteContext, child_shape: Shape) -> Option<()> {\n         for item in self.shared.children[1..].iter().rev() {\n             let rewrite = item.rewrite_postfix(context, child_shape)?;\n-            self.is_block_like.push(is_block_expr(context, &item.expr, &rewrite));\n+            self.is_block_like\n+                .push(is_block_expr(context, &item.expr, &rewrite));\n             self.shared.rewrites.push(rewrite);\n         }\n         Some(())\n     }\n \n-    fn format_last_child(&mut self, context: &RewriteContext, shape: Shape, child_shape: Shape) -> Option<()> {\n-        self.shared.format_last_child(true, context, shape, child_shape)\n+    fn format_last_child(\n+        &mut self,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        child_shape: Shape,\n+    ) -> Option<()> {\n+        self.shared\n+            .format_last_child(true, context, shape, child_shape)\n     }\n \n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n-        self.shared.join_rewrites(context, child_shape, self.is_block_like.iter().cloned())\n+        self.shared\n+            .join_rewrites(context, child_shape, self.is_block_like.iter().cloned())\n     }\n \n     fn pure_root(&mut self) -> Option<String> {\n@@ -552,8 +593,13 @@ impl<'a> ChainFormatterVisual<'a> {\n     }\n }\n \n-impl <'a> ChainFormatter for ChainFormatterVisual<'a> {\n-    fn format_root(&mut self, parent: &ChainItem, context: &RewriteContext, shape: Shape) -> Option<()> {\n+impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n+    fn format_root(\n+        &mut self,\n+        parent: &ChainItem,\n+        context: &RewriteContext,\n+        shape: Shape,\n+    ) -> Option<()> {\n         // Determines if we can continue formatting a given expression on the same line.\n         fn is_continuable(expr: &ast::Expr) -> bool {\n             match expr.node {\n@@ -596,12 +642,19 @@ impl <'a> ChainFormatter for ChainFormatterVisual<'a> {\n         Some(())\n     }\n \n-    fn format_last_child(&mut self, context: &RewriteContext, shape: Shape, child_shape: Shape) -> Option<()> {\n-        self.shared.format_last_child(false, context, shape, child_shape)\n+    fn format_last_child(\n+        &mut self,\n+        context: &RewriteContext,\n+        shape: Shape,\n+        child_shape: Shape,\n+    ) -> Option<()> {\n+        self.shared\n+            .format_last_child(false, context, shape, child_shape)\n     }\n \n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n-        self.shared.join_rewrites(context, child_shape, iter::repeat(false))\n+        self.shared\n+            .join_rewrites(context, child_shape, iter::repeat(false))\n     }\n \n     fn pure_root(&mut self) -> Option<String> {\n@@ -613,9 +666,7 @@ impl <'a> ChainFormatter for ChainFormatterVisual<'a> {\n // parens, braces, and brackets in its idiomatic formatting.\n fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool {\n     match expr.node {\n-        ast::ExprKind::Mac(..)\n-        | ast::ExprKind::Call(..)\n-        | ast::ExprKind::MethodCall(..) => {\n+        ast::ExprKind::Mac(..) | ast::ExprKind::Call(..) | ast::ExprKind::MethodCall(..) => {\n             context.use_block_indent() && repr.contains('\\n')\n         }\n         ast::ExprKind::Struct(..)\n@@ -631,7 +682,7 @@ fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, ref expr, _) \n+        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n         _ => false,"}, {"sha": "128e1dc8e0b65328c8535cbe3ea3e0da92de95ee", "filename": "src/closures.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -198,8 +198,7 @@ fn rewrite_closure_expr(\n             } else {\n                 Some(rw)\n             }\n-        })\n-        .map(|rw| format!(\"{} {}\", prefix, rw))\n+        }).map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n // Rewrite closure whose body is block.\n@@ -376,11 +375,8 @@ where\n                 .map(|e| match e.node {\n                     ast::ExprKind::Closure(..) => true,\n                     _ => false,\n-                })\n-                .unwrap_or(false)\n-        })\n-        .count()\n-        > 1\n+                }).unwrap_or(false)\n+        }).count() > 1\n }\n \n fn is_block_closure_forced(context: &RewriteContext, expr: &ast::Expr) -> bool {"}, {"sha": "ed83a3925b005ebe30fe35b24db76651fce81ab7", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -348,8 +348,7 @@ fn rewrite_comment_inner(\n             }\n \n             line\n-        })\n-        .map(|s| left_trim_comment_line(s, &style))\n+        }).map(|s| left_trim_comment_line(s, &style))\n         .map(|(line, has_leading_whitespace)| {\n             if orig.starts_with(\"/*\") && line_breaks == 0 {\n                 (\n@@ -517,8 +516,7 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n             } else {\n                 line\n             }\n-        })\n-        .collect::<Vec<_>>()\n+        }).collect::<Vec<_>>()\n         .join(\"\\n\")\n }\n \n@@ -606,8 +604,7 @@ fn light_rewrite_comment(\n             };\n             // Preserve markdown's double-space line break syntax in doc comment.\n             trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n-        })\n-        .collect();\n+        }).collect();\n     Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))\n }\n \n@@ -1341,8 +1338,7 @@ mod test {\n             .filter_map(|(s, c)| match s {\n                 FullCodeCharKind::Normal | FullCodeCharKind::InString => Some(c),\n                 _ => None,\n-            })\n-            .collect()\n+            }).collect()\n     }\n \n     #[test]"}, {"sha": "c48f9a4d72728e46eb15af8e00824b9c19652640", "filename": "src/config/options.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -322,8 +322,7 @@ impl IgnoreList {\n                     path.push(s);\n                     path\n                 }\n-            })\n-            .collect();\n+            }).collect();\n     }\n \n     fn skip_file_inner(&self, file: &Path) -> bool {"}, {"sha": "6814b91e0532ebb7592bc644eb38034fdd18265d", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -1212,8 +1212,7 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                             new_indent.to_string(context.config),\n                             line.trim_left()\n                         )\n-                    })\n-                    .collect::<Vec<_>>()\n+                    }).collect::<Vec<_>>()\n                     .join(\"\\n\")\n                     .trim_left(),\n             );"}, {"sha": "d47827ab55e158da279a45217f88029661670ba9", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -46,8 +46,7 @@ fn prune_files(files: Vec<&str>) -> Vec<&str> {\n                 return true;\n             }\n             pruned_prefixes.iter().all(|pp| !f.starts_with(pp))\n-        })\n-        .collect()\n+        }).collect()\n }\n \n fn git_diff(commits: &str) -> String {"}, {"sha": "93f2ac8867a0c9a64162f9a386df9d9205c2af25", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -344,8 +344,7 @@ impl UseTree {\n                         .zip(items.into_iter())\n                         .map(|(t, list_item)| {\n                             Self::from_ast(context, &t.0, Some(list_item), None, None, None)\n-                        })\n-                        .collect(),\n+                        }).collect(),\n                 ));\n             }\n             UseTreeKind::Simple(ref rename, ..) => {"}, {"sha": "23338435d9ac9bd9afb541ddea272f062b4a589c", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -1669,7 +1669,7 @@ fn rewrite_static(\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n         ).and_then(|res| recover_comment_removed(res, static_parts.span, context))\n-            .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n+        .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n     } else {\n         Some(format!(\"{}{};\", prefix, ty_str))\n     }\n@@ -2783,17 +2783,15 @@ impl Rewrite for ast::ForeignItem {\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n         let item_str = match self.node {\n-            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => {\n-                rewrite_fn_base(\n-                    context,\n-                    shape.indent,\n-                    self.ident,\n-                    &FnSig::new(fn_decl, generics, self.vis.clone()),\n-                    span,\n-                    false,\n-                    false,\n-                ).map(|(s, _)| format!(\"{};\", s))\n-            }\n+            ast::ForeignItemKind::Fn(ref fn_decl, ref generics) => rewrite_fn_base(\n+                context,\n+                shape.indent,\n+                self.ident,\n+                &FnSig::new(fn_decl, generics, self.vis.clone()),\n+                span,\n+                false,\n+                false,\n+            ).map(|(s, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here."}, {"sha": "91c29958ba166818c597b3a7ccc79edde2dea511", "filename": "src/macros.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -1115,26 +1115,25 @@ fn indent_macro_snippet(\n             };\n             trimmed_lines.push((trimmed, line, prefix_space_width));\n             prefix_space_width\n-        })\n-        .min()?;\n+        }).min()?;\n \n     Some(\n-        first_line + \"\\n\" + &trimmed_lines\n-            .iter()\n-            .map(\n-                |&(trimmed, ref line, prefix_space_width)| match prefix_space_width {\n-                    _ if !trimmed => line.to_owned(),\n-                    Some(original_indent_width) => {\n-                        let new_indent_width = indent.width() + original_indent_width\n-                            .saturating_sub(min_prefix_space_width);\n-                        let new_indent = Indent::from_width(context.config, new_indent_width);\n-                        format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n-                    }\n-                    None => String::new(),\n-                },\n-            )\n-            .collect::<Vec<_>>()\n-            .join(\"\\n\"),\n+        first_line + \"\\n\"\n+            + &trimmed_lines\n+                .iter()\n+                .map(\n+                    |&(trimmed, ref line, prefix_space_width)| match prefix_space_width {\n+                        _ if !trimmed => line.to_owned(),\n+                        Some(original_indent_width) => {\n+                            let new_indent_width = indent.width()\n+                                + original_indent_width.saturating_sub(min_prefix_space_width);\n+                            let new_indent = Indent::from_width(context.config, new_indent_width);\n+                            format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n+                        }\n+                        None => String::new(),\n+                    },\n+                ).collect::<Vec<_>>()\n+                .join(\"\\n\"),\n     )\n }\n \n@@ -1296,8 +1295,7 @@ impl MacroBranch {\n                     }\n                     (s + l + \"\\n\", !kind.is_string() || l.ends_with('\\\\'))\n                 },\n-            )\n-            .0;\n+            ).0;\n \n         // Undo our replacement of macro variables.\n         // FIXME: this could be *much* more efficient."}, {"sha": "df32ab47b2fd5fe454f2ccd73d3fcb5c43f2ea10", "filename": "src/reorder.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -151,8 +151,7 @@ fn rewrite_reorderable_items(\n                 .map(|use_tree| ListItem {\n                     item: use_tree.rewrite_top_level(context, nested_shape),\n                     ..use_tree.list_item.unwrap_or_else(ListItem::empty)\n-                })\n-                .collect();\n+                }).collect();\n \n             wrap_reorderable_items(context, &item_vec, nested_shape)\n         }\n@@ -242,15 +241,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let item_length = items\n             .iter()\n             .take_while(|ppi| {\n-                item_kind.is_same_item_kind(&***ppi)\n-                    && (!in_group || {\n-                        let current = self.codemap.lookup_line_range(ppi.span());\n-                        let in_same_group = current.lo < last.hi + 2;\n-                        last = current;\n-                        in_same_group\n-                    })\n-            })\n-            .count();\n+                item_kind.is_same_item_kind(&***ppi) && (!in_group || {\n+                    let current = self.codemap.lookup_line_range(ppi.span());\n+                    let in_same_group = current.lo < last.hi + 2;\n+                    last = current;\n+                    in_same_group\n+                })\n+            }).count();\n         let items = &items[..item_length];\n \n         let at_least_one_in_file_lines = items"}, {"sha": "2a331eec19aef4a651b72a9b1d2fb147a7332f44", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -193,13 +193,15 @@ where\n     W: Write,\n {\n     for mismatch in diff {\n-        let (num_removed, num_added) = mismatch.lines.iter().fold((0, 0), |(rem, add), line| {\n-            match *line {\n-                DiffLine::Context(_) => panic!(\"No Context expected\"),\n-                DiffLine::Expected(_) => (rem, add + 1),\n-                DiffLine::Resulting(_) => (rem + 1, add),\n-            }\n-        });\n+        let (num_removed, num_added) =\n+            mismatch\n+                .lines\n+                .iter()\n+                .fold((0, 0), |(rem, add), line| match *line {\n+                    DiffLine::Context(_) => panic!(\"No Context expected\"),\n+                    DiffLine::Expected(_) => (rem, add + 1),\n+                    DiffLine::Resulting(_) => (rem + 1, add),\n+                });\n         // Write a header with enough information to separate the modified lines.\n         writeln!(\n             out,"}, {"sha": "ba4607be37ce34532a45f3379ec666c632e06a4e", "filename": "src/test/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -514,8 +514,7 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n                         .to_owned(),\n                 )\n             })\n-        })\n-        .collect()\n+        }).collect()\n }\n \n // Compare output to input.\n@@ -884,8 +883,8 @@ fn configuration_snippet_tests() {\n             fs::File::open(Path::new(CONFIGURATIONS_FILE_NAME))\n                 .expect(&format!(\"Couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n         ).lines()\n-            .map(|l| l.unwrap())\n-            .enumerate();\n+        .map(|l| l.unwrap())\n+        .enumerate();\n         let mut code_blocks: Vec<ConfigCodeBlock> = Vec::new();\n         let mut hash_set = Config::hash_set();\n \n@@ -961,5 +960,5 @@ fn verify_check_works() {\n         \"--check\",\n         temp_file.path.to_str().unwrap(),\n     ]).succeeds()\n-        .unwrap();\n+    .unwrap();\n }"}, {"sha": "d6e4001eacfcb5aaef4c010874f07b53890702ec", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -548,7 +548,8 @@ impl Rewrite for ast::GenericParam {\n             };\n             result.push_str(eq_str);\n             let budget = shape.width.checked_sub(result.len())?;\n-            let rewrite = def.rewrite(context, Shape::legacy(budget, shape.indent + result.len()))?;\n+            let rewrite =\n+                def.rewrite(context, Shape::legacy(budget, shape.indent + result.len()))?;\n             result.push_str(&rewrite);\n         }\n \n@@ -793,8 +794,7 @@ fn rewrite_lifetime_param(\n         .filter(|p| match p.kind {\n             ast::GenericParamKind::Lifetime => true,\n             _ => false,\n-        })\n-        .map(|lt| lt.rewrite(context, shape))\n+        }).map(|lt| lt.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?\n         .join(\", \");\n     if result.is_empty() {"}, {"sha": "ead5719f61f887bb03ce1963ea7fdae3ce4ab3a2", "filename": "src/vertical.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/481e85cc5847b02458288cc068816625a21dcfad/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e85cc5847b02458288cc068816625a21dcfad/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=481e85cc5847b02458288cc068816625a21dcfad", "patch": "@@ -200,14 +200,12 @@ fn struct_field_prefix_max_min_width<T: AlignedItem>(\n                     Some(field_str.len())\n                 }\n             })\n-        })\n-        .fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n+        }).fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n             (Some((max_len, min_len)), Some(len)) => {\n                 Some((cmp::max(max_len, len), cmp::min(min_len, len)))\n             }\n             _ => None,\n-        })\n-        .unwrap_or((0, 0))\n+        }).unwrap_or((0, 0))\n }\n \n fn rewrite_aligned_items_inner<T: AlignedItem>("}]}