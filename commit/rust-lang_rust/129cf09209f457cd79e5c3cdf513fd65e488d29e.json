{"sha": "129cf09209f457cd79e5c3cdf513fd65e488d29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOWNmMDkyMDlmNDU3Y2Q3OWU1YzNjZGY1MTNmZDY1ZTQ4OGQyOWU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-01T06:47:49Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-01T06:47:49Z"}, "message": "Make libtime fields public", "tree": {"sha": "49a63e29c9ae7673b2e730e1998fde8444c4bd36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a63e29c9ae7673b2e730e1998fde8444c4bd36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/129cf09209f457cd79e5c3cdf513fd65e488d29e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/129cf09209f457cd79e5c3cdf513fd65e488d29e", "html_url": "https://github.com/rust-lang/rust/commit/129cf09209f457cd79e5c3cdf513fd65e488d29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/129cf09209f457cd79e5c3cdf513fd65e488d29e/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "html_url": "https://github.com/rust-lang/rust/commit/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "0ed8a9c8d454ba8b6624ab483ab254e691a4cc60", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/129cf09209f457cd79e5c3cdf513fd65e488d29e/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129cf09209f457cd79e5c3cdf513fd65e488d29e/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=129cf09209f457cd79e5c3cdf513fd65e488d29e", "patch": "@@ -67,7 +67,7 @@ mod imp {\n \n /// A record specifying a time value in seconds and nanoseconds.\n #[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, Encodable, Decodable, Show)]\n-pub struct Timespec { sec: i64, nsec: i32 }\n+pub struct Timespec { pub sec: i64, pub nsec: i32 }\n /*\n  * Timespec assumes that pre-epoch Timespecs have negative sec and positive\n  * nsec fields. Darwin's and Linux's struct timespec functions handle pre-\n@@ -191,46 +191,46 @@ pub fn tzset() {\n #[deriving(Clone, Eq, Encodable, Decodable, Show)]\n pub struct Tm {\n     /// Seconds after the minute \u2013 [0, 60]\n-    tm_sec: i32,\n+    pub tm_sec: i32,\n \n     /// Minutes after the hour \u2013 [0, 59]\n-    tm_min: i32,\n+    pub tm_min: i32,\n \n     /// Hours after midnight \u2013 [0, 23]\n-    tm_hour: i32,\n+    pub tm_hour: i32,\n \n     /// Day of the month \u2013 [1, 31]\n-    tm_mday: i32,\n+    pub tm_mday: i32,\n \n     /// Months since January \u2013 [0, 11]\n-    tm_mon: i32,\n+    pub tm_mon: i32,\n \n     /// Years since 1900\n-    tm_year: i32,\n+    pub tm_year: i32,\n \n     /// Days since Sunday \u2013 [0, 6]. 0 = Sunday, 1 = Monday, \u2026, 6 = Saturday.\n-    tm_wday: i32,\n+    pub tm_wday: i32,\n \n     /// Days since January 1 \u2013 [0, 365]\n-    tm_yday: i32,\n+    pub tm_yday: i32,\n \n     /// Daylight Saving Time flag.\n     ///\n     /// This value is positive if Daylight Saving Time is in effect, zero if Daylight Saving Time\n     /// is not in effect, and negative if this information is not available.\n-    tm_isdst: i32,\n+    pub tm_isdst: i32,\n \n     /// Identifies the time zone that was used to compute this broken-down time value, including any\n     /// adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\n     /// for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.\n-    tm_gmtoff: i32,\n+    pub tm_gmtoff: i32,\n \n     /// Abbreviated name for the time zone that was used to compute this broken-down time value.\n     /// For example, U.S. Pacific Daylight Time is \"PDT\".\n-    tm_zone: ~str,\n+    pub tm_zone: ~str,\n \n     /// Nanoseconds after the second \u2013 [0, 10<sup>9</sup> - 1]\n-    tm_nsec: i32,\n+    pub tm_nsec: i32,\n }\n \n pub fn empty_tm() -> Tm {"}]}