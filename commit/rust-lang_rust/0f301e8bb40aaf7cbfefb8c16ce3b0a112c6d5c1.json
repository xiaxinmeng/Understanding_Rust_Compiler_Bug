{"sha": "0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzAxZThiYjQwYWFmN2NiZmVmYjhjMTZjZTNiMGExMTJjNmQ1YzE=", "commit": {"author": {"name": "mental", "email": "m3nta1@yahoo.com", "date": "2020-09-01T08:46:48Z"}, "committer": {"name": "mental", "email": "m3nta1@yahoo.com", "date": "2020-09-01T08:46:48Z"}, "message": "Removed [inline] and copied over comments from Arc::new_cyclic", "tree": {"sha": "b8861bfd94f9a9ac5aaff5a422250c5d2d61c344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8861bfd94f9a9ac5aaff5a422250c5d2d61c344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "html_url": "https://github.com/rust-lang/rust/commit/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1/comments", "author": {"login": "mental32", "id": 27660514, "node_id": "MDQ6VXNlcjI3NjYwNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/27660514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mental32", "html_url": "https://github.com/mental32", "followers_url": "https://api.github.com/users/mental32/followers", "following_url": "https://api.github.com/users/mental32/following{/other_user}", "gists_url": "https://api.github.com/users/mental32/gists{/gist_id}", "starred_url": "https://api.github.com/users/mental32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mental32/subscriptions", "organizations_url": "https://api.github.com/users/mental32/orgs", "repos_url": "https://api.github.com/users/mental32/repos", "events_url": "https://api.github.com/users/mental32/events{/privacy}", "received_events_url": "https://api.github.com/users/mental32/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mental32", "id": 27660514, "node_id": "MDQ6VXNlcjI3NjYwNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/27660514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mental32", "html_url": "https://github.com/mental32", "followers_url": "https://api.github.com/users/mental32/followers", "following_url": "https://api.github.com/users/mental32/following{/other_user}", "gists_url": "https://api.github.com/users/mental32/gists{/gist_id}", "starred_url": "https://api.github.com/users/mental32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mental32/subscriptions", "organizations_url": "https://api.github.com/users/mental32/orgs", "repos_url": "https://api.github.com/users/mental32/repos", "events_url": "https://api.github.com/users/mental32/events{/privacy}", "received_events_url": "https://api.github.com/users/mental32/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42fb27001e07e832cb40604c7daeaa6aada07675", "url": "https://api.github.com/repos/rust-lang/rust/commits/42fb27001e07e832cb40604c7daeaa6aada07675", "html_url": "https://github.com/rust-lang/rust/commit/42fb27001e07e832cb40604c7daeaa6aada07675"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "1a2dfd28882615e91152089ebb6e320809e794e8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "patch": "@@ -329,9 +329,10 @@ impl<T> Rc<T> {\n     /// to upgrade the weak reference before this function returns will result\n     /// in a `None` value. However, the weak reference may be cloned freely and\n     /// stored for use at a later time.\n-    #[inline]\n     #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n+        // Construct the inner in the \"uninitialized\" state with a single\n+        // weak reference.\n         let uninit_ptr: NonNull<_> = Box::leak(box RcBox {\n             strong: Cell::new(0),\n             weak: Cell::new(1),\n@@ -343,6 +344,12 @@ impl<T> Rc<T> {\n \n         let weak = Weak { ptr: init_ptr };\n \n+        // It's important we don't give up ownership of the weak pointer, or\n+        // else the memory might be freed by the time `data_fn` returns. If\n+        // we really wanted to pass ownership, we could create an additional\n+        // weak pointer for ourselves, but this would result in additional\n+        // updates to the weak reference count which might not be necessary\n+        // otherwise.\n         let data = data_fn(&weak);\n \n         unsafe {\n@@ -355,6 +362,9 @@ impl<T> Rc<T> {\n         }\n \n         let strong = Rc::from_inner(init_ptr);\n+\n+        // Strong references should collectively own a shared weak reference,\n+        // so don't run the destructor for our old weak reference.\n         mem::forget(weak);\n         strong\n     }"}]}