{"sha": "02c234cc52be6b655822d86f22751d57f1005822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzIzNGNjNTJiZTZiNjU1ODIyZDg2ZjIyNzUxZDU3ZjEwMDU4MjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-03T02:45:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-03T16:31:45Z"}, "message": "rollup merge of #18505 : bkoropoff/issue-18487", "tree": {"sha": "cc4d4b2479dbaf2ba69d490b6471d0bb44bd920d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc4d4b2479dbaf2ba69d490b6471d0bb44bd920d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c234cc52be6b655822d86f22751d57f1005822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c234cc52be6b655822d86f22751d57f1005822", "html_url": "https://github.com/rust-lang/rust/commit/02c234cc52be6b655822d86f22751d57f1005822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c234cc52be6b655822d86f22751d57f1005822/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82efef76c3610d1c8ff986216ff1d3f3765b1f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/82efef76c3610d1c8ff986216ff1d3f3765b1f22", "html_url": "https://github.com/rust-lang/rust/commit/82efef76c3610d1c8ff986216ff1d3f3765b1f22"}, {"sha": "205f84f13c69dd20caa6ecb6fc1bbed9171f0703", "url": "https://api.github.com/repos/rust-lang/rust/commits/205f84f13c69dd20caa6ecb6fc1bbed9171f0703", "html_url": "https://github.com/rust-lang/rust/commit/205f84f13c69dd20caa6ecb6fc1bbed9171f0703"}], "stats": {"total": 109, "additions": 96, "deletions": 13}, "files": [{"sha": "a0ba2996334b9a62a4c59493cbd89a0afbc49670", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02c234cc52be6b655822d86f22751d57f1005822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c234cc52be6b655822d86f22751d57f1005822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=02c234cc52be6b655822d86f22751d57f1005822", "patch": "@@ -745,18 +745,6 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // Translate index expression.\n             let ix_datum = unpack_datum!(bcx, trans(bcx, idx));\n \n-            // Overloaded. Evaluate `trans_overloaded_op`, which will\n-            // invoke the user's index() method, which basically yields\n-            // a `&T` pointer.  We can then proceed down the normal\n-            // path (below) to dereference that `&T`.\n-            let val =\n-                unpack_result!(bcx,\n-                               trans_overloaded_op(bcx,\n-                                                   index_expr,\n-                                                   method_call,\n-                                                   base_datum,\n-                                                   vec![(ix_datum, idx.id)],\n-                                                   None));\n             let ref_ty = ty::ty_fn_ret(monomorphize_type(bcx, method_ty)).unwrap();\n             let elt_ty = match ty::deref(ref_ty, true) {\n                 None => {\n@@ -766,7 +754,25 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 }\n                 Some(elt_tm) => elt_tm.ty,\n             };\n-            Datum::new(val, elt_ty, LvalueExpr)\n+\n+            // Overloaded. Evaluate `trans_overloaded_op`, which will\n+            // invoke the user's index() method, which basically yields\n+            // a `&T` pointer.  We can then proceed down the normal\n+            // path (below) to dereference that `&T`.\n+            let scratch = rvalue_scratch_datum(bcx, ref_ty, \"overloaded_index_elt\");\n+            unpack_result!(bcx,\n+                           trans_overloaded_op(bcx,\n+                                               index_expr,\n+                                               method_call,\n+                                               base_datum,\n+                                               vec![(ix_datum, idx.id)],\n+                                               Some(SaveIn(scratch.val))));\n+            let datum = scratch.to_expr_datum();\n+            if ty::type_is_sized(bcx.tcx(), elt_ty) {\n+                Datum::new(datum.to_llscalarish(bcx), elt_ty, LvalueExpr)\n+            } else {\n+                Datum::new(datum.val, ty::mk_open(bcx.tcx(), elt_ty), LvalueExpr)\n+            }\n         }\n         None => {\n             let base_datum = unpack_datum!(bcx, trans_to_lvalue(bcx,"}, {"sha": "542562b69e6a7ae763922524516d479da48e6b03", "filename": "src/test/compile-fail/dst-index.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/02c234cc52be6b655822d86f22751d57f1005822/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c234cc52be6b655822d86f22751d57f1005822/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=02c234cc52be6b655822d86f22751d57f1005822", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that overloaded index expressions with DST result types\n+// can't be used as rvalues\n+\n+use std::ops::Index;\n+use std::fmt::Show;\n+\n+struct S;\n+\n+impl Index<uint, str> for S {\n+    fn index<'a>(&'a self, _: &uint) -> &'a str {\n+        \"hello\"\n+    }\n+}\n+\n+struct T;\n+\n+impl Index<uint, Show + 'static> for T {\n+    fn index<'a>(&'a self, idx: &uint) -> &'a Show + 'static {\n+        static x: uint = 42;\n+        &x\n+    }\n+}\n+\n+fn main() {\n+    S[0];\n+    //~^ ERROR E0161\n+    T[0];\n+    //~^ ERROR cannot move out of dereference\n+    //~^^ ERROR E0161\n+}"}, {"sha": "266f9bcba5f92545ca9619cdeee6d4c3b808428a", "filename": "src/test/run-pass/dst-index.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/02c234cc52be6b655822d86f22751d57f1005822/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c234cc52be6b655822d86f22751d57f1005822/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=02c234cc52be6b655822d86f22751d57f1005822", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that overloaded index expressions with DST result types\n+// work and don't ICE.\n+\n+use std::ops::Index;\n+use std::fmt::Show;\n+\n+struct S;\n+\n+impl Index<uint, str> for S {\n+    fn index<'a>(&'a self, _: &uint) -> &'a str {\n+        \"hello\"\n+    }\n+}\n+\n+struct T;\n+\n+impl Index<uint, Show + 'static> for T {\n+    fn index<'a>(&'a self, idx: &uint) -> &'a Show + 'static {\n+        static x: uint = 42;\n+        &x\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(&S[0], \"hello\");\n+    assert_eq!(format!(\"{}\", &T[0]).as_slice(), \"42\");\n+}"}]}