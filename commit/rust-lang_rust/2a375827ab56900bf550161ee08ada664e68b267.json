{"sha": "2a375827ab56900bf550161ee08ada664e68b267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzc1ODI3YWI1NjkwMGJmNTUwMTYxZWUwOGFkYTY2NGU2OGIyNjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-06-27T13:38:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-06-27T14:54:53Z"}, "message": "std: Move a process test out of libstd\n\nThis commit moves a test out of libstd which is causing deadlocks on\nmusl on CI. Looks like the recent update in musl versions brings in some\ninternal updates to musl which makes `setgid` and `setuid` invalid to\ncall after a `fork` in a multithreaded program. The issue seen here is\nthat the child thread was attempting to grab a lock held by a\nnonexistent thread, meaning that the child process simply deadlocked\ncausing the whole test to deadlock.\n\nThis commit moves the test to its own file with no threads which should\nwork.", "tree": {"sha": "b46f047af30d2245f4be11b649166b44f7a98a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b46f047af30d2245f4be11b649166b44f7a98a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a375827ab56900bf550161ee08ada664e68b267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a375827ab56900bf550161ee08ada664e68b267", "html_url": "https://github.com/rust-lang/rust/commit/2a375827ab56900bf550161ee08ada664e68b267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a375827ab56900bf550161ee08ada664e68b267/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b5d229c1ddd7659af82109377aa8a3568f68a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b5d229c1ddd7659af82109377aa8a3568f68a1", "html_url": "https://github.com/rust-lang/rust/commit/a6b5d229c1ddd7659af82109377aa8a3568f68a1"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "000f80f99e7a9bb861b3ffde10defa09355e8c1a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a375827ab56900bf550161ee08ada664e68b267/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a375827ab56900bf550161ee08ada664e68b267/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=2a375827ab56900bf550161ee08ada664e68b267", "patch": "@@ -1765,33 +1765,6 @@ mod tests {\n         assert_eq!(out, \"foobar\\n\");\n     }\n \n-\n-    #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n-    #[cfg(unix)]\n-    fn uid_works() {\n-        use crate::os::unix::prelude::*;\n-\n-        let mut p = Command::new(\"/bin/sh\")\n-                            .arg(\"-c\").arg(\"true\")\n-                            .uid(unsafe { libc::getuid() })\n-                            .gid(unsafe { libc::getgid() })\n-                            .spawn().unwrap();\n-        assert!(p.wait().unwrap().success());\n-    }\n-\n-    #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n-    #[cfg(unix)]\n-    fn uid_to_root_fails() {\n-        use crate::os::unix::prelude::*;\n-\n-        // if we're already root, this isn't a valid test. Most of the bots run\n-        // as non-root though (android is an exception).\n-        if unsafe { libc::getuid() == 0 } { return }\n-        assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n-    }\n-\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_status() {"}, {"sha": "2b52c5d104c24a5c3ee4474a98889dcc63e10264", "filename": "src/test/run-pass/command-uid-gid.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a375827ab56900bf550161ee08ada664e68b267/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a375827ab56900bf550161ee08ada664e68b267/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs?ref=2a375827ab56900bf550161ee08ada664e68b267", "patch": "@@ -0,0 +1,26 @@\n+#![feature(rustc_private)]\n+\n+fn main() {\n+    #[cfg(unix)]\n+    run()\n+}\n+\n+#[cfg(unix)]\n+fn run() {\n+    extern crate libc;\n+    use std::process::Command;\n+    use std::os::unix::prelude::*;\n+\n+    let mut p = Command::new(\"/bin/sh\")\n+        .arg(\"-c\").arg(\"true\")\n+        .uid(unsafe { libc::getuid() })\n+        .gid(unsafe { libc::getgid() })\n+        .spawn().unwrap();\n+    assert!(p.wait().unwrap().success());\n+\n+    // if we're already root, this isn't a valid test. Most of the bots run\n+    // as non-root though (android is an exception).\n+    if unsafe { libc::getuid() != 0 } {\n+        assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n+    }\n+}"}]}