{"sha": "5d4995191326a3710206d152a710470e196e4466", "node_id": "C_kwDOAAsO6NoAKDVkNDk5NTE5MTMyNmEzNzEwMjA2ZDE1MmE3MTA0NzBlMTk2ZTQ0NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T21:43:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T21:43:17Z"}, "message": "Auto merge of #13357 - Veykril:minicore, r=Veykril\n\ninternal: Allow minicore flags specification to be order independent", "tree": {"sha": "54e2fb55ad2c78c88bd523ce8456ed8e6719ff8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e2fb55ad2c78c88bd523ce8456ed8e6719ff8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4995191326a3710206d152a710470e196e4466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4995191326a3710206d152a710470e196e4466", "html_url": "https://github.com/rust-lang/rust/commit/5d4995191326a3710206d152a710470e196e4466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4995191326a3710206d152a710470e196e4466/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21319d135fcea095093f3916272ca2fd5a7fa0cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/21319d135fcea095093f3916272ca2fd5a7fa0cd", "html_url": "https://github.com/rust-lang/rust/commit/21319d135fcea095093f3916272ca2fd5a7fa0cd"}, {"sha": "28c21bc8a8044ae232558a4d359045008df63597", "url": "https://api.github.com/repos/rust-lang/rust/commits/28c21bc8a8044ae232558a4d359045008df63597", "html_url": "https://github.com/rust-lang/rust/commit/28c21bc8a8044ae232558a4d359045008df63597"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "c824f5af7258485bb8aa97460ab23fc0f216a647", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5d4995191326a3710206d152a710470e196e4466/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4995191326a3710206d152a710470e196e4466/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=5d4995191326a3710206d152a710470e196e4466", "patch": "@@ -61,6 +61,8 @@\n //! \"\n //! ```\n \n+use std::iter;\n+\n use rustc_hash::FxHashMap;\n use stdx::trim_indent;\n \n@@ -259,7 +261,7 @@ impl MiniCore {\n             if res.has_flag(entry) {\n                 panic!(\"duplicate minicore flag: {:?}\", entry);\n             }\n-            res.activated_flags.push(entry.to_string());\n+            res.activated_flags.push(entry.to_owned());\n         }\n \n         res\n@@ -273,35 +275,34 @@ impl MiniCore {\n         let raw_mini_core = include_str!(\"./minicore.rs\");\n         let mut lines = raw_mini_core.split_inclusive('\\n');\n \n-        let mut parsing_flags = false;\n         let mut implications = Vec::new();\n \n         // Parse `//!` preamble and extract flags and dependencies.\n-        for line in lines.by_ref() {\n-            let line = match line.strip_prefix(\"//!\") {\n-                Some(it) => it,\n-                None => {\n-                    assert!(line.trim().is_empty());\n-                    break;\n-                }\n-            };\n-\n-            if parsing_flags {\n-                let (flag, deps) = line.split_once(':').unwrap();\n-                let flag = flag.trim();\n-                self.valid_flags.push(flag.to_string());\n-                for dep in deps.split(\", \") {\n-                    let dep = dep.trim();\n-                    if !dep.is_empty() {\n-                        self.assert_valid_flag(dep);\n-                        implications.push((flag, dep));\n-                    }\n-                }\n+        let trim_doc: fn(&str) -> Option<&str> = |line| match line.strip_prefix(\"//!\") {\n+            Some(it) => Some(it),\n+            None => {\n+                assert!(line.trim().is_empty(), \"expected empty line after minicore header\");\n+                None\n             }\n+        };\n+        for line in lines\n+            .by_ref()\n+            .map_while(trim_doc)\n+            .skip_while(|line| !line.contains(\"Available flags:\"))\n+            .skip(1)\n+        {\n+            let (flag, deps) = line.split_once(':').unwrap();\n+            let flag = flag.trim();\n+\n+            self.valid_flags.push(flag.to_string());\n+            implications.extend(\n+                iter::repeat(flag)\n+                    .zip(deps.split(\", \").map(str::trim).filter(|dep| !dep.is_empty())),\n+            );\n+        }\n \n-            if line.contains(\"Available flags:\") {\n-                parsing_flags = true;\n-            }\n+        for (_, dep) in &implications {\n+            self.assert_valid_flag(dep);\n         }\n \n         for flag in &self.activated_flags {\n@@ -332,7 +333,7 @@ impl MiniCore {\n             }\n             if let Some(region) = trimmed.strip_prefix(\"// endregion:\") {\n                 let prev = active_regions.pop().unwrap();\n-                assert_eq!(prev, region);\n+                assert_eq!(prev, region, \"unbalanced region pairs\");\n                 continue;\n             }\n "}, {"sha": "69d2e62b2567357541b81ab43bb83ea2ff1ac7f3", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5d4995191326a3710206d152a710470e196e4466/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4995191326a3710206d152a710470e196e4466/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=5d4995191326a3710206d152a710470e196e4466", "patch": "@@ -8,36 +8,36 @@\n //! We then strip all the code marked with other flags.\n //!\n //! Available flags:\n-//!     sized:\n-//!     unsize: sized\n+//!     add:\n+//!     as_ref: sized\n+//!     bool_impl: option, fn\n+//!     clone: sized\n //!     coerce_unsized: unsize\n-//!     slice:\n-//!     range:\n-//!     deref: sized\n+//!     copy: clone\n+//!     default: sized\n //!     deref_mut: deref\n-//!     index: sized\n+//!     deref: sized\n+//!     derive:\n+//!     drop:\n+//!     eq: sized\n+//!     fmt: result\n //!     fn:\n-//!     try:\n-//!     pin:\n+//!     from: sized\n //!     future: pin\n-//!     option:\n-//!     result:\n+//!     generator: pin\n+//!     hash:\n+//!     index: sized\n //!     iterator: option\n //!     iterators: iterator, fn\n-//!     default: sized\n-//!     hash:\n-//!     clone: sized\n-//!     copy: clone\n-//!     from: sized\n-//!     eq: sized\n+//!     option:\n //!     ord: eq, option\n-//!     derive:\n-//!     fmt: result\n-//!     bool_impl: option, fn\n-//!     add:\n-//!     as_ref: sized\n-//!     drop:\n-//!     generator: pin\n+//!     pin:\n+//!     range:\n+//!     result:\n+//!     sized:\n+//!     slice:\n+//!     try:\n+//!     unsize: sized\n \n pub mod marker {\n     // region:sized\n@@ -584,7 +584,7 @@ pub mod iter {\n             }\n         }\n     }\n-    pub use self::adapters::{Take, FilterMap};\n+    pub use self::adapters::{FilterMap, Take};\n \n     mod sources {\n         mod repeat {"}]}