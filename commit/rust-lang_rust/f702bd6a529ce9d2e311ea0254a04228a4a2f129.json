{"sha": "f702bd6a529ce9d2e311ea0254a04228a4a2f129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MDJiZDZhNTI5Y2U5ZDJlMzExZWEwMjU0YTA0MjI4YTRhMmYxMjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-23T11:46:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:37:47Z"}, "message": "rewrite constants to use NewType::MAX instead of u32::MAX\n\nAlso, adjust the MAX to be `u32::MAX - 1`, leaving room for `u32::MAX`\nto become a sentinel value in the future.", "tree": {"sha": "0bb022359f5fd9b0ec5d81fe0fa4f5a5a97b011a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb022359f5fd9b0ec5d81fe0fa4f5a5a97b011a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f702bd6a529ce9d2e311ea0254a04228a4a2f129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f702bd6a529ce9d2e311ea0254a04228a4a2f129", "html_url": "https://github.com/rust-lang/rust/commit/f702bd6a529ce9d2e311ea0254a04228a4a2f129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f702bd6a529ce9d2e311ea0254a04228a4a2f129/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67d518b0d92785323f2c9c94dda25273821b47b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67d518b0d92785323f2c9c94dda25273821b47b", "html_url": "https://github.com/rust-lang/rust/commit/c67d518b0d92785323f2c9c94dda25273821b47b"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "f5a46060759ddd1440d71243505d2f6a05dcbd45", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=f702bd6a529ce9d2e311ea0254a04228a4a2f129", "patch": "@@ -44,9 +44,7 @@ newtype_index! {\n }\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = unsafe {\n-        DepNodeIndex::from_u32_unchecked(::std::u32::MAX)\n-    };\n+    const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "420ffbcfee6cd29f1a6d5f20576a2a7cf132d13b", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=f702bd6a529ce9d2e311ea0254a04228a4a2f129", "patch": "@@ -27,21 +27,20 @@ newtype_index! {\n         /// Virtual crate for builtin macros\n         // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n         // `CrateNum`s.\n-        const BUILTIN_MACROS_CRATE = u32::MAX,\n+        const BUILTIN_MACROS_CRATE = CrateNum::MAX_AS_U32,\n \n         /// A CrateNum value that indicates that something is wrong.\n-        const INVALID_CRATE = u32::MAX - 1,\n+        const INVALID_CRATE = CrateNum::MAX_AS_U32 - 1,\n \n         /// A special CrateNum that we use for the tcx.rcache when decoding from\n         /// the incr. comp. cache.\n-        const RESERVED_FOR_INCR_COMP_CACHE = u32::MAX - 2,\n+        const RESERVED_FOR_INCR_COMP_CACHE = CrateNum::MAX_AS_U32 - 2,\n     }\n }\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {\n-        assert!(x < (u32::MAX as usize));\n-        CrateNum::from_u32(x as u32)\n+        CrateNum::from_usize(x)\n     }\n \n     pub fn as_def_id(&self) -> DefId { DefId { krate: *self, index: CRATE_DEF_INDEX } }"}, {"sha": "f7d0d7b8a36ba6a28b7e469b3191742d16cbbfb5", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=f702bd6a529ce9d2e311ea0254a04228a4a2f129", "patch": "@@ -72,7 +72,7 @@ macro_rules! newtype_index {\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @max          [::std::u32::MAX]\n+            @max          [::std::u32::MAX - 1]\n             @vis          [$v]\n             @debug_format [\"{}\"]);\n     );\n@@ -82,7 +82,7 @@ macro_rules! newtype_index {\n         newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @type         [$name]\n-            @max          [::std::u32::MAX]\n+            @max          [::std::u32::MAX - 1]\n             @vis          [$v]\n             @debug_format [\"{}\"]\n                           $($tokens)+);\n@@ -102,17 +102,21 @@ macro_rules! newtype_index {\n         }\n \n         impl $type {\n+            $v const MAX_AS_U32: u32 = $max;\n+\n+            $v const MAX: $type = unsafe { $type::from_u32_unchecked($max) };\n+\n             #[inline]\n             $v fn from_usize(value: usize) -> Self {\n-                assert!(value < ($max as usize));\n+                assert!(value <= ($max as usize));\n                 unsafe {\n                     $type::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n             $v fn from_u32(value: u32) -> Self {\n-                assert!(value < $max);\n+                assert!(value <= $max);\n                 unsafe {\n                     $type::from_u32_unchecked(value)\n                 }\n@@ -138,7 +142,7 @@ macro_rules! newtype_index {\n             /// Extract value of this index as a u32.\n             #[inline]\n             $v const fn as_usize(self) -> usize {\n-                self.private as usize\n+                self.as_u32() as usize\n             }\n         }\n "}, {"sha": "215c44dec6913365cef39f528e2e005e0d4dbb1a", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=f702bd6a529ce9d2e311ea0254a04228a4a2f129", "patch": "@@ -217,6 +217,14 @@ impl_stable_hash_via_hash!(i128);\n impl_stable_hash_via_hash!(char);\n impl_stable_hash_via_hash!(());\n \n+impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          ctx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.get().hash_stable(ctx, hasher)\n+    }\n+}\n+\n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,"}, {"sha": "416be50bfe9ea4f52a19ba7e9dbe4cf28721708e", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f702bd6a529ce9d2e311ea0254a04228a4a2f129/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=f702bd6a529ce9d2e311ea0254a04228a4a2f129", "patch": "@@ -361,6 +361,18 @@ impl Decodable for u32 {\n     }\n }\n \n+impl Encodable for ::std::num::NonZeroU32 {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.get())\n+    }\n+}\n+\n+impl Decodable for ::std::num::NonZeroU32 {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        d.read_u32().map(|d| ::std::num::NonZeroU32::new(d).unwrap())\n+    }\n+}\n+\n impl Encodable for u64 {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_u64(*self)\n@@ -895,3 +907,4 @@ impl<T: UseSpecializedDecodable> Decodable for T {\n impl<'a, T: ?Sized + Encodable> UseSpecializedEncodable for &'a T {}\n impl<T: ?Sized + Encodable> UseSpecializedEncodable for Box<T> {}\n impl<T: Decodable> UseSpecializedDecodable for Box<T> {}\n+"}]}