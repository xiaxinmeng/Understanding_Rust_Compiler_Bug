{"sha": "0f72a6d617ccfb449286ccae136776fef2182224", "node_id": "C_kwDOAAsO6NoAKDBmNzJhNmQ2MTdjY2ZiNDQ5Mjg2Y2NhZTEzNjc3NmZlZjIxODIyMjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-02T21:06:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-02T21:06:26Z"}, "message": "Rollup merge of #103610 - wesleywiser:thinlto_cgu1, r=michaelwoerister\n\nAllow use of `-Clto=thin` with `-Ccodegen-units=1` in general\n\nThe current logic to ignore ThinLTO when `-Ccodegen-units=1` makes sense for local ThinLTO but even in this scenario, a user may still want (non-local) ThinLTO for the purpose of optimizing dependencies into the final crate which is being compiled with 1 CGU.\n\nThe previous behavior was even more confusing because if you were generating a binary (`--emit=link`), then you would get ThinLTO but if you asked for LLVM IR or bytecode, then it would silently change to using regular LTO.\n\nWith this change, we only override the defaults for local ThinLTO if you ask for a single output such as LLVM IR or bytecode and in all other cases honor the requested LTO setting.\n\nr? `@michaelwoerister`", "tree": {"sha": "52f96bf1da7749e6b3bd6296b583defdec937eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f96bf1da7749e6b3bd6296b583defdec937eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f72a6d617ccfb449286ccae136776fef2182224", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYtvSCRBK7hj4Ov3rIwAAJioIAJbQ+jKOrPqTkN5SYDY0gZ2O\nizgevp5o6/e0WjyxS1APrsoTpgfySuhDvcRrAMiQk/FgdYLqGz5mNV0H2KjNC5lD\nsmgwS7323ubGB8SCymoVI2HPOVXjAIrHxoY5P4HhOl53VL7/fGQ20+gtZXBOwK79\nXSEJFBu1Pqkfk055K5KdB3bQMooMkhZwq5taiNQ/b8Gy8VecfyiuXDGMtOpWYC7R\n27lZDS6N3xYQEXXzZzcQRPJbkyw+fSI4UmrWPBa0Ci+DWzXwErrU/9A051WlsHiD\nbLZamOcGKuxJ/YDreGM3tq5xTtkO8mXB8l0rgOay8SBjURkjgWA96V8/qnu45yU=\n=dyeW\n-----END PGP SIGNATURE-----\n", "payload": "tree 52f96bf1da7749e6b3bd6296b583defdec937eb5\nparent 214d6b6836413bbfe9132f7aff3d91ae67bc62ba\nparent 7c6345d175a6976e68d3902240ab6dd8d6b99bc2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667423186 +0100\ncommitter GitHub <noreply@github.com> 1667423186 +0100\n\nRollup merge of #103610 - wesleywiser:thinlto_cgu1, r=michaelwoerister\n\nAllow use of `-Clto=thin` with `-Ccodegen-units=1` in general\n\nThe current logic to ignore ThinLTO when `-Ccodegen-units=1` makes sense for local ThinLTO but even in this scenario, a user may still want (non-local) ThinLTO for the purpose of optimizing dependencies into the final crate which is being compiled with 1 CGU.\n\nThe previous behavior was even more confusing because if you were generating a binary (`--emit=link`), then you would get ThinLTO but if you asked for LLVM IR or bytecode, then it would silently change to using regular LTO.\n\nWith this change, we only override the defaults for local ThinLTO if you ask for a single output such as LLVM IR or bytecode and in all other cases honor the requested LTO setting.\n\nr? `@michaelwoerister`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f72a6d617ccfb449286ccae136776fef2182224", "html_url": "https://github.com/rust-lang/rust/commit/0f72a6d617ccfb449286ccae136776fef2182224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f72a6d617ccfb449286ccae136776fef2182224/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214d6b6836413bbfe9132f7aff3d91ae67bc62ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/214d6b6836413bbfe9132f7aff3d91ae67bc62ba", "html_url": "https://github.com/rust-lang/rust/commit/214d6b6836413bbfe9132f7aff3d91ae67bc62ba"}, {"sha": "7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "html_url": "https://github.com/rust-lang/rust/commit/7c6345d175a6976e68d3902240ab6dd8d6b99bc2"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "b8ad18c64dcf649de2618da657952fd8ccaee491", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f72a6d617ccfb449286ccae136776fef2182224/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f72a6d617ccfb449286ccae136776fef2182224/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0f72a6d617ccfb449286ccae136776fef2182224", "patch": "@@ -738,7 +738,7 @@ impl Default for Options {\n             actually_rustdoc: false,\n             trimmed_def_paths: TrimmedDefPaths::default(),\n             cli_forced_codegen_units: None,\n-            cli_forced_thinlto_off: false,\n+            cli_forced_local_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             real_rust_source_base_dir: None,\n             edition: DEFAULT_EDITION,\n@@ -1721,7 +1721,7 @@ fn should_override_cgus_and_disable_thinlto(\n     error_format: ErrorOutputType,\n     mut codegen_units: Option<usize>,\n ) -> (bool, Option<usize>) {\n-    let mut disable_thinlto = false;\n+    let mut disable_local_thinlto = false;\n     // Issue #30063: if user requests LLVM-related output to one\n     // particular path, disable codegen-units.\n     let incompatible: Vec<_> = output_types\n@@ -1746,12 +1746,12 @@ fn should_override_cgus_and_disable_thinlto(\n                     }\n                     early_warn(error_format, \"resetting to default -C codegen-units=1\");\n                     codegen_units = Some(1);\n-                    disable_thinlto = true;\n+                    disable_local_thinlto = true;\n                 }\n             }\n             _ => {\n                 codegen_units = Some(1);\n-                disable_thinlto = true;\n+                disable_local_thinlto = true;\n             }\n         }\n     }\n@@ -1760,7 +1760,7 @@ fn should_override_cgus_and_disable_thinlto(\n         early_error(error_format, \"value for codegen units must be a positive non-zero integer\");\n     }\n \n-    (disable_thinlto, codegen_units)\n+    (disable_local_thinlto, codegen_units)\n }\n \n fn check_thread_count(unstable_opts: &UnstableOptions, error_format: ErrorOutputType) {\n@@ -2265,7 +2265,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let output_types = parse_output_types(&unstable_opts, matches, error_format);\n \n     let mut cg = CodegenOptions::build(matches, error_format);\n-    let (disable_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n+    let (disable_local_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n         &output_types,\n         matches,\n         error_format,\n@@ -2508,7 +2508,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         actually_rustdoc: false,\n         trimmed_def_paths: TrimmedDefPaths::default(),\n         cli_forced_codegen_units: codegen_units,\n-        cli_forced_thinlto_off: disable_thinlto,\n+        cli_forced_local_thinlto_off: disable_local_thinlto,\n         remap_path_prefix,\n         real_rust_source_base_dir,\n         edition,"}, {"sha": "f9ee202466f67964ced1c4cafab319f51ab44733", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f72a6d617ccfb449286ccae136776fef2182224/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f72a6d617ccfb449286ccae136776fef2182224/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0f72a6d617ccfb449286ccae136776fef2182224", "patch": "@@ -181,7 +181,7 @@ top_level_options!(\n         #[rustc_lint_opt_deny_field_access(\"use `Session::codegen_units` instead of this field\")]\n         cli_forced_codegen_units: Option<usize> [UNTRACKED],\n         #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n-        cli_forced_thinlto_off: bool [UNTRACKED],\n+        cli_forced_local_thinlto_off: bool [UNTRACKED],\n \n         /// Remap source path prefixes in all output (messages, object files, debug, etc.).\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [TRACKED_NO_CRATE_HASH],"}, {"sha": "ec0a5b9d0d84ffa6e4865cdcf12957c384d18fbc", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f72a6d617ccfb449286ccae136776fef2182224/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f72a6d617ccfb449286ccae136776fef2182224/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=0f72a6d617ccfb449286ccae136776fef2182224", "patch": "@@ -1018,11 +1018,8 @@ impl Session {\n                 return config::Lto::Fat;\n             }\n             config::LtoCli::Thin => {\n-                return if self.opts.cli_forced_thinlto_off {\n-                    config::Lto::Fat\n-                } else {\n-                    config::Lto::Thin\n-                };\n+                // The user explicitly asked for ThinLTO\n+                return config::Lto::Thin;\n             }\n         }\n \n@@ -1034,7 +1031,7 @@ impl Session {\n \n         // If processing command line options determined that we're incompatible\n         // with ThinLTO (e.g., `-C lto --emit llvm-ir`) then return that option.\n-        if self.opts.cli_forced_thinlto_off {\n+        if self.opts.cli_forced_local_thinlto_off {\n             return config::Lto::No;\n         }\n "}]}