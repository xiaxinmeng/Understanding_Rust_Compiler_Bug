{"sha": "1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MzViM2VmNmE3YzdmN2IzZjVjZGVjZGJmMjA0Yzg1OTkxYmNkNjM=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-04-05T18:39:17Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-04-08T17:28:26Z"}, "message": "8279: Added initial implementation for\n\nOperator semantic highlighting.", "tree": {"sha": "2f0cb9fd6643eaa6433f452e1aa4021b6bc19ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f0cb9fd6643eaa6433f452e1aa4021b6bc19ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "html_url": "https://github.com/rust-lang/rust/commit/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f279d57f0cba600eae8c550654a00b4268812ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f279d57f0cba600eae8c550654a00b4268812ac", "html_url": "https://github.com/rust-lang/rust/commit/5f279d57f0cba600eae8c550654a00b4268812ac"}], "stats": {"total": 111, "additions": 92, "deletions": 19}, "files": [{"sha": "b5ae51d28c9d23d75b0f4ffaa77f19f1415c2222", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "patch": "@@ -82,7 +82,7 @@ pub use crate::{\n     references::{rename::RenameError, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     syntax_highlighting::{\n-        tags::{Highlight, HlMod, HlMods, HlPunct, HlTag},\n+        tags::{Highlight, HlMod, HlMods, HlOperator, HlPunct, HlTag},\n         HlRange,\n     },\n };"}, {"sha": "7734ea301b4dc1bfc6901a06c867c864dd8feb67", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "patch": "@@ -12,7 +12,10 @@ use syntax::{\n     SyntaxNode, SyntaxToken, T,\n };\n \n-use crate::{syntax_highlighting::tags::HlPunct, Highlight, HlMod, HlTag};\n+use crate::{\n+    syntax_highlighting::tags::{HlOperator, HlPunct},\n+    Highlight, HlMod, HlTag,\n+};\n \n pub(super) fn element(\n     sema: &Semantics<RootDatabase>,\n@@ -132,7 +135,7 @@ pub(super) fn element(\n         INT_NUMBER | FLOAT_NUMBER => HlTag::NumericLiteral.into(),\n         BYTE => HlTag::ByteLiteral.into(),\n         CHAR => HlTag::CharLiteral.into(),\n-        QUESTION => Highlight::new(HlTag::Operator) | HlMod::ControlFlow,\n+        QUESTION => Highlight::new(HlTag::Operator(HlOperator::Other)) | HlMod::ControlFlow,\n         LIFETIME => {\n             let lifetime = element.into_node().and_then(ast::Lifetime::cast).unwrap();\n \n@@ -146,8 +149,11 @@ pub(super) fn element(\n             }\n         }\n         p if p.is_punct() => match p {\n+            T![&] if element.parent().and_then(ast::BinExpr::cast).is_some() => {\n+                HlTag::Operator(HlOperator::Bitwise).into()\n+            }\n             T![&] => {\n-                let h = HlTag::Operator.into();\n+                let h = HlTag::Operator(HlOperator::Other).into();\n                 let is_unsafe = element\n                     .parent()\n                     .and_then(ast::RefExpr::cast)\n@@ -159,13 +165,21 @@ pub(super) fn element(\n                     h\n                 }\n             }\n-            T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] | T![.] => HlTag::Operator.into(),\n+            T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] | T![.] => {\n+                HlTag::Operator(HlOperator::Other).into()\n+            }\n             T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n+                eprintln!(\"in macro call: {}\", element);\n                 HlTag::Symbol(SymbolKind::Macro).into()\n             }\n             T![!] if element.parent().and_then(ast::NeverType::cast).is_some() => {\n+                eprintln!(\"in never type : {}\", element);\n                 HlTag::BuiltinType.into()\n             }\n+            T![!] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n+                eprintln!(\"pre expr for : {}\", element);\n+                HlTag::Operator(HlOperator::Bitwise).into()\n+            }\n             T![*] if element.parent().and_then(ast::PtrType::cast).is_some() => {\n                 HlTag::Keyword.into()\n             }\n@@ -175,32 +189,60 @@ pub(super) fn element(\n                 let expr = prefix_expr.expr()?;\n                 let ty = sema.type_of_expr(&expr)?;\n                 if ty.is_raw_ptr() {\n-                    HlTag::Operator | HlMod::Unsafe\n+                    HlTag::Operator(HlOperator::Other) | HlMod::Unsafe\n                 } else if let Some(ast::PrefixOp::Deref) = prefix_expr.op_kind() {\n-                    HlTag::Operator.into()\n+                    HlTag::Operator(HlOperator::Other).into()\n                 } else {\n                     HlTag::Punctuation(HlPunct::Other).into()\n                 }\n             }\n             T![-] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n+                eprintln!(\"the - operator: {}\", element);\n                 let prefix_expr = element.parent().and_then(ast::PrefixExpr::cast)?;\n \n                 let expr = prefix_expr.expr()?;\n                 match expr {\n                     ast::Expr::Literal(_) => HlTag::NumericLiteral,\n-                    _ => HlTag::Operator,\n+                    _ => HlTag::Operator(HlOperator::Other),\n                 }\n                 .into()\n             }\n             _ if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n-                HlTag::Operator.into()\n+                eprintln!(\"the prefix expr block: {}\", element);\n+                HlTag::Operator(HlOperator::Other).into()\n+            }\n+            T![+] | T![-] | T![*] | T![/] | T![+=] | T![-=] | T![*=] | T![/=]\n+                if element.parent().and_then(ast::BinExpr::cast).is_some() =>\n+            {\n+                HlTag::Operator(HlOperator::Arithmetic).into()\n+            }\n+            T![|] | T![&] | T![!] | T![^] | T![|=] | T![&=] | T![^=]\n+                if element.parent().and_then(ast::BinExpr::cast).is_some() =>\n+            {\n+                HlTag::Operator(HlOperator::Bitwise).into()\n+            }\n+            T![&&] | T![||] if element.parent().and_then(ast::BinExpr::cast).is_some() => {\n+                HlTag::Operator(HlOperator::Logical).into()\n+            }\n+            T![>] | T![<] | T![==] | T![>=] | T![<=] | T![!=]\n+                if element.parent().and_then(ast::BinExpr::cast).is_some() =>\n+            {\n+                HlTag::Operator(HlOperator::Comparision).into()\n+            }\n+            _ if element.parent().and_then(ast::BinExpr::cast).is_some() => {\n+                eprintln!(\"the bin expr : {}\", element);\n+                HlTag::Operator(HlOperator::Other).into()\n             }\n-            _ if element.parent().and_then(ast::BinExpr::cast).is_some() => HlTag::Operator.into(),\n             _ if element.parent().and_then(ast::RangeExpr::cast).is_some() => {\n-                HlTag::Operator.into()\n+                eprintln!(\"the range expr block: {}\", element);\n+                HlTag::Operator(HlOperator::Other).into()\n+            }\n+            _ if element.parent().and_then(ast::RangePat::cast).is_some() => {\n+                HlTag::Operator(HlOperator::Other).into()\n+            }\n+            _ if element.parent().and_then(ast::RestPat::cast).is_some() => {\n+                HlTag::Operator(HlOperator::Other).into()\n             }\n-            _ if element.parent().and_then(ast::RangePat::cast).is_some() => HlTag::Operator.into(),\n-            _ if element.parent().and_then(ast::RestPat::cast).is_some() => HlTag::Operator.into(),\n             _ if element.parent().and_then(ast::Attr::cast).is_some() => HlTag::Attribute.into(),\n             kind => HlTag::Punctuation(match kind {\n                 T!['['] | T![']'] => HlPunct::Bracket,"}, {"sha": "8128d231d598a383e898f3cec2fa6b9dfbd76f90", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "patch": "@@ -28,7 +28,7 @@ pub enum HlTag {\n     FormatSpecifier,\n     Keyword,\n     NumericLiteral,\n-    Operator,\n+    Operator(HlOperator),\n     Punctuation(HlPunct),\n     StringLiteral,\n     UnresolvedReference,\n@@ -87,6 +87,20 @@ pub enum HlPunct {\n     Other,\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub enum HlOperator {\n+    /// |, &, !, ^, |=, &=, ^=\n+    Bitwise,\n+    /// +, -, *, /, +=, -=, *=, /=\n+    Arithmetic,\n+    /// &&, ||, !\n+    Logical,\n+    /// >, <, ==, >=, <=, !=\n+    Comparision,\n+    ///\n+    Other,\n+}\n+\n impl HlTag {\n     fn as_str(self) -> &'static str {\n         match self {\n@@ -133,7 +147,13 @@ impl HlTag {\n                 HlPunct::Other => \"punctuation\",\n             },\n             HlTag::NumericLiteral => \"numeric_literal\",\n-            HlTag::Operator => \"operator\",\n+            HlTag::Operator(op) => match op {\n+                HlOperator::Bitwise => \"bitwise\",\n+                HlOperator::Arithmetic => \"arithmetic\",\n+                HlOperator::Logical => \"logical\",\n+                HlOperator::Comparision => \"comparision\",\n+                HlOperator::Other => \"operator\",\n+            },\n             HlTag::StringLiteral => \"string_literal\",\n             HlTag::UnresolvedReference => \"unresolved_reference\",\n             HlTag::None => \"none\","}, {"sha": "adc05981731a3d32ecabbd6519eb190065e26e4a", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "patch": "@@ -39,21 +39,26 @@ macro_rules! define_semantic_token_types {\n \n define_semantic_token_types![\n     (ANGLE, \"angle\"),\n+    (ARITHMETIC, \"arithmetic\"),\n     (ATTRIBUTE, \"attribute\"),\n+    (BITWISE, \"bitwise\"),\n     (BOOLEAN, \"boolean\"),\n     (BRACE, \"brace\"),\n     (BRACKET, \"bracket\"),\n     (BUILTIN_TYPE, \"builtinType\"),\n     (CHAR_LITERAL, \"characterLiteral\"),\n     (COLON, \"colon\"),\n     (COMMA, \"comma\"),\n+    (COMPARISION, \"comparision\"),\n     (CONST_PARAMETER, \"constParameter\"),\n     (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),\n     (GENERIC, \"generic\"),\n     (LABEL, \"label\"),\n     (LIFETIME, \"lifetime\"),\n+    (LOGICAL, \"logical\"),\n+    (OPERATOR, \"operator\"),\n     (PARENTHESIS, \"parenthesis\"),\n     (PUNCTUATION, \"punctuation\"),\n     (SELF_KEYWORD, \"selfKeyword\"),"}, {"sha": "df9292f8e426191a70855c5d56a1f00cbbe0d430", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1735b3ef6a7c7f7b3f5cdecdbf204c85991bcd63", "patch": "@@ -7,9 +7,9 @@ use std::{\n use ide::{\n     Annotation, AnnotationKind, Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind,\n     CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit, Fold, FoldKind,\n-    Highlight, HlMod, HlPunct, HlRange, HlTag, Indel, InlayHint, InlayKind, InsertTextFormat,\n-    Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity, SourceChange,\n-    StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n+    Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint, InlayKind,\n+    InsertTextFormat, Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity,\n+    SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n use serde_json::to_value;\n@@ -445,7 +445,13 @@ fn semantic_token_type_and_modifiers(\n         HlTag::FormatSpecifier => semantic_tokens::FORMAT_SPECIFIER,\n         HlTag::Keyword => lsp_types::SemanticTokenType::KEYWORD,\n         HlTag::None => semantic_tokens::GENERIC,\n-        HlTag::Operator => lsp_types::SemanticTokenType::OPERATOR,\n+        HlTag::Operator(op) => match op {\n+            HlOperator::Bitwise => semantic_tokens::BITWISE,\n+            HlOperator::Arithmetic => semantic_tokens::ARITHMETIC,\n+            HlOperator::Logical => semantic_tokens::LOGICAL,\n+            HlOperator::Comparision => semantic_tokens::COMPARISION,\n+            HlOperator::Other => semantic_tokens::OPERATOR,\n+        },\n         HlTag::StringLiteral => lsp_types::SemanticTokenType::STRING,\n         HlTag::UnresolvedReference => semantic_tokens::UNRESOLVED_REFERENCE,\n         HlTag::Punctuation(punct) => match punct {"}]}