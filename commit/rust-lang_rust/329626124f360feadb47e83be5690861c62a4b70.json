{"sha": "329626124f360feadb47e83be5690861c62a4b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyOTYyNjEyNGYzNjBmZWFkYjQ3ZTgzYmU1NjkwODYxYzYyYTRiNzA=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T11:47:46Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T07:59:54Z"}, "message": "Add check for structure names to be CamelCase", "tree": {"sha": "56a1f8e3b351ae739b4c3c373ebd93ba81c18dc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56a1f8e3b351ae739b4c3c373ebd93ba81c18dc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/329626124f360feadb47e83be5690861c62a4b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/329626124f360feadb47e83be5690861c62a4b70", "html_url": "https://github.com/rust-lang/rust/commit/329626124f360feadb47e83be5690861c62a4b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/329626124f360feadb47e83be5690861c62a4b70/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1773c6d154abe5da00b31bb16139addcaa443bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1773c6d154abe5da00b31bb16139addcaa443bbb", "html_url": "https://github.com/rust-lang/rust/commit/1773c6d154abe5da00b31bb16139addcaa443bbb"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "bd370e3b2d5d67ce7971c8687239234cf0135091", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329626124f360feadb47e83be5690861c62a4b70/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329626124f360feadb47e83be5690861c62a4b70/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=329626124f360feadb47e83be5690861c62a4b70", "patch": "@@ -257,7 +257,7 @@ impl fmt::Display for CaseType {\n         let repr = match self {\n             CaseType::LowerSnakeCase => \"snake_case\",\n             CaseType::UpperSnakeCase => \"UPPER_SNAKE_CASE\",\n-            CaseType::UpperCamelCase => \"UpperCamelCase\",\n+            CaseType::UpperCamelCase => \"CamelCase\",\n         };\n \n         write!(f, \"{}\", repr)"}, {"sha": "b7f511fd89871cf5f566464825fbf9ada34563bd", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/329626124f360feadb47e83be5690861c62a4b70/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329626124f360feadb47e83be5690861c62a4b70/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=329626124f360feadb47e83be5690861c62a4b70", "patch": "@@ -14,6 +14,7 @@ mod str_helpers;\n use std::sync::Arc;\n \n use hir_def::{\n+    adt::VariantData,\n     body::Body,\n     db::DefDatabase,\n     expr::{Expr, ExprId, UnaryOp},\n@@ -205,6 +206,133 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n     fn validate_struct(&mut self, db: &dyn HirDatabase, struct_id: StructId) {\n         let data = db.struct_data(struct_id);\n+\n+        // 1. Check the structure name.\n+        let struct_name = data.name.to_string();\n+        let struct_name_replacement = if let Some(new_name) = to_camel_case(&struct_name) {\n+            let replacement = Replacement {\n+                current_name: data.name.clone(),\n+                suggested_text: new_name,\n+                expected_case: CaseType::UpperCamelCase,\n+            };\n+            Some(replacement)\n+        } else {\n+            None\n+        };\n+\n+        // 2. Check the field names.\n+        let mut struct_fields_replacements = Vec::new();\n+\n+        if let VariantData::Record(fields) = data.variant_data.as_ref() {\n+            for (_, field) in fields.iter() {\n+                let field_name = field.name.to_string();\n+                if let Some(new_name) = to_lower_snake_case(&field_name) {\n+                    let replacement = Replacement {\n+                        current_name: field.name.clone(),\n+                        suggested_text: new_name,\n+                        expected_case: CaseType::LowerSnakeCase,\n+                    };\n+                    struct_fields_replacements.push(replacement);\n+                }\n+            }\n+        }\n+\n+        // 3. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        self.create_incorrect_case_diagnostic_for_struct(\n+            struct_id,\n+            db,\n+            struct_name_replacement,\n+            struct_fields_replacements,\n+        )\n+    }\n+\n+    /// Given the information about incorrect names in the struct declaration, looks up into the source code\n+    /// for exact locations and adds diagnostics into the sink.\n+    fn create_incorrect_case_diagnostic_for_struct(\n+        &mut self,\n+        struct_id: StructId,\n+        db: &dyn HirDatabase,\n+        struct_name_replacement: Option<Replacement>,\n+        struct_fields_replacements: Vec<Replacement>,\n+    ) {\n+        // XXX: only look at sources if we do have incorrect names\n+        if struct_name_replacement.is_none() && struct_fields_replacements.is_empty() {\n+            return;\n+        }\n+\n+        let struct_loc = struct_id.lookup(db.upcast());\n+        let struct_src = struct_loc.source(db.upcast());\n+\n+        if let Some(replacement) = struct_name_replacement {\n+            let ast_ptr = if let Some(name) = struct_src.value.name() {\n+                name\n+            } else {\n+                // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n+                log::error!(\n+                    \"Replacement ({:?}) was generated for a structure without a name: {:?}\",\n+                    replacement,\n+                    struct_src\n+                );\n+                return;\n+            };\n+\n+            let diagnostic = IncorrectCase {\n+                file: struct_src.file_id,\n+                ident_type: \"Structure\".to_string(),\n+                ident: AstPtr::new(&ast_ptr).into(),\n+                expected_case: replacement.expected_case,\n+                ident_text: replacement.current_name.to_string(),\n+                suggested_text: replacement.suggested_text,\n+            };\n+\n+            self.sink.push(diagnostic);\n+        }\n+\n+        // let fn_params_list = match fn_src.value.param_list() {\n+        //     Some(params) => params,\n+        //     None => {\n+        //         if !fn_param_replacements.is_empty() {\n+        //             log::error!(\n+        //                 \"Replacements ({:?}) were generated for a function parameters which had no parameters list: {:?}\",\n+        //                 fn_param_replacements, fn_src\n+        //             );\n+        //         }\n+        //         return;\n+        //     }\n+        // };\n+        // let mut fn_params_iter = fn_params_list.params();\n+        // for param_to_rename in fn_param_replacements {\n+        //     // We assume that parameters in replacement are in the same order as in the\n+        //     // actual params list, but just some of them (ones that named correctly) are skipped.\n+        //     let ast_ptr = loop {\n+        //         match fn_params_iter.next() {\n+        //             Some(element)\n+        //                 if pat_equals_to_name(element.pat(), &param_to_rename.current_name) =>\n+        //             {\n+        //                 break element.pat().unwrap()\n+        //             }\n+        //             Some(_) => {}\n+        //             None => {\n+        //                 log::error!(\n+        //                     \"Replacement ({:?}) was generated for a function parameter which was not found: {:?}\",\n+        //                     param_to_rename, fn_src\n+        //                 );\n+        //                 return;\n+        //             }\n+        //         }\n+        //     };\n+\n+        //     let diagnostic = IncorrectCase {\n+        //         file: fn_src.file_id,\n+        //         ident_type: \"Argument\".to_string(),\n+        //         ident: AstPtr::new(&ast_ptr).into(),\n+        //         expected_case: param_to_rename.expected_case,\n+        //         ident_text: param_to_rename.current_name.to_string(),\n+        //         suggested_text: param_to_rename.suggested_text,\n+        //     };\n+\n+        //     self.sink.push(diagnostic);\n+        // }\n     }\n \n     fn validate_enum(&mut self, db: &dyn HirDatabase, enum_id: EnumId) {\n@@ -243,6 +371,16 @@ fn foo(SomeParam: u8) {}\n \n fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n                      // ^^^^^^^^^^ Argument `CAPS_PARAM` should have a snake_case name, e.g. `caps_param`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_struct_name() {\n+        check_diagnostics(\n+            r#\"\n+struct non_camel_case_name {}\n+    // ^^^^^^^^^^^^^^^^^^^ Structure `non_camel_case_name` should have a CamelCase name, e.g. `NonCamelCaseName`\n \"#,\n         );\n     }"}]}