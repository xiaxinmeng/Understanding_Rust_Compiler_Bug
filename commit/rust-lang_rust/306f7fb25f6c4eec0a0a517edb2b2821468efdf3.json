{"sha": "306f7fb25f6c4eec0a0a517edb2b2821468efdf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNmY3ZmIyNWY2YzRlZWMwYTBhNTE3ZWRiMmIyODIxNDY4ZWZkZjM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-12T08:14:21Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-12T09:05:20Z"}, "message": "Simplify copying of uniques\n\nWe can call take glue, rather than duplicating it inline.", "tree": {"sha": "494bd762eb2d74a252fa3c3860fcb50c0b43d4c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/494bd762eb2d74a252fa3c3860fcb50c0b43d4c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/306f7fb25f6c4eec0a0a517edb2b2821468efdf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/306f7fb25f6c4eec0a0a517edb2b2821468efdf3", "html_url": "https://github.com/rust-lang/rust/commit/306f7fb25f6c4eec0a0a517edb2b2821468efdf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/306f7fb25f6c4eec0a0a517edb2b2821468efdf3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75bda422df0c7816d4b987a564d11935a0cdb8db", "url": "https://api.github.com/repos/rust-lang/rust/commits/75bda422df0c7816d4b987a564d11935a0cdb8db", "html_url": "https://github.com/rust-lang/rust/commit/75bda422df0c7816d4b987a564d11935a0cdb8db"}], "stats": {"total": 30, "additions": 3, "deletions": 27}, "files": [{"sha": "0e3e95e5f9f8f2e252993a60a56887e2ea299970", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/306f7fb25f6c4eec0a0a517edb2b2821468efdf3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306f7fb25f6c4eec0a0a517edb2b2821468efdf3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=306f7fb25f6c4eec0a0a517edb2b2821468efdf3", "patch": "@@ -2092,22 +2092,12 @@ fn copy_val_no_check(bcx: @block_ctxt, action: copy_action, dst: ValueRef,\n         ret bcx;\n     }\n     if ty::type_is_nil(ccx.tcx, t) || ty::type_is_bot(ccx.tcx, t) { ret bcx; }\n-    if ty::type_is_boxed(ccx.tcx, t) {\n+    if ty::type_is_boxed(ccx.tcx, t) || ty::type_is_vec(ccx.tcx, t) ||\n+       ty::type_is_unique_box(ccx.tcx, t) {\n         if action == DROP_EXISTING { bcx = drop_ty(bcx, dst, t); }\n         Store(bcx, src, dst);\n         ret take_ty(bcx, dst, t);\n     }\n-    if ty::type_is_vec(ccx.tcx, t) {\n-        if action == DROP_EXISTING { bcx = drop_ty(bcx, dst, t); }\n-        let {bcx, val} = tvec::duplicate(bcx, src, t);\n-        Store(bcx, val, dst);\n-        ret bcx;\n-    }\n-    if ty::type_is_unique_box(ccx.tcx, t) {\n-        if action == DROP_EXISTING { bcx = drop_ty(bcx, dst, t); }\n-        check trans_uniq::type_is_unique_box(bcx, t);\n-        ret trans_uniq::copy_val(bcx, dst, src, t);\n-    }\n     if type_is_structural_or_param(ccx.tcx, t) {\n         if action == DROP_EXISTING { bcx = drop_ty(bcx, dst, t); }\n         bcx = memmove_ty(bcx, dst, src, t);"}, {"sha": "f1df608e8bf7c5fd7b2578c06be340874204e9cf", "filename": "src/comp/middle/trans_uniq.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/306f7fb25f6c4eec0a0a517edb2b2821468efdf3/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306f7fb25f6c4eec0a0a517edb2b2821468efdf3/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs?ref=306f7fb25f6c4eec0a0a517edb2b2821468efdf3", "patch": "@@ -15,8 +15,7 @@ import trans::{\n     dest\n };\n \n-export trans_uniq, make_free_glue, type_is_unique_box, copy_val,\n-autoderef, duplicate;\n+export trans_uniq, make_free_glue, type_is_unique_box, autoderef, duplicate;\n \n pure fn type_is_unique_box(bcx: @block_ctxt, ty: ty::t) -> bool {\n     ty::type_is_unique_box(bcx_tcx(bcx), ty)\n@@ -77,19 +76,6 @@ fn content_ty(bcx: @block_ctxt, t: ty::t)\n     }\n }\n \n-fn copy_val(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n-            ty: ty::t) : type_is_unique_box(cx, ty) -> @block_ctxt {\n-\n-    let content_ty = content_ty(cx, ty);\n-    let {bcx, val: llptr} = alloc_uniq(cx, ty);\n-    Store(bcx, llptr, dst);\n-\n-    let src = load_if_immediate(bcx, src, content_ty);\n-    let dst = llptr;\n-    let bcx = trans::copy_val(bcx, INIT, dst, src, content_ty);\n-    ret bcx;\n-}\n-\n fn autoderef(bcx: @block_ctxt, v: ValueRef, t: ty::t)\n     : type_is_unique_box(bcx, t) -> {v: ValueRef, t: ty::t} {\n "}]}