{"sha": "0ad3dce83a4506875e6b1381f5261e458b5c5d98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDNkY2U4M2E0NTA2ODc1ZTZiMTM4MWY1MjYxZTQ1OGI1YzVkOTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-03T22:06:58Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-03T22:08:19Z"}, "message": "Fix some clippy lints", "tree": {"sha": "e8b9b7cb2feed9babe16ca19bdc667e49c861a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b9b7cb2feed9babe16ca19bdc667e49c861a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad3dce83a4506875e6b1381f5261e458b5c5d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad3dce83a4506875e6b1381f5261e458b5c5d98", "html_url": "https://github.com/rust-lang/rust/commit/0ad3dce83a4506875e6b1381f5261e458b5c5d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad3dce83a4506875e6b1381f5261e458b5c5d98/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "html_url": "https://github.com/rust-lang/rust/commit/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "335f3b7a9a011b703480b1d1e19a31193f0830da", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -235,12 +235,10 @@ impl Annotatable {\n     pub fn derive_allowed(&self) -> bool {\n         match *self {\n             Annotatable::Stmt(ref stmt) => match stmt.kind {\n-                ast::StmtKind::Item(ref item) => match item.kind {\n-                    ast::ItemKind::Struct(..)\n-                    | ast::ItemKind::Enum(..)\n-                    | ast::ItemKind::Union(..) => true,\n-                    _ => false,\n-                },\n+                ast::StmtKind::Item(ref item) => matches!(\n+                    item.kind,\n+                    ast::ItemKind::Struct(..) | ast::ItemKind::Enum(..) | ast::ItemKind::Union(..)\n+                ),\n                 _ => false,\n             },\n             Annotatable::Item(ref item) => match item.kind {"}, {"sha": "7870252231aee6540fde0fef671ff8abec2e36d2", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -1134,7 +1134,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             if let Some(attr) = self.take_first_attr_no_derive(&mut expr) {\n                 // Collect the invoc regardless of whether or not attributes are permitted here\n                 // expansion will eat the attribute so it won't error later.\n-                attr.0.as_ref().map(|attr| self.cfg.maybe_emit_expr_attr_err(attr));\n+                if let Some(attr) = attr.0.as_ref() {\n+                    self.cfg.maybe_emit_expr_attr_err(attr)\n+                }\n \n                 // AstFragmentKind::Expr requires the macro to emit an expression.\n                 return self\n@@ -1231,7 +1233,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             self.cfg.configure_expr_kind(&mut expr.kind);\n \n             if let Some(attr) = self.take_first_attr_no_derive(&mut expr) {\n-                attr.0.as_ref().map(|attr| self.cfg.maybe_emit_expr_attr_err(attr));\n+                if let Some(attr) = attr.0.as_ref() {\n+                    self.cfg.maybe_emit_expr_attr_err(attr)\n+                }\n \n                 return self\n                     .collect_attr(attr, Annotatable::Expr(P(expr)), AstFragmentKind::OptExpr)"}, {"sha": "44dc6673564a5d12a88a46e0c8a9c2963e93c9c1", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -2401,7 +2401,7 @@ impl StructField<'_> {\n     // Still necessary in couple of places\n     pub fn is_positional(&self) -> bool {\n         let first = self.ident.as_str().as_bytes()[0];\n-        first >= b'0' && first <= b'9'\n+        (b'0'..=b'9').contains(&first)\n     }\n }\n "}, {"sha": "44fc4db7dc199fd7fd9f6ffaae750be288643222", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -267,8 +267,8 @@ pub fn is_whitespace(c: char) -> bool {\n pub fn is_id_start(c: char) -> bool {\n     // This is XID_Start OR '_' (which formally is not a XID_Start).\n     // We also add fast-path for ascii idents\n-    ('a' <= c && c <= 'z')\n-        || ('A' <= c && c <= 'Z')\n+    ('a'..='z').contains(&c)\n+        || ('A'..='Z').contains(&c)\n         || c == '_'\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n }\n@@ -279,9 +279,9 @@ pub fn is_id_start(c: char) -> bool {\n pub fn is_id_continue(c: char) -> bool {\n     // This is exactly XID_Continue.\n     // We also add fast-path for ascii idents\n-    ('a' <= c && c <= 'z')\n-        || ('A' <= c && c <= 'Z')\n-        || ('0' <= c && c <= '9')\n+    ('a'..='z').contains(&c)\n+        || ('A'..='Z').contains(&c)\n+        || ('0'..='9').contains(&c)\n         || c == '_'\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n }"}, {"sha": "bbbe568f17a8fbd303d8d25934cbd25156fb8ef3", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -1859,7 +1859,7 @@ impl<T: Iterator<Item = char>> Parser<T> {\n                             }\n \n                             let n2 = self.decode_hex_escape()?;\n-                            if n2 < 0xDC00 || n2 > 0xDFFF {\n+                            if !(0xDC00..=0xDFFF).contains(&n2) {\n                                 return self.error(LoneLeadingSurrogateInHexEscape);\n                             }\n                             let c ="}, {"sha": "5987fb2a198974a47baf836fd0b2242c11d93801", "filename": "compiler/rustc_span/src/analyze_source_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -97,7 +97,7 @@ cfg_if::cfg_if! {\n                 let ptr = src_bytes.as_ptr() as *const __m128i;\n                 // We don't know if the pointer is aligned to 16 bytes, so we\n                 // use `loadu`, which supports unaligned loading.\n-                let chunk = _mm_loadu_si128(ptr.offset(chunk_index as isize));\n+                let chunk = _mm_loadu_si128(ptr.add(chunk_index));\n \n                 // For character in the chunk, see if its byte value is < 0, which\n                 // indicates that it's part of a UTF-8 char.\n@@ -253,7 +253,7 @@ fn analyze_source_file_generic(\n             let pos = BytePos::from_usize(i) + output_offset;\n \n             if char_len > 1 {\n-                assert!(char_len >= 2 && char_len <= 4);\n+                assert!((2..=4).contains(&char_len));\n                 let mbc = MultiByteChar { pos, bytes: char_len as u8 };\n                 multi_byte_chars.push(mbc);\n             }"}, {"sha": "f63a73acbf4ba164c5130eaaa41e9e015f3be718", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -1015,10 +1015,7 @@ pub enum ExternalSourceKind {\n \n impl ExternalSource {\n     pub fn is_absent(&self) -> bool {\n-        match self {\n-            ExternalSource::Foreign { kind: ExternalSourceKind::Present(_), .. } => false,\n-            _ => true,\n-        }\n+        !matches!(self, ExternalSource::Foreign { kind: ExternalSourceKind::Present(_), .. })\n     }\n \n     pub fn get_source(&self) -> Option<&Lrc<String>> {"}, {"sha": "e9b4eb6e4abe0357a144b17a6e42dcde2cc6e8a7", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -623,7 +623,7 @@ impl SourceMap {\n         self.span_to_source(sp, |src, start_index, end_index| {\n             src.get(start_index..end_index)\n                 .map(|s| s.to_string())\n-                .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp))\n+                .ok_or(SpanSnippetError::IllFormedSpan(sp))\n         })\n     }\n \n@@ -640,9 +640,7 @@ impl SourceMap {\n     /// Returns the source snippet as `String` before the given `Span`.\n     pub fn span_to_prev_source(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, _| {\n-            src.get(..start_index)\n-                .map(|s| s.to_string())\n-                .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp))\n+            src.get(..start_index).map(|s| s.to_string()).ok_or(SpanSnippetError::IllFormedSpan(sp))\n         })\n     }\n "}, {"sha": "00854d9a3fc167043684698ddc8d1b6bd497c9be", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad3dce83a4506875e6b1381f5261e458b5c5d98/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0ad3dce83a4506875e6b1381f5261e458b5c5d98", "patch": "@@ -1362,15 +1362,13 @@ impl fmt::Display for IdentPrinter {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if self.is_raw {\n             f.write_str(\"r#\")?;\n-        } else {\n-            if self.symbol == kw::DollarCrate {\n-                if let Some(span) = self.convert_dollar_crate {\n-                    let converted = span.ctxt().dollar_crate_name();\n-                    if !converted.is_path_segment_keyword() {\n-                        f.write_str(\"::\")?;\n-                    }\n-                    return fmt::Display::fmt(&converted, f);\n+        } else if self.symbol == kw::DollarCrate {\n+            if let Some(span) = self.convert_dollar_crate {\n+                let converted = span.ctxt().dollar_crate_name();\n+                if !converted.is_path_segment_keyword() {\n+                    f.write_str(\"::\")?;\n                 }\n+                return fmt::Display::fmt(&converted, f);\n             }\n         }\n         fmt::Display::fmt(&self.symbol, f)"}]}