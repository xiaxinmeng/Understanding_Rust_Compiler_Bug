{"sha": "82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZTJmM2VjMjVhMzE2Yzc1MzZjMzNhNmI2NzA0MzY2YjE0Y2JmMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-20T17:54:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-20T17:54:27Z"}, "message": "Auto merge of #58791 - denzp:asm-compile-tests, r=alexcrichton\n\nIntroduce assembly tests suite\n\nThe change introduces a new test suite - **Assembly** tests. The motivation behind this is an ability to perform end-to-end codegen testing with LLVM backend. Turned out, NVPTX backend sometimes missing common Rust features (`i128` and libcalls in the past, and still full atomics support) due to different reasons.\n\nPrior to this change, basic NVPTX assembly tests were implemented within `run-make` suite. Now, it's easier to write additional and maintain existing tests for the target.\n\ncc @gnzlbg @peterhj\ncc @eddyb I adjusted mangling scheme expectation, so there is no need to change the tests for #57967", "tree": {"sha": "c74a0623d01c7798289955033a6c19356f0ccb7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74a0623d01c7798289955033a6c19356f0ccb7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "html_url": "https://github.com/rust-lang/rust/commit/82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c499ccfcded4f5be76d70f441a5c7c9d1260226", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c499ccfcded4f5be76d70f441a5c7c9d1260226", "html_url": "https://github.com/rust-lang/rust/commit/9c499ccfcded4f5be76d70f441a5c7c9d1260226"}, {"sha": "60f1644fd2746fd29520099d1667b6c3a3eb7b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/60f1644fd2746fd29520099d1667b6c3a3eb7b83", "html_url": "https://github.com/rust-lang/rust/commit/60f1644fd2746fd29520099d1667b6c3a3eb7b83"}], "stats": {"total": 467, "additions": 327, "deletions": 140}, "files": [{"sha": "a6db7923ed6906c488bdeea486ca7af197bbc90d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -374,6 +374,7 @@ impl<'a> Builder<'a> {\n                 test::MirOpt,\n                 test::Codegen,\n                 test::CodegenUnits,\n+                test::Assembly,\n                 test::Incremental,\n                 test::Debuginfo,\n                 test::UiFullDeps,"}, {"sha": "e3fd26534b5c775ca945304f1ed9032cb84510be", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -936,6 +936,12 @@ host_test!(RunMakeFullDeps {\n     suite: \"run-make-fulldeps\"\n });\n \n+default_test!(Assembly {\n+    path: \"src/test/assembly\",\n+    mode: \"assembly\",\n+    suite: \"assembly\"\n+});\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct Compiletest {\n     compiler: Compiler,"}, {"sha": "611a24a69bd37e4b94850e21fc84484dc55a0ba7", "filename": "src/ci/docker/test-various/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -53,7 +53,8 @@ ENV WASM_SCRIPT python2.7 /checkout/x.py test --target $WASM_TARGETS \\\n \n ENV NVPTX_TARGETS=nvptx64-nvidia-cuda\n ENV NVPTX_SCRIPT python2.7 /checkout/x.py test --target $NVPTX_TARGETS \\\n-  src/test/run-make\n+  src/test/run-make \\\n+  src/test/assembly\n \n ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n     CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \\"}, {"sha": "d54c1181e1a0c64fc87e7f15fb8c7e80a89fe340", "filename": "src/test/assembly/auxiliary/breakpoint-panic-handler.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fauxiliary%2Fbreakpoint-panic-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fauxiliary%2Fbreakpoint-panic-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fauxiliary%2Fbreakpoint-panic-handler.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,8 @@\n+#![feature(core_intrinsics)]\n+#![no_std]\n+\n+#[panic_handler]\n+unsafe fn breakpoint_panic_handler(_: &::core::panic::PanicInfo) -> ! {\n+    core::intrinsics::breakpoint();\n+    core::hint::unreachable_unchecked();\n+}"}, {"sha": "57f3ee87cdb9d7bad8e324ca310503ee023c8dbd", "filename": "src/test/assembly/auxiliary/non-inline-dependency.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fauxiliary%2Fnon-inline-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fauxiliary%2Fnon-inline-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fauxiliary%2Fnon-inline-dependency.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "previous_filename": "src/test/run-make/nvptx-dylib-crate/dep.rs"}, {"sha": "7fe71c33521a26b65fe7c40a3dd650753c8dd9e7", "filename": "src/test/assembly/nvptx-arch-default.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-default.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,12 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib\n+// only-nvptx64\n+\n+#![no_std]\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// Verify default target arch with ptx-linker.\n+// CHECK: .target sm_30\n+// CHECK: .address_size 64"}, {"sha": "0ca17729c0212fe44c43de5086dc950ab41229b1", "filename": "src/test/assembly/nvptx-arch-emit-asm.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-emit-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-emit-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-emit-asm.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,9 @@\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type rlib\n+// only-nvptx64\n+\n+#![no_std]\n+\n+// Verify default arch without ptx-linker involved.\n+// CHECK: .target sm_30\n+// CHECK: .address_size 64"}, {"sha": "f6b6e8ccaa127ee7f14cff3d5d125548075f624c", "filename": "src/test/assembly/nvptx-arch-link-arg.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-link-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-link-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-link-arg.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,12 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib -C link-arg=--arch=sm_60\n+// only-nvptx64\n+\n+#![no_std]\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// Verify target arch override via `link-arg`.\n+// CHECK: .target sm_60\n+// CHECK: .address_size 64"}, {"sha": "08a7a193bbd88bdfa5964fdf89ced429d790fa72", "filename": "src/test/assembly/nvptx-arch-target-cpu.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-target-cpu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-arch-target-cpu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-arch-target-cpu.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,12 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib -C target-cpu=sm_50\n+// only-nvptx64\n+\n+#![no_std]\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// Verify target arch override via `target-cpu`.\n+// CHECK: .target sm_50\n+// CHECK: .address_size 64"}, {"sha": "3bbd7b3d12d2a3ca8b516903cb2192f13d819114", "filename": "src/test/assembly/nvptx-atomics.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-atomics.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,85 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib\n+// only-nvptx64\n+\n+#![feature(abi_ptx, core_intrinsics)]\n+#![no_std]\n+\n+use core::intrinsics::*;\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// Currently, LLVM NVPTX backend can only emit atomic instructions with\n+// `relaxed` (PTX default) ordering. But it's also useful to make sure\n+// the backend won't fail with other orders. Apparently, the backend\n+// doesn't support fences as well. As a workaround `llvm.nvvm.membar.*`\n+// could work, and perhaps on the long run, all the atomic operations\n+// should rather be provided by `core::arch::nvptx`.\n+\n+// Also, PTX ISA doesn't have atomic `load`, `store` and `nand`.\n+\n+// FIXME(denzp): add tests for `core::sync::atomic::*`.\n+\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn atomics_kernel(a: *mut u32) {\n+    // CHECK: atom.global.and.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.and.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_and(a, 1);\n+    atomic_and_relaxed(a, 1);\n+\n+    // CHECK: atom.global.cas.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1, 2;\n+    // CHECK: atom.global.cas.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1, 2;\n+    atomic_cxchg(a, 1, 2);\n+    atomic_cxchg_relaxed(a, 1, 2);\n+\n+    // CHECK: atom.global.max.s32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.max.s32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_max(a, 1);\n+    atomic_max_relaxed(a, 1);\n+\n+    // CHECK: atom.global.min.s32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.min.s32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_min(a, 1);\n+    atomic_min_relaxed(a, 1);\n+\n+    // CHECK: atom.global.or.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.or.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_or(a, 1);\n+    atomic_or_relaxed(a, 1);\n+\n+    // CHECK: atom.global.max.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.max.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_umax(a, 1);\n+    atomic_umax_relaxed(a, 1);\n+\n+    // CHECK: atom.global.min.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.min.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_umin(a, 1);\n+    atomic_umin_relaxed(a, 1);\n+\n+    // CHECK: atom.global.add.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.add.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_xadd(a, 1);\n+    atomic_xadd_relaxed(a, 1);\n+\n+    // CHECK: atom.global.exch.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.exch.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_xchg(a, 1);\n+    atomic_xchg_relaxed(a, 1);\n+\n+    // CHECK: atom.global.xor.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    // CHECK: atom.global.xor.b32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], 1;\n+    atomic_xor(a, 1);\n+    atomic_xor_relaxed(a, 1);\n+\n+    // CHECK: mov.u32 %[[sub_0_arg:r[0-9]+]], 100;\n+    // CHECK: neg.s32 temp, %[[sub_0_arg]];\n+    // CHECK: atom.global.add.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], temp;\n+    atomic_xsub(a, 100);\n+\n+    // CHECK: mov.u32 %[[sub_1_arg:r[0-9]+]], 200;\n+    // CHECK: neg.s32 temp, %[[sub_1_arg]];\n+    // CHECK: atom.global.add.u32 %{{r[0-9]+}}, [%{{rd[0-9]+}}], temp;\n+    atomic_xsub_relaxed(a, 200);\n+}"}, {"sha": "db82264263226023b30d1e477435a354d6d8568d", "filename": "src/test/assembly/nvptx-internalizing.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-internalizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-internalizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-internalizing.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,27 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib\n+// only-nvptx64\n+\n+#![feature(abi_ptx)]\n+#![no_std]\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// aux-build: non-inline-dependency.rs\n+extern crate non_inline_dependency as dep;\n+\n+// Verify that no extra function declarations are present.\n+// CHECK-NOT: .func\n+\n+// CHECK: .visible .entry top_kernel(\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n+    // CHECK: add.s32 %{{r[0-9]+}}, %{{r[0-9]+}}, 5;\n+    *b = *a + 5;\n+}\n+\n+// Verify that no extra function definitions are here.\n+// CHECK-NOT: .func\n+// CHECK-NOT: .entry\n+"}, {"sha": "d88ed9139ca6aee0f8a6e8c710df01bd5f4e2e0f", "filename": "src/test/assembly/nvptx-linking-binary.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-linking-binary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-linking-binary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-linking-binary.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,39 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type bin\n+// only-nvptx64\n+\n+#![feature(abi_ptx)]\n+#![no_main]\n+#![no_std]\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// aux-build: non-inline-dependency.rs\n+extern crate non_inline_dependency as dep;\n+\n+// Make sure declarations are there.\n+// CHECK: .func (.param .b32 func_retval0) wrapping_external_fn\n+// CHECK: .func (.param .b32 func_retval0) panicking_external_fn\n+\n+// CHECK-LABEL: .visible .entry top_kernel(\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: wrapping_external_fn\n+    // CHECK:      ld.param.b32 %[[LHS:r[0-9]+]], [retval0+0];\n+    let lhs = dep::wrapping_external_fn(*a);\n+\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: panicking_external_fn\n+    // CHECK:      ld.param.b32 %[[RHS:r[0-9]+]], [retval0+0];\n+    let rhs = dep::panicking_external_fn(*a);\n+\n+    // CHECK: add.s32 %[[RES:r[0-9]+]], %[[RHS]], %[[LHS]];\n+    // CHECK: st.global.u32 [%{{rd[0-9]+}}], %[[RES]];\n+    *b = lhs + rhs;\n+}\n+\n+// Verify that external function bodies are available.\n+// CHECK: .func (.param .b32 func_retval0) wrapping_external_fn\n+// CHECK: .func (.param .b32 func_retval0) panicking_external_fn"}, {"sha": "1145f567d8c17c9cf50d200e8081bbdcd18f7d80", "filename": "src/test/assembly/nvptx-linking-cdylib.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-linking-cdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-linking-cdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-linking-cdylib.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -0,0 +1,38 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib\n+// only-nvptx64\n+\n+#![feature(abi_ptx)]\n+#![no_std]\n+\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n+\n+// aux-build: non-inline-dependency.rs\n+extern crate non_inline_dependency as dep;\n+\n+// Make sure declarations are there.\n+// CHECK: .func (.param .b32 func_retval0) wrapping_external_fn\n+// CHECK: .func (.param .b32 func_retval0) panicking_external_fn\n+\n+// CHECK-LABEL: .visible .entry top_kernel(\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: wrapping_external_fn\n+    // CHECK:      ld.param.b32 %[[LHS:r[0-9]+]], [retval0+0];\n+    let lhs = dep::wrapping_external_fn(*a);\n+\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: panicking_external_fn\n+    // CHECK:      ld.param.b32 %[[RHS:r[0-9]+]], [retval0+0];\n+    let rhs = dep::panicking_external_fn(*a);\n+\n+    // CHECK: add.s32 %[[RES:r[0-9]+]], %[[RHS]], %[[LHS]];\n+    // CHECK: st.global.u32 [%{{rd[0-9]+}}], %[[RES]];\n+    *b = lhs + rhs;\n+}\n+\n+// Verify that external function bodies are available.\n+// CHECK: .func (.param .b32 func_retval0) wrapping_external_fn\n+// CHECK: .func (.param .b32 func_retval0) panicking_external_fn"}, {"sha": "ab6f91423aad67ad9eb073fd1e349526ae166b1c", "filename": "src/test/assembly/nvptx-safe-naming.rs", "status": "renamed", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-safe-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftest%2Fassembly%2Fnvptx-safe-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-safe-naming.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -1,13 +1,15 @@\n-#![no_std]\n-#![deny(warnings)]\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib\n+// only-nvptx64\n+\n #![feature(abi_ptx)]\n+#![no_std]\n \n-// Verify the default CUDA arch.\n-// CHECK: .target sm_30\n-// CHECK: .address_size 64\n+// aux-build: breakpoint-panic-handler.rs\n+extern crate breakpoint_panic_handler;\n \n // Verify function name doesn't contain unacceaptable characters.\n-// CHECK: .func (.param .b32 func_retval0) [[IMPL_FN:_ZN[a-zA-Z0-9$_]+square[a-zA-Z0-9$_]+]]\n+// CHECK: .func (.param .b32 func_retval0) [[IMPL_FN:[a-zA-Z0-9$_]+square[a-zA-Z0-9$_]+]](\n \n // CHECK-LABEL: .visible .entry top_kernel(\n #[no_mangle]\n@@ -33,9 +35,3 @@ pub mod deep {\n         }\n     }\n }\n-\n-// Verify that external function bodies are available.\n-// CHECK: .func (.param .b32 func_retval0) [[IMPL_FN]]\n-// CHECK: {\n-// CHECK:   mul.lo.s32 %{{r[0-9]+}}, %{{r[0-9]+}}, %{{r[0-9]+}}\n-// CHECK: }", "previous_filename": "src/test/run-make/nvptx-emit-asm/kernel.rs"}, {"sha": "2c211b5c7850794d389c9c2c36d7bc7793caa68d", "filename": "src/test/run-make/nvptx-binary-crate/Makefile", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2FMakefile?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -1,12 +0,0 @@\n--include ../../run-make-fulldeps/tools.mk\n-\n-ifeq ($(TARGET),nvptx64-nvidia-cuda)\n-all:\n-\t$(RUSTC) main.rs --crate-type=\"bin\" --target $(TARGET) -O -C link-arg=--arch=sm_60 -o $(TMPDIR)/main.link_arg.ptx\n-\t$(RUSTC) main.rs --crate-type=\"bin\" --target $(TARGET) -O -C target-cpu=sm_60 -o $(TMPDIR)/main.target_cpu.ptx\n-\n-\tFileCheck main.rs --input-file $(TMPDIR)/main.link_arg.ptx\n-\tFileCheck main.rs --input-file $(TMPDIR)/main.target_cpu.ptx\n-else\n-all:\n-endif"}, {"sha": "826bc3a47bbd633df852443dcb2d5adf7cc7c6ad", "filename": "src/test/run-make/nvptx-binary-crate/main.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2Fmain.rs?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -1,28 +0,0 @@\n-#![no_std]\n-#![no_main]\n-#![deny(warnings)]\n-#![feature(abi_ptx, core_intrinsics)]\n-\n-// Check the overriden CUDA arch.\n-// CHECK: .target sm_60\n-// CHECK: .address_size 64\n-\n-// Verify that no extra function declarations are present.\n-// CHECK-NOT: .func\n-\n-// CHECK-LABEL: .visible .entry top_kernel(\n-#[no_mangle]\n-pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n-    // CHECK: add.s32 %{{r[0-9]+}}, %{{r[0-9]+}}, 5;\n-    *b = *a + 5;\n-}\n-\n-// Verify that no extra function definitions are there.\n-// CHECK-NOT: .func\n-// CHECK-NOT: .entry\n-\n-#[panic_handler]\n-unsafe fn breakpoint_panic_handler(_: &::core::panic::PanicInfo) -> ! {\n-    core::intrinsics::breakpoint();\n-    core::hint::unreachable_unchecked();\n-}"}, {"sha": "7284e9d1a7c9968ca6b64fbeb29cb04d75c404a3", "filename": "src/test/run-make/nvptx-dylib-crate/Makefile", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2FMakefile?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -1,10 +0,0 @@\n--include ../../run-make-fulldeps/tools.mk\n-\n-ifeq ($(TARGET),nvptx64-nvidia-cuda)\n-all:\n-\t$(RUSTC) dep.rs --crate-type=\"rlib\" --target $(TARGET)\n-\t$(RUSTC) kernel.rs --crate-type=\"cdylib\" -O --target $(TARGET)\n-\tFileCheck kernel.rs --input-file $(TMPDIR)/kernel.ptx\n-else\n-all:\n-endif"}, {"sha": "63fd6b063dd8c01e47acd4d1b46b5ae3c08da3c9", "filename": "src/test/run-make/nvptx-dylib-crate/kernel.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fkernel.rs?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -1,59 +0,0 @@\n-#![no_std]\n-#![deny(warnings)]\n-#![feature(abi_ptx, core_intrinsics)]\n-\n-extern crate dep;\n-\n-// Verify the default CUDA arch.\n-// CHECK: .target sm_30\n-// CHECK: .address_size 64\n-\n-// Make sure declarations are there.\n-// CHECK: .func (.param .b32 func_retval0) wrapping_external_fn\n-// CHECK: .func (.param .b32 func_retval0) panicking_external_fn\n-// CHECK: .func [[PANIC_HANDLER:_ZN4core9panicking5panic[a-zA-Z0-9]+]]\n-\n-// CHECK-LABEL: .visible .entry top_kernel(\n-#[no_mangle]\n-pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n-    // CHECK:      call.uni (retval0),\n-    // CHECK-NEXT: wrapping_external_fn\n-    // CHECK:      ld.param.b32 %[[LHS:r[0-9]+]], [retval0+0];\n-    let lhs = dep::wrapping_external_fn(*a);\n-\n-    // CHECK:      call.uni (retval0),\n-    // CHECK-NEXT: panicking_external_fn\n-    // CHECK:      ld.param.b32 %[[RHS:r[0-9]+]], [retval0+0];\n-    let rhs = dep::panicking_external_fn(*a);\n-\n-    // CHECK: add.s32 %[[RES:r[0-9]+]], %[[RHS]], %[[LHS]];\n-    // CHECK: st.global.u32 [%{{rd[0-9]+}}], %[[RES]];\n-    *b = lhs + rhs;\n-}\n-\n-// Verify that external function bodies are available.\n-// CHECK-LABEL: .func (.param .b32 func_retval0) wrapping_external_fn\n-// CHECK: {\n-// CHECK:   st.param.b32 [func_retval0+0], %{{r[0-9]+}};\n-// CHECK: }\n-\n-// Also verify panic behavior.\n-// CHECK-LABEL: .func (.param .b32 func_retval0) panicking_external_fn\n-// CHECK: {\n-// CHECK:   %{{p[0-9]+}} bra [[PANIC_LABEL:[a-zA-Z0-9_]+]];\n-// CHECK: [[PANIC_LABEL]]:\n-// CHECK:   call.uni\n-// CHECK:   [[PANIC_HANDLER]]\n-// CHECK: }\n-\n-// Verify whether out dummy panic formatter has a correct body.\n-// CHECK: .func [[PANIC_FMT:_ZN4core9panicking9panic_fmt[a-zA-Z0-9]+]]()\n-// CHECK: {\n-// CHECK:   trap;\n-// CHECK: }\n-\n-#[panic_handler]\n-unsafe fn breakpoint_panic_handler(_: &::core::panic::PanicInfo) -> ! {\n-    core::intrinsics::breakpoint();\n-    core::hint::unreachable_unchecked();\n-}"}, {"sha": "e03601878bdee32d02385270bac1230380bbb798", "filename": "src/test/run-make/nvptx-emit-asm/Makefile", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9c499ccfcded4f5be76d70f441a5c7c9d1260226/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2FMakefile?ref=9c499ccfcded4f5be76d70f441a5c7c9d1260226", "patch": "@@ -1,9 +0,0 @@\n--include ../../run-make-fulldeps/tools.mk\n-\n-ifeq ($(TARGET),nvptx64-nvidia-cuda)\n-all:\n-\t$(RUSTC) kernel.rs --crate-type=\"rlib\" --emit asm,llvm-ir -O --target $(TARGET)\n-\tFileCheck kernel.rs --input-file $(TMPDIR)/kernel.s\n-else\n-all:\n-endif"}, {"sha": "80b8a8b728bb227c5e5714d6f013435fe5868a5e", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -26,6 +26,7 @@ pub enum Mode {\n     Ui,\n     JsDocTest,\n     MirOpt,\n+    Assembly,\n }\n \n impl Mode {\n@@ -62,6 +63,7 @@ impl FromStr for Mode {\n             \"ui\" => Ok(Ui),\n             \"js-doc-test\" => Ok(JsDocTest),\n             \"mir-opt\" => Ok(MirOpt),\n+            \"assembly\" => Ok(Assembly),\n             _ => Err(()),\n         }\n     }\n@@ -86,6 +88,7 @@ impl fmt::Display for Mode {\n             Ui => \"ui\",\n             JsDocTest => \"js-doc-test\",\n             MirOpt => \"mir-opt\",\n+            Assembly => \"assembly\",\n         };\n         fmt::Display::fmt(s, f)\n     }"}, {"sha": "7bf56707478e3ca1d5f6ff93e442e9a9f7b62bcf", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -335,6 +335,7 @@ pub struct TestProps {\n     pub failure_status: i32,\n     pub run_rustfix: bool,\n     pub rustfix_only_machine_applicable: bool,\n+    pub assembly_output: Option<String>,\n }\n \n impl TestProps {\n@@ -370,6 +371,7 @@ impl TestProps {\n             failure_status: -1,\n             run_rustfix: false,\n             rustfix_only_machine_applicable: false,\n+            assembly_output: None,\n         }\n     }\n \n@@ -517,6 +519,10 @@ impl TestProps {\n                 self.rustfix_only_machine_applicable =\n                     config.parse_rustfix_only_machine_applicable(ln);\n             }\n+\n+            if self.assembly_output.is_none() {\n+                self.assembly_output = config.parse_assembly_output(ln);\n+            }\n         });\n \n         if self.failure_status == -1 {\n@@ -594,6 +600,7 @@ impl Config {\n \n     fn parse_aux_build(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"aux-build\")\n+            .map(|r| r.trim().to_string())\n     }\n \n     fn parse_compile_flags(&self, line: &str) -> Option<String> {\n@@ -676,6 +683,11 @@ impl Config {\n         self.parse_name_directive(line, \"skip-codegen\")\n     }\n \n+    fn parse_assembly_output(&self, line: &str) -> Option<String> {\n+        self.parse_name_value_directive(line, \"assembly-output\")\n+            .map(|r| r.trim().to_string())\n+    }\n+\n     fn parse_env(&self, line: &str, name: &str) -> Option<(String, String)> {\n         self.parse_name_value_directive(line, name).map(|nv| {\n             // nv is either FOO or FOO=BAR"}, {"sha": "3e3499edf60f0adcece88754bcfa8a81dd2de410", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -4,7 +4,7 @@ use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use crate::common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use crate::common::{Config, TestPaths};\n-use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest};\n+use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n@@ -275,6 +275,7 @@ impl<'test> TestCx<'test> {\n             RunMake => self.run_rmake_test(),\n             RunPass | Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n+            Assembly => self.run_assembly_test(),\n             JsDocTest => self.run_js_doc_test(),\n         }\n     }\n@@ -1606,6 +1607,7 @@ impl<'test> TestCx<'test> {\n                 || self.config.target.contains(\"emscripten\")\n                 || (self.config.target.contains(\"musl\") && !aux_props.force_host)\n                 || self.config.target.contains(\"wasm32\")\n+                || self.config.target.contains(\"nvptx\")\n             {\n                 // We primarily compile all auxiliary libraries as dynamic libraries\n                 // to avoid code size bloat and large binaries as much as possible\n@@ -1805,7 +1807,7 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(dir_opt);\n             }\n             RunFail | RunPassValgrind | Pretty | DebugInfoBoth | DebugInfoGdb | DebugInfoLldb\n-            | Codegen | Rustdoc | RunMake | CodegenUnits | JsDocTest => {\n+            | Codegen | Rustdoc | RunMake | CodegenUnits | JsDocTest | Assembly => {\n                 // do not use JSON output\n             }\n         }\n@@ -2100,12 +2102,37 @@ impl<'test> TestCx<'test> {\n         self.compose_and_run_compiler(rustc, None)\n     }\n \n-    fn check_ir_with_filecheck(&self) -> ProcRes {\n-        let irfile = self.output_base_name().with_extension(\"ll\");\n+    fn compile_test_and_save_assembly(&self) -> (ProcRes, PathBuf) {\n+        // This works with both `--emit asm` (as default output name for the assembly)\n+        // and `ptx-linker` because the latter can write output at requested location.\n+        let output_path = self.output_base_name().with_extension(\"s\");\n+\n+        let output_file = TargetLocation::ThisFile(output_path.clone());\n+        let mut rustc = self.make_compile_args(&self.testpaths.file, output_file);\n+\n+        rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n+\n+        match self.props.assembly_output.as_ref().map(AsRef::as_ref) {\n+            Some(\"emit-asm\") => {\n+                rustc.arg(\"--emit=asm\");\n+            }\n+\n+            Some(\"ptx-linker\") => {\n+                // No extra flags needed.\n+            }\n+\n+            Some(_) => self.fatal(\"unknown 'assembly-output' header\"),\n+            None => self.fatal(\"missing 'assembly-output' header\"),\n+        }\n+\n+        (self.compose_and_run_compiler(rustc, None), output_path)\n+    }\n+\n+    fn verify_with_filecheck(&self, output: &Path) -> ProcRes {\n         let mut filecheck = Command::new(self.config.llvm_filecheck.as_ref().unwrap());\n         filecheck\n             .arg(\"--input-file\")\n-            .arg(irfile)\n+            .arg(output)\n             .arg(&self.testpaths.file);\n         // It would be more appropriate to make most of the arguments configurable through\n         // a comment-attribute similar to `compile-flags`. For example, --check-prefixes is a very\n@@ -2124,12 +2151,29 @@ impl<'test> TestCx<'test> {\n             self.fatal(\"missing --llvm-filecheck\");\n         }\n \n-        let mut proc_res = self.compile_test_and_save_ir();\n+        let proc_res = self.compile_test_and_save_ir();\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n+        }\n+\n+        let output_path = self.output_base_name().with_extension(\"ll\");\n+        let proc_res = self.verify_with_filecheck(&output_path);\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"verification with 'FileCheck' failed\", &proc_res);\n+        }\n+    }\n+\n+    fn run_assembly_test(&self) {\n+        if self.config.llvm_filecheck.is_none() {\n+            self.fatal(\"missing --llvm-filecheck\");\n+        }\n+\n+        let (proc_res, output_path) = self.compile_test_and_save_assembly();\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n-        proc_res = self.check_ir_with_filecheck();\n+        let proc_res = self.verify_with_filecheck(&output_path);\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"verification with 'FileCheck' failed\", &proc_res);\n         }"}, {"sha": "50dce4b55ae8609e380ed4e2751ad1779dcae83c", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e2f3ec25a316c7536c33a6b6704366b14cbf2a/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "patch": "@@ -41,7 +41,6 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"armv7\", \"arm\"),\n     (\"armv7s\", \"arm\"),\n     (\"asmjs\", \"asmjs\"),\n-    (\"cuda\", \"cuda\"),\n     (\"hexagon\", \"hexagon\"),\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),\n@@ -59,6 +58,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"mipsisa64r6\", \"mips64\"),\n     (\"mipsisa64r6el\", \"mips64\"),\n     (\"msp430\", \"msp430\"),\n+    (\"nvptx64\", \"nvptx64\"),\n     (\"powerpc\", \"powerpc\"),\n     (\"powerpc64\", \"powerpc64\"),\n     (\"powerpc64le\", \"powerpc64\"),\n@@ -166,7 +166,7 @@ fn test_get_arch_failure() {\n fn test_get_arch() {\n     assert_eq!(\"x86_64\", get_arch(\"x86_64-unknown-linux-gnu\"));\n     assert_eq!(\"x86_64\", get_arch(\"amd64\"));\n-    assert_eq!(\"cuda\", get_arch(\"nvptx64-nvidia-cuda\"));\n+    assert_eq!(\"nvptx64\", get_arch(\"nvptx64-nvidia-cuda\"));\n }\n \n #[test]"}]}