{"sha": "c71cec8834bf30032a8e49d2949f6d8d4080b639", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MWNlYzg4MzRiZjMwMDMyYThlNDlkMjk0OWY2ZDhkNDA4MGI2Mzk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-14T17:29:07Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-27T11:46:27Z"}, "message": "end_point handling multibyte characters correctly.", "tree": {"sha": "49dc11292d287459c01aeddbd4c40240de9b2e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49dc11292d287459c01aeddbd4c40240de9b2e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71cec8834bf30032a8e49d2949f6d8d4080b639", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlpsZpMACgkQAXYLT59T\n8VQcpg//R/Yilv3ubcjBP8aYOgN6xIQCGc+TiLu3K0UCqWzpiMjCUMklak4TErpo\nugH6e/6tRhSGdgT8u5jgO8TpS46mJGZzvobwZLPTYMDjSTmGKmOktovLTvVNXUyW\noF1myEPBNZcE0U1cVsG868+dojcmwk9YSNP4FyltF2eO4Wbhe5fkT9Kql7knR8N5\nZYvntVJ7/A23EVayxmD6RPKaLZ3veB1/0SOVHloVrOHmrg14uihOE2yPeqnmxmdA\nNVSzxM451ADrqE2PVuMSshfQ8/eedDx+yGkkOa54ifXSK/vcJMet2T26m8Kw/BDA\nxuE+GmAbOpXZxscuh4W79HcugAT/AKFGSR6w2U5H4fZeuLo8pCUFjZ6r/nfU49vz\n8vuBK1fzaeMpmb8U7O+bCMVhO7Uce1JC6TF34MuJyVbTGxz+p2cqHnv7wEvm0h5l\npC9gip2lf0T1lLNi/as+q82k85SNSdnZ+RdTRuRL23Ar9T4d63/EnU6Bp/wexhmx\nvOzNPJ21b7P0Sn6IwqyENAoXQyfOiwEl04IOEhgRMOfe+mfmYEmTPrs4cDcYi6OQ\n31YZurkouOqX3RXzLOiGAgaPHidp0/p2vlWwS/nEe3SNw5joQmtpMupwg1HeY6L2\noVU30kHymCEPaSucbpJiq4D4sP4+0YazLpmK6eDL5LvdVBhw0DI=\n=KZ06\n-----END PGP SIGNATURE-----", "payload": "tree 49dc11292d287459c01aeddbd4c40240de9b2e16\nparent c6e6428d1a13f61f5ffbe43697a21f3cd82cd01d\nauthor David Wood <david@davidtw.co> 1515950947 +0000\ncommitter David Wood <david@davidtw.co> 1517053587 +0000\n\nend_point handling multibyte characters correctly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71cec8834bf30032a8e49d2949f6d8d4080b639", "html_url": "https://github.com/rust-lang/rust/commit/c71cec8834bf30032a8e49d2949f6d8d4080b639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71cec8834bf30032a8e49d2949f6d8d4080b639/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e6428d1a13f61f5ffbe43697a21f3cd82cd01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e6428d1a13f61f5ffbe43697a21f3cd82cd01d", "html_url": "https://github.com/rust-lang/rust/commit/c6e6428d1a13f61f5ffbe43697a21f3cd82cd01d"}], "stats": {"total": 96, "additions": 61, "deletions": 35}, "files": [{"sha": "b10e742595720dc595863c124d1404ce9d74f8b8", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -958,7 +958,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n                             let sp = if has_lifetimes {\n-                                sp.to(sp.next_point().next_point())\n+                                sp.to(self.tcx.sess.codemap().next_point(\n+                                        self.tcx.sess.codemap().next_point(sp)))\n                             } else {\n                                 sp\n                             };"}, {"sha": "9888b2fffc7792beaa1a8c4590a185966f372621", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -591,8 +591,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             // 3. Where does old loan expire.\n \n             let previous_end_span =\n-                Some(old_loan.kill_scope.span(self.tcx(), &self.bccx.region_scope_tree)\n-                     .end_point());\n+                Some(self.tcx().sess.codemap().end_point(\n+                        old_loan.kill_scope.span(self.tcx(), &self.bccx.region_scope_tree)));\n \n             let mut err = match (new_loan.kind, old_loan.kind) {\n                 (ty::MutBorrow, ty::MutBorrow) =>"}, {"sha": "b35e8c6b41953dc27c870b314b823ca5f57bf516", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -1276,7 +1276,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     fn region_end_span(&self, region: ty::Region<'tcx>) -> Option<Span> {\n         match *region {\n             ty::ReScope(scope) => {\n-                Some(scope.span(self.tcx, &self.region_scope_tree).end_point())\n+                Some(self.tcx.sess.codemap().end_point(\n+                        scope.span(self.tcx, &self.region_scope_tree)))\n             }\n             _ => None\n         }"}, {"sha": "f69236516630ded31a4709edb1ded82c96427c3a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -1112,10 +1112,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             debug!(\"check_for_invalidation_at_exit({:?}): INVALID\", place);\n             // FIXME: should be talking about the region lifetime instead\n             // of just a span here.\n+            let span = self.tcx.sess.codemap().end_point(span);\n             self.report_borrowed_value_does_not_live_long_enough(\n                 context,\n                 borrow,\n-                span.end_point(),\n+                span,\n                 flow_state.borrows.operator(),\n             )\n         }"}, {"sha": "a631ab27d1c872bf50800437c988fd103b0c13d1", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -699,7 +699,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let region_scope_span = region_scope.span(self.hir.tcx(),\n                                                           &self.hir.region_scope_tree);\n                 // Attribute scope exit drops to scope's closing brace.\n-                let scope_end = region_scope_span.end_point();\n+                let scope_end = self.hir.tcx().sess.codemap().end_point(region_scope_span);\n \n                 scope.drops.push(DropData {\n                     span: scope_end,"}, {"sha": "d7cd8830adb00f78b9d4390a5c091c0719d4f228", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -537,8 +537,8 @@ impl<'a, 'gcx, 'tcx> ActiveBorrows<'a, 'gcx, 'tcx> {\n             Some(_) => None,\n             None => {\n                 match self.0.region_span_map.get(region) {\n-                    Some(span) => Some(span.end_point()),\n-                    None => Some(self.0.mir.span.end_point())\n+                    Some(span) => Some(self.0.tcx.sess.codemap().end_point(*span)),\n+                    None => Some(self.0.tcx.sess.codemap().end_point(self.0.mir.span))\n                 }\n             }\n         }"}, {"sha": "f7228fc3314c30b43f02da009db506316f1d9388", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -2871,8 +2871,8 @@ impl<'a> Resolver<'a> {\n         if let Some(sp) = self.current_type_ascription.last() {\n             let mut sp = *sp;\n             loop {  // try to find the `:`, bail on first non-':'/non-whitespace\n-                sp = sp.next_point();\n-                if let Ok(snippet) = cm.span_to_snippet(sp.to(sp.next_point())) {\n+                sp = cm.next_point(sp);\n+                if let Ok(snippet) = cm.span_to_snippet(sp.to(cm.next_point(sp))) {\n                     debug!(\"snippet {:?}\", snippet);\n                     let line_sp = cm.lookup_char_pos(sp.hi()).line;\n                     let line_base_sp = cm.lookup_char_pos(base_span.lo()).line;"}, {"sha": "9b24c09036bce9e893317f1871a0968bf43a61b9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -2457,7 +2457,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = expr_sp.end_point();\n+                let sugg_span = sess.codemap().end_point(expr_sp);\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.with_hi(sugg_span.lo());\n                 err.span_suggestion(\n@@ -4446,10 +4446,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// statement and the return type has been left as default or has been specified as `()`. If so,\n     /// it suggests adding a semicolon.\n     fn suggest_missing_semicolon(&self,\n-                                     err: &mut DiagnosticBuilder<'tcx>,\n-                                     expression: &'gcx hir::Expr,\n-                                     expected: Ty<'tcx>,\n-                                     cause_span: Span) {\n+                                 err: &mut DiagnosticBuilder<'tcx>,\n+                                 expression: &'gcx hir::Expr,\n+                                 expected: Ty<'tcx>,\n+                                 cause_span: Span) {\n         if expected.is_nil() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n             // useful on its own.\n@@ -4461,7 +4461,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 hir::ExprLoop(..) |\n                 hir::ExprMatch(..) |\n                 hir::ExprBlock(..) => {\n-                    let sp = cause_span.next_point();\n+                    let sp = self.tcx.sess.codemap().next_point(cause_span);\n                     err.span_suggestion(sp,\n                                         \"try adding a semicolon\",\n                                         \";\".to_string());"}, {"sha": "e74066da0ac83183662be1ea5a9cd2a8376aa823", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -25,6 +25,7 @@ pub use self::ExpnFormat::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use std::cell::{RefCell, Ref};\n+use std::cmp;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n@@ -607,6 +608,42 @@ impl CodeMap {\n         self.span_until_char(sp, '{')\n     }\n \n+    /// Returns a new span representing just the end-point of this span\n+    pub fn end_point(&self, sp: Span) -> Span {\n+        let hi = sp.hi().0.checked_sub(1).unwrap_or(sp.hi().0);\n+        let hi = self.get_start_of_char_bytepos(BytePos(hi));\n+        let lo = cmp::max(hi.0, sp.lo().0);\n+        sp.with_lo(BytePos(lo))\n+    }\n+\n+    /// Returns a new span representing the next character after the end-point of this span\n+    pub fn next_point(&self, sp: Span) -> Span {\n+        let hi = sp.lo().0.checked_add(1).unwrap_or(sp.lo().0);\n+        let hi = self.get_start_of_char_bytepos(BytePos(hi));\n+        let lo = cmp::max(sp.hi().0, hi.0);\n+        Span::new(BytePos(lo), BytePos(lo), sp.ctxt())\n+    }\n+\n+    fn get_start_of_char_bytepos(&self, bpos: BytePos) -> BytePos {\n+        let idx = self.lookup_filemap_idx(bpos);\n+        let files = self.files.borrow();\n+        let map = &(*files)[idx];\n+\n+        for mbc in map.multibyte_chars.borrow().iter() {\n+            if mbc.pos < bpos {\n+                if bpos.to_usize() >= mbc.pos.to_usize() + mbc.bytes {\n+                    // If we do, then return the start of the character.\n+                    return mbc.pos;\n+                }\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        // If this isn't a multibyte character, return the original position.\n+        return bpos;\n+    }\n+\n     pub fn get_filemap(&self, filename: &FileName) -> Option<Rc<FileMap>> {\n         for fm in self.files.borrow().iter() {\n             if *filename == fm.name {"}, {"sha": "e8e87e2854b777db8ae86cd0262487cad70e3fd3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -704,13 +704,15 @@ impl<'a> Parser<'a> {\n                     expect.clone()\n                 };\n                 (format!(\"expected one of {}, found `{}`\", expect, actual),\n-                 (self.prev_span.next_point(), format!(\"expected one of {} here\", short_expect)))\n+                 (self.sess.codemap().next_point(self.prev_span),\n+                  format!(\"expected one of {} here\", short_expect)))\n             } else if expected.is_empty() {\n                 (format!(\"unexpected token: `{}`\", actual),\n                  (self.prev_span, \"unexpected token after this\".to_string()))\n             } else {\n                 (format!(\"expected {}, found `{}`\", expect, actual),\n-                 (self.prev_span.next_point(), format!(\"expected {} here\", expect)))\n+                 (self.sess.codemap().next_point(self.prev_span),\n+                  format!(\"expected {} here\", expect)))\n             };\n             let mut err = self.fatal(&msg_exp);\n             let sp = if self.token == token::Token::Eof {\n@@ -3190,7 +3192,7 @@ impl<'a> Parser<'a> {\n         // return. This won't catch blocks with an explicit `return`, but that would be caught by\n         // the dead code lint.\n         if self.eat_keyword(keywords::Else) || !cond.returns() {\n-            let sp = lo.next_point();\n+            let sp = self.sess.codemap().next_point(lo);\n             let mut err = self.diagnostic()\n                 .struct_span_err(sp, \"missing condition for `if` statemement\");\n             err.span_label(sp, \"expected if condition here\");"}, {"sha": "dd1ec7284f6901320987f68a3bd325bf2ad5201f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71cec8834bf30032a8e49d2949f6d8d4080b639/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=c71cec8834bf30032a8e49d2949f6d8d4080b639", "patch": "@@ -216,22 +216,6 @@ impl Span {\n         self.data().with_ctxt(ctxt)\n     }\n \n-    /// Returns a new span representing just the end-point of this span\n-    pub fn end_point(self) -> Span {\n-        let span = self.data();\n-        // We can avoid an ICE by checking if subtraction would cause an overflow.\n-        let hi = if span.hi.0 == u32::min_value() { span.hi.0 } else { span.hi.0 - 1 };\n-        let lo = cmp::max(hi, span.lo.0);\n-        span.with_lo(BytePos(lo))\n-    }\n-\n-    /// Returns a new span representing the next character after the end-point of this span\n-    pub fn next_point(self) -> Span {\n-        let span = self.data();\n-        let lo = cmp::max(span.hi.0, span.lo.0 + 1);\n-        Span::new(BytePos(lo), BytePos(lo), span.ctxt)\n-    }\n-\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.source_equal(&DUMMY_SP) { other } else { self }"}]}