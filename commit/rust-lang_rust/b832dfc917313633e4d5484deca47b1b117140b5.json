{"sha": "b832dfc917313633e4d5484deca47b1b117140b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzJkZmM5MTczMTM2MzNlNGQ1NDg0ZGVjYTQ3YjFiMTE3MTQwYjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-06T16:18:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T16:18:17Z"}, "message": "Merge #4331\n\n4331: Fixture improvements r=TimoFreiberg a=TimoFreiberg\n\nAs mentioned in [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolve_path.20between.20fixture.20files) :)\r\n\r\nI think always allowing unindented first lines is friendlier than making the user fix it and I don't see any drawbacks.\n\nCo-authored-by: Timo Freiberg <timo.freiberg@gmail.com>", "tree": {"sha": "168b4bf3ecc2eafc1967fd94605e6821541ea359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168b4bf3ecc2eafc1967fd94605e6821541ea359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b832dfc917313633e4d5484deca47b1b117140b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesuNJCRBK7hj4Ov3rIwAAdHIIAG+ZMZbvhFcbPLO/b0ZclhME\ngX26yAQtgRcFAo+ddQ0ikhkPSktBYf6W+UsmJa//jMSbflVrCTwEWWpmYeywzB6W\nPRP+0ck344+jA9MVyqAAxWKJfFomfsNNDaD1l020MlTxj0QsSthGyY3xGUDdwc+R\nWIbrK+IsaDghpWMFTaxeTvS+jKq2tzzBa+iRWebwqOVHrb1BWkHXyBN06zVn3Mmu\ngR/+ntyBJrGsJHEC7FL0T375PfZiZ6G7LkRav93jAp/eAKjU8qOsdnbihTQftUAg\nzjjLWJS2uiRaX+FwUTR2JXS20oUXhcX76vpGGqKSYtjZlEJ/K+z+8id3rUpkXvw=\n=QNv7\n-----END PGP SIGNATURE-----\n", "payload": "tree 168b4bf3ecc2eafc1967fd94605e6821541ea359\nparent fbc8bd3fdbbeed199901d6f387ab57d82aac6e04\nparent 86fa80e5b3860ee2446dcf29355c314d6dc4365a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588781897 +0000\ncommitter GitHub <noreply@github.com> 1588781897 +0000\n\nMerge #4331\n\n4331: Fixture improvements r=TimoFreiberg a=TimoFreiberg\n\nAs mentioned in [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/resolve_path.20between.20fixture.20files) :)\r\n\r\nI think always allowing unindented first lines is friendlier than making the user fix it and I don't see any drawbacks.\n\nCo-authored-by: Timo Freiberg <timo.freiberg@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b832dfc917313633e4d5484deca47b1b117140b5", "html_url": "https://github.com/rust-lang/rust/commit/b832dfc917313633e4d5484deca47b1b117140b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b832dfc917313633e4d5484deca47b1b117140b5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc8bd3fdbbeed199901d6f387ab57d82aac6e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc8bd3fdbbeed199901d6f387ab57d82aac6e04", "html_url": "https://github.com/rust-lang/rust/commit/fbc8bd3fdbbeed199901d6f387ab57d82aac6e04"}, {"sha": "86fa80e5b3860ee2446dcf29355c314d6dc4365a", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fa80e5b3860ee2446dcf29355c314d6dc4365a", "html_url": "https://github.com/rust-lang/rust/commit/86fa80e5b3860ee2446dcf29355c314d6dc4365a"}], "stats": {"total": 151, "additions": 140, "deletions": 11}, "files": [{"sha": "51d4c493e3ed9b76e0071aac49d23a317b6b13d1", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b832dfc917313633e4d5484deca47b1b117140b5/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b832dfc917313633e4d5484deca47b1b117140b5/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=b832dfc917313633e4d5484deca47b1b117140b5", "patch": "@@ -1,4 +1,48 @@\n-//! FIXME: write short doc here\n+//! Fixtures are strings containing rust source code with optional metadata.\n+//! A fixture without metadata is parsed into a single source file.\n+//! Use this to test functionality local to one file.\n+//!\n+//! Example:\n+//! ```\n+//! r#\"\n+//! fn main() {\n+//!     println!(\"Hello World\")\n+//! }\n+//! \"#\n+//! ```\n+//!\n+//! Metadata can be added to a fixture after a `//-` comment.\n+//! The basic form is specifying filenames,\n+//! which is also how to define multiple files in a single test fixture\n+//!\n+//! Example:\n+//! ```\n+//! \"\n+//! //- /main.rs\n+//! mod foo;\n+//! fn main() {\n+//!     foo::bar();\n+//! }\n+//!\n+//! //- /foo.rs\n+//! pub fn bar() {}\n+//! \"\n+//! ```\n+//!\n+//! Metadata allows specifying all settings and variables\n+//! that are available in a real rust project:\n+//! - crate names via `crate:cratename`\n+//! - dependencies via `deps:dep1,dep2`\n+//! - configuration settings via `cfg:dbg=false,opt_level=2`\n+//! - environment variables via `env:PATH=/bin,RUST_LOG=debug`\n+//!\n+//! Example:\n+//! ```\n+//! \"\n+//! //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n+//! fn insert_source_code_here() {}\n+//! \"\n+//! ```\n \n use std::str::FromStr;\n use std::sync::Arc;"}, {"sha": "b13e13af2aab4803ddf153f3fa7279a3a02536ae", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b832dfc917313633e4d5484deca47b1b117140b5/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b832dfc917313633e4d5484deca47b1b117140b5/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=b832dfc917313633e4d5484deca47b1b117140b5", "patch": "@@ -155,7 +155,7 @@ pub fn add_cursor(text: &str, offset: TextSize) -> String {\n     res\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Eq, PartialEq)]\n pub struct FixtureEntry {\n     pub meta: String,\n     pub text: String,\n@@ -170,19 +170,26 @@ pub struct FixtureEntry {\n ///  // - other meta\n ///  ```\n pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n-    let margin = fixture\n-        .lines()\n-        .filter(|it| it.trim_start().starts_with(\"//-\"))\n-        .map(|it| it.len() - it.trim_start().len())\n-        .next()\n-        .expect(\"empty fixture\");\n+    let fixture = indent_first_line(fixture);\n+    let margin = fixture_margin(&fixture);\n \n     let mut lines = fixture\n         .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n-        .filter_map(|line| {\n+        .enumerate()\n+        .filter_map(|(ix, line)| {\n             if line.len() >= margin {\n                 assert!(line[..margin].trim().is_empty());\n-                Some(&line[margin..])\n+                let line_content = &line[margin..];\n+                if !line_content.starts_with(\"//-\") {\n+                    assert!(\n+                        !line_content.contains(\"//-\"),\n+                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n+The offending line: {:?}\"#,\n+                        ix,\n+                        line\n+                    );\n+                }\n+                Some(line_content)\n             } else {\n                 assert!(line.trim().is_empty());\n                 None\n@@ -202,6 +209,85 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n     res\n }\n \n+/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n+/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n+/// the other lines visually:\n+/// ```\n+/// let fixture = \"//- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \";\n+/// assert_eq!(fixture_margin(fixture),\n+/// \"               //- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \")\n+/// ```\n+fn indent_first_line(fixture: &str) -> String {\n+    if fixture.is_empty() {\n+        return String::new();\n+    }\n+    let mut lines = fixture.lines();\n+    let first_line = lines.next().unwrap();\n+    if first_line.contains(\"//-\") {\n+        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n+        let fixed_margin = fixture_margin(&rest);\n+        let fixed_indent = fixed_margin - indent_len(first_line);\n+        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n+    } else {\n+        fixture.to_owned()\n+    }\n+}\n+\n+fn fixture_margin(fixture: &str) -> usize {\n+    fixture\n+        .lines()\n+        .filter(|it| it.trim_start().starts_with(\"//-\"))\n+        .map(indent_len)\n+        .next()\n+        .expect(\"empty fixture\")\n+}\n+\n+fn indent_len(s: &str) -> usize {\n+    s.len() - s.trim_start().len()\n+}\n+\n+#[test]\n+#[should_panic]\n+fn parse_fixture_checks_further_indented_metadata() {\n+    parse_fixture(\n+        r\"\n+        //- /lib.rs\n+          mod bar;\n+\n+          fn foo() {}\n+          //- /bar.rs\n+          pub fn baz() {}\n+          \",\n+    );\n+}\n+\n+#[test]\n+fn parse_fixture_can_handle_unindented_first_line() {\n+    let fixture = \"//- /lib.rs\n+                   mod foo;\n+                   //- /foo.rs\n+                   struct Bar;\n+\";\n+    assert_eq!(\n+        parse_fixture(fixture),\n+        parse_fixture(\n+            \"//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+struct Bar;\n+\"\n+        )\n+    )\n+}\n+\n /// Same as `parse_fixture`, except it allow empty fixture\n pub fn parse_single_fixture(fixture: &str) -> Option<FixtureEntry> {\n     if !fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {"}, {"sha": "b8e8860ba1e1d4cc5b5c819da252fc164936e5a3", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b832dfc917313633e4d5484deca47b1b117140b5/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b832dfc917313633e4d5484deca47b1b117140b5/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=b832dfc917313633e4d5484deca47b1b117140b5", "patch": "@@ -136,7 +136,6 @@ impl TidyDocs {\n         }\n \n         let whitelist = [\n-            \"ra_db\",\n             \"ra_hir\",\n             \"ra_hir_expand\",\n             \"ra_ide\","}]}