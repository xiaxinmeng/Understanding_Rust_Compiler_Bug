{"sha": "2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMmFiZTlhNzViMGE5ZDMwYjAyMGRmNWE5ZTQ2ZTk2Y2FjODlkNTc=", "commit": {"author": {"name": "Przemys\u0142aw Weso\u0142ek", "email": "jest@go.art.pl", "date": "2015-04-25T14:46:34Z"}, "committer": {"name": "Przemys\u0142aw Weso\u0142ek", "email": "jest@go.art.pl", "date": "2015-04-25T14:48:44Z"}, "message": "A number of spell-checking corrections.", "tree": {"sha": "5da3503eceb60e45043c927410394b5a9962de44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da3503eceb60e45043c927410394b5a9962de44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "html_url": "https://github.com/rust-lang/rust/commit/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/comments", "author": {"login": "jest", "id": 161816, "node_id": "MDQ6VXNlcjE2MTgxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/161816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jest", "html_url": "https://github.com/jest", "followers_url": "https://api.github.com/users/jest/followers", "following_url": "https://api.github.com/users/jest/following{/other_user}", "gists_url": "https://api.github.com/users/jest/gists{/gist_id}", "starred_url": "https://api.github.com/users/jest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jest/subscriptions", "organizations_url": "https://api.github.com/users/jest/orgs", "repos_url": "https://api.github.com/users/jest/repos", "events_url": "https://api.github.com/users/jest/events{/privacy}", "received_events_url": "https://api.github.com/users/jest/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jest", "id": 161816, "node_id": "MDQ6VXNlcjE2MTgxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/161816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jest", "html_url": "https://github.com/jest", "followers_url": "https://api.github.com/users/jest/followers", "following_url": "https://api.github.com/users/jest/following{/other_user}", "gists_url": "https://api.github.com/users/jest/gists{/gist_id}", "starred_url": "https://api.github.com/users/jest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jest/subscriptions", "organizations_url": "https://api.github.com/users/jest/orgs", "repos_url": "https://api.github.com/users/jest/repos", "events_url": "https://api.github.com/users/jest/events{/privacy}", "received_events_url": "https://api.github.com/users/jest/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3d00a49803fa75580b912463666d86ce2ee3bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d00a49803fa75580b912463666d86ce2ee3bb8", "html_url": "https://github.com/rust-lang/rust/commit/e3d00a49803fa75580b912463666d86ce2ee3bb8"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a892f67d571af9bd9c7cb221c74be5c15177ed4d", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -8,7 +8,7 @@ good at: embedding in other languages, programs with specific space and time\n requirements, and writing low-level code, like device drivers and operating\n systems. It improves on current languages targeting this space by having a\n number of compile-time safety checks that produce no runtime overhead, while\n-eliminating all data races. Rust also aims to achieve \u2018zero-cost abstrations\u2019\n+eliminating all data races. Rust also aims to achieve \u2018zero-cost abstractions\u2019\n even though some of these abstractions feel like those of a high-level\n language. Even then, Rust still allows precise control like a low-level\n language would."}, {"sha": "d7fa84761e5271e770d29d671b46c23f555e0ac5", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -294,7 +294,7 @@ is `Fn(i32) -> i32`.\n \n There\u2019s one other key point here: because we\u2019re bounding a generic with a\n trait, this will get monomorphized, and therefore, we\u2019ll be doing static\n-dispatch into the closure. That\u2019s pretty neat. In many langauges, closures are\n+dispatch into the closure. That\u2019s pretty neat. In many languages, closures are\n inherently heap allocated, and will always involve dynamic dispatch. In Rust,\n we can stack allocate our closure environment, and statically dispatch the\n call. This happens quite often with iterators and their adapters, which often"}, {"sha": "b28343e7fb94c75f7acd8d654bad07c4098720b1", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -556,7 +556,7 @@ This sets a few different options, with a logo, favicon, and a root URL.\n \n ## Generation options\n \n-`rustdoc` also contains a few other options on the command line, for further customiziation:\n+`rustdoc` also contains a few other options on the command line, for further customization:\n \n - `--html-in-header FILE`: includes the contents of FILE at the end of the\n   `<head>...</head>` section."}, {"sha": "816bfb17970619374a2147deddecc16fad7cb920", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -129,7 +129,7 @@ about it first.\n \n ## Field-level mutability\n \n-Mutabilty is a property of either a borrow (`&mut`) or a binding (`let mut`).\n+Mutability is a property of either a borrow (`&mut`) or a binding (`let mut`).\n This means that, for example, you cannot have a [`struct`][struct] with\n some fields mutable and some immutable:\n "}, {"sha": "c01129057418cf1af9db4d73fb37ed52d4133f19", "filename": "src/doc/trpl/trait-objects.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftrait-objects.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -155,7 +155,7 @@ A function that takes a trait object is not specialized to each of the types\n that implements `Foo`: only one copy is generated, often (but not always)\n resulting in less code bloat. However, this comes at the cost of requiring\n slower virtual function calls, and effectively inhibiting any chance of\n-inlining and related optimisations from occurring.\n+inlining and related optimizations from occurring.\n \n ### Why pointers?\n "}, {"sha": "ea5d2ed711fed0f0aac66be1db7c909014ff5339", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -184,7 +184,7 @@ won\u2019t have its methods:\n ```rust,ignore\n let mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\n let result = f.write(\"whatever\".as_bytes());\n-# result.unwrap(); // ignore the erorr\n+# result.unwrap(); // ignore the error\n ```\n \n Here\u2019s the error:\n@@ -203,7 +203,7 @@ use std::io::Write;\n \n let mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\n let result = f.write(\"whatever\".as_bytes());\n-# result.unwrap(); // ignore the erorr\n+# result.unwrap(); // ignore the error\n ```\n \n This will compile without error."}, {"sha": "50ad506e3a702d98ccb12d3c1159e9c11a03b968", "filename": "src/doc/trpl/variable-bindings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c2abe9a75b0a9d30b020df5a9e46e96cac89d57/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md?ref=2c2abe9a75b0a9d30b020df5a9e46e96cac89d57", "patch": "@@ -1,6 +1,6 @@\n % Variable Bindings\n \n-Vitually every non-\u2019Hello World\u2019 Rust program uses *variable bindings*. They\n+Virtually every non-\u2019Hello World\u2019 Rust program uses *variable bindings*. They\n look like this:\n \n ```rust"}]}