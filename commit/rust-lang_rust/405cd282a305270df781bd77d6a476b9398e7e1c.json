{"sha": "405cd282a305270df781bd77d6a476b9398e7e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNWNkMjgyYTMwNTI3MGRmNzgxYmQ3N2Q2YTQ3NmI5Mzk4ZTdlMWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T23:04:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T23:04:31Z"}, "message": "Typo fixes to docs, from Ralph Giles.", "tree": {"sha": "d9daae8a80c5f29d3ec9d4d5936c3c24e0655645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9daae8a80c5f29d3ec9d4d5936c3c24e0655645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/405cd282a305270df781bd77d6a476b9398e7e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/405cd282a305270df781bd77d6a476b9398e7e1c", "html_url": "https://github.com/rust-lang/rust/commit/405cd282a305270df781bd77d6a476b9398e7e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/405cd282a305270df781bd77d6a476b9398e7e1c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eba370aa2b65484b028316c9715f216012d2810", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eba370aa2b65484b028316c9715f216012d2810", "html_url": "https://github.com/rust-lang/rust/commit/2eba370aa2b65484b028316c9715f216012d2810"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "0b6f0cae5abe013f85b229ad28096218a424b0f3", "filename": "doc/rust.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/405cd282a305270df781bd77d6a476b9398e7e1c/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/405cd282a305270df781bd77d6a476b9398e7e1c/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=405cd282a305270df781bd77d6a476b9398e7e1c", "patch": "@@ -1201,9 +1201,9 @@ different tasks. Like any other immutable type, they can pass over channels,\n and live as long as the last task referencing them within a given domain. When\n unreferenced, they are destroyed immediately (due to reference-counting) and\n returned to the heap memory allocator. Destruction of an immutable box also\n-executes within the context of task that drops the last reference to a shared\n-heap allocation, so executing a long-running destructor does not interrupt\n-execution of other tasks.\n+executes within the context of the task that drops the last reference to a\n+shared heap allocation, so executing a long-running destructor does not\n+interrupt execution of other tasks.\n \n \n @node       Ref.Mem.Own\n@@ -2997,7 +2997,7 @@ by the runtime or emitted to a system console. Log statements are enabled or\n disabled dynamically at run-time on a per-task and per-item\n basis. @xref{Ref.Run.Log}.\n \n-Executing a @code{log} statement not considered an @code{io} effect in the\n+Executing a @code{log} statement is not considered an @code{io} effect in the\n effect system. In other words, a pure function remains pure even if it\n contains a log statement.\n \n@@ -3046,10 +3046,11 @@ completes normally, the runtime will not log the path.\n \n A value that is marked by a @code{note} statement is @emph{not} copied aside\n when control passes through the @code{note}. In other words, if a @code{note}\n-statement notes a particular @var{lval}, and code after the @code{note} that\n-slot, and then a subsequent failure occurs, the @emph{mutated} value will be\n-logged during unwinding, @emph{not} the original value that was denoted by the\n-@var{lval} at the moment control passed through the @code{note} statement.\n+statement notes a particular @var{lval}, and code after the @code{note}\n+mutates that slot, and then a subsequent failure occurs, the @emph{mutated}\n+value will be logged during unwinding, @emph{not} the original value that was\n+denoted by the @var{lval} at the moment control passed through the @code{note}\n+statement.\n \n @node       Ref.Stmt.While\n @subsection Ref.Stmt.While"}, {"sha": "891e1336c555fe6b6da1772a3867e08550948493", "filename": "src/boot/README", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/405cd282a305270df781bd77d6a476b9398e7e1c/src%2Fboot%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/405cd282a305270df781bd77d6a476b9398e7e1c/src%2Fboot%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2FREADME?ref=405cd282a305270df781bd77d6a476b9398e7e1c", "patch": "@@ -398,7 +398,7 @@ Probably-bad ideas we will want to do differently in the self-hosted compiler:\n   ever-more constraints (is_resolved(ast), is_typechecked(ast), etc.)\n \n - Trans should be organized as pure and value-producing code, not imperatively\n-  emitting quads into emitters. LLVM will enforce this anwyays. See what\n+  emitting quads into emitters. LLVM will enforce this anyways. See what\n   happened in lltrans.ml if you're curious what it'll look (more) like.\n \n - The PIC scheme will have to change, hopefully get much easier."}]}