{"sha": "3f661dab14bb5a6f1eed41efaf3cf41a8080df87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjYxZGFiMTRiYjVhNmYxZWVkNDFlZmFmM2NmNDFhODA4MGRmODc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-07T17:22:35Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-07T18:28:55Z"}, "message": "Add `hir::ConstContext`", "tree": {"sha": "3009e82473c45062b0e2cbf59c3bdc835f7273bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3009e82473c45062b0e2cbf59c3bdc835f7273bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f661dab14bb5a6f1eed41efaf3cf41a8080df87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f661dab14bb5a6f1eed41efaf3cf41a8080df87", "html_url": "https://github.com/rust-lang/rust/commit/3f661dab14bb5a6f1eed41efaf3cf41a8080df87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f661dab14bb5a6f1eed41efaf3cf41a8080df87/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "03b8fdf1aa390ade6ebd5d4b72ffdbc695447f76", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3f661dab14bb5a6f1eed41efaf3cf41a8080df87/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f661dab14bb5a6f1eed41efaf3cf41a8080df87/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=3f661dab14bb5a6f1eed41efaf3cf41a8080df87", "patch": "@@ -1291,6 +1291,53 @@ impl BodyOwnerKind {\n     }\n }\n \n+/// The kind of an item that requires const-checking.\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub enum ConstContext {\n+    /// A `const fn`.\n+    ConstFn,\n+\n+    /// A `static` or `static mut`.\n+    Static(Mutability),\n+\n+    /// A `const`, associated `const`, or other const context.\n+    ///\n+    /// Other contexts include:\n+    /// - Array length expressions\n+    /// - Enum discriminants\n+    /// - Const generics\n+    ///\n+    /// For the most part, other contexts are treated just like a regular `const`, so they are\n+    /// lumped into the same category.\n+    Const,\n+}\n+\n+impl ConstContext {\n+    /// A description of this const context that can appear between backticks in an error message.\n+    ///\n+    /// E.g. `const` or `static mut`.\n+    pub fn keyword_name(self) -> &'static str {\n+        match self {\n+            Self::Const => \"const\",\n+            Self::Static(Mutability::Not) => \"static\",\n+            Self::Static(Mutability::Mut) => \"static mut\",\n+            Self::ConstFn => \"const fn\",\n+        }\n+    }\n+}\n+\n+/// A colloquial, trivially pluralizable description of this const context for use in error\n+/// messages.\n+impl fmt::Display for ConstContext {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            Self::Const => write!(f, \"constant\"),\n+            Self::Static(_) => write!(f, \"static\"),\n+            Self::ConstFn => write!(f, \"constant function\"),\n+        }\n+    }\n+}\n+\n /// A literal.\n pub type Lit = Spanned<LitKind>;\n "}, {"sha": "235d1d80192c883805d9cfefe229f0b201049757", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f661dab14bb5a6f1eed41efaf3cf41a8080df87/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f661dab14bb5a6f1eed41efaf3cf41a8080df87/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=3f661dab14bb5a6f1eed41efaf3cf41a8080df87", "patch": "@@ -408,6 +408,9 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n+    /// Returns the `BodyOwnerKind` of this `LocalDefId`.\n+    ///\n+    /// Panics if `LocalDefId` does not have an associated body.\n     pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {\n         match self.get(id) {\n             Node::Item(&Item { kind: ItemKind::Const(..), .. })\n@@ -424,6 +427,23 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Returns the `ConstContext` of the body associated with this `LocalDefId`.\n+    ///\n+    /// Panics if `LocalDefId` does not have an associated body.\n+    pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {\n+        let hir_id = self.local_def_id_to_hir_id(did);\n+        let ccx = match self.body_owner_kind(hir_id) {\n+            BodyOwnerKind::Const => ConstContext::Const,\n+            BodyOwnerKind::Static(mt) => ConstContext::Static(mt),\n+\n+            BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,\n+            BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,\n+            BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,\n+        };\n+\n+        Some(ccx)\n+    }\n+\n     pub fn ty_param_owner(&self, id: HirId) -> HirId {\n         match self.get(id) {\n             Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => id,"}]}