{"sha": "b9a201c6dff196fc759fb1f1d3d292691fc5d99a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YTIwMWM2ZGZmMTk2ZmM3NTlmYjFmMWQzZDI5MjY5MWZjNWQ5OWE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-18T20:28:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-18T20:28:31Z"}, "message": "address review comments", "tree": {"sha": "2fa1a379c55395d8c11dac54c65144b19319e0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa1a379c55395d8c11dac54c65144b19319e0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9a201c6dff196fc759fb1f1d3d292691fc5d99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a201c6dff196fc759fb1f1d3d292691fc5d99a", "html_url": "https://github.com/rust-lang/rust/commit/b9a201c6dff196fc759fb1f1d3d292691fc5d99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9a201c6dff196fc759fb1f1d3d292691fc5d99a/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b344c7171e2e798307513393445739390ded6908", "url": "https://api.github.com/repos/rust-lang/rust/commits/b344c7171e2e798307513393445739390ded6908", "html_url": "https://github.com/rust-lang/rust/commit/b344c7171e2e798307513393445739390ded6908"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "542dfcbe6284f7b1111a4fbb4692706561dc266f", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b9a201c6dff196fc759fb1f1d3d292691fc5d99a/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a201c6dff196fc759fb1f1d3d292691fc5d99a/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b9a201c6dff196fc759fb1f1d3d292691fc5d99a", "patch": "@@ -523,7 +523,7 @@ impl<T> SliceExt for [T] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::Index<usize> for [T] {\n     type Output = T;\n \n@@ -534,7 +534,7 @@ impl<T> ops::Index<usize> for [T] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::IndexMut<usize> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: usize) -> &mut T {\n@@ -568,7 +568,7 @@ fn slice_index_order_fail(index: usize, end: usize) -> ! {\n /// Requires that `begin <= end` and `end <= self.len()`,\n /// otherwise slicing will panic.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::Index<ops::Range<usize>> for [T] {\n     type Output = [T];\n \n@@ -595,7 +595,7 @@ impl<T> ops::Index<ops::Range<usize>> for [T] {\n ///\n /// Equivalent to `&self[0 .. end]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::Index<ops::RangeTo<usize>> for [T] {\n     type Output = [T];\n \n@@ -611,7 +611,7 @@ impl<T> ops::Index<ops::RangeTo<usize>> for [T] {\n ///\n /// Equivalent to `&self[begin .. self.len()]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::Index<ops::RangeFrom<usize>> for [T] {\n     type Output = [T];\n \n@@ -637,7 +637,7 @@ impl<T> ops::Index<RangeFull> for [T] {\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::Index<ops::RangeInclusive<usize>> for [T] {\n     type Output = [T];\n \n@@ -653,7 +653,7 @@ impl<T> ops::Index<ops::RangeInclusive<usize>> for [T] {\n     }\n }\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::Index<ops::RangeToInclusive<usize>> for [T] {\n     type Output = [T];\n \n@@ -674,7 +674,7 @@ impl<T> ops::Index<ops::RangeToInclusive<usize>> for [T] {\n /// Requires that `begin <= end` and `end <= self.len()`,\n /// otherwise slicing will panic.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::IndexMut<ops::Range<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n@@ -699,7 +699,7 @@ impl<T> ops::IndexMut<ops::Range<usize>> for [T] {\n ///\n /// Equivalent to `&mut self[0 .. end]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::IndexMut<ops::RangeTo<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n@@ -713,7 +713,7 @@ impl<T> ops::IndexMut<ops::RangeTo<usize>> for [T] {\n ///\n /// Equivalent to `&mut self[begin .. self.len()]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::IndexMut<ops::RangeFrom<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] {\n@@ -736,7 +736,7 @@ impl<T> ops::IndexMut<RangeFull> for [T] {\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] {\n@@ -750,7 +750,7 @@ impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for [T] {\n     }\n }\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"slice indices are of type usize\"]\n+#[rustc_on_unimplemented = \"slice indices are of type `usize`\"]\n impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {"}, {"sha": "6a8f9d471e1692254619e788ed400abfec7299a3", "filename": "src/test/compile-fail/on-unimplemented/slice-index.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a201c6dff196fc759fb1f1d3d292691fc5d99a/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a201c6dff196fc759fb1f1d3d292691fc5d99a/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs?ref=b9a201c6dff196fc759fb1f1d3d292691fc5d99a", "patch": "@@ -18,7 +18,7 @@ use std::ops::Index;\n fn main() {\n     let x = &[1, 2, 3] as &[i32];\n     x[1i32]; //~ ERROR E0277\n-             //~| NOTE slice indices are of type usize\n+             //~| NOTE slice indices are of type `usize`\n     x[..1i32]; //~ ERROR E0277\n-               //~| NOTE slice indices are of type usize\n+               //~| NOTE slice indices are of type `usize`\n }", "previous_filename": "src/test/compile-fail/on-unimplemented/libcore-index.rs"}]}