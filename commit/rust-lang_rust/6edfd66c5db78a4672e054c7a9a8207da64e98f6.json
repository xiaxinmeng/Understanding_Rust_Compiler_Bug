{"sha": "6edfd66c5db78a4672e054c7a9a8207da64e98f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZGZkNjZjNWRiNzhhNDY3MmUwNTRjN2E5YTgyMDdkYTY0ZTk4ZjY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-03-25T04:13:05Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-14T01:48:55Z"}, "message": "Use \"generator\" instead of \"future\" when appropriate", "tree": {"sha": "aefd2fe2ce02f7d45270cfdcb8381a78b7bf6d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefd2fe2ce02f7d45270cfdcb8381a78b7bf6d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6edfd66c5db78a4672e054c7a9a8207da64e98f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6edfd66c5db78a4672e054c7a9a8207da64e98f6", "html_url": "https://github.com/rust-lang/rust/commit/6edfd66c5db78a4672e054c7a9a8207da64e98f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6edfd66c5db78a4672e054c7a9a8207da64e98f6/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7127ff3d94fa5102bbe9b95da17d7e57bac355dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7127ff3d94fa5102bbe9b95da17d7e57bac355dd", "html_url": "https://github.com/rust-lang/rust/commit/7127ff3d94fa5102bbe9b95da17d7e57bac355dd"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "0f4fbc41d161108fb39009b55eaab97df545e670", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6edfd66c5db78a4672e054c7a9a8207da64e98f6", "patch": "@@ -1281,13 +1281,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let source_map = self.tcx.sess.source_map();\n \n-        let is_async_fn = self\n-            .tcx\n-            .parent(inner_generator)\n-            .map(|parent_did| self.tcx.asyncness(parent_did))\n-            .map(|parent_asyncness| parent_asyncness == hir::IsAsync::Async)\n-            .unwrap_or(false);\n-        let is_async_move = self\n+        let is_async = self\n             .tcx\n             .hir()\n             .as_local_hir_id(inner_generator)\n@@ -1299,7 +1293,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 _ => false,\n             })\n             .unwrap_or(false);\n-        let await_or_yield = if is_async_fn || is_async_move { \"await\" } else { \"yield\" };\n+        let await_or_yield = if is_async { \"await\" } else { \"yield\" };\n+        let future_or_generator = if is_async { \"future\" } else { \"generator\" };\n \n         // Special case the primary error message when send or sync is the trait that was\n         // not implemented.\n@@ -1312,7 +1307,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n             err.clear_code();\n             err.set_primary_message(format!(\n-                \"future cannot be {} between threads safely\",\n+                \"{} cannot be {} between threads safely\",\n+                future_or_generator,\n                 trait_verb\n             ));\n \n@@ -1335,14 +1331,18 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             format!(\"future created by async closure is not {}\", trait_name),\n                     }\n                 ))\n-                .unwrap_or_else(|| format!(\"future is not {}\", trait_name));\n+                .unwrap_or_else(|| format!(\"{} is not {}\", future_or_generator, trait_name));\n \n             span.push_span_label(original_span, message);\n             err.set_span(span);\n \n-            format!(\"is not {}\", trait_name)\n+            format!(\"{} is not {}\", future_or_generator, trait_name)\n         } else {\n-            format!(\"does not implement `{}`\", trait_ref.print_only_trait_path())\n+            format!(\n+                \"{} does not implement `{}`\",\n+                future_or_generator,\n+                trait_ref.print_only_trait_path()\n+            )\n         };\n \n         // Look at the last interior type to get a span for the `.await`.\n@@ -1370,10 +1370,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         err.span_note(\n             span,\n-            &format!(\n-                \"future {} as this value is used across an {}\",\n-                trait_explanation, await_or_yield,\n-            ),\n+            &format!(\"{} as this value is used across an {}\", trait_explanation, await_or_yield),\n         );\n \n         if let Some(expr_id) = expr {"}, {"sha": "9ab2abf740572049a22c93b11c18fb4b091b56bf", "filename": "src/test/ui/generator/issue-68112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=6edfd66c5db78a4672e054c7a9a8207da64e98f6", "patch": "@@ -31,7 +31,7 @@ fn test1() {\n         yield;\n     };\n     require_send(send_gen);\n-    //~^ ERROR future cannot be sent between threads\n+    //~^ ERROR generator cannot be sent between threads\n }\n \n pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {"}, {"sha": "f40771d2826d65f540f3ec1462bcfc398a3c258e", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=6edfd66c5db78a4672e054c7a9a8207da64e98f6", "patch": "@@ -1,4 +1,4 @@\n-error: future cannot be sent between threads safely\n+error: generator cannot be sent between threads safely\n   --> $DIR/issue-68112.rs:33:5\n    |\n LL | fn require_send(_: impl Send) {}\n@@ -8,7 +8,7 @@ LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n-note: future is not `Send` as this value is used across an yield\n+note: generator is not `Send` as this value is used across an yield\n   --> $DIR/issue-68112.rs:31:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();"}, {"sha": "8ca5565fb2ab551982a5143b50682bedee8f3919", "filename": "src/test/ui/generator/not-send-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.rs?ref=6edfd66c5db78a4672e054c7a9a8207da64e98f6", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     fn assert_send<T: Send>(_: T) {}\n \n     assert_sync(|| {\n-        //~^ ERROR: future cannot be shared between threads safely\n+        //~^ ERROR: generator cannot be shared between threads safely\n         let a = Cell::new(2);\n         yield;\n     });"}, {"sha": "fb59ef5f433a1b91a3df6c21f9dd9f4ba89cbb82", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6edfd66c5db78a4672e054c7a9a8207da64e98f6/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=6edfd66c5db78a4672e054c7a9a8207da64e98f6", "patch": "@@ -11,7 +11,7 @@ LL |     assert_send(|| {\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::cell::Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6 a:&std::cell::Cell<i32> _]`\n \n-error: future cannot be shared between threads safely\n+error: generator cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n@@ -21,7 +21,7 @@ LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n-note: future is not `Sync` as this value is used across an yield\n+note: generator is not `Sync` as this value is used across an yield\n   --> $DIR/not-send-sync.rs:12:9\n    |\n LL |         let a = Cell::new(2);"}]}