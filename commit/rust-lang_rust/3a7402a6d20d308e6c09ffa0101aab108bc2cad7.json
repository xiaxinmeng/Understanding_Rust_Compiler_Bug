{"sha": "3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzQwMmE2ZDIwZDMwOGU2YzA5ZmZhMDEwMWFhYjEwOGJjMmNhZDc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-10T12:05:57Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-10T12:05:57Z"}, "message": "Fix FP with `for` loops and shadowed loop variable", "tree": {"sha": "4ae4036fa87d0c3618a6ebcea1a60faa68e7a506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ae4036fa87d0c3618a6ebcea1a60faa68e7a506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXgjoqAAoJEF5CfHlMukXoamIQAIF+8INkV5UXpCBM5YCFJ5b/\nKJBCkEeNziycCgdYrQL3tdyAZ4ZNhSyRnU8bcDrdzb+XvsTFv12XMt2pGaLgwnPf\nQKQnnSflPNKCuyD95uXEkDxu0W6GFNckbylmFjBE4JtyyxErOfndpevDt1QSM2/5\nv1lLdcpAMP8PCHv5k3OTIB4lE8LHAwx2/VOSqa9IinutmV31yXJVYKbQ6I1yZky+\nTq7juYJ5+LusZe0VibS4XmvyB18/72MmBHNlTPLY1jOWVP8xWoeTaaO0fUNV8xOB\nJupaeeXddl5dStyFafgwils+s9019PrE6/cv3dZd7oQM7Z0A5nka2hTRirbLdv2G\nHe5J4nT+JHG2TBKx8DBNeLVpgl2cNqKjXVoUjfLQfXCBb8onhzO0EixYlwq8Br9c\nyGbYQUoxnd86PG1e46xmB5+PlKa9brLhck2BllhEaSmkfGrCXIaLupHwzGXKm2Qy\n4bMv2b97H861BcgUkKPqkgXznMOzM5MkxZ6iCLt6DDBof2Y2x7YY5gr46s4/eaYW\nz0hk+HZZ3gUUlG+cw8HIocRm7hvHMwpzCrzFCm2Nr1au7ensY1P9Jh9V9nS6zZHW\nRtJ5AoycjP+ibsNtgG2gZ0lk/PU1p6+drcRP+NLYsLm1PYWpBAeFVNM8xUnDKOzN\nu2LiLTQNt+3O4MuMf7Qi\n=LJIC\n-----END PGP SIGNATURE-----", "payload": "tree 4ae4036fa87d0c3618a6ebcea1a60faa68e7a506\nparent ad1cd990549fdfc8ae9dcd4ea7eea851017eb042\nauthor mcarton <cartonmartin+git@gmail.com> 1468152357 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1468152357 +0200\n\nFix FP with `for` loops and shadowed loop variable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "html_url": "https://github.com/rust-lang/rust/commit/3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a7402a6d20d308e6c09ffa0101aab108bc2cad7/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1cd990549fdfc8ae9dcd4ea7eea851017eb042", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1cd990549fdfc8ae9dcd4ea7eea851017eb042", "html_url": "https://github.com/rust-lang/rust/commit/ad1cd990549fdfc8ae9dcd4ea7eea851017eb042"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b87d1d3d5fdb449d567ebbfe440c63ea8effdf37", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a7402a6d20d308e6c09ffa0101aab108bc2cad7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7402a6d20d308e6c09ffa0101aab108bc2cad7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "patch": "@@ -1,6 +1,7 @@\n use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use rustc::hir::map::Node::NodeBlock;\n use rustc::lint::*;\n@@ -337,7 +338,7 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n         if let PatKind::Binding(_, ref ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n                 cx: cx,\n-                var: ident.node,\n+                var: cx.tcx.expect_def(pat.id).def_id(),\n                 indexed: HashMap::new(),\n                 nonindex: false,\n             };\n@@ -667,15 +668,15 @@ impl<'a> Visitor<'a> for UsedVisitor {\n \n struct VarVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n-    var: Name, // var name to look for as index\n+    var: DefId, // var name to look for as index\n     indexed: HashMap<Name, Option<CodeExtent>>, // indexed variables, the extent is None for global\n     nonindex: bool, // has the var been used otherwise?\n }\n \n impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n     fn visit_expr(&mut self, expr: &'v Expr) {\n         if let ExprPath(None, ref path) = expr.node {\n-            if path.segments.len() == 1 && path.segments[0].name == self.var {\n+            if path.segments.len() == 1 && self.cx.tcx.expect_def(expr.id).def_id() == self.var {\n                 // we are referencing our variable! now check if it's as an index\n                 if_let_chain! {[\n                     let Some(parexpr) = get_parent_expr(self.cx, expr),"}, {"sha": "91e31adc44d580dc75534f22dfc5f7e3dddd37de", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a7402a6d20d308e6c09ffa0101aab108bc2cad7/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7402a6d20d308e6c09ffa0101aab108bc2cad7/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "patch": "@@ -104,6 +104,12 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 0..vec.len() {\n+        //~^ WARNING unused variable\n+        let i = 42; // make a different `i`\n+        println!(\"{}\", vec[i]); // ok, not the `i` of the for-loop\n+    }\n+\n     for i in 0..vec.len() { let _ = vec[i]; }\n     //~^ ERROR `i` is only used to index `vec`\n     //~| HELP consider"}]}