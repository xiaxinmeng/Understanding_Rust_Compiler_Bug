{"sha": "cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGM5MGFhMmNmNGRhODE5ZGQzMjRhN2JiZjhiMzZmNmEwNjhhNmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T16:44:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T16:44:16Z"}, "message": "minor", "tree": {"sha": "a9e0018e9ef2821e3e329dbefefde8cd1cd93f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e0018e9ef2821e3e329dbefefde8cd1cd93f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "html_url": "https://github.com/rust-lang/rust/commit/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8e9043e227682e6e7db2711091dc74d847e766", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8e9043e227682e6e7db2711091dc74d847e766", "html_url": "https://github.com/rust-lang/rust/commit/eb8e9043e227682e6e7db2711091dc74d847e766"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "0ae8082f12366ac27f6b24418c350afde7124bb2", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "patch": "@@ -35,9 +35,9 @@ mod grammar;\n mod parser_impl;\n \n mod syntax_kinds;\n+mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n-mod yellow;\n \n pub use {\n     ast::File,"}, {"sha": "3ade46f458c431ea8cb745652b6762eb7ddf6a03", "filename": "src/yellow/green.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "patch": "@@ -78,6 +78,36 @@ fn assert_send_sync() {\n     f::<GreenNode>();\n }\n \n+#[derive(Clone, Debug)]\n+pub(crate) struct GreenBranch {\n+    text_len: TextUnit,\n+    kind: SyntaxKind,\n+    children: Vec<GreenNode>,\n+}\n+\n+impl GreenBranch {\n+    fn new(kind: SyntaxKind, children: Vec<GreenNode>) -> GreenBranch {\n+        let text_len = children.iter().map(|x| x.text_len()).sum::<TextUnit>();\n+        GreenBranch {\n+            text_len,\n+            kind,\n+            children,\n+        }\n+    }\n+\n+    pub fn kind(&self) -> SyntaxKind {\n+        self.kind\n+    }\n+\n+    pub fn text_len(&self) -> TextUnit {\n+        self.text_len\n+    }\n+\n+    pub fn children(&self) -> &[GreenNode] {\n+        self.children.as_slice()\n+    }\n+}\n+\n #[derive(Clone, Debug)]\n pub(crate) enum GreenLeaf {\n     Whitespace {\n@@ -143,33 +173,3 @@ const N_NEWLINES: usize = 16;\n const N_SPACES: usize = 64;\n const WS: &str =\n     \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n                                                                \";\n-\n-#[derive(Clone, Debug)]\n-pub(crate) struct GreenBranch {\n-    text_len: TextUnit,\n-    kind: SyntaxKind,\n-    children: Vec<GreenNode>,\n-}\n-\n-impl GreenBranch {\n-    fn new(kind: SyntaxKind, children: Vec<GreenNode>) -> GreenBranch {\n-        let text_len = children.iter().map(|x| x.text_len()).sum::<TextUnit>();\n-        GreenBranch {\n-            text_len,\n-            kind,\n-            children,\n-        }\n-    }\n-\n-    pub fn kind(&self) -> SyntaxKind {\n-        self.kind\n-    }\n-\n-    pub fn text_len(&self) -> TextUnit {\n-        self.text_len\n-    }\n-\n-    pub fn children(&self) -> &[GreenNode] {\n-        self.children.as_slice()\n-    }\n-}"}]}