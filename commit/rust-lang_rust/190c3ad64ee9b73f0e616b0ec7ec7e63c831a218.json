{"sha": "190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MGMzYWQ2NGVlOWI3M2YwZTYxNmIwZWM3ZWM3ZTYzYzgzMWEyMTg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-20T20:59:53Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-20T20:59:53Z"}, "message": "Improve panic_fmt error messages for invalid format strings too.", "tree": {"sha": "f7e92a922714399ac8e80dd1aaddd2ac4b63ed8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e92a922714399ac8e80dd1aaddd2ac4b63ed8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "html_url": "https://github.com/rust-lang/rust/commit/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b44662669cf1680fe097e593eae20ca5dbed2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b44662669cf1680fe097e593eae20ca5dbed2ee", "html_url": "https://github.com/rust-lang/rust/commit/6b44662669cf1680fe097e593eae20ca5dbed2ee"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "7428a9d13ff79e818544cbc6da5a33a8ee83c85a", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n-use rustc_span::sym;\n+use rustc_span::{sym, InnerSpan};\n \n declare_lint! {\n     /// The `panic_fmt` lint detects `panic!(\"..\")` with `{` or `}` in the string literal.\n@@ -71,7 +71,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                         };\n \n                     let mut fmt_parser =\n-                        Parser::new(fmt.as_ref(), style, snippet, false, ParseMode::Format);\n+                        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n                     let n_arguments =\n                         (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n@@ -115,8 +115,22 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                             l.emit();\n                         });\n                     } else {\n-                        cx.struct_span_lint(PANIC_FMT, expn.call_site, |lint| {\n-                            let mut l = lint.build(\"panic message contains a brace\");\n+                        let brace_spans: Option<Vec<_>> = snippet\n+                            .filter(|s| s.starts_with('\"') || s.starts_with(\"r#\"))\n+                            .map(|s| {\n+                                s.char_indices()\n+                                    .filter(|&(_, c)| c == '{' || c == '}')\n+                                    .map(|(i, _)| {\n+                                        fmt_span.from_inner(InnerSpan { start: i, end: i + 1 })\n+                                    })\n+                                    .collect()\n+                            });\n+                        let msg = match &brace_spans {\n+                            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n+                            _ => \"panic message contains braces\",\n+                        };\n+                        cx.struct_span_lint(PANIC_FMT, brace_spans.unwrap_or(vec![expn.call_site]), |lint| {\n+                            let mut l = lint.build(msg);\n                             l.note(\"this message is not used as a format string, but will be in a future Rust version\");\n                             if expn.call_site.contains(arg.span) {\n                                 l.span_suggestion("}, {"sha": "d38d8ac4deb32524e1e53f579d58b98830803fdd", "filename": "src/test/ui/panic-brace.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/src%2Ftest%2Fui%2Fpanic-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/src%2Ftest%2Fui%2Fpanic-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.rs?ref=190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "patch": "@@ -1,10 +1,18 @@\n // build-pass (FIXME(62277): should be check-pass)\n \n+const C: &str = \"abc {}\";\n+static S: &str = \"{bla}\";\n+\n #[allow(unreachable_code)]\n fn main() {\n     panic!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n     std::panic!(\"another one: }\"); //~ WARN panic message contains a brace\n     core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n-    assert!(false, \"{:03x} {test} bla\"); //~ WARN panic message contains unused formatting placeholders\n-    debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains a brace\n+    assert!(false, \"{:03x} {test} bla\");\n+    //~^ WARN panic message contains unused formatting placeholders\n+    debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n+    panic!(C); // No warning (yet)\n+    panic!(S); // No warning (yet)\n+    panic!(concat!(\"{\", \"}\")); //~ WARN panic message contains an unused formatting placeholder\n+    panic!(concat!(\"{\", \"{\")); //~ WARN panic message contains braces\n }"}, {"sha": "16795ed3d36e8baed8acd562c215405f6b61efaa", "filename": "src/test/ui/panic-brace.stderr", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/src%2Ftest%2Fui%2Fpanic-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/190c3ad64ee9b73f0e616b0ec7ec7e63c831a218/src%2Ftest%2Fui%2Fpanic-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.stderr?ref=190c3ad64ee9b73f0e616b0ec7ec7e63c831a218", "patch": "@@ -1,8 +1,8 @@\n warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:5:5\n+  --> $DIR/panic-brace.rs:8:29\n    |\n LL |     panic!(\"here's a brace: {\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^\n    |\n    = note: `#[warn(panic_fmt)]` on by default\n    = note: this message is not used as a format string, but will be in a future Rust version\n@@ -12,10 +12,10 @@ LL |     panic!(\"{}\", \"here's a brace: {\");\n    |            ^^^^^\n \n warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:6:5\n+  --> $DIR/panic-brace.rs:9:31\n    |\n LL |     std::panic!(\"another one: }\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^\n    |\n    = note: this message is not used as a format string, but will be in a future Rust version\n help: add a \"{}\" format string to use the message literally\n@@ -24,7 +24,7 @@ LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 ^^^^^\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:7:25\n+  --> $DIR/panic-brace.rs:10:25\n    |\n LL |     core::panic!(\"Hello {}\");\n    |                         ^^\n@@ -40,7 +40,7 @@ LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  ^^^^^\n \n warning: panic message contains unused formatting placeholders\n-  --> $DIR/panic-brace.rs:8:21\n+  --> $DIR/panic-brace.rs:11:21\n    |\n LL |     assert!(false, \"{:03x} {test} bla\");\n    |                     ^^^^^^ ^^^^^^\n@@ -55,17 +55,45 @@ help: or add a \"{}\" format string to use the message literally\n LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n    |                    ^^^^^\n \n-warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:9:5\n+warning: panic message contains braces\n+  --> $DIR/panic-brace.rs:13:27\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^\n    |\n    = note: this message is not used as a format string, but will be in a future Rust version\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n    |                          ^^^^^\n \n-warning: 5 warnings emitted\n+warning: panic message contains an unused formatting placeholder\n+  --> $DIR/panic-brace.rs:16:12\n+   |\n+LL |     panic!(concat!(\"{\", \"}\"));\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n+help: add the missing argument(s)\n+   |\n+LL |     panic!(concat!(\"{\", \"}\"), ...);\n+   |                             ^^^^^\n+help: or add a \"{}\" format string to use the message literally\n+   |\n+LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n+   |            ^^^^^\n+\n+warning: panic message contains braces\n+  --> $DIR/panic-brace.rs:17:5\n+   |\n+LL |     panic!(concat!(\"{\", \"{\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this message is not used as a format string, but will be in a future Rust version\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n+   |            ^^^^^\n+\n+warning: 7 warnings emitted\n "}]}