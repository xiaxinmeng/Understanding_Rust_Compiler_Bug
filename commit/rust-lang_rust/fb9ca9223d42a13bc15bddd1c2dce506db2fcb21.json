{"sha": "fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "node_id": "C_kwDOAAsO6NoAKGZiOWNhOTIyM2Q0MmExM2JjMTViZGRkMWMyZGNlNTA2ZGIyZmNiMjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-04T02:23:36Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-28T01:02:15Z"}, "message": "Feature gate", "tree": {"sha": "7be29004c8a9b2c8c91b9cf84470b011bdf7f0c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be29004c8a9b2c8c91b9cf84470b011bdf7f0c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "html_url": "https://github.com/rust-lang/rust/commit/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50c1e1f0587d4a7e44946a909484f75a0a4c929", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50c1e1f0587d4a7e44946a909484f75a0a4c929", "html_url": "https://github.com/rust-lang/rust/commit/f50c1e1f0587d4a7e44946a909484f75a0a4c929"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "710c7ad3b2e501ea51aa06f32da642dd314a4fd8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "patch": "@@ -174,6 +174,10 @@ impl GenericArgs {\n         matches!(self, AngleBracketed(..))\n     }\n \n+    pub fn is_parenthesized(&self) -> bool {\n+        matches!(self, Parenthesized(..))\n+    }\n+\n     pub fn span(&self) -> Span {\n         match self {\n             AngleBracketed(data) => data.span,"}, {"sha": "1413db64a485d918669f6f789faec5db2f432842", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "patch": "@@ -482,12 +482,21 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {\n         if let AssocConstraintKind::Bound { .. } = constraint.kind {\n-            gate_feature_post!(\n-                &self,\n-                associated_type_bounds,\n-                constraint.span,\n-                \"associated type bounds are unstable\"\n-            )\n+            if constraint.gen_args.as_ref().map_or(false, |args| args.is_parenthesized()) {\n+                gate_feature_post!(\n+                    &self,\n+                    return_type_notation,\n+                    constraint.span,\n+                    \"return type notation is unstable\"\n+                )\n+            } else {\n+                gate_feature_post!(\n+                    &self,\n+                    associated_type_bounds,\n+                    constraint.span,\n+                    \"associated type bounds are unstable\"\n+                )\n+            }\n         }\n         visit::walk_assoc_constraint(self, constraint)\n     }"}, {"sha": "9c0dc938635a35361b79b99ac08957aa78de7944", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "patch": "@@ -495,6 +495,8 @@ declare_features! (\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n     (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n+    /// Allows bounding the return type of AFIT/RPITIT.\n+    (incomplete, return_type_notation, \"CURRENT_RUSTC_VERSION\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks."}, {"sha": "153988d9e128152685b3f1da4787636a168b3e5a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "patch": "@@ -1193,6 +1193,7 @@ symbols! {\n         residual,\n         result,\n         return_position_impl_trait_in_trait,\n+        return_type_notation,\n         rhs,\n         rintf32,\n         rintf64,"}, {"sha": "fea953dcdd078dbf11a97a8b58c861ffb906aa8a", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "patch": "@@ -0,0 +1,15 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Trait {\n+    async fn m();\n+}\n+\n+fn foo<T: Trait<m(): Send>>() {}\n+//~^ ERROR parenthesized generic arguments cannot be used in associated type constraints\n+//~| ERROR associated type `m` not found for `Trait`\n+//~| ERROR return type notation is unstable\n+\n+fn main() {}"}, {"sha": "a9373482e5ac4862767ffc760f28cd9d1bea17ba", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca9223d42a13bc15bddd1c2dce506db2fcb21/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.stderr?ref=fb9ca9223d42a13bc15bddd1c2dce506db2fcb21", "patch": "@@ -0,0 +1,36 @@\n+error[E0658]: return type notation is unstable\n+  --> $DIR/feature-gate-return_type_notation.rs:10:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-return_type_notation.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/feature-gate-return_type_notation.rs:10:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^--\n+   |                  |\n+   |                  help: remove these parentheses\n+\n+error[E0220]: associated type `m` not found for `Trait`\n+  --> $DIR/feature-gate-return_type_notation.rs:10:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^ associated type `m` not found\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0220, E0658.\n+For more information about an error, try `rustc --explain E0220`."}]}