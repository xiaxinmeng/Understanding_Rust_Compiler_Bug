{"sha": "0b9e9c9e3d3a163941414d4b7632ff37fd4da224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWU5YzllM2QzYTE2Mzk0MTQxNGQ0Yjc2MzJmZjM3ZmQ0ZGEyMjQ=", "commit": {"author": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2018-10-18T04:20:36Z"}, "committer": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2018-10-25T03:27:26Z"}, "message": "Disable arithmetic lints in constant items", "tree": {"sha": "5021f4c974cb1a30f6e73ab4337370e488149a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5021f4c974cb1a30f6e73ab4337370e488149a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9e9c9e3d3a163941414d4b7632ff37fd4da224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e9c9e3d3a163941414d4b7632ff37fd4da224", "html_url": "https://github.com/rust-lang/rust/commit/0b9e9c9e3d3a163941414d4b7632ff37fd4da224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e9c9e3d3a163941414d4b7632ff37fd4da224/comments", "author": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae7abb16b973ed1c808e2a86644783d23838ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae7abb16b973ed1c808e2a86644783d23838ab4", "html_url": "https://github.com/rust-lang/rust/commit/dae7abb16b973ed1c808e2a86644783d23838ab4"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "a481d46cce072c5ec0bfc4e60ca6aefaa1ed4367", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e9c9e3d3a163941414d4b7632ff37fd4da224/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e9c9e3d3a163941414d4b7632ff37fd4da224/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=0b9e9c9e3d3a163941414d4b7632ff37fd4da224", "patch": "@@ -51,7 +51,9 @@ declare_clippy_lint! {\n \n #[derive(Copy, Clone, Default)]\n pub struct Arithmetic {\n-    span: Option<Span>,\n+    expr_span: Option<Span>,\n+    /// This field is used to check whether expressions are constants, such as in enum discriminants and consts\n+    const_span: Option<Span>,\n }\n \n impl LintPass for Arithmetic {\n@@ -62,9 +64,15 @@ impl LintPass for Arithmetic {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        if self.span.is_some() {\n+        if self.expr_span.is_some() {\n             return;\n         }\n+\n+        if let Some(span) = self.const_span {\n+            if span.contains(expr.span) {\n+                return;\n+            }\n+        }\n         match expr.node {\n             hir::ExprKind::Binary(ref op, ref l, ref r) => {\n                 match op.node {\n@@ -86,29 +94,60 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n                 let (l_ty, r_ty) = (cx.tables.expr_ty(l), cx.tables.expr_ty(r));\n                 if l_ty.is_integral() && r_ty.is_integral() {\n                     span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                    self.span = Some(expr.span);\n+                    self.expr_span = Some(expr.span);\n                 } else if l_ty.is_floating_point() && r_ty.is_floating_point() {\n                     span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n-                    self.span = Some(expr.span);\n+                    self.expr_span = Some(expr.span);\n                 }\n             },\n             hir::ExprKind::Unary(hir::UnOp::UnNeg, ref arg) => {\n                 let ty = cx.tables.expr_ty(arg);\n                 if ty.is_integral() {\n                     span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                    self.span = Some(expr.span);\n+                    self.expr_span = Some(expr.span);\n                 } else if ty.is_floating_point() {\n                     span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n-                    self.span = Some(expr.span);\n+                    self.expr_span = Some(expr.span);\n                 }\n             },\n             _ => (),\n         }\n     }\n \n     fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        if Some(expr.span) == self.span {\n-            self.span = None;\n+        if Some(expr.span) == self.expr_span {\n+            self.expr_span = None;\n+        }\n+    }\n+\n+    fn check_body(&mut self, cx: &LateContext<'_, '_>, body: &hir::Body) {\n+        let body_owner = cx.tcx.hir.body_owner(body.id());\n+\n+        match cx.tcx.hir.body_owner_kind(body_owner) {\n+            hir::BodyOwnerKind::Static(_)\n+            | hir::BodyOwnerKind::Const => {\n+                let body_span = cx.tcx.hir.span(body_owner);\n+\n+                if let Some(span) = self.const_span {\n+                    if span.contains(body_span) {\n+                        return;\n+                    }\n+                }\n+                self.const_span = Some(body_span);\n+            }\n+            hir::BodyOwnerKind::Fn => (),\n+        }\n+    }\n+\n+    fn check_body_post(&mut self, cx: &LateContext<'_, '_>, body: &hir::Body) {\n+        let body_owner = cx.tcx.hir.body_owner(body.id());\n+        let body_span = cx.tcx.hir.span(body_owner);\n+\n+        if let Some(span) = self.const_span {\n+            if span.contains(body_span) {\n+                return;\n+            }\n         }\n+        self.const_span = None;\n     }\n }"}, {"sha": "61a601468fb7d42d790118446cfd316b588e602a", "filename": "tests/ui/arithmetic.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e9c9e3d3a163941414d4b7632ff37fd4da224/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e9c9e3d3a163941414d4b7632ff37fd4da224/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=0b9e9c9e3d3a163941414d4b7632ff37fd4da224", "patch": "@@ -37,4 +37,36 @@ fn main() {\n     f / 2.0;\n     f - 2.0 * 4.2;\n     -f;\n+\n+    // No errors for the following items because they are constant expressions\n+    enum Foo {\n+        Bar = -2,\n+    }\n+    struct Baz([i32; 1 + 1]);\n+    union Qux {\n+        field: [i32; 1 + 1],\n+    }\n+    type Alias = [i32; 1 + 1];\n+\n+    const FOO: i32 = -2;\n+    static BAR: i32 = -2;\n+\n+    let _: [i32; 1 + 1] = [0, 0];\n+\n+    let _: [i32; 1 + 1] = {\n+        let a: [i32; 1 + 1] = [0, 0];\n+        a\n+    };\n+\n+    trait Trait {\n+        const ASSOC: i32 = 1 + 1;\n+    }\n+\n+    impl Trait for Foo {\n+        const ASSOC: i32 = {\n+            let _: [i32; 1 + 1];\n+            fn foo() {}\n+            1 + 1\n+        };\n+    }\n }"}]}