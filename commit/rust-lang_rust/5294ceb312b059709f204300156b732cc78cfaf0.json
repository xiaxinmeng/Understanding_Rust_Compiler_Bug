{"sha": "5294ceb312b059709f204300156b732cc78cfaf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOTRjZWIzMTJiMDU5NzA5ZjIwNDMwMDE1NmI3MzJjYzc4Y2ZhZjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:34:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:24Z"}, "message": "rollup merge of #19818: emk/regex_at_name_opt\n\nHello! This is my first Rust patch, and I fear that I've probably skipped at least 7 critical steps. I'd appreciate your feedback and advice about how to contribute to Rust.\n\nThis patch is based on a discussion with @BurntSushi in #14602 a while back. I'm happy to revise it as needed to fit into the modern world. :-)\n\nAs discussed in that issue, the existing `at` and `name` functions represent two different results with the empty string:\n\n1. Matched the empty string.\n2. Did not match anything.\n\nConsider the following example.  This regex has two named matched groups, `key` and `value`. `value` is optional:\n\n```rust\n// Matches \"foo\", \"foo;v=bar\" and \"foo;v=\".\nregex!(r\"(?P<key>[a-z]+)(;v=(?P<value>[a-z]*))?\");\n```\n\nWe can access `value` using `caps.name(\"value\")`, but there's no way for us to distinguish between the `\"foo\"` and `\"foo;v=\"` cases.\n\nEarly this year, @BurntSushi recommended modifying the existing `at` and `name` functions to return `Option`, instead of adding new functions to the API.\n\nThis is a [breaking-change], but the fix is easy:\n\n- `refs.at(1)` becomes `refs.at(1).unwrap_or(\"\")`.\n- `refs.name(name)` becomes `refs.name(name).unwrap_or(\"\")`.", "tree": {"sha": "09685724a9180d17619c7904745a2d5e695ceca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09685724a9180d17619c7904745a2d5e695ceca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5294ceb312b059709f204300156b732cc78cfaf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5294ceb312b059709f204300156b732cc78cfaf0", "html_url": "https://github.com/rust-lang/rust/commit/5294ceb312b059709f204300156b732cc78cfaf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5294ceb312b059709f204300156b732cc78cfaf0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974e17b9ea63b38b4a512742fc877a7e4ee94e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/974e17b9ea63b38b4a512742fc877a7e4ee94e03", "html_url": "https://github.com/rust-lang/rust/commit/974e17b9ea63b38b4a512742fc877a7e4ee94e03"}, {"sha": "c2b0d7dd8818a0dca9b1fa7af6873375907f05ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b0d7dd8818a0dca9b1fa7af6873375907f05ca", "html_url": "https://github.com/rust-lang/rust/commit/c2b0d7dd8818a0dca9b1fa7af6873375907f05ca"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "59be0152d587660111dd391f0de0d742c395c8d3", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5294ceb312b059709f204300156b732cc78cfaf0/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5294ceb312b059709f204300156b732cc78cfaf0/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=5294ceb312b059709f204300156b732cc78cfaf0", "patch": "@@ -394,7 +394,7 @@ fn extract_gdb_version(full_version_line: Option<String>) -> Option<String> {\n \n             match re.captures(full_version_line) {\n                 Some(captures) => {\n-                    Some(captures.at(2).to_string())\n+                    Some(captures.at(2).unwrap_or(\"\").to_string())\n                 }\n                 None => {\n                     println!(\"Could not extract GDB version from line '{}'\",\n@@ -428,7 +428,7 @@ fn extract_lldb_version(full_version_line: Option<String>) -> Option<String> {\n \n             match re.captures(full_version_line) {\n                 Some(captures) => {\n-                    Some(captures.at(1).to_string())\n+                    Some(captures.at(1).unwrap_or(\"\").to_string())\n                 }\n                 None => {\n                     println!(\"Could not extract LLDB version from line '{}'\","}, {"sha": "b7df43aabdd2093b9b6462970cdb30bff074bdf6", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5294ceb312b059709f204300156b732cc78cfaf0/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5294ceb312b059709f204300156b732cc78cfaf0/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=5294ceb312b059709f204300156b732cc78cfaf0", "patch": "@@ -66,10 +66,10 @@ fn parse_expected(last_nonfollow_error: Option<uint>,\n                   line: &str,\n                   re: &Regex) -> Option<(WhichLine, ExpectedError)> {\n     re.captures(line).and_then(|caps| {\n-        let adjusts = caps.name(\"adjusts\").len();\n-        let kind = caps.name(\"kind\").to_ascii_lower();\n-        let msg = caps.name(\"msg\").trim().to_string();\n-        let follow = caps.name(\"follow\").len() > 0;\n+        let adjusts = caps.name(\"adjusts\").unwrap_or(\"\").len();\n+        let kind = caps.name(\"kind\").unwrap_or(\"\").to_ascii_lower();\n+        let msg = caps.name(\"msg\").unwrap_or(\"\").trim().to_string();\n+        let follow = caps.name(\"follow\").unwrap_or(\"\").len() > 0;\n \n         let (which, line) = if follow {\n             assert!(adjusts == 0, \"use either //~| or //~^, not both.\");"}, {"sha": "f7b19cf6fbf5e06ef290bbbe45878b1659f9ac36", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5294ceb312b059709f204300156b732cc78cfaf0/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5294ceb312b059709f204300156b732cc78cfaf0/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=5294ceb312b059709f204300156b732cc78cfaf0", "patch": "@@ -173,10 +173,10 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAn\n     );\n \n     let m = re.captures(s).expect(format!(\"The regex didn't match {}\", s).as_slice());\n-    let start = m.name(\"start\");\n-    let end = m.name(\"end\");\n-    let toknum = m.name(\"toknum\");\n-    let content = m.name(\"content\");\n+    let start = m.name(\"start\").unwrap_or(\"\");\n+    let end = m.name(\"end\").unwrap_or(\"\");\n+    let toknum = m.name(\"toknum\").unwrap_or(\"\");\n+    let content = m.name(\"content\").unwrap_or(\"\");\n \n     let proto_tok = tokens.get(toknum).expect(format!(\"didn't find token {} in the map\",\n                                                               toknum).as_slice());"}, {"sha": "3fadba9583ec14e597042a81bb89e9dd8ddf962a", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5294ceb312b059709f204300156b732cc78cfaf0/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5294ceb312b059709f204300156b732cc78cfaf0/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=5294ceb312b059709f204300156b732cc78cfaf0", "patch": "@@ -103,7 +103,9 @@\n //! let re = regex!(r\"(\\d{4})-(\\d{2})-(\\d{2})\");\n //! let text = \"2012-03-14, 2013-01-01 and 2014-07-05\";\n //! for cap in re.captures_iter(text) {\n-//!     println!(\"Month: {} Day: {} Year: {}\", cap.at(2), cap.at(3), cap.at(1));\n+//!     println!(\"Month: {} Day: {} Year: {}\",\n+//!              cap.at(2).unwrap_or(\"\"), cap.at(3).unwrap_or(\"\"),\n+//!              cap.at(1).unwrap_or(\"\"));\n //! }\n //! // Output:\n //! // Month: 03 Day: 14 Year: 2012\n@@ -285,7 +287,7 @@\n //! # fn main() {\n //! let re = regex!(r\"(?i)a+(?-i)b+\");\n //! let cap = re.captures(\"AaAaAbbBBBb\").unwrap();\n-//! assert_eq!(cap.at(0), \"AaAaAbb\");\n+//! assert_eq!(cap.at(0), Some(\"AaAaAbb\"));\n //! # }\n //! ```\n //!"}, {"sha": "53181bfbb7e3fbfdcb09708cd019d6477e893ea0", "filename": "src/libregex/re.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5294ceb312b059709f204300156b732cc78cfaf0/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5294ceb312b059709f204300156b732cc78cfaf0/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=5294ceb312b059709f204300156b732cc78cfaf0", "patch": "@@ -273,9 +273,9 @@ impl Regex {\n     /// let re = regex!(r\"'([^']+)'\\s+\\((\\d{4})\\)\");\n     /// let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";\n     /// let caps = re.captures(text).unwrap();\n-    /// assert_eq!(caps.at(1), \"Citizen Kane\");\n-    /// assert_eq!(caps.at(2), \"1941\");\n-    /// assert_eq!(caps.at(0), \"'Citizen Kane' (1941)\");\n+    /// assert_eq!(caps.at(1), Some(\"Citizen Kane\"));\n+    /// assert_eq!(caps.at(2), Some(\"1941\"));\n+    /// assert_eq!(caps.at(0), Some(\"'Citizen Kane' (1941)\"));\n     /// # }\n     /// ```\n     ///\n@@ -291,9 +291,9 @@ impl Regex {\n     /// let re = regex!(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\");\n     /// let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";\n     /// let caps = re.captures(text).unwrap();\n-    /// assert_eq!(caps.name(\"title\"), \"Citizen Kane\");\n-    /// assert_eq!(caps.name(\"year\"), \"1941\");\n-    /// assert_eq!(caps.at(0), \"'Citizen Kane' (1941)\");\n+    /// assert_eq!(caps.name(\"title\"), Some(\"Citizen Kane\"));\n+    /// assert_eq!(caps.name(\"year\"), Some(\"1941\"));\n+    /// assert_eq!(caps.at(0), Some(\"'Citizen Kane' (1941)\"));\n     /// # }\n     /// ```\n     ///\n@@ -434,7 +434,7 @@ impl Regex {\n     /// # use regex::Captures; fn main() {\n     /// let re = regex!(r\"([^,\\s]+),\\s+(\\S+)\");\n     /// let result = re.replace(\"Springsteen, Bruce\", |&: caps: &Captures| {\n-    ///     format!(\"{} {}\", caps.at(2), caps.at(1))\n+    ///     format!(\"{} {}\", caps.at(2).unwrap_or(\"\"), caps.at(1).unwrap_or(\"\"))\n     /// });\n     /// assert_eq!(result.as_slice(), \"Bruce Springsteen\");\n     /// # }\n@@ -712,27 +712,25 @@ impl<'t> Captures<'t> {\n         Some((self.locs[s].unwrap(), self.locs[e].unwrap()))\n     }\n \n-    /// Returns the matched string for the capture group `i`.\n-    /// If `i` isn't a valid capture group or didn't match anything, then the\n-    /// empty string is returned.\n-    pub fn at(&self, i: uint) -> &'t str {\n+    /// Returns the matched string for the capture group `i`.  If `i` isn't\n+    /// a valid capture group or didn't match anything, then `None` is\n+    /// returned.\n+    pub fn at(&self, i: uint) -> Option<&'t str> {\n         match self.pos(i) {\n-            None => \"\",\n-            Some((s, e)) => {\n-                self.text.slice(s, e)\n-            }\n+            None => None,\n+            Some((s, e)) => Some(self.text.slice(s, e))\n         }\n     }\n \n-    /// Returns the matched string for the capture group named `name`.\n-    /// If `name` isn't a valid capture group or didn't match anything, then\n-    /// the empty string is returned.\n-    pub fn name(&self, name: &str) -> &'t str {\n+    /// Returns the matched string for the capture group named `name`.  If\n+    /// `name` isn't a valid capture group or didn't match anything, then\n+    /// `None` is returned.\n+    pub fn name(&self, name: &str) -> Option<&'t str> {\n         match self.named {\n-            None => \"\",\n+            None => None,\n             Some(ref h) => {\n                 match h.get(name) {\n-                    None => \"\",\n+                    None => None,\n                     Some(i) => self.at(*i),\n                 }\n             }\n@@ -769,11 +767,12 @@ impl<'t> Captures<'t> {\n         // FIXME: Don't use regexes for this. It's completely unnecessary.\n         let re = Regex::new(r\"(^|[^$]|\\b)\\$(\\w+)\").unwrap();\n         let text = re.replace_all(text, |&mut: refs: &Captures| -> String {\n-            let (pre, name) = (refs.at(1), refs.at(2));\n+            let pre = refs.at(1).unwrap_or(\"\");\n+            let name = refs.at(2).unwrap_or(\"\");\n             format!(\"{}{}\", pre,\n                     match from_str::<uint>(name.as_slice()) {\n-                None => self.name(name).to_string(),\n-                Some(i) => self.at(i).to_string(),\n+                None => self.name(name).unwrap_or(\"\").to_string(),\n+                Some(i) => self.at(i).unwrap_or(\"\").to_string(),\n             })\n         });\n         let re = Regex::new(r\"\\$\\$\").unwrap();\n@@ -802,7 +801,7 @@ impl<'t> Iterator<&'t str> for SubCaptures<'t> {\n     fn next(&mut self) -> Option<&'t str> {\n         if self.idx < self.caps.len() {\n             self.idx += 1;\n-            Some(self.caps.at(self.idx - 1))\n+            Some(self.caps.at(self.idx - 1).unwrap_or(\"\"))\n         } else {\n             None\n         }"}]}