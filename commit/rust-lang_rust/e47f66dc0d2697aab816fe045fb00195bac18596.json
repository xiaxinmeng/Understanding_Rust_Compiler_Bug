{"sha": "e47f66dc0d2697aab816fe045fb00195bac18596", "node_id": "C_kwDOAAsO6NoAKGU0N2Y2NmRjMGQyNjk3YWFiODE2ZmUwNDVmYjAwMTk1YmFjMTg1OTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-19T21:03:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-17T09:03:33Z"}, "message": "Visit generics inside visit_fn.", "tree": {"sha": "ff712e0ba6d600f82a0f220202b57bd8d2d42293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff712e0ba6d600f82a0f220202b57bd8d2d42293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47f66dc0d2697aab816fe045fb00195bac18596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47f66dc0d2697aab816fe045fb00195bac18596", "html_url": "https://github.com/rust-lang/rust/commit/e47f66dc0d2697aab816fe045fb00195bac18596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47f66dc0d2697aab816fe045fb00195bac18596/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c", "html_url": "https://github.com/rust-lang/rust/commit/aa2b5ef6356f41f9173fe3dc1e5dc3e27290436c"}], "stats": {"total": 105, "additions": 65, "deletions": 40}, "files": [{"sha": "d925c6dd3549aa5da8b01d7a80858bd1dccaf8d1", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -35,7 +35,7 @@ pub enum FnCtxt {\n #[derive(Copy, Clone, Debug)]\n pub enum FnKind<'a> {\n     /// E.g., `fn foo()`, `fn foo(&self)`, or `extern \"Abi\" fn foo()`.\n-    Fn(FnCtxt, Ident, &'a FnSig, &'a Visibility, Option<&'a Block>),\n+    Fn(FnCtxt, Ident, &'a FnSig, &'a Visibility, &'a Generics, Option<&'a Block>),\n \n     /// E.g., `|x, y| body`.\n     Closure(&'a FnDecl, &'a Expr),\n@@ -44,7 +44,7 @@ pub enum FnKind<'a> {\n impl<'a> FnKind<'a> {\n     pub fn header(&self) -> Option<&'a FnHeader> {\n         match *self {\n-            FnKind::Fn(_, _, sig, _, _) => Some(&sig.header),\n+            FnKind::Fn(_, _, sig, _, _, _) => Some(&sig.header),\n             FnKind::Closure(_, _) => None,\n         }\n     }\n@@ -58,7 +58,7 @@ impl<'a> FnKind<'a> {\n \n     pub fn decl(&self) -> &'a FnDecl {\n         match self {\n-            FnKind::Fn(_, _, sig, _, _) => &sig.decl,\n+            FnKind::Fn(_, _, sig, _, _, _) => &sig.decl,\n             FnKind::Closure(decl, _) => decl,\n         }\n     }\n@@ -295,8 +295,8 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_expr, expr);\n         }\n         ItemKind::Fn(box Fn { defaultness: _, ref generics, ref sig, ref body }) => {\n-            visitor.visit_generics(generics);\n-            let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n+            let kind =\n+                FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, generics, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id)\n         }\n         ItemKind::Mod(_unsafety, ref mod_kind) => match mod_kind {\n@@ -561,8 +561,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             walk_list!(visitor, visit_expr, expr);\n         }\n         ForeignItemKind::Fn(box Fn { defaultness: _, ref generics, ref sig, ref body }) => {\n-            visitor.visit_generics(generics);\n-            let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, body.as_deref());\n+            let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, generics, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n         ForeignItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n@@ -644,7 +643,8 @@ pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &\n \n pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Span) {\n     match kind {\n-        FnKind::Fn(_, _, sig, _, body) => {\n+        FnKind::Fn(_, _, sig, _, generics, body) => {\n+            visitor.visit_generics(generics);\n             visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, &sig.decl);\n             walk_list!(visitor, visit_block, body);\n@@ -667,8 +667,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             walk_list!(visitor, visit_expr, expr);\n         }\n         AssocItemKind::Fn(box Fn { defaultness: _, ref generics, ref sig, ref body }) => {\n-            visitor.visit_generics(generics);\n-            let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, body.as_deref());\n+            let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, generics, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n         AssocItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {"}, {"sha": "8d815e95528825a269a56f88619e9102631d5cc4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -91,16 +91,18 @@ impl<'a> AstValidator<'a> {\n         self.is_impl_trait_banned = old;\n     }\n \n-    fn with_tilde_const_allowed(&mut self, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.is_tilde_const_allowed, true);\n+    fn with_tilde_const(&mut self, allowed: bool, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.is_tilde_const_allowed, allowed);\n         f(self);\n         self.is_tilde_const_allowed = old;\n     }\n \n+    fn with_tilde_const_allowed(&mut self, f: impl FnOnce(&mut Self)) {\n+        self.with_tilde_const(true, f)\n+    }\n+\n     fn with_banned_tilde_const(&mut self, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.is_tilde_const_allowed, false);\n-        f(self);\n-        self.is_tilde_const_allowed = old;\n+        self.with_tilde_const(false, f)\n     }\n \n     fn with_let_management(\n@@ -1202,12 +1204,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n-                if let Const::Yes(_) = sig.header.constness {\n-                    self.with_tilde_const_allowed(|this| this.visit_generics(generics));\n-                } else {\n-                    self.visit_generics(generics);\n-                }\n-                let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n+                let kind =\n+                    FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, generics, body.as_deref());\n                 self.visit_fn(kind, item.span, item.id);\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return; // Avoid visiting again.\n@@ -1555,13 +1553,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             FnSig { span: sig_span, header: FnHeader { ext: Extern::Implicit, .. }, .. },\n             _,\n             _,\n+            _,\n         ) = fk\n         {\n             self.maybe_lint_missing_abi(*sig_span, id);\n         }\n \n         // Functions without bodies cannot have patterns.\n-        if let FnKind::Fn(ctxt, _, sig, _, None) = fk {\n+        if let FnKind::Fn(ctxt, _, sig, _, _, None) = fk {\n             Self::check_decl_no_pat(&sig.decl, |span, ident, mut_ident| {\n                 let (code, msg, label) = match ctxt {\n                     FnCtxt::Foreign => (\n@@ -1596,7 +1595,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             });\n         }\n \n-        visit::walk_fn(self, fk, span);\n+        let tilde_const_allowed =\n+            matches!(fk.header(), Some(FnHeader { constness: Const::Yes(_), .. }))\n+                || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n+\n+        self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk, span));\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n@@ -1670,9 +1673,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n-                self.with_tilde_const_allowed(|this| this.visit_generics(generics));\n-                let kind =\n-                    FnKind::Fn(FnCtxt::Assoc(ctxt), item.ident, sig, &item.vis, body.as_deref());\n+                let kind = FnKind::Fn(\n+                    FnCtxt::Assoc(ctxt),\n+                    item.ident,\n+                    sig,\n+                    &item.vis,\n+                    generics,\n+                    body.as_deref(),\n+                );\n                 self.visit_fn(kind, item.span, item.id);\n             }\n             _ => self"}, {"sha": "77fe76af2de21ce7d777168524540788f5145347", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -441,6 +441,7 @@ impl EarlyLintPass for UnsafeCode {\n             _,\n             ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafe::Yes(_), .. }, .. },\n             _,\n+            _,\n             body,\n         ) = fk\n         {"}, {"sha": "e7855f8057c7fe2dfbe4c0e0b9ad4bc744882f18", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -158,7 +158,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n-        if let ast_visit::FnKind::Fn(_, _, sig, _, _) = fk {\n+        if let ast_visit::FnKind::Fn(_, _, sig, _, _, _) = fk {\n             if let ast::Async::Yes { closure_id, .. } = sig.header.asyncness {\n                 self.check_id(closure_id);\n             }"}, {"sha": "1e8cca6122c4c58724bad81648e96417624a6073", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -133,8 +133,10 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {\n-        if let FnKind::Fn(_, _, sig, _, body) = fn_kind {\n+        if let FnKind::Fn(_, _, sig, _, generics, body) = fn_kind {\n             if let Async::Yes { closure_id, return_impl_trait_id, .. } = sig.header.asyncness {\n+                self.visit_generics(generics);\n+\n                 let return_impl_trait_id =\n                     self.create_def(return_impl_trait_id, DefPathData::ImplTrait, span);\n "}, {"sha": "383ca958e6d4e3658687716510be172b2879bb79", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -537,10 +537,12 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         let rib_kind = match fn_kind {\n             // Bail if the function is foreign, and thus cannot validly have\n             // a body, or if there's no body for some other reason.\n-            FnKind::Fn(FnCtxt::Foreign, _, sig, ..) | FnKind::Fn(_, _, sig, .., None) => {\n+            FnKind::Fn(FnCtxt::Foreign, _, sig, _, generics, _)\n+            | FnKind::Fn(_, _, sig, _, generics, None) => {\n                 // We don't need to deal with patterns in parameters, because\n                 // they are not possible for foreign or bodiless functions.\n                 self.visit_fn_header(&sig.header);\n+                self.visit_generics(generics);\n                 visit::walk_fn_decl(self, &sig.decl);\n                 return;\n             }\n@@ -559,6 +561,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.with_rib(ValueNS, rib_kind, |this| {\n             // Create a label rib for the function.\n             this.with_label_rib(rib_kind, |this| {\n+                if let FnKind::Fn(_, _, _, _, generics, _) = fn_kind {\n+                    this.visit_generics(generics);\n+                }\n+\n                 // Add each argument to the rib.\n                 this.resolve_params(&declaration.inputs);\n "}, {"sha": "ad2502b041840ca04036fe025f2b299532f6292c", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -204,12 +204,11 @@ impl<'a> FnSig<'a> {\n \n     pub(crate) fn from_fn_kind(\n         fn_kind: &'a visit::FnKind<'_>,\n-        generics: &'a ast::Generics,\n         decl: &'a ast::FnDecl,\n         defaultness: ast::Defaultness,\n     ) -> FnSig<'a> {\n         match *fn_kind {\n-            visit::FnKind::Fn(fn_ctxt, _, fn_sig, vis, _) => match fn_ctxt {\n+            visit::FnKind::Fn(fn_ctxt, _, fn_sig, vis, generics, _) => match fn_ctxt {\n                 visit::FnCtxt::Assoc(..) => {\n                     let mut fn_sig = FnSig::from_method_sig(fn_sig, generics, vis);\n                     fn_sig.defaultness = defaultness;\n@@ -3180,8 +3179,14 @@ impl Rewrite for ast::ForeignItem {\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, sig, &self.vis, Some(body)),\n-                        generics,\n+                        visit::FnKind::Fn(\n+                            fn_ctxt,\n+                            self.ident,\n+                            sig,\n+                            &self.vis,\n+                            generics,\n+                            Some(body),\n+                        ),\n                         &sig.decl,\n                         self.span,\n                         defaultness,"}, {"sha": "1621eb406b10f35514e24ae78cdc466fbd92d662", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e47f66dc0d2697aab816fe045fb00195bac18596/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f66dc0d2697aab816fe045fb00195bac18596/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=e47f66dc0d2697aab816fe045fb00195bac18596", "patch": "@@ -382,7 +382,6 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     pub(crate) fn visit_fn(\n         &mut self,\n         fk: visit::FnKind<'_>,\n-        generics: &ast::Generics,\n         fd: &ast::FnDecl,\n         s: Span,\n         defaultness: ast::Defaultness,\n@@ -391,12 +390,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let indent = self.block_indent;\n         let block;\n         let rewrite = match fk {\n-            visit::FnKind::Fn(_, ident, _, _, Some(ref b)) => {\n+            visit::FnKind::Fn(_, ident, _, _, _, Some(ref b)) => {\n                 block = b;\n                 self.rewrite_fn_before_block(\n                     indent,\n                     ident,\n-                    &FnSig::from_fn_kind(&fk, generics, fd, defaultness),\n+                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                 )\n             }\n@@ -552,8 +551,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             _ => visit::FnCtxt::Foreign,\n                         };\n                         self.visit_fn(\n-                            visit::FnKind::Fn(fn_ctxt, item.ident, sig, &item.vis, Some(body)),\n-                            generics,\n+                            visit::FnKind::Fn(\n+                                fn_ctxt,\n+                                item.ident,\n+                                sig,\n+                                &item.vis,\n+                                generics,\n+                                Some(body),\n+                            ),\n                             &sig.decl,\n                             item.span,\n                             defaultness,\n@@ -642,8 +647,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     let inner_attrs = inner_attributes(&ai.attrs);\n                     let fn_ctxt = visit::FnCtxt::Assoc(assoc_ctxt);\n                     self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ai.ident, sig, &ai.vis, Some(body)),\n-                        generics,\n+                        visit::FnKind::Fn(fn_ctxt, ai.ident, sig, &ai.vis, generics, Some(body)),\n                         &sig.decl,\n                         ai.span,\n                         defaultness,"}]}