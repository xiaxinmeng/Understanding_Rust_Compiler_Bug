{"sha": "1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1", "node_id": "C_kwDOAAsO6NoAKDFkZDAyZTMyYTM2MGY2NGM2ZmVkYmQ1ZjFlZWNhY2VkOWY5ZjA4YTE", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-29T19:44:30Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-30T19:53:11Z"}, "message": "Add regression test for issue 93274\n\nCurrently fails with:\n\n    error: future cannot be sent between threads safely\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:21:17\n       |\n    LL |     assert_send(with_await());\n       |                 ^^^^^^^^^^^^ future returned by `with_await` is not `Send`\n       |\n       = help: the trait `Sync` is not implemented for `core::fmt::Opaque`\n    note: future is not `Send` as this value is used across an await\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:11:37\n       |\n    LL |     println!(\"{} {:?}\", \"\", async {}.await);\n       |     --------------------------------^^^^^^-\n       |     |                               |\n       |     |                               await occurs here, with `$crate::format_args_nl!($($arg)*)` maybe used later\n       |     has type `ArgumentV1<'_>` which is not `Send`\n       |     `$crate::format_args_nl!($($arg)*)` is later dropped here\n    note: required by a bound in `assert_send`\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:18:24\n       |\n    LL | fn assert_send(_: impl Send) {}\n       |                        ^^^^ required by this bound in `assert_send`\n\n    error: future cannot be sent between threads safely\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:22:17\n       |\n    LL |     assert_send(with_macro_call());\n       |                 ^^^^^^^^^^^^^^^^^ future returned by `with_macro_call` is not `Send`\n       |\n       = help: the trait `Sync` is not implemented for `core::fmt::Opaque`\n    note: future is not `Send` as this value is used across an await\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:6:17\n       |\n    LL |         async {}.await\n       |                 ^^^^^^ await occurs here, with `$crate::format_args_nl!($($arg)*)` maybe used later\n    ...\n    LL |     println!(\"{} {:?}\", \"\", m!());\n       |     -----------------------------\n       |     |                       |\n       |     |                       in this macro invocation\n       |     has type `ArgumentV1<'_>` which is not `Send`\n       |     `$crate::format_args_nl!($($arg)*)` is later dropped here\n    note: required by a bound in `assert_send`\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:18:24\n       |\n    LL | fn assert_send(_: impl Send) {}\n       |                        ^^^^ required by this bound in `assert_send`\n       = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n    error: aborting due to 2 previous errors", "tree": {"sha": "93975c67de3ff19c3631fbf43c79dabe5d9e3f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93975c67de3ff19c3631fbf43c79dabe5d9e3f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmH27KcACgkQ+boUO5X/\nbYKkIg//cx+KQvaWjzXfGDML6JYbXzAWYkOnt4GMcnK8D0GDNM9o3HSuimj5Bhmq\n1+cIIJWWdQJq06wt3AI+nCGZRwpZH8wLk6rv3X6S8bY0E3WUlc64zo5r5/bE6AJ+\n7kqk962MPifr2oPdcw5z1tCRhTmtXTv65axlU3L48q2MVJgYBOPpUIn4oHNfYPaM\ndtXV0Hv5MsyN2wQdAiulj62MreVy3XvzEX5jDsVmpO+PNj3SM3Z2jMrW+x1YZAY7\n736xWHenbVy+ZWu+FfgpYBKL0cRPPO/rrFCh5I6k43oZmCNjJFsciR7wszfkyTc+\nY73J8a8PIpupUfw0xzJ0MoaHVuTypIlOLRHiOkpYn3P13X5K7Q79HbgyBFGORZpm\nQqR+GceLgdkuhn5awubW80qJci7sjqn5AyakTbzbBLCK+EEukqUNCCtZHF+lvGR/\nQQlXR6jadMrF234dnGvosz8vYbzgGLNsmNADqm0z3EJ68/1bcVIITd6sezjXenhA\n+y32aAM3ntgLO/snsXtIhKkkO2TZVpGYB235kGWoq3xkz9cIiDOhgk8TfHQLAs4v\nLozJkzvZ8oCQIbvWzaT7EPtyEWAg3pxpljl1+8I18rGTbYDp79h4Xqs4dlfYnHeg\n4FbGq/OIbgXLSZfd2N27W82VKFcEvhTnKucmuXMrcawHdXTumAQ=\n=8GUx\n-----END PGP SIGNATURE-----", "payload": "tree 93975c67de3ff19c3631fbf43c79dabe5d9e3f1c\nparent 7cc28c128be0363d83accf318b87b40ba6168384\nauthor David Tolnay <dtolnay@gmail.com> 1643485470 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1643572391 -0800\n\nAdd regression test for issue 93274\n\nCurrently fails with:\n\n    error: future cannot be sent between threads safely\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:21:17\n       |\n    LL |     assert_send(with_await());\n       |                 ^^^^^^^^^^^^ future returned by `with_await` is not `Send`\n       |\n       = help: the trait `Sync` is not implemented for `core::fmt::Opaque`\n    note: future is not `Send` as this value is used across an await\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:11:37\n       |\n    LL |     println!(\"{} {:?}\", \"\", async {}.await);\n       |     --------------------------------^^^^^^-\n       |     |                               |\n       |     |                               await occurs here, with `$crate::format_args_nl!($($arg)*)` maybe used later\n       |     has type `ArgumentV1<'_>` which is not `Send`\n       |     `$crate::format_args_nl!($($arg)*)` is later dropped here\n    note: required by a bound in `assert_send`\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:18:24\n       |\n    LL | fn assert_send(_: impl Send) {}\n       |                        ^^^^ required by this bound in `assert_send`\n\n    error: future cannot be sent between threads safely\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:22:17\n       |\n    LL |     assert_send(with_macro_call());\n       |                 ^^^^^^^^^^^^^^^^^ future returned by `with_macro_call` is not `Send`\n       |\n       = help: the trait `Sync` is not implemented for `core::fmt::Opaque`\n    note: future is not `Send` as this value is used across an await\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:6:17\n       |\n    LL |         async {}.await\n       |                 ^^^^^^ await occurs here, with `$crate::format_args_nl!($($arg)*)` maybe used later\n    ...\n    LL |     println!(\"{} {:?}\", \"\", m!());\n       |     -----------------------------\n       |     |                       |\n       |     |                       in this macro invocation\n       |     has type `ArgumentV1<'_>` which is not `Send`\n       |     `$crate::format_args_nl!($($arg)*)` is later dropped here\n    note: required by a bound in `assert_send`\n      --> $DIR/src/test/ui/fmt/format-with-yield-point.rs:18:24\n       |\n    LL | fn assert_send(_: impl Send) {}\n       |                        ^^^^ required by this bound in `assert_send`\n       = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n    error: aborting due to 2 previous errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1", "html_url": "https://github.com/rust-lang/rust/commit/1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc28c128be0363d83accf318b87b40ba6168384", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc28c128be0363d83accf318b87b40ba6168384", "html_url": "https://github.com/rust-lang/rust/commit/7cc28c128be0363d83accf318b87b40ba6168384"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "0bd9062f95e78698a3a034fce746be0eb4e920e5", "filename": "src/test/ui/fmt/format-with-yield-point.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1/src%2Ftest%2Fui%2Ffmt%2Fformat-with-yield-point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1/src%2Ftest%2Fui%2Ffmt%2Fformat-with-yield-point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-with-yield-point.rs?ref=1dd02e32a360f64c6fedbd5f1eecaced9f9f08a1", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// edition:2021\n+\n+macro_rules! m {\n+    () => {\n+        async {}.await\n+    };\n+}\n+\n+async fn with_await() {\n+    println!(\"{} {:?}\", \"\", async {}.await);\n+}\n+\n+async fn with_macro_call() {\n+    println!(\"{} {:?}\", \"\", m!());\n+}\n+\n+fn assert_send(_: impl Send) {}\n+\n+fn main() {\n+    assert_send(with_await());\n+    assert_send(with_macro_call());\n+}"}]}