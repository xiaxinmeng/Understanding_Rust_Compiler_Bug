{"sha": "bfd14bd90765349e6542cb77206dabe6f11e7c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZDE0YmQ5MDc2NTM0OWU2NTQyY2I3NzIwNmRhYmU2ZjExZTdjODM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-15T14:01:38Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-15T18:53:19Z"}, "message": "Make use of thread-safe arenas", "tree": {"sha": "e15a981b22f80cbe4467e0fb86e8eb68675a304e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15a981b22f80cbe4467e0fb86e8eb68675a304e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd14bd90765349e6542cb77206dabe6f11e7c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd14bd90765349e6542cb77206dabe6f11e7c83", "html_url": "https://github.com/rust-lang/rust/commit/bfd14bd90765349e6542cb77206dabe6f11e7c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd14bd90765349e6542cb77206dabe6f11e7c83/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d44f2d2491cc2c5f603da79737dacac84715ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d44f2d2491cc2c5f603da79737dacac84715ef", "html_url": "https://github.com/rust-lang/rust/commit/19d44f2d2491cc2c5f603da79737dacac84715ef"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b88185c3154a9fea222d470159aa1afd4ee2dc17", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfd14bd90765349e6542cb77206dabe6f11e7c83/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd14bd90765349e6542cb77206dabe6f11e7c83/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=bfd14bd90765349e6542cb77206dabe6f11e7c83", "patch": "@@ -32,7 +32,7 @@ use hir::print::Nested;\n use hir::svh::Svh;\n use util::nodemap::{DefIdMap, FxHashMap};\n \n-use arena::TypedArena;\n+use arena::SyncTypedArena;\n use std::io;\n use ty::TyCtxt;\n \n@@ -219,15 +219,15 @@ impl<'hir> MapEntry<'hir> {\n pub struct Forest {\n     krate: Crate,\n     pub dep_graph: DepGraph,\n-    inlined_bodies: TypedArena<Body>\n+    inlined_bodies: SyncTypedArena<Body>\n }\n \n impl Forest {\n     pub fn new(krate: Crate, dep_graph: &DepGraph) -> Forest {\n         Forest {\n             krate,\n             dep_graph: dep_graph.clone(),\n-            inlined_bodies: TypedArena::new()\n+            inlined_bodies: SyncTypedArena::new()\n         }\n     }\n "}, {"sha": "40cc43c3ca670d00e56b7d160f449d762cd7cf09", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfd14bd90765349e6542cb77206dabe6f11e7c83/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd14bd90765349e6542cb77206dabe6f11e7c83/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=bfd14bd90765349e6542cb77206dabe6f11e7c83", "patch": "@@ -37,7 +37,7 @@ use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span};\n use syntax_pos::symbol::InternedString;\n use util::nodemap::FxHashMap;\n-use arena::DroplessArena;\n+use arena::SyncDroplessArena;\n \n use self::combine::CombineFields;\n use self::higher_ranked::HrMatchResult;\n@@ -407,15 +407,15 @@ impl fmt::Display for FixupError {\n /// F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>).\n pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     global_tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-    arena: DroplessArena,\n+    arena: SyncDroplessArena,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n     pub fn infer_ctxt(self) -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n-            arena: DroplessArena::new(),\n+            arena: SyncDroplessArena::new(),\n             fresh_tables: None,\n \n         }"}, {"sha": "fea0172576989b90c660532ceff8b2cc362a5925", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfd14bd90765349e6542cb77206dabe6f11e7c83/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd14bd90765349e6542cb77206dabe6f11e7c83/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=bfd14bd90765349e6542cb77206dabe6f11e7c83", "patch": "@@ -57,7 +57,7 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableHasher, StableHasherResult,\n                                            StableVec};\n-use arena::{TypedArena, DroplessArena};\n+use arena::{TypedArena, SyncDroplessArena};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, Lock};\n use std::any::Any;\n@@ -82,14 +82,14 @@ use hir;\n \n pub struct AllArenas<'tcx> {\n     pub global: GlobalArenas<'tcx>,\n-    pub interner: DroplessArena,\n+    pub interner: SyncDroplessArena,\n }\n \n impl<'tcx> AllArenas<'tcx> {\n     pub fn new() -> Self {\n         AllArenas {\n             global: GlobalArenas::new(),\n-            interner: DroplessArena::new(),\n+            interner: SyncDroplessArena::new(),\n         }\n     }\n }\n@@ -129,7 +129,7 @@ type InternedSet<'tcx, T> = Lock<FxHashSet<Interned<'tcx, T>>>;\n \n pub struct CtxtInterners<'tcx> {\n     /// The arena that types, regions, etc are allocated from\n-    arena: &'tcx DroplessArena,\n+    arena: &'tcx SyncDroplessArena,\n \n     /// Specifically use a speedy hash algorithm for these hash sets,\n     /// they're accessed quite often.\n@@ -146,7 +146,7 @@ pub struct CtxtInterners<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n-    fn new(arena: &'tcx DroplessArena) -> CtxtInterners<'tcx> {\n+    fn new(arena: &'tcx SyncDroplessArena) -> CtxtInterners<'tcx> {\n         CtxtInterners {\n             arena,\n             type_: Default::default(),\n@@ -1554,7 +1554,7 @@ impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n     /// Call the closure with a local `TyCtxt` using the given arena.\n     pub fn enter_local<F, R>(\n         &self,\n-        arena: &'tcx DroplessArena,\n+        arena: &'tcx SyncDroplessArena,\n         f: F\n     ) -> R\n     where"}]}