{"sha": "ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMWFiOGFmYTliZDkzYTA3ODcyYWE2YWMyODFlZTYyZDcyYzQ5ZDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-15T11:42:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-15T11:42:10Z"}, "message": "Rollup merge of #57579 - stjepang:once-with, r=SimonSapin\n\nAdd core::iter::once_with()\n\nFunctions `iter::once()` and `iter::repeat()` construct iterators from values. The latter has the lazy variant `iter::repeat_with()`, but the former doesn't. This PR therefore adds `iter::once_with()`.\n\nAnother way to think of `iter::once_with()` is that it's a function that converts `FnOnce() -> T` into `Iterator<Item = T>`.\n\nIf this seems like a reasonable addition, I'll open a tracking issue and update the `#[feature(...)]` attributes.", "tree": {"sha": "bc0b5188b4e3d9d4fafc2d8e8ad2604c1489d4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0b5188b4e3d9d4fafc2d8e8ad2604c1489d4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPccSCRBK7hj4Ov3rIwAAdHIIAGtTadPTgbUWtNAy/ed0oqgY\n5e+LNNryynPqiVjiRsUYCcpFI5s1tkECaUg0WllxsmXA4KC8Zg6XLjb0b/8GNpeR\nRDlrGyjvE/dryAfnhSsF6ZM52tbcc5h4hg9zw+sGVfcjcVilqPJWea/yNKxN4WzD\nV6csQjtYZfvlM5M/j23k2YeeF5MxKofYSYVi/mkDYcXpUDM0euIk4Z4Sz5uyHbZU\npGbmJi/kmuhEIZoAD9laCFsxfnxh3+GQ9sqmUk7p/eIJAp/SK+F26k9dp5VEVo6s\nAQGlJDaYgQ+XkGH5Y0JhJynJSUxH4mM8uadOL8BFBJL/zLDDAWXgx7P6QGhdzjY=\n=Mltm\n-----END PGP SIGNATURE-----\n", "payload": "tree bc0b5188b4e3d9d4fafc2d8e8ad2604c1489d4bb\nparent e8cfae4140ca237b277b3e5afac61f6504c54191\nparent 3a1f0131a63a32a82f22b1c4ae04f8177730588f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547552530 +0100\ncommitter GitHub <noreply@github.com> 1547552530 +0100\n\nRollup merge of #57579 - stjepang:once-with, r=SimonSapin\n\nAdd core::iter::once_with()\n\nFunctions `iter::once()` and `iter::repeat()` construct iterators from values. The latter has the lazy variant `iter::repeat_with()`, but the former doesn't. This PR therefore adds `iter::once_with()`.\n\nAnother way to think of `iter::once_with()` is that it's a function that converts `FnOnce() -> T` into `Iterator<Item = T>`.\n\nIf this seems like a reasonable addition, I'll open a tracking issue and update the `#[feature(...)]` attributes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "html_url": "https://github.com/rust-lang/rust/commit/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8cfae4140ca237b277b3e5afac61f6504c54191", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cfae4140ca237b277b3e5afac61f6504c54191", "html_url": "https://github.com/rust-lang/rust/commit/e8cfae4140ca237b277b3e5afac61f6504c54191"}, {"sha": "3a1f0131a63a32a82f22b1c4ae04f8177730588f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1f0131a63a32a82f22b1c4ae04f8177730588f", "html_url": "https://github.com/rust-lang/rust/commit/3a1f0131a63a32a82f22b1c4ae04f8177730588f"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "974906b682d21c1b9e4aa7ae4aabc3cecb1151c7", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "patch": "@@ -329,6 +329,8 @@ pub use self::sources::{RepeatWith, repeat_with};\n pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{Once, once};\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+pub use self::sources::{OnceWith, once_with};\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n pub use self::sources::{Unfold, unfold, Successors, successors};\n "}, {"sha": "2590fa6023a5333996565c53376b7d0bc23a16ad", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "patch": "@@ -377,6 +377,119 @@ pub fn once<T>(value: T) -> Once<T> {\n     Once { inner: Some(value).into_iter() }\n }\n \n+/// An iterator that repeats elements of type `A` endlessly by\n+/// applying the provided closure `F: FnMut() -> A`.\n+///\n+/// This `struct` is created by the [`once_with`] function.\n+/// See its documentation for more.\n+///\n+/// [`once_with`]: fn.once_with.html\n+#[derive(Copy, Clone, Debug)]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+pub struct OnceWith<F> {\n+    gen: Option<F>,\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n+    type Item = A;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        self.gen.take().map(|f| f())\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.gen.iter().size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> DoubleEndedIterator for OnceWith<F> {\n+    fn next_back(&mut self) -> Option<A> {\n+        self.next()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> ExactSizeIterator for OnceWith<F> {\n+    fn len(&self) -> usize {\n+        self.gen.iter().len()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> FusedIterator for OnceWith<F> {}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n+\n+/// Creates an iterator that lazily generates a value exactly once by invoking\n+/// the provided closure.\n+///\n+/// This is commonly used to adapt a single value generator into a [`chain`] of\n+/// other kinds of iteration. Maybe you have an iterator that covers almost\n+/// everything, but you need an extra special case. Maybe you have a function\n+/// which works on iterators, but you only need to process one value.\n+///\n+/// Unlike [`once`], this function will lazily generate the value on request.\n+///\n+/// [`once`]: fn.once.html\n+/// [`chain`]: trait.Iterator.html#method.chain\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// #![feature(iter_once_with)]\n+///\n+/// use std::iter;\n+///\n+/// // one is the loneliest number\n+/// let mut one = iter::once_with(|| 1);\n+///\n+/// assert_eq!(Some(1), one.next());\n+///\n+/// // just one, that's all we get\n+/// assert_eq!(None, one.next());\n+/// ```\n+///\n+/// Chaining together with another iterator. Let's say that we want to iterate\n+/// over each file of the `.foo` directory, but also a configuration file,\n+/// `.foorc`:\n+///\n+/// ```no_run\n+/// #![feature(iter_once_with)]\n+///\n+/// use std::iter;\n+/// use std::fs;\n+/// use std::path::PathBuf;\n+///\n+/// let dirs = fs::read_dir(\".foo\").unwrap();\n+///\n+/// // we need to convert from an iterator of DirEntry-s to an iterator of\n+/// // PathBufs, so we use map\n+/// let dirs = dirs.map(|file| file.unwrap().path());\n+///\n+/// // now, our iterator just for our config file\n+/// let config = iter::once_with(|| PathBuf::from(\".foorc\"));\n+///\n+/// // chain the two iterators together into one big iterator\n+/// let files = dirs.chain(config);\n+///\n+/// // this will give us all of the files in .foo as well as .foorc\n+/// for f in files {\n+///     println!(\"{:?}\", f);\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n+    OnceWith { gen: Some(gen) }\n+}\n+\n /// Creates a new iterator where each iteration calls the provided closure\n /// `F: FnMut(&mut St) -> Option<T>`.\n ///"}, {"sha": "33c0da8a540491953bd7d037853436a832baaab7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "patch": "@@ -79,6 +79,7 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n+#![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]"}, {"sha": "3944bc749d0296b75fbdbc5e49bcb527c24b7e63", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "patch": "@@ -1,3 +1,4 @@\n+use core::cell::Cell;\n use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n@@ -1906,6 +1907,23 @@ fn test_once() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_once_with() {\n+    let count = Cell::new(0);\n+    let mut it = once_with(|| {\n+        count.set(count.get() + 1);\n+        42\n+    });\n+\n+    assert_eq!(count.get(), 0);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(count.get(), 1);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(count.get(), 1);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(count.get(), 1);\n+}\n+\n #[test]\n fn test_empty() {\n     let mut it = empty::<i32>();"}, {"sha": "a9b8decfd0262beb381f0bffbf55e1b5a0c1a2da", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=ae1ab8afa9bd93a07872aa6ac281ee62d72c49d6", "patch": "@@ -12,6 +12,7 @@\n #![feature(hashmap_internals)]\n #![feature(iter_copied)]\n #![feature(iter_nth_back)]\n+#![feature(iter_once_with)]\n #![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}]}