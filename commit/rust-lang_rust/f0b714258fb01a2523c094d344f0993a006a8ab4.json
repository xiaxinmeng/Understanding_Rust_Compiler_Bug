{"sha": "f0b714258fb01a2523c094d344f0993a006a8ab4", "node_id": "C_kwDOAAsO6NoAKGYwYjcxNDI1OGZiMDFhMjUyM2MwOTRkMzQ0ZjA5OTNhMDA2YThhYjQ", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T05:00:50Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T05:00:50Z"}, "message": "Remove `in_band_lifetimes` for `rustc_monomorphize`", "tree": {"sha": "1714bd129648502f011df45223ce280a9c20e76d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1714bd129648502f011df45223ce280a9c20e76d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0b714258fb01a2523c094d344f0993a006a8ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b714258fb01a2523c094d344f0993a006a8ab4", "html_url": "https://github.com/rust-lang/rust/commit/f0b714258fb01a2523c094d344f0993a006a8ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0b714258fb01a2523c094d344f0993a006a8ab4/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "html_url": "https://github.com/rust-lang/rust/commit/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "b1fa9041342a6e3744c3daa4e7c0714f344c7ad0", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=f0b714258fb01a2523c094d344f0993a006a8ab4", "patch": "@@ -498,7 +498,7 @@ fn record_accesses<'a, 'tcx: 'a>(\n /// the user's terminal with thousands of lines of type-name.\n ///\n /// If the type name is longer than before+after, it will be written to a file.\n-fn shrunk_instance_name(\n+fn shrunk_instance_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: &Instance<'tcx>,\n     before: usize,\n@@ -1145,7 +1145,7 @@ struct RootCollector<'a, 'tcx> {\n     entry_fn: Option<(DefId, EntryFnType)>,\n }\n \n-impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n+impl<'v> ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n     fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         match item.kind {\n             hir::ItemKind::ExternCrate(..)\n@@ -1225,7 +1225,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n     fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}\n }\n \n-impl RootCollector<'_, 'v> {\n+impl<'v> RootCollector<'_, 'v> {\n     fn is_root(&self, def_id: LocalDefId) -> bool {\n         !item_requires_monomorphization(self.tcx, def_id)\n             && match self.mode {"}, {"sha": "21ac174ba90b771a4de495d4e2820c18d0c5b671", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=f0b714258fb01a2523c094d344f0993a006a8ab4", "patch": "@@ -3,7 +3,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n-#![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "516c9a9259d4fe17624e245b327b71e5b643961b", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=f0b714258fb01a2523c094d344f0993a006a8ab4", "patch": "@@ -378,7 +378,7 @@ fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_>) -> Symbol {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n-fn mono_item_linkage_and_visibility(\n+fn mono_item_linkage_and_visibility<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: &MonoItem<'tcx>,\n     can_be_internalized: &mut bool,\n@@ -393,7 +393,7 @@ fn mono_item_linkage_and_visibility(\n \n type CguNameCache = FxHashMap<(DefId, bool), Symbol>;\n \n-fn mono_item_visibility(\n+fn mono_item_visibility<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: &MonoItem<'tcx>,\n     can_be_internalized: &mut bool,"}, {"sha": "6084cdda22768f7bf06ed30ba53a3ccbc7905063", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b714258fb01a2523c094d344f0993a006a8ab4/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=f0b714258fb01a2523c094d344f0993a006a8ab4", "patch": "@@ -7,7 +7,7 @@ use std::io::prelude::*;\n ///\n /// During the same compile all closures dump the information in the same file\n /// \"closure_profile_XXXXX.csv\", which is created in the directory where the compiler is invoked.\n-crate fn dump_closure_profile(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n+crate fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n     let mut file = if let Ok(file) = OpenOptions::new()\n         .create(true)\n         .append(true)"}]}