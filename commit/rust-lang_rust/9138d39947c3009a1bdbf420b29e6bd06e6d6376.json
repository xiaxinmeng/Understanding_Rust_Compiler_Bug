{"sha": "9138d39947c3009a1bdbf420b29e6bd06e6d6376", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzhkMzk5NDdjMzAwOWExYmRiZjQyMGIyOWU2YmQwNmU2ZDYzNzY=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-09T00:50:41Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-09T00:50:41Z"}, "message": "Clean up completion matching.\n\n- Add test to ensure nested completions don't happen", "tree": {"sha": "1f5837f292eb8843d7cecf2023643b8528ac06b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f5837f292eb8843d7cecf2023643b8528ac06b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9138d39947c3009a1bdbf420b29e6bd06e6d6376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9138d39947c3009a1bdbf420b29e6bd06e6d6376", "html_url": "https://github.com/rust-lang/rust/commit/9138d39947c3009a1bdbf420b29e6bd06e6d6376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9138d39947c3009a1bdbf420b29e6bd06e6d6376/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c439355ce5337002fe83d940329596f75400696", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c439355ce5337002fe83d940329596f75400696", "html_url": "https://github.com/rust-lang/rust/commit/7c439355ce5337002fe83d940329596f75400696"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "ba7d43f1e958d75a9ea4071759d4b476e1b01781", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 53, "deletions": 24, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9138d39947c3009a1bdbf420b29e6bd06e6d6376/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9138d39947c3009a1bdbf420b29e6bd06e6d6376/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=9138d39947c3009a1bdbf420b29e6bd06e6d6376", "patch": "@@ -34,7 +34,7 @@\n use hir::{self, Docs, HasSource};\n use ra_assists::utils::get_missing_impl_items;\n use ra_syntax::{\n-    ast::{self, edit},\n+    ast::{self, edit, ImplDef},\n     AstNode, SyntaxKind, SyntaxNode, TextRange,\n };\n use ra_text_edit::TextEdit;\n@@ -47,29 +47,7 @@ use crate::{\n };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    let mut tokens = ctx.token.ancestors();\n-    let completion_match = tokens\n-        .find(|p| match p.kind() {\n-            SyntaxKind::FN_DEF\n-            | SyntaxKind::TYPE_ALIAS_DEF\n-            | SyntaxKind::CONST_DEF\n-            | SyntaxKind::NAME_REF\n-            | SyntaxKind::BLOCK_EXPR => true,\n-            _ => false,\n-        })\n-        .and_then(|trigger| {\n-            for p in tokens {\n-                match p.kind() {\n-                    // No nested completions\n-                    SyntaxKind::FN_DEF | SyntaxKind::BLOCK => return None,\n-                    SyntaxKind::IMPL_DEF => return ast::ImplDef::cast(p).map(|p| (trigger, p)),\n-                    _ => {}\n-                }\n-            }\n-            None\n-        });\n-\n-    if let Some((trigger, impl_def)) = completion_match {\n+    if let Some((trigger, impl_def)) = completion_match(ctx) {\n         match trigger.kind() {\n             SyntaxKind::NAME_REF => {\n                 get_missing_impl_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n@@ -123,6 +101,36 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     }\n }\n \n+fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n+    let (trigger_idx, trigger) =\n+        ctx.token.ancestors().enumerate().find(|(_idx, p)| match p.kind() {\n+            SyntaxKind::FN_DEF\n+            | SyntaxKind::TYPE_ALIAS_DEF\n+            | SyntaxKind::CONST_DEF\n+            | SyntaxKind::NAME_REF\n+            | SyntaxKind::BLOCK_EXPR => true,\n+            _ => false,\n+        })?;\n+    let (impl_def_idx, impl_def) =\n+        ctx.token.ancestors().enumerate().skip(trigger_idx + 1).find_map(|(idx, p)| {\n+            match p.kind() {\n+                SyntaxKind::IMPL_DEF => ast::ImplDef::cast(p).map(|p| (idx, p)),\n+                _ => None,\n+            }\n+        })?;\n+    let _is_nested = ctx\n+        .token\n+        .ancestors()\n+        .skip(trigger_idx + 1)\n+        .take(impl_def_idx - trigger_idx - 1)\n+        .find_map(|p| match p.kind() {\n+            SyntaxKind::FN_DEF | SyntaxKind::BLOCK => Some(()),\n+            _ => None,\n+        })\n+        .xor(Some(()))?;\n+    Some((trigger, impl_def))\n+}\n+\n fn add_function_impl(\n     fn_def_node: &SyntaxNode,\n     acc: &mut Completions,\n@@ -278,6 +286,27 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn no_nested_fn_completions() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn test();\n+                fn test2();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                fn test() {\n+                    t<|>\n+                }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"[]\"###);\n+    }\n+\n     #[test]\n     fn name_ref_single_function() {\n         let completions = complete("}]}