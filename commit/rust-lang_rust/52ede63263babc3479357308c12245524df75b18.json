{"sha": "52ede63263babc3479357308c12245524df75b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZWRlNjMyNjNiYWJjMzQ3OTM1NzMwOGMxMjI0NTUyNGRmNzViMTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-20T20:43:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-21T11:06:28Z"}, "message": "Remove the parse-fail test suite", "tree": {"sha": "a3d40988491b1332e252e0cb5603981ec277b1f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d40988491b1332e252e0cb5603981ec277b1f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ede63263babc3479357308c12245524df75b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ede63263babc3479357308c12245524df75b18", "html_url": "https://github.com/rust-lang/rust/commit/52ede63263babc3479357308c12245524df75b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ede63263babc3479357308c12245524df75b18/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e1f8970fc9a74c13bd7ae2655c66f03d3fc69f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e1f8970fc9a74c13bd7ae2655c66f03d3fc69f", "html_url": "https://github.com/rust-lang/rust/commit/73e1f8970fc9a74c13bd7ae2655c66f03d3fc69f"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "71a89cd6d76b432a4e14071d83b9b3d8a26204c0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -379,7 +379,6 @@ impl<'a> Builder<'a> {\n                 test::Ui,\n                 test::RunPass,\n                 test::CompileFail,\n-                test::ParseFail,\n                 test::RunFail,\n                 test::RunPassValgrind,\n                 test::MirOpt,"}, {"sha": "fe04a91011ee530b4b5bcefc65008fb41596a973", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -773,12 +773,6 @@ default_test!(CompileFail {\n     suite: \"compile-fail\"\n });\n \n-default_test!(ParseFail {\n-    path: \"src/test/parse-fail\",\n-    mode: \"parse-fail\",\n-    suite: \"parse-fail\"\n-});\n-\n default_test!(RunFail {\n     path: \"src/test/run-fail\",\n     mode: \"run-fail\","}, {"sha": "f2a29b0315100cda4328c588c01646e2c0de718d", "filename": "src/ci/docker/wasm32-unknown/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -36,7 +36,6 @@ ENV SCRIPT python2.7 /checkout/x.py test --target $TARGETS \\\n   src/test/ui \\\n   src/test/run-pass \\\n   src/test/compile-fail \\\n-  src/test/parse-fail \\\n   src/test/mir-opt \\\n   src/test/codegen-units \\\n   src/libcore \\"}, {"sha": "1d79f95a4d2bbadb4f41f150ea75605100a3410c", "filename": "src/etc/generate-keyword-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Fetc%2Fgenerate-keyword-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Fetc%2Fgenerate-keyword-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-keyword-tests.py?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -44,7 +44,7 @@\n \"\"\"\n \n test_dir = os.path.abspath(\n-    os.path.join(os.path.dirname(__file__), '../test/parse-fail')\n+    os.path.join(os.path.dirname(__file__), '../test/ui/parser')\n )\n \n for kw in sys.argv[1:]:"}, {"sha": "a8e25596621ca3bb66d29ea9bdbe2d82204d5803", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -19,7 +19,6 @@ use util::PathBufExt;\n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,\n-    ParseFail,\n     RunFail,\n     /// This now behaves like a `ui` test that has an implict `// run-pass`.\n     RunPass,\n@@ -56,7 +55,6 @@ impl FromStr for Mode {\n     fn from_str(s: &str) -> Result<Mode, ()> {\n         match s {\n             \"compile-fail\" => Ok(CompileFail),\n-            \"parse-fail\" => Ok(ParseFail),\n             \"run-fail\" => Ok(RunFail),\n             \"run-pass\" => Ok(RunPass),\n             \"run-pass-valgrind\" => Ok(RunPassValgrind),\n@@ -80,7 +78,6 @@ impl fmt::Display for Mode {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let s = match *self {\n             CompileFail => \"compile-fail\",\n-            ParseFail => \"parse-fail\",\n             RunFail => \"run-fail\",\n             RunPass => \"run-pass\",\n             RunPassValgrind => \"run-pass-valgrind\","}, {"sha": "ca30a4dd95d0e1137b88dd7cdbdb9cd9824c446b", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -139,7 +139,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"\",\n             \"mode\",\n             \"which sort of compile tests to run\",\n-            \"(compile-fail|parse-fail|run-fail|run-pass|\\\n+            \"(compile-fail|run-fail|run-pass|\\\n              run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n         )\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")"}, {"sha": "a80bbd401ab43c70fcc305fea79db444e755069e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ede63263babc3479357308c12245524df75b18/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ede63263babc3479357308c12245524df75b18/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=52ede63263babc3479357308c12245524df75b18", "patch": "@@ -12,7 +12,7 @@ use common::CompareMode;\n use common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use common::{output_base_dir, output_base_name, output_testname_unique};\n use common::{Codegen, CodegenUnits, DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n-use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n+use common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Config, TestPaths};\n use common::{Incremental, MirOpt, RunMake, Ui};\n use diff;\n@@ -265,7 +265,7 @@ impl<'test> TestCx<'test> {\n     /// revisions, exactly once, with revision == None).\n     fn run_revision(&self) {\n         match self.config.mode {\n-            CompileFail | ParseFail => self.run_cfail_test(),\n+            CompileFail => self.run_cfail_test(),\n             RunFail => self.run_rfail_test(),\n             RunPassValgrind => self.run_valgrind_test(),\n             Pretty => self.run_pretty_test(),\n@@ -296,7 +296,7 @@ impl<'test> TestCx<'test> {\n \n     fn should_compile_successfully(&self) -> bool {\n         match self.config.mode {\n-            ParseFail | CompileFail => self.props.compile_pass,\n+            CompileFail => self.props.compile_pass,\n             RunPass => true,\n             Ui => self.props.compile_pass,\n             Incremental => {\n@@ -1741,7 +1741,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         match self.config.mode {\n-            CompileFail | ParseFail | Incremental => {\n+            CompileFail | Incremental => {\n                 // If we are extracting and matching errors in the new\n                 // fashion, then you want JSON mode. Old-skool error\n                 // patterns still match the raw compiler output."}]}