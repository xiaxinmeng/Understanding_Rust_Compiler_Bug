{"sha": "e88948a1960597d40960922f3c9dc209bc737242", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ODk0OGExOTYwNTk3ZDQwOTYwOTIyZjNjOWRjMjA5YmM3MzcyNDI=", "commit": {"author": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-26T12:45:19Z"}, "committer": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-28T07:46:34Z"}, "message": "Fail fast if generator_kind is None", "tree": {"sha": "45433fd2889f082f2a25334ead1a53a40d8d966e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45433fd2889f082f2a25334ead1a53a40d8d966e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88948a1960597d40960922f3c9dc209bc737242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88948a1960597d40960922f3c9dc209bc737242", "html_url": "https://github.com/rust-lang/rust/commit/e88948a1960597d40960922f3c9dc209bc737242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88948a1960597d40960922f3c9dc209bc737242/comments", "author": null, "committer": null, "parents": [{"sha": "ed66492a6ae903365be46f9ed8fa3e9ef121023a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed66492a6ae903365be46f9ed8fa3e9ef121023a", "html_url": "https://github.com/rust-lang/rust/commit/ed66492a6ae903365be46f9ed8fa3e9ef121023a"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "5d88629435bf1a2a76c2f5b19fe213bfd07b90e0", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e88948a1960597d40960922f3c9dc209bc737242/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88948a1960597d40960922f3c9dc209bc737242/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e88948a1960597d40960922f3c9dc209bc737242", "patch": "@@ -1064,14 +1064,15 @@ fn create_generator_resume_function<'tcx>(\n     cases.insert(0, (UNRESUMED, BasicBlock::new(0)));\n \n     // Panic when resumed on the returned or poisoned state\n-    if let Some(generator_kind) = body.generator_kind {\n-        cases.insert(1, (RETURNED, insert_panic_block(tcx,\n-                                                      body,\n-                                                      ResumedAfterReturn(generator_kind))));\n-        cases.insert(2, (POISONED, insert_panic_block(tcx,\n-                                                      body,\n-                                                      ResumedAfterPanic(generator_kind))));\n-    };\n+    let generator_kind = body.generator_kind.unwrap();\n+    cases.insert(1, (RETURNED, insert_panic_block(\n+        tcx,\n+        body,\n+        ResumedAfterReturn(generator_kind))));\n+    cases.insert(2, (POISONED, insert_panic_block(\n+        tcx,\n+        body,\n+        ResumedAfterPanic(generator_kind))));\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);\n "}]}