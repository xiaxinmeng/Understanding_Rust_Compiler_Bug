{"sha": "4cfb92f4598a6571523bce8b72188df559e2a2b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZmI5MmY0NTk4YTY1NzE1MjNiY2U4YjcyMTg4ZGY1NTllMmEyYjM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-23T20:51:53Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-25T07:07:30Z"}, "message": "Use region variance to remove a bunch of unsafety in sync/arc (#2282)", "tree": {"sha": "c1e23c0d351c7b39f885c2a78da9280a2bcae45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e23c0d351c7b39f885c2a78da9280a2bcae45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cfb92f4598a6571523bce8b72188df559e2a2b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfb92f4598a6571523bce8b72188df559e2a2b3", "html_url": "https://github.com/rust-lang/rust/commit/4cfb92f4598a6571523bce8b72188df559e2a2b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cfb92f4598a6571523bce8b72188df559e2a2b3/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d00603d782ee637fe9130b542fdee0c626b3810", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d00603d782ee637fe9130b542fdee0c626b3810", "html_url": "https://github.com/rust-lang/rust/commit/8d00603d782ee637fe9130b542fdee0c626b3810"}], "stats": {"total": 69, "additions": 15, "deletions": 54}, "files": [{"sha": "aec9aaeb0be5454157289cc682dccdf41f17ca3a", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 12, "deletions": 45, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4cfb92f4598a6571523bce8b72188df559e2a2b3/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfb92f4598a6571523bce8b72188df559e2a2b3/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=4cfb92f4598a6571523bce8b72188df559e2a2b3", "patch": "@@ -182,16 +182,9 @@ impl<T: send> &mutex_arc<T> {\n         do (&state.lock).lock_cond |cond| {\n             check_poison(true, state.failed);\n             let _z = poison_on_fail(&mut state.failed);\n-            /*\n             blk(&mut state.data,\n                 &condvar { is_mutex: true, failed: &mut state.failed,\n                            cond: cond })\n-            */\n-            // FIXME(#2282) region variance\n-            let fref =\n-                unsafe { unsafe::transmute_mut_region(&mut state.failed) };\n-            let cvar = condvar { is_mutex: true, failed: fref, cond: cond };\n-            blk(&mut state.data, unsafe { unsafe::transmute_region(&cvar) } )\n         }\n     }\n }\n@@ -302,17 +295,9 @@ impl<T: const send> &rw_arc<T> {\n         do borrow_rwlock(state).write_cond |cond| {\n             check_poison(false, state.failed);\n             let _z = poison_on_fail(&mut state.failed);\n-            /*\n             blk(&mut state.data,\n                 &condvar { is_mutex: false, failed: &mut state.failed,\n                            cond: cond })\n-            */\n-            // FIXME(#2282): Need region variance to use the commented-out\n-            // code above instead of this casting mess\n-            let fref =\n-                unsafe { unsafe::transmute_mut_region(&mut state.failed) };\n-            let cvar = condvar { is_mutex: false, failed: fref, cond: cond };\n-            blk(&mut state.data, unsafe { unsafe::transmute_region(&cvar) } )\n         }\n     }\n     /**\n@@ -353,11 +338,8 @@ impl<T: const send> &rw_arc<T> {\n         let state = unsafe { get_shared_mutable_state(&self.x) };\n         do borrow_rwlock(state).write_downgrade |write_mode| {\n             check_poison(false, state.failed);\n-            // FIXME(#2282) need region variance to avoid having to cast here\n-            let (data,failed) =\n-                unsafe { (unsafe::transmute_mut_region(&mut state.data),\n-                          unsafe::transmute_mut_region(&mut state.failed)) };\n-            blk(rw_write_mode((data, write_mode, poison_on_fail(failed))))\n+            blk(rw_write_mode((&mut state.data, write_mode,\n+                               poison_on_fail(&mut state.failed))))\n         }\n     }\n \n@@ -401,8 +383,8 @@ fn unwrap_rw_arc<T: const send>(+arc: rw_arc<T>) -> T {\n // lock it. This wraps the unsafety, with the justification that the 'lock'\n // field is never overwritten; only 'failed' and 'data'.\n #[doc(hidden)]\n-fn borrow_rwlock<T: const send>(state: &mut rw_arc_inner<T>) -> &rwlock {\n-    unsafe { unsafe::reinterpret_cast(&state.lock) }\n+fn borrow_rwlock<T: const send>(state: &r/mut rw_arc_inner<T>) -> &r/rwlock {\n+    unsafe { unsafe::transmute_immut(&mut state.lock) }\n }\n \n // FIXME (#3154) ice with struct/&<T> prevents these from being structs.\n@@ -418,9 +400,7 @@ impl<T: const send> &rw_write_mode<T> {\n     fn write<U>(blk: fn(x: &mut T) -> U) -> U {\n         match *self {\n             rw_write_mode((data, ref token, _)) => {\n-                // FIXME(#2282) cast to avoid region invariance\n-                let mode = unsafe { unsafe::transmute_region(token) };\n-                do mode.write {\n+                do token.write {\n                     blk(data)\n                 }\n             }\n@@ -430,13 +410,10 @@ impl<T: const send> &rw_write_mode<T> {\n     fn write_cond<U>(blk: fn(x: &x/mut T, c: &c/condvar) -> U) -> U {\n         match *self {\n             rw_write_mode((data, ref token, ref poison)) => {\n-                // FIXME(#2282) cast to avoid region invariance\n-                let mode = unsafe { unsafe::transmute_region(token) };\n-                do mode.write_cond |cond| {\n+                do token.write_cond |cond| {\n                     let cvar = condvar {\n                         is_mutex: false, failed: poison.failed,\n-                        cond: unsafe { unsafe::reinterpret_cast(cond) } };\n-                    // FIXME(#2282) region variance would avoid having to cast\n+                        cond: cond };\n                     blk(data, &cvar)\n                 }\n             }\n@@ -449,9 +426,7 @@ impl<T: const send> &rw_read_mode<T> {\n     fn read<U>(blk: fn(x: &T) -> U) -> U {\n         match *self {\n             rw_read_mode((data, ref token)) => {\n-                // FIXME(#2282) cast to avoid region invariance\n-                let mode = unsafe { unsafe::transmute_region(token) };\n-                do mode.read { blk(data) }\n+                do token.read { blk(data) }\n             }\n         }\n     }\n@@ -593,9 +568,7 @@ mod tests {\n         let arc2 = ~arc.clone();\n         do task::try {\n             do arc2.write_downgrade |write_mode| {\n-                // FIXME(#2282)\n-                let mode = unsafe { unsafe::transmute_region(&write_mode) };\n-                do mode.write |one| {\n+                do (&write_mode).write |one| {\n                     assert *one == 2;\n                 }\n             }\n@@ -637,9 +610,7 @@ mod tests {\n         do task::try {\n             do arc2.write_downgrade |write_mode| {\n                 let read_mode = arc2.downgrade(write_mode);\n-                // FIXME(#2282)\n-                let mode = unsafe { unsafe::transmute_region(&read_mode) };\n-                do mode.read |one| {\n+                do (&read_mode).read |one| {\n                     assert *one == 2;\n                 }\n             }\n@@ -728,9 +699,7 @@ mod tests {\n \n         // Downgrader (us)\n         do arc.write_downgrade |write_mode| {\n-            // FIXME(#2282)\n-            let mode = unsafe { unsafe::transmute_region(&write_mode) };\n-            do mode.write_cond |state, cond| {\n+            do (&write_mode).write_cond |state, cond| {\n                 wc1.send(()); // send to another writer who will wake us up\n                 while *state == 0 {\n                     cond.wait();\n@@ -745,9 +714,7 @@ mod tests {\n                 }\n             }\n             let read_mode = arc.downgrade(write_mode);\n-            // FIXME(#2282)\n-            let mode = unsafe { unsafe::transmute_region(&read_mode) };\n-            do mode.read |state| {\n+            do (&read_mode).read |state| {\n                 // complete handshake with other readers\n                 for vec::each(reader_convos) |x| {\n                     match x {"}, {"sha": "5c8568b29b0d0f18a40def9b68fef00b118393a5", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cfb92f4598a6571523bce8b72188df559e2a2b3/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfb92f4598a6571523bce8b72188df559e2a2b3/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=4cfb92f4598a6571523bce8b72188df559e2a2b3", "patch": "@@ -998,16 +998,12 @@ mod tests {\n             write => x.write(blk),\n             downgrade =>\n                 do x.write_downgrade |mode| {\n-                    // FIXME(#2282)\n-                    let mode = unsafe { unsafe::transmute_region(&mode) };\n-                    mode.write(blk);\n+                    (&mode).write(blk);\n                 },\n             downgrade_read =>\n                 do x.write_downgrade |mode| {\n                     let mode = x.downgrade(mode);\n-                    // FIXME(#2282)\n-                    let mode = unsafe { unsafe::transmute_region(&mode) };\n-                    mode.read(blk);\n+                    (&mode).read(blk);\n                 },\n         }\n     }\n@@ -1152,9 +1148,7 @@ mod tests {\n         fn lock_cond(x: &rwlock, downgrade: bool, blk: fn(c: &condvar)) {\n             if downgrade {\n                 do x.write_downgrade |mode| {\n-                    // FIXME(#2282)\n-                    let mode = unsafe { unsafe::transmute_region(&mode) };\n-                    mode.write_cond(blk)\n+                    (&mode).write_cond(blk)\n                 }\n             } else {\n                 x.write_cond(blk)"}]}