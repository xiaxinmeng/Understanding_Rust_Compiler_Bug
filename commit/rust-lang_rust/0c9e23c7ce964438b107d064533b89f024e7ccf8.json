{"sha": "0c9e23c7ce964438b107d064533b89f024e7ccf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOWUyM2M3Y2U5NjQ0MzhiMTA3ZDA2NDUzM2I4OWYwMjRlN2NjZjg=", "commit": {"author": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-22T21:38:22Z"}, "committer": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-22T21:55:03Z"}, "message": "Fix: appeased x.py test tidy --bless", "tree": {"sha": "fa8c228f8b62f33140d493ad73f92baaf252b63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa8c228f8b62f33140d493ad73f92baaf252b63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c9e23c7ce964438b107d064533b89f024e7ccf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9e23c7ce964438b107d064533b89f024e7ccf8", "html_url": "https://github.com/rust-lang/rust/commit/0c9e23c7ce964438b107d064533b89f024e7ccf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c9e23c7ce964438b107d064533b89f024e7ccf8/comments", "author": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "html_url": "https://github.com/rust-lang/rust/commit/eeb0b52bf852b902b2bd1adaf919c35e2387ce28"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3b3017e37c1f0b7e46472eaa5254735291248462", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c9e23c7ce964438b107d064533b89f024e7ccf8/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9e23c7ce964438b107d064533b89f024e7ccf8/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=0c9e23c7ce964438b107d064533b89f024e7ccf8", "patch": "@@ -257,7 +257,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n-\t        Self::S390x(r) => r.name(),\n+            Self::S390x(r) => r.name(),\n             Self::Bpf(r) => r.name(),\n             Self::Err => \"<reg>\",\n         }\n@@ -312,7 +312,7 @@ impl InlineAsmReg {\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-    \t    InlineAsmArch::S390x => {\n+            InlineAsmArch::S390x => {\n                 Self::S390x(S390xInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::SpirV => {\n@@ -715,11 +715,11 @@ pub fn allocatable_registers(\n             mips::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-\t    InlineAsmArch::S390x => {\n-\t        let mut map = s390x::regclass_map();\n+        InlineAsmArch::S390x => {\n+            let mut map = s390x::regclass_map();\n             s390x::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n-\t    }\n+        }\n         InlineAsmArch::SpirV => {\n             let mut map = spirv::regclass_map();\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);"}, {"sha": "29f370928713bb1d97e85255b37e06df2afe98ea", "filename": "compiler/rustc_target/src/asm/s390x.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c9e23c7ce964438b107d064533b89f024e7ccf8/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9e23c7ce964438b107d064533b89f024e7ccf8/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs?ref=0c9e23c7ce964438b107d064533b89f024e7ccf8", "patch": "@@ -113,7 +113,7 @@ def_regs! {\n             \"c14 is reserved by the kernel and cannot be used as an operand for inline asm\",\n         #error = [\"c15\"] =>\n             \"c15 is reserved by the kernel and cannot be used as an operand for inline asm\",\n-\t    #error = [\"a2\"] =>\n+        #error = [\"a2\"] =>\n             \"a2 is not supported by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"a3\"] =>\n             \"a3 is not supported by LLVM and cannot be used as an operand for inline asm\","}, {"sha": "dd8a256516e6fa7d991a0155c093d4d5bc415ca4", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c9e23c7ce964438b107d064533b89f024e7ccf8/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9e23c7ce964438b107d064533b89f024e7ccf8/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=0c9e23c7ce964438b107d064533b89f024e7ccf8", "patch": "@@ -49,7 +49,7 @@ extern \"Rust\" {\n }\n \n macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n-    #[no_mangle]     \n+    #[no_mangle]\n     pub unsafe fn $func(x: $ty) -> $ty {\n         dont_merge(stringify!(func));\n \n@@ -60,7 +60,7 @@ macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n };}\n \n macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n-    #[no_mangle]    \n+    #[no_mangle]\n     pub unsafe fn $func(x: $ty) -> $ty {\n         dont_merge(stringify!(func));\n "}]}