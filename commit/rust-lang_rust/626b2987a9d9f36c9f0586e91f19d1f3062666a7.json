{"sha": "626b2987a9d9f36c9f0586e91f19d1f3062666a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNmIyOTg3YTlkOWYzNmM5ZjA1ODZlOTFmMTlkMWYzMDYyNjY2YTc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-08-20T05:34:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-08-24T09:51:09Z"}, "message": "Introduce `UnionIntoIdxSet` and `SubtractFromIdxSet` traits.\n\nThey let `union()`, `union_sparse()` and `union_hybrid()` be merged.\nLikewise for subtract()`, `subtract_sparse()` and `subtract_hybrid()`.", "tree": {"sha": "d47328b67179dcf41a13d036708e04d89d408cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47328b67179dcf41a13d036708e04d89d408cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/626b2987a9d9f36c9f0586e91f19d1f3062666a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/626b2987a9d9f36c9f0586e91f19d1f3062666a7", "html_url": "https://github.com/rust-lang/rust/commit/626b2987a9d9f36c9f0586e91f19d1f3062666a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/626b2987a9d9f36c9f0586e91f19d1f3062666a7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "180052d5f7c5fba4ee08a10f3cc5d6e44ffe1a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/180052d5f7c5fba4ee08a10f3cc5d6e44ffe1a55", "html_url": "https://github.com/rust-lang/rust/commit/180052d5f7c5fba4ee08a10f3cc5d6e44ffe1a55"}], "stats": {"total": 126, "additions": 78, "deletions": 48}, "files": [{"sha": "65fdf10a86d13f7d6fa1897a7bbe9a40f9adea62", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 68, "deletions": 38, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=626b2987a9d9f36c9f0586e91f19d1f3062666a7", "patch": "@@ -19,6 +19,20 @@ use bitslice::{bitwise, Union, Subtract, Intersect};\n use indexed_vec::Idx;\n use rustc_serialize;\n \n+/// This is implemented by all the index sets so that IdxSet::union() can be\n+/// passed any type of index set.\n+pub trait UnionIntoIdxSet<T: Idx> {\n+    // Performs `other = other | self`.\n+    fn union_into(&self, other: &mut IdxSet<T>) -> bool;\n+}\n+\n+/// This is implemented by all the index sets so that IdxSet::subtract() can be\n+/// passed any type of index set.\n+pub trait SubtractFromIdxSet<T: Idx> {\n+    // Performs `other = other - self`.\n+    fn subtract_from(&self, other: &mut IdxSet<T>) -> bool;\n+}\n+\n /// Represents a set of some element type E, where each E is identified by some\n /// unique index type `T`.\n ///\n@@ -164,48 +178,14 @@ impl<T: Idx> IdxSet<T> {\n \n     /// Set `self = self | other` and return true if `self` changed\n     /// (i.e., if new bits were added).\n-    pub fn union(&mut self, other: &IdxSet<T>) -> bool {\n-        bitwise(self.words_mut(), other.words(), &Union)\n-    }\n-\n-    /// Like `union()`, but takes a `SparseIdxSet` argument.\n-    fn union_sparse(&mut self, other: &SparseIdxSet<T>) -> bool {\n-        let mut changed = false;\n-        for elem in other.iter() {\n-            changed |= self.add(&elem);\n-        }\n-        changed\n-    }\n-\n-    /// Like `union()`, but takes a `HybridIdxSet` argument.\n-    pub fn union_hybrid(&mut self, other: &HybridIdxSet<T>) -> bool {\n-        match other {\n-            HybridIdxSet::Sparse(sparse, _) => self.union_sparse(sparse),\n-            HybridIdxSet::Dense(dense, _) => self.union(dense),\n-        }\n+    pub fn union(&mut self, other: &impl UnionIntoIdxSet<T>) -> bool {\n+        other.union_into(self)\n     }\n \n     /// Set `self = self - other` and return true if `self` changed.\n     /// (i.e., if any bits were removed).\n-    pub fn subtract(&mut self, other: &IdxSet<T>) -> bool {\n-        bitwise(self.words_mut(), other.words(), &Subtract)\n-    }\n-\n-    /// Like `subtract()`, but takes a `SparseIdxSet` argument.\n-    fn subtract_sparse(&mut self, other: &SparseIdxSet<T>) -> bool {\n-        let mut changed = false;\n-        for elem in other.iter() {\n-            changed |= self.remove(&elem);\n-        }\n-        changed\n-    }\n-\n-    /// Like `subtract()`, but takes a `HybridIdxSet` argument.\n-    pub fn subtract_hybrid(&mut self, other: &HybridIdxSet<T>) -> bool {\n-        match other {\n-            HybridIdxSet::Sparse(sparse, _) => self.subtract_sparse(sparse),\n-            HybridIdxSet::Dense(dense, _) => self.subtract(dense),\n-        }\n+    pub fn subtract(&mut self, other: &impl SubtractFromIdxSet<T>) -> bool {\n+        other.subtract_from(self)\n     }\n \n     /// Set `self = self & other` and return true if `self` changed.\n@@ -223,6 +203,18 @@ impl<T: Idx> IdxSet<T> {\n     }\n }\n \n+impl<T: Idx> UnionIntoIdxSet<T> for IdxSet<T> {\n+    fn union_into(&self, other: &mut IdxSet<T>) -> bool {\n+        bitwise(other.words_mut(), self.words(), &Union)\n+    }\n+}\n+\n+impl<T: Idx> SubtractFromIdxSet<T> for IdxSet<T> {\n+    fn subtract_from(&self, other: &mut IdxSet<T>) -> bool {\n+        bitwise(other.words_mut(), self.words(), &Subtract)\n+    }\n+}\n+\n pub struct Iter<'a, T: Idx> {\n     cur: Option<(Word, usize)>,\n     iter: iter::Enumerate<slice::Iter<'a, Word>>,\n@@ -308,6 +300,26 @@ impl<T: Idx> SparseIdxSet<T> {\n     }\n }\n \n+impl<T: Idx> UnionIntoIdxSet<T> for SparseIdxSet<T> {\n+    fn union_into(&self, other: &mut IdxSet<T>) -> bool {\n+        let mut changed = false;\n+        for elem in self.iter() {\n+            changed |= other.add(&elem);\n+        }\n+        changed\n+    }\n+}\n+\n+impl<T: Idx> SubtractFromIdxSet<T> for SparseIdxSet<T> {\n+    fn subtract_from(&self, other: &mut IdxSet<T>) -> bool {\n+        let mut changed = false;\n+        for elem in self.iter() {\n+            changed |= other.remove(&elem);\n+        }\n+        changed\n+    }\n+}\n+\n pub struct SparseIter<'a, T: Idx> {\n     iter: slice::Iter<'a, T>,\n }\n@@ -411,6 +423,24 @@ impl<T: Idx> HybridIdxSet<T> {\n     }\n }\n \n+impl<T: Idx> UnionIntoIdxSet<T> for HybridIdxSet<T> {\n+    fn union_into(&self, other: &mut IdxSet<T>) -> bool {\n+        match self {\n+            HybridIdxSet::Sparse(sparse, _) => sparse.union_into(other),\n+            HybridIdxSet::Dense(dense, _) => dense.union_into(other),\n+        }\n+    }\n+}\n+\n+impl<T: Idx> SubtractFromIdxSet<T> for HybridIdxSet<T> {\n+    fn subtract_from(&self, other: &mut IdxSet<T>) -> bool {\n+        match self {\n+            HybridIdxSet::Sparse(sparse, _) => sparse.subtract_from(other),\n+            HybridIdxSet::Dense(dense, _) => dense.subtract_from(other),\n+        }\n+    }\n+}\n+\n pub enum HybridIter<'a, T: Idx> {\n     Sparse(SparseIter<'a, T>),\n     Dense(Iter<'a, T>),"}, {"sha": "1f7faa21a12c06c892dfd7eefbe33371e76e96fd", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=626b2987a9d9f36c9f0586e91f19d1f3062666a7", "patch": "@@ -129,8 +129,8 @@ where\n         F: FnOnce(Iter<BD::Idx>),\n     {\n         let mut curr_state = self.curr_state.clone();\n-        curr_state.union_hybrid(&self.stmt_gen);\n-        curr_state.subtract_hybrid(&self.stmt_kill);\n+        curr_state.union(&self.stmt_gen);\n+        curr_state.subtract(&self.stmt_kill);\n         f(curr_state.iter());\n     }\n }\n@@ -193,8 +193,8 @@ impl<BD> FlowsAtLocation for FlowAtLocation<BD>\n     }\n \n     fn apply_local_effect(&mut self, _loc: Location) {\n-        self.curr_state.union_hybrid(&self.stmt_gen);\n-        self.curr_state.subtract_hybrid(&self.stmt_kill);\n+        self.curr_state.union(&self.stmt_gen);\n+        self.curr_state.subtract(&self.stmt_kill);\n     }\n }\n "}, {"sha": "48d349978686df58db2574200ec8a7cf114571ed", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=626b2987a9d9f36c9f0586e91f19d1f3062666a7", "patch": "@@ -241,8 +241,8 @@ impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: Bi\n                 let sets = self.builder.flow_state.sets.for_block(bb.index());\n                 debug_assert!(in_out.words().len() == sets.on_entry.words().len());\n                 in_out.overwrite(sets.on_entry);\n-                in_out.union_hybrid(sets.gen_set);\n-                in_out.subtract_hybrid(sets.kill_set);\n+                in_out.union(sets.gen_set);\n+                in_out.subtract(sets.kill_set);\n             }\n             self.builder.propagate_bits_into_graph_successors_of(\n                 in_out, (bb, bb_data), &mut dirty_queue);\n@@ -534,8 +534,8 @@ impl<'a, E:Idx> BlockSets<'a, E> {\n     }\n \n     fn apply_local_effect(&mut self) {\n-        self.on_entry.union_hybrid(&self.gen_set);\n-        self.on_entry.subtract_hybrid(&self.kill_set);\n+        self.on_entry.union(self.gen_set);\n+        self.on_entry.subtract(self.kill_set);\n     }\n }\n "}, {"sha": "eda7de0fd79d48da9ade13918219acb914d4af23", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b2987a9d9f36c9f0586e91f19d1f3062666a7/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=626b2987a9d9f36c9f0586e91f19d1f3062666a7", "patch": "@@ -209,8 +209,8 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             &mut sets, Location { block: bb, statement_index: j });\n         results.0.operator.statement_effect(\n             &mut sets, Location { block: bb, statement_index: j });\n-        sets.on_entry.union_hybrid(sets.gen_set);\n-        sets.on_entry.subtract_hybrid(sets.kill_set);\n+        sets.on_entry.union(sets.gen_set);\n+        sets.on_entry.subtract(sets.kill_set);\n     }\n \n     results.0.operator.before_terminator_effect("}]}