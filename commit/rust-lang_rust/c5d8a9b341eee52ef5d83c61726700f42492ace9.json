{"sha": "c5d8a9b341eee52ef5d83c61726700f42492ace9", "node_id": "C_kwDOAAsO6NoAKGM1ZDhhOWIzNDFlZWU1MmVmNWQ4M2M2MTcyNjcwMGY0MjQ5MmFjZTk", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T13:17:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "move expr", "tree": {"sha": "8e4bbb60f654b8b7ae55e2785fda8602797fe096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e4bbb60f654b8b7ae55e2785fda8602797fe096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d8a9b341eee52ef5d83c61726700f42492ace9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d8a9b341eee52ef5d83c61726700f42492ace9", "html_url": "https://github.com/rust-lang/rust/commit/c5d8a9b341eee52ef5d83c61726700f42492ace9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d8a9b341eee52ef5d83c61726700f42492ace9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "url": "https://api.github.com/repos/rust-lang/rust/commits/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "html_url": "https://github.com/rust-lang/rust/commit/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "6cc655786cb39f6209f83dcd1b705421ec0dbe0e", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5d8a9b341eee52ef5d83c61726700f42492ace9/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d8a9b341eee52ef5d83c61726700f42492ace9/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=c5d8a9b341eee52ef5d83c61726700f42492ace9", "patch": "@@ -691,7 +691,11 @@ fn match_leaf(lhs: &tt::Leaf, src: &mut TtIter) -> Result<(), ExpandError> {\n fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragment>> {\n     let fragment = match kind {\n         \"path\" => ParserEntryPoint::Path,\n-        \"expr\" => ParserEntryPoint::Expr,\n+        \"expr\" => {\n+            return input\n+                .expect_fragment2(parser::PrefixEntryPoint::Expr)\n+                .map(|tt| tt.map(Fragment::Expr));\n+        }\n         \"ty\" => {\n             return input\n                 .expect_fragment2(parser::PrefixEntryPoint::Ty)"}, {"sha": "6789c61f4b3d47eeb17534bf0cc91345f0182d7e", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5d8a9b341eee52ef5d83c61726700f42492ace9/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d8a9b341eee52ef5d83c61726700f42492ace9/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=c5d8a9b341eee52ef5d83c61726700f42492ace9", "patch": "@@ -69,6 +69,9 @@ pub(crate) mod entry {\n         pub(crate) fn ty(p: &mut Parser) {\n             types::type_(p);\n         }\n+        pub(crate) fn expr(p: &mut Parser) {\n+            let _ = expressions::expr(p);\n+        }\n     }\n }\n "}, {"sha": "6aeed8a2887e9fadb8c732236aaa213bbf0d42b8", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5d8a9b341eee52ef5d83c61726700f42492ace9/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d8a9b341eee52ef5d83c61726700f42492ace9/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=c5d8a9b341eee52ef5d83c61726700f42492ace9", "patch": "@@ -57,6 +57,7 @@ pub enum PrefixEntryPoint {\n     Stmt,\n     Pat,\n     Ty,\n+    Expr,\n }\n \n impl PrefixEntryPoint {\n@@ -67,6 +68,7 @@ impl PrefixEntryPoint {\n             PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n             PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n             PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n+            PrefixEntryPoint::Expr => grammar::entry::prefix::expr,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);"}]}