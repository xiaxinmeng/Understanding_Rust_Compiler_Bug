{"sha": "84663cee394a56950dbb11e320e38096e15001c3", "node_id": "C_kwDOAAsO6NoAKDg0NjYzY2VlMzk0YTU2OTUwZGJiMTFlMzIwZTM4MDk2ZTE1MDAxYzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-28T05:06:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-28T05:06:43Z"}, "message": "Rollup merge of #103641 - compiler-errors:issue-103624, r=cjgillot\n\nDon't carry MIR location in `ConstraintCategory::CallArgument`\n\nIt turns out that `ConstraintCategory::CallArgument` cannot just carry a MIR location in it, since we may bubble them up to totally different MIR bodies.\n\nSo instead, revert the commit a6b5f95fb028f9feb4a2957c06b35035be2c6155, and instead just erase regions from the original `Option<Ty<'tcx>>` that it carried, so that it doesn't ICE with the changes in #103220.\n\nBest reviewed in parts -- the first is just a revert, and the second is where the meaningful changes happen.\n\nFixes #103624", "tree": {"sha": "a0ea6142376e9ff692c3b914804148d79a56fef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ea6142376e9ff692c3b914804148d79a56fef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84663cee394a56950dbb11e320e38096e15001c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjW2NjCRBK7hj4Ov3rIwAAhuAIAHbH0I2sw3/vd9fhZwhGQCrh\nabtFd9LUK+zn+goI2dIn13GquK3FJAsIygliIUM8l5EitZXTSZZlqSyENHH0STLi\n2tQZWDtjzIfIrHOnIg4CCF9pbsDo/nUdiuAC5b7myIP0M8dI/d86azkmi3vOwsgB\nrT4y2aJPHPqZotQHdHLFNbsNrLLPcK3DCLYyRh+SFMePtgav8O3uFSCm/w60r0Hj\nD3LpkhnMPdJA/y9sG/VWLyoIAY0FxGzWGqz7Zj9dbU1Smt7eewuOl4HJ3Os2zACN\nRfTvcRKEYNWF1L04h+3iU57hct8bUCWEJcugyxvyOGN6ZeY1Cp4HHafNJlDg2tQ=\n=TrL2\n-----END PGP SIGNATURE-----\n", "payload": "tree a0ea6142376e9ff692c3b914804148d79a56fef2\nparent f541ad91657bb8b3276198e85d60f738da3b7bb8\nparent 4e0c27bbfd263580c971aee1ef6960914e20a7ff\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666933603 +0200\ncommitter GitHub <noreply@github.com> 1666933603 +0200\n\nRollup merge of #103641 - compiler-errors:issue-103624, r=cjgillot\n\nDon't carry MIR location in `ConstraintCategory::CallArgument`\n\nIt turns out that `ConstraintCategory::CallArgument` cannot just carry a MIR location in it, since we may bubble them up to totally different MIR bodies.\n\nSo instead, revert the commit a6b5f95fb028f9feb4a2957c06b35035be2c6155, and instead just erase regions from the original `Option<Ty<'tcx>>` that it carried, so that it doesn't ICE with the changes in #103220.\n\nBest reviewed in parts -- the first is just a revert, and the second is where the meaningful changes happen.\n\nFixes #103624\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84663cee394a56950dbb11e320e38096e15001c3", "html_url": "https://github.com/rust-lang/rust/commit/84663cee394a56950dbb11e320e38096e15001c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84663cee394a56950dbb11e320e38096e15001c3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f541ad91657bb8b3276198e85d60f738da3b7bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f541ad91657bb8b3276198e85d60f738da3b7bb8", "html_url": "https://github.com/rust-lang/rust/commit/f541ad91657bb8b3276198e85d60f738da3b7bb8"}, {"sha": "4e0c27bbfd263580c971aee1ef6960914e20a7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0c27bbfd263580c971aee1ef6960914e20a7ff", "html_url": "https://github.com/rust-lang/rust/commit/4e0c27bbfd263580c971aee1ef6960914e20a7ff"}], "stats": {"total": 265, "additions": 165, "deletions": 100}, "files": [{"sha": "df04128135b8986c2a976af99df433447e1f1af2", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -92,7 +92,7 @@ pub struct OutlivesConstraint<'tcx> {\n     pub span: Span,\n \n     /// What caused this constraint?\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n \n     /// Variance diagnostic information\n     pub variance_info: VarianceDiagInfo<'tcx>,"}, {"sha": "583bc2e281da4a507f1e06231c08da6bf3cb0ada", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -983,7 +983,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err: &mut Diagnostic,\n         location: Location,\n         issued_borrow: &BorrowData<'tcx>,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) {\n         let used_in_call = matches!(\n             explanation,\n@@ -1333,7 +1333,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n@@ -1539,7 +1539,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n         proper_span: Span,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         if let BorrowExplanation::MustBeValidFor { category, span, from_closure: false, .. } =\n             explanation\n@@ -1653,7 +1653,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         borrow_span: Span,\n         return_span: Span,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         opt_place_desc: Option<&String>,\n     ) -> Option<DiagnosticBuilder<'cx, ErrorGuaranteed>> {\n         let return_kind = match category {\n@@ -1748,7 +1748,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         use_span: UseSpans<'tcx>,\n         var_span: Span,\n         fr_name: &RegionName,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         constraint_span: Span,\n         captured_var: &str,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {"}, {"sha": "582d683dd359320679164d3aff5c75991122b2a7", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -21,7 +21,7 @@ use crate::{\n use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n-pub(crate) enum BorrowExplanation {\n+pub(crate) enum BorrowExplanation<'tcx> {\n     UsedLater(LaterUseKind, Span, Option<Span>),\n     UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n@@ -30,7 +30,7 @@ pub(crate) enum BorrowExplanation {\n         should_note_order: bool,\n     },\n     MustBeValidFor {\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         from_closure: bool,\n         span: Span,\n         region_name: RegionName,\n@@ -49,7 +49,7 @@ pub(crate) enum LaterUseKind {\n     Other,\n }\n \n-impl<'tcx> BorrowExplanation {\n+impl<'tcx> BorrowExplanation<'tcx> {\n     pub(crate) fn is_explained(&self) -> bool {\n         !matches!(self, BorrowExplanation::Unexplained)\n     }\n@@ -284,7 +284,7 @@ impl<'tcx> BorrowExplanation {\n     fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n         err: &mut Diagnostic,\n-        category: &ConstraintCategory,\n+        category: &ConstraintCategory<'tcx>,\n         span: Span,\n         region_name: &RegionName,\n     ) {\n@@ -316,7 +316,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n+    ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n         let (blame_constraint, extra_info) = self.regioncx.best_blame_constraint(\n             borrow_region,\n             NllRegionVariableOrigin::FreeRegion,\n@@ -348,7 +348,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n         kind_place: Option<(WriteKind, Place<'tcx>)>,\n-    ) -> BorrowExplanation {\n+    ) -> BorrowExplanation<'tcx> {\n         let regioncx = &self.regioncx;\n         let body: &Body<'_> = &self.body;\n         let tcx = self.infcx.tcx;"}, {"sha": "35c3df768995a0d2907db1cb174122666596a9cc", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -161,7 +161,7 @@ impl OutlivesSuggestionBuilder {\n     pub(crate) fn intermediate_suggestion(\n         &mut self,\n         mbcx: &MirBorrowckCtxt<'_, '_>,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'_>,\n         diag: &mut Diagnostic,\n     ) {\n         // Emit an intermediate note."}, {"sha": "15230718dc0dee21f140070050507b30338714ae", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -2,7 +2,6 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n //! Error reporting machinery for lifetime errors.\n \n-use either::Either;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n@@ -17,7 +16,7 @@ use rustc_infer::infer::{\n     NllRegionVariableOrigin, RelateParamBound,\n };\n use rustc_middle::hir::place::PlaceBase;\n-use rustc_middle::mir::{ConstraintCategory, ReturnConstraint, TerminatorKind};\n+use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n@@ -40,7 +39,7 @@ use crate::{\n     MirBorrowckCtxt,\n };\n \n-impl ConstraintDescription for ConstraintCategory {\n+impl<'tcx> ConstraintDescription for ConstraintCategory<'tcx> {\n     fn description(&self) -> &'static str {\n         // Must end with a space. Allows for empty names to be provided.\n         match self {\n@@ -116,15 +115,15 @@ pub(crate) enum RegionErrorKind<'tcx> {\n \n /// Information about the various region constraints involved in a borrow checker error.\n #[derive(Clone, Debug)]\n-pub struct ErrorConstraintInfo {\n+pub struct ErrorConstraintInfo<'tcx> {\n     // fr: outlived_fr\n     pub(super) fr: RegionVid,\n     pub(super) fr_is_local: bool,\n     pub(super) outlived_fr: RegionVid,\n     pub(super) outlived_fr_is_local: bool,\n \n     // Category and span for best blame constraint\n-    pub(super) category: ConstraintCategory,\n+    pub(super) category: ConstraintCategory<'tcx>,\n     pub(super) span: Span,\n }\n \n@@ -499,7 +498,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn report_fnmut_error(\n         &self,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'tcx>,\n         kind: ReturnConstraint,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n@@ -572,7 +571,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn report_escaping_data_error(\n         &self,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { span, category, .. } = errci;\n \n@@ -676,7 +675,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn report_general_error(\n         &self,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo {\n             fr,\n@@ -789,20 +788,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         diag: &mut Diagnostic,\n         f: Region<'tcx>,\n         o: Region<'tcx>,\n-        category: &ConstraintCategory,\n+        category: &ConstraintCategory<'tcx>,\n     ) {\n         if !o.is_static() {\n             return;\n         }\n \n         let tcx = self.infcx.tcx;\n \n-        let instance =\n-            if let ConstraintCategory::CallArgument(location) = category\n-                && let Either::Right(term) = self.body.stmt_at(*location)\n-                && let TerminatorKind::Call { func, .. } = &term.kind\n-        {\n-            let func_ty = func.ty(self.body, tcx);\n+        let instance = if let ConstraintCategory::CallArgument(Some(func_ty)) = category {\n             let (fn_did, substs) = match func_ty.kind() {\n                 ty::FnDef(fn_did, substs) => (fn_did, substs),\n                 _ => return,"}, {"sha": "8b63294fbab0ee3af1abd29c58269aa2546352e5", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -91,7 +91,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// Map closure bounds to a `Span` that should be used for error reporting.\n     closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n \n     /// Map universe indexes to information on why we created it.\n     universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n@@ -267,7 +267,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n-            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n+            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>,\n         >,\n         universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n         type_tests: Vec<TypeTest<'tcx>>,\n@@ -1807,7 +1807,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn retrieve_closure_constraint_info(\n         &self,\n         constraint: OutlivesConstraint<'tcx>,\n-    ) -> Option<(ConstraintCategory, Span)> {\n+    ) -> Option<(ConstraintCategory<'tcx>, Span)> {\n         match constraint.locations {\n             Locations::All(_) => None,\n             Locations::Single(loc) => {\n@@ -1822,7 +1822,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr1: RegionVid,\n         fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n-    ) -> (ConstraintCategory, ObligationCause<'tcx>) {\n+    ) -> (ConstraintCategory<'tcx>, ObligationCause<'tcx>) {\n         let BlameConstraint { category, cause, .. } = self\n             .best_blame_constraint(fr1, fr1_origin, |r| self.provides_universal_region(r, fr1, fr2))\n             .0;\n@@ -2362,7 +2362,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n \n #[derive(Clone, Debug)]\n pub struct BlameConstraint<'tcx> {\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n     pub from_closure: bool,\n     pub cause: ObligationCause<'tcx>,\n     pub variance_info: ty::VarianceDiagInfo<'tcx>,"}, {"sha": "a581726a15c9c4ff6bfc77e9d241074a365b3a62", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     pub(super) fn fully_perform_op<R: fmt::Debug, Op>(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         op: Op,\n     ) -> Fallible<R>\n     where\n@@ -85,7 +85,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         trait_ref: ty::TraitRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         self.prove_predicate(\n             ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         for predicate in predicates {\n             let predicate = predicate.to_predicate(self.tcx());\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicate: ty::Predicate<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         value: T,\n         location: impl NormalizeLocation,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> T\n     where\n         T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,"}, {"sha": "d5bfc2f520826c7163b12fdd187a6ef6d0bfa17d", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -37,7 +37,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n-    category: ConstraintCategory,\n+    category: ConstraintCategory<'tcx>,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n }\n \n@@ -50,7 +50,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     ) -> Self {\n         Self {\n@@ -175,7 +175,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         &mut self,\n         sup: ty::RegionVid,\n         sub: ty::RegionVid,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         let category = match self.category {\n             ConstraintCategory::Boring | ConstraintCategory::BoringNoLocation => category,\n@@ -203,7 +203,7 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         _origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        constraint_category: ConstraintCategory,\n+        constraint_category: ConstraintCategory<'tcx>,\n     ) {\n         let b = self.to_region_vid(b);\n         let a = self.to_region_vid(a);"}, {"sha": "42c92e56e1623fd055409f6e6db85c23c28b4b09", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -942,7 +942,7 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n     pub(crate) member_constraints: MemberConstraintSet<'tcx, RegionVid>,\n \n     pub(crate) closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n \n     pub(crate) universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n@@ -1133,7 +1133,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn push_region_constraints(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         data: &QueryRegionConstraints<'tcx>,\n     ) {\n         debug!(\"constraints generated: {:#?}\", data);\n@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         sub: Ty<'tcx>,\n         sup: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         // Use this order of parameters because the sup type is usually the\n         // \"expected\" type in diagnostics.\n@@ -1171,7 +1171,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         self.relate_types(expected, ty::Variance::Invariant, found, locations, category)\n     }\n@@ -1183,7 +1183,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         user_ty: &UserTypeProjection,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n@@ -1618,12 +1618,19 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n \n+        let func_ty = if let TerminatorKind::Call { func, .. } = &term.kind {\n+            Some(func.ty(body, self.infcx.tcx))\n+        } else {\n+            None\n+        };\n+        debug!(?func_ty);\n+\n         for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n \n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n-                ConstraintCategory::CallArgument(term_location)\n+                ConstraintCategory::CallArgument(self.infcx.tcx.erase_regions(func_ty))\n             } else {\n                 ConstraintCategory::Boring\n             };"}, {"sha": "4f2dc263bf57b024c138adb9ab90ca41d387b0cb", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         b: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         a: ty::SubstsRef<'tcx>,\n         b: ty::SubstsRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -64,7 +64,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     locations: Locations,\n \n     /// What category do we assign the resulting `'a: 'b` relationships?\n-    category: ConstraintCategory,\n+    category: ConstraintCategory<'tcx>,\n \n     /// Information so that error reporting knows what types we are relating\n     /// when reporting a bound region error.\n@@ -75,7 +75,7 @@ impl<'me, 'bccx, 'tcx> NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n         Self { type_checker, locations, category, universe_info }"}, {"sha": "a299a3e578d2237bf8a32dea8157939fdcedf200", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -632,7 +632,7 @@ impl<'tcx> InferCtxt<'tcx> {\n /// creates query region constraints.\n pub fn make_query_region_constraints<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory)>,\n+    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory<'tcx>)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n ) -> QueryRegionConstraints<'tcx> {\n     let RegionConstraintData { constraints, verifys, givens, member_constraints } ="}, {"sha": "ffb020398b858f90d1e3104a93a8a622619be9f0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -425,7 +425,7 @@ pub enum SubregionOrigin<'tcx> {\n static_assert_size!(SubregionOrigin<'_>, 32);\n \n impl<'tcx> SubregionOrigin<'tcx> {\n-    pub fn to_constraint_category(&self) -> ConstraintCategory {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n         match self {\n             Self::Subtype(type_trace) => type_trace.cause.to_constraint_category(),\n             Self::AscribeUserTypeProvePredicate(span) => ConstraintCategory::Predicate(*span),"}, {"sha": "6ca884799aa6fb3b77b5891c6ff20175f9aab922", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -210,7 +210,7 @@ pub trait TypeOutlivesDelegate<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        constraint_category: ConstraintCategory,\n+        constraint_category: ConstraintCategory<'tcx>,\n     );\n \n     fn push_verify(\n@@ -259,7 +259,7 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         assert!(!ty.has_escaping_bound_vars());\n \n@@ -273,7 +273,7 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         components: &[Component<'tcx>],\n         region: ty::Region<'tcx>,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         for component in components.iter() {\n             let origin = origin.clone();\n@@ -529,7 +529,7 @@ impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        _constraint_category: ConstraintCategory,\n+        _constraint_category: ConstraintCategory<'tcx>,\n     ) {\n         self.sub_regions(origin, a, b)\n     }"}, {"sha": "d3cf519b633c71db5860a291a17347e06ac07104", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -302,8 +302,10 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryOutlivesConstraint<'tcx> =\n-    (ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>, ConstraintCategory);\n+pub type QueryOutlivesConstraint<'tcx> = (\n+    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>,\n+    ConstraintCategory<'tcx>,\n+);\n \n TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {"}, {"sha": "79db35a764a805464696c4d97f0c6c1acecfcd4e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -2904,7 +2904,7 @@ fn pretty_print_const_value<'tcx>(\n /// `Location` represents the position of the start of the statement; or, if\n /// `statement_index` equals the number of statements, then the start of the\n /// terminator.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable)]\n pub struct Location {\n     /// The block that the location is within.\n     pub block: BasicBlock,"}, {"sha": "efd7357afc46c98f1b886a42e3b0b9217137ccce", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -15,7 +15,7 @@ use smallvec::SmallVec;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n-use super::{Field, Location, SourceInfo};\n+use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n@@ -314,21 +314,21 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub blame_span: Span,\n \n     // ... due to this reason.\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n }\n \n // Make sure this enum doesn't unintentionally grow\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ConstraintCategory, 16);\n+rustc_data_structures::static_assert_size!(ConstraintCategory<'_>, 16);\n \n /// Outlives-constraints can be categorized to determine whether and why they\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n ///\n /// See also `rustc_const_eval::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub enum ConstraintCategory {\n+#[derive(TyEncodable, TyDecodable, HashStable, Lift, TypeVisitable, TypeFoldable)]\n+pub enum ConstraintCategory<'tcx> {\n     Return(ReturnConstraint),\n     Yield,\n     UseAsConst,\n@@ -342,7 +342,7 @@ pub enum ConstraintCategory {\n     ClosureBounds,\n \n     /// Contains the function type if available.\n-    CallArgument(Location),\n+    CallArgument(Option<Ty<'tcx>>),\n     CopyBound,\n     SizedBound,\n     Assignment,\n@@ -368,10 +368,6 @@ pub enum ConstraintCategory {\n     Internal,\n }\n \n-TrivialTypeTraversalAndLiftImpls! {\n-    ConstraintCategory,\n-}\n-\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable, TypeVisitable, TypeFoldable)]\n pub enum ReturnConstraint {"}, {"sha": "e73d44bbb36c38e7b21f41a50bfd3916befe55f6", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         self\n     }\n \n-    pub fn to_constraint_category(&self) -> ConstraintCategory {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n         match self.code() {\n             MatchImpl(cause, _) => cause.to_constraint_category(),\n             AscribeUserTypeProvePredicate(predicate_span) => {"}, {"sha": "77841780f621655e91b0a9e098c5560efce79507", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -15,19 +15,19 @@ LL |     let a = bar(f, x);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:40:13\n+  --> $DIR/project-fn-ret-invariant.rs:42:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n-LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |     let a = bar(f, x);\n+...\n+LL |     let b = bar(f, y);\n    |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a function pointer to `foo`\n-   = note: the function `foo` is invariant over the parameter `'a`\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other"}, {"sha": "e043379133ab041caef74535d315b2b630cac0a2", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -39,8 +39,8 @@ fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     let f = foo; // <-- No consistent type can be inferred for `f` here.\n     let a = bar(f, x);\n     //[oneuse]~^ ERROR lifetime may not live long enough\n-    //[oneuse]~| ERROR lifetime may not live long enough\n     let b = bar(f, y);\n+    //[oneuse]~^ ERROR lifetime may not live long enough\n     (a, b)\n }\n "}, {"sha": "aa947b6900366a6d0edb25288672f866d90eba51", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -1,23 +1,22 @@\n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-72312.rs:12:24\n+  --> $DIR/issue-72312.rs:12:9\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n    |                          |\n    |                          `self` is a reference that is only valid in the associated function body\n    |                          let's call the lifetime of this reference `'1`\n ...\n-LL |           require_static(async move {\n-   |  ________________________^\n+LL | /         require_static(async move {\n LL | |\n LL | |\n LL | |\n LL | |             &self;\n LL | |         });\n-   | |         ^\n-   | |         |\n-   | |_________`self` escapes the associated function body here\n-   |           argument requires that `'1` must outlive `'static`\n+   | |          ^\n+   | |          |\n+   | |__________`self` escapes the associated function body here\n+   |            argument requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "f1fa95f92469b49fd43ef8760929b703fd9260a5", "filename": "src/test/ui/borrowck/issue-103624.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -0,0 +1,31 @@\n+// edition:2021\n+\n+struct StructA {\n+    b: StructB,\n+}\n+\n+async fn spawn_blocking<T>(f: impl (Fn() -> T) + Send + Sync + 'static) -> T {\n+    todo!()\n+}\n+\n+impl StructA {\n+    async fn foo(&self) {\n+        let bar = self.b.bar().await;\n+        spawn_blocking(move || {\n+            //~^ ERROR borrowed data escapes outside of associated function\n+            self.b;\n+            //~^ ERROR cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n+        })\n+        .await;\n+    }\n+}\n+\n+struct StructB {}\n+\n+impl StructB {\n+    async fn bar(&self) -> Option<u8> {\n+        None\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e6a35dd8801afc280faa41643ee659e24dea0d38", "filename": "src/test/ui/borrowck/issue-103624.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -0,0 +1,35 @@\n+error[E0507]: cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n+  --> $DIR/issue-103624.rs:16:13\n+   |\n+LL |     async fn foo(&self) {\n+   |                  ----- captured outer variable\n+LL |         let bar = self.b.bar().await;\n+LL |         spawn_blocking(move || {\n+   |                        ------- captured by this `Fn` closure\n+LL |\n+LL |             self.b;\n+   |             ^^^^^^ move occurs because `self.b` has type `StructB`, which does not implement the `Copy` trait\n+\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-103624.rs:14:9\n+   |\n+LL |       async fn foo(&self) {\n+   |                    -----\n+   |                    |\n+   |                    `self` is a reference that is only valid in the associated function body\n+   |                    let's call the lifetime of this reference `'1`\n+LL |           let bar = self.b.bar().await;\n+LL | /         spawn_blocking(move || {\n+LL | |\n+LL | |             self.b;\n+LL | |\n+LL | |         })\n+   | |          ^\n+   | |          |\n+   | |__________`self` escapes the associated function body here\n+   |            argument requires that `'1` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0507, E0521.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "01293379700d28ca717a24e470761d8fff529851", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -53,14 +53,15 @@ LL | fn case2() {\n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26\n    |\n-LL |     let cell = Cell::new(&a);\n-   |                ----------^^-\n-   |                |         |\n-   |                |         borrowed value does not live long enough\n-   |                argument requires that `a` is borrowed for `'static`\n+LL |       let cell = Cell::new(&a);\n+   |                            ^^ borrowed value does not live long enough\n ...\n-LL | }\n-   | - `a` dropped here while still borrowed\n+LL | /     foo(cell, |cell_a, cell_x| {\n+LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n+LL | |     })\n+   | |______- argument requires that `a` is borrowed for `'static`\n+LL |   }\n+   |   - `a` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3326fa521fc9cea4efc8e4d26b039fb90f1c7663", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84663cee394a56950dbb11e320e38096e15001c3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=84663cee394a56950dbb11e320e38096e15001c3", "patch": "@@ -1,14 +1,14 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:33:41\n    |\n-LL |         SomeEnum::SomeVariant(Cell::new(&c)),\n-   |                               ----------^^-\n-   |                               |         |\n-   |                               |         borrowed value does not live long enough\n-   |                               argument requires that `c` is borrowed for `'static`\n-...\n-LL | }\n-   | - `c` dropped here while still borrowed\n+LL | /     combine(\n+LL | |         SomeEnum::SomeVariant(Cell::new(&c)),\n+   | |                                         ^^ borrowed value does not live long enough\n+LL | |         SomeEnum::SomeOtherVariant::<Cell<&'static u32>>,\n+LL | |     );\n+   | |_____- argument requires that `c` is borrowed for `'static`\n+LL |   }\n+   |   - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:41:41"}]}