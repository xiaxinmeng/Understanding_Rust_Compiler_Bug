{"sha": "c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OThjYmJiMmNkNWEwMzAwOTU0Y2RjYjA4ZjJkYWEwODE3ODk4ZmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-10T16:35:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-10T16:35:33Z"}, "message": "Rollup merge of #50588 - ExpHP:i-can-see-my-house-from-here, r=frewsxcv\n\nMove \"See also\" disambiguation links for primitive types to top\n\nCloses #50384.\n\n<details>\n<summary>Images</summary>\n\n![rust-slice](https://user-images.githubusercontent.com/1411280/39843148-caa41c3e-53b7-11e8-8123-b57c25a4d9e0.png)\n\n![rust-isize](https://user-images.githubusercontent.com/1411280/39843146-ca94b384-53b7-11e8-85f3-3f5e5d353a05.png)\n\n</details>\n\nr? @steveklabnik", "tree": {"sha": "2ce8e42ecd8ae6be8522ae4eeed77a5578893645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce8e42ecd8ae6be8522ae4eeed77a5578893645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9HTVCRBK7hj4Ov3rIwAAdHIIAJcWM1ejQD0H//77cY5cMhK6\nRQuQToiT2/bLmxcZHZ0AZtWH/Pmz6YoKcUvRIkUqASKxv9K7ZHFE4wdP8PN8Zlzy\nnZrKovnWTrR0HdY6ICio0y4H9wKFipVaZPt3AcbfdvEwauxN74oVxwKJcSZAo0WU\n6F2zmX23dnCjIJwBtbu2rBYbEzw4x5zgcU9V3hB1ocnKtjbwKwjsYQ0SW6svxrdY\nh1haxUR3dHH3AkZP2uL6fSJvGg5+sKhf9LWiJrqUL3t10/yz67iDE/FTpihJSfyT\nM4q4tdlh33no7vKUgey2pXrE873bP98Jg1MAhkCkismZMP4p+mTXldz/1bmMUao=\n=qybS\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ce8e42ecd8ae6be8522ae4eeed77a5578893645\nparent 44f8b4d5be3cebbfa82057e68309a673be46c968\nparent b8eb91a5ade04804118d39a0f74ae908f33b6268\nauthor Alex Crichton <alex@alexcrichton.com> 1525970133 -0500\ncommitter GitHub <noreply@github.com> 1525970133 -0500\n\nRollup merge of #50588 - ExpHP:i-can-see-my-house-from-here, r=frewsxcv\n\nMove \"See also\" disambiguation links for primitive types to top\n\nCloses #50384.\n\n<details>\n<summary>Images</summary>\n\n![rust-slice](https://user-images.githubusercontent.com/1411280/39843148-caa41c3e-53b7-11e8-8123-b57c25a4d9e0.png)\n\n![rust-isize](https://user-images.githubusercontent.com/1411280/39843146-ca94b384-53b7-11e8-85f3-3f5e5d353a05.png)\n\n</details>\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "html_url": "https://github.com/rust-lang/rust/commit/c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f8b4d5be3cebbfa82057e68309a673be46c968", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f8b4d5be3cebbfa82057e68309a673be46c968", "html_url": "https://github.com/rust-lang/rust/commit/44f8b4d5be3cebbfa82057e68309a673be46c968"}, {"sha": "b8eb91a5ade04804118d39a0f74ae908f33b6268", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8eb91a5ade04804118d39a0f74ae908f33b6268", "html_url": "https://github.com/rust-lang/rust/commit/b8eb91a5ade04804118d39a0f74ae908f33b6268"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "6caf12aa7eb81983b9ff6d15c649bf2c7d26edc8", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -10,6 +10,8 @@\n \n //! A dynamically-sized view into a contiguous sequence, `[T]`.\n //!\n+//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n+//!\n //! Slices are a view into a block of memory represented as a pointer and a\n //! length.\n //!\n@@ -78,8 +80,6 @@\n //! * Further methods that return iterators are [`.split`], [`.splitn`],\n //!   [`.chunks`], [`.windows`] and more.\n //!\n-//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n-//!\n //! [`Clone`]: ../../std/clone/trait.Clone.html\n //! [`Eq`]: ../../std/cmp/trait.Eq.html\n //! [`Ord`]: ../../std/cmp/trait.Ord.html"}, {"sha": "42efdea74b1ab6aa2b912c3e555e2d74d789850a", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -10,6 +10,8 @@\n \n //! Unicode string slices.\n //!\n+//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n+//!\n //! The `&str` type is one of the two main string types, the other being `String`.\n //! Unlike its `String` counterpart, its contents are borrowed.\n //!\n@@ -29,8 +31,6 @@\n //! ```\n //! let hello_world: &'static str = \"Hello, world!\";\n //! ```\n-//!\n-//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "4a7dc13f0f2ca69e881e3707d819f8d323c41feb", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f32` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "801de5e87bd10b002c9c1974bfa871fd4ee83dec", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f64` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "f849db4ec6027ea8ee962fc58b475c74f4a2ac10", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f32` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "40c3f4d0ef72623716a591a2d52559fa45644a28", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f64` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "7074928eaf6daac7dd4334b9c32803daf5c4ae46", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c798cbbb2cd5a0300954cdcb08f2daa0817898ff/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "patch": "@@ -370,6 +370,8 @@ mod prim_unit { }\n //\n /// Raw, unsafe pointers, `*const T`, and `*mut T`.\n ///\n+/// *[See also the `std::ptr` module](ptr/index.html).*\n+///\n /// Working with raw pointers in Rust is uncommon,\n /// typically limited to a few patterns.\n ///\n@@ -444,8 +446,6 @@ mod prim_unit { }\n /// but C APIs hand out a lot of pointers generally, so are a common source\n /// of raw pointers in Rust.\n ///\n-/// *[See also the `std::ptr` module](ptr/index.html).*\n-///\n /// [`null`]: ../std/ptr/fn.null.html\n /// [`null_mut`]: ../std/ptr/fn.null_mut.html\n /// [`is_null`]: ../std/primitive.pointer.html#method.is_null\n@@ -563,6 +563,8 @@ mod prim_array { }\n //\n /// A dynamically-sized view into a contiguous sequence, `[T]`.\n ///\n+/// *[See also the `std::slice` module](slice/index.html).*\n+///\n /// Slices are a view into a block of memory represented as a pointer and a\n /// length.\n ///\n@@ -585,24 +587,20 @@ mod prim_array { }\n /// assert_eq!(x, &[1, 7, 3]);\n /// ```\n ///\n-/// *[See also the `std::slice` module](slice/index.html).*\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice { }\n \n #[doc(primitive = \"str\")]\n //\n /// String slices.\n ///\n+/// *[See also the `std::str` module](str/index.html).*\n+///\n /// The `str` type, also called a 'string slice', is the most primitive string\n /// type. It is usually seen in its borrowed form, `&str`. It is also the type\n /// of string literals, `&'static str`.\n ///\n-/// Strings slices are always valid UTF-8.\n-///\n-/// This documentation describes a number of methods and trait implementations\n-/// on the `str` type. For technical reasons, there is additional, separate\n-/// documentation in the [`std::str`](str/index.html) module as well.\n+/// String slices are always valid UTF-8.\n ///\n /// # Examples\n ///\n@@ -862,23 +860,23 @@ mod prim_u128 { }\n //\n /// The pointer-sized signed integer type.\n ///\n+/// *[See also the `std::isize` module](isize/index.html).*\n+///\n /// The size of this primitive is how many bytes it takes to reference any\n /// location in memory. For example, on a 32 bit target, this is 4 bytes\n /// and on a 64 bit target, this is 8 bytes.\n-///\n-/// *[See also the `std::isize` module](isize/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize { }\n \n #[doc(primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n+/// *[See also the `std::usize` module](usize/index.html).*\n+///\n /// The size of this primitive is how many bytes it takes to reference any\n /// location in memory. For example, on a 32 bit target, this is 4 bytes\n /// and on a 64 bit target, this is 8 bytes.\n-///\n-/// *[See also the `std::usize` module](usize/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize { }\n "}]}