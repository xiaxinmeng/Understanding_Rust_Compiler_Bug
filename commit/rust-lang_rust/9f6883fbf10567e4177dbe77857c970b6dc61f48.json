{"sha": "9f6883fbf10567e4177dbe77857c970b6dc61f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNjg4M2ZiZjEwNTY3ZTQxNzdkYmU3Nzg1N2M5NzBiNmRjNjFmNDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T13:02:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T13:02:06Z"}, "message": "move reparsers to grammar", "tree": {"sha": "50e5e657e39c7d4cba88e80dc147e0ed279b2856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e5e657e39c7d4cba88e80dc147e0ed279b2856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6883fbf10567e4177dbe77857c970b6dc61f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6883fbf10567e4177dbe77857c970b6dc61f48", "html_url": "https://github.com/rust-lang/rust/commit/9f6883fbf10567e4177dbe77857c970b6dc61f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6883fbf10567e4177dbe77857c970b6dc61f48/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6eda528c56814347a1fa0e3eef1e919089bf0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6eda528c56814347a1fa0e3eef1e919089bf0a", "html_url": "https://github.com/rust-lang/rust/commit/5a6eda528c56814347a1fa0e3eef1e919089bf0a"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "bcdcd9f57863afaa5a917963880c26c836cc5b54", "filename": "crates/ra_syntax/src/parsing/grammar.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f6883fbf10567e4177dbe77857c970b6dc61f48/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6883fbf10567e4177dbe77857c970b6dc61f48/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar.rs?ref=9f6883fbf10567e4177dbe77857c970b6dc61f48", "patch": "@@ -36,28 +36,46 @@ mod type_args;\n mod type_params;\n mod types;\n \n-pub(crate) use self::{\n-    expressions::block,\n-    items::{\n-        enum_variant_list, extern_item_list, impl_item_list, match_arm_list, mod_item_list,\n-        named_field_def_list, named_field_list, token_tree, trait_item_list, use_tree_list,\n-    },\n-};\n use crate::{\n+    SyntaxNode,\n     SyntaxKind::{self, *},\n     parsing::{\n         token_set::TokenSet,\n         parser_api::{CompletedMarker, Marker, Parser}\n     },\n };\n \n-pub(crate) fn root(p: &mut Parser) {\n+pub(super) fn root(p: &mut Parser) {\n     let m = p.start();\n     p.eat(SHEBANG);\n     items::mod_contents(p, false);\n     m.complete(p, SOURCE_FILE);\n }\n \n+pub(super) fn reparser(node: &SyntaxNode) -> Option<fn(&mut Parser)> {\n+    let res = match node.kind() {\n+        BLOCK => expressions::block,\n+        NAMED_FIELD_DEF_LIST => items::named_field_def_list,\n+        NAMED_FIELD_LIST => items::named_field_list,\n+        ENUM_VARIANT_LIST => items::enum_variant_list,\n+        MATCH_ARM_LIST => items::match_arm_list,\n+        USE_TREE_LIST => items::use_tree_list,\n+        EXTERN_ITEM_LIST => items::extern_item_list,\n+        TOKEN_TREE if node.first_child().unwrap().kind() == L_CURLY => items::token_tree,\n+        ITEM_LIST => {\n+            let parent = node.parent().unwrap();\n+            match parent.kind() {\n+                IMPL_BLOCK => items::impl_item_list,\n+                TRAIT_DEF => items::trait_item_list,\n+                MODULE => items::mod_item_list,\n+                _ => return None,\n+            }\n+        }\n+        _ => return None,\n+    };\n+    Some(res)\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq)]\n enum BlockLike {\n     Block,"}, {"sha": "0a24dae0ea0d41b6a03d54f2e6b4d030e1efc532", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f6883fbf10567e4177dbe77857c970b6dc61f48/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6883fbf10567e4177dbe77857c970b6dc61f48/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=9f6883fbf10567e4177dbe77857c970b6dc61f48", "patch": "@@ -81,31 +81,7 @@ fn is_contextual_kw(text: &str) -> bool {\n type ParseFn = fn(&mut Parser);\n fn find_reparsable_node(node: &SyntaxNode, range: TextRange) -> Option<(&SyntaxNode, ParseFn)> {\n     let node = algo::find_covering_node(node, range);\n-    return node.ancestors().filter_map(|node| reparser(node).map(|r| (node, r))).next();\n-\n-    fn reparser(node: &SyntaxNode) -> Option<ParseFn> {\n-        let res = match node.kind() {\n-            BLOCK => grammar::block,\n-            NAMED_FIELD_DEF_LIST => grammar::named_field_def_list,\n-            NAMED_FIELD_LIST => grammar::named_field_list,\n-            ENUM_VARIANT_LIST => grammar::enum_variant_list,\n-            MATCH_ARM_LIST => grammar::match_arm_list,\n-            USE_TREE_LIST => grammar::use_tree_list,\n-            EXTERN_ITEM_LIST => grammar::extern_item_list,\n-            TOKEN_TREE if node.first_child().unwrap().kind() == L_CURLY => grammar::token_tree,\n-            ITEM_LIST => {\n-                let parent = node.parent().unwrap();\n-                match parent.kind() {\n-                    IMPL_BLOCK => grammar::impl_item_list,\n-                    TRAIT_DEF => grammar::trait_item_list,\n-                    MODULE => grammar::mod_item_list,\n-                    _ => return None,\n-                }\n-            }\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n+    node.ancestors().find_map(grammar::reparser).map(|r| (node, r))\n }\n \n fn is_balanced(tokens: &[Token]) -> bool {"}]}