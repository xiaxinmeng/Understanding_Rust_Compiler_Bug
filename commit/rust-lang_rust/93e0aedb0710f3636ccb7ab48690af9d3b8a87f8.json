{"sha": "93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTBhZWRiMDcxMGYzNjM2Y2NiN2FiNDg2OTBhZjlkM2I4YTg3Zjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-18T02:43:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-18T02:43:19Z"}, "message": "Auto merge of #81090 - ssomers:btree_drainy_refactor_2, r=Mark-Simulacrum\n\nBTreeMap: offer merge in variants with more clarity\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "6c4050a63f7e3af89ae56bcf04a74be767dab523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4050a63f7e3af89ae56bcf04a74be767dab523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "html_url": "https://github.com/rust-lang/rust/commit/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4df63f47f37cfb8fff80919be560e4d51ae9a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4df63f47f37cfb8fff80919be560e4d51ae9a44", "html_url": "https://github.com/rust-lang/rust/commit/c4df63f47f37cfb8fff80919be560e4d51ae9a44"}, {"sha": "bb61cc48b3390cf3970b8c17c892869d3982fe88", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb61cc48b3390cf3970b8c17c892869d3982fe88", "html_url": "https://github.com/rust-lang/rust/commit/bb61cc48b3390cf3970b8c17c892869d3982fe88"}], "stats": {"total": 94, "additions": 60, "deletions": 34}, "files": [{"sha": "097e3e6d34e86a3270f54c61808ee1da6778de7c", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "patch": "@@ -1282,25 +1282,25 @@ impl<'a, K, V> BalancingContext<'a, K, V> {\n         self.right_child\n     }\n \n-    /// Returns `true` if it is valid to call `.merge()` in the balancing context,\n-    /// i.e., whether there is enough room in a node to hold the combination of\n-    /// both adjacent child nodes, along with the key-value pair in the parent.\n+    /// Returns whether merging is possible, i.e., whether there is enough room\n+    /// in a node to combine the central KV with both adjacent child nodes.\n     pub fn can_merge(&self) -> bool {\n         self.left_child.len() + 1 + self.right_child.len() <= CAPACITY\n     }\n }\n \n impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n-    /// Merges the parent's key-value pair and both adjacent child nodes into\n-    /// the left node and returns an edge handle in that expanded left node.\n-    /// If `track_edge_idx` is given some value, the returned edge corresponds\n-    /// to where the edge in that child node ended up,\n-    ///\n-    /// Panics unless we `.can_merge()`.\n-    pub fn merge(\n+    /// Performs a merge and lets a closure decide what to return.\n+    fn do_merge<\n+        F: FnOnce(\n+            NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n+            NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>,\n+        ) -> R,\n+        R,\n+    >(\n         self,\n-        track_edge_idx: Option<LeftOrRight<usize>>,\n-    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n+        result: F,\n+    ) -> R {\n         let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;\n         let old_parent_len = parent_node.len();\n         let mut left_node = self.left_child;\n@@ -1310,11 +1310,6 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         let new_left_len = old_left_len + 1 + right_len;\n \n         assert!(new_left_len <= CAPACITY);\n-        assert!(match track_edge_idx {\n-            None => true,\n-            Some(LeftOrRight::Left(idx)) => idx <= old_left_len,\n-            Some(LeftOrRight::Right(idx)) => idx <= right_len,\n-        });\n \n         unsafe {\n             *left_node.len_mut() = new_left_len as u16;\n@@ -1353,14 +1348,47 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n             } else {\n                 Global.deallocate(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());\n             }\n-\n-            let new_idx = match track_edge_idx {\n-                None => 0,\n-                Some(LeftOrRight::Left(idx)) => idx,\n-                Some(LeftOrRight::Right(idx)) => old_left_len + 1 + idx,\n-            };\n-            Handle::new_edge(left_node, new_idx)\n         }\n+        result(parent_node, left_node)\n+    }\n+\n+    /// Merges the parent's key-value pair and both adjacent child nodes into\n+    /// the left child node and returns the shrunk parent node.\n+    ///\n+    /// Panics unless we `.can_merge()`.\n+    pub fn merge_tracking_parent(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n+        self.do_merge(|parent, _child| parent)\n+    }\n+\n+    /// Merges the parent's key-value pair and both adjacent child nodes into\n+    /// the left child node and returns that child node.\n+    ///\n+    /// Panics unless we `.can_merge()`.\n+    pub fn merge_tracking_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n+        self.do_merge(|_parent, child| child)\n+    }\n+\n+    /// Merges the parent's key-value pair and both adjacent child nodes into\n+    /// the left child node and returns the edge handle in that child node\n+    /// where the tracked child edge ended up,\n+    ///\n+    /// Panics unless we `.can_merge()`.\n+    pub fn merge_tracking_child_edge(\n+        self,\n+        track_edge_idx: LeftOrRight<usize>,\n+    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n+        let old_left_len = self.left_child.len();\n+        let right_len = self.right_child.len();\n+        assert!(match track_edge_idx {\n+            LeftOrRight::Left(idx) => idx <= old_left_len,\n+            LeftOrRight::Right(idx) => idx <= right_len,\n+        });\n+        let child = self.merge_tracking_child();\n+        let new_idx = match track_edge_idx {\n+            LeftOrRight::Left(idx) => idx,\n+            LeftOrRight::Right(idx) => old_left_len + 1 + idx,\n+        };\n+        unsafe { Handle::new_edge(child, new_idx) }\n     }\n \n     /// Removes a key-value pair from the left child and places it in the key-value storage"}, {"sha": "04683e01de35ed0f3684f1c2904d82ea4da9a05a", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "patch": "@@ -33,7 +33,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                 Ok(Left(left_parent_kv)) => {\n                     debug_assert!(left_parent_kv.right_child_len() == MIN_LEN - 1);\n                     if left_parent_kv.can_merge() {\n-                        left_parent_kv.merge(Some(Right(idx)))\n+                        left_parent_kv.merge_tracking_child_edge(Right(idx))\n                     } else {\n                         debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);\n                         left_parent_kv.steal_left(idx)\n@@ -42,7 +42,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                 Ok(Right(right_parent_kv)) => {\n                     debug_assert!(right_parent_kv.left_child_len() == MIN_LEN - 1);\n                     if right_parent_kv.can_merge() {\n-                        right_parent_kv.merge(Some(Left(idx)))\n+                        right_parent_kv.merge_tracking_child_edge(Left(idx))\n                     } else {\n                         debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);\n                         right_parent_kv.steal_right(idx)\n@@ -124,9 +124,8 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             Ok(Left(left_parent_kv)) => {\n                 debug_assert_eq!(left_parent_kv.right_child_len(), MIN_LEN - 1);\n                 if left_parent_kv.can_merge() {\n-                    let pos = left_parent_kv.merge(None);\n-                    let parent_edge = unsafe { unwrap_unchecked(pos.into_node().ascend().ok()) };\n-                    Some(parent_edge.into_node())\n+                    let parent = left_parent_kv.merge_tracking_parent();\n+                    Some(parent)\n                 } else {\n                     debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);\n                     left_parent_kv.steal_left(0);\n@@ -136,9 +135,8 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             Ok(Right(right_parent_kv)) => {\n                 debug_assert_eq!(right_parent_kv.left_child_len(), MIN_LEN - 1);\n                 if right_parent_kv.can_merge() {\n-                    let pos = right_parent_kv.merge(None);\n-                    let parent_edge = unsafe { unwrap_unchecked(pos.into_node().ascend().ok()) };\n-                    Some(parent_edge.into_node())\n+                    let parent = right_parent_kv.merge_tracking_parent();\n+                    Some(parent)\n                 } else {\n                     debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);\n                     right_parent_kv.steal_right(0);"}, {"sha": "375c6173a093e89a49c8fec226aabad56f3ee840", "filename": "library/alloc/src/collections/btree/split.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e0aedb0710f3636ccb7ab48690af9d3b8a87f8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=93e0aedb0710f3636ccb7ab48690af9d3b8a87f8", "patch": "@@ -66,7 +66,7 @@ impl<K, V> Root<K, V> {\n                 let mut last_kv = node.last_kv().consider_for_balancing();\n \n                 if last_kv.can_merge() {\n-                    cur_node = last_kv.merge(None).into_node();\n+                    cur_node = last_kv.merge_tracking_child();\n                 } else {\n                     let right_len = last_kv.right_child_len();\n                     // `MIN_LEN + 1` to avoid readjust if merge happens on the next level.\n@@ -93,7 +93,7 @@ impl<K, V> Root<K, V> {\n                 let mut first_kv = node.first_kv().consider_for_balancing();\n \n                 if first_kv.can_merge() {\n-                    cur_node = first_kv.merge(None).into_node();\n+                    cur_node = first_kv.merge_tracking_child();\n                 } else {\n                     let left_len = first_kv.left_child_len();\n                     // `MIN_LEN + 1` to avoid readjust if merge happens on the next level."}]}