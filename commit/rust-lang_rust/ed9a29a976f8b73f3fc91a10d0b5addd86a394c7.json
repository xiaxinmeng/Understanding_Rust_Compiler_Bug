{"sha": "ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOWEyOWE5NzZmOGI3M2YzZmM5MWExMGQwYjVhZGRkODZhMzk0Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-17T05:00:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-17T05:00:14Z"}, "message": "Auto merge of #50665 - alexcrichton:fix-single-item-path-warnings, r=oli-obk\n\nrustc: Fix `crate` lint for single-item paths\n\nThis commit fixes recommending the `crate` prefix when migrating to 2018 for\npaths that look like `use foo;` or `use {bar, baz}`\n\nCloses #50660", "tree": {"sha": "d136d2fab15d2e06a6a2385add7db14ef2ccb7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d136d2fab15d2e06a6a2385add7db14ef2ccb7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "html_url": "https://github.com/rust-lang/rust/commit/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b559710e58427213d6f82008206c22cf3d76b4c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b559710e58427213d6f82008206c22cf3d76b4c4", "html_url": "https://github.com/rust-lang/rust/commit/b559710e58427213d6f82008206c22cf3d76b4c4"}, {"sha": "dff9ee1d743e705897cc8e6b6ef9c7520a1ccaa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff9ee1d743e705897cc8e6b6ef9c7520a1ccaa0", "html_url": "https://github.com/rust-lang/rust/commit/dff9ee1d743e705897cc8e6b6ef9c7520a1ccaa0"}], "stats": {"total": 334, "additions": 287, "deletions": 47}, "files": [{"sha": "5ebea52f3c5ad9a8e2d09ab6076554c0de27821f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -261,7 +261,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub ABSOLUTE_PATH_STARTING_WITH_MODULE,\n+    pub ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n     Allow,\n     \"fully qualified paths that start with a module name \\\n      instead of `crate`, `self`, or an extern crate name\"\n@@ -328,7 +328,7 @@ impl LintPass for HardwiredLints {\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,\n             BARE_TRAIT_OBJECT,\n-            ABSOLUTE_PATH_STARTING_WITH_MODULE,\n+            ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISION,\n         )\n     }"}, {"sha": "0ae133640fad9feb93bd68ce0faec1a271cbaa4b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -40,7 +40,7 @@ extern crate rustc_target;\n extern crate syntax_pos;\n \n use rustc::lint;\n-use rustc::lint::builtin::{BARE_TRAIT_OBJECT, ABSOLUTE_PATH_STARTING_WITH_MODULE};\n+use rustc::lint::builtin::{BARE_TRAIT_OBJECT, ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE};\n use rustc::session;\n use rustc::util;\n \n@@ -283,7 +283,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             //       standard library, and thus should never be removed or changed to an error.\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(ABSOLUTE_PATH_STARTING_WITH_MODULE),\n+            id: LintId::of(ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE),\n             reference: \"issue TBD\",\n             edition: Some(Edition::Edition2018),\n         },\n@@ -322,4 +322,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"resolve_trait_on_defaulted_unit\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n+    store.register_removed(\"absolute_path_starting_with_module\",\n+        \"renamed to `absolute_path_not_starting_with_crate`\");\n }"}, {"sha": "5a5f5ce2e3862ced35e702215ad345e9eff85919", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 80, "deletions": 27, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -3232,6 +3232,7 @@ impl<'a> Resolver<'a> {\n                     -> PathResult<'a> {\n         let mut module = None;\n         let mut allow_super = true;\n+        let mut second_binding = None;\n \n         for (i, &ident) in path.iter().enumerate() {\n             debug!(\"resolve_path ident {} {:?}\", i, ident);\n@@ -3321,7 +3322,9 @@ impl<'a> Resolver<'a> {\n                     .map(MacroBinding::binding)\n             } else {\n                 match self.resolve_ident_in_lexical_scope(ident, ns, record_used, path_span) {\n+                    // we found a locally-imported or available item/module\n                     Some(LexicalScopeBinding::Item(binding)) => Ok(binding),\n+                    // we found a local variable or type param\n                     Some(LexicalScopeBinding::Def(def))\n                             if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) => {\n                         return PathResult::NonModule(PathResolution::with_unresolved_segments(\n@@ -3334,13 +3337,22 @@ impl<'a> Resolver<'a> {\n \n             match binding {\n                 Ok(binding) => {\n+                    if i == 1 {\n+                        second_binding = Some(binding);\n+                    }\n                     let def = binding.def();\n                     let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(def);\n                     if let Some(next_module) = binding.module() {\n                         module = Some(next_module);\n                     } else if def == Def::Err {\n                         return PathResult::NonModule(err_path_resolution());\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {\n+                        self.lint_if_path_starts_with_module(\n+                            node_id,\n+                            path,\n+                            path_span,\n+                            second_binding,\n+                        );\n                         return PathResult::NonModule(PathResolution::with_unresolved_segments(\n                             def, path.len() - i - 1\n                         ));\n@@ -3349,33 +3361,6 @@ impl<'a> Resolver<'a> {\n                                                   format!(\"Not a module `{}`\", ident),\n                                                   is_last);\n                     }\n-\n-                    if let Some(id) = node_id {\n-                        if i == 1 && self.session.features_untracked().crate_in_paths\n-                                  && !self.session.rust_2018() {\n-                            let prev_name = path[0].name;\n-                            if prev_name == keywords::Extern.name() ||\n-                               prev_name == keywords::CrateRoot.name() {\n-                                let mut is_crate = false;\n-                                if let NameBindingKind::Import { directive: d, .. } = binding.kind {\n-                                    if let ImportDirectiveSubclass::ExternCrate(..) = d.subclass {\n-                                        is_crate = true;\n-                                    }\n-                                }\n-\n-                                if !is_crate {\n-                                    let diag = lint::builtin::BuiltinLintDiagnostics\n-                                                   ::AbsPathWithModule(path_span);\n-                                    self.session.buffer_lint_with_diagnostic(\n-                                        lint::builtin::ABSOLUTE_PATH_STARTING_WITH_MODULE,\n-                                        id, path_span,\n-                                        \"Absolute paths must start with `self`, `super`, \\\n-                                        `crate`, or an external crate name in the 2018 edition\",\n-                                        diag);\n-                                }\n-                            }\n-                        }\n-                    }\n                 }\n                 Err(Undetermined) => return PathResult::Indeterminate,\n                 Err(Determined) => {\n@@ -3408,9 +3393,77 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n+        self.lint_if_path_starts_with_module(node_id, path, path_span, second_binding);\n+\n         PathResult::Module(module.unwrap_or(self.graph_root))\n     }\n \n+    fn lint_if_path_starts_with_module(&self,\n+                                       id: Option<NodeId>,\n+                                       path: &[Ident],\n+                                       path_span: Span,\n+                                       second_binding: Option<&NameBinding>) {\n+        let id = match id {\n+            Some(id) => id,\n+            None => return,\n+        };\n+\n+        let first_name = match path.get(0) {\n+            Some(ident) => ident.name,\n+            None => return,\n+        };\n+\n+        // We're only interested in `use` paths which should start with\n+        // `{{root}}` or `extern` currently.\n+        if first_name != keywords::Extern.name() && first_name != keywords::CrateRoot.name() {\n+            return\n+        }\n+\n+        match path.get(1) {\n+            // If this import looks like `crate::...` it's already good\n+            Some(name) if name.name == keywords::Crate.name() => return,\n+            // Otherwise go below to see if it's an extern crate\n+            Some(_) => {}\n+            // If the path has length one (and it's `CrateRoot` most likely)\n+            // then we don't know whether we're gonna be importing a crate or an\n+            // item in our crate. Defer this lint to elsewhere\n+            None => return,\n+        }\n+\n+        // If the first element of our path was actually resolved to an\n+        // `ExternCrate` (also used for `crate::...`) then no need to issue a\n+        // warning, this looks all good!\n+        if let Some(binding) = second_binding {\n+            if let NameBindingKind::Import { directive: d, .. } = binding.kind {\n+                if let ImportDirectiveSubclass::ExternCrate(..) = d.subclass {\n+                    return\n+                }\n+            }\n+        }\n+\n+        self.lint_path_starts_with_module(id, path_span);\n+    }\n+\n+    fn lint_path_starts_with_module(&self, id: NodeId, span: Span) {\n+        // In the 2018 edition this lint is a hard error, so nothing to do\n+        if self.session.rust_2018() {\n+            return\n+        }\n+        // In the 2015 edition there's no use in emitting lints unless the\n+        // crate's already enabled the feature that we're going to suggest\n+        if !self.session.features_untracked().crate_in_paths {\n+            return\n+        }\n+        let diag = lint::builtin::BuiltinLintDiagnostics\n+            ::AbsPathWithModule(span);\n+        self.session.buffer_lint_with_diagnostic(\n+            lint::builtin::ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n+            id, span,\n+            \"absolute paths must start with `self`, `super`, \\\n+            `crate`, or an external crate name in the 2018 edition\",\n+            diag);\n+    }\n+\n     // Resolve a local definition, potentially adjusting for closures.\n     fn adjust_local_def(&mut self,\n                         ns: Namespace,"}, {"sha": "09c421fba47b1abb5140bc962e5a10181e688434", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -640,6 +640,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     fn finalize_import(&mut self, directive: &'b ImportDirective<'b>) -> Option<(Span, String)> {\n         self.current_module = directive.parent;\n         let ImportDirective { ref module_path, span, .. } = *directive;\n+        let mut warn_if_binding_comes_from_local_crate = false;\n \n         // FIXME: Last path segment is treated specially in import resolution, so extern crate\n         // mode for absolute paths needs some special support for single-segment imports.\n@@ -653,6 +654,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     return Some((directive.span,\n                                  \"cannot glob-import all possible crates\".to_string()));\n                 }\n+                GlobImport { .. } if self.session.features_untracked().extern_absolute_paths => {\n+                    self.lint_path_starts_with_module(directive.id, span);\n+                }\n                 SingleImport { source, target, .. } => {\n                     let crate_root = if source.name == keywords::Crate.name() &&\n                                         module_path[0].name != keywords::Extern.name() {\n@@ -676,6 +680,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         self.populate_module_if_necessary(crate_root);\n                         Some(crate_root)\n                     } else {\n+                        warn_if_binding_comes_from_local_crate = true;\n                         None\n                     };\n \n@@ -870,6 +875,26 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n         }\n \n+        if warn_if_binding_comes_from_local_crate {\n+            let mut warned = false;\n+            self.per_ns(|this, ns| {\n+                let binding = match result[ns].get().ok() {\n+                    Some(b) => b,\n+                    None => return\n+                };\n+                if let NameBindingKind::Import { directive: d, .. } = binding.kind {\n+                    if let ImportDirectiveSubclass::ExternCrate(..) = d.subclass {\n+                        return\n+                    }\n+                }\n+                if warned {\n+                    return\n+                }\n+                warned = true;\n+                this.lint_path_starts_with_module(directive.id, span);\n+            });\n+        }\n+\n         // Record what this import resolves to for later uses in documentation,\n         // this may resolve to either a value or a type, but for documentation\n         // purposes it's good enough to just favor one over the other."}, {"sha": "cc17a9bd6618b2e47782c3819219f4215b7acf0d", "filename": "src/test/ui/auxiliary/edition-lint-paths.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fauxiliary%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fauxiliary%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-lint-paths.rs?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo() {}"}, {"sha": "9975a6db4b22d3969350ad78baa91f2db842eddb", "filename": "src/test/ui/edition-lint-paths.fixed", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-lint-paths.fixed?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:edition-lint-paths.rs\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+#![allow(unused)]\n+\n+extern crate edition_lint_paths;\n+\n+pub mod foo {\n+    use edition_lint_paths;\n+    use crate::bar::Bar;\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+    use super::bar::Bar2;\n+    use crate::bar::Bar3;\n+\n+    use crate::bar;\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+    use crate::{bar as something_else};\n+\n+    use {crate::Bar as SomethingElse, crate::main};\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+    //~| ERROR absolute\n+    //~| WARN this was previously accepted\n+\n+    use crate::{Bar as SomethingElse2, main as another_main};\n+\n+    pub fn test() {\n+    }\n+}\n+\n+use crate::bar::Bar;\n+//~^ ERROR absolute\n+//~| WARN this was previously accepted\n+\n+pub mod bar {\n+    use edition_lint_paths as foo;\n+    pub struct Bar;\n+    pub type Bar2 = Bar;\n+    pub type Bar3 = Bar;\n+}\n+\n+mod baz {\n+    use crate::*;\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+}\n+\n+fn main() {\n+    let x = crate::bar::Bar;\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+    let x = bar::Bar;\n+    let x = ::crate::bar::Bar;\n+    let x = self::bar::Bar;\n+    foo::test();\n+\n+    {\n+        use edition_lint_paths as bar;\n+        edition_lint_paths::foo();\n+        bar::foo();\n+        ::edition_lint_paths::foo();\n+    }\n+}"}, {"sha": "6cc3295a4d95bbb9988e09662d47952cb0a08435", "filename": "src/test/ui/edition-lint-paths.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-lint-paths.rs?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -8,34 +8,70 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(crate_in_paths)]\n-#![deny(absolute_path_starting_with_module)]\n+// aux-build:edition-lint-paths.rs\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n #![allow(unused)]\n \n+extern crate edition_lint_paths;\n+\n pub mod foo {\n+    use edition_lint_paths;\n     use ::bar::Bar;\n-    //~^ ERROR Absolute\n+    //~^ ERROR absolute\n     //~| WARN this was previously accepted\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n-}\n \n+    use bar;\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+    use crate::{bar as something_else};\n+\n+    use {Bar as SomethingElse, main};\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+    //~| ERROR absolute\n+    //~| WARN this was previously accepted\n+\n+    use crate::{Bar as SomethingElse2, main as another_main};\n+\n+    pub fn test() {\n+    }\n+}\n \n use bar::Bar;\n-//~^ ERROR Absolute\n+//~^ ERROR absolute\n //~| WARN this was previously accepted\n \n pub mod bar {\n+    use edition_lint_paths as foo;\n     pub struct Bar;\n     pub type Bar2 = Bar;\n     pub type Bar3 = Bar;\n }\n \n+mod baz {\n+    use *;\n+    //~^ ERROR absolute\n+    //~| WARN this was previously accepted\n+}\n+\n fn main() {\n     let x = ::bar::Bar;\n-    //~^ ERROR Absolute\n+    //~^ ERROR absolute\n     //~| WARN this was previously accepted\n     let x = bar::Bar;\n     let x = ::crate::bar::Bar;\n     let x = self::bar::Bar;\n+    foo::test();\n+\n+    {\n+        use edition_lint_paths as bar;\n+        edition_lint_paths::foo();\n+        bar::foo();\n+        ::edition_lint_paths::foo();\n+    }\n }"}, {"sha": "1588e242f2283e4afe9e6764224fb4a4769cbabf", "filename": "src/test/ui/edition-lint-paths.stderr", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a29a976f8b73f3fc91a10d0b5addd86a394c7/src%2Ftest%2Fui%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-lint-paths.stderr?ref=ed9a29a976f8b73f3fc91a10d0b5addd86a394c7", "patch": "@@ -1,34 +1,70 @@\n-error: Absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:16:9\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:22:9\n    |\n LL |     use ::bar::Bar;\n    |         ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n note: lint level defined here\n-  --> $DIR/edition-lint-paths.rs:12:9\n+  --> $DIR/edition-lint-paths.rs:15:9\n    |\n-LL | #![deny(absolute_path_starting_with_module)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_path_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n \n-error: Absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:24:5\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:28:9\n+   |\n+LL |     use bar;\n+   |         ^^^ help: use `crate`: `crate::bar`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:33:10\n+   |\n+LL |     use {Bar as SomethingElse, main};\n+   |          ^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::Bar as SomethingElse`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:33:32\n+   |\n+LL |     use {Bar as SomethingElse, main};\n+   |                                ^^^^ help: use `crate`: `crate::main`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:45:5\n    |\n LL | use bar::Bar;\n    |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n \n-error: Absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:35:13\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:57:9\n+   |\n+LL |     use *;\n+   |         ^ help: use `crate`: `crate::*`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:63:13\n    |\n LL |     let x = ::bar::Bar;\n    |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 7 previous errors\n "}]}