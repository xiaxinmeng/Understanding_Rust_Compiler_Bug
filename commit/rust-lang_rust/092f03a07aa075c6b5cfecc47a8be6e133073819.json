{"sha": "092f03a07aa075c6b5cfecc47a8be6e133073819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmYwM2EwN2FhMDc1YzZiNWNmZWNjNDdhOGJlNmUxMzMwNzM4MTk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-07T20:17:59Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-14T19:35:46Z"}, "message": "Make assigning to the return type interesting", "tree": {"sha": "aa7aa2266faf1870a4e5814f0f818f0f4092f341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa7aa2266faf1870a4e5814f0f818f0f4092f341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092f03a07aa075c6b5cfecc47a8be6e133073819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092f03a07aa075c6b5cfecc47a8be6e133073819", "html_url": "https://github.com/rust-lang/rust/commit/092f03a07aa075c6b5cfecc47a8be6e133073819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092f03a07aa075c6b5cfecc47a8be6e133073819/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23f09bbed4ef12c5f9db198c22f50b608ea6c6d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/23f09bbed4ef12c5f9db198c22f50b608ea6c6d5", "html_url": "https://github.com/rust-lang/rust/commit/23f09bbed4ef12c5f9db198c22f50b608ea6c6d5"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "fbecab2dd1f5e0b24a1f2b19fa5f99fad9e7dc67", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092f03a07aa075c6b5cfecc47a8be6e133073819/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f03a07aa075c6b5cfecc47a8be6e133073819/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=092f03a07aa075c6b5cfecc47a8be6e133073819", "patch": "@@ -587,7 +587,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             infcx.extract_type_name(&return_ty)\n         });\n \n-                let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+        let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n \n         let (return_span, mir_description) = if let hir::ExprKind::Closure(_, _, _, span, gen_move)\n             = tcx.hir.expect_expr(mir_node_id).node"}, {"sha": "9f790612124e67445ef78ae034b49b7edbf4a18d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/092f03a07aa075c6b5cfecc47a8be6e133073819/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f03a07aa075c6b5cfecc47a8be6e133073819/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=092f03a07aa075c6b5cfecc47a8be6e133073819", "patch": "@@ -877,8 +877,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // they are not caused by the user, but rather artifacts\n                 // of lowering. Assignments to other sorts of places *are* interesting\n                 // though.\n-                let is_temp = if let Place::Local(l) = place {\n-                    !mir.local_decls[*l].is_user_variable.is_some()\n+                let is_temp = if let Place::Local(l) = *place {\n+                    l != RETURN_PLACE &&\n+                    !mir.local_decls[l].is_user_variable.is_some()\n                 } else {\n                     false\n                 };\n@@ -1119,7 +1120,19 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         match *destination {\n             Some((ref dest, _target_block)) => {\n                 let dest_ty = dest.ty(mir, tcx).to_ty(tcx);\n-                let locations = term_location.interesting();\n+                let is_temp = if let Place::Local(l) = *dest {\n+                    l != RETURN_PLACE &&\n+                    !mir.local_decls[l].is_user_variable.is_some()\n+                } else {\n+                    false\n+                };\n+\n+                let locations = if is_temp {\n+                    term_location.boring()\n+                } else {\n+                    term_location.interesting()\n+                };\n+\n                 if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations) {\n                     span_mirbug!(\n                         self,"}]}