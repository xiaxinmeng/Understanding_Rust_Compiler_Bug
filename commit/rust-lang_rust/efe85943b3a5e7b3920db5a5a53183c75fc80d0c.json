{"sha": "efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZTg1OTQzYjNhNWU3YjM5MjBkYjVhNWE1MzE4M2M3NWZjODBkMGM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T05:11:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T05:11:29Z"}, "message": "account for DUMMY_SP and correct wording", "tree": {"sha": "6ad4646e21995f1227fec9c905c02c7926c16a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad4646e21995f1227fec9c905c02c7926c16a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "html_url": "https://github.com/rust-lang/rust/commit/efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb99fc31d0a8f962662e636938cf96f0f70d3803", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb99fc31d0a8f962662e636938cf96f0f70d3803", "html_url": "https://github.com/rust-lang/rust/commit/bb99fc31d0a8f962662e636938cf96f0f70d3803"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "937a9ea6c1bd485150b91ac3e01e40f7848dfb7f", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -39,7 +39,7 @@ Generally, `Self: Sized` is used to indicate that the trait should not be used\n as a trait object. If the trait comes from your own crate, consider removing\n this restriction.\n \n-### Method references the `Self` type in its arguments or return type\n+### Method references the `Self` type in its parameters or return type\n \n This happens when a trait has a method like the following:\n "}, {"sha": "5392e9100c6d155313b4fe1c221187d7e7132507", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -20,7 +20,7 @@ use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n use syntax::symbol::InternedString;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n@@ -49,7 +49,7 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) =>\n                 format!(\"associated function `{}` has no `self` parameter\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n-                \"method `{}` references the `Self` type in its arguments or return type\",\n+                \"method `{}` references the `Self` type in its parameters or return type\",\n                 name,\n             ).into(),\n             ObjectSafetyViolation::Method(\n@@ -67,9 +67,9 @@ impl ObjectSafetyViolation {\n     }\n \n     pub fn span(&self) -> Option<Span> {\n-        match self {\n+        match *self {\n             ObjectSafetyViolation::AssocConst(_, span) |\n-            ObjectSafetyViolation::Method(_, _, span) => Some(*span),\n+            ObjectSafetyViolation::Method(_, _, span) if span != DUMMY_SP => Some(span),\n             _ => None,\n         }\n     }"}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |                          -- method `eq` references the `Self` type in its arguments or return type\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n "}, {"sha": "18a7cea95bdb9fe2b0f05b45df222e2e4bd6eddc", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |                          -- method `eq` references the `Self` type in its arguments or return type\n+   |                          -- method `eq` references the `Self` type in its parameters or return type\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n "}, {"sha": "5c4d6d53c4626bc01c8d3685372c6696a77eb8ee", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:1\n    |\n LL |     fn foo(&self) -> Self;\n-   |        --- method `foo` references the `Self` type in its arguments or return type\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n ...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object"}, {"sha": "971e79cb0210f240b6536b0f4cdaadc7dcb2fd5a", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:17:1\n    |\n LL |     fn bar(&self, x: &Self);\n-   |        --- method `bar` references the `Self` type in its arguments or return type\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n@@ -11,7 +11,7 @@ error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:1\n    |\n LL |     fn bar(&self) -> Self;\n-   |        --- method `bar` references the `Self` type in its arguments or return type\n+   |        --- method `bar` references the `Self` type in its parameters or return type\n ...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Baz` cannot be made into an object"}, {"sha": "63ac11dc8ae01b463a4269b14dbbdd3ca092fd8e", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -3,6 +3,8 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n    |\n LL | fn bar(_x: Foo) {}\n    | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n+   |\n+   = note: associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "83c2c06527493782371e1dcc11977027411c49b8", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -16,7 +16,7 @@ error[E0038]: the trait `bar` cannot be made into an object\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                ---                    ---- method `blah` has generic type parameters\n    |                |\n-   |                method `dup` references the `Self` type in its arguments or return type\n+   |                method `dup` references the `Self` type in its parameters or return type\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n@@ -27,7 +27,7 @@ error[E0038]: the trait `bar` cannot be made into an object\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                ---                    ---- method `blah` has generic type parameters\n    |                |\n-   |                method `dup` references the `Self` type in its arguments or return type\n+   |                method `dup` references the `Self` type in its parameters or return type\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ the trait `bar` cannot be made into an object"}, {"sha": "b315fe9df8afd349073f6fed2855a5b635ebcab3", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -14,7 +14,7 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n-   |                            --- method `add` references the `Self` type in its arguments or return type\n+   |                            --- method `add` references the `Self` type in its parameters or return type\n ...\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object"}, {"sha": "0d8441f87e7e776618a5d3979208478dbcb91f7e", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efe85943b3a5e7b3920db5a5a53183c75fc80d0c/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=efe85943b3a5e7b3920db5a5a53183c75fc80d0c", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n LL |     fn foo(&self, _x: &Self);\n-   |        --- method `foo` references the `Self` type in its arguments or return type\n+   |        --- method `foo` references the `Self` type in its parameters or return type\n ...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object"}]}