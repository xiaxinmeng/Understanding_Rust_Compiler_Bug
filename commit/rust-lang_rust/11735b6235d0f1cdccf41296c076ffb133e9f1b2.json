{"sha": "11735b6235d0f1cdccf41296c076ffb133e9f1b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzM1YjYyMzVkMGYxY2RjY2Y0MTI5NmMwNzZmZmIxMzNlOWYxYjI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-24T20:18:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T11:52:07Z"}, "message": "Gather stability information during cleaning", "tree": {"sha": "407e0c006df16d0acf36288eb8288f85af81890d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407e0c006df16d0acf36288eb8288f85af81890d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11735b6235d0f1cdccf41296c076ffb133e9f1b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11735b6235d0f1cdccf41296c076ffb133e9f1b2", "html_url": "https://github.com/rust-lang/rust/commit/11735b6235d0f1cdccf41296c076ffb133e9f1b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11735b6235d0f1cdccf41296c076ffb133e9f1b2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5d212f5fc7fd287e43a771cf64d302caf5a289", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5d212f5fc7fd287e43a771cf64d302caf5a289", "html_url": "https://github.com/rust-lang/rust/commit/6c5d212f5fc7fd287e43a771cf64d302caf5a289"}], "stats": {"total": 82, "additions": 27, "deletions": 55}, "files": [{"sha": "c031e8d2bc15508703fa9e2fc086f6d2764dd153", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=11735b6235d0f1cdccf41296c076ffb133e9f1b2", "patch": "@@ -654,7 +654,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             attrs,\n             source: whence.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.hid).clean(cx),\n             deprecation: self.depr.clean(cx),\n             def_id: cx.tcx.hir().local_def_id_from_node_id(self.id),\n             inner: ModuleItem(Module {\n@@ -1940,7 +1940,7 @@ impl Clean<Item> for doctree::Function<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             def_id: did,\n             inner: FunctionItem(Function {\n@@ -2140,7 +2140,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n@@ -2170,7 +2170,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: TraitAliasItem(TraitAlias {\n                 generics: self.generics.clean(cx),\n@@ -3244,7 +3244,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n@@ -3264,7 +3264,7 @@ impl Clean<Item> for doctree::Union<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n@@ -3311,7 +3311,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: EnumItem(Enum {\n                 variants: self.variants.iter().map(|v| v.clean(cx)).collect(),\n@@ -3334,7 +3334,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: None,\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: VariantItem(Variant {\n@@ -3639,7 +3639,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n@@ -3663,7 +3663,7 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: OpaqueTyItem(OpaqueTy {\n                 bounds: self.opaque_ty.bounds.clean(cx),\n@@ -3714,7 +3714,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n@@ -3739,7 +3739,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n@@ -3826,7 +3826,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n@@ -4065,7 +4065,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             inner,\n         }\n@@ -4248,7 +4248,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: Some(Public),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.hid).clean(cx),\n             deprecation: self.depr.clean(cx),\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n@@ -4276,7 +4276,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             visibility: Some(Public),\n-            stability: self.stab.clean(cx),\n+            stability: cx.stability(self.id).clean(cx),\n             deprecation: self.depr.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             inner: ProcMacroItem(ProcMacro {"}, {"sha": "976d1b0b6b196ba5ae30d2bcea1940dc5aee73a8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=11735b6235d0f1cdccf41296c076ffb133e9f1b2", "patch": "@@ -16,6 +16,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_target::spec::TargetTriple;\n \n use syntax::source_map;\n+use syntax::attr;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n use syntax::symbol::sym;\n@@ -165,6 +166,11 @@ impl<'tcx> DocContext<'tcx> {\n             self.tcx.hir().as_local_hir_id(def_id)\n         }\n     }\n+\n+    pub fn stability(&self, id: HirId) -> Option<attr::Stability> {\n+        self.tcx.hir().opt_local_def_id(id)\n+            .and_then(|def_id| self.tcx.lookup_stability(def_id)).cloned()\n+    }\n }\n \n pub trait DocAccessLevels {"}, {"sha": "c380c5e08a3304932285df788ccaebd948774f28", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=11735b6235d0f1cdccf41296c076ffb133e9f1b2", "patch": "@@ -25,13 +25,13 @@ pub struct Module<'hir> {\n     pub fns: Vec<Function<'hir>>,\n     pub mods: Vec<Module<'hir>>,\n     pub id: NodeId,\n+    pub hid: hir::HirId,\n     pub typedefs: Vec<Typedef<'hir>>,\n     pub opaque_tys: Vec<OpaqueTy<'hir>>,\n     pub statics: Vec<Static<'hir>>,\n     pub constants: Vec<Constant<'hir>>,\n     pub traits: Vec<Trait<'hir>>,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub impls: Vec<Impl<'hir>>,\n     pub foreigns: Vec<ForeignItem<'hir>>,\n@@ -50,8 +50,8 @@ impl Module<'hir> {\n         Module {\n             name       : name,\n             id: ast::CRATE_NODE_ID,\n+            hid: hir::CRATE_HIR_ID,\n             vis,\n-            stab: None,\n             depr: None,\n             where_outer: syntax_pos::DUMMY_SP,\n             where_inner: syntax_pos::DUMMY_SP,\n@@ -90,7 +90,6 @@ pub enum StructType {\n \n pub struct Struct<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n@@ -103,7 +102,6 @@ pub struct Struct<'hir> {\n \n pub struct Union<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n@@ -116,7 +114,6 @@ pub struct Union<'hir> {\n \n pub struct Enum<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub variants: Vec<Variant<'hir>>,\n     pub generics: &'hir hir::Generics,\n@@ -131,7 +128,6 @@ pub struct Variant<'hir> {\n     pub id: hir::HirId,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub def: &'hir hir::VariantData,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub whence: Span,\n }\n@@ -142,7 +138,6 @@ pub struct Function<'hir> {\n     pub id: hir::HirId,\n     pub name: Name,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub header: hir::FnHeader,\n     pub whence: Span,\n@@ -158,7 +153,6 @@ pub struct Typedef<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n }\n \n@@ -169,7 +163,6 @@ pub struct OpaqueTy<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n }\n \n@@ -181,7 +174,6 @@ pub struct Static<'hir> {\n     pub name: Name,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub whence: Span,\n@@ -193,7 +185,6 @@ pub struct Constant<'hir> {\n     pub name: Name,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub whence: Span,\n@@ -210,7 +201,6 @@ pub struct Trait<'hir> {\n     pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n }\n \n@@ -222,7 +212,6 @@ pub struct TraitAlias<'hir> {\n     pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n }\n \n@@ -238,14 +227,12 @@ pub struct Impl<'hir> {\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n }\n \n pub struct ForeignItem<'hir> {\n     pub vis: &'hir hir::Visibility,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub id: hir::HirId,\n     pub name: Name,\n@@ -258,11 +245,11 @@ pub struct ForeignItem<'hir> {\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n pub struct Macro<'hir> {\n     pub name: Name,\n+    pub hid: hir::HirId,\n     pub def_id: hir::def_id::DefId,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub matchers: hir::HirVec<Span>,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub imported_from: Option<Name>,\n }\n@@ -293,7 +280,6 @@ pub struct ProcMacro<'hir> {\n     pub helpers: Vec<Name>,\n     pub attrs: &'hir hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n-    pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n }\n "}, {"sha": "56c91bf405fce68d8f30c5c2cc31cf0791ce6269", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11735b6235d0f1cdccf41296c076ffb133e9f1b2/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=11735b6235d0f1cdccf41296c076ffb133e9f1b2", "patch": "@@ -57,11 +57,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn stability(&self, id: hir::HirId) -> Option<attr::Stability> {\n-        self.cx.tcx.hir().opt_local_def_id(id)\n-            .and_then(|def_id| self.cx.tcx.lookup_stability(def_id)).cloned()\n-    }\n-\n     fn deprecation(&self, id: hir::HirId) -> Option<attr::Deprecation> {\n         self.cx.tcx.hir().opt_local_def_id(id)\n             .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n@@ -96,7 +91,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             struct_type,\n             name,\n             vis: &item.vis,\n-            stab: self.stability(item.hir_id),\n             depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             generics,\n@@ -115,7 +109,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             struct_type,\n             name,\n             vis: &item.vis,\n-            stab: self.stability(item.hir_id),\n             depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             generics,\n@@ -134,13 +127,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 name: v.node.ident.name,\n                 id: v.node.id,\n                 attrs: &v.node.attrs,\n-                stab: self.stability(v.node.id),\n                 depr: self.deprecation(v.node.id),\n                 def: &v.node.data,\n                 whence: v.span,\n             }).collect(),\n             vis: &it.vis,\n-            stab: self.stability(it.hir_id),\n             depr: self.deprecation(it.hir_id),\n             generics,\n             attrs: &it.attrs,\n@@ -200,15 +191,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     helpers,\n                     attrs: &item.attrs,\n                     whence: item.span,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 });\n             }\n             None => {\n                 om.fns.push(Function {\n                     id: item.hir_id,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                     attrs: &item.attrs,\n                     decl,\n@@ -229,8 +218,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let mut om = Module::new(name, attrs, vis);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n-        om.stab = self.stability(id);\n         om.depr = self.deprecation(id);\n+        om.hid = id;\n         om.id = self.cx.tcx.hir().hir_to_node_id(id);\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n@@ -460,7 +449,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 };\n                 om.typedefs.push(t);\n@@ -473,7 +461,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 };\n                 om.opaque_tys.push(t);\n@@ -488,7 +475,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 };\n                 om.statics.push(s);\n@@ -502,7 +488,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 };\n                 om.constants.push(s);\n@@ -522,7 +507,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 };\n                 om.traits.push(t);\n@@ -536,7 +520,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     whence: item.span,\n                     vis: &item.vis,\n-                    stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n                 };\n                 om.trait_aliases.push(t);\n@@ -567,7 +550,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         id: item.hir_id,\n                         whence: item.span,\n                         vis: &item.vis,\n-                        stab: self.stability(item.hir_id),\n                         depr: self.deprecation(item.hir_id),\n                     };\n                     om.impls.push(i);\n@@ -588,7 +570,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: renamed.unwrap_or(item.ident).name,\n             kind: &item.node,\n             vis: &item.vis,\n-            stab: self.stability(item.hir_id),\n             depr: self.deprecation(item.hir_id),\n             attrs: &item.attrs,\n             whence: item.span\n@@ -607,13 +588,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n \n         Macro {\n-\n+            hid: def.hir_id,\n             def_id: self.cx.tcx.hir().local_def_id(def.hir_id),\n             attrs: &def.attrs,\n             name: renamed.unwrap_or(def.name),\n             whence: def.span,\n             matchers,\n-            stab: self.stability(def.hir_id),\n             depr: self.deprecation(def.hir_id),\n             imported_from: None,\n         }"}]}