{"sha": "748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGMyYzllYmMzODU5Yzc3YTFmYTNlZjgwOGRkZDA0Yzc3YmFiNzU=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-03-15T22:26:59Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-03-15T22:26:59Z"}, "message": "impl Clone for ~T, ~[T], ~str", "tree": {"sha": "e9c9357f6be3901d61dbca2a6716e9114e0bf5aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c9357f6be3901d61dbca2a6716e9114e0bf5aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "html_url": "https://github.com/rust-lang/rust/commit/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b059c6e5638de7b241ffddb38cef906813de245", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b059c6e5638de7b241ffddb38cef906813de245", "html_url": "https://github.com/rust-lang/rust/commit/2b059c6e5638de7b241ffddb38cef906813de245"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "af44f68601bc24b6c197eb13450c2262c0c29756", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -20,6 +20,11 @@ impl Clone for () {\n     fn clone(&self) -> () { () }\n }\n \n+impl<T:Clone> Clone for ~T {\n+    #[inline(always)]\n+    fn clone(&self) -> ~T { ~(**self).clone() }\n+}\n+\n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {"}, {"sha": "67a3f0d5d722d4ebfb1b21a6c1479670f705aed7", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -20,6 +20,7 @@\n use at_vec;\n use cast;\n use char;\n+use clone::Clone;\n use cmp::{Equiv, TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n use option::{None, Option, Some};\n@@ -2433,6 +2434,13 @@ impl OwnedStr for ~str {\n     }\n }\n \n+impl Clone for ~str {\n+    #[inline(always)]\n+    fn clone(&self) -> ~str {\n+        self.to_str()  // hilarious\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use char;"}, {"sha": "d8ded635291dce89cd7690f2144334ff553b9452", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -68,11 +68,11 @@ unsafe fn global_data_clone_create_<T:Owned + Clone>(\n         match value {\n             None => {\n                 let value = create();\n-                clone_value = Some(value.clone());\n+                clone_value = Some((*value).clone());\n                 Some(value)\n             }\n             Some(value) => {\n-                clone_value = Some(value.clone());\n+                clone_value = Some((*value).clone());\n                 Some(value)\n             }\n         }\n@@ -193,7 +193,7 @@ fn get_global_state() -> Exclusive<GlobalState> {\n             // Successfully installed the global pointer\n \n             // Take a handle to return\n-            let clone = state.clone();\n+            let clone = (*state).clone();\n \n             // Install a runtime exit function to destroy the global object\n             do at_exit {"}, {"sha": "f11a63a787d7c5d6115b2a2fe9ac3801c09591e2", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -15,6 +15,7 @@\n use container::{Container, Mutable};\n use cast;\n use cmp::{Eq, Equiv, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n+use clone::Clone;\n use iter::BaseIter;\n use iter;\n use kinds::Copy;\n@@ -2501,6 +2502,18 @@ impl<A:Copy> iter::CopyableNonstrictIter<A> for @[A] {\n     }\n }\n \n+impl<A:Clone> Clone for ~[A] {\n+    #[inline]\n+    fn clone(&self) -> ~[A] {\n+        let mut dolly = ~[];\n+        vec::reserve(&mut dolly, self.len());\n+        for self.each |item| {\n+            dolly.push(item.clone());\n+        }\n+        return dolly;\n+    }\n+}\n+\n // ___________________________________________________________________________\n \n #[cfg(test)]"}, {"sha": "bd2f641c017f1f5d94ba0dc068ac0516c796f2b7", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -572,7 +572,7 @@ mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_wr() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write |one| {\n                 fail_unless!(*one == 2);\n@@ -585,7 +585,7 @@ mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_ww() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write |one| {\n                 fail_unless!(*one == 2);\n@@ -598,7 +598,7 @@ mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_dw() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write_downgrade |write_mode| {\n                 do (&write_mode).write |one| {\n@@ -613,7 +613,7 @@ mod tests {\n     #[test] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_no_poison_rr() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.read |one| {\n                 fail_unless!(*one == 2);\n@@ -626,7 +626,7 @@ mod tests {\n     #[test] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_no_poison_rw() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.read |one| {\n                 fail_unless!(*one == 2);\n@@ -639,7 +639,7 @@ mod tests {\n     #[test] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_no_poison_dr() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write_downgrade |write_mode| {\n                 let read_mode = arc2.downgrade(write_mode);\n@@ -655,7 +655,7 @@ mod tests {\n     #[test]\n     pub fn test_rw_arc() {\n         let arc = ~RWARC(0);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         let (p,c) = comm::stream();\n \n         do task::spawn || {\n@@ -673,7 +673,7 @@ mod tests {\n         // Readers try to catch the writer in the act\n         let mut children = ~[];\n         for 5.times {\n-            let arc3 = ~arc.clone();\n+            let arc3 = (*arc).clone();\n             do task::task().future_result(|+r| children.push(r)).spawn\n                 || {\n                 do arc3.read |num| {\n@@ -704,7 +704,7 @@ mod tests {\n         for 10.times {\n             let ((rp1,rc1),(rp2,rc2)) = (comm::stream(),comm::stream());\n             reader_convos.push((rc1, rp2));\n-            let arcn = ~arc.clone();\n+            let arcn = (*arc).clone();\n             do task::spawn || {\n                 rp1.recv(); // wait for downgrader to give go-ahead\n                 do arcn.read |state| {\n@@ -715,7 +715,7 @@ mod tests {\n         }\n \n         // Writer task\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         let ((wp1,wc1),(wp2,wc2)) = (comm::stream(),comm::stream());\n         do task::spawn || {\n             wp1.recv();"}, {"sha": "1d1ec0e11f7fa0fe689b6381d7a5f53239845f30", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -827,7 +827,7 @@ mod tests {\n         // \"load tmp = move ptr; inc tmp; store ptr <- tmp\" dance.\n         let (p,c) = comm::stream();\n         let m = ~Mutex();\n-        let m2 = ~m.clone();\n+        let m2 = m.clone();\n         let mut sharedstate = ~0;\n         let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn || {\n@@ -1105,13 +1105,13 @@ mod tests {\n         // Test mutual exclusion between readers and writers. Just like the\n         // mutex mutual exclusion test, a ways above.\n         let (p,c) = comm::stream();\n-        let x2 = ~x.clone();\n+        let x2 = (*x).clone();\n         let mut sharedstate = ~0;\n         let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn || {\n             let sharedstate: &mut int =\n                 unsafe { cast::reinterpret_cast(&ptr) };\n-            access_shared(sharedstate, x2, mode1, 10);\n+            access_shared(sharedstate, &x2, mode1, 10);\n             c.send(());\n         }\n         access_shared(sharedstate, x, mode2, 10);\n@@ -1150,14 +1150,14 @@ mod tests {\n                                  mode2: RWlockMode,\n                                  make_mode2_go_first: bool) {\n         // Much like sem_multi_resource.\n-        let x2 = ~x.clone();\n+        let x2 = (*x).clone();\n         let (p1,c1) = comm::stream();\n         let (p2,c2) = comm::stream();\n         do task::spawn || {\n             if !make_mode2_go_first {\n                 let _ = p2.recv(); // parent sends to us once it locks, or ...\n             }\n-            do lock_rwlock_in_mode(x2, mode2) {\n+            do lock_rwlock_in_mode(&x2, mode2) {\n                 if make_mode2_go_first {\n                     c1.send(()); // ... we send to it once we lock\n                 }\n@@ -1207,7 +1207,7 @@ mod tests {\n \n         // Child wakes up parent\n         do x.write_cond |cond| {\n-            let x2 = ~x.clone();\n+            let x2 = (*x).clone();\n             do task::spawn || {\n                 do x2.write_cond |cond| {\n                     let woken = cond.signal();\n@@ -1218,7 +1218,7 @@ mod tests {\n         }\n         // Parent wakes up child\n         let (port,chan) = comm::stream();\n-        let x3 = ~x.clone();\n+        let x3 = (*x).clone();\n         do task::spawn || {\n             do x3.write_cond |cond| {\n                 chan.send(());\n@@ -1253,11 +1253,11 @@ mod tests {\n         let mut ports = ~[];\n \n         for num_waiters.times {\n-            let xi = ~x.clone();\n+            let xi = (*x).clone();\n             let (port, chan) = comm::stream();\n             ports.push(port);\n             do task::spawn || {\n-                do lock_cond(xi, dg1) |cond| {\n+                do lock_cond(&xi, dg1) |cond| {\n                     chan.send(());\n                     cond.wait();\n                     chan.send(());\n@@ -1289,10 +1289,10 @@ mod tests {\n     pub fn rwlock_kill_helper(mode1: RWlockMode, mode2: RWlockMode) {\n         // Mutex must get automatically unlocked if failed/killed within.\n         let x = ~RWlock();\n-        let x2 = ~x.clone();\n+        let x2 = (*x).clone();\n \n         let result: result::Result<(),()> = do task::try || {\n-            do lock_rwlock_in_mode(x2, mode1) {\n+            do lock_rwlock_in_mode(&x2, mode1) {\n                 fail!();\n             }\n         };"}, {"sha": "15ba7f95538fa478da763b01b6e04bf0175b7524", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c2c9ebc3859c77a1fa3ef808ddd04c77bab75/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=748c2c9ebc3859c77a1fa3ef808ddd04c77bab75", "patch": "@@ -63,7 +63,7 @@ pub fn analyze(proto: protocol, _cx: @ext_ctxt) {\n         debug!(\"colive iteration %?\", i);\n         let mut new_colive = ~[];\n         for colive.eachi |i, this_colive| {\n-            let mut result = ~this_colive.clone();\n+            let mut result = this_colive.clone();\n             let this = proto.get_state_by_id(i);\n             for this_colive.ones |j| {\n                 let next = proto.get_state_by_id(j);"}]}