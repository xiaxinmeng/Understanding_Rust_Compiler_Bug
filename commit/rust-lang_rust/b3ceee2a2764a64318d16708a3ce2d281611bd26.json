{"sha": "b3ceee2a2764a64318d16708a3ce2d281611bd26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzY2VlZTJhMjc2NGE2NDMxOGQxNjcwOGEzY2UyZDI4MTYxMWJkMjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-08T18:21:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-08T18:21:28Z"}, "message": "Merge #6761\n\n6761: Make config.rs a single source of truth for configuration. r=matklad a=matklad\n\nConfiguration is editor-independent. For this reason, we pick\nJSON-schema as the repr of the source of truth. We do specify it using\nrust-macros and some quick&dirty hackery though.\n\nThe idea for syncing truth with package.json is to just do that\nmanually, but there's a test to check that they are actually synced.\n\nI'll add something like `rust-analyzer --config-schema` in a follow-up\ncommit.\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f78ffdaa994c9bce879d6f01e79bd3686a51d963", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78ffdaa994c9bce879d6f01e79bd3686a51d963"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ceee2a2764a64318d16708a3ce2d281611bd26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfz8QoCRBK7hj4Ov3rIwAAdHIIADwmgKnMkUyZ23arQWJQXRGJ\nGax4SqBR8AnJNEkF4xzRDTMMPyGVU6A/LxoiR1Ht/38rnHlZ4GHFQj57zxRJOahQ\nfpI0sqypesaWp/W0YuHcf5EYGmnsh5S1e18ZLAtN3golD2KDtjp4ObpHEsAgXU/P\no17FpJwULebntRzx/QvE5Fe/FP8+G47xlct4UWaaS5pkquBZU4pYl3BZqNSwG+5s\n5HgAZWft9/4l0QYxjgZUrjlkxdPIDXXNZRNbQTyqw5fNpmpTxqTyImg7iC/QkWqK\noAVP/QLf3LbSl6yYxQmraZkNRLZiI7sMbKoA1t0yLwRFkexPWNdHnbSg/x7deoA=\n=glhR\n-----END PGP SIGNATURE-----\n", "payload": "tree f78ffdaa994c9bce879d6f01e79bd3686a51d963\nparent 87e35006362686b281caf46550c0fff35cddefb4\nparent 2544abbf867a7660bc2c9342181c8392774f1cca\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607451688 +0000\ncommitter GitHub <noreply@github.com> 1607451688 +0000\n\nMerge #6761\n\n6761: Make config.rs a single source of truth for configuration. r=matklad a=matklad\n\nConfiguration is editor-independent. For this reason, we pick\nJSON-schema as the repr of the source of truth. We do specify it using\nrust-macros and some quick&dirty hackery though.\n\nThe idea for syncing truth with package.json is to just do that\nmanually, but there's a test to check that they are actually synced.\n\nI'll add something like `rust-analyzer --config-schema` in a follow-up\ncommit.\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ceee2a2764a64318d16708a3ce2d281611bd26", "html_url": "https://github.com/rust-lang/rust/commit/b3ceee2a2764a64318d16708a3ce2d281611bd26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ceee2a2764a64318d16708a3ce2d281611bd26/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e35006362686b281caf46550c0fff35cddefb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e35006362686b281caf46550c0fff35cddefb4", "html_url": "https://github.com/rust-lang/rust/commit/87e35006362686b281caf46550c0fff35cddefb4"}, {"sha": "2544abbf867a7660bc2c9342181c8392774f1cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2544abbf867a7660bc2c9342181c8392774f1cca", "html_url": "https://github.com/rust-lang/rust/commit/2544abbf867a7660bc2c9342181c8392774f1cca"}], "stats": {"total": 1091, "additions": 659, "deletions": 432}, "files": [{"sha": "c6994127b50e38aa41b35670604ef6ef6063480f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -1550,6 +1550,7 @@ version = \"1.0.60\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1500e84d27fe482ed1dc791a56eddc2f230046a040fa908c08bda1d9fb615779\"\n dependencies = [\n+ \"indexmap\",\n  \"itoa\",\n  \"ryu\",\n  \"serde\","}, {"sha": "039976e4baa98abadf3bd2dbe94cf45356d36193", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -27,7 +27,7 @@ pico-args = \"0.3.1\"\n oorandom = \"11.1.2\"\n rustc-hash = \"1.1.0\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n-serde_json = \"1.0.48\"\n+serde_json = { version = \"1.0.48\", features = [\"preserve_order\"] }\n threadpool = \"1.7.1\"\n rayon = \"1.5\"\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }"}, {"sha": "0a471154e9c4dd3b0c43de0df28ad87c6d1bb536", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -28,6 +28,7 @@ pub(crate) enum Command {\n     StructuredSearch { debug_snippet: Option<String>, patterns: Vec<SsrPattern> },\n     ProcMacro,\n     RunServer,\n+    PrintConfigSchema,\n     Version,\n     Help,\n }\n@@ -135,6 +136,10 @@ impl Args {\n             return Ok(Args { verbosity, log_file: None, command: Command::Help });\n         }\n \n+        if matches.contains(\"--print-config-schema\") {\n+            return Ok(Args { verbosity, log_file, command: Command::PrintConfigSchema });\n+        }\n+\n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {"}, {"sha": "defdcbd748b6e477dd11ff340aa5aaa4b9805f57", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -31,6 +31,9 @@ fn try_main() -> Result<()> {\n     setup_logging(args.log_file)?;\n     match args.command {\n         args::Command::RunServer => run_server()?,\n+        args::Command::PrintConfigSchema => {\n+            println!(\"{:#}\", Config::json_schema());\n+        }\n         args::Command::ProcMacro => proc_macro_srv::cli::run()?,\n \n         args::Command::Parse { no_dump } => cli::parse(no_dump)?,"}, {"sha": "345a569780a4c5e38840ae1560b484e6017e9c3b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 328, "deletions": 102, "changes": 430, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -13,14 +13,166 @@ use flycheck::FlycheckConfig;\n use hir::PrefixKind;\n use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n use ide_db::helpers::insert_use::MergeBehaviour;\n+use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use rustc_hash::FxHashSet;\n-use serde::Deserialize;\n+use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n \n use crate::{caps::enabled_completions_resolve_capabilities, diagnostics::DiagnosticsMapConfig};\n \n+config_data! {\n+    struct ConfigData {\n+        /// The strategy to use when inserting new imports or merging imports.\n+        assist_importMergeBehaviour: MergeBehaviourDef = \"\\\"full\\\"\",\n+        /// The path structure for newly inserted paths to use.\n+        assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n+\n+        /// Show function name and docs in parameter hints.\n+        callInfo_full: bool = \"true\",\n+\n+        /// Automatically refresh project info via `cargo metadata` on\n+        /// Cargo.toml changes.\n+        cargo_autoreload: bool           = \"true\",\n+        /// Activate all available features.\n+        cargo_allFeatures: bool          = \"false\",\n+        /// List of features to activate.\n+        cargo_features: Vec<String>      = \"[]\",\n+        /// Run `cargo check` on startup to get the correct value for package\n+        /// OUT_DIRs.\n+        cargo_loadOutDirsFromCheck: bool = \"false\",\n+        /// Do not activate the `default` feature.\n+        cargo_noDefaultFeatures: bool    = \"false\",\n+        /// Compilation target (target triple).\n+        cargo_target: Option<String>     = \"null\",\n+        /// Internal config for debugging, disables loading of sysroot crates.\n+        cargo_noSysroot: bool            = \"false\",\n+\n+        /// Run specified `cargo check` command for diagnostics on save.\n+        checkOnSave_enable: bool                         = \"true\",\n+        /// Check with all features (will be passed as `--all-features`).\n+        /// Defaults to `rust-analyzer.cargo.allFeatures`.\n+        checkOnSave_allFeatures: Option<bool>            = \"null\",\n+        /// Check all targets and tests (will be passed as `--all-targets`).\n+        checkOnSave_allTargets: bool                     = \"true\",\n+        /// Cargo command to use for `cargo check`.\n+        checkOnSave_command: String                      = \"\\\"check\\\"\",\n+        /// Do not activate the `default` feature.\n+        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n+        /// Check for a specific target. Defaults to\n+        /// `rust-analyzer.cargo.target`.\n+        checkOnSave_target: Option<String>               = \"null\",\n+        /// Extra arguments for `cargo check`.\n+        checkOnSave_extraArgs: Vec<String>               = \"[]\",\n+        /// List of features to activate. Defaults to\n+        /// `rust-analyzer.cargo.features`.\n+        checkOnSave_features: Option<Vec<String>>        = \"null\",\n+        /// Advanced option, fully override the command rust-analyzer uses for\n+        /// checking. The command should include `--message-format=json` or\n+        /// similar option.\n+        checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n+\n+        /// Whether to add argument snippets when completing functions.\n+        completion_addCallArgumentSnippets: bool = \"true\",\n+        /// Whether to add parenthesis when completing functions.\n+        completion_addCallParenthesis: bool      = \"true\",\n+        /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n+        completion_postfix_enable: bool          = \"true\",\n+        /// Toggles the additional completions that automatically add imports when completed.\n+        /// Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n+        completion_autoimport_enable: bool       = \"true\",\n+\n+        /// Whether to show native rust-analyzer diagnostics.\n+        diagnostics_enable: bool                = \"true\",\n+        /// Whether to show experimental rust-analyzer diagnostics that might\n+        /// have more false positives than usual.\n+        diagnostics_enableExperimental: bool    = \"true\",\n+        /// List of rust-analyzer diagnostics to disable.\n+        diagnostics_disabled: FxHashSet<String> = \"[]\",\n+        /// List of warnings that should be displayed with info severity.\\nThe\n+        /// warnings will be indicated by a blue squiggly underline in code and\n+        /// a blue icon in the problems panel.\n+        diagnostics_warningsAsHint: Vec<String> = \"[]\",\n+        /// List of warnings that should be displayed with hint severity.\\nThe\n+        /// warnings will be indicated by faded text or three dots in code and\n+        /// will not show up in the problems panel.\n+        diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n+\n+        /// Controls file watching implementation.\n+        files_watcher: String = \"\\\"client\\\"\",\n+\n+        /// Whether to show `Debug` action. Only applies when\n+        /// `#rust-analyzer.hoverActions.enable#` is set.\n+        hoverActions_debug: bool           = \"true\",\n+        /// Whether to show HoverActions in Rust files.\n+        hoverActions_enable: bool          = \"true\",\n+        /// Whether to show `Go to Type Definition` action. Only applies when\n+        /// `#rust-analyzer.hoverActions.enable#` is set.\n+        hoverActions_gotoTypeDef: bool     = \"true\",\n+        /// Whether to show `Implementations` action. Only applies when\n+        /// `#rust-analyzer.hoverActions.enable#` is set.\n+        hoverActions_implementations: bool = \"true\",\n+        /// Whether to show `Run` action. Only applies when\n+        /// `#rust-analyzer.hoverActions.enable#` is set.\n+        hoverActions_run: bool             = \"true\",\n+        /// Use markdown syntax for links in hover.\n+        hoverActions_linksInHover: bool    = \"true\",\n+\n+        /// Whether to show inlay type hints for method chains.\n+        inlayHints_chainingHints: bool      = \"true\",\n+        /// Maximum length for inlay hints.\n+        inlayHints_maxLength: Option<usize> = \"null\",\n+        /// Whether to show function parameter name inlay hints at the call\n+        /// site.\n+        inlayHints_parameterHints: bool     = \"true\",\n+        /// Whether to show inlay type hints for variables.\n+        inlayHints_typeHints: bool          = \"true\",\n+\n+        /// Whether to show `Debug` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_debug: bool            = \"true\",\n+        /// Whether to show CodeLens in Rust files.\n+        lens_enable: bool           = \"true\",\n+        /// Whether to show `Implementations` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_implementations: bool  = \"true\",\n+        /// Whether to show `Run` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_run: bool              = \"true\",\n+        /// Whether to show `Method References` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_methodReferences: bool = \"false\",\n+\n+        /// Disable project auto-discovery in favor of explicitly specified set\n+        /// of projects.  \\nElements must be paths pointing to Cargo.toml,\n+        /// rust-project.json, or JSON objects in rust-project.json format.\n+        linkedProjects: Vec<ManifestOrProjectJson> = \"[]\",\n+        /// Number of syntax trees rust-analyzer keeps in memory.\n+        lruCapacity: Option<usize>                 = \"null\",\n+        /// Whether to show `can't find Cargo.toml` error message.\n+        notifications_cargoTomlNotFound: bool      = \"true\",\n+        /// Enable Proc macro support, cargo.loadOutDirsFromCheck must be\n+        /// enabled.\n+        procMacro_enable: bool                     = \"false\",\n+\n+        /// Command to be executed instead of 'cargo' for runnables.\n+        runnables_overrideCargo: Option<String> = \"null\",\n+        /// Additional arguments to be passed to cargo for runnables such as\n+        /// tests or binaries.\\nFor example, it may be '--release'.\n+        runnables_cargoExtraArgs: Vec<String>   = \"[]\",\n+\n+        /// Path to the rust compiler sources, for usage in rustc_private projects.\n+        rustcSource : Option<String> = \"null\",\n+\n+        /// Additional arguments to rustfmt.\n+        rustfmt_extraArgs: Vec<String>               = \"[]\",\n+        /// Advanced option, fully override the command rust-analyzer uses for\n+        /// formatting.\n+        rustfmt_overrideCommand: Option<Vec<String>> = \"null\",\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct Config {\n     pub client_caps: ClientCapsConfig,\n@@ -149,61 +301,60 @@ pub struct ClientCapsConfig {\n \n impl Config {\n     pub fn new(root_path: AbsPathBuf) -> Self {\n-        Config {\n+        // Defaults here don't matter, we'll immediately re-write them with\n+        // ConfigData.\n+        let mut res = Config {\n             client_caps: ClientCapsConfig::default(),\n \n-            publish_diagnostics: true,\n+            publish_diagnostics: false,\n             diagnostics: DiagnosticsConfig::default(),\n             diagnostics_map: DiagnosticsMapConfig::default(),\n             lru_capacity: None,\n             proc_macro_srv: None,\n             files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n-            notifications: NotificationsConfig { cargo_toml_not_found: true },\n+            notifications: NotificationsConfig { cargo_toml_not_found: false },\n \n-            cargo_autoreload: true,\n+            cargo_autoreload: false,\n             cargo: CargoConfig::default(),\n             rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n             flycheck: Some(FlycheckConfig::CargoCommand {\n-                command: \"check\".to_string(),\n+                command: String::new(),\n                 target_triple: None,\n                 no_default_features: false,\n-                all_targets: true,\n+                all_targets: false,\n                 all_features: false,\n                 extra_args: Vec::new(),\n                 features: Vec::new(),\n             }),\n             runnables: RunnablesConfig::default(),\n \n             inlay_hints: InlayHintsConfig {\n-                type_hints: true,\n-                parameter_hints: true,\n-                chaining_hints: true,\n+                type_hints: false,\n+                parameter_hints: false,\n+                chaining_hints: false,\n                 max_length: None,\n             },\n-            completion: CompletionConfig {\n-                enable_postfix_completions: true,\n-                enable_autoimport_completions: true,\n-                add_call_parenthesis: true,\n-                add_call_argument_snippets: true,\n-                ..CompletionConfig::default()\n-            },\n+            completion: CompletionConfig::default(),\n             assist: AssistConfig::default(),\n-            call_info_full: true,\n+            call_info_full: false,\n             lens: LensConfig::default(),\n             hover: HoverConfig::default(),\n             semantic_tokens_refresh: false,\n             linked_projects: Vec::new(),\n             root_path,\n-        }\n+        };\n+        res.do_update(serde_json::json!({}));\n+        res\n     }\n-\n     pub fn update(&mut self, json: serde_json::Value) {\n         log::info!(\"Config::update({:#})\", json);\n-\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n             return;\n         }\n-\n+        self.do_update(json);\n+        log::info!(\"Config::update() = {:#?}\", self);\n+    }\n+    fn do_update(&mut self, json: serde_json::Value) {\n         let data = ConfigData::from_json(json);\n \n         self.publish_diagnostics = data.diagnostics_enable;\n@@ -349,8 +500,6 @@ impl Config {\n             links_in_hover: data.hoverActions_linksInHover,\n             markdown: true,\n         };\n-\n-        log::info!(\"Config::update() = {:#?}\", self);\n     }\n \n     pub fn update_caps(&mut self, caps: &ClientCapabilities) {\n@@ -434,6 +583,10 @@ impl Config {\n             }\n         }\n     }\n+\n+    pub fn json_schema() -> serde_json::Value {\n+        ConfigData::json_schema()\n+    }\n }\n \n #[derive(Deserialize)]\n@@ -459,94 +612,167 @@ enum ImportPrefixDef {\n     ByCrate,\n }\n \n-macro_rules! config_data {\n-    (struct $name:ident { $($field:ident: $ty:ty = $default:expr,)*}) => {\n+macro_rules! _config_data {\n+    (struct $name:ident {\n+        $(\n+            $(#[doc=$doc:literal])*\n+            $field:ident: $ty:ty = $default:expr,\n+        )*\n+    }) => {\n         #[allow(non_snake_case)]\n         struct $name { $($field: $ty,)* }\n         impl $name {\n             fn from_json(mut json: serde_json::Value) -> $name {\n                 $name {$(\n-                    $field: {\n-                        let pointer = stringify!($field).replace('_', \"/\");\n-                        let pointer = format!(\"/{}\", pointer);\n-                        json.pointer_mut(&pointer)\n-                            .and_then(|it| serde_json::from_value(it.take()).ok())\n-                            .unwrap_or($default)\n-                    },\n+                    $field: get_field(&mut json, stringify!($field), $default),\n                 )*}\n             }\n-        }\n \n+            fn json_schema() -> serde_json::Value {\n+                schema(&[\n+                    $({\n+                        let field = stringify!($field);\n+                        let ty = stringify!($ty);\n+                        (field, ty, &[$($doc),*], $default)\n+                    },)*\n+                ])\n+            }\n+        }\n     };\n }\n+use _config_data as config_data;\n+\n+fn get_field<T: DeserializeOwned>(\n+    json: &mut serde_json::Value,\n+    field: &'static str,\n+    default: &str,\n+) -> T {\n+    let default = serde_json::from_str(default).unwrap();\n+\n+    let mut pointer = field.replace('_', \"/\");\n+    pointer.insert(0, '/');\n+    json.pointer_mut(&pointer)\n+        .and_then(|it| serde_json::from_value(it.take()).ok())\n+        .unwrap_or(default)\n+}\n \n-config_data! {\n-    struct ConfigData {\n-        assist_importMergeBehaviour: MergeBehaviourDef = MergeBehaviourDef::Full,\n-        assist_importPrefix: ImportPrefixDef           = ImportPrefixDef::Plain,\n-\n-        callInfo_full: bool = true,\n-\n-        cargo_autoreload: bool           = true,\n-        cargo_allFeatures: bool          = false,\n-        cargo_features: Vec<String>      = Vec::new(),\n-        cargo_loadOutDirsFromCheck: bool = false,\n-        cargo_noDefaultFeatures: bool    = false,\n-        cargo_target: Option<String>     = None,\n-        cargo_noSysroot: bool            = false,\n-\n-        checkOnSave_enable: bool                         = true,\n-        checkOnSave_allFeatures: Option<bool>            = None,\n-        checkOnSave_allTargets: bool                     = true,\n-        checkOnSave_command: String                      = \"check\".into(),\n-        checkOnSave_noDefaultFeatures: Option<bool>      = None,\n-        checkOnSave_target: Option<String>               = None,\n-        checkOnSave_extraArgs: Vec<String>               = Vec::new(),\n-        checkOnSave_features: Option<Vec<String>>        = None,\n-        checkOnSave_overrideCommand: Option<Vec<String>> = None,\n-\n-        completion_addCallArgumentSnippets: bool = true,\n-        completion_addCallParenthesis: bool      = true,\n-        completion_postfix_enable: bool          = true,\n-        completion_autoimport_enable: bool       = true,\n-\n-        diagnostics_enable: bool                = true,\n-        diagnostics_enableExperimental: bool    = true,\n-        diagnostics_disabled: FxHashSet<String> = FxHashSet::default(),\n-        diagnostics_warningsAsHint: Vec<String> = Vec::new(),\n-        diagnostics_warningsAsInfo: Vec<String> = Vec::new(),\n-\n-        files_watcher: String = \"client\".into(),\n-\n-        hoverActions_debug: bool           = true,\n-        hoverActions_enable: bool          = true,\n-        hoverActions_gotoTypeDef: bool     = true,\n-        hoverActions_implementations: bool = true,\n-        hoverActions_run: bool             = true,\n-        hoverActions_linksInHover: bool    = true,\n-\n-        inlayHints_chainingHints: bool      = true,\n-        inlayHints_maxLength: Option<usize> = None,\n-        inlayHints_parameterHints: bool     = true,\n-        inlayHints_typeHints: bool          = true,\n-\n-        lens_debug: bool            = true,\n-        lens_enable: bool           = true,\n-        lens_implementations: bool  = true,\n-        lens_run: bool              = true,\n-        lens_methodReferences: bool = false,\n-\n-        linkedProjects: Vec<ManifestOrProjectJson> = Vec::new(),\n-        lruCapacity: Option<usize>                 = None,\n-        notifications_cargoTomlNotFound: bool      = true,\n-        procMacro_enable: bool                     = false,\n-\n-        runnables_overrideCargo: Option<String> = None,\n-        runnables_cargoExtraArgs: Vec<String>   = Vec::new(),\n-\n-        rustfmt_extraArgs: Vec<String>               = Vec::new(),\n-        rustfmt_overrideCommand: Option<Vec<String>> = None,\n-\n-        rustcSource : Option<String> = None,\n+fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json::Value {\n+    for ((f1, ..), (f2, ..)) in fields.iter().zip(&fields[1..]) {\n+        fn key(f: &str) -> &str {\n+            f.splitn(2, \"_\").next().unwrap()\n+        };\n+        assert!(key(f1) <= key(f2), \"wrong field order: {:?} {:?}\", f1, f2);\n+    }\n+\n+    let map = fields\n+        .iter()\n+        .map(|(field, ty, doc, default)| {\n+            let name = field.replace(\"_\", \".\");\n+            let name = format!(\"rust-analyzer.{}\", name);\n+            let props = field_props(field, ty, doc, default);\n+            (name, props)\n+        })\n+        .collect::<serde_json::Map<_, _>>();\n+    map.into()\n+}\n+\n+fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json::Value {\n+    let doc = doc.iter().map(|it| it.trim()).join(\" \");\n+    assert!(\n+        doc.ends_with('.') && doc.starts_with(char::is_uppercase),\n+        \"bad docs for {}: {:?}\",\n+        field,\n+        doc\n+    );\n+    let default = default.parse::<serde_json::Value>().unwrap();\n+\n+    let mut map = serde_json::Map::default();\n+    macro_rules! set {\n+        ($($key:literal: $value:tt),*$(,)?) => {{$(\n+            map.insert($key.into(), serde_json::json!($value));\n+        )*}};\n     }\n+    set!(\"markdownDescription\": doc);\n+    set!(\"default\": default);\n+\n+    match ty {\n+        \"bool\" => set!(\"type\": \"boolean\"),\n+        \"String\" => set!(\"type\": \"string\"),\n+        \"Vec<String>\" => set! {\n+            \"type\": \"array\",\n+            \"items\": { \"type\": \"string\" },\n+        },\n+        \"FxHashSet<String>\" => set! {\n+            \"type\": \"array\",\n+            \"items\": { \"type\": \"string\" },\n+            \"uniqueItems\": true,\n+        },\n+        \"Option<usize>\" => set! {\n+            \"type\": [\"null\", \"integer\"],\n+            \"minimum\": 0,\n+        },\n+        \"Option<String>\" => set! {\n+            \"type\": [\"null\", \"string\"],\n+        },\n+        \"Option<bool>\" => set! {\n+            \"type\": [\"null\", \"boolean\"],\n+        },\n+        \"Option<Vec<String>>\" => set! {\n+            \"type\": [\"null\", \"array\"],\n+            \"items\": { \"type\": \"string\" },\n+        },\n+        \"MergeBehaviourDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"none\", \"full\", \"last\"],\n+            \"enumDescriptions\": [\n+                \"No merging\",\n+                \"Merge all layers of the import trees\",\n+                \"Only merge the last layer of the import trees\"\n+            ],\n+        },\n+        \"ImportPrefixDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"plain\",\n+                \"by_self\",\n+                \"by_crate\"\n+            ],\n+            \"enumDescriptions\": [\n+                \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n+                \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name\",\n+                \"Force import paths to be absolute by always starting them with `crate` or the crate name they refer to.\"\n+            ],\n+        },\n+        \"Vec<ManifestOrProjectJson>\" => set! {\n+            \"type\": \"array\",\n+            \"items\": { \"type\": [\"string\", \"object\"] },\n+        },\n+        _ => panic!(\"{}: {}\", ty, default),\n+    }\n+\n+    map.into()\n+}\n+\n+#[test]\n+fn schema_in_sync_with_package_json() {\n+    fn remove_ws(text: &str) -> String {\n+        text.replace(char::is_whitespace, \"\")\n+    }\n+\n+    let s = Config::json_schema();\n+    let schema = format!(\"{:#}\", s);\n+    let schema = schema.trim_start_matches('{').trim_end_matches('}');\n+\n+    let package_json = std::env::current_dir()\n+        .unwrap()\n+        .ancestors()\n+        .nth(2)\n+        .unwrap()\n+        .join(\"editors/code/package.json\");\n+    let package_json = std::fs::read_to_string(&package_json).unwrap();\n+\n+    let p = remove_ws(&package_json);\n+    let s = remove_ws(&schema);\n+\n+    assert!(p.contains(&s), \"update config in package.json. New config:\\n{:#}\", schema);\n }"}, {"sha": "05940a546f0bde37ddc3b17ebada46c2e5d36667", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -321,12 +321,11 @@ fn lines_match_works() {\n /// as paths). You can use a `\"{...}\"` string literal as a wildcard for\n /// arbitrary nested JSON. Arrays are sorted before comparison.\n pub fn find_mismatch<'a>(expected: &'a Value, actual: &'a Value) -> Option<(&'a Value, &'a Value)> {\n-    use serde_json::Value::*;\n     match (expected, actual) {\n-        (&Number(ref l), &Number(ref r)) if l == r => None,\n-        (&Bool(l), &Bool(r)) if l == r => None,\n-        (&String(ref l), &String(ref r)) if lines_match(l, r) => None,\n-        (&Array(ref l), &Array(ref r)) => {\n+        (Value::Number(l), Value::Number(r)) if l == r => None,\n+        (Value::Bool(l), Value::Bool(r)) if l == r => None,\n+        (Value::String(l), Value::String(r)) if lines_match(l, r) => None,\n+        (Value::Array(l), Value::Array(r)) => {\n             if l.len() != r.len() {\n                 return Some((expected, actual));\n             }\n@@ -350,17 +349,26 @@ pub fn find_mismatch<'a>(expected: &'a Value, actual: &'a Value) -> Option<(&'a\n                 None\n             }\n         }\n-        (&Object(ref l), &Object(ref r)) => {\n+        (Value::Object(l), Value::Object(r)) => {\n+            fn sorted_values(obj: &serde_json::Map<String, Value>) -> Vec<&Value> {\n+                let mut entries = obj.iter().collect::<Vec<_>>();\n+                entries.sort_by_key(|it| it.0);\n+                entries.into_iter().map(|(_k, v)| v).collect::<Vec<_>>()\n+            }\n+\n             let same_keys = l.len() == r.len() && l.keys().all(|k| r.contains_key(k));\n             if !same_keys {\n                 return Some((expected, actual));\n             }\n \n-            l.values().zip(r.values()).filter_map(|(l, r)| find_mismatch(l, r)).next()\n+            let l = sorted_values(l);\n+            let r = sorted_values(r);\n+\n+            l.into_iter().zip(r).filter_map(|(l, r)| find_mismatch(l, r)).next()\n         }\n-        (&Null, &Null) => None,\n+        (Value::Null, Value::Null) => None,\n         // magic string literal \"{...}\" acts as wildcard for any sub-JSON\n-        (&String(ref l), _) if l == \"{...}\" => None,\n+        (Value::String(l), _) if l == \"{...}\" => None,\n         _ => Some((expected, actual)),\n     }\n }"}, {"sha": "ca5f2ebc8d9c303a65a96c028ef38dae2e42851e", "filename": "editors/code/package.json", "status": "modified", "additions": 304, "deletions": 320, "changes": 624, "blob_url": "https://github.com/rust-lang/rust/blob/b3ceee2a2764a64318d16708a3ce2d281611bd26/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b3ceee2a2764a64318d16708a3ce2d281611bd26/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b3ceee2a2764a64318d16708a3ce2d281611bd26", "patch": "@@ -215,169 +215,6 @@\n             \"type\": \"object\",\n             \"title\": \"Rust Analyzer\",\n             \"properties\": {\n-                \"rust-analyzer.lruCapacity\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n-                    ],\n-                    \"default\": null,\n-                    \"minimum\": 0,\n-                    \"exclusiveMinimum\": true,\n-                    \"description\": \"Number of syntax trees rust-analyzer keeps in memory.\"\n-                },\n-                \"rust-analyzer.files.watcher\": {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"client\",\n-                        \"notify\"\n-                    ],\n-                    \"default\": \"client\",\n-                    \"description\": \"Controls file watching implementation.\"\n-                },\n-                \"rust-analyzer.files.exclude\": {\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"default\": [],\n-                    \"description\": \"Paths to exclude from analysis.\"\n-                },\n-                \"rust-analyzer.notifications.cargoTomlNotFound\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n-                },\n-                \"rust-analyzer.cargo.autoreload\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on Cargo.toml changes\"\n-                },\n-                \"rust-analyzer.cargo.noDefaultFeatures\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"markdownDescription\": \"Do not activate the `default` feature\"\n-                },\n-                \"rust-analyzer.cargo.allFeatures\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"description\": \"Activate all available features\"\n-                },\n-                \"rust-analyzer.cargo.features\": {\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"default\": [],\n-                    \"description\": \"List of features to activate\"\n-                },\n-                \"rust-analyzer.cargo.loadOutDirsFromCheck\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n-                },\n-                \"rust-analyzer.cargo.target\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ],\n-                    \"default\": null,\n-                    \"description\": \"Specify the compilation target\"\n-                },\n-                \"rust-analyzer.noSysroot\": {\n-                    \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates\",\n-                    \"type\": \"boolean\",\n-                    \"default\": false\n-                },\n-                \"rust-analyzer.rustfmt.extraArgs\": {\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"default\": [],\n-                    \"description\": \"Additional arguments to rustfmt\"\n-                },\n-                \"rust-analyzer.rustfmt.overrideCommand\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"array\"\n-                    ],\n-                    \"items\": {\n-                        \"type\": \"string\",\n-                        \"minItems\": 1\n-                    },\n-                    \"default\": null,\n-                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for formatting.\"\n-                },\n-                \"rust-analyzer.checkOnSave.enable\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save\"\n-                },\n-                \"rust-analyzer.checkOnSave.extraArgs\": {\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"markdownDescription\": \"Extra arguments for `cargo check`\",\n-                    \"default\": []\n-                },\n-                \"rust-analyzer.checkOnSave.command\": {\n-                    \"type\": \"string\",\n-                    \"default\": \"check\",\n-                    \"markdownDescription\": \"Cargo command to use for `cargo check`\"\n-                },\n-                \"rust-analyzer.checkOnSave.overrideCommand\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"array\"\n-                    ],\n-                    \"items\": {\n-                        \"type\": \"string\",\n-                        \"minItems\": 1\n-                    },\n-                    \"default\": null,\n-                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for checking. The command should include `--message-format=json` or similar option.\"\n-                },\n-                \"rust-analyzer.checkOnSave.allTargets\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\"\n-                },\n-                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"boolean\"\n-                    ],\n-                    \"default\": null,\n-                    \"markdownDescription\": \"Do not activate the `default` feature\"\n-                },\n-                \"rust-analyzer.checkOnSave.allFeatures\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"boolean\"\n-                    ],\n-                    \"default\": null,\n-                    \"markdownDescription\": \"Check with all features (will be passed as `--all-features`). Defaults to `rust-analyzer.cargo.allFeatures`.\"\n-                },\n-                \"rust-analyzer.checkOnSave.features\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"array\"\n-                    ],\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"default\": null,\n-                    \"description\": \"List of features to activate. Defaults to `rust-analyzer.cargo.features`.\"\n-                },\n-                \"rust-analyzer.checkOnSave.target\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ],\n-                    \"default\": null,\n-                    \"description\": \"Check for a specific target. Defaults to `rust-analyzer.cargo.target`.\"\n-                },\n                 \"rust-analyzer.cargoRunner\": {\n                     \"type\": [\n                         \"null\",\n@@ -420,59 +257,6 @@\n                     \"default\": true,\n                     \"description\": \"Whether to show inlay hints\"\n                 },\n-                \"rust-analyzer.inlayHints.typeHints\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to show inlay type hints for variables.\"\n-                },\n-                \"rust-analyzer.inlayHints.chainingHints\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to show inlay type hints for method chains.\"\n-                },\n-                \"rust-analyzer.inlayHints.parameterHints\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to show function parameter name inlay hints at the call site.\"\n-                },\n-                \"rust-analyzer.inlayHints.maxLength\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n-                    ],\n-                    \"default\": 20,\n-                    \"minimum\": 0,\n-                    \"exclusiveMinimum\": true,\n-                    \"description\": \"Maximum length for inlay hints\"\n-                },\n-                \"rust-analyzer.completion.addCallParenthesis\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to add parenthesis when completing functions\"\n-                },\n-                \"rust-analyzer.completion.addCallArgumentSnippets\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to add argument snippets when completing functions\"\n-                },\n-                \"rust-analyzer.completion.postfix.enable\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\"\n-                },\n-                \"rust-analyzer.completion.autoimport.enable\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": [\n-                        \"Toggles the additional completions that automatically add imports when completed.\",\n-                        \"Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled\"\n-                    ]\n-                },\n-                \"rust-analyzer.callInfo.full\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Show function name and docs in parameter hints\"\n-                },\n                 \"rust-analyzer.updates.channel\": {\n                     \"type\": \"string\",\n                     \"enum\": [\n@@ -520,11 +304,6 @@\n                     \"type\": \"boolean\",\n                     \"default\": false\n                 },\n-                \"rust-analyzer.procMacro.enable\": {\n-                    \"description\": \"Enable Proc macro support, cargo.loadOutDirsFromCheck must be enabled.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": false\n-                },\n                 \"rust-analyzer.debug.engine\": {\n                     \"type\": \"string\",\n                     \"enum\": [\n@@ -557,157 +336,362 @@\n                     \"default\": {},\n                     \"description\": \"Optional settings passed to the debug engine. Example:\\n{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }\"\n                 },\n-                \"rust-analyzer.lens.enable\": {\n-                    \"description\": \"Whether to show CodeLens in Rust files.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.assist.importMergeBehaviour\": {\n+                    \"markdownDescription\": \"The strategy to use when inserting new imports or merging imports.\",\n+                    \"default\": \"full\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"none\",\n+                        \"full\",\n+                        \"last\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"No merging\",\n+                        \"Merge all layers of the import trees\",\n+                        \"Only merge the last layer of the import trees\"\n+                    ]\n                 },\n-                \"rust-analyzer.lens.run\": {\n-                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.assist.importPrefix\": {\n+                    \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n+                    \"default\": \"plain\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"plain\",\n+                        \"by_self\",\n+                        \"by_crate\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n+                        \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name\",\n+                        \"Force import paths to be absolute by always starting them with `crate` or the crate name they refer to.\"\n+                    ]\n                 },\n-                \"rust-analyzer.lens.debug\": {\n-                    \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.callInfo.full\": {\n+                    \"markdownDescription\": \"Show function name and docs in parameter hints.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.implementations\": {\n-                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo.autoreload\": {\n+                    \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on Cargo.toml changes.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.methodReferences\": {\n-                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": false\n+                \"rust-analyzer.cargo.allFeatures\": {\n+                    \"markdownDescription\": \"Activate all available features.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.enable\": {\n-                    \"description\": \"Whether to show HoverActions in Rust files.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo.features\": {\n+                    \"markdownDescription\": \"List of features to activate.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n                 },\n-                \"rust-analyzer.hoverActions.implementations\": {\n-                    \"markdownDescription\": \"Whether to show `Implementations` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo.loadOutDirsFromCheck\": {\n+                    \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.run\": {\n-                    \"markdownDescription\": \"Whether to show `Run` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo.noDefaultFeatures\": {\n+                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.debug\": {\n-                    \"markdownDescription\": \"Whether to show `Debug` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo.target\": {\n+                    \"markdownDescription\": \"Compilation target (target triple).\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ]\n                 },\n-                \"rust-analyzer.hoverActions.gotoTypeDef\": {\n-                    \"markdownDescription\": \"Whether to show `Go to Type Definition` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n+                \"rust-analyzer.cargo.noSysroot\": {\n+                    \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.linkedProjects\": {\n-                    \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set of projects.  \\nElements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format\",\n+                \"rust-analyzer.checkOnSave.enable\": {\n+                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.checkOnSave.allFeatures\": {\n+                    \"markdownDescription\": \"Check with all features (will be passed as `--all-features`). Defaults to `rust-analyzer.cargo.allFeatures`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"boolean\"\n+                    ]\n+                },\n+                \"rust-analyzer.checkOnSave.allTargets\": {\n+                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`).\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.checkOnSave.command\": {\n+                    \"markdownDescription\": \"Cargo command to use for `cargo check`.\",\n+                    \"default\": \"check\",\n+                    \"type\": \"string\"\n+                },\n+                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n+                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"boolean\"\n+                    ]\n+                },\n+                \"rust-analyzer.checkOnSave.target\": {\n+                    \"markdownDescription\": \"Check for a specific target. Defaults to `rust-analyzer.cargo.target`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ]\n+                },\n+                \"rust-analyzer.checkOnSave.extraArgs\": {\n+                    \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n+                    \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n-                        \"type\": [\n-                            \"string\",\n-                            \"object\"\n-                        ]\n-                    },\n-                    \"default\": null\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.checkOnSave.features\": {\n+                    \"markdownDescription\": \"List of features to activate. Defaults to `rust-analyzer.cargo.features`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.checkOnSave.overrideCommand\": {\n+                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for checking. The command should include `--message-format=json` or similar option.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.completion.addCallArgumentSnippets\": {\n+                    \"markdownDescription\": \"Whether to add argument snippets when completing functions.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.addCallParenthesis\": {\n+                    \"markdownDescription\": \"Whether to add parenthesis when completing functions.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.postfix.enable\": {\n+                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.autoimport.enable\": {\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed. Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.diagnostics.enable\": {\n-                    \"type\": \"boolean\",\n+                    \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\",\n                     \"default\": true,\n-                    \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\"\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.diagnostics.enableExperimental\": {\n-                    \"type\": \"boolean\",\n+                    \"markdownDescription\": \"Whether to show experimental rust-analyzer diagnostics that might have more false positives than usual.\",\n                     \"default\": true,\n-                    \"markdownDescription\": \"Whether to show experimental rust-analyzer diagnostics that might have more false positives than usual.\"\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.diagnostics.disabled\": {\n+                    \"markdownDescription\": \"List of rust-analyzer diagnostics to disable.\",\n+                    \"default\": [],\n                     \"type\": \"array\",\n-                    \"uniqueItems\": true,\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"description\": \"List of rust-analyzer diagnostics to disable\",\n-                    \"default\": []\n+                    \"uniqueItems\": true\n                 },\n-                \"rust-analyzer.diagnostics.warningsAsInfo\": {\n+                \"rust-analyzer.diagnostics.warningsAsHint\": {\n+                    \"markdownDescription\": \"List of warnings that should be displayed with info severity.\\\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n+                    \"default\": [],\n                     \"type\": \"array\",\n-                    \"uniqueItems\": true,\n                     \"items\": {\n                         \"type\": \"string\"\n-                    },\n-                    \"description\": \"List of warnings that should be displayed with info severity.\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n-                    \"default\": []\n+                    }\n                 },\n-                \"rust-analyzer.diagnostics.warningsAsHint\": {\n+                \"rust-analyzer.diagnostics.warningsAsInfo\": {\n+                    \"markdownDescription\": \"List of warnings that should be displayed with hint severity.\\\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n+                    \"default\": [],\n                     \"type\": \"array\",\n-                    \"uniqueItems\": true,\n                     \"items\": {\n                         \"type\": \"string\"\n-                    },\n-                    \"description\": \"List of warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n-                    \"default\": []\n+                    }\n                 },\n-                \"rust-analyzer.assist.importMergeBehaviour\": {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"none\",\n-                        \"full\",\n-                        \"last\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"No merging\",\n-                        \"Merge all layers of the import trees\",\n-                        \"Only merge the last layer of the import trees\"\n-                    ],\n-                    \"default\": \"full\",\n-                    \"description\": \"The strategy to use when inserting new imports or merging imports.\"\n+                \"rust-analyzer.files.watcher\": {\n+                    \"markdownDescription\": \"Controls file watching implementation.\",\n+                    \"default\": \"client\",\n+                    \"type\": \"string\"\n                 },\n-                \"rust-analyzer.assist.importPrefix\": {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"plain\",\n-                        \"by_self\",\n-                        \"by_crate\"\n+                \"rust-analyzer.hoverActions.debug\": {\n+                    \"markdownDescription\": \"Whether to show `Debug` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.hoverActions.enable\": {\n+                    \"markdownDescription\": \"Whether to show HoverActions in Rust files.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.hoverActions.gotoTypeDef\": {\n+                    \"markdownDescription\": \"Whether to show `Go to Type Definition` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.hoverActions.implementations\": {\n+                    \"markdownDescription\": \"Whether to show `Implementations` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.hoverActions.run\": {\n+                    \"markdownDescription\": \"Whether to show `Run` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.hoverActions.linksInHover\": {\n+                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.chainingHints\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.maxLength\": {\n+                    \"markdownDescription\": \"Maximum length for inlay hints.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"integer\"\n                     ],\n-                    \"enumDescriptions\": [\n-                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n-                        \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name\",\n-                        \"Force import paths to be absolute by always starting them with `crate` or the crate name they refer to.\"\n+                    \"minimum\": 0\n+                },\n+                \"rust-analyzer.inlayHints.parameterHints\": {\n+                    \"markdownDescription\": \"Whether to show function parameter name inlay hints at the call site.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.typeHints\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for variables.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.debug\": {\n+                    \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.enable\": {\n+                    \"markdownDescription\": \"Whether to show CodeLens in Rust files.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.implementations\": {\n+                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.run\": {\n+                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.methodReferences\": {\n+                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.linkedProjects\": {\n+                    \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set of projects.  \\\\nElements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": [\n+                            \"string\",\n+                            \"object\"\n+                        ]\n+                    }\n+                },\n+                \"rust-analyzer.lruCapacity\": {\n+                    \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"integer\"\n                     ],\n-                    \"default\": \"plain\",\n-                    \"description\": \"The path structure for newly inserted paths to use.\"\n+                    \"minimum\": 0\n+                },\n+                \"rust-analyzer.notifications.cargoTomlNotFound\": {\n+                    \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.procMacro.enable\": {\n+                    \"markdownDescription\": \"Enable Proc macro support, cargo.loadOutDirsFromCheck must be enabled.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.runnables.overrideCargo\": {\n+                    \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n+                    \"default\": null,\n                     \"type\": [\n                         \"null\",\n                         \"string\"\n-                    ],\n-                    \"default\": null,\n-                    \"description\": \"Command to be executed instead of 'cargo' for runnables.\"\n+                    ]\n                 },\n                 \"rust-analyzer.runnables.cargoExtraArgs\": {\n+                    \"markdownDescription\": \"Additional arguments to be passed to cargo for runnables such as tests or binaries.\\\\nFor example, it may be '--release'.\",\n+                    \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n-                    },\n-                    \"default\": [],\n-                    \"description\": \"Additional arguments to be passed to cargo for runnables such as tests or binaries.\\nFor example, it may be '--release'\"\n+                    }\n                 },\n                 \"rust-analyzer.rustcSource\": {\n+                    \"markdownDescription\": \"Path to the rust compiler sources, for usage in rustc_private projects.\",\n+                    \"default\": null,\n                     \"type\": [\n                         \"null\",\n                         \"string\"\n-                    ],\n+                    ]\n+                },\n+                \"rust-analyzer.rustfmt.extraArgs\": {\n+                    \"markdownDescription\": \"Additional arguments to rustfmt.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.rustfmt.overrideCommand\": {\n+                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for formatting.\",\n                     \"default\": null,\n-                    \"description\": \"Path to the rust compiler sources, for usage in rustc_private projects.\"\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n                 }\n             }\n         },"}]}