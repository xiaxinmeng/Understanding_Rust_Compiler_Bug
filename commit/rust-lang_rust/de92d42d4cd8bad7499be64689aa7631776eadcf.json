{"sha": "de92d42d4cd8bad7499be64689aa7631776eadcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTJkNDJkNGNkOGJhZDc0OTliZTY0Njg5YWE3NjMxNzc2ZWFkY2Y=", "commit": {"author": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-05-08T19:48:45Z"}, "committer": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-05-08T19:48:45Z"}, "message": "Fix false lint warnings in match arms with multiple patterns\n\nfixing #13866", "tree": {"sha": "0497a46e143080bc6582bb7291e816e5839172ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0497a46e143080bc6582bb7291e816e5839172ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de92d42d4cd8bad7499be64689aa7631776eadcf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de92d42d4cd8bad7499be64689aa7631776eadcf", "html_url": "https://github.com/rust-lang/rust/commit/de92d42d4cd8bad7499be64689aa7631776eadcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de92d42d4cd8bad7499be64689aa7631776eadcf/comments", "author": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45485181338137136ea2816d78ed108440f7d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45485181338137136ea2816d78ed108440f7d50", "html_url": "https://github.com/rust-lang/rust/commit/e45485181338137136ea2816d78ed108440f7d50"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "a399fabd95fb6430e73200ac3fd0d888cba68c6e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/de92d42d4cd8bad7499be64689aa7631776eadcf/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de92d42d4cd8bad7499be64689aa7631776eadcf/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=de92d42d4cd8bad7499be64689aa7631776eadcf", "patch": "@@ -1367,28 +1367,38 @@ fn check_unsafe_block(cx: &Context, e: &ast::Expr) {\n     }\n }\n \n-fn check_unused_mut_pat(cx: &Context, p: &ast::Pat) {\n-    match p.node {\n-        ast::PatIdent(ast::BindByValue(ast::MutMutable),\n-                      ref path, _) if pat_util::pat_is_binding(&cx.tcx.def_map, p) => {\n-            // `let mut _a = 1;` doesn't need a warning.\n-            let initial_underscore = if path.segments.len() == 1 {\n-                token::get_ident(path.segments\n-                                     .get(0)\n-                                     .identifier).get().starts_with(\"_\")\n-            } else {\n-                cx.tcx.sess.span_bug(p.span,\n-                                     \"mutable binding that doesn't consist \\\n-                                      of exactly one segment\")\n-            };\n-\n-            if !initial_underscore &&\n-               !cx.tcx.used_mut_nodes.borrow().contains(&p.id) {\n-                cx.span_lint(UnusedMut, p.span,\n-                             \"variable does not need to be mutable\");\n+fn check_unused_mut_pat(cx: &Context, pats: &[@ast::Pat]) {\n+    // collect all mutable pattern and group their NodeIDs by their Identifier to\n+    // avoid false warnings in match arms with multiple patterns\n+    let mut mutables = HashMap::new();\n+    for &p in pats.iter() {\n+        pat_util::pat_bindings(&cx.tcx.def_map, p, |mode, id, _, path| {\n+            match mode {\n+                ast::BindByValue(ast::MutMutable) => {\n+                    if path.segments.len() != 1 {\n+                        cx.tcx.sess.span_bug(p.span,\n+                                             \"mutable binding that doesn't consist \\\n+                                              of exactly one segment\");\n+                    }\n+                    let ident = path.segments.get(0).identifier;\n+                    if !token::get_ident(ident).get().starts_with(\"_\") {\n+                        mutables.insert_or_update_with(ident.name as uint, vec!(id), |_, old| {\n+                            old.push(id);\n+                        });\n+                    }\n+                }\n+                _ => {\n+                }\n             }\n+        });\n+    }\n+\n+    let used_mutables = cx.tcx.used_mut_nodes.borrow();\n+    for (_, v) in mutables.iter() {\n+        if !v.iter().any(|e| used_mutables.contains(e)) {\n+            cx.span_lint(UnusedMut, cx.tcx.map.span(*v.get(0)),\n+                         \"variable does not need to be mutable\");\n         }\n-        _ => ()\n     }\n }\n \n@@ -1684,7 +1694,6 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_pat(&mut self, p: &ast::Pat, _: ()) {\n         check_pat_non_uppercase_statics(self, p);\n         check_pat_uppercase_variable(self, p);\n-        check_unused_mut_pat(self, p);\n \n         visit::walk_pat(self, p, ());\n     }\n@@ -1700,6 +1709,11 @@ impl<'a> Visitor<()> for Context<'a> {\n             ast::ExprParen(expr) => if self.negated_expr_id == e.id {\n                 self.negated_expr_id = expr.id\n             },\n+            ast::ExprMatch(_, ref arms) => {\n+                for a in arms.iter() {\n+                    check_unused_mut_pat(self, a.pats.as_slice());\n+                }\n+            },\n             _ => ()\n         };\n \n@@ -1723,6 +1737,18 @@ impl<'a> Visitor<()> for Context<'a> {\n         check_unused_result(self, s);\n         check_unnecessary_parens_stmt(self, s);\n \n+        match s.node {\n+            ast::StmtDecl(d, _) => {\n+                match d.node {\n+                    ast::DeclLocal(l) => {\n+                        check_unused_mut_pat(self, &[l.pat]);\n+                    },\n+                    _ => {}\n+                }\n+            },\n+            _ => {}\n+        }\n+\n         visit::walk_stmt(self, s, ());\n     }\n \n@@ -1732,6 +1758,10 @@ impl<'a> Visitor<()> for Context<'a> {\n             visit::walk_fn(this, fk, decl, body, span, id, ());\n         };\n \n+        for a in decl.inputs.iter(){\n+            check_unused_mut_pat(self, &[a.pat]);\n+        }\n+\n         match *fk {\n             visit::FkMethod(_, _, m) => {\n                 self.with_lint_attrs(m.attrs.as_slice(), |cx| {"}, {"sha": "671fecc4e22e7581d57ffca4a3f463b86c56dbfe", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de92d42d4cd8bad7499be64689aa7631776eadcf/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de92d42d4cd8bad7499be64689aa7631776eadcf/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=de92d42d4cd8bad7499be64689aa7631776eadcf", "patch": "@@ -28,6 +28,13 @@ fn main() {\n     match 30 {\n         mut x => {} //~ ERROR: variable does not need to be mutable\n     }\n+    match (30, 2) {\n+      (mut x, 1) | //~ ERROR: variable does not need to be mutable\n+      (mut x, 2) |\n+      (mut x, 3) => {\n+      }\n+      _ => {}\n+    }\n \n     let x = |mut y: int| 10; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: int) {} //~ ERROR: variable does not need to be mutable\n@@ -50,6 +57,15 @@ fn main() {\n         }\n     }\n \n+    match (30, 2) {\n+      (mut x, 1) |\n+      (mut x, 2) |\n+      (mut x, 3) => {\n+        x = 21\n+      }\n+      _ => {}\n+    }\n+\n     let x = |mut y: int| y = 32;\n     fn nothing(mut foo: int) { foo = 37; }\n "}]}