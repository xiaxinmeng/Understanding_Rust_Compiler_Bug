{"sha": "bccc1fd7a1c36078f96441975562e2ffad4b292e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2MxZmQ3YTFjMzYwNzhmOTY0NDE5NzU1NjJlMmZmYWQ0YjI5MmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-22T09:12:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-22T09:12:25Z"}, "message": "Rustup to rustc 1.30.0-nightly (63c75d375 2018-09-21)", "tree": {"sha": "ddff5ba10bf4921cbd9186d1ada122b9d60598c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddff5ba10bf4921cbd9186d1ada122b9d60598c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccc1fd7a1c36078f96441975562e2ffad4b292e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccc1fd7a1c36078f96441975562e2ffad4b292e", "html_url": "https://github.com/rust-lang/rust/commit/bccc1fd7a1c36078f96441975562e2ffad4b292e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccc1fd7a1c36078f96441975562e2ffad4b292e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed9e766aa76e66edcdcccfc1c41d253a40e116c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9e766aa76e66edcdcccfc1c41d253a40e116c1", "html_url": "https://github.com/rust-lang/rust/commit/ed9e766aa76e66edcdcccfc1c41d253a40e116c1"}], "stats": {"total": 122, "additions": 34, "deletions": 88}, "files": [{"sha": "cf731ad89bda7ca1c8354a06040beaf5e8b086fb", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 34, "deletions": 88, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/bccc1fd7a1c36078f96441975562e2ffad4b292e/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/bccc1fd7a1c36078f96441975562e2ffad4b292e/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=bccc1fd7a1c36078f96441975562e2ffad4b292e", "patch": "@@ -1,27 +1,26 @@\n-From 7f8b6fdc01a17a0f963ac05bf9a488c093307090 Mon Sep 17 00:00:00 2001\n+From 5a91929290f0ced810185e9f81bbdb4d5cf53804 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 8 Sep 2018 11:06:28 +0200\n+Date: Sat, 22 Sep 2018 11:09:38 +0200\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n  src/libcore/clone.rs         |  4 +-\n  src/libcore/cmp.rs           |  6 +--\n  src/libcore/default.rs       |  2 -\n  src/libcore/fmt/num.rs       |  6 +--\n- src/libcore/hash/mod.rs      | 20 ---------\n+ src/libcore/hash/mod.rs      | 20 --------\n  src/libcore/iter/range.rs    |  1 -\n  src/libcore/iter/traits.rs   |  2 +-\n- src/libcore/lib.rs           |  2 -\n+ src/libcore/lib.rs           |  4 +-\n  src/libcore/marker.rs        |  4 +-\n  src/libcore/mem.rs           |  2 -\n- src/libcore/num/mod.rs       | 99 ++++++++++++--------------------------------\n- src/libcore/num/wrapping.rs  | 14 +++----\n- src/libcore/ops/arith.rs     | 22 +++++-----\n- src/libcore/ops/bit.rs       | 30 +++++---------\n- src/libcore/tests/iter.rs    | 15 -------\n- src/libcore/tests/num/mod.rs | 18 --------\n- src/libcore/time.rs          | 51 -----------------------\n- 17 files changed, 62 insertions(+), 236 deletions(-)\n+ src/libcore/num/mod.rs       | 99 ++++++++++--------------------------\n+ src/libcore/num/wrapping.rs  | 14 ++---\n+ src/libcore/ops/arith.rs     | 22 ++++----\n+ src/libcore/ops/bit.rs       | 30 ++++-------\n+ src/libcore/tests/iter.rs    | 15 ------\n+ src/libcore/tests/num/mod.rs | 18 -------\n+ 16 files changed, 63 insertions(+), 186 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n index 3b15ba2..de08ce0 100644\n@@ -213,10 +212,10 @@ index 4b2c1aa..ec3991f 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index fb90be8..310f376 100644\n+index 6a3f169..883ae4b 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -152,14 +152,12 @@ mod uint_macros;\n+@@ -151,14 +151,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -231,8 +230,17 @@ index fb90be8..310f376 100644\n  \n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n+@@ -208,7 +206,7 @@ pub mod slice;\n+ pub mod str;\n+ pub mod hash;\n+ pub mod fmt;\n+-pub mod time;\n++//pub mod time;\n+ \n+ pub mod unicode;\n+ \n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index dd57d2d..b75376b 100644\n+index 5572fe1..c8d8144 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n @@ -672,8 +672,8 @@ mod copy_impls {\n@@ -264,7 +272,7 @@ index 1803ade..f7fb0cb 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 5ae984a..63b3754 100644\n+index 12da045..f02bf78 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -105,7 +105,6 @@ nonzero_integers! {\n@@ -275,7 +283,7 @@ index 5ae984a..63b3754 100644\n      NonZeroUsize(usize);\n  }\n  \n-@@ -2282,18 +2281,6 @@ impl i64 {\n+@@ -2285,18 +2284,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -294,7 +302,7 @@ index 5ae984a..63b3754 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4729,17 +4716,6 @@ impl u64 {\n+@@ -4732,17 +4719,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -312,7 +320,7 @@ index 5ae984a..63b3754 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4823,7 +4799,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4826,7 +4802,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -321,7 +329,7 @@ index 5ae984a..63b3754 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4939,30 +4915,25 @@ macro_rules! rev {\n+@@ -4942,30 +4918,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -356,7 +364,7 @@ index 5ae984a..63b3754 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4974,21 +4945,21 @@ mod ptr_try_from_impls {\n+@@ -4977,21 +4948,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -386,7 +394,7 @@ index 5ae984a..63b3754 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4997,24 +4968,24 @@ mod ptr_try_from_impls {\n+@@ -5000,24 +4971,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -419,7 +427,7 @@ index 5ae984a..63b3754 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -5023,24 +4994,20 @@ mod ptr_try_from_impls {\n+@@ -5026,24 +4997,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -448,7 +456,7 @@ index 5ae984a..63b3754 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -5075,7 +5042,7 @@ macro_rules! doit {\n+@@ -5078,7 +5045,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -457,7 +465,7 @@ index 5ae984a..63b3754 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -5243,52 +5210,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -5246,52 +5213,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -935,68 +943,6 @@ index ab96d31..bb5c1d0 100644\n  \n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n-diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index b589202..0f8a2ee 100644\n---- a/src/libcore/time.rs\n-+++ b/src/libcore/time.rs\n-@@ -268,57 +268,6 @@ impl Duration {\n-     #[inline]\n-     pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n- \n--    /// Returns the total number of whole milliseconds contained by this `Duration`.\n--    ///\n--    /// # Examples\n--    ///\n--    /// ```\n--    /// # #![feature(duration_as_u128)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let duration = Duration::new(5, 730023852);\n--    /// assert_eq!(duration.as_millis(), 5730);\n--    /// ```\n--    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n--    #[inline]\n--    pub fn as_millis(&self) -> u128 {\n--        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n--    }\n--\n--    /// Returns the total number of whole microseconds contained by this `Duration`.\n--    ///\n--    /// # Examples\n--    ///\n--    /// ```\n--    /// # #![feature(duration_as_u128)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let duration = Duration::new(5, 730023852);\n--    /// assert_eq!(duration.as_micros(), 5730023);\n--    /// ```\n--    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n--    #[inline]\n--    pub fn as_micros(&self) -> u128 {\n--        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n--    }\n--\n--    /// Returns the total number of nanoseconds contained by this `Duration`.\n--    ///\n--    /// # Examples\n--    ///\n--    /// ```\n--    /// # #![feature(duration_as_u128)]\n--    /// use std::time::Duration;\n--    ///\n--    /// let duration = Duration::new(5, 730023852);\n--    /// assert_eq!(duration.as_nanos(), 5730023852);\n--    /// ```\n--    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n--    #[inline]\n--    pub fn as_nanos(&self) -> u128 {\n--        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n--    }\n--\n-     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n-     /// if overflow occurred.\n-     ///\n -- \n-2.15.2 (Apple Git-101.1)\n+2.17.1 (Apple Git-112)\n "}]}