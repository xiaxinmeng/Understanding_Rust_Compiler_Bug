{"sha": "44a77f67696e855a9841eaf7c7bf7639131cfec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YTc3ZjY3Njk2ZTg1NWE5ODQxZWFmN2M3YmY3NjM5MTMxY2ZlYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-28T22:08:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-28T22:08:49Z"}, "message": "Auto merge of #32267 - durka:inclusive-range-error, r=nrc\n\nmelt the ICE when lowering an impossible range\n\nEmit a fatal error instead of panicking when HIR lowering encounters a range with no `end` point.\n\nThis involved adding a method to wire up `LoweringContext::span_fatal`.\n\nFixes #32245 (cc @nodakai).\n\nr? @nrc", "tree": {"sha": "02c42e937d6c0b11e6bf21151f3328a1169dc7a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02c42e937d6c0b11e6bf21151f3328a1169dc7a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a77f67696e855a9841eaf7c7bf7639131cfec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a77f67696e855a9841eaf7c7bf7639131cfec6", "html_url": "https://github.com/rust-lang/rust/commit/44a77f67696e855a9841eaf7c7bf7639131cfec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a77f67696e855a9841eaf7c7bf7639131cfec6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221c940bf34887bb3f1900b757f8245ad23e8ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/221c940bf34887bb3f1900b757f8245ad23e8ef4", "html_url": "https://github.com/rust-lang/rust/commit/221c940bf34887bb3f1900b757f8245ad23e8ef4"}, {"sha": "861644f2af5421f5aa55d4e7fddfc8dba54bcb70", "url": "https://api.github.com/repos/rust-lang/rust/commits/861644f2af5421f5aa55d4e7fddfc8dba54bcb70", "html_url": "https://github.com/rust-lang/rust/commit/861644f2af5421f5aa55d4e7fddfc8dba54bcb70"}], "stats": {"total": 120, "additions": 88, "deletions": 32}, "files": [{"sha": "20ca62132542f71893a14ad5f6afb46073be1bda", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=44a77f67696e855a9841eaf7c7bf7639131cfec6", "patch": "@@ -348,6 +348,10 @@ impl NodeIdAssigner for Session {\n     fn peek_node_id(&self) -> NodeId {\n         self.next_node_id.get().checked_add(1).unwrap()\n     }\n+\n+    fn diagnostic(&self) -> &errors::Handler {\n+        self.diagnostic()\n+    }\n }\n \n fn split_msg_into_multilines(msg: &str) -> Option<String> {"}, {"sha": "be1841794512b99fe9c88a66f2e7f2d8f58a9fef", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=44a77f67696e855a9841eaf7c7bf7639131cfec6", "patch": "@@ -68,6 +68,7 @@ use std::collections::HashMap;\n use std::iter;\n use syntax::ast::*;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n+use syntax::errors::Handler;\n use syntax::ext::mtwt;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n@@ -140,6 +141,11 @@ impl<'a, 'hir> LoweringContext<'a> {\n             result\n         }\n     }\n+\n+    // Panics if this LoweringContext's NodeIdAssigner is not able to emit diagnostics.\n+    fn diagnostic(&self) -> &Handler {\n+        self.id_assigner.diagnostic()\n+    }\n }\n \n // Utility fn for setting and unsetting the cached id.\n@@ -1289,7 +1295,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                             make_struct(lctx, e, &[\"RangeInclusive\", \"NonEmpty\"],\n                                                  &[(\"start\", e1), (\"end\", e2)]),\n \n-                        _ => panic!(\"impossible range in AST\"),\n+                        _ => panic!(lctx.diagnostic().span_fatal(e.span,\n+                                                                 \"inclusive range with no end\"))\n                     }\n                 });\n             }"}, {"sha": "e096aa9902476e6bbcf1414e4f9e364246fd1e32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=44a77f67696e855a9841eaf7c7bf7639131cfec6", "patch": "@@ -19,6 +19,7 @@ pub use self::PathParameters::*;\n use attr::ThinAttributes;\n use codemap::{Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n+use errors;\n use ext::base;\n use ext::tt::macro_parser;\n use parse::token::InternedString;\n@@ -344,6 +345,10 @@ pub const DUMMY_NODE_ID: NodeId = !0;\n pub trait NodeIdAssigner {\n     fn next_node_id(&self) -> NodeId;\n     fn peek_node_id(&self) -> NodeId;\n+\n+    fn diagnostic(&self) -> &errors::Handler {\n+        panic!(\"this ID assigner cannot emit diagnostics\")\n+    }\n }\n \n /// The AST represents all type param bounds as types."}, {"sha": "dd133d74b4f41d6a9062a8e1a99946084514e1de", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=44a77f67696e855a9841eaf7c7bf7639131cfec6", "patch": "@@ -2072,8 +2072,15 @@ impl<'a> Parser<'a> {\n                     start: Option<P<Expr>>,\n                     end: Option<P<Expr>>,\n                     limits: RangeLimits)\n-                    -> ast::ExprKind {\n-        ExprKind::Range(start, end, limits)\n+                    -> PResult<'a, ast::ExprKind> {\n+        if end.is_none() && limits == RangeLimits::Closed {\n+            Err(self.span_fatal_help(self.span,\n+                                     \"inclusive range with no end\",\n+                                     \"inclusive ranges must be bounded at the end \\\n+                                      (`...b` or `a...b`)\"))\n+        } else {\n+            Ok(ExprKind::Range(start, end, limits))\n+        }\n     }\n \n     pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::ExprKind {\n@@ -2999,12 +3006,12 @@ impl<'a> Parser<'a> {\n                 lhs = self.mk_expr(lhs_span.lo, rhs.span.hi,\n                                    ExprKind::Type(lhs, rhs), None);\n                 continue\n-            } else if op == AssocOp::DotDot {\n-                // If we didn\u2019t have to handle `x..`, it would be pretty easy to generalise\n-                // it to the Fixity::None code.\n+            } else if op == AssocOp::DotDot || op == AssocOp::DotDotDot {\n+                // If we didn\u2019t have to handle `x..`/`x...`, it would be pretty easy to\n+                // generalise it to the Fixity::None code.\n                 //\n-                // We have 2 alternatives here: `x..y` and `x..` The other two variants are\n-                // handled with `parse_prefix_range_expr` call above.\n+                // We have 2 alternatives here: `x..y`/`x...y` and `x..`/`x...` The other\n+                // two variants are handled with `parse_prefix_range_expr` call above.\n                 let rhs = if self.is_at_start_of_range_notation_rhs() {\n                     let rhs = self.parse_assoc_expr_with(op.precedence() + 1,\n                                                          LhsExpr::NotYetParsed);\n@@ -3023,7 +3030,13 @@ impl<'a> Parser<'a> {\n                 } else {\n                     cur_op_span\n                 });\n-                let r = self.mk_range(Some(lhs), rhs, RangeLimits::HalfOpen);\n+                let limits = if op == AssocOp::DotDot {\n+                    RangeLimits::HalfOpen\n+                } else {\n+                    RangeLimits::Closed\n+                };\n+\n+                let r = try!(self.mk_range(Some(lhs), rhs, limits));\n                 lhs = self.mk_expr(lhs_span.lo, rhs_span.hi, r, None);\n                 break\n             }\n@@ -3041,8 +3054,8 @@ impl<'a> Parser<'a> {\n                         this.parse_assoc_expr_with(op.precedence() + 1,\n                             LhsExpr::NotYetParsed)\n                 }),\n-                // the only operator handled here is `...` (the other non-associative operators are\n-                // special-cased above)\n+                // We currently have no non-associative operators that are not handled above by\n+                // the special cases. The code is here only for future convenience.\n                 Fixity::None => self.with_res(\n                     restrictions - Restrictions::RESTRICTION_STMT_EXPR,\n                     |this| {\n@@ -3083,13 +3096,8 @@ impl<'a> Parser<'a> {\n                     let aopexpr = self.mk_assign_op(codemap::respan(cur_op_span, aop), lhs, rhs);\n                     self.mk_expr(lhs_span.lo, rhs_span.hi, aopexpr, None)\n                 }\n-                AssocOp::DotDotDot => {\n-                    let (lhs_span, rhs_span) = (lhs.span, rhs.span);\n-                    let r = self.mk_range(Some(lhs), Some(rhs), RangeLimits::Closed);\n-                    self.mk_expr(lhs_span.lo, rhs_span.hi, r, None)\n-                }\n-                AssocOp::As | AssocOp::Colon | AssocOp::DotDot => {\n-                    self.bug(\"As, Colon or DotDot branch reached\")\n+                AssocOp::As | AssocOp::Colon | AssocOp::DotDot | AssocOp::DotDotDot => {\n+                    self.bug(\"As, Colon, DotDot or DotDotDot branch reached\")\n                 }\n             };\n \n@@ -3133,21 +3141,23 @@ impl<'a> Parser<'a> {\n             // RHS must be parsed with more associativity than the dots.\n             let next_prec = AssocOp::from_token(&tok).unwrap().precedence() + 1;\n             Some(self.parse_assoc_expr_with(next_prec,\n-                                                 LhsExpr::NotYetParsed)\n-            .map(|x|{\n-                hi = x.span.hi;\n-                x\n-            })?)\n+                                            LhsExpr::NotYetParsed)\n+                .map(|x|{\n+                    hi = x.span.hi;\n+                    x\n+                })?)\n          } else {\n             None\n         };\n-        let r = self.mk_range(None,\n-                              opt_end,\n-                              if tok == token::DotDot {\n-                                  RangeLimits::HalfOpen\n-                              } else {\n-                                  RangeLimits::Closed\n-                              });\n+        let limits = if tok == token::DotDot {\n+            RangeLimits::HalfOpen\n+        } else {\n+            RangeLimits::Closed\n+        };\n+\n+        let r = try!(self.mk_range(None,\n+                                   opt_end,\n+                                   limits));\n         Ok(self.mk_expr(lo, hi, r, attrs))\n     }\n "}, {"sha": "94e048fed655eb51b91f277f3adb53042dd3a3a4", "filename": "src/test/compile-fail/impossible_range.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Ftest%2Fcompile-fail%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Ftest%2Fcompile-fail%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpossible_range.rs?ref=44a77f67696e855a9841eaf7c7bf7639131cfec6", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure that invalid ranges generate an error during HIR lowering, not an ICE\n+\n+#![feature(inclusive_range_syntax)]\n+\n+pub fn main() {\n+    ..;\n+    0..;\n+    ..1;\n+    0..1;\n+\n+    ...; //~ERROR inclusive range with no end\n+         //~^HELP bounded at the end\n+    0...; //~ERROR inclusive range with no end\n+          //~^HELP bounded at the end\n+    ...1;\n+    0...1;\n+}\n+\n+"}, {"sha": "ce97372c668451ab68a2a8a0a39a82059fe1820a", "filename": "src/test/parse-fail/range_inclusive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a77f67696e855a9841eaf7c7bf7639131cfec6/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs?ref=44a77f67696e855a9841eaf7c7bf7639131cfec6", "patch": "@@ -13,6 +13,7 @@\n #![feature(inclusive_range_syntax, inclusive_range)]\n \n pub fn main() {\n-    for _ in 1... {}\n-} //~ ERROR expected one of\n+    for _ in 1... {} //~ERROR inclusive range with no end\n+                     //~^HELP bounded at the end\n+}\n "}]}