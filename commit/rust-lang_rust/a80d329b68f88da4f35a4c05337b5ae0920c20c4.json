{"sha": "a80d329b68f88da4f35a4c05337b5ae0920c20c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MGQzMjliNjhmODhkYTRmMzVhNGMwNTMzN2I1YWUwOTIwYzIwYzQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-13T14:07:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-31T14:48:20Z"}, "message": "Don't gate methods `Fn(Mut,Once)::call(mut,once)` with feature `unboxed_closures`\n\nThey are already gated with feature `fn_traits`", "tree": {"sha": "a591681285c5913cc37198ee205bb6278aea1e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a591681285c5913cc37198ee205bb6278aea1e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a80d329b68f88da4f35a4c05337b5ae0920c20c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a80d329b68f88da4f35a4c05337b5ae0920c20c4", "html_url": "https://github.com/rust-lang/rust/commit/a80d329b68f88da4f35a4c05337b5ae0920c20c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a80d329b68f88da4f35a4c05337b5ae0920c20c4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724f811794bf30141922eb9ff26cd9ce7febe64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/724f811794bf30141922eb9ff26cd9ce7febe64e", "html_url": "https://github.com/rust-lang/rust/commit/724f811794bf30141922eb9ff26cd9ce7febe64e"}], "stats": {"total": 302, "additions": 20, "deletions": 282}, "files": [{"sha": "21387a1aa95543031fa403d3893c2a102f9afed1", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -49,7 +49,6 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(step_by)]\n-#![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag)]"}, {"sha": "9428b4096bfeceaa74fdd5ea61d50f1f518bbd7e", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -31,7 +31,6 @@\n #![feature(step_by)]\n #![feature(test)]\n #![feature(try_from)]\n-#![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n "}, {"sha": "f49d47fb0815407827c40bd6bd376d9ed35b5d1c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -31,7 +31,6 @@\n #![feature(set_stdio)]\n #![feature(staged_api)]\n #![feature(question_mark)]\n-#![feature(unboxed_closures)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "bd2c05ba66d47188d77729c08c5cf874832c79b9", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -27,33 +27,8 @@ use rustc::hir;\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called)\n pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: DefId) {\n-    let tcx = ccx.tcx;\n-    let did = Some(trait_id);\n-    let li = &tcx.lang_items;\n-\n-    if did == li.drop_trait() {\n-        span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\");\n-    } else if !tcx.sess.features.borrow().unboxed_closures {\n-        // the #[feature(unboxed_closures)] feature isn't\n-        // activated so we need to enforce the closure\n-        // restrictions.\n-\n-        let method = if did == li.fn_trait() {\n-            \"call\"\n-        } else if did == li.fn_mut_trait() {\n-            \"call_mut\"\n-        } else if did == li.fn_once_trait() {\n-            \"call_once\"\n-        } else {\n-            return // not a closure method, everything is OK.\n-        };\n-\n-        struct_span_err!(tcx.sess, span, E0174,\n-                         \"explicit use of unboxed closure method `{}` is experimental\",\n-                         method)\n-            .help(\"add `#![feature(unboxed_closures)]` to the crate \\\n-                  attributes to enable\")\n-            .emit();\n+    if ccx.tcx.lang_items.drop_trait() == Some(trait_id) {\n+        span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\");\n     }\n }\n "}, {"sha": "cd2259a283469279df6ddd8286434ff76ef2ffa2", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -1944,89 +1944,6 @@ To learn more about traits, take a look at the Book:\n https://doc.rust-lang.org/book/traits.html\n \"##,\n \n-E0174: r##\"\n-This error occurs because of the explicit use of unboxed closure methods\n-that are an experimental feature in current Rust version.\n-\n-Example of erroneous code:\n-\n-```compile_fail\n-fn foo<F: Fn(&str)>(mut f: F) {\n-    f.call((\"call\",));\n-    // error: explicit use of unboxed closure method `call`\n-    f.call_mut((\"call_mut\",));\n-    // error: explicit use of unboxed closure method `call_mut`\n-    f.call_once((\"call_once\",));\n-    // error: explicit use of unboxed closure method `call_once`\n-}\n-\n-fn bar(text: &str) {\n-    println!(\"Calling {} it works!\", text);\n-}\n-\n-fn main() {\n-    foo(bar);\n-}\n-```\n-\n-Rust's implementation of closures is a bit different than other languages.\n-They are effectively syntax sugar for traits `Fn`, `FnMut` and `FnOnce`.\n-To understand better how the closures are implemented see here:\n-https://doc.rust-lang.org/book/closures.html#closure-implementation\n-\n-To fix this you can call them using parenthesis, like this: `foo()`.\n-When you execute the closure with parenthesis, under the hood you are executing\n-the method `call`, `call_mut` or `call_once`. However, using them explicitly is\n-currently an experimental feature.\n-\n-Example of an implicit call:\n-\n-```\n-fn foo<F: Fn(&str)>(f: F) {\n-    f(\"using ()\"); // Calling using () it works!\n-}\n-\n-fn bar(text: &str) {\n-    println!(\"Calling {} it works!\", text);\n-}\n-\n-fn main() {\n-    foo(bar);\n-}\n-```\n-\n-To enable the explicit calls you need to add `#![feature(unboxed_closures)]`.\n-\n-This feature is still unstable so you will also need to add\n-`#![feature(fn_traits)]`.\n-More details about this issue here:\n-https://github.com/rust-lang/rust/issues/29625\n-\n-Example of use:\n-\n-```\n-#![feature(fn_traits)]\n-#![feature(unboxed_closures)]\n-\n-fn foo<F: Fn(&str)>(mut f: F) {\n-    f.call((\"call\",)); // Calling 'call' it works!\n-    f.call_mut((\"call_mut\",)); // Calling 'call_mut' it works!\n-    f.call_once((\"call_once\",)); // Calling 'call_once' it works!\n-}\n-\n-fn bar(text: &str) {\n-    println!(\"Calling '{}' it works!\", text);\n-}\n-\n-fn main() {\n-    foo(bar);\n-}\n-```\n-\n-To see more about closures take a look here:\n-https://doc.rust-lang.org/book/closures.html`\n-\"##,\n-\n E0178: r##\"\n In types, the `+` type operator has low precedence, so it is often necessary\n to use parentheses.\n@@ -4049,6 +3966,7 @@ register_diagnostics! {\n     E0167,\n //  E0168,\n //  E0173, // manual implementations of unboxed closure traits are experimental\n+//  E0174,\n     E0182,\n     E0183,\n //  E0187, // can't infer the kind of the closure"}, {"sha": "de6ce798d63542c3d7431f2e182467e538c8144b", "filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n-#![feature(unboxed_closures)]\n #![deny(hr_lifetime_in_assoc_type)]\n \n trait Foo<'a> {"}, {"sha": "6ba09acc0e799e579496d364c9cf52c0d8eab5b3", "filename": "src/test/compile-fail/associated-types/cache/wasm-issue-32330.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -13,7 +13,6 @@\n \n #![allow(dead_code, unused_variables)]\n #![deny(hr_lifetime_in_assoc_type)]\n-#![feature(unboxed_closures)]\n \n use std::str::Chars;\n "}, {"sha": "e4ae565fe92f5296f4e66e12cdb907a10fc3e5ca", "filename": "src/test/compile-fail/borrowck/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // Ensure that invoking a closure counts as a unique immutable borrow\n \n-#![feature(unboxed_closures)]\n-\n type Fn<'a> = Box<FnMut() + 'a>;\n \n struct Test<'a> {"}, {"sha": "0f9829ab259a922a916bf006e04f6d0c665bfeb7", "filename": "src/test/compile-fail/borrowck/borrowck-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unboxed-closures.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n-\n fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable"}, {"sha": "253d1633b1c4eb95c3e12036bf3312a3cbcff354", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-method-calls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,9 +11,9 @@\n #![allow(dead_code)]\n \n fn foo<F: Fn()>(mut f: F) {\n-    f.call(()); //~ ERROR explicit use of unboxed closure method `call`\n-    f.call_mut(()); //~ ERROR explicit use of unboxed closure method `call_mut`\n-    f.call_once(()); //~ ERROR explicit use of unboxed closure method `call_once`\n+    f.call(()); //~ ERROR use of unstable library feature 'fn_traits'\n+    f.call_mut(()); //~ ERROR use of unstable library feature 'fn_traits'\n+    f.call_once(()); //~ ERROR use of unstable library feature 'fn_traits'\n }\n \n fn main() {}"}, {"sha": "902b3c1774c1d638c1a39435ffef5ee3f083fea4", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-ufcs-calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,10 +10,10 @@\n \n #![allow(dead_code)]\n \n-fn foo<F: Fn()>(mut f: F, mut g: F) {\n-    Fn::call(&g, ()); //~ ERROR explicit use of unboxed closure method `call`\n-    FnMut::call_mut(&mut g, ()); //~ ERROR explicit use of unboxed closure method `call_mut`\n-    FnOnce::call_once(g, ()); //~ ERROR explicit use of unboxed closure method `call_once`\n+fn foo<F: Fn()>(mut f: F) {\n+    Fn::call(&f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+    FnMut::call_mut(&mut f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+    FnOnce::call_once(f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n }\n \n fn main() {}"}, {"sha": "e01a0412cef4efe3081f6a512f91b4968e59a2db", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n #![feature(box_syntax)]\n \n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}"}, {"sha": "e16c58b8a6c1ac1033e14332b30bb62c7dc381bb", "filename": "src/test/compile-fail/issue-16939.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n-\n // Make sure we don't ICE when making an overloaded call with the\n // wrong arity.\n "}, {"sha": "0ec05b941a960dc1b7dc40bb9710272762de9e5c", "filename": "src/test/compile-fail/issue-17033.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n-\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n              //~| expected type `&mut ()`"}, {"sha": "49435f83ce3c454ce473481213bdf138daa76008", "filename": "src/test/compile-fail/issue-17545.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n     bar.call((\n         &(), //~ ERROR borrowed value does not live long enough"}, {"sha": "5e69553d3a48532e1a78b6a50a60f4e9441cf98e", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::marker;\n \n struct B<T>(marker::PhantomData<T>);"}, {"sha": "94eab97c42a197a6e0887f0c6b3b62d696dad908", "filename": "src/test/compile-fail/issue-18532.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,8 +12,6 @@\n // when a type error or unconstrained type variable propagates\n // into it.\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     (return)((),());\n     //~^ ERROR the type of this value must be known"}, {"sha": "93d95ca0b0f945b7f14d00e3e27693f0e6b0b276", "filename": "src/test/compile-fail/issue-19521.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     \"\".homura()(); //~ ERROR no method named `homura` found\n }"}, {"sha": "beeb7da6d389953165804e91c70631787ab6faf8", "filename": "src/test/compile-fail/issue-19707.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier"}, {"sha": "9a1b5d9b83d2c27a910164b0d687567dca23b43f", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {"}, {"sha": "df9a3519d5d6152633f8e17b2d4000779105d69f", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,8 +12,6 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n-#![feature(unboxed_closures)]\n-\n struct R<'a> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that"}, {"sha": "8ec6036762f4886b74a90adfac129eb7ec35e533", "filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n-\n use std::ops::FnMut;\n \n fn main() {"}, {"sha": "cf41fad270839ecf7938bef47edeb2fe7c54c327", "filename": "src/test/compile-fail/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn with_int(f: &mut FnMut(&isize)) {\n }\n "}, {"sha": "99e5cc0315383f6c44435929742e963baa9fabb6", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // Test that closures cannot subvert aliasing restrictions\n \n-#![feature(overloaded_calls, unboxed_closures)]\n-\n fn main() {\n     // Unboxed closure case\n     {"}, {"sha": "8ade8b239b3b3e417d2575be1a9411127fa130a4", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,\n }"}, {"sha": "2d99837422955926356bc7dea7f3cf4402accbd6", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n // Test that even unboxed closures that are capable of mutating their\n // environment cannot mutate captured variables that have not been\n // declared mutable (#18335)"}, {"sha": "1c86dda3378a96fa76a133286bdd1a084ee3fcba", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n // Test that an unboxed closure that captures a free variable by\n // reference cannot escape the region of that variable.\n fn main() {"}, {"sha": "465bddd060d77166fae1e66567c34401d49c8ca3", "filename": "src/test/compile-fail/unboxed-closure-sugar-nonexistent-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn f<F:Nonexist(isize) -> isize>(x: F) {} //~ ERROR trait `Nonexist` is not in scope\n \n type Typedef = isize;"}, {"sha": "ad7e6784a0a414fb4cbc624352a4580ee6ffc068", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n // Test that an unboxed closure that mutates a free variable will\n // cause borrow conflicts.\n "}, {"sha": "5436a855ee786debc86fd428a8d7f945e2b7c4b5", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,8 +11,6 @@\n // That a closure whose expected argument types include two distinct\n // bound regions.\n \n-#![feature(unboxed_closures)]\n-\n use std::cell::Cell;\n \n fn doit<T,F>(val: T, f: &F)"}, {"sha": "62f6ee56ca5de44407cfa890622c2f28659abb62", "filename": "src/test/compile-fail/unboxed-closures-infer-explicit-call-too-early.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-explicit-call-too-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-explicit-call-too-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-explicit-call-too-early.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let mut zero = || {};\n     let () = zero.call_mut(());"}, {"sha": "dba4c8cc2e9e7ac5ce6dd9334f2561e75f765999", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n pub fn main() {"}, {"sha": "2b0a8baf4f23d61be10b54b08cde23f5d69bf33e", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n unsafe fn square(x: &isize) -> isize { (*x) * (*x) }"}, {"sha": "f6ba25f43685c9d24784c0346a074a55efeff5ec", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n extern \"C\" fn square(x: &isize) -> isize { (*x) * (*x) }"}, {"sha": "9d907ffc17f2be34a96b99afa3a4059d6fffedbb", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n unsafe fn square(x: isize) -> isize { x * x }"}, {"sha": "b415546faeac7af89e3ca093096de84144216049", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -40,7 +40,7 @@\n // lldb-check:[...]$2 = 5\n \n #![allow(unused_variables)]\n-#![feature(unboxed_closures, box_syntax)]\n+#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n "}, {"sha": "e60f964dd095ebc6239e285ce1a77c89aaf6771b", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -69,7 +69,7 @@\n // lldb-command:print *owned\n // lldb-check:[...]$9 = 6\n \n-#![feature(unboxed_closures, box_syntax)]\n+#![feature(box_syntax)]\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "c364240f4ad69f5ddf7061ecc6bbef98d2a3f48e", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,9 +12,6 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-\n-#![feature(unboxed_closures)]\n-\n trait iterable<A> {\n     fn iterate<F>(&self, blk: F) -> bool where F: FnMut(&A) -> bool;\n }"}, {"sha": "3e34367a215826e37caa2b96c11c713a28ca56db", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -14,7 +14,7 @@\n // for `ByRef`. The right answer was to consider the result ambiguous\n // until more type information was available.\n \n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n #![no_implicit_prelude]\n \n use std::marker::Sized;"}, {"sha": "ef1225d39a70e91aa036c696be9385397c9b437f", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -14,7 +14,7 @@\n // for `ByRef`. The right answer was to consider the result ambiguous\n // until more type information was available.\n \n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n #![no_implicit_prelude]\n \n use std::marker::Sized;"}, {"sha": "c247c0223fcbf249ffe2eafacd1148c2cff6e6c3", "filename": "src/test/run-pass/auxiliary/issue-18711.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-18711.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n #![crate_type = \"rlib\"]\n \n pub fn inner<F>(f: F) -> F {"}, {"sha": "dc9798a2101686325471d52153b242022797f486", "filename": "src/test/run-pass/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::Add;\n \n #[inline]"}, {"sha": "30a11ca2536d379c65f8b35efe81d3b56c841d09", "filename": "src/test/run-pass/bare-fn-implements-fn-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_f<F:FnMut()>(mut f: F) {"}, {"sha": "158594df8cac01865530b8a7a8fa7eeef510475f", "filename": "src/test/run-pass/borrowck/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n \n pub fn main() {\n     let bar: Box<_> = box 3;"}, {"sha": "e8a9dc7b8f368b69d01f4e694dedc6dd3b39361d", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n     for val in x {\n         f(val)"}, {"sha": "5268e855d5fd8866f26a9a3f75439c851331ca5e", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n use std::sync::mpsc::channel;\n \n fn foo<F:FnOnce()+Send>(blk: F) {"}, {"sha": "a37733bdc2df8c4be5d23ac001167a781ce9acc6", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,8 +11,6 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-#![feature(unboxed_closures)]\n-\n fn call_it<F>(f: F)\n     where F : FnOnce(String) -> String\n {"}, {"sha": "3f6f1aa6b5fe394ebff4694c4f4e63ea9c90c840", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures, std_misc)]\n+#![feature(std_misc)]\n \n /**\n    A somewhat reduced test case to expose some Valgrind issues."}, {"sha": "cdffaef66eb2f68e6fef22f6786e0d5a2a530b93", "filename": "src/test/run-pass/hrtb-parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -13,7 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n "}, {"sha": "46ea256296194590c6b668966f1c76b73f94016e", "filename": "src/test/run-pass/hrtb-precedence-of-plus-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n // Test that `F : Fn(isize) -> isize + Send` is interpreted as two\n // distinct bounds on `F`.\n "}, {"sha": "d93e52a8f5fbb10d45623c13c9521710f6b5ac43", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n // Test that `Fn(isize) -> isize + 'static` parses as `(Fn(isize) -> isize) +\n // 'static` and not `Fn(isize) -> (isize + 'static)`. The latter would"}, {"sha": "5b9d4a834d872385f0c7c63239f7d56a637895d9", "filename": "src/test/run-pass/hrtb-trait-object-paren-notation.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n // A basic test of using a higher-ranked trait bound.\n \n trait FnLike<A,R> {"}, {"sha": "6666b61a4a725a6396a22b738ee208454dab1824", "filename": "src/test/run-pass/hrtb-unboxed-closure-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // Test HRTB used with the `Fn` trait.\n \n-#![feature(unboxed_closures)]\n-\n fn foo<F:Fn(&isize)>(f: F) {\n     let x = 22;\n     f(&x);"}, {"sha": "fedd94e22e7bd9831f526a6dfac5437a1b9889a9", "filename": "src/test/run-pass/issue-10718.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-10718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-10718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10718.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn f<F:FnOnce()>(p: F) {\n     p();\n }"}, {"sha": "e91569f8b245052ac81da24189d95eea8121b8e2", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(unboxed_closures)]\n-\n use std::thread;\n use std::mem;\n "}, {"sha": "0fd99650284895297a2419795aeb510ec7695471", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // ignore-pretty\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>"}, {"sha": "9ec5910c2f67938c79803351a73c0d8816a0de94", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,7 +12,6 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n-#![feature(unboxed_closures)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "a9aa4cdd4f69d9b1f549bb4b965e29cba7417095", "filename": "src/test/run-pass/issue-17816.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17816.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::marker::PhantomData;\n \n fn main() {"}, {"sha": "cea0beaf5f076f2d6f08fb070b36a14d0db93429", "filename": "src/test/run-pass/issue-18652.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18652.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,9 +12,6 @@\n // once closure as an optimization by trans.  This used to hit an\n // incorrect assert.\n \n-\n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let x = 2u8;\n     let y = 3u8;"}, {"sha": "b569dbc8062e463f056031aacb0a304459f141ef", "filename": "src/test/run-pass/issue-18685.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18685.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -13,8 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n trait Tr {\n     fn foo(&self);\n "}, {"sha": "8239d74d6df12cf565f3e5e233d9a79a741bf56f", "filename": "src/test/run-pass/issue-18711.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18711.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -13,8 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n // aux-build:issue-18711.rs\n extern crate issue_18711 as issue;\n "}, {"sha": "8d169917cad92fbc657b00184da127646f613d2a", "filename": "src/test/run-pass/issue-19127.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-19127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-19127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19127.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn foo<T, F: FnOnce(T) -> T>(f: F) {}\n fn id<'a>(input: &'a u8) -> &'a u8 { input }\n "}, {"sha": "ca2098138ef0c74a387df4ea626694b8c8d721ce", "filename": "src/test/run-pass/issue-19135.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19135.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::marker::PhantomData;\n \n #[derive(Debug)]"}, {"sha": "7ff684a5ef392912b1ab64020316a4a9b24885de", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, unboxed_closures, fn_traits)]\n+#![feature(rustc_attrs, fn_traits)]\n \n #[rustc_mir]\n fn test1(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {"}, {"sha": "0de6fbc91cc6b4e9af75fd5508fef6c6e147d3aa", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -16,7 +16,6 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax, std_misc)]\n-#![feature(unboxed_closures)]\n \n use std::sync::Arc;\n use std::sync::mpsc::channel;"}, {"sha": "c29fb5e86f51d54311b2db332b85c7a64910330d", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -12,7 +12,7 @@\n // Also acts as a regression test for an ICE (issue #19791)\n \n \n-#![feature(unboxed_closures, core)]\n+#![feature(core)]\n \n use std::any::{Any, TypeId};\n "}, {"sha": "201500d0c6289744034a0e419a14c8b4682d22cf", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n \n fn a<F:Fn(isize, isize) -> isize>(f: F) -> isize {\n     f(1, 2)"}, {"sha": "23ec0cb5f60f0bee30ad8cb9a774a605c81e9001", "filename": "src/test/run-pass/unboxed-closures-blanket-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn-mut.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,7 @@\n \n // Test that you can supply `&F` where `F: FnMut()`.\n \n-\n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n \n fn a<F:FnMut() -> i32>(mut f: F) -> i32 {\n     f()"}, {"sha": "2aa48e7d2add37e3616249fe904a45b8c2f17a13", "filename": "src/test/run-pass/unboxed-closures-blanket-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,7 @@\n \n // Test that you can supply `&F` where `F: Fn()`.\n \n-\n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n \n fn a<F:Fn() -> i32>(f: F) -> i32 {\n     f()"}, {"sha": "069f26841d2cd7139f2569e434e5f8205de545bd", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "b251215909a433319ecf881c7267e770d9532ed3", "filename": "src/test/run-pass/unboxed-closures-by-ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n // Test by-ref capture of environment in unboxed closure types\n \n fn call_fn<F: Fn()>(f: F) {"}, {"sha": "56c53bcafcede749807f22e2e9657b588ce8675c", "filename": "src/test/run-pass/unboxed-closures-call-fn-autoderef.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-fn-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-fn-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-fn-autoderef.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,9 +10,6 @@\n \n // Test that the call operator autoderefs when calling a bounded type parameter.\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_with_2(x: &fn(isize) -> isize) -> isize"}, {"sha": "63667ec11d66920d2a62dedb92da27b990cf714f", "filename": "src/test/run-pass/unboxed-closures-call-sugar-autoderef.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-autoderef.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,9 +10,6 @@\n \n // Test that the call operator autoderefs when calling a bounded type parameter.\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_with_2<F>(x: &mut F) -> isize"}, {"sha": "a92fb05306f483081104e601b7089c61224a140d", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Test that the call operator autoderefs when calling to an object type.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "5dd2343cfd1dd43bf67c4b39e93954e77de20efb", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "0b85916d224108922dc2b3bd735cf5464def66ce", "filename": "src/test/run-pass/unboxed-closures-counter-not-moved.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,7 +10,6 @@\n \n // Test that we mutate a counter on the stack only when we expect to.\n \n-\n fn call<F>(f: F) where F : FnOnce() {\n     f();\n }"}, {"sha": "c8da4a6992a1db92e7605f53b361b53488f76947", "filename": "src/test/run-pass/unboxed-closures-direct-sugary-call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let mut unboxed = || {};\n     unboxed();"}, {"sha": "57f2f87e24697874278b9c9a213aa9f348d334c4", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,9 +11,6 @@\n // A battery of tests to ensure destructors of unboxed closure environments\n // run at the right times.\n \n-\n-#![feature(unboxed_closures)]\n-\n static mut DROP_COUNT: usize = 0;\n \n fn drop_count() -> usize {"}, {"sha": "eddb6080d17be64c26920c3f6a20613db960ad2e", "filename": "src/test/run-pass/unboxed-closures-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,10 +10,6 @@\n \n // Checks that extern fn pointers implement the full range of Fn traits.\n \n-\n-#![feature(unboxed_closures)]\n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n fn square(x: isize) -> isize { x * x }"}, {"sha": "f90aced3dbe334efc41ef57df279642fc3391088", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Checks that the Fn trait hierarchy rules permit\n // any Fn trait to be used where Fn is implemented.\n \n-\n #![feature(unboxed_closures, fn_traits)]\n \n use std::ops::{Fn,FnMut,FnOnce};"}, {"sha": "0a977cef442ee68b6ab2420766421a4995110818", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Checks that the Fn trait hierarchy rules permit\n // FnMut or FnOnce to be used where FnMut is implemented.\n \n-\n #![feature(unboxed_closures, fn_traits)]\n \n struct S;"}, {"sha": "01c81ef98d505c84ad5aefa701b8501afd87b8f1", "filename": "src/test/run-pass/unboxed-closures-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_it<F:FnMut(i32,i32)->i32>(y: i32, mut f: F) -> i32 {"}, {"sha": "17833033492d09b064c233da18a6649c8e0d9912", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut-calling-fnmut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to infer a suitable kind for this closure\n // that is just called (`FnMut`).\n \n-\n fn main() {\n     let mut counter = 0;\n "}, {"sha": "794527249bffaaf55d9da303bbd046c70de181e9", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-move.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to infer a suitable kind for this `move`\n // closure that is just called (`FnMut`).\n \n-\n fn main() {\n     let mut counter = 0;\n "}, {"sha": "67f36b9a9203cfa0fe04b69df050ef7eb7665151", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to infer a suitable kind for this closure\n // that is just called (`FnMut`).\n \n-\n fn main() {\n     let mut counter = 0;\n "}, {"sha": "c04df7ed5f87126c011f3555ae5a1b53c5bdf8a1", "filename": "src/test/run-pass/unboxed-closures-infer-kind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,9 +11,6 @@\n // Test that we can infer the \"kind\" of an unboxed closure based on\n // the expected type.\n \n-\n-#![feature(unboxed_closures)]\n-\n // Test by-ref capture of environment in unboxed closure types\n \n fn call_fn<F: Fn()>(f: F) {"}, {"sha": "1401fe7470b0a1d71f0772e2d9217414625cdbde", "filename": "src/test/run-pass/unboxed-closures-infer-upvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-upvar.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Test that the type variable in the type(`Vec<_>`) of a closed over\n // variable does not interfere with type inference.\n \n-\n fn f<F: FnMut()>(mut f: F) {\n     f();\n }"}, {"sha": "a55b0a0185e615200c4dfea5e7ec4f96c3a5be12", "filename": "src/test/run-pass/unboxed-closures-move-mutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n #![deny(unused_mut)]\n \n // Test that mutating a mutable upvar in a capture-by-value unboxed"}, {"sha": "99663646254e73969c9a22bfeabbb40d26749540", "filename": "src/test/run-pass/unboxed-closures-move-some-upvars-in-by-ref-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,7 +11,6 @@\n // Test that in a by-ref once closure we move some variables even as\n // we capture others by mutable reference.\n \n-\n fn call<F>(f: F) where F : FnOnce() {\n     f();\n }"}, {"sha": "429afb95248ce2024ebfd7fd17cceecb9ce855d4", "filename": "src/test/run-pass/unboxed-closures-simple.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n pub fn main() {"}, {"sha": "3ed055a7884ebb7c71ba7f40f2bfef4bca4b09c0", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -11,9 +11,6 @@\n // Ensures that single-word environments work right in unboxed closures.\n // These take a different path in codegen.\n \n-\n-#![feature(unboxed_closures)]\n-\n fn a<F:Fn(isize, isize) -> isize>(f: F) -> isize {\n     f(1, 2)\n }"}, {"sha": "c13e9513ce33a00c379ff23823c322dd41b13b57", "filename": "src/test/run-pass/unboxed-closures-static-call-fn-once.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let onetime = |x| x;\n     onetime(0);"}, {"sha": "b7d367f235381bc88721dce80562ffacdfa113a3", "filename": "src/test/run-pass/unboxed-closures-sugar-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,9 +10,7 @@\n \n // Test unboxed closure sugar used in object types.\n \n-\n #![allow(dead_code)]\n-#![feature(unboxed_closures)]\n \n struct Foo<T,U> {\n     t: T, u: U"}, {"sha": "40071ec9754e2617bcda034310e6c48b16ca29d6", "filename": "src/test/run-pass/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -19,9 +19,6 @@\n //\n // compile-flags: -g\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ptr;\n \n pub fn replace_map<'a, T, F>(src: &mut T, prod: F) where F: FnOnce(T) -> T {"}, {"sha": "9e6a7cce1fd2a9ad77d17117b403e0996f628543", "filename": "src/test/run-pass/unboxed-closures-zero-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let mut zero = || {};\n     let () = zero();"}, {"sha": "8a775caaac6d2248f654f52d160aaab63c2c5446", "filename": "src/test/run-pass/where-clauses-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d329b68f88da4f35a4c05337b5ae0920c20c4/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs?ref=a80d329b68f88da4f35a4c05337b5ae0920c20c4", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n struct Bencher;\n \n // ICE"}]}