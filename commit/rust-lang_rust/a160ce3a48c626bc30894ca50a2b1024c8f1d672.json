{"sha": "a160ce3a48c626bc30894ca50a2b1024c8f1d672", "node_id": "C_kwDOAAsO6NoAKGExNjBjZTNhNDhjNjI2YmMzMDg5NGNhNTBhMmIxMDI0YzhmMWQ2NzI", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-10T21:22:52Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-14T07:23:32Z"}, "message": "change usages of impl_trait_ref to bound_impl_trait_ref", "tree": {"sha": "362c00f0b2ad79c598c1dc4ef05fc5a2880eacdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362c00f0b2ad79c598c1dc4ef05fc5a2880eacdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a160ce3a48c626bc30894ca50a2b1024c8f1d672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a160ce3a48c626bc30894ca50a2b1024c8f1d672", "html_url": "https://github.com/rust-lang/rust/commit/a160ce3a48c626bc30894ca50a2b1024c8f1d672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a160ce3a48c626bc30894ca50a2b1024c8f1d672/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb631a09ccfa9b054ec81ec445436c7e1af9be0", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb631a09ccfa9b054ec81ec445436c7e1af9be0", "html_url": "https://github.com/rust-lang/rust/commit/efb631a09ccfa9b054ec81ec445436c7e1af9be0"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "6b2b18fff76e0564f79c340842c6dac7b995ddbf", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -247,11 +247,11 @@ fn check_hash_peq<'tcx>(\n                     return;\n                 }\n \n-                let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n+                let trait_ref = cx.tcx.bound_impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n \n                 // Only care about `impl PartialEq<Foo> for Foo`\n                 // For `impl PartialEq<B> for A, input_types is [A, B]\n-                if trait_ref.substs.type_at(1) == ty {\n+                if trait_ref.subst_identity().substs.type_at(1) == ty {\n                     span_lint_and_then(\n                         cx,\n                         DERIVED_HASH_WITH_MANUAL_EQ,\n@@ -295,11 +295,11 @@ fn check_ord_partial_ord<'tcx>(\n                     return;\n                 }\n \n-                let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n+                let trait_ref = cx.tcx.bound_impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n \n                 // Only care about `impl PartialOrd<Foo> for Foo`\n                 // For `impl PartialOrd<B> for A, input_types is [A, B]\n-                if trait_ref.substs.type_at(1) == ty {\n+                if trait_ref.subst_identity().substs.type_at(1) == ty {\n                     let mess = if partial_ord_is_automatically_derived {\n                         \"you are implementing `Ord` explicitly but have derived `PartialOrd`\"\n                     } else {"}, {"sha": "a8085122ccf95cdbe990f7f862b566ba14668b17", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -55,8 +55,8 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n-            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id());\n+            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.skip_binder().def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n             }"}, {"sha": "97d414bfa95e434bc4fa77408a1ee829e2c15294", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(into_trait_seg) = hir_trait_ref.path.segments.last()\n             // `impl Into<target_ty> for self_ty`\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n-            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+            && let Some(middle_trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id()).map(ty::EarlyBinder::subst_identity)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n             && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Alias(ty::Opaque, _))\n         {"}, {"sha": "37e33529a9a60ca1d9bf8192511630ec355059a9", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if name.ident.as_str() == \"MIN\";\n                             if let Some(const_id) = cx.typeck_results().type_dependent_def_id(cond_num_val.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(const_id);\n-                            if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n+                            if let None = cx.tcx.bound_impl_trait_ref(impl_id); // An inherent impl\n                             if cx.tcx.type_of(impl_id).is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if name.ident.as_str() == \"min_value\";\n                             if let Some(func_id) = cx.typeck_results().type_dependent_def_id(func.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(func_id);\n-                            if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n+                            if let None = cx.tcx.bound_impl_trait_ref(impl_id); // An inherent impl\n                             if cx.tcx.type_of(impl_id).is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)"}, {"sha": "16a25a98800de191643fcbf674c4da0273db7056", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -53,7 +53,7 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_vec\" => cx\n             .tcx\n             .impl_of_method(method_def_id)\n-            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.bound_impl_trait_ref(impl_did).is_none())\n             .is_some(),\n         _ => false,\n     }"}, {"sha": "dba0663467b7d28e83fa2a66e87ce0df9f4edbc8", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n         if count <= 1;\n         if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n-        if cx.tcx.impl_trait_ref(impl_id).is_none();\n+        if cx.tcx.bound_impl_trait_ref(impl_id).is_none();\n         let self_ty = cx.tcx.type_of(impl_id);\n         if self_ty.is_slice() || self_ty.is_str();\n         then {"}, {"sha": "d0c99b352452faa413e18c131d8e4f325add219b", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -175,7 +175,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n         if let Some(cid) = cx.tcx.associated_item(impl_item.owner_id).impl_container(cx.tcx) {\n-            if cx.tcx.impl_trait_ref(cid).is_some() {\n+            if cx.tcx.bound_impl_trait_ref(cid).is_some() {\n                 return;\n             }\n         } else {"}, {"sha": "0594fb175458d41d3a88874eca41075e868dff3f", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         let container_id = assoc_item.container_id(cx.tcx);\n         let trait_def_id = match assoc_item.container {\n             TraitContainer => Some(container_id),\n-            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.def_id),\n+            ImplContainer => cx.tcx.bound_impl_trait_ref(container_id).map(|t| t.skip_binder().def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {"}, {"sha": "9c112ade948ff9a40dcca33005cd53d5222108b0", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -89,8 +89,8 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if send_trait == trait_id;\n             if hir_impl.polarity == ImplPolarity::Positive;\n-            if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n-            if let self_ty = ty_trait_ref.self_ty();\n+            if let Some(ty_trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id());\n+            if let self_ty = ty_trait_ref.subst_identity().self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n             then {\n                 let mut non_send_fields = Vec::new();"}, {"sha": "82b1716a216e6c4b3f34268a109cd69b48f6c923", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -244,7 +244,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n             })) => {\n                 #[allow(trivial_casts)]\n                 if let Some(Node::Item(item)) = get_parent_node(cx.tcx, owner_id.into())\n-                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+                    && let Some(trait_ref) = cx.tcx.bound_impl_trait_ref(item.owner_id.to_def_id()).map(|t| t.subst_identity())\n                     && let Some(trait_item_id) = cx.tcx.associated_item(owner_id).trait_item_def_id\n                 {\n                     ("}, {"sha": "9f31a13aa984bed491ac0cb08312a81b50789aad", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a160ce3a48c626bc30894ca50a2b1024c8f1d672/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a160ce3a48c626bc30894ca50a2b1024c8f1d672", "patch": "@@ -133,11 +133,11 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 ref mut types_to_skip,\n                 ..\n             }) = self.stack.last_mut();\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_id);\n+            if let Some(impl_trait_ref) = cx.tcx.bound_impl_trait_ref(impl_id.to_def_id());\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n                 // `Self`.\n-                let self_ty = impl_trait_ref.self_ty();\n+                let self_ty = impl_trait_ref.subst_identity().self_ty();\n \n                 // `trait_method_sig` is the signature of the function, how it is declared in the\n                 // trait, not in the impl of the trait."}]}