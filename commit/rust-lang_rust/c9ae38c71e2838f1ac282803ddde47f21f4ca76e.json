{"sha": "c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "node_id": "C_kwDOAAsO6NoAKGM5YWUzOGM3MWUyODM4ZjFhYzI4MjgwM2RkZGU0N2YyMWY0Y2E3NmU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-24T05:00:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T01:08:57Z"}, "message": "Avoid unnecessary `MetaItem`/`Attribute` conversions.\n\n`check_builtin_attribute` calls `parse_meta` to convert an `Attribute`\nto a `MetaItem`, which it then checks. However, many callers of\n`check_builtin_attribute` start with a `MetaItem`, and then convert it\nto an `Attribute` by calling `cx.attribute(meta_item)`. This `MetaItem`\nto `Attribute` to `MetaItem` conversion is silly.\n\nThis commit adds a new function `check_builtin_meta_item`, which can be\ncalled instead from these call sites. `check_builtin_attribute` also now\ncalls it. The commit also renames `check_meta` as `check_attr` to better\nmatch its arguments.", "tree": {"sha": "b958e56a3adccd7d12f831c73691306ed4860904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b958e56a3adccd7d12f831c73691306ed4860904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "html_url": "https://github.com/rust-lang/rust/commit/c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2585bcea0bc2a9c42a4be2c1eba5c61137f2b167", "url": "https://api.github.com/repos/rust-lang/rust/commits/2585bcea0bc2a9c42a4be2c1eba5c61137f2b167", "html_url": "https://github.com/rust-lang/rust/commit/2585bcea0bc2a9c42a4be2c1eba5c61137f2b167"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "29bf7948770149dd183e8b663aa70c635b235608", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "patch": "@@ -912,7 +912,7 @@ fn validate_generic_param_order(\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_attribute(&mut self, attr: &Attribute) {\n-        validate_attr::check_meta(&self.session.parse_sess, attr);\n+        validate_attr::check_attr(&self.session.parse_sess, attr);\n     }\n \n     fn visit_expr(&mut self, expr: &'a Expr) {"}, {"sha": "4e4cafc71823aef1ed384ff4e76de0efad11c815", "filename": "compiler/rustc_builtin_macros/src/cfg_accessible.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_accessible.rs?ref=c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "patch": "@@ -37,10 +37,10 @@ impl MultiItemModifier for Expander {\n         _is_derive_const: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         let template = AttributeTemplate { list: Some(\"path\"), ..Default::default() };\n-        let attr = &ecx.attribute(meta_item.clone());\n-        validate_attr::check_builtin_attribute(\n+        validate_attr::check_builtin_meta_item(\n             &ecx.sess.parse_sess,\n-            attr,\n+            &meta_item,\n+            ast::AttrStyle::Outer,\n             sym::cfg_accessible,\n             template,\n         );"}, {"sha": "0358c0b1b5fab4479dc63601a2e25c54d284cb11", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "patch": "@@ -33,14 +33,15 @@ impl MultiItemModifier for Expander {\n             ecx.resolver.resolve_derives(ecx.current_expansion.id, ecx.force_mode, &|| {\n                 let template =\n                     AttributeTemplate { list: Some(\"Trait1, Trait2, ...\"), ..Default::default() };\n-                let attr =\n-                    attr::mk_attr_outer(&sess.parse_sess.attr_id_generator, meta_item.clone());\n-                validate_attr::check_builtin_attribute(\n+                validate_attr::check_builtin_meta_item(\n                     &sess.parse_sess,\n-                    &attr,\n+                    &meta_item,\n+                    ast::AttrStyle::Outer,\n                     sym::derive,\n                     template,\n                 );\n+                let attr =\n+                    attr::mk_attr_outer(&sess.parse_sess.attr_id_generator, meta_item.clone());\n \n                 let mut resolutions: Vec<_> = attr\n                     .meta_item_list()"}, {"sha": "83812631c2ff729067e39df9480dc9a0916502eb", "filename": "compiler/rustc_builtin_macros/src/util.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs?ref=c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::{Attribute, MetaItem};\n+use rustc_ast::{AttrStyle, Attribute, MetaItem};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_feature::AttributeTemplate;\n use rustc_lint_defs::builtin::DUPLICATE_MACRO_ATTRIBUTES;\n@@ -8,8 +8,13 @@ use rustc_span::Symbol;\n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment.\n     let template = AttributeTemplate { word: true, ..Default::default() };\n-    let attr = ecx.attribute(meta_item.clone());\n-    validate_attr::check_builtin_attribute(&ecx.sess.parse_sess, &attr, name, template);\n+    validate_attr::check_builtin_meta_item(\n+        &ecx.sess.parse_sess,\n+        &meta_item,\n+        AttrStyle::Outer,\n+        name,\n+        template,\n+    );\n }\n \n /// Emit a warning if the item is annotated with the given attribute. This is used to diagnose when"}, {"sha": "e799fa404f6fd127465d6e5c0bf8d571e55e745b", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "patch": "@@ -1644,7 +1644,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         let mut span: Option<Span> = None;\n         while let Some(attr) = attrs.next() {\n             rustc_ast_passes::feature_gate::check_attribute(attr, self.cx.sess, features);\n-            validate_attr::check_meta(&self.cx.sess.parse_sess, attr);\n+            validate_attr::check_attr(&self.cx.sess.parse_sess, attr);\n \n             let current_span = if let Some(sp) = span { sp.to(attr.span) } else { attr.span };\n             span = Some(current_span);"}, {"sha": "72402a200907afcd0387bca0687f8e0511ddb0f6", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae38c71e2838f1ac282803ddde47f21f4ca76e/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "patch": "@@ -10,9 +10,9 @@ use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::{AttributeTemplate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n use rustc_session::parse::ParseSess;\n-use rustc_span::{sym, Symbol};\n+use rustc_span::{sym, Span, Symbol};\n \n-pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n+pub fn check_attr(sess: &ParseSess, attr: &Attribute) {\n     if attr.is_doc_comment() {\n         return;\n     }\n@@ -115,25 +115,34 @@ pub fn check_builtin_attribute(\n     name: Symbol,\n     template: AttributeTemplate,\n ) {\n-    // Some special attributes like `cfg` must be checked\n-    // before the generic check, so we skip them here.\n-    let should_skip = |name| name == sym::cfg;\n-\n     match parse_meta(sess, attr) {\n-        Ok(meta) => {\n-            if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n-                emit_malformed_attribute(sess, attr, name, template);\n-            }\n-        }\n+        Ok(meta) => check_builtin_meta_item(sess, &meta, attr.style, name, template),\n         Err(mut err) => {\n             err.emit();\n         }\n     }\n }\n \n+pub fn check_builtin_meta_item(\n+    sess: &ParseSess,\n+    meta: &MetaItem,\n+    style: ast::AttrStyle,\n+    name: Symbol,\n+    template: AttributeTemplate,\n+) {\n+    // Some special attributes like `cfg` must be checked\n+    // before the generic check, so we skip them here.\n+    let should_skip = |name| name == sym::cfg;\n+\n+    if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n+        emit_malformed_attribute(sess, style, meta.span, name, template);\n+    }\n+}\n+\n fn emit_malformed_attribute(\n     sess: &ParseSess,\n-    attr: &Attribute,\n+    style: ast::AttrStyle,\n+    span: Span,\n     name: Symbol,\n     template: AttributeTemplate,\n ) {\n@@ -147,7 +156,7 @@ fn emit_malformed_attribute(\n     let mut msg = \"attribute must be of the form \".to_owned();\n     let mut suggestions = vec![];\n     let mut first = true;\n-    let inner = if attr.style == ast::AttrStyle::Inner { \"!\" } else { \"\" };\n+    let inner = if style == ast::AttrStyle::Inner { \"!\" } else { \"\" };\n     if template.word {\n         first = false;\n         let code = format!(\"#{}[{}]\", inner, name);\n@@ -172,12 +181,12 @@ fn emit_malformed_attribute(\n         suggestions.push(code);\n     }\n     if should_warn(name) {\n-        sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, attr.span, ast::CRATE_NODE_ID, &msg);\n+        sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, span, ast::CRATE_NODE_ID, &msg);\n     } else {\n         sess.span_diagnostic\n-            .struct_span_err(attr.span, &error_msg)\n+            .struct_span_err(span, &error_msg)\n             .span_suggestions(\n-                attr.span,\n+                span,\n                 if suggestions.len() == 1 {\n                     \"must be of the form\"\n                 } else {\n@@ -196,7 +205,7 @@ pub fn emit_fatal_malformed_builtin_attribute(\n     name: Symbol,\n ) -> ! {\n     let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").template;\n-    emit_malformed_attribute(sess, attr, name, template);\n+    emit_malformed_attribute(sess, attr.style, attr.span, name, template);\n     // This is fatal, otherwise it will likely cause a cascade of other errors\n     // (and an error here is expected to be very rare).\n     FatalError.raise()"}]}