{"sha": "3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZWFhODRhNTBiZGJkNmMzY2M1ZTMzYzA3YTAxMTEwYjU5YzcwODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-04T02:36:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-04T02:36:42Z"}, "message": "auto merge of #14628 : luqmana/rust/fcr, r=nikomatsakis\n\n#14589.", "tree": {"sha": "0e57df71b4309c0150c9f70b19f11459beea6f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e57df71b4309c0150c9f70b19f11459beea6f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "html_url": "https://github.com/rust-lang/rust/commit/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "507c1a0fc99b3a090beefd8a3887f21db98ecb09", "url": "https://api.github.com/repos/rust-lang/rust/commits/507c1a0fc99b3a090beefd8a3887f21db98ecb09", "html_url": "https://github.com/rust-lang/rust/commit/507c1a0fc99b3a090beefd8a3887f21db98ecb09"}, {"sha": "0a9eafaa1cf0b547014d1373eec07c31b72fbde3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9eafaa1cf0b547014d1373eec07c31b72fbde3", "html_url": "https://github.com/rust-lang/rust/commit/0a9eafaa1cf0b547014d1373eec07c31b72fbde3"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "0b6540640b4cf60e8f6bd06c696bf474f756957d", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "patch": "@@ -110,7 +110,7 @@ impl<'a> Archive<'a> {\n                     lto: bool) -> io::IoResult<()> {\n         let object = format!(\"{}.o\", name);\n         let bytecode = format!(\"{}.bc.deflate\", name);\n-        let mut ignore = vec!(METADATA_FILENAME, bytecode.as_slice());\n+        let mut ignore = vec!(bytecode.as_slice(), METADATA_FILENAME);\n         if lto {\n             ignore.push(object.as_slice());\n         }"}, {"sha": "10d44ecede6cc4f9b687782a2226045c458932dc", "filename": "src/librustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "patch": "@@ -12,11 +12,14 @@\n use middle::ty;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::infer;\n+use middle::typeck::infer::resolve_type;\n+use middle::typeck::infer::resolve::try_resolve_tvar_shallow;\n \n use std::result::{Err, Ok};\n use std::result;\n use syntax::ast;\n use syntax::codemap::Span;\n+use util::ppaux::Repr;\n \n // Requires that the two types unify, and prints an error message if they\n // don't.\n@@ -58,6 +61,13 @@ pub fn eqtype(fcx: &FnCtxt, sp: Span, expected: ty::t, actual: ty::t) {\n // Checks that the type `actual` can be coerced to `expected`.\n pub fn coerce(fcx: &FnCtxt, sp: Span, expected: ty::t, expr: &ast::Expr) {\n     let expr_ty = fcx.expr_ty(expr);\n+    debug!(\"demand::coerce(expected = {}, expr_ty = {})\",\n+           expected.repr(fcx.ccx.tcx),\n+           expr_ty.repr(fcx.ccx.tcx));\n+    let expected = if ty::type_needs_infer(expected) {\n+        resolve_type(fcx.infcx(), expected,\n+                     try_resolve_tvar_shallow).unwrap_or(expected)\n+    } else { expected };\n     match fcx.mk_assignty(expr, expr_ty, expected) {\n       result::Ok(()) => { /* ok */ }\n       result::Err(ref err) => {"}, {"sha": "0e978a09edd2d8669ae60c7dd7f147e6978065ae", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "patch": "@@ -24,9 +24,11 @@ impl CrateId {\n }\n \n pub fn remove_package_from_database() {\n-    let mut lines_to_use: Vec<&CrateId> = Vec::new(); //~ ERROR cannot infer an appropriate lifetime\n+    let mut lines_to_use: Vec<&CrateId> = Vec::new();\n     let push_id = |installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n+        //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n+        // conflicting requirements\n     };\n     list_database(push_id);\n "}, {"sha": "afc2fc6cf647fd4eecbbe0613d89d1a372d0bdfb", "filename": "src/test/run-pass/issue-14589.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14589.rs?ref=3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// All 3 expressions should work in that the argument gets\n+// coerced to a trait object\n+\n+fn main() {\n+    send::<Box<Foo>>(box Output(0));\n+    Test::<Box<Foo>>::foo(box Output(0));\n+    Test::<Box<Foo>>.send(box Output(0));\n+}\n+\n+fn send<T>(_: T) {}\n+\n+struct Test<T>;\n+impl<T> Test<T> {\n+    fn foo(_: T) {}\n+    fn send(&self, _: T) {}\n+}\n+\n+trait Foo {}\n+struct Output(int);\n+impl Foo for Output {}"}, {"sha": "2266e62eb77cb6b0669da83c9c58efb96e61850c", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=3eeaa84a50bdbd6c3cc5e33c07a01110b59c7087", "patch": "@@ -13,9 +13,9 @@ use std::io::println;\n pub fn main() {\n     let (tx, rx) = channel();\n \n+    tx.send(\"hello, world\");\n+\n     spawn(proc() {\n         println(rx.recv());\n     });\n-\n-    tx.send(\"hello, world\");\n }"}]}