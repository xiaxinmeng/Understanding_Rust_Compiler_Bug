{"sha": "a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "node_id": "C_kwDOAAsO6NoAKGEwNTJmMmNjZTFkZjhhYzVhYzlmY2QxMDRjOTQ4NTQ1ZjhiNWYyZjQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-20T11:55:07Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-20T11:57:58Z"}, "message": "Add the `#[derive_const]` attribute", "tree": {"sha": "291a1724a5276b99ec3eeee18d7231724757f6ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/291a1724a5276b99ec3eeee18d7231724757f6ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "html_url": "https://github.com/rust-lang/rust/commit/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af79ccd5e23c7cbaabcd7aefdda3b715abde606", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af79ccd5e23c7cbaabcd7aefdda3b715abde606", "html_url": "https://github.com/rust-lang/rust/commit/4af79ccd5e23c7cbaabcd7aefdda3b715abde606"}], "stats": {"total": 193, "additions": 163, "deletions": 30}, "files": [{"sha": "86df3c44eb334e7b51aa65ad268417f170162c4b", "filename": "compiler/rustc_builtin_macros/src/cfg_accessible.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_accessible.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -34,6 +34,7 @@ impl MultiItemModifier for Expander {\n         span: Span,\n         meta_item: &ast::MetaItem,\n         item: Annotatable,\n+        _is_derive_const: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         let template = AttributeTemplate { list: Some(\"path\"), ..Default::default() };\n         let attr = &ecx.attribute(meta_item.clone());"}, {"sha": "01f237e6ab5fa3d085a9b1e09ab103bc31e97dc9", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -10,7 +10,7 @@ use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n-pub(crate) struct Expander;\n+pub(crate) struct Expander(pub bool);\n \n impl MultiItemModifier for Expander {\n     fn expand(\n@@ -19,6 +19,7 @@ impl MultiItemModifier for Expander {\n         span: Span,\n         meta_item: &ast::MetaItem,\n         item: Annotatable,\n+        _: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         let sess = ecx.sess;\n         if report_bad_target(sess, &item, span) {\n@@ -58,20 +59,20 @@ impl MultiItemModifier for Expander {\n                         report_path_args(sess, &meta);\n                         meta.path\n                     })\n-                    .map(|path| (path, dummy_annotatable(), None))\n+                    .map(|path| (path, dummy_annotatable(), None, self.0))\n                     .collect();\n \n                 // Do not configure or clone items unless necessary.\n                 match &mut resolutions[..] {\n                     [] => {}\n-                    [(_, first_item, _), others @ ..] => {\n+                    [(_, first_item, ..), others @ ..] => {\n                         *first_item = cfg_eval(\n                             sess,\n                             features,\n                             item.clone(),\n                             ecx.current_expansion.lint_node_id,\n                         );\n-                        for (_, item, _) in others {\n+                        for (_, item, _, _) in others {\n                             *item = first_item.clone();\n                         }\n                     }"}, {"sha": "3a5b7ecde8a9e63fac5d4fd41f62dcf5cabbb2c7", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -12,6 +12,7 @@ pub fn expand_deriving_copy(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let trait_def = TraitDef {\n         span,\n@@ -21,6 +22,7 @@ pub fn expand_deriving_copy(\n         supports_unions: true,\n         methods: Vec::new(),\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     trait_def.expand(cx, mitem, item, push);"}, {"sha": "6d9be879cd19ff7faf31bd5591afa813e9e02681", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -14,6 +14,7 @@ pub fn expand_deriving_clone(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     // The simple form is `fn clone(&self) -> Self { *self }`, possibly with\n     // some additional `AssertParamIsClone` assertions.\n@@ -86,6 +87,7 @@ pub fn expand_deriving_clone(\n             combine_substructure: substructure,\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     trait_def.expand_ext(cx, mitem, item, push, is_simple)"}, {"sha": "9c01314112a59160da9e265c11fb66d3d09ef5ba", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -15,6 +15,7 @@ pub fn expand_deriving_eq(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let span = cx.with_def_site_ctxt(span);\n     let inline = cx.meta_word(span, sym::inline);\n@@ -41,6 +42,7 @@ pub fn expand_deriving_eq(\n             })),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     super::inject_impl_of_structural_trait(cx, span, item, path_std!(marker::StructuralEq), push);"}, {"sha": "d5c81c387834e352518923a63a3b0455ba2d1849", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -13,6 +13,7 @@ pub fn expand_deriving_ord(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let inline = cx.meta_word(span, sym::inline);\n     let attrs = thin_vec![cx.attribute(inline)];\n@@ -33,6 +34,7 @@ pub fn expand_deriving_ord(\n             combine_substructure: combine_substructure(Box::new(|a, b, c| cs_cmp(a, b, c))),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "11b838a076c6d8e690170e132a31668a2b3543b5", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -14,6 +14,7 @@ pub fn expand_deriving_partial_eq(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     fn cs_eq(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> BlockOrExpr {\n         let base = true;\n@@ -88,6 +89,7 @@ pub fn expand_deriving_partial_eq(\n         supports_unions: false,\n         methods,\n         associated_types: Vec::new(),\n+        is_const,\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "107a01190bb4071b125dd81e8ca9a3fa11f14c52", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -13,6 +13,7 @@ pub fn expand_deriving_partial_ord(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let ordering_ty = Path(path_std!(cmp::Ordering));\n     let ret_ty =\n@@ -42,6 +43,7 @@ pub fn expand_deriving_partial_ord(\n         supports_unions: false,\n         methods: vec![partial_cmp_def],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "cf977c0824d8d8f02b531b4750a1322e21e9d128", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -13,6 +13,7 @@ pub fn expand_deriving_debug(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     // &mut ::std::fmt::Formatter\n     let fmtr = Ref(Box::new(Path(path_std!(fmt::Formatter))), ast::Mutability::Mut);\n@@ -36,6 +37,7 @@ pub fn expand_deriving_debug(\n             })),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "a27a068f31a2769126e9bc605eec7296153585bd", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -16,6 +16,7 @@ pub fn expand_deriving_rustc_decodable(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let krate = sym::rustc_serialize;\n     let typaram = sym::__D;\n@@ -54,6 +55,7 @@ pub fn expand_deriving_rustc_decodable(\n             })),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "35b23f2f8f31ae11040d9e7c671e748bbb30f990", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -16,6 +16,7 @@ pub fn expand_deriving_default(\n     mitem: &ast::MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     item.visit_with(&mut DetectNonVariantDefaultAttr { cx });\n \n@@ -46,6 +47,7 @@ pub fn expand_deriving_default(\n             })),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "f06cf0c56bc70d135a8d518e2d85a7fe0192831c", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -100,6 +100,7 @@ pub fn expand_deriving_rustc_encodable(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let krate = sym::rustc_serialize;\n     let typaram = sym::__S;\n@@ -138,6 +139,7 @@ pub fn expand_deriving_rustc_encodable(\n             })),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "78dbe8e5979e265d97a25f6310a53720b9e322d5", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -171,7 +171,7 @@ use rustc_ast::{GenericArg, GenericParamKind, VariantData};\n use rustc_attr as attr;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use std::cell::RefCell;\n use std::iter;\n use std::vec;\n@@ -200,6 +200,8 @@ pub struct TraitDef<'a> {\n     pub methods: Vec<MethodDef<'a>>,\n \n     pub associated_types: Vec<(Ident, Ty)>,\n+\n+    pub is_const: bool,\n }\n \n pub struct MethodDef<'a> {\n@@ -726,7 +728,7 @@ impl<'a> TraitDef<'a> {\n                 unsafety: ast::Unsafe::No,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n-                constness: ast::Const::No,\n+                constness: if self.is_const { ast::Const::Yes(DUMMY_SP) } else { ast::Const::No },\n                 generics: trait_generics,\n                 of_trait: opt_trait_ref,\n                 self_ty: self_type,"}, {"sha": "ef3da94f9e3f5fe9301de4c92268a340bec06f97", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -13,6 +13,7 @@ pub fn expand_deriving_hash(\n     mitem: &MetaItem,\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n ) {\n     let path = Path::new_(pathvec_std!(hash::Hash), vec![], PathKind::Std);\n \n@@ -38,6 +39,7 @@ pub fn expand_deriving_hash(\n             })),\n         }],\n         associated_types: Vec::new(),\n+        is_const,\n     };\n \n     hash_trait_def.expand(cx, mitem, item, push);"}, {"sha": "5b89da91d427872c1837540839d5020e34fa5eea", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -38,9 +38,10 @@ pub mod partial_ord;\n \n pub mod generic;\n \n-pub(crate) struct BuiltinDerive(\n-    pub(crate) fn(&mut ExtCtxt<'_>, Span, &MetaItem, &Annotatable, &mut dyn FnMut(Annotatable)),\n-);\n+pub(crate) type BuiltinDeriveFn =\n+    fn(&mut ExtCtxt<'_>, Span, &MetaItem, &Annotatable, &mut dyn FnMut(Annotatable), bool);\n+\n+pub(crate) struct BuiltinDerive(pub(crate) BuiltinDeriveFn);\n \n impl MultiItemModifier for BuiltinDerive {\n     fn expand(\n@@ -49,6 +50,7 @@ impl MultiItemModifier for BuiltinDerive {\n         span: Span,\n         meta_item: &MetaItem,\n         item: Annotatable,\n+        is_derive_const: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         // FIXME: Built-in derives often forget to give spans contexts,\n         // so we are doing it here in a centralized way.\n@@ -57,21 +59,28 @@ impl MultiItemModifier for BuiltinDerive {\n         match item {\n             Annotatable::Stmt(stmt) => {\n                 if let ast::StmtKind::Item(item) = stmt.into_inner().kind {\n-                    (self.0)(ecx, span, meta_item, &Annotatable::Item(item), &mut |a| {\n-                        // Cannot use 'ecx.stmt_item' here, because we need to pass 'ecx'\n-                        // to the function\n-                        items.push(Annotatable::Stmt(P(ast::Stmt {\n-                            id: ast::DUMMY_NODE_ID,\n-                            kind: ast::StmtKind::Item(a.expect_item()),\n-                            span,\n-                        })));\n-                    });\n+                    (self.0)(\n+                        ecx,\n+                        span,\n+                        meta_item,\n+                        &Annotatable::Item(item),\n+                        &mut |a| {\n+                            // Cannot use 'ecx.stmt_item' here, because we need to pass 'ecx'\n+                            // to the function\n+                            items.push(Annotatable::Stmt(P(ast::Stmt {\n+                                id: ast::DUMMY_NODE_ID,\n+                                kind: ast::StmtKind::Item(a.expect_item()),\n+                                span,\n+                            })));\n+                        },\n+                        is_derive_const,\n+                    );\n                 } else {\n                     unreachable!(\"should have already errored on non-item statement\")\n                 }\n             }\n             _ => {\n-                (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a));\n+                (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a), is_derive_const);\n             }\n         }\n         ExpandResult::Ready(items)"}, {"sha": "ab1fcde16865fccc889aab3ee22e9f774b8ab748", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -97,7 +97,8 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         bench: test::expand_bench,\n         cfg_accessible: cfg_accessible::Expander,\n         cfg_eval: cfg_eval::expand,\n-        derive: derive::Expander,\n+        derive: derive::Expander(false),\n+        derive_const: derive::Expander(true),\n         global_allocator: global_allocator::expand,\n         test: test::expand_test,\n         test_case: test::expand_test_case,"}, {"sha": "b3d187848be9ce7d3e1dfa17c27c92b5d730efd0", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -248,6 +248,7 @@ pub trait MultiItemModifier {\n         span: Span,\n         meta_item: &ast::MetaItem,\n         item: Annotatable,\n+        is_derive_const: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable>;\n }\n \n@@ -261,6 +262,7 @@ where\n         span: Span,\n         meta_item: &ast::MetaItem,\n         item: Annotatable,\n+        _is_derive_const: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         ExpandResult::Ready(self(ecx, span, meta_item, item))\n     }\n@@ -871,7 +873,7 @@ impl SyntaxExtension {\n /// Error type that denotes indeterminacy.\n pub struct Indeterminate;\n \n-pub type DeriveResolutions = Vec<(ast::Path, Annotatable, Option<Lrc<SyntaxExtension>>)>;\n+pub type DeriveResolutions = Vec<(ast::Path, Annotatable, Option<Lrc<SyntaxExtension>>, bool)>;\n \n pub trait ResolverExpand {\n     fn next_node_id(&mut self) -> NodeId;"}, {"sha": "a63b59d31cfd966308dc6c0d0afa011e8eadc0d8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -319,6 +319,7 @@ pub enum InvocationKind {\n     },\n     Derive {\n         path: ast::Path,\n+        is_const: bool,\n         item: Annotatable,\n     },\n }\n@@ -460,13 +461,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             derive_invocations.reserve(derives.len());\n                             derives\n                                 .into_iter()\n-                                .map(|(path, item, _exts)| {\n+                                .map(|(path, item, _exts, is_const)| {\n                                     // FIXME: Consider using the derive resolutions (`_exts`)\n                                     // instead of enqueuing the derives to be resolved again later.\n                                     let expn_id = LocalExpnId::fresh_empty();\n                                     derive_invocations.push((\n                                         Invocation {\n-                                            kind: InvocationKind::Derive { path, item },\n+                                            kind: InvocationKind::Derive { path, item, is_const },\n                                             fragment_kind,\n                                             expansion_data: ExpansionData {\n                                                 id: expn_id,\n@@ -699,7 +700,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 SyntaxExtensionKind::LegacyAttr(expander) => {\n                     match validate_attr::parse_meta(&self.cx.sess.parse_sess, &attr) {\n                         Ok(meta) => {\n-                            let items = match expander.expand(self.cx, span, &meta, item) {\n+                            let items = match expander.expand(self.cx, span, &meta, item, false) {\n                                 ExpandResult::Ready(items) => items,\n                                 ExpandResult::Retry(item) => {\n                                     // Reassemble the original invocation for retrying.\n@@ -731,19 +732,19 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n                 _ => unreachable!(),\n             },\n-            InvocationKind::Derive { path, item } => match ext {\n+            InvocationKind::Derive { path, item, is_const } => match ext {\n                 SyntaxExtensionKind::Derive(expander)\n                 | SyntaxExtensionKind::LegacyDerive(expander) => {\n                     if let SyntaxExtensionKind::Derive(..) = ext {\n                         self.gate_proc_macro_input(&item);\n                     }\n                     let meta = ast::MetaItem { kind: MetaItemKind::Word, span, path };\n-                    let items = match expander.expand(self.cx, span, &meta, item) {\n+                    let items = match expander.expand(self.cx, span, &meta, item, is_const) {\n                         ExpandResult::Ready(items) => items,\n                         ExpandResult::Retry(item) => {\n                             // Reassemble the original invocation for retrying.\n                             return ExpandResult::Retry(Invocation {\n-                                kind: InvocationKind::Derive { path: meta.path, item },\n+                                kind: InvocationKind::Derive { path: meta.path, item, is_const },\n                                 ..invoc\n                             });\n                         }"}, {"sha": "e9a69192068941167386c97429d4ec96bbd217b1", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -112,6 +112,7 @@ impl MultiItemModifier for DeriveProcMacro {\n         span: Span,\n         _meta_item: &ast::MetaItem,\n         item: Annotatable,\n+        _is_derive_const: bool,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n         // We need special handling for statement items\n         // (e.g. `fn foo() { #[derive(Debug)] struct Bar; }`)"}, {"sha": "8ef99e5ef968a502dc0d1c59c3ba56be9d6e1ddd", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -356,7 +356,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             has_derive_copy: false,\n         });\n         let parent_scope = self.invocation_parent_scopes[&expn_id];\n-        for (i, (path, _, opt_ext)) in entry.resolutions.iter_mut().enumerate() {\n+        for (i, (path, _, opt_ext, _)) in entry.resolutions.iter_mut().enumerate() {\n             if opt_ext.is_none() {\n                 *opt_ext = Some(\n                     match self.resolve_macro_path("}, {"sha": "0a9570979d5afa928fd8e639d0ff042fd9bd8568", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -614,6 +614,7 @@ symbols! {\n         deref_mut,\n         deref_target,\n         derive,\n+        derive_const,\n         derive_default_enum,\n         destruct,\n         destructuring_assignment,"}, {"sha": "e504db8143447cbc8dfd701015ef82c1de91017b", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -1464,6 +1464,19 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n+    /// Attribute macro used to apply derive macros for implementing traits\n+    /// in a const context.\n+    ///\n+    /// See [the reference] for more info.\n+    ///\n+    /// [the reference]: ../../../reference/attributes/derive.html\n+    #[unstable(feature = \"derive_const\", issue = \"none\")]\n+    #[rustc_builtin_macro]\n+    #[cfg(not(bootstrap))]\n+    pub macro derive_const($item:item) {\n+        /* compiler built-in */\n+    }\n+\n     /// Attribute macro applied to a function to turn it into a unit test.\n     ///\n     /// See [the reference] for more info."}, {"sha": "f52c06d7eadc221d0c09cc747fb16a67aa17560b", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -78,6 +78,10 @@ pub use crate::macros::builtin::{RustcDecodable, RustcEncodable};\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use crate::macros::builtin::{bench, derive, global_allocator, test, test_case};\n \n+#[unstable(feature = \"derive_const\", issue = \"none\")]\n+#[cfg(not(bootstrap))]\n+pub use crate::macros::builtin::derive_const;\n+\n #[unstable(\n     feature = \"cfg_accessible\",\n     issue = \"64797\","}, {"sha": "93f4a17bbfca38a79f8530fd02a265260c77c0fd", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -62,6 +62,10 @@ pub use core::prelude::v1::{RustcDecodable, RustcEncodable};\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use core::prelude::v1::{bench, derive, global_allocator, test, test_case};\n \n+#[unstable(feature = \"derive_const\", issue = \"none\")]\n+#[cfg(not(bootstrap))]\n+pub use core::prelude::v1::derive_const;\n+\n // Do not `doc(no_inline)` either.\n #[unstable(\n     feature = \"cfg_accessible\","}, {"sha": "5a758c7002b92b6a54deb76a08a8fed43667611a", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -2,18 +2,28 @@ error: cannot find attribute `derive_Clone` in this scope\n   --> $DIR/issue-32655.rs:3:11\n    |\n LL |         #[derive_Clone]\n-   |           ^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `derive_const`\n ...\n LL | foo!();\n    | ------ in this macro invocation\n    |\n+  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |     pub macro derive_const($item:item) {\n+   |     ---------------------- similarly named attribute macro `derive_const` defined here\n+   |\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find attribute `derive_Clone` in this scope\n   --> $DIR/issue-32655.rs:15:7\n    |\n LL |     #[derive_Clone]\n-   |       ^^^^^^^^^^^^\n+   |       ^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `derive_const`\n+   |\n+  ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |     pub macro derive_const($item:item) {\n+   |     ---------------------- similarly named attribute macro `derive_const` defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "348ca0ab1906b8c720d7ceb712790a96de2459e7", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_derives/derive-const-gate.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -0,0 +1,4 @@\n+#[derive_const(Default)] //~ ERROR use of unstable library feature\n+pub struct S;\n+\n+fn main() {}"}, {"sha": "cc9bdd2715f70fa04014c2c022e82bab8b48646f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_derives/derive-const-gate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.stderr?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'derive_const'\n+  --> $DIR/derive-const-gate.rs:1:3\n+   |\n+LL | #[derive_const(Default)]\n+   |   ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(derive_const)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "92843a8a2da488391b596b5ac51793c5a7975787", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -0,0 +1,13 @@\n+#![feature(derive_const)]\n+\n+pub struct A;\n+\n+impl Default for A {\n+    fn default() -> A { A }\n+}\n+\n+#[derive_const(Default)]\n+pub struct S(A);\n+//~^ cannot call non-const fn\n+\n+fn main() {}"}, {"sha": "d463c774e289efbf876ea902009d996c528207e8", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -0,0 +1,14 @@\n+error[E0015]: cannot call non-const fn `<A as Default>::default` in constant functions\n+  --> $DIR/derive-const-non-const-type.rs:10:14\n+   |\n+LL | #[derive_const(Default)]\n+   |                ------- in this derive macro expansion\n+LL | pub struct S(A);\n+   |              ^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "d1fbeac8598e47294bbab4def7f4bc6082291dff", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_derives/derive-const-use.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.rs?ref=a052f2cce1df8ac5ac9fcd104c948545f8b5f2f4", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+#![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]\n+\n+pub struct A;\n+\n+impl const Default for A {\n+    fn default() -> A { A }\n+}\n+\n+impl const PartialEq for A {\n+    fn eq(&self, _: &A) -> bool { true }\n+}\n+\n+#[derive_const(Default, PartialEq)]\n+pub struct S((), A);\n+\n+const _: () = assert!(S((), A) == S::default());\n+\n+fn main() {}"}]}