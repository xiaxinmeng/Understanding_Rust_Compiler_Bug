{"sha": "c47a34fddc4663563e172125f17bae86bb2e8f0f", "node_id": "C_kwDOAAsO6NoAKGM0N2EzNGZkZGM0NjYzNTYzZTE3MjEyNWYxN2JhZTg2YmIyZThmMGY", "commit": {"author": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-04-25T17:49:49Z"}, "committer": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-05-02T15:06:38Z"}, "message": "Add `target_dir` path argument for `external_docs` and other methods", "tree": {"sha": "f9914856e44ab680fa0acf39a775ae8bb99cc0e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9914856e44ab680fa0acf39a775ae8bb99cc0e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47a34fddc4663563e172125f17bae86bb2e8f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE83x4qCmEA5TzaAMiEJh17BFTUhIFAmRRJv4ACgkQEJh17BFT\nUhKQZBAAi2aU9PZ0ZufJRDXPQGW2yt1049BqvXJ4ptB8ztGiDuR8PvCP5QhR+9QQ\nHZVDKFpryRfh9i0g+BYTS9fakTLmXq/w8+5k/44/GbK+mUClo9MSqhCqjbMTI+kI\nRdZjymFJaq2xnV9Cz/n/BIFRqg27bYmDRmojDP6JzC4CTUVyHnL+fV0huXnrFwJT\n4H7RFwx8Ti8IoWBSzSGYNyD7Hg0JFxnbdNzPsZ2xRdI6XNMIBl7mdT3rzwUB7axZ\n5+J6Rjr0hJsa/SUzCDTfy0dt9eLLUqi04XHwu8xcr+fVopTX5AvEtpVFxOfoY6ra\nEOECcp+aF9IA0vyqtFv7oiBF1KVujrfR/hAXbaDqKbGjKr1ot3G5EAOqY82QVQnb\nz3d129v1JHFg3hq64/5b3xarlZQEcoUJPtSEGMH79NdPIAzhiwdl0SwA/5EJa5EP\ndLvcI2n9BhsNo5ng4sYb38FkncOfER720j1IO+ABui9dE9LvWBFe/k0hCleQFexo\nErnyrF9uLWq5grsl8QMMGvv0pJq0kd15t8QTQc5veYtDucZs3mWUlpXJOH1UAHBb\nH9X1JXQsZkwddnQDBIifTw1/8JegpF4YOdqx8NRnxH40kp3w7SSP4tzaC6FIUYWx\nH56YrBwn0yjzQP1KR6/670me4wQAuh5CI/6MH4/IOuk/a6jIAoE=\n=RAMD\n-----END PGP SIGNATURE-----", "payload": "tree f9914856e44ab680fa0acf39a775ae8bb99cc0e3\nparent f2d933ecaf5f3d1749c5aa31c3b99c07573c7369\nauthor Ddystopia <alexanderbabak@proton.me> 1682444989 +0200\ncommitter Ddystopia <alexanderbabak@proton.me> 1683039998 +0200\n\nAdd `target_dir` path argument for `external_docs` and other methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47a34fddc4663563e172125f17bae86bb2e8f0f", "html_url": "https://github.com/rust-lang/rust/commit/c47a34fddc4663563e172125f17bae86bb2e8f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47a34fddc4663563e172125f17bae86bb2e8f0f/comments", "author": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d933ecaf5f3d1749c5aa31c3b99c07573c7369", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d933ecaf5f3d1749c5aa31c3b99c07573c7369", "html_url": "https://github.com/rust-lang/rust/commit/f2d933ecaf5f3d1749c5aa31c3b99c07573c7369"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "5b67761acd402d3cb384d0df72f61616785ca658", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c47a34fddc4663563e172125f17bae86bb2e8f0f/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a34fddc4663563e172125f17bae86bb2e8f0f/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c47a34fddc4663563e172125f17bae86bb2e8f0f", "patch": "@@ -5,6 +5,8 @@ mod tests;\n \n mod intra_doc_links;\n \n+use std::ffi::OsStr;\n+\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_resume_with_options, Options as CMarkOptions};\n use stdx::format_to;\n@@ -127,7 +129,11 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n //\n // | VS Code | **rust-analyzer: Open Docs**\n // |===\n-pub(crate) fn external_docs(db: &RootDatabase, position: &FilePosition) -> DocumentationLinks {\n+pub(crate) fn external_docs(\n+    db: &RootDatabase,\n+    position: &FilePosition,\n+    target_dir: Option<&OsStr>,\n+) -> DocumentationLinks {\n     let sema = &Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n@@ -158,7 +164,7 @@ pub(crate) fn external_docs(db: &RootDatabase, position: &FilePosition) -> Docum\n         }\n     };\n \n-    return get_doc_links(db, definition);\n+    return get_doc_links(db, definition, target_dir);\n }\n \n /// Extracts all links from a given markdown text returning the definition text range, link-text\n@@ -316,10 +322,14 @@ fn broken_link_clone_cb(link: BrokenLink<'_>) -> Option<(CowStr<'_>, CowStr<'_>)\n //\n // This should cease to be a problem if RFC2988 (Stable Rustdoc URLs) is implemented\n // https://github.com/rust-lang/rfcs/pull/2988\n-fn get_doc_links(db: &RootDatabase, def: Definition) -> DocumentationLinks {\n+fn get_doc_links(\n+    db: &RootDatabase,\n+    def: Definition,\n+    target_dir: Option<&OsStr>,\n+) -> DocumentationLinks {\n     let Some((target, file, frag)) = filename_and_frag_for_def(db, def) else { return Default::default(); };\n \n-    let (mut web_url, mut local_url) = get_doc_base_urls(db, target);\n+    let (mut web_url, mut local_url) = get_doc_base_urls(db, target, target_dir);\n \n     if let Some(path) = mod_path_of_def(db, target) {\n         web_url = join_url(web_url, &path);\n@@ -355,7 +365,7 @@ fn rewrite_intra_doc_link(\n     let (link, ns) = parse_intra_doc_link(target);\n \n     let resolved = resolve_doc_path_for_def(db, def, link, ns)?;\n-    let mut url = get_doc_base_urls(db, resolved).0?;\n+    let mut url = get_doc_base_urls(db, resolved, None).0?;\n \n     let (_, file, frag) = filename_and_frag_for_def(db, resolved)?;\n     if let Some(path) = mod_path_of_def(db, resolved) {\n@@ -374,7 +384,7 @@ fn rewrite_url_link(db: &RootDatabase, def: Definition, target: &str) -> Option<\n         return None;\n     }\n \n-    let mut url = get_doc_base_urls(db, def).0?;\n+    let mut url = get_doc_base_urls(db, def, None).0?;\n     let (def, file, frag) = filename_and_frag_for_def(db, def)?;\n \n     if let Some(path) = mod_path_of_def(db, def) {\n@@ -450,23 +460,23 @@ fn map_links<'e>(\n /// https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\n /// ^^^^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n-fn get_doc_base_urls(db: &RootDatabase, def: Definition) -> (Option<Url>, Option<Url>) {\n-    // TODO: get this is from `CargoWorkspace`\n-    // TODO: get `CargoWorkspace` from `db`\n-    let target_path = \"file:///project/root/target\";\n-    let target_path = Url::parse(target_path).ok();\n-    let local_doc_path = target_path.and_then(|url| url.join(\"doc\").ok());\n-    debug_assert!(local_doc_path.is_some(), \"failed to parse local doc path\");\n-\n+fn get_doc_base_urls(\n+    db: &RootDatabase,\n+    def: Definition,\n+    target_dir: Option<&OsStr>,\n+) -> (Option<Url>, Option<Url>) {\n+    let local_doc_path = target_dir\n+        .and_then(|it| Url::from_directory_path(it).ok())\n+        .and_then(|it| it.join(\"doc\").ok());\n     // special case base url of `BuiltinType` to core\n     // https://github.com/rust-lang/rust-analyzer/issues/12250\n     if let Definition::BuiltinType(..) = def {\n         let weblink = Url::parse(\"https://doc.rust-lang.org/nightly/core/\").ok();\n         return (weblink, local_doc_path);\n     };\n \n-    let Some(krate) = def.krate(db) else { return Default::default() };\n-    let Some(display_name) = krate.display_name(db) else { return Default::default() };\n+    let Some(krate) = def.krate(db) else { return (None, local_doc_path) };\n+    let Some(display_name) = krate.display_name(db) else { return (None, local_doc_path) };\n     let crate_data = &db.crate_graph()[krate.into()];\n     let channel = crate_data.channel.map_or(\"nightly\", ReleaseChannel::as_str);\n     let (web_base, local_base) = match &crate_data.origin {"}, {"sha": "4e930cbc5906f6d01c4cf10108f9c6256a627bdb", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c47a34fddc4663563e172125f17bae86bb2e8f0f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a34fddc4663563e172125f17bae86bb2e8f0f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c47a34fddc4663563e172125f17bae86bb2e8f0f", "patch": "@@ -61,7 +61,7 @@ mod view_item_tree;\n mod shuffle_crate_graph;\n mod fetch_crates;\n \n-use std::sync::Arc;\n+use std::{ffi::OsStr, sync::Arc};\n \n use cfg::CfgOptions;\n use fetch_crates::CrateInfo;\n@@ -471,8 +471,9 @@ impl Analysis {\n     pub fn external_docs(\n         &self,\n         position: FilePosition,\n+        target_dir: Option<&OsStr>,\n     ) -> Cancellable<doc_links::DocumentationLinks> {\n-        self.with_db(|db| doc_links::external_docs(db, &position))\n+        self.with_db(|db| doc_links::external_docs(db, &position, target_dir))\n     }\n \n     /// Computes parameter information at the given position."}, {"sha": "1332dc43e984446052d518d657facb240f6c53d3", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c47a34fddc4663563e172125f17bae86bb2e8f0f/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a34fddc4663563e172125f17bae86bb2e8f0f/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=c47a34fddc4663563e172125f17bae86bb2e8f0f", "patch": "@@ -1539,7 +1539,13 @@ pub(crate) fn handle_open_docs(\n     let _p = profile::span(\"handle_open_docs\");\n     let position = from_proto::file_position(&snap, params)?;\n \n-    let Ok(remote_urls) = snap.analysis.external_docs(position) else { return Ok((None, None)); };\n+    let cargo = match snap.workspaces.get(0) {\n+        Some(ProjectWorkspace::Cargo { cargo, .. }) => Some(cargo),\n+        _ => None,\n+    };\n+    let target_dir =\n+        cargo.and_then(|cargo| Some(cargo.target_directory())).and_then(|p| Some(p.as_os_str()));\n+    let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir) else { return Ok((None, None)); };\n \n     let web_url = remote_urls.web_url.and_then(|it| Url::parse(&it).ok());\n     let local_url = remote_urls.local_url.and_then(|it| Url::parse(&it).ok());"}]}