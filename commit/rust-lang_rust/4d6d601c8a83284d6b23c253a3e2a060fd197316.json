{"sha": "4d6d601c8a83284d6b23c253a3e2a060fd197316", "node_id": "C_kwDOAAsO6NoAKDRkNmQ2MDFjOGE4MzI4NGQ2YjIzYzI1M2EzZTJhMDYwZmQxOTczMTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T19:35:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T19:35:57Z"}, "message": "Auto merge of #99574 - durin42:allocator-patch-redux, r=nikic\n\ncodegen: use new {re,de,}allocator annotations in llvm\n\nThis obviates the patch that teaches LLVM internals about\n_rust_{re,de}alloc functions by putting annotations directly in the IR\nfor the optimizer.\n\nThe sole test change is required to anchor FileCheck to the body of the\n`box_uninitialized` method, so it doesn't see the `allocalign` on\n`__rust_alloc` and get mad about the string `alloca` showing up. Since I\nwas there anyway, I added some checks on the attributes to prove the\nright attributes got set.\n\nr? `@nikic`", "tree": {"sha": "b50b4e041cade7275160c65fe71a50ae346b6830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50b4e041cade7275160c65fe71a50ae346b6830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6d601c8a83284d6b23c253a3e2a060fd197316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6d601c8a83284d6b23c253a3e2a060fd197316", "html_url": "https://github.com/rust-lang/rust/commit/4d6d601c8a83284d6b23c253a3e2a060fd197316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6d601c8a83284d6b23c253a3e2a060fd197316/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11207ec89b856164bba03b8ecfe07b0b234ed21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11207ec89b856164bba03b8ecfe07b0b234ed21", "html_url": "https://github.com/rust-lang/rust/commit/c11207ec89b856164bba03b8ecfe07b0b234ed21"}, {"sha": "130a1df71ea73ab9d66d3cb8fc9cdb43155d514b", "url": "https://api.github.com/repos/rust-lang/rust/commits/130a1df71ea73ab9d66d3cb8fc9cdb43155d514b", "html_url": "https://github.com/rust-lang/rust/commit/130a1df71ea73ab9d66d3cb8fc9cdb43155d514b"}], "stats": {"total": 360, "additions": 356, "deletions": 4}, "files": [{"sha": "aabbe8ac276d7ca7233618dcee8c3944da1fecdc", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -13,7 +13,7 @@ use smallvec::SmallVec;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n-use crate::llvm::{self, Attribute, AttributeKind, AttributePlace};\n+use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace};\n use crate::llvm_util;\n pub use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n \n@@ -227,6 +227,10 @@ pub(crate) fn default_optimisation_attrs<'ll>(\n     attrs\n }\n \n+fn create_alloc_family_attr(llcx: &llvm::Context) -> &llvm::Attribute {\n+    llvm::CreateAttrStringValue(llcx, \"alloc-family\", \"__rust_alloc\")\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (`#[attribute]`)\n /// attributes.\n pub fn from_fn_attrs<'ll, 'tcx>(\n@@ -309,11 +313,54 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         // Need this for AArch64.\n         to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"branch-target-enforcement\", \"false\"));\n     }\n-    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR)\n+        || codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR_ZEROED)\n+    {\n+        if llvm_util::get_version() >= (15, 0, 0) {\n+            to_add.push(create_alloc_family_attr(cx.llcx));\n+            // apply to argument place instead of function\n+            let alloc_align = AttributeKind::AllocAlign.create_attr(cx.llcx);\n+            attributes::apply_to_llfn(llfn, AttributePlace::Argument(1), &[alloc_align]);\n+            to_add.push(llvm::CreateAllocSizeAttr(cx.llcx, 0));\n+            let mut flags = AllocKindFlags::Alloc | AllocKindFlags::Aligned;\n+            if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n+                flags |= AllocKindFlags::Uninitialized;\n+            } else {\n+                flags |= AllocKindFlags::Zeroed;\n+            }\n+            to_add.push(llvm::CreateAllocKindAttr(cx.llcx, flags));\n+        }\n         // apply to return place instead of function (unlike all other attributes applied in this function)\n         let no_alias = AttributeKind::NoAlias.create_attr(cx.llcx);\n         attributes::apply_to_llfn(llfn, AttributePlace::ReturnValue, &[no_alias]);\n     }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::REALLOCATOR) {\n+        if llvm_util::get_version() >= (15, 0, 0) {\n+            to_add.push(create_alloc_family_attr(cx.llcx));\n+            to_add.push(llvm::CreateAllocKindAttr(\n+                cx.llcx,\n+                AllocKindFlags::Realloc | AllocKindFlags::Aligned,\n+            ));\n+            // applies to argument place instead of function place\n+            let allocated_pointer = AttributeKind::AllocatedPointer.create_attr(cx.llcx);\n+            attributes::apply_to_llfn(llfn, AttributePlace::Argument(0), &[allocated_pointer]);\n+            // apply to argument place instead of function\n+            let alloc_align = AttributeKind::AllocAlign.create_attr(cx.llcx);\n+            attributes::apply_to_llfn(llfn, AttributePlace::Argument(2), &[alloc_align]);\n+            to_add.push(llvm::CreateAllocSizeAttr(cx.llcx, 3));\n+        }\n+        let no_alias = AttributeKind::NoAlias.create_attr(cx.llcx);\n+        attributes::apply_to_llfn(llfn, AttributePlace::ReturnValue, &[no_alias]);\n+    }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::DEALLOCATOR) {\n+        if llvm_util::get_version() >= (15, 0, 0) {\n+            to_add.push(create_alloc_family_attr(cx.llcx));\n+            to_add.push(llvm::CreateAllocKindAttr(cx.llcx, AllocKindFlags::Free));\n+            // applies to argument place instead of function place\n+            let allocated_pointer = AttributeKind::AllocatedPointer.create_attr(cx.llcx);\n+            attributes::apply_to_llfn(llfn, AttributePlace::Argument(0), &[allocated_pointer]);\n+        }\n+    }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n         to_add.push(llvm::CreateAttrString(cx.llcx, \"cmse_nonsecure_entry\"));\n     }"}, {"sha": "b89408ab75a9df6e504dc59d173a620360e700dc", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -193,6 +193,9 @@ pub enum AttributeKind {\n     SanitizeMemTag = 34,\n     NoCfCheck = 35,\n     ShadowCallStack = 36,\n+    AllocSize = 37,\n+    AllocatedPointer = 38,\n+    AllocAlign = 39,\n }\n \n /// LLVMIntPredicate\n@@ -986,6 +989,22 @@ pub mod debuginfo {\n     }\n }\n \n+use bitflags::bitflags;\n+// These values **must** match with LLVMRustAllocKindFlags\n+bitflags! {\n+    #[repr(transparent)]\n+    #[derive(Default)]\n+    pub struct AllocKindFlags : u64 {\n+        const Unknown = 0;\n+        const Alloc = 1;\n+        const Realloc = 1 << 1;\n+        const Free = 1 << 2;\n+        const Uninitialized = 1 << 3;\n+        const Zeroed = 1 << 4;\n+        const Aligned = 1 << 5;\n+    }\n+}\n+\n extern \"C\" {\n     pub type ModuleBuffer;\n }\n@@ -1193,6 +1212,8 @@ extern \"C\" {\n     pub fn LLVMRustCreateByValAttr<'a>(C: &'a Context, ty: &'a Type) -> &'a Attribute;\n     pub fn LLVMRustCreateStructRetAttr<'a>(C: &'a Context, ty: &'a Type) -> &'a Attribute;\n     pub fn LLVMRustCreateUWTableAttr(C: &Context, async_: bool) -> &Attribute;\n+    pub fn LLVMRustCreateAllocSizeAttr(C: &Context, size_arg: u32) -> &Attribute;\n+    pub fn LLVMRustCreateAllocKindAttr(C: &Context, size_arg: u64) -> &Attribute;\n \n     // Operations on functions\n     pub fn LLVMRustGetOrInsertFunction<'a>("}, {"sha": "8e5e1a8b2a3084821a5023a553aaf4ed3c8c7d48", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -95,6 +95,14 @@ pub fn CreateUWTableAttr(llcx: &Context, async_: bool) -> &Attribute {\n     unsafe { LLVMRustCreateUWTableAttr(llcx, async_) }\n }\n \n+pub fn CreateAllocSizeAttr(llcx: &Context, size_arg: u32) -> &Attribute {\n+    unsafe { LLVMRustCreateAllocSizeAttr(llcx, size_arg) }\n+}\n+\n+pub fn CreateAllocKindAttr(llcx: &Context, kind_arg: AllocKindFlags) -> &Attribute {\n+    unsafe { LLVMRustCreateAllocKindAttr(llcx, kind_arg.bits()) }\n+}\n+\n #[derive(Copy, Clone)]\n pub enum AttributePlace {\n     ReturnValue,"}, {"sha": "7b540e67aab3ddf7fa39931fb725e3ca65a1553b", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -532,6 +532,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_reallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_deallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_allocator_zeroed, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     gated!(\n         alloc_error_handler, Normal, template!(Word), WarnFollowing,\n         experimental!(alloc_error_handler)"}, {"sha": "93f302b44e87cc58c67bb6496f17ef8258ef9b0d", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -86,6 +86,9 @@ enum LLVMRustAttribute {\n   SanitizeMemTag = 34,\n   NoCfCheck = 35,\n   ShadowCallStack = 36,\n+  AllocSize = 37,\n+  AllocatedPointer = 38,\n+  AllocAlign = 39,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "fffc2dd2b84d62cafaac449d604d41cba73a7931", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -234,6 +234,14 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::SanitizeMemTag;\n   case ShadowCallStack:\n     return Attribute::ShadowCallStack;\n+  case AllocSize:\n+    return Attribute::AllocSize;\n+#if LLVM_VERSION_GE(15, 0)\n+  case AllocatedPointer:\n+    return Attribute::AllocatedPointer;\n+  case AllocAlign:\n+    return Attribute::AllocAlign;\n+#endif\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }\n@@ -305,6 +313,67 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateUWTableAttr(LLVMContextRef C, bool Asy\n #endif\n }\n \n+extern \"C\" LLVMAttributeRef LLVMRustCreateAllocSizeAttr(LLVMContextRef C, uint32_t ElementSizeArg) {\n+  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg, None));\n+}\n+\n+#if LLVM_VERSION_GE(15, 0)\n+\n+// These values **must** match ffi::AllocKindFlags.\n+// It _happens_ to match the LLVM values of llvm::AllocFnKind,\n+// but that's happenstance and we do explicit conversions before\n+// passing them to LLVM.\n+enum class LLVMRustAllocKindFlags : uint64_t {\n+  Unknown = 0,\n+  Alloc = 1,\n+  Realloc = 1 << 1,\n+  Free = 1 << 2,\n+  Uninitialized = 1 << 3,\n+  Zeroed = 1 << 4,\n+  Aligned = 1 << 5,\n+};\n+\n+static LLVMRustAllocKindFlags operator&(LLVMRustAllocKindFlags A, LLVMRustAllocKindFlags B) {\n+  return static_cast<LLVMRustAllocKindFlags>(static_cast<uint64_t>(A) &\n+                                      static_cast<uint64_t>(B));\n+}\n+\n+static bool isSet(LLVMRustAllocKindFlags F) { return F != LLVMRustAllocKindFlags::Unknown; }\n+\n+static llvm::AllocFnKind allocKindFromRust(LLVMRustAllocKindFlags F) {\n+  llvm::AllocFnKind AFK = llvm::AllocFnKind::Unknown;\n+  if (isSet(F & LLVMRustAllocKindFlags::Alloc)) {\n+    AFK |= llvm::AllocFnKind::Alloc;\n+  }\n+  if (isSet(F & LLVMRustAllocKindFlags::Realloc)) {\n+    AFK |= llvm::AllocFnKind::Realloc;\n+  }\n+  if (isSet(F & LLVMRustAllocKindFlags::Free)) {\n+    AFK |= llvm::AllocFnKind::Free;\n+  }\n+  if (isSet(F & LLVMRustAllocKindFlags::Uninitialized)) {\n+    AFK |= llvm::AllocFnKind::Uninitialized;\n+  }\n+  if (isSet(F & LLVMRustAllocKindFlags::Zeroed)) {\n+    AFK |= llvm::AllocFnKind::Zeroed;\n+  }\n+  if (isSet(F & LLVMRustAllocKindFlags::Aligned)) {\n+    AFK |= llvm::AllocFnKind::Aligned;\n+  }\n+  return AFK;\n+}\n+#endif\n+\n+extern \"C\" LLVMAttributeRef LLVMRustCreateAllocKindAttr(LLVMContextRef C, uint64_t AllocKindArg) {\n+#if LLVM_VERSION_GE(15, 0)\n+  return wrap(Attribute::get(*unwrap(C), Attribute::AllocKind,\n+      static_cast<uint64_t>(allocKindFromRust(static_cast<LLVMRustAllocKindFlags>(AllocKindArg)))));\n+#else\n+  report_fatal_error(\n+      \"allockind attributes are new in LLVM 15 and should not be used on older LLVMs\");\n+#endif\n+}\n+\n // Enable a fast-math flag\n //\n // https://llvm.org/docs/LangRef.html#fast-math-flags"}, {"sha": "45d33a1659ffa42fbc0ae603025f44c80bdbda4a", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -50,7 +50,7 @@ bitflags! {\n         /// the hot path.\n         const COLD                      = 1 << 0;\n         /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n-        /// function is never null.\n+        /// function is never null and the function has no side effects other than allocating.\n         const ALLOCATOR                 = 1 << 1;\n         /// An indicator that function will never unwind. Will become obsolete\n         /// once C-unwind is fully stabilized.\n@@ -91,6 +91,12 @@ bitflags! {\n         const NO_COVERAGE               = 1 << 15;\n         /// `#[used(linker)]`: indicates that LLVM nor the linker can eliminate this function.\n         const USED_LINKER               = 1 << 16;\n+        /// `#[rustc_deallocator]`: a hint to LLVM that the function only deallocates memory.\n+        const DEALLOCATOR               = 1 << 17;\n+        /// `#[rustc_reallocator]`: a hint to LLVM that the function only reallocates memory.\n+        const REALLOCATOR               = 1 << 18;\n+        /// `#[rustc_allocator_zeroed]`: a hint to LLVM that the function only allocates zeroed memory.\n+        const ALLOCATOR_ZEROED          = 1 << 19;\n     }\n }\n "}, {"sha": "c75b6772487f9f6fb4e2dae1ee3b3ad737525308", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -1202,6 +1202,7 @@ symbols! {\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n+        rustc_allocator_zeroed,\n         rustc_allow_const_fn_unstable,\n         rustc_allow_incoherent_impl,\n         rustc_allowed_through_unstable_modules,\n@@ -1214,6 +1215,7 @@ symbols! {\n         rustc_const_stable,\n         rustc_const_unstable,\n         rustc_conversion_suggestion,\n+        rustc_deallocator,\n         rustc_def_path,\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n@@ -1258,6 +1260,7 @@ symbols! {\n         rustc_private,\n         rustc_proc_macro_decls,\n         rustc_promotable,\n+        rustc_reallocator,\n         rustc_regions,\n         rustc_reservation_impl,\n         rustc_serialize,"}, {"sha": "2159cbd3a24d1d07b69fce03f4b7867ceb6da809", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -2775,6 +2775,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.has_name(sym::rustc_allocator_nounwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n+        } else if attr.has_name(sym::rustc_reallocator) {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::REALLOCATOR;\n+        } else if attr.has_name(sym::rustc_deallocator) {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::DEALLOCATOR;\n+        } else if attr.has_name(sym::rustc_allocator_zeroed) {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR_ZEROED;\n         } else if attr.has_name(sym::naked) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n         } else if attr.has_name(sym::no_mangle) {"}, {"sha": "cc8da7bccff751b89aaacd76518ff88b88698ac8", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -25,15 +25,18 @@ extern \"Rust\" {\n     // (the code expanding that attribute macro generates those functions), or to call\n     // the default implementations in libstd (`__rdl_alloc` etc. in `library/std/src/alloc.rs`)\n     // otherwise.\n-    // The rustc fork of LLVM also special-cases these function names to be able to optimize them\n+    // The rustc fork of LLVM 14 and earlier also special-cases these function names to be able to optimize them\n     // like `malloc`, `realloc`, and `free`, respectively.\n     #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n+    #[cfg_attr(not(bootstrap), rustc_deallocator)]\n     #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n+    #[cfg_attr(not(bootstrap), rustc_reallocator)]\n     #[rustc_allocator_nounwind]\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n+    #[cfg_attr(not(bootstrap), rustc_allocator_zeroed)]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n }"}, {"sha": "bd1a6599c3365c3276e134a85487a939d0cec556", "filename": "src/test/codegen/box-maybe-uninit-llvm14.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -O\n+\n+// Once we're done with llvm 14 and earlier, this test can be deleted.\n+\n+#![crate_type=\"lib\"]\n+\n+use std::mem::MaybeUninit;\n+\n+// Boxing a `MaybeUninit` value should not copy junk from the stack\n+#[no_mangle]\n+pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n+    // CHECK-LABEL: @box_uninitialized\n+    // CHECK-NOT: store\n+    // CHECK-NOT: alloca\n+    // CHECK-NOT: memcpy\n+    // CHECK-NOT: memset\n+    Box::new(MaybeUninit::uninit())\n+}\n+\n+// FIXME: add a test for a bigger box. Currently broken, see\n+// https://github.com/rust-lang/rust/issues/58201.\n+\n+// Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n+// from the CHECK-NOT above. We don't check the attributes here because we can't rely\n+// on all of them being set until LLVM 15.\n+// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}}, i{{[0-9]+.*}})"}, {"sha": "e105e26f16a23c6db15cc840c45a946b8794e4ed", "filename": "src/test/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O\n+// min-llvm-version: 15.0\n #![crate_type=\"lib\"]\n \n use std::mem::MaybeUninit;\n@@ -16,3 +17,9 @@ pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n \n // FIXME: add a test for a bigger box. Currently broken, see\n // https://github.com/rust-lang/rust/issues/58201.\n+\n+// Hide the `allocalign` attribute in the declaration of __rust_alloc\n+// from the CHECK-NOT above, and also verify the attributes got set reasonably.\n+// CHECK: declare noalias ptr @__rust_alloc(i{{[0-9]+}}, i{{[0-9]+}} allocalign) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n+\n+// CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "08302796c41a1e14a8cbdb124d6078442e857eb5", "filename": "src/test/codegen/vec-calloc-llvm14.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fvec-calloc-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fvec-calloc-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-calloc-llvm14.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -0,0 +1,144 @@\n+// compile-flags: -O\n+// only-x86_64\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @vec_zero_bytes\n+#[no_mangle]\n+pub fn vec_zero_bytes(n: usize) -> Vec<u8> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+    // CHECK-NOT: call {{.*}}llvm.memset\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+    // CHECK-NOT: call {{.*}}llvm.memset\n+\n+    // CHECK: ret void\n+    vec![0; n]\n+}\n+\n+// CHECK-LABEL: @vec_one_bytes\n+#[no_mangle]\n+pub fn vec_one_bytes(n: usize) -> Vec<u8> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: call {{.*}}__rust_alloc(\n+    // CHECK: call {{.*}}llvm.memset\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: ret void\n+    vec![1; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_scalar\n+#[no_mangle]\n+pub fn vec_zero_scalar(n: usize) -> Vec<i32> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![0; n]\n+}\n+\n+// CHECK-LABEL: @vec_one_scalar\n+#[no_mangle]\n+pub fn vec_one_scalar(n: usize) -> Vec<i32> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: call {{.*}}__rust_alloc(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: ret void\n+    vec![1; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_rgb48\n+#[no_mangle]\n+pub fn vec_zero_rgb48(n: usize) -> Vec<[u16; 3]> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![[0, 0, 0]; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_array_16\n+#[no_mangle]\n+pub fn vec_zero_array_16(n: usize) -> Vec<[i64; 16]> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![[0_i64; 16]; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_tuple\n+#[no_mangle]\n+pub fn vec_zero_tuple(n: usize) -> Vec<(i16, u8, char)> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![(0, 0, '\\0'); n]\n+}\n+\n+// CHECK-LABEL: @vec_non_zero_tuple\n+#[no_mangle]\n+pub fn vec_non_zero_tuple(n: usize) -> Vec<(i16, u8, char)> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: call {{.*}}__rust_alloc(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: ret void\n+    vec![(0, 0, 'A'); n]\n+}"}, {"sha": "435a4ab5187f6ed5c468c4e26d4051ae22f04ea0", "filename": "src/test/codegen/vec-calloc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6d601c8a83284d6b23c253a3e2a060fd197316/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-calloc.rs?ref=4d6d601c8a83284d6b23c253a3e2a060fd197316", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -O\n // only-x86_64\n // ignore-debug\n+// min-llvm-version: 15.0\n \n #![crate_type = \"lib\"]\n \n@@ -142,3 +143,8 @@ pub fn vec_non_zero_tuple(n: usize) -> Vec<(i16, u8, char)> {\n     // CHECK: ret void\n     vec![(0, 0, 'A'); n]\n }\n+\n+// Ensure that __rust_alloc_zeroed gets the right attributes for LLVM to optimize it away.\n+// CHECK: declare noalias ptr @__rust_alloc_zeroed(i64, i64 allocalign) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n+\n+// CHECK-DAG: attributes [[RUST_ALLOC_ZEROED_ATTRS]] = { {{.*}} allockind(\"alloc,zeroed,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}]}