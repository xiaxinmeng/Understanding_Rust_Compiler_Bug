{"sha": "e0eb1280867e14bdb123c3b19eda93b8906899d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWIxMjgwODY3ZTE0YmRiMTIzYzNiMTllZGE5M2I4OTA2ODk5ZDI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-11T06:25:40Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-22T23:40:06Z"}, "message": "std::rand: documentation & references.\n\nMost importantly, links to the papers/references for the core\nalgorithms (the RNG ones & the distribution ones).", "tree": {"sha": "2a6ad1ea1e126c71693bbefd14cb253b7ad7dafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a6ad1ea1e126c71693bbefd14cb253b7ad7dafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0eb1280867e14bdb123c3b19eda93b8906899d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb1280867e14bdb123c3b19eda93b8906899d2", "html_url": "https://github.com/rust-lang/rust/commit/e0eb1280867e14bdb123c3b19eda93b8906899d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb1280867e14bdb123c3b19eda93b8906899d2/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148f737c199a5c9dd6d349751072add3cc458533", "url": "https://api.github.com/repos/rust-lang/rust/commits/148f737c199a5c9dd6d349751072add3cc458533", "html_url": "https://github.com/rust-lang/rust/commit/148f737c199a5c9dd6d349751072add3cc458533"}], "stats": {"total": 146, "additions": 102, "deletions": 44}, "files": [{"sha": "23726490b4a240f833077de8acadd2f54c8f6a35", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=e0eb1280867e14bdb123c3b19eda93b8906899d2", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Sampling from random distributions\n+/*!\n+Sampling from random distributions.\n \n-// Some implementations use the Ziggurat method\n-// https://en.wikipedia.org/wiki/Ziggurat_algorithm\n-//\n-// The version used here is ZIGNOR [Doornik 2005, \"An Improved\n-// Ziggurat Method to Generate Normal Random Samples\"] which is slower\n-// (about double, it generates an extra random number) than the\n-// canonical version [Marsaglia & Tsang 2000, \"The Ziggurat Method for\n-// Generating Random Variables\"], but more robust. If one wanted, one\n-// could implement VIZIGNOR the ZIGNOR paper for more speed.\n+This is a generalization of `Rand` to allow parameters to control the\n+exact properties of the generated values, e.g. the mean and standard\n+deviation of a normal distribution. The `Sample` trait is the most\n+general, and allows for generating values that change some state\n+internally. The `IndependentSample` trait is for generating values\n+that do not need to record state.\n+\n+*/\n \n use num;\n use rand::{Rng,Rand};\n@@ -27,16 +27,18 @@ pub use self::range::Range;\n \n pub mod range;\n \n-/// Things that can be used to create a random instance of `Support`.\n+/// Types that can be used to create a random instance of `Support`.\n pub trait Sample<Support> {\n     /// Generate a random value of `Support`, using `rng` as the\n     /// source of randomness.\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> Support;\n }\n \n-/// `Sample`s that do not require keeping track of state, so each\n-/// sample is (statistically) independent of all others, assuming the\n-/// `Rng` used has this property.\n+/// `Sample`s that do not require keeping track of state.\n+///\n+/// Since no state is recored, each sample is (statistically)\n+/// independent of all others, assuming the `Rng` used has this\n+/// property.\n // XXX maybe having this separate is overkill (the only reason is to\n // take &self rather than &mut self)? or maybe this should be the\n // trait called `Sample` and the other should be `DependentSample`.\n@@ -91,13 +93,19 @@ fn ziggurat<R:Rng>(rng: &mut R,\n     }\n }\n \n-/// A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a\n-/// standard normal, or Gaussian). Multiplying the generated values by the\n-/// desired standard deviation `sigma` then adding the desired mean `mu` will\n-/// give N(mu, sigma^2) distributed random numbers.\n+/// A wrapper around an `f64` to generate N(0, 1) random numbers\n+/// (a.k.a.  a standard normal, or Gaussian).\n ///\n-/// Note that this has to be unwrapped before use as an `f64` (using either\n-/// `*` or `cast::transmute` is safe).\n+/// See `Normal` for the general normal distribution. That this has to\n+/// be unwrapped before use as an `f64` (using either `*` or\n+/// `cast::transmute` is safe).\n+///\n+/// Implemented via the ZIGNOR variant[1] of the Ziggurat method.\n+///\n+/// [1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to\n+/// Generate Normal Random\n+/// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n+/// College, Oxford\n pub struct StandardNormal(f64);\n \n impl Rand for StandardNormal {\n@@ -135,8 +143,10 @@ impl Rand for StandardNormal {\n     }\n }\n \n-/// The `N(mean, std_dev**2)` distribution, i.e. samples from a normal\n-/// distribution with mean `mean` and standard deviation `std_dev`.\n+/// The normal distribution `N(mean, std_dev**2)`.\n+///\n+/// This uses the ZIGNOR variant of the Ziggurat method, see\n+/// `StandardNormal` for more details.\n ///\n /// # Example\n ///\n@@ -175,12 +185,20 @@ impl IndependentSample<f64> for Normal {\n     }\n }\n \n-/// A wrapper around an `f64` to generate Exp(1) random numbers. Dividing by\n-/// the desired rate `lambda` will give Exp(lambda) distributed random\n-/// numbers.\n+/// A wrapper around an `f64` to generate Exp(1) random numbers.\n ///\n-/// Note that this has to be unwrapped before use as an `f64` (using either\n+/// See `Exp` for the general exponential distribution.Note that this\n+ // has to be unwrapped before use as an `f64` (using either\n /// `*` or `cast::transmute` is safe).\n+///\n+/// Implemented via the ZIGNOR variant[1] of the Ziggurat method. The\n+/// exact description in the paper was adjusted to use tables for the\n+/// exponential distribution rather than normal.\n+///\n+/// [1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to\n+/// Generate Normal Random\n+/// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n+/// College, Oxford\n pub struct Exp1(f64);\n \n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n@@ -203,8 +221,7 @@ impl Rand for Exp1 {\n     }\n }\n \n-/// The `Exp(lambda)` distribution; i.e. samples from the exponential\n-/// distribution with rate parameter `lambda`.\n+/// The exponential distribution `Exp(lambda)`.\n ///\n /// This distribution has density function: `f(x) = lambda *\n /// exp(-lambda * x)` for `x > 0`."}, {"sha": "2fd58d0314e7648701436355b03c9ab0cb323636", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=e0eb1280867e14bdb123c3b19eda93b8906899d2", "patch": "@@ -18,10 +18,15 @@ use option::{None, Some};\n static RAND_SIZE_LEN: u32 = 8;\n static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n \n-/// A random number generator that uses the [ISAAC\n-/// algorithm](http://en.wikipedia.org/wiki/ISAAC_%28cipher%29).\n+/// A random number generator that uses the ISAAC algorithm[1].\n ///\n-/// The ISAAC algorithm is suitable for cryptographic purposes.\n+/// The ISAAC algorithm is generally accepted as suitable for\n+/// cryptographic purposes, but this implementation has not be\n+/// verified as such. Prefer a generator like `OSRng` that defers to\n+/// the operating system for cases that need high security.\n+///\n+/// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n+/// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n pub struct IsaacRng {\n     priv cnt: u32,\n     priv rsl: [u32, .. RAND_SIZE],\n@@ -212,11 +217,16 @@ impl<'self> SeedableRng<&'self [u32]> for IsaacRng {\n static RAND_SIZE_64_LEN: uint = 8;\n static RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n \n-/// A random number generator that uses the 64-bit variant of the\n-/// [ISAAC\n-/// algorithm](http://en.wikipedia.org/wiki/ISAAC_%28cipher%29).\n+/// A random number generator that uses ISAAC-64[1], the 64-bit\n+/// variant of the ISAAC algorithm.\n+///\n+/// The ISAAC algorithm is generally accepted as suitable for\n+/// cryptographic purposes, but this implementation has not be\n+/// verified as such. Prefer a generator like `OSRng` that defers to\n+/// the operating system for cases that need high security.\n ///\n-/// The ISAAC algorithm is suitable for cryptographic purposes.\n+/// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n+/// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n pub struct Isaac64Rng {\n     priv cnt: uint,\n     priv rsl: [u64, .. RAND_SIZE_64],"}, {"sha": "b94d8d72e372a6504f44684d4b08f8809d23fb68", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=e0eb1280867e14bdb123c3b19eda93b8906899d2", "patch": "@@ -28,6 +28,23 @@ from an operating-system source of randomness, e.g. `/dev/urandom` on\n Unix systems, and will automatically reseed itself from this source\n after generating 32 KiB of random data.\n \n+# Cryptographic security\n+\n+An application that requires random numbers for cryptographic purposes\n+should prefer `OSRng`, which reads randomness from one of the source\n+that the operating system provides (e.g. `/dev/urandom` on\n+Unixes). The other random number generators provided by this module\n+are either known to be insecure (`XorShiftRng`), or are not verified\n+to be secure (`IsaacRng`, `Isaac64Rng` and `StdRng`).\n+\n+*Note*: on Linux, `/dev/random` is more secure than `/dev/urandom`,\n+but it is a blocking RNG, and will wait until it has determined that\n+it has collected enough entropy to fulfill a request for random\n+data. It can be used with the `Rng` trait provided by this module by\n+opening the file and passing it to `reader::ReaderRng`. Since it\n+blocks, `/dev/random` should only be used to retrieve small amounts of\n+randomness.\n+\n # Examples\n \n ```rust\n@@ -516,8 +533,8 @@ pub trait SeedableRng<Seed>: Rng {\n \n /// Create a random number generator with a default algorithm and seed.\n ///\n-/// It returns the cryptographically-safest `Rng` algorithm currently\n-/// available in Rust. If you require a specifically seeded `Rng` for\n+/// It returns the strongest `Rng` algorithm currently implemented in\n+/// pure Rust. If you require a specifically seeded `Rng` for\n /// consistency over time you should pick one algorithm and create the\n /// `Rng` yourself.\n ///\n@@ -592,12 +609,16 @@ pub fn weak_rng() -> XorShiftRng {\n     XorShiftRng::new()\n }\n \n-/// An [Xorshift random number\n-/// generator](http://en.wikipedia.org/wiki/Xorshift).\n+/// An Xorshift[1] random number\n+/// generator.\n ///\n /// The Xorshift algorithm is not suitable for cryptographic purposes\n /// but is very fast. If you do not know for sure that it fits your\n-/// requirements, use a more secure one such as `IsaacRng`.\n+/// requirements, use a more secure one such as `IsaacRng` or `OSRng`.\n+///\n+/// [1]: Marsaglia, George (July 2003). [\"Xorshift\n+/// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n+/// Statistical Software*. Vol. 8 (Issue 14).\n pub struct XorShiftRng {\n     priv x: u32,\n     priv y: u32,"}, {"sha": "5ed8d6b10d1be2f364eafde183d59b37ce936f30", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=e0eb1280867e14bdb123c3b19eda93b8906899d2", "patch": "@@ -30,17 +30,25 @@ type HCRYPTPROV = c_long;\n // assume they work when we call them.\n \n /// A random number generator that retrieves randomness straight from\n-/// the operating system. On Unix-like systems this reads from\n-/// `/dev/urandom`, on Windows this uses `CryptGenRandom`.\n+/// the operating system. Platform sources:\n+///\n+/// - Unix-like systems (Linux, Android, Mac OSX): read directly from\n+///   `/dev/urandom`.\n+/// - Windows: calls `CryptGenRandom`, using the default cryptographic\n+///   service provider with the `PROV_RSA_FULL` type.\n ///\n /// This does not block.\n #[cfg(unix)]\n pub struct OSRng {\n     priv inner: ReaderRng<file::FileStream>\n }\n /// A random number generator that retrieves randomness straight from\n-/// the operating system. On Unix-like systems this reads from\n-/// `/dev/urandom`, on Windows this uses `CryptGenRandom`.\n+/// the operating system. Platform sources:\n+///\n+/// - Unix-like systems (Linux, Android, Mac OSX): read directly from\n+///   `/dev/urandom`.\n+/// - Windows: calls `CryptGenRandom`, using the default cryptographic\n+///   service provider with the `PROV_RSA_FULL` type.\n ///\n /// This does not block.\n #[cfg(windows)]"}, {"sha": "77020537661600115a4e2565895f243257626c53", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1280867e14bdb123c3b19eda93b8906899d2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=e0eb1280867e14bdb123c3b19eda93b8906899d2", "patch": "@@ -672,6 +672,8 @@ extern \"C\" CDECL void\n rust_win32_rand_acquire(HCRYPTPROV* phProv) {\n     win32_require\n         (_T(\"CryptAcquireContext\"),\n+         // changes to the parameters here should be reflected in the docs of\n+         // std::rand::os::OSRng\n          CryptAcquireContext(phProv, NULL, NULL, PROV_RSA_FULL,\n                              CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n "}]}