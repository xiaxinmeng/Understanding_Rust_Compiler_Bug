{"sha": "dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDI3NjYzZGNhNmI5ZTBlODRjMDRhNGQ3MzE5Y2NmOGE4Nzk5MDk=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-08-16T02:14:53Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-08-16T02:14:53Z"}, "message": "add json emit mode (#3735)", "tree": {"sha": "dd2146866cd634422e1ec703556dd582c4ed6598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2146866cd634422e1ec703556dd582c4ed6598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "html_url": "https://github.com/rust-lang/rust/commit/dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541d9a865989459337131f1e130e7d4732acd47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/541d9a865989459337131f1e130e7d4732acd47f", "html_url": "https://github.com/rust-lang/rust/commit/541d9a865989459337131f1e130e7d4732acd47f"}], "stats": {"total": 470, "additions": 458, "deletions": 12}, "files": [{"sha": "7a97d31bab9c7ac70162cd1c066fa09ff14d2614", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -220,6 +220,7 @@ needs to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n   | stdout | writes output to stdout | No |\n   | coverage | displays how much of the input file was processed | Yes |\n   | checkstyle | emits in a checkstyle format | Yes |\n+  | json | emits diffs in a json format | Yes |\n \n ## License\n "}, {"sha": "9d3be60ac8f053ffce949d5217b14b6e37546c23", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -98,7 +98,7 @@ fn make_opts() -> Options {\n     );\n     let is_nightly = is_nightly();\n     let emit_opts = if is_nightly {\n-        \"[files|stdout|coverage|checkstyle]\"\n+        \"[files|stdout|coverage|checkstyle|json]\"\n     } else {\n         \"[files|stdout]\"\n     };\n@@ -631,6 +631,7 @@ fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode, FailureError> {\n         \"stdout\" => Ok(EmitMode::Stdout),\n         \"coverage\" => Ok(EmitMode::Coverage),\n         \"checkstyle\" => Ok(EmitMode::Checkstyle),\n+        \"json\" => Ok(EmitMode::Json),\n         _ => Err(format_err!(\"Invalid value for `--emit`\")),\n     }\n }"}, {"sha": "d2063650ccb1cee3b5c548920510e1e155aeae59", "filename": "src/config/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -119,6 +119,9 @@ pub enum EmitMode {\n     Coverage,\n     /// Unfancy stdout\n     Checkstyle,\n+    /// Writes the resulting diffs in a JSON format. Returns an empty array\n+    /// `[]` if there were no diffs.\n+    Json,\n     /// Output the changed lines (for internal value only)\n     ModifiedLines,\n     /// Checks if a diff can be generated. If so, rustfmt outputs a diff and"}, {"sha": "dc2c99a301e38bd2a03abdd98ea7fc8b524ea82d", "filename": "src/emitter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -2,6 +2,7 @@ pub(crate) use self::checkstyle::*;\n pub(crate) use self::diff::*;\n pub(crate) use self::files::*;\n pub(crate) use self::files_with_backup::*;\n+pub(crate) use self::json::*;\n pub(crate) use self::modified_lines::*;\n pub(crate) use self::stdout::*;\n use crate::FileName;\n@@ -12,6 +13,7 @@ mod checkstyle;\n mod diff;\n mod files;\n mod files_with_backup;\n+mod json;\n mod modified_lines;\n mod stdout;\n \n@@ -28,7 +30,7 @@ pub(crate) struct EmitterResult {\n \n pub(crate) trait Emitter {\n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         output: &mut dyn Write,\n         formatted_file: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error>;"}, {"sha": "e8f8ec86cf1778e7b892abbd6e89c9bbf76e739d", "filename": "src/emitter/checkstyle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -21,7 +21,7 @@ impl Emitter for CheckstyleEmitter {\n     }\n \n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         output: &mut dyn Write,\n         FormattedFile {\n             filename,"}, {"sha": "08a42b4679db9824b0baeb8fb453b37319e163d8", "filename": "src/emitter/diff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fdiff.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -14,7 +14,7 @@ impl DiffEmitter {\n \n impl Emitter for DiffEmitter {\n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         _output: &mut dyn Write,\n         FormattedFile {\n             filename,"}, {"sha": "4538a8f4c491ce0e10a078f5427fdd314d454865", "filename": "src/emitter/files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Ffiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Ffiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Ffiles.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -6,7 +6,7 @@ pub(crate) struct FilesEmitter;\n \n impl Emitter for FilesEmitter {\n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         _output: &mut dyn Write,\n         FormattedFile {\n             filename,"}, {"sha": "4c15f6fa5ec7ac61530858e535b25dd5843014aa", "filename": "src/emitter/files_with_backup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Ffiles_with_backup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Ffiles_with_backup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Ffiles_with_backup.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -6,7 +6,7 @@ pub(crate) struct FilesWithBackupEmitter;\n \n impl Emitter for FilesWithBackupEmitter {\n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         _output: &mut dyn Write,\n         FormattedFile {\n             filename,"}, {"sha": "269dd2d4daf57d81aa9fa23e73a11702bf35e62d", "filename": "src/emitter/json.rs", "status": "added", "additions": 349, "deletions": 0, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fjson.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -0,0 +1,349 @@\n+use super::*;\n+use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n+use serde::Serialize;\n+use serde_json::to_string as to_json_string;\n+use std::io::{self, Write};\n+use std::path::Path;\n+\n+#[derive(Debug, Default)]\n+pub(crate) struct JsonEmitter {\n+    num_files: u32,\n+}\n+\n+#[derive(Debug, Default, Serialize)]\n+struct MismatchedBlock {\n+    original_begin_line: u32,\n+    original_end_line: u32,\n+    expected_begin_line: u32,\n+    expected_end_line: u32,\n+    original: String,\n+    expected: String,\n+}\n+\n+#[derive(Debug, Default, Serialize)]\n+struct MismatchedFile {\n+    name: String,\n+    mismatches: Vec<MismatchedBlock>,\n+}\n+\n+impl Emitter for JsonEmitter {\n+    fn emit_header(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n+        write!(output, \"[\")?;\n+        Ok(())\n+    }\n+\n+    fn emit_footer(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n+        write!(output, \"]\")?;\n+        Ok(())\n+    }\n+\n+    fn emit_formatted_file(\n+        &mut self,\n+        output: &mut dyn Write,\n+        FormattedFile {\n+            filename,\n+            original_text,\n+            formatted_text,\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        const CONTEXT_SIZE: usize = 0;\n+        let filename = ensure_real_path(filename);\n+        let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n+        let has_diff = !diff.is_empty();\n+\n+        if has_diff {\n+            output_json_file(output, filename, diff, self.num_files)?;\n+            self.num_files += 1;\n+        }\n+\n+        Ok(EmitterResult { has_diff })\n+    }\n+}\n+\n+fn output_json_file<T>(\n+    mut writer: T,\n+    filename: &Path,\n+    diff: Vec<Mismatch>,\n+    num_emitted_files: u32,\n+) -> Result<(), io::Error>\n+where\n+    T: Write,\n+{\n+    let mut mismatches = vec![];\n+    for mismatch in diff {\n+        let original_begin_line = mismatch.line_number_orig;\n+        let expected_begin_line = mismatch.line_number;\n+        let mut original_end_line = original_begin_line;\n+        let mut expected_end_line = expected_begin_line;\n+        let mut original_line_counter = 0;\n+        let mut expected_line_counter = 0;\n+        let mut original_lines = vec![];\n+        let mut expected_lines = vec![];\n+\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Expected(msg) => {\n+                    expected_end_line = expected_begin_line + expected_line_counter;\n+                    expected_line_counter += 1;\n+                    expected_lines.push(msg)\n+                }\n+                DiffLine::Resulting(msg) => {\n+                    original_end_line = original_begin_line + original_line_counter;\n+                    original_line_counter += 1;\n+                    original_lines.push(msg)\n+                }\n+                DiffLine::Context(_) => continue,\n+            }\n+        }\n+\n+        mismatches.push(MismatchedBlock {\n+            original_begin_line,\n+            original_end_line,\n+            expected_begin_line,\n+            expected_end_line,\n+            original: original_lines.join(\"\\n\"),\n+            expected: expected_lines.join(\"\\n\"),\n+        });\n+    }\n+    let json = to_json_string(&MismatchedFile {\n+        name: String::from(filename.to_str().unwrap()),\n+        mismatches,\n+    })?;\n+    let prefix = if num_emitted_files > 0 { \",\" } else { \"\" };\n+    write!(writer, \"{}{}\", prefix, &json)?;\n+    Ok(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::FileName;\n+    use std::path::PathBuf;\n+\n+    #[test]\n+    fn expected_line_range_correct_when_single_line_split() {\n+        let file = \"foo/bar.rs\";\n+        let mismatched_file = MismatchedFile {\n+            name: String::from(file),\n+            mismatches: vec![MismatchedBlock {\n+                original_begin_line: 79,\n+                original_end_line: 79,\n+                expected_begin_line: 79,\n+                expected_end_line: 82,\n+                original: String::from(\"fn Foo<T>() where T: Bar {\"),\n+                expected: String::from(\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"),\n+            }],\n+        };\n+        let mismatch = Mismatch {\n+            line_number: 79,\n+            line_number_orig: 79,\n+            lines: vec![\n+                DiffLine::Resulting(String::from(\"fn Foo<T>() where T: Bar {\")),\n+                DiffLine::Expected(String::from(\"fn Foo<T>()\")),\n+                DiffLine::Expected(String::from(\"where\")),\n+                DiffLine::Expected(String::from(\"    T: Bar,\")),\n+                DiffLine::Expected(String::from(\"{\")),\n+            ],\n+        };\n+\n+        let mut writer = Vec::new();\n+        let exp_json = to_json_string(&mismatched_file).unwrap();\n+        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n+        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+    }\n+\n+    #[test]\n+    fn context_lines_ignored() {\n+        let file = \"src/lib.rs\";\n+        let mismatched_file = MismatchedFile {\n+            name: String::from(file),\n+            mismatches: vec![MismatchedBlock {\n+                original_begin_line: 5,\n+                original_end_line: 5,\n+                expected_begin_line: 5,\n+                expected_end_line: 5,\n+                original: String::from(\n+                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\",\n+                ),\n+                expected: String::from(\n+                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\",\n+                ),\n+            }],\n+        };\n+        let mismatch = Mismatch {\n+            line_number: 5,\n+            line_number_orig: 5,\n+            lines: vec![\n+                DiffLine::Context(String::new()),\n+                DiffLine::Resulting(String::from(\n+                    \"fn foo(_x: &u64) -> Option<&(dyn::std::error::Error + 'static)> {\",\n+                )),\n+                DiffLine::Context(String::new()),\n+                DiffLine::Expected(String::from(\n+                    \"fn foo(_x: &u64) -> Option<&(dyn ::std::error::Error + 'static)> {\",\n+                )),\n+                DiffLine::Context(String::new()),\n+            ],\n+        };\n+\n+        let mut writer = Vec::new();\n+        let exp_json = to_json_string(&mismatched_file).unwrap();\n+        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n+        assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n+    }\n+\n+    #[test]\n+    fn emits_empty_array_on_no_diffs() {\n+        let mut writer = Vec::new();\n+        let mut emitter = JsonEmitter::default();\n+        let _ = emitter.emit_header(&mut writer);\n+        let result = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(\"src/lib.rs\")),\n+                    original_text: \"fn empty() {}\\n\",\n+                    formatted_text: \"fn empty() {}\\n\",\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter.emit_footer(&mut writer);\n+        assert_eq!(result.has_diff, false);\n+        assert_eq!(&writer[..], \"[]\".as_bytes());\n+    }\n+\n+    #[test]\n+    fn emits_array_with_files_with_diffs() {\n+        let file_name = \"src/bin.rs\";\n+        let original = vec![\n+            \"fn main() {\",\n+            \"println!(\\\"Hello, world!\\\");\",\n+            \"}\",\n+            \"\",\n+            \"#[cfg(test)]\",\n+            \"mod tests {\",\n+            \"#[test]\",\n+            \"fn it_works() {\",\n+            \"    assert_eq!(2 + 2, 4);\",\n+            \"}\",\n+            \"}\",\n+        ];\n+        let formatted = vec![\n+            \"fn main() {\",\n+            \"    println!(\\\"Hello, world!\\\");\",\n+            \"}\",\n+            \"\",\n+            \"#[cfg(test)]\",\n+            \"mod tests {\",\n+            \"    #[test]\",\n+            \"    fn it_works() {\",\n+            \"        assert_eq!(2 + 2, 4);\",\n+            \"    }\",\n+            \"}\",\n+        ];\n+        let mut writer = Vec::new();\n+        let mut emitter = JsonEmitter::default();\n+        let _ = emitter.emit_header(&mut writer);\n+        let result = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(file_name)),\n+                    original_text: &original.join(\"\\n\"),\n+                    formatted_text: &formatted.join(\"\\n\"),\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter.emit_footer(&mut writer);\n+        let exp_json = to_json_string(&MismatchedFile {\n+            name: String::from(file_name),\n+            mismatches: vec![\n+                MismatchedBlock {\n+                    original_begin_line: 2,\n+                    original_end_line: 2,\n+                    expected_begin_line: 2,\n+                    expected_end_line: 2,\n+                    original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n+                    expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+                },\n+                MismatchedBlock {\n+                    original_begin_line: 7,\n+                    original_end_line: 10,\n+                    expected_begin_line: 7,\n+                    expected_end_line: 10,\n+                    original: String::from(\n+                        \"#[test]\\nfn it_works() {\\n    assert_eq!(2 + 2, 4);\\n}\",\n+                    ),\n+                    expected: String::from(\n+                        \"    #[test]\\n    fn it_works() {\\n        assert_eq!(2 + 2, 4);\\n    }\",\n+                    ),\n+                },\n+            ],\n+        })\n+        .unwrap();\n+        assert_eq!(result.has_diff, true);\n+        assert_eq!(&writer[..], format!(\"[{}]\", exp_json).as_bytes());\n+    }\n+\n+    #[test]\n+    fn emits_valid_json_with_multiple_files() {\n+        let bin_file = \"src/bin.rs\";\n+        let bin_original = vec![\"fn main() {\", \"println!(\\\"Hello, world!\\\");\", \"}\"];\n+        let bin_formatted = vec![\"fn main() {\", \"    println!(\\\"Hello, world!\\\");\", \"}\"];\n+        let lib_file = \"src/lib.rs\";\n+        let lib_original = vec![\"fn greet() {\", \"println!(\\\"Greetings!\\\");\", \"}\"];\n+        let lib_formatted = vec![\"fn greet() {\", \"    println!(\\\"Greetings!\\\");\", \"}\"];\n+        let mut writer = Vec::new();\n+        let mut emitter = JsonEmitter::default();\n+        let _ = emitter.emit_header(&mut writer);\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(bin_file)),\n+                    original_text: &bin_original.join(\"\\n\"),\n+                    formatted_text: &bin_formatted.join(\"\\n\"),\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(lib_file)),\n+                    original_text: &lib_original.join(\"\\n\"),\n+                    formatted_text: &lib_formatted.join(\"\\n\"),\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter.emit_footer(&mut writer);\n+        let exp_bin_json = to_json_string(&MismatchedFile {\n+            name: String::from(bin_file),\n+            mismatches: vec![MismatchedBlock {\n+                original_begin_line: 2,\n+                original_end_line: 2,\n+                expected_begin_line: 2,\n+                expected_end_line: 2,\n+                original: String::from(\"println!(\\\"Hello, world!\\\");\"),\n+                expected: String::from(\"    println!(\\\"Hello, world!\\\");\"),\n+            }],\n+        })\n+        .unwrap();\n+        let exp_lib_json = to_json_string(&MismatchedFile {\n+            name: String::from(lib_file),\n+            mismatches: vec![MismatchedBlock {\n+                original_begin_line: 2,\n+                original_end_line: 2,\n+                expected_begin_line: 2,\n+                expected_end_line: 2,\n+                original: String::from(\"println!(\\\"Greetings!\\\");\"),\n+                expected: String::from(\"    println!(\\\"Greetings!\\\");\"),\n+            }],\n+        })\n+        .unwrap();\n+        assert_eq!(\n+            &writer[..],\n+            format!(\"[{},{}]\", exp_bin_json, exp_lib_json).as_bytes()\n+        );\n+    }\n+}"}, {"sha": "94ff570a8a9cb2d3a1ae59f01bc59d08827e3cd3", "filename": "src/emitter/modified_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fmodified_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fmodified_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fmodified_lines.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -7,7 +7,7 @@ pub(crate) struct ModifiedLinesEmitter;\n \n impl Emitter for ModifiedLinesEmitter {\n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         output: &mut dyn Write,\n         FormattedFile {\n             original_text,"}, {"sha": "9fddd515e49218d061c36dffb4921076368b372c", "filename": "src/emitter/stdout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fstdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Femitter%2Fstdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fstdout.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -15,7 +15,7 @@ impl StdoutEmitter {\n \n impl Emitter for StdoutEmitter {\n     fn emit_formatted_file(\n-        &self,\n+        &mut self,\n         output: &mut dyn Write,\n         FormattedFile {\n             filename,"}, {"sha": "ee44549b2bc45864d6e393191b3c7666802fcc29", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -235,7 +235,8 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n         report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n-            match source_file::write_file(Some(source_map), &path, &result, out, &*self.emitter) {\n+            match source_file::write_file(Some(source_map), &path, &result, out, &mut *self.emitter)\n+            {\n                 Ok(ref result) if result.has_diff => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed"}, {"sha": "dbb7d2e0e17f4190a97489f2f1e61b98e0aa7db9", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -486,6 +486,7 @@ pub(crate) fn create_emitter<'a>(config: &Config) -> Box<dyn Emitter + 'a> {\n         EmitMode::Stdout | EmitMode::Coverage => {\n             Box::new(emitter::StdoutEmitter::new(config.verbose()))\n         }\n+        EmitMode::Json => Box::new(emitter::JsonEmitter::default()),\n         EmitMode::ModifiedLines => Box::new(emitter::ModifiedLinesEmitter::default()),\n         EmitMode::Checkstyle => Box::new(emitter::CheckstyleEmitter::default()),\n         EmitMode::Diff => Box::new(emitter::DiffEmitter::new(config.clone())),"}, {"sha": "28366ca2485c16f1adadbc3f8d787f16a5efd0a5", "filename": "src/source_file.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -28,11 +28,11 @@ pub(crate) fn write_all_files<T>(\n where\n     T: Write,\n {\n-    let emitter = create_emitter(config);\n+    let mut emitter = create_emitter(config);\n \n     emitter.emit_header(out)?;\n     for &(ref filename, ref text) in source_file {\n-        write_file(None, filename, text, out, &*emitter)?;\n+        write_file(None, filename, text, out, &mut *emitter)?;\n     }\n     emitter.emit_footer(out)?;\n \n@@ -44,7 +44,7 @@ pub(crate) fn write_file<T>(\n     filename: &FileName,\n     formatted_text: &str,\n     out: &mut T,\n-    emitter: &dyn Emitter,\n+    emitter: &mut dyn Emitter,\n ) -> Result<emitter::EmitterResult, io::Error>\n where\n     T: Write,"}, {"sha": "bd6613e148855161f17a8191d26de0b725f5bbe6", "filename": "src/test/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -200,6 +200,13 @@ fn checkstyle_test() {\n     assert_output(Path::new(filename), Path::new(expected_filename));\n }\n \n+#[test]\n+fn json_test() {\n+    let filename = \"tests/writemode/source/json.rs\";\n+    let expected_filename = \"tests/writemode/target/output.json\";\n+    assert_output(Path::new(filename), Path::new(expected_filename));\n+}\n+\n #[test]\n fn modified_test() {\n     use std::io::BufRead;"}, {"sha": "89dcf694183b484931416c9b0447f6094e7c909a", "filename": "tests/writemode/source/json.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/tests%2Fwritemode%2Fsource%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/tests%2Fwritemode%2Fsource%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fsource%2Fjson.rs?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -0,0 +1,80 @@\n+// rustfmt-fn_single_line: true\n+// rustfmt-emit_mode: json\n+// Test single-line functions.\n+\n+fn foo_expr() {\n+    1\n+}\n+\n+fn foo_stmt() {\n+    foo();\n+}\n+\n+fn foo_decl_local()  {\n+    let z = 5;\n+   }\n+\n+fn    foo_decl_item(x: &mut i32) {\n+    x = 3;\n+}\n+\n+   fn empty()     {\n+\n+}\n+\n+fn foo_return() -> String {\n+    \"yay\"\n+}\n+\n+fn foo_where() -> T where T: Sync {\n+    let x = 2;\n+}\n+\n+fn fooblock() {\n+    {\n+        \"inner-block\"\n+    }\n+}\n+\n+fn fooblock2(x: i32) {\n+    let z = match x {\n+        _ => 2,\n+    };\n+}\n+\n+fn comment() {\n+    // this is a test comment\n+    1\n+}\n+\n+fn comment2() {\n+    // multi-line comment\n+    let z = 2;\n+    1\n+}\n+\n+fn only_comment() {\n+    // Keep this here\n+}\n+\n+fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n+    let z = \"aaaaaaawwwwwwwwwwwwwwwwwwwwwwwwwwww\";\n+}\n+\n+fn lots_of_space                      ()                                                           {\n+                           1                 \n+}\n+\n+fn mac() -> Vec<i32> { vec![] }\n+\n+trait CoolTypes {\n+    fn dummy(&self) {\n+    }\n+}\n+\n+trait CoolerTypes { fn dummy(&self) { \n+}\n+}\n+\n+fn Foo<T>() where T: Bar {\n+}"}, {"sha": "b5f327b0a1ca6ac8d12150e2d2afb236e53e575e", "filename": "tests/writemode/target/output.json", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/tests%2Fwritemode%2Ftarget%2Foutput.json", "raw_url": "https://github.com/rust-lang/rust/raw/dfd27663dca6b9e0e84c04a4d7319ccf8a879909/tests%2Fwritemode%2Ftarget%2Foutput.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Foutput.json?ref=dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "patch": "@@ -0,0 +1 @@\n+[{\"name\":\"tests/writemode/source/json.rs\",\"mismatches\":[{\"original_begin_line\":5,\"original_end_line\":7,\"expected_begin_line\":5,\"expected_end_line\":5,\"original\":\"fn foo_expr() {\\n    1\\n}\",\"expected\":\"fn foo_expr() { 1 }\"},{\"original_begin_line\":9,\"original_end_line\":11,\"expected_begin_line\":7,\"expected_end_line\":7,\"original\":\"fn foo_stmt() {\\n    foo();\\n}\",\"expected\":\"fn foo_stmt() { foo(); }\"},{\"original_begin_line\":13,\"original_end_line\":15,\"expected_begin_line\":9,\"expected_end_line\":9,\"original\":\"fn foo_decl_local()  {\\n    let z = 5;\\n   }\",\"expected\":\"fn foo_decl_local() { let z = 5; }\"},{\"original_begin_line\":17,\"original_end_line\":19,\"expected_begin_line\":11,\"expected_end_line\":11,\"original\":\"fn    foo_decl_item(x: &mut i32) {\\n    x = 3;\\n}\",\"expected\":\"fn foo_decl_item(x: &mut i32) { x = 3; }\"},{\"original_begin_line\":21,\"original_end_line\":21,\"expected_begin_line\":13,\"expected_end_line\":13,\"original\":\"   fn empty()     {\",\"expected\":\"fn empty() {}\"},{\"original_begin_line\":23,\"original_end_line\":23,\"expected_begin_line\":15,\"expected_end_line\":15,\"original\":\"}\",\"expected\":\"fn foo_return() -> String { \\\"yay\\\" }\"},{\"original_begin_line\":25,\"original_end_line\":29,\"expected_begin_line\":17,\"expected_end_line\":20,\"original\":\"fn foo_return() -> String {\\n    \\\"yay\\\"\\n}\\n\\nfn foo_where() -> T where T: Sync {\",\"expected\":\"fn foo_where() -> T\\nwhere\\n    T: Sync,\\n{\"},{\"original_begin_line\":64,\"original_end_line\":66,\"expected_begin_line\":55,\"expected_end_line\":55,\"original\":\"fn lots_of_space                      ()                                                           {\\n                           1                 \\n}\",\"expected\":\"fn lots_of_space() { 1 }\"},{\"original_begin_line\":71,\"original_end_line\":72,\"expected_begin_line\":60,\"expected_end_line\":60,\"original\":\"    fn dummy(&self) {\\n    }\",\"expected\":\"    fn dummy(&self) {}\"},{\"original_begin_line\":75,\"original_end_line\":75,\"expected_begin_line\":63,\"expected_end_line\":64,\"original\":\"trait CoolerTypes { fn dummy(&self) { \",\"expected\":\"trait CoolerTypes {\\n    fn dummy(&self) {}\"},{\"original_begin_line\":77,\"original_end_line\":77,\"expected_begin_line\":66,\"expected_end_line\":66,\"original\":\"}\",\"expected\":\"\"},{\"original_begin_line\":79,\"original_end_line\":79,\"expected_begin_line\":67,\"expected_end_line\":70,\"original\":\"fn Foo<T>() where T: Bar {\",\"expected\":\"fn Foo<T>()\\nwhere\\n    T: Bar,\\n{\"}]}]\n\\ No newline at end of file"}]}