{"sha": "f72de476b72d05934b0f375a1f94e580ed7b803b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MmRlNDc2YjcyZDA1OTM0YjBmMzc1YTFmOTRlNTgwZWQ3YjgwM2I=", "commit": {"author": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-21T19:07:05Z"}, "committer": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-21T19:07:05Z"}, "message": "use cfg_if! and use FileSerializationSink for wasi", "tree": {"sha": "2f082a2ae99acca9fe1e3165572429757fd7c666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f082a2ae99acca9fe1e3165572429757fd7c666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f72de476b72d05934b0f375a1f94e580ed7b803b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f72de476b72d05934b0f375a1f94e580ed7b803b", "html_url": "https://github.com/rust-lang/rust/commit/f72de476b72d05934b0f375a1f94e580ed7b803b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f72de476b72d05934b0f375a1f94e580ed7b803b/comments", "author": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb524a455363dc747651eaa2c80773309083c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb524a455363dc747651eaa2c80773309083c52", "html_url": "https://github.com/rust-lang/rust/commit/6fb524a455363dc747651eaa2c80773309083c52"}], "stats": {"total": 94, "additions": 56, "deletions": 38}, "files": [{"sha": "b4bbfe080e2ac9f27bf646aeb01e705fe73c4468", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 56, "deletions": 38, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f72de476b72d05934b0f375a1f94e580ed7b803b/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72de476b72d05934b0f375a1f94e580ed7b803b/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=f72de476b72d05934b0f375a1f94e580ed7b803b", "patch": "@@ -97,14 +97,27 @@ use std::time::{Duration, Instant};\n use measureme::{EventId, EventIdBuilder, SerializableString, StringId};\n use parking_lot::RwLock;\n \n-/// MmapSerializatioSink is faster on macOS and Linux\n-/// but FileSerializationSink is faster on Windows\n-#[cfg(all(not(windows), not(target_arch = \"wasm32\")))]\n-type SerializationSink = measureme::MmapSerializationSink;\n-#[cfg(all(windows, not(target_arch = \"wasm32\")))]\n-type SerializationSink = measureme::FileSerializationSink;\n-#[cfg(target_arch = \"wasm32\")]\n-type SerializationSink = measureme::ByteVecSink;\n+cfg_if! {\n+    if #[cfg(target_arch = \"wasm32\")] {\n+        cfg_if! {\n+            if #[cfg(target_os = \"wasi\")] {\n+                type SerializationSink = measureme::FileSerializationSink;\n+            } else {\n+                type SerializationSink = measureme::ByteVecSink;\n+            }\n+        }\n+    } else {\n+        cfg_if! {\n+            if #[cfg(windows)] {\n+                /// FileSerializationSink is faster on Windows\n+                type SerializationSink = measureme::FileSerializationSink;\n+            } else {\n+                /// MmapSerializatioSink is faster on macOS and Linux\n+                type SerializationSink = measureme::MmapSerializationSink;\n+            }\n+        }\n+    }\n+}\n \n type Profiler = measureme::Profiler<SerializationSink>;\n \n@@ -604,36 +617,41 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n }\n \n // Memory reporting\n-#[cfg(all(unix, not(target_arch = \"wasm32\")))]\n-fn get_resident() -> Option<usize> {\n-    let field = 1;\n-    let contents = fs::read(\"/proc/self/statm\").ok()?;\n-    let contents = String::from_utf8(contents).ok()?;\n-    let s = contents.split_whitespace().nth(field)?;\n-    let npages = s.parse::<usize>().ok()?;\n-    Some(npages * 4096)\n-}\n-\n-#[cfg(all(windows, not(target_arch = \"wasm32\")))]\n-fn get_resident() -> Option<usize> {\n-    use std::mem::{self, MaybeUninit};\n-    use winapi::shared::minwindef::DWORD;\n-    use winapi::um::processthreadsapi::GetCurrentProcess;\n-    use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n-\n-    let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n-    match unsafe {\n-        GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n-    } {\n-        0 => None,\n-        _ => {\n-            let pmc = unsafe { pmc.assume_init() };\n-            Some(pmc.WorkingSetSize as usize)\n+cfg_if! {\n+    if #[cfg(target_arch = \"wasm32\")] {\n+        fn get_resident() -> Option<usize> {\n+            None\n+        }\n+    } else {\n+        cfg_if! {\n+            if #[cfg(windows)] {\n+                fn get_resident() -> Option<usize> {\n+                    use std::mem::{self, MaybeUninit};\n+                    use winapi::shared::minwindef::DWORD;\n+                    use winapi::um::processthreadsapi::GetCurrentProcess;\n+                    use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n+\n+                    let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n+                    match unsafe {\n+                        GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n+                    } {\n+                        0 => None,\n+                        _ => {\n+                            let pmc = unsafe { pmc.assume_init() };\n+                            Some(pmc.WorkingSetSize as usize)\n+                        }\n+                    }\n+                }\n+            } else {\n+                fn get_resident() -> Option<usize> {\n+                    let field = 1;\n+                    let contents = fs::read(\"/proc/self/statm\").ok()?;\n+                    let contents = String::from_utf8(contents).ok()?;\n+                    let s = contents.split_whitespace().nth(field)?;\n+                    let npages = s.parse::<usize>().ok()?;\n+                    Some(npages * 4096)\n+                }\n+            }\n         }\n     }\n }\n-\n-#[cfg(target_arch = \"wasm32\")]\n-fn get_resident() -> Option<usize> {\n-    None\n-}"}]}