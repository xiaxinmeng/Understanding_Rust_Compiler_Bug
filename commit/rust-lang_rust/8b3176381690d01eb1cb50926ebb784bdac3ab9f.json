{"sha": "8b3176381690d01eb1cb50926ebb784bdac3ab9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzE3NjM4MTY5MGQwMWViMWNiNTA5MjZlYmI3ODRiZGFjM2FiOWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-19T10:04:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-19T10:12:30Z"}, "message": "fs test: factor some common code", "tree": {"sha": "6c4d8ef70683a2cbcb1c2d85202aa45ffb788532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4d8ef70683a2cbcb1c2d85202aa45ffb788532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3176381690d01eb1cb50926ebb784bdac3ab9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3176381690d01eb1cb50926ebb784bdac3ab9f", "html_url": "https://github.com/rust-lang/rust/commit/8b3176381690d01eb1cb50926ebb784bdac3ab9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3176381690d01eb1cb50926ebb784bdac3ab9f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12170f10d8e149d62db0924849623bf1a5a38429", "url": "https://api.github.com/repos/rust-lang/rust/commits/12170f10d8e149d62db0924849623bf1a5a38429", "html_url": "https://github.com/rust-lang/rust/commit/12170f10d8e149d62db0924849623bf1a5a38429"}], "stats": {"total": 59, "additions": 20, "deletions": 39}, "files": [{"sha": "a69f9f3b23d8323e9fda2ef54387fe5db4e7159d", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 20, "deletions": 39, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8b3176381690d01eb1cb50926ebb784bdac3ab9f/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3176381690d01eb1cb50926ebb784bdac3ab9f/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=8b3176381690d01eb1cb50926ebb784bdac3ab9f", "patch": "@@ -15,13 +15,18 @@ fn main() {\n     test_rename();\n }\n \n-fn test_file() {\n+/// Prepare: compute filename and make sure the file does not exist.\n+fn prepare(filename: &str) -> PathBuf {\n     let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_file.txt\");\n-    let path = tmp.join(&filename);\n-    let bytes = b\"Hello, World!\\n\";\n+    let path = tmp.join(filename);\n     // Clean the paths for robustness.\n     remove_file(&path).ok();\n+    path\n+}\n+\n+fn test_file() {\n+    let path = prepare(\"miri_test_fs_file.txt\");\n+    let bytes = b\"Hello, World!\\n\";\n \n     // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n     let mut file = File::create(&path).unwrap();\n@@ -45,12 +50,8 @@ fn test_file() {\n }\n \n fn test_file_clone() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_file_clone.txt\");\n-    let path = tmp.join(&filename);\n+    let path = prepare(\"miri_test_fs_file_clone.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n \n     let mut file = File::create(&path).unwrap();\n     file.write(bytes).unwrap();\n@@ -68,12 +69,8 @@ fn test_file_clone() {\n }\n \n fn test_seek() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_seek.txt\");\n-    let path = tmp.join(&filename);\n+    let path = prepare(\"miri_test_fs_seek.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n \n     let mut file = File::create(&path).unwrap();\n     file.write(bytes).unwrap();\n@@ -113,35 +110,26 @@ fn check_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n }\n \n fn test_metadata() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_metadata.txt\");\n-    let path = tmp.join(&filename);\n+    let path = prepare(\"miri_test_fs_metadata.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n \n     let mut file = File::create(&path).unwrap();\n     file.write(bytes).unwrap();\n \n     // Test that metadata of an absolute path is correct.\n     check_metadata(bytes, &path).unwrap();\n     // Test that metadata of a relative path is correct.\n-    std::env::set_current_dir(&tmp).unwrap();\n-    check_metadata(bytes, &filename).unwrap();\n+    std::env::set_current_dir(path.parent().unwrap()).unwrap();\n+    check_metadata(bytes, Path::new(path.file_name().unwrap())).unwrap();\n \n     // Removing file should succeed.\n     remove_file(&path).unwrap();\n }\n \n fn test_symlink() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_link_target.txt\");\n-    let path = tmp.join(&filename);\n-    let symlink_path = tmp.join(\"miri_test_fs_symlink.txt\");\n+    let path = prepare(\"miri_test_fs_link_target.txt\");\n+    let symlink_path = prepare(\"miri_test_fs_symlink.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n-    remove_file(&symlink_path).ok();\n \n     let mut file = File::create(&path).unwrap();\n     file.write(bytes).unwrap();\n@@ -165,12 +153,8 @@ fn test_symlink() {\n }\n \n fn test_errors() {\n-    let tmp = std::env::temp_dir();\n-    let filename = PathBuf::from(\"miri_test_fs_errors.txt\");\n-    let path = tmp.join(&filename);\n+    let path = prepare(\"miri_test_fs_errors.txt\");\n     let bytes = b\"Hello, World!\\n\";\n-    // Clean the paths for robustness.\n-    remove_file(&path).ok();\n \n     // The following tests also check that the `__errno_location()` shim is working properly.\n     // Opening a non-existing file should fail with a \"not found\" error.\n@@ -182,13 +166,10 @@ fn test_errors() {\n }\n \n fn test_rename() {\n-    let tmp = std::env::temp_dir();\n     // Renaming a file should succeed.\n-    let path1 = tmp.join(\"miri_test_fs_rename_source.txt\");\n-    let path2 = tmp.join(\"miri_test_fs_rename_destination.txt\");\n-    // Clean files for robustness.\n-    remove_file(&path1).ok();\n-    remove_file(&path2).ok();\n+    let path1 = prepare(\"miri_test_fs_rename_source.txt\");\n+    let path2 = prepare(\"miri_test_fs_rename_destination.txt\");\n+\n     let file = File::create(&path1).unwrap();\n     drop(file);\n     rename(&path1, &path2).unwrap();"}]}