{"sha": "d9dd008e446ee7cd804f41b3e8a494d0752e3106", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZGQwMDhlNDQ2ZWU3Y2Q4MDRmNDFiM2U4YTQ5NGQwNzUyZTMxMDY=", "commit": {"author": {"name": "rink1969", "email": "rink1969@cryptape.com", "date": "2019-03-12T07:49:26Z"}, "committer": {"name": "rink1969", "email": "rink1969@cryptape.com", "date": "2019-03-14T07:53:08Z"}, "message": "casting integer literal to float is unnecessary", "tree": {"sha": "f4cf6905e991432bb31ca9da6f27812d4ac14053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4cf6905e991432bb31ca9da6f27812d4ac14053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9dd008e446ee7cd804f41b3e8a494d0752e3106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dd008e446ee7cd804f41b3e8a494d0752e3106", "html_url": "https://github.com/rust-lang/rust/commit/d9dd008e446ee7cd804f41b3e8a494d0752e3106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9dd008e446ee7cd804f41b3e8a494d0752e3106/comments", "author": null, "committer": null, "parents": [{"sha": "8fc0a738e3fb82bb956c996438c71272ed92e49c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc0a738e3fb82bb956c996438c71272ed92e49c", "html_url": "https://github.com/rust-lang/rust/commit/8fc0a738e3fb82bb956c996438c71272ed92e49c"}], "stats": {"total": 354, "additions": 219, "deletions": 135}, "files": [{"sha": "4ea341822945eec724be802c98acdb838c60bd57", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisito\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::layout::LayoutOf;\n-use rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n+use rustc::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n@@ -1150,13 +1150,41 @@ fn is_c_void(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'_>) -> bool {\n     false\n }\n \n+/// Returns the mantissa bits wide of a fp type.\n+/// Will return 0 if the type is not a fp\n+fn fp_ty_mantissa_nbits(typ: Ty<'_>) -> u32 {\n+    match typ.sty {\n+        ty::Float(FloatTy::F32) => 23,\n+        ty::Float(FloatTy::F64) | ty::Infer(InferTy::FloatVar(_)) => 52,\n+        _ => 0,\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let ExprKind::Lit(ref lit) = ex.node {\n                 use syntax::ast::{LitIntType, LitKind};\n+                if let LitKind::Int(n, _) = lit.node {\n+                    if cast_to.is_fp() {\n+                        let from_nbits = 128 - n.leading_zeros();\n+                        let to_nbits = fp_ty_mantissa_nbits(cast_to);\n+                        if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                UNNECESSARY_CAST,\n+                                expr.span,\n+                                &format!(\"casting integer literal to {} is unnecessary\", cast_to),\n+                                \"try\",\n+                                format!(\"{}_{}\", n, cast_to),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return;\n+                        }\n+                    }\n+                }\n                 match lit.node {\n                     LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n                     _ => {"}, {"sha": "ab5f9bb4e9d2b6320edd936f09eb3fa1f24b577f", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -8,12 +8,16 @@\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Test clippy::cast_precision_loss\n-    1i32 as f32;\n-    1i64 as f32;\n-    1i64 as f64;\n-    1u32 as f32;\n-    1u64 as f32;\n-    1u64 as f64;\n+    let x0 = 1i32;\n+    x0 as f32;\n+    let x1 = 1i64;\n+    x1 as f32;\n+    x1 as f64;\n+    let x2 = 1u32;\n+    x2 as f32;\n+    let x3 = 1u64;\n+    x3 as f32;\n+    x3 as f64;\n     // Test clippy::cast_possible_truncation\n     1f32 as i32;\n     1f32 as u32;\n@@ -49,6 +53,10 @@ fn main() {\n     1f32 as f32;\n     false as bool;\n     &1i32 as &i32;\n+    // casting integer literal to float is unnecessary\n+    100 as f32;\n+    100 as f64;\n+    100_i32 as f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);"}, {"sha": "9923d35832e2d4c27a5dc45cd0468961f003bd8b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -1,176 +1,194 @@\n error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:11:5\n+  --> $DIR/cast.rs:12:5\n    |\n-LL |     1i32 as f32;\n-   |     ^^^^^^^^^^^\n+LL |     x0 as f32;\n+   |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:12:5\n+  --> $DIR/cast.rs:14:5\n    |\n-LL |     1i64 as f32;\n-   |     ^^^^^^^^^^^\n+LL |     x1 as f32;\n+   |     ^^^^^^^^^\n \n error: casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:13:5\n+  --> $DIR/cast.rs:15:5\n    |\n-LL |     1i64 as f64;\n-   |     ^^^^^^^^^^^\n+LL |     x1 as f64;\n+   |     ^^^^^^^^^\n \n error: casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:14:5\n+  --> $DIR/cast.rs:17:5\n    |\n-LL |     1u32 as f32;\n-   |     ^^^^^^^^^^^\n+LL |     x2 as f32;\n+   |     ^^^^^^^^^\n \n error: casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:15:5\n+  --> $DIR/cast.rs:19:5\n    |\n-LL |     1u64 as f32;\n-   |     ^^^^^^^^^^^\n+LL |     x3 as f32;\n+   |     ^^^^^^^^^\n \n error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:16:5\n+  --> $DIR/cast.rs:20:5\n    |\n-LL |     1u64 as f64;\n-   |     ^^^^^^^^^^^\n+LL |     x3 as f64;\n+   |     ^^^^^^^^^\n \n error: casting f32 to i32 may truncate the value\n-  --> $DIR/cast.rs:18:5\n+  --> $DIR/cast.rs:22:5\n    |\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting f32 to u32 may truncate the value\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:23:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting f32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:23:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n \n error: casting f64 to f32 may truncate the value\n-  --> $DIR/cast.rs:20:5\n+  --> $DIR/cast.rs:24:5\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting i32 to i8 may truncate the value\n-  --> $DIR/cast.rs:21:5\n+  --> $DIR/cast.rs:25:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n error: casting i32 to u8 may truncate the value\n-  --> $DIR/cast.rs:22:5\n+  --> $DIR/cast.rs:26:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting f64 to isize may truncate the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:27:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may truncate the value\n-  --> $DIR/cast.rs:24:5\n+  --> $DIR/cast.rs:28:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:24:5\n+  --> $DIR/cast.rs:28:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u8 to i8 may wrap around the value\n-  --> $DIR/cast.rs:26:5\n+  --> $DIR/cast.rs:30:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting u16 to i16 may wrap around the value\n-  --> $DIR/cast.rs:27:5\n+  --> $DIR/cast.rs:31:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting u32 to i32 may wrap around the value\n-  --> $DIR/cast.rs:28:5\n+  --> $DIR/cast.rs:32:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting u64 to i64 may wrap around the value\n-  --> $DIR/cast.rs:29:5\n+  --> $DIR/cast.rs:33:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting usize to isize may wrap around the value\n-  --> $DIR/cast.rs:30:5\n+  --> $DIR/cast.rs:34:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting f32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:36:5\n    |\n LL |     1.0f32 as f64;\n    |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:38:5\n    |\n LL |     (1u8 + 1u8) as u16;\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:41:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:39:5\n+  --> $DIR/cast.rs:43:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:48:5\n+  --> $DIR/cast.rs:52:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:49:5\n+  --> $DIR/cast.rs:53:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:50:5\n+  --> $DIR/cast.rs:54:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 27 previous errors\n+error: casting integer literal to f32 is unnecessary\n+  --> $DIR/cast.rs:57:5\n+   |\n+LL |     100 as f32;\n+   |     ^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting integer literal to f64 is unnecessary\n+  --> $DIR/cast.rs:58:5\n+   |\n+LL |     100 as f64;\n+   |     ^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to f64 is unnecessary\n+  --> $DIR/cast.rs:59:5\n+   |\n+LL |     100_i32 as f64;\n+   |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n+\n+error: aborting due to 30 previous errors\n "}, {"sha": "4df0faf0b3e602bf4e2b7e7c90ae96a9ef1e3d39", "filename": "tests/ui/cast_lossless_float.fixed", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.fixed?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -5,16 +5,22 @@\n \n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n-    f32::from(1i8);\n-    f64::from(1i8);\n-    f32::from(1u8);\n-    f64::from(1u8);\n-    f32::from(1i16);\n-    f64::from(1i16);\n-    f32::from(1u16);\n-    f64::from(1u16);\n-    f64::from(1i32);\n-    f64::from(1u32);\n+    let x0 = 1i8;\n+    f32::from(x0);\n+    f64::from(x0);\n+    let x1 = 1u8;\n+    f32::from(x1);\n+    f64::from(x1);\n+    let x2 = 1i16;\n+    f32::from(x2);\n+    f64::from(x2);\n+    let x3 = 1u16;\n+    f32::from(x3);\n+    f64::from(x3);\n+    let x4 = 1i32;\n+    f64::from(x4);\n+    let x5 = 1u32;\n+    f64::from(x5);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "a8d5ed2508c7f4793ff68b9a584191647070cba6", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -5,16 +5,22 @@\n \n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n-    1i8 as f32;\n-    1i8 as f64;\n-    1u8 as f32;\n-    1u8 as f64;\n-    1i16 as f32;\n-    1i16 as f64;\n-    1u16 as f32;\n-    1u16 as f64;\n-    1i32 as f64;\n-    1u32 as f64;\n+    let x0 = 1i8;\n+    x0 as f32;\n+    x0 as f64;\n+    let x1 = 1u8;\n+    x1 as f32;\n+    x1 as f64;\n+    let x2 = 1i16;\n+    x2 as f32;\n+    x2 as f64;\n+    let x3 = 1u16;\n+    x3 as f32;\n+    x3 as f64;\n+    let x4 = 1i32;\n+    x4 as f64;\n+    let x5 = 1u32;\n+    x5 as f64;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "942c3d22bdccc97a5b1428452a99ef44ec77b879", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -1,64 +1,64 @@\n error: casting i8 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:8:5\n+  --> $DIR/cast_lossless_float.rs:9:5\n    |\n-LL |     1i8 as f32;\n-   |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n+LL |     x0 as f32;\n+   |     ^^^^^^^^^ help: try: `f32::from(x0)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:9:5\n+  --> $DIR/cast_lossless_float.rs:10:5\n    |\n-LL |     1i8 as f64;\n-   |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n+LL |     x0 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x0)`\n \n error: casting u8 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:10:5\n+  --> $DIR/cast_lossless_float.rs:12:5\n    |\n-LL |     1u8 as f32;\n-   |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n+LL |     x1 as f32;\n+   |     ^^^^^^^^^ help: try: `f32::from(x1)`\n \n error: casting u8 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:11:5\n+  --> $DIR/cast_lossless_float.rs:13:5\n    |\n-LL |     1u8 as f64;\n-   |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n+LL |     x1 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x1)`\n \n error: casting i16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:12:5\n+  --> $DIR/cast_lossless_float.rs:15:5\n    |\n-LL |     1i16 as f32;\n-   |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n+LL |     x2 as f32;\n+   |     ^^^^^^^^^ help: try: `f32::from(x2)`\n \n error: casting i16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:13:5\n+  --> $DIR/cast_lossless_float.rs:16:5\n    |\n-LL |     1i16 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n+LL |     x2 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x2)`\n \n error: casting u16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:14:5\n+  --> $DIR/cast_lossless_float.rs:18:5\n    |\n-LL |     1u16 as f32;\n-   |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n+LL |     x3 as f32;\n+   |     ^^^^^^^^^ help: try: `f32::from(x3)`\n \n error: casting u16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:15:5\n+  --> $DIR/cast_lossless_float.rs:19:5\n    |\n-LL |     1u16 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n+LL |     x3 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x3)`\n \n error: casting i32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:16:5\n+  --> $DIR/cast_lossless_float.rs:21:5\n    |\n-LL |     1i32 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n+LL |     x4 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x4)`\n \n error: casting u32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:17:5\n+  --> $DIR/cast_lossless_float.rs:23:5\n    |\n-LL |     1u32 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n+LL |     x5 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x5)`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "611e5a855723dafa0efde6cedec22bccd03d212c", "filename": "tests/ui/cast_size.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -9,10 +9,12 @@\n fn main() {\n     // Casting from *size\n     1isize as i8;\n-    1isize as f64;\n-    1usize as f64;\n-    1isize as f32;\n-    1usize as f32;\n+    let x0 = 1isize;\n+    let x1 = 1usize;\n+    x0 as f64;\n+    x1 as f64;\n+    x0 as f32;\n+    x1 as f32;\n     1isize as i32;\n     1isize as u32;\n     1usize as u32;\n@@ -26,4 +28,7 @@ fn main() {\n     1u32 as usize; // Should not trigger any lint\n     1i32 as isize; // Neither should this\n     1i32 as usize;\n+    // Big integer literal to float\n+    999_999_999 as f32;\n+    9_999_999_999_999_999usize as f64;\n }"}, {"sha": "735e522b40d9fa25eb93628aec751c6efdfb158b", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -7,98 +7,110 @@ LL |     1isize as i8;\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast_size.rs:12:5\n+  --> $DIR/cast_size.rs:14:5\n    |\n-LL |     1isize as f64;\n-   |     ^^^^^^^^^^^^^\n+LL |     x0 as f64;\n+   |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast_size.rs:13:5\n+  --> $DIR/cast_size.rs:15:5\n    |\n-LL |     1usize as f64;\n-   |     ^^^^^^^^^^^^^\n+LL |     x1 as f64;\n+   |     ^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast_size.rs:14:5\n+  --> $DIR/cast_size.rs:16:5\n    |\n-LL |     1isize as f32;\n-   |     ^^^^^^^^^^^^^\n+LL |     x0 as f32;\n+   |     ^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast_size.rs:15:5\n+  --> $DIR/cast_size.rs:17:5\n    |\n-LL |     1usize as f32;\n-   |     ^^^^^^^^^^^^^\n+LL |     x1 as f32;\n+   |     ^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:16:5\n+  --> $DIR/cast_size.rs:18:5\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:17:5\n+  --> $DIR/cast_size.rs:19:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:18:5\n+  --> $DIR/cast_size.rs:20:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:19:5\n+  --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:19:5\n+  --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:21:5\n+  --> $DIR/cast_size.rs:23:5\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:22:5\n+  --> $DIR/cast_size.rs:24:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:23:5\n+  --> $DIR/cast_size.rs:25:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:23:5\n+  --> $DIR/cast_size.rs:25:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:24:5\n+  --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:25:5\n+  --> $DIR/cast_size.rs:27:5\n    |\n LL |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast_size.rs:32:5\n+   |\n+LL |     999_999_999 as f32;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast_size.rs:33:5\n+   |\n+LL |     9_999_999_999_999_999usize as f64;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "17ad274bd6dffb8a58ca33dc66aac748b176ac45", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -19,7 +19,8 @@ fn main() {\n     TWO == ONE;\n     TWO != ONE;\n     ONE + ONE == TWO;\n-    1 as f32 == ONE;\n+    let x = 1;\n+    x as f32 == ONE;\n \n     let v = 0.9;\n     v == ONE;"}, {"sha": "0c746e24d12482100cdba1326622217cd624dfe3", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9dd008e446ee7cd804f41b3e8a494d0752e3106/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=d9dd008e446ee7cd804f41b3e8a494d0752e3106", "patch": "@@ -48,37 +48,37 @@ LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:22:5\n+  --> $DIR/float_cmp_const.rs:23:5\n    |\n-LL |     1 as f32 == ONE;\n-   |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(1 as f32 - ONE).abs() < error`\n+LL |     x as f32 == ONE;\n+   |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:22:5\n+  --> $DIR/float_cmp_const.rs:23:5\n    |\n-LL |     1 as f32 == ONE;\n+LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:25:5\n+  --> $DIR/float_cmp_const.rs:26:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:25:5\n+  --> $DIR/float_cmp_const.rs:26:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:26:5\n+  --> $DIR/float_cmp_const.rs:27:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:26:5\n+  --> $DIR/float_cmp_const.rs:27:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^"}]}