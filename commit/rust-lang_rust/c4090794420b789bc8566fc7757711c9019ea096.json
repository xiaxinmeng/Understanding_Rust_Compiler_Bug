{"sha": "c4090794420b789bc8566fc7757711c9019ea096", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MDkwNzk0NDIwYjc4OWJjODU2NmZjNzc1NzcxMWM5MDE5ZWEwOTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-22T16:48:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-22T16:48:16Z"}, "message": "Dropping trait objects works again", "tree": {"sha": "d5405af0a00bbb981119ee0dc36e546d6b57e617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5405af0a00bbb981119ee0dc36e546d6b57e617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4090794420b789bc8566fc7757711c9019ea096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4090794420b789bc8566fc7757711c9019ea096", "html_url": "https://github.com/rust-lang/rust/commit/c4090794420b789bc8566fc7757711c9019ea096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4090794420b789bc8566fc7757711c9019ea096/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "html_url": "https://github.com/rust-lang/rust/commit/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "5b4215dec17e95e5fcc7cd30d4c6759ec9015ad1", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c4090794420b789bc8566fc7757711c9019ea096/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4090794420b789bc8566fc7757711c9019ea096/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=c4090794420b789bc8566fc7757711c9019ea096", "patch": "@@ -9,7 +9,7 @@ use syntax::abi::Abi;\n \n use error::{EvalError, EvalResult};\n use eval_context::{EvalContext, IntegerExt, StackPopCleanup, is_inhabited};\n-use lvalue::Lvalue;\n+use lvalue::{Lvalue, LvalueExtra};\n use memory::Pointer;\n use value::PrimVal;\n use value::Value;\n@@ -80,7 +80,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 trace!(\"TerminatorKind::drop: {:?}, {:?}\", location, self.substs());\n                 let lval = self.eval_lvalue(location)?;\n                 trace!(\"drop lval: {:#?}\", lval);\n-                let src_ptr = self.force_allocation(lval)?.to_ptr();\n                 let ty = self.lvalue_ty(location);\n                 self.goto_block(target);\n \n@@ -94,16 +93,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 let arg;\n                 let mir = match ty.sty {\n-                    ty::TyDynamic(..) => unimplemented!(),\n+                    ty::TyDynamic(..) => {\n+                        if let Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } = lval {\n+                            arg = Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::Ptr(vtable));\n+                            match self.read_drop_type_from_vtable(vtable)? {\n+                                Some(func) => {\n+                                    instance = func;\n+                                    self.load_mir(func.def)?\n+                                },\n+                                // no drop fn -> bail out\n+                                None => return Ok(()),\n+                            }\n+                        } else {\n+                            panic!(\"expected fat lvalue, got {:?}\", lval);\n+                        }\n+                    },\n                     ty::TyArray(elem, n) => {\n                         instance.substs = self.tcx.mk_substs([\n                             Kind::from(elem),\n                         ].iter().cloned());\n+                        let src_ptr = self.force_allocation(lval)?.to_ptr();\n                         arg = Value::ByValPair(PrimVal::Ptr(src_ptr), PrimVal::Bytes(n as u128));\n                         ::eval_context::MirRef::clone(&self.seq_drop_glue)\n                     },\n                     ty::TySlice(ref elem) => unimplemented!(),\n                     _ => {\n+                        let src_ptr = self.force_allocation(lval)?.to_ptr();\n                         arg = Value::ByVal(PrimVal::Ptr(src_ptr));\n                         self.load_mir(instance.def)?\n                     },"}, {"sha": "813b19c3dadc99c95afdd313dd3525c1af67007f", "filename": "src/traits.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4090794420b789bc8566fc7757711c9019ea096/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4090794420b789bc8566fc7757711c9019ea096/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=c4090794420b789bc8566fc7757711c9019ea096", "patch": "@@ -146,6 +146,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(vtable)\n     }\n \n+    pub fn read_drop_type_from_vtable(&self, vtable: Pointer) -> EvalResult<'tcx, Option<ty::Instance<'tcx>>> {\n+        let drop_fn = self.memory.read_ptr(vtable)?;\n+\n+        // just a sanity check\n+        assert_eq!(drop_fn.offset, 0);\n+\n+        // some values don't need to call a drop impl, so the value is null\n+        if drop_fn == Pointer::from_int(0) {\n+            Ok(None)\n+        } else {\n+            self.memory.get_fn(drop_fn.alloc_id).map(Some)\n+        }\n+    }\n+\n     pub fn read_size_and_align_from_vtable(&self, vtable: Pointer) -> EvalResult<'tcx, (u64, u64)> {\n         let pointer_size = self.memory.pointer_size();\n         let size = self.memory.read_usize(vtable.offset(pointer_size))?;"}]}