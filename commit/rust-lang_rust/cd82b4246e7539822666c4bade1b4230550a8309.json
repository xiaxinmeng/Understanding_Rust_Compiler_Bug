{"sha": "cd82b4246e7539822666c4bade1b4230550a8309", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODJiNDI0NmU3NTM5ODIyNjY2YzRiYWRlMWI0MjMwNTUwYTgzMDk=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-18T20:44:10Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-20T18:34:23Z"}, "message": "fix tests on wasm targets that have 32bit time_t and don't have threads", "tree": {"sha": "f354b7dd70bf3e6b6c47230ce9864614b70021cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f354b7dd70bf3e6b6c47230ce9864614b70021cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd82b4246e7539822666c4bade1b4230550a8309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd82b4246e7539822666c4bade1b4230550a8309", "html_url": "https://github.com/rust-lang/rust/commit/cd82b4246e7539822666c4bade1b4230550a8309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd82b4246e7539822666c4bade1b4230550a8309/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c92bae7fa0fcc563fe5f68920648923d128a9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c92bae7fa0fcc563fe5f68920648923d128a9c0", "html_url": "https://github.com/rust-lang/rust/commit/6c92bae7fa0fcc563fe5f68920648923d128a9c0"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "dc44c9346b6ef946be2cf61b92f22aacc5f37d9d", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd82b4246e7539822666c4bade1b4230550a8309/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd82b4246e7539822666c4bade1b4230550a8309/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=cd82b4246e7539822666c4bade1b4230550a8309", "patch": "@@ -1,5 +1,5 @@\n use super::{Duration, Instant, SystemTime, UNIX_EPOCH};\n-use core::sync::atomic::AtomicU64;\n+#[cfg(not(target_arch = \"wasm32\"))]\n use test::{black_box, Bencher};\n \n macro_rules! assert_almost_eq {\n@@ -25,6 +25,7 @@ fn instant_monotonic() {\n }\n \n #[test]\n+#[cfg(not(target_arch = \"wasm32\"))]\n fn instant_monotonic_concurrent() -> crate::thread::Result<()> {\n     let threads: Vec<_> = (0..8)\n         .map(|_| {\n@@ -195,10 +196,18 @@ fn since_epoch() {\n #[test]\n fn monotonizer_wrapping_backslide() {\n     use super::monotonic::inner::{monotonize_impl, ZERO};\n+    use core::sync::atomic::AtomicU64;\n \n     let reference = AtomicU64::new(0);\n \n-    let time = ZERO.checked_add_duration(&Duration::from_secs(0xffff_ffff)).unwrap();\n+    let time = match ZERO.checked_add_duration(&Duration::from_secs(0xffff_ffff)) {\n+        Some(time) => time,\n+        None => {\n+            // platform cannot represent u32::MAX seconds so it won't have to deal with this kind\n+            // of overflow either\n+            return;\n+        }\n+    };\n \n     let monotonized = monotonize_impl(&reference, time);\n     let expected = ZERO.checked_add_duration(&Duration::from_secs(1 << 32)).unwrap();\n@@ -211,6 +220,7 @@ fn monotonizer_wrapping_backslide() {\n macro_rules! bench_instant_threaded {\n     ($bench_name:ident, $thread_count:expr) => {\n         #[bench]\n+        #[cfg(not(target_arch = \"wasm32\"))]\n         fn $bench_name(b: &mut Bencher) -> crate::thread::Result<()> {\n             use crate::sync::atomic::{AtomicBool, Ordering};\n             use crate::sync::Arc;"}]}