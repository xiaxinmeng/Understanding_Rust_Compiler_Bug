{"sha": "5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjY1NWQyN2ZkZDUyMzI4NTg1NmY4YmRhY2JjY2RjMDdiNGZjNmM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T19:09:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T19:09:30Z"}, "message": "Rollup merge of #87559 - estebank:consider-borrowing, r=oli-obk\n\nTweak borrowing suggestion in `for` loop", "tree": {"sha": "62db98846c60bae62b971cc0e4c87185ebe1e12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62db98846c60bae62b971cc0e4c87185ebe1e12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBE5qCRBK7hj4Ov3rIwAAcy0IAAiQQ+wHSDoJyczWojVLi/zp\ncZXLKPWj3KvTPqrqOsNvGTsyYXJRF7veYx7imGzaL8aerU2LTgnQkPgfv3JE1pAR\nxUwliI05ecWxSl2i+GqibKEMohaJRA68OnwJH4FCo2RnoWJZfJdyzun5o1olNqSn\nfacDkebq8/bKTU3/mTKnCHtF+QiADcPxPXReB1Tz5+JGHFVNiMD1GVJM9H1rWuAE\nh3v88HkValB2nvmDIw7rIgCqMId2W2ZefZnG1pOJsJ8EUSJHVgTw37pMbzOI3p+8\nLlAwzJ8g9NmhE2ozVvfx7v5k6lJ91wyk3qSGD2m8p4X9PvFhGYGnIXPWp/2ZZAY=\n=fZx5\n-----END PGP SIGNATURE-----\n", "payload": "tree 62db98846c60bae62b971cc0e4c87185ebe1e12e\nparent fb27c4cc70bc4b1f01847ca95933849152b4df80\nparent 17b2f92e44b65caa5e057c51560336311caf2fb4\nauthor Yuki Okushi <jtitor@2k36.org> 1627672170 +0900\ncommitter GitHub <noreply@github.com> 1627672170 +0900\n\nRollup merge of #87559 - estebank:consider-borrowing, r=oli-obk\n\nTweak borrowing suggestion in `for` loop\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "html_url": "https://github.com/rust-lang/rust/commit/5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb27c4cc70bc4b1f01847ca95933849152b4df80", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb27c4cc70bc4b1f01847ca95933849152b4df80", "html_url": "https://github.com/rust-lang/rust/commit/fb27c4cc70bc4b1f01847ca95933849152b4df80"}, {"sha": "17b2f92e44b65caa5e057c51560336311caf2fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b2f92e44b65caa5e057c51560336311caf2fb4", "html_url": "https://github.com/rust-lang/rust/commit/17b2f92e44b65caa5e057c51560336311caf2fb4"}], "stats": {"total": 120, "additions": 76, "deletions": 44}, "files": [{"sha": "2be23159bf563a5938e0fd70fa54eaa10ea0c556", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "patch": "@@ -2,7 +2,8 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n use rustc_span::source_map::DesugaringKind;\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, Span, DUMMY_SP};\n+use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::prefixes::PrefixSet;\n@@ -384,36 +385,44 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-            let def_id = match *move_place.ty(self.body, self.infcx.tcx).ty.kind() {\n-                ty::Adt(self_def, _) => self_def.did,\n-                ty::Foreign(def_id)\n-                | ty::FnDef(def_id, _)\n-                | ty::Closure(def_id, _)\n-                | ty::Generator(def_id, ..)\n-                | ty::Opaque(def_id, _) => def_id,\n-                _ => return err,\n+        let ty = move_place.ty(self.body, self.infcx.tcx).ty;\n+        let def_id = match *ty.kind() {\n+            ty::Adt(self_def, _) => self_def.did,\n+            ty::Foreign(def_id)\n+            | ty::FnDef(def_id, _)\n+            | ty::Closure(def_id, _)\n+            | ty::Generator(def_id, ..)\n+            | ty::Opaque(def_id, _) => def_id,\n+            _ => return err,\n+        };\n+        let is_option = self.infcx.tcx.is_diagnostic_item(sym::option_type, def_id);\n+        let is_result = self.infcx.tcx.is_diagnostic_item(sym::result_type, def_id);\n+        if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n+            err.span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                &format!(\n+                    \"consider borrowing the `{}`'s content\",\n+                    if is_option { \"Option\" } else { \"Result\" }\n+                ),\n+                \".as_ref()\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_))) {\n+            let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n+                Some(def_id) => type_known_to_meet_bound_modulo_regions(\n+                    &self.infcx,\n+                    self.param_env,\n+                    self.infcx.tcx.mk_imm_ref(self.infcx.tcx.lifetimes.re_erased, ty),\n+                    def_id,\n+                    DUMMY_SP,\n+                ),\n+                _ => false,\n             };\n-            let is_option = self.infcx.tcx.is_diagnostic_item(sym::option_type, def_id);\n-            let is_result = self.infcx.tcx.is_diagnostic_item(sym::result_type, def_id);\n-            if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"consider borrowing the `{}`'s content\",\n-                        if is_option { \"Option\" } else { \"Result\" }\n-                    ),\n-                    format!(\"{}.as_ref()\", snippet),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_)))\n-                && self.infcx.tcx.is_diagnostic_item(sym::vec_type, def_id)\n-            {\n-                // FIXME: suggest for anything that implements `IntoIterator`.\n-                err.span_suggestion(\n-                    span,\n-                    \"consider iterating over a slice of the `Vec<_>`'s content\",\n-                    format!(\"&{}\", snippet),\n+            if suggest {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    &format!(\"consider iterating over a slice of the `{}`'s content\", ty),\n+                    \"&\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "223ddf0f0ad2abfc7113ed4891942999c06dad1f", "filename": "src/test/ui/suggestions/for-i-in-vec.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed?ref=5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "patch": "@@ -3,12 +3,15 @@\n \n struct Foo {\n     v: Vec<u32>,\n+    h: std::collections::HashMap<i32, i32>,\n }\n \n impl Foo {\n     fn bar(&self) {\n         for _ in &self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n         }\n+        for _ in &self.h { //~ ERROR cannot move out of `self.h` which is behind a shared reference\n+        }\n     }\n }\n "}, {"sha": "7942698cc8eff3b56dc490a4a689ad3c089cb764", "filename": "src/test/ui/suggestions/for-i-in-vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs?ref=5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "patch": "@@ -3,12 +3,15 @@\n \n struct Foo {\n     v: Vec<u32>,\n+    h: std::collections::HashMap<i32, i32>,\n }\n \n impl Foo {\n     fn bar(&self) {\n         for _ in self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n         }\n+        for _ in self.h { //~ ERROR cannot move out of `self.h` which is behind a shared reference\n+        }\n     }\n }\n "}, {"sha": "011fdf34c28b543cf60d4d4a93fde4e36d6ad089", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "patch": "@@ -1,12 +1,25 @@\n error[E0507]: cannot move out of `self.v` which is behind a shared reference\n-  --> $DIR/for-i-in-vec.rs:10:18\n+  --> $DIR/for-i-in-vec.rs:11:18\n    |\n LL |         for _ in self.v {\n-   |                  ^^^^^^\n-   |                  |\n-   |                  move occurs because `self.v` has type `Vec<u32>`, which does not implement the `Copy` trait\n-   |                  help: consider iterating over a slice of the `Vec<_>`'s content: `&self.v`\n+   |                  ^^^^^^ move occurs because `self.v` has type `Vec<u32>`, which does not implement the `Copy` trait\n+   |\n+help: consider iterating over a slice of the `Vec<u32>`'s content\n+   |\n+LL |         for _ in &self.v {\n+   |                  ^\n+\n+error[E0507]: cannot move out of `self.h` which is behind a shared reference\n+  --> $DIR/for-i-in-vec.rs:13:18\n+   |\n+LL |         for _ in self.h {\n+   |                  ^^^^^^ move occurs because `self.h` has type `HashMap<i32, i32>`, which does not implement the `Copy` trait\n+   |\n+help: consider iterating over a slice of the `HashMap<i32, i32>`'s content\n+   |\n+LL |         for _ in &self.h {\n+   |                  ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "94766530091552c0f393824858ad88eb46066cfe", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e2655d27fdd523285856f8bdacbccdc07b4fc6c/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=5e2655d27fdd523285856f8bdacbccdc07b4fc6c", "patch": "@@ -2,19 +2,23 @@ error[E0507]: cannot move out of `selection.1` which is behind a shared referenc\n   --> $DIR/option-content-move.rs:11:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^\n-   |                    |\n-   |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n-   |                    help: consider borrowing the `Option`'s content: `selection.1.as_ref()`\n+   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the `Option`'s content\n+   |\n+LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n+   |                               ^^^^^^^^^\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:29:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^\n-   |                    |\n-   |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n-   |                    help: consider borrowing the `Result`'s content: `selection.1.as_ref()`\n+   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the `Result`'s content\n+   |\n+LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n+   |                               ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}