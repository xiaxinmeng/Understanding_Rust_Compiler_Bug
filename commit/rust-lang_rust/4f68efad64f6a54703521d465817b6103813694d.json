{"sha": "4f68efad64f6a54703521d465817b6103813694d", "node_id": "C_kwDOAAsO6NoAKDRmNjhlZmFkNjRmNmE1NDcwMzUyMWQ0NjU4MTdiNjEwMzgxMzY5NGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T01:01:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T01:01:15Z"}, "message": "Auto merge of #96298 - petrochenkov:fromgen, r=estebank\n\nlibcore: Add `iter::from_generator` which is like `iter::from_fn`, but for coroutines instead of functions\n\nAn equally useful little helper.\n\nI didn't follow any of the async-wg work, so I don't know why something like this wasn't added before.", "tree": {"sha": "5bb86ff9090628a5c214ac057b94b8d951de138b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb86ff9090628a5c214ac057b94b8d951de138b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f68efad64f6a54703521d465817b6103813694d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f68efad64f6a54703521d465817b6103813694d", "html_url": "https://github.com/rust-lang/rust/commit/4f68efad64f6a54703521d465817b6103813694d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f68efad64f6a54703521d465817b6103813694d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c9872c6c2c60c905e16bce0801934b86d15f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c9872c6c2c60c905e16bce0801934b86d15f95", "html_url": "https://github.com/rust-lang/rust/commit/b2c9872c6c2c60c905e16bce0801934b86d15f95"}, {"sha": "5bf23f64cce3877434da31e74e376186986903a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf23f64cce3877434da31e74e376186986903a2", "html_url": "https://github.com/rust-lang/rust/commit/5bf23f64cce3877434da31e74e376186986903a2"}], "stats": {"total": 101, "additions": 67, "deletions": 34}, "files": [{"sha": "0d072046d58ffecb601a002349e27714f6097272", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -13,8 +13,6 @@\n #![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(extend_one)]\n-#![feature(generator_trait)]\n-#![feature(generators)]\n #![feature(let_else)]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]\n@@ -114,9 +112,6 @@ pub mod unhash;\n pub use ena::undo_log;\n pub use ena::unify;\n \n-use std::ops::{Generator, GeneratorState};\n-use std::pin::Pin;\n-\n pub struct OnDrop<F: Fn()>(pub F);\n \n impl<F: Fn()> OnDrop<F> {\n@@ -135,26 +130,6 @@ impl<F: Fn()> Drop for OnDrop<F> {\n     }\n }\n \n-struct IterFromGenerator<G>(G);\n-\n-impl<G: Generator<Return = ()> + Unpin> Iterator for IterFromGenerator<G> {\n-    type Item = G::Yield;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        match Pin::new(&mut self.0).resume(()) {\n-            GeneratorState::Yielded(n) => Some(n),\n-            GeneratorState::Complete(_) => None,\n-        }\n-    }\n-}\n-\n-/// An adapter for turning a generator closure into an iterator, similar to `iter::from_fn`.\n-pub fn iter_from_generator<G: Generator<Return = ()> + Unpin>(\n-    generator: G,\n-) -> impl Iterator<Item = G::Yield> {\n-    IterFromGenerator(generator)\n-}\n-\n // See comments in src/librustc_middle/lib.rs\n #[doc(hidden)]\n pub fn __noop_fix_for_27438() {}"}, {"sha": "eb008fd2693ba5d20c28728a86fc82a508314dd6", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -3,6 +3,7 @@\n #![feature(drain_filter)]\n #![feature(generators)]\n #![feature(generic_associated_types)]\n+#![feature(iter_from_generator)]\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(nll)]"}, {"sha": "339d2fc0867aeedf3e0801186fcc86543bb191cc", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -4,7 +4,6 @@ use crate::rmeta::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_data_structures::iter_from_generator;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n@@ -39,6 +38,7 @@ use rustc_span::{\n use rustc_target::abi::VariantIdx;\n use std::borrow::Borrow;\n use std::hash::Hash;\n+use std::iter;\n use std::num::NonZeroUsize;\n use tracing::{debug, trace};\n \n@@ -1134,7 +1134,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n-            record_array!(self.tables.children[def_id] <- iter_from_generator(|| {\n+            record_array!(self.tables.children[def_id] <- iter::from_generator(|| {\n                 for item_id in md.item_ids {\n                     match tcx.hir().item(*item_id).kind {\n                         // Foreign items are planted into their parent modules"}, {"sha": "15362d2330acc6c1078ac5c4a27ef27c4630757f", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -362,6 +362,12 @@ pub use self::traits::Iterator;\n )]\n pub use self::range::Step;\n \n+#[unstable(\n+    feature = \"iter_from_generator\",\n+    issue = \"43122\",\n+    reason = \"generators are unstable\"\n+)]\n+pub use self::sources::from_generator;\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub use self::sources::{empty, Empty};\n #[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]"}, {"sha": "d34772cd304ffdfef14df26d8dd2ef0eedc253f9", "filename": "library/core/src/iter/sources.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -1,5 +1,6 @@\n mod empty;\n mod from_fn;\n+mod from_generator;\n mod once;\n mod once_with;\n mod repeat;\n@@ -21,6 +22,13 @@ pub use self::repeat_with::{repeat_with, RepeatWith};\n #[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n pub use self::from_fn::{from_fn, FromFn};\n \n+#[unstable(\n+    feature = \"iter_from_generator\",\n+    issue = \"43122\",\n+    reason = \"generators are unstable\"\n+)]\n+pub use self::from_generator::from_generator;\n+\n #[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n pub use self::successors::{successors, Successors};\n "}, {"sha": "8e7cbd34a4f664b6c1496d6fa65591ca11ce8537", "filename": "library/core/src/iter/sources/from_generator.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Ffrom_generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Ffrom_generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Ffrom_generator.rs?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -0,0 +1,43 @@\n+use crate::ops::{Generator, GeneratorState};\n+use crate::pin::Pin;\n+\n+/// Creates a new iterator where each iteration calls the provided generator.\n+///\n+/// Similar to [`iter::from_fn`].\n+///\n+/// [`iter::from_fn`]: crate::iter::from_fn\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(generators)]\n+/// #![feature(iter_from_generator)]\n+///\n+/// let it = std::iter::from_generator(|| {\n+///     yield 1;\n+///     yield 2;\n+///     yield 3;\n+/// });\n+/// let v: Vec<_> = it.collect();\n+/// assert_eq!(v, [1, 2, 3]);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iter_from_generator\", issue = \"43122\", reason = \"generators are unstable\")]\n+pub fn from_generator<G: Generator<Return = ()> + Unpin>(\n+    generator: G,\n+) -> impl Iterator<Item = G::Yield> {\n+    FromGenerator(generator)\n+}\n+\n+struct FromGenerator<G>(G);\n+\n+impl<G: Generator<Return = ()> + Unpin> Iterator for FromGenerator<G> {\n+    type Item = G::Yield;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        match Pin::new(&mut self.0).resume(()) {\n+            GeneratorState::Yielded(n) => Some(n),\n+            GeneratorState::Complete(()) => None,\n+        }\n+    }\n+}"}, {"sha": "28d94b14ac914dfb3ff639683bada1e660afae14", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -43,13 +43,13 @@ LL |     require_send(send_fut);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n    = note: required because it appears within the type `impl Future<Output = ()>`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25"}, {"sha": "a1c4957e9843a141e5e98ca0ef4658ac88732c24", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -13,7 +13,7 @@ LL | async fn foo() {\n    = note: required because it appears within the type `(NotSend,)`\n    = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n    = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n    = note: required because it appears within the type `impl Future<Output = ()>`\n    = note: required because it appears within the type `impl Future<Output = ()>`\n note: required by a bound in `gimme_send`"}, {"sha": "5b7ca8d46cf4462bddd4961402312feb7deb0156", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f68efad64f6a54703521d465817b6103813694d/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f68efad64f6a54703521d465817b6103813694d/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=4f68efad64f6a54703521d465817b6103813694d", "patch": "@@ -7,11 +7,11 @@ LL | |     x\n LL | | }\n    | |_^ the trait `Generator<ResumeTy>` is not implemented for `[static generator@$DIR/async.rs:7:29: 9:2]`\n    |\n-note: required by a bound in `from_generator`\n+note: required by a bound in `std::future::from_generator`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL |     T: Generator<ResumeTy, Yield = ()>,\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `from_generator`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `std::future::from_generator`\n \n error[E0280]: the requirement `<[static generator@$DIR/async.rs:7:29: 9:2] as Generator<ResumeTy>>::Yield == ()` is not satisfied\n   --> $DIR/async.rs:7:29\n@@ -22,11 +22,11 @@ LL | |     x\n LL | | }\n    | |_^\n    |\n-note: required by a bound in `from_generator`\n+note: required by a bound in `std::future::from_generator`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL |     T: Generator<ResumeTy, Yield = ()>,\n-   |                            ^^^^^^^^^^ required by this bound in `from_generator`\n+   |                            ^^^^^^^^^^ required by this bound in `std::future::from_generator`\n \n error[E0280]: the requirement `<impl Future<Output = u32> as Future>::Output == u32` is not satisfied\n   --> $DIR/async.rs:7:29"}]}