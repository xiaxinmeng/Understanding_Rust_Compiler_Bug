{"sha": "70fe20a69827a2b1abfef338c83f9ec9be7c9376", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZmUyMGE2OTgyN2EyYjFhYmZlZjMzOGM4M2Y5ZWM5YmU3YzkzNzY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-10-22T19:23:26Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-10-23T09:43:48Z"}, "message": "Fix codegen breaking aliasing rules for functions with sret results\n\nThis reverts commit a0ec902e239b2219edf1a18b036dd32c18d3be42 \"Avoid\nunnecessary temporary on assignments\".\n\nLeaving out the temporary for the functions return value can lead to a\nsituation that conflicts with rust's aliasing rules.\n\nGiven this:\n\n````rust\nfn func(f: &mut Foo) -> Foo { /* ... */ }\n\nfn bar() {\n    let mut foo = Foo { /* ... */ };\n\n    foo = func(&mut foo);\n}\n````\n\nWe effectively get two mutable references to the same variable `foo` at\nthe same time. One for the parameter `f`, and one for the hidden\nout-pointer. So we can't just `trans_into` the destination directly, but\nmust use `trans` to get a new temporary slot from which the result can\nbe copied.", "tree": {"sha": "da6b32606de5474d4c2d6f40566a28c9729a3854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da6b32606de5474d4c2d6f40566a28c9729a3854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70fe20a69827a2b1abfef338c83f9ec9be7c9376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70fe20a69827a2b1abfef338c83f9ec9be7c9376", "html_url": "https://github.com/rust-lang/rust/commit/70fe20a69827a2b1abfef338c83f9ec9be7c9376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70fe20a69827a2b1abfef338c83f9ec9be7c9376/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2130f2221600f03129df95f3611444468806b237", "url": "https://api.github.com/repos/rust-lang/rust/commits/2130f2221600f03129df95f3611444468806b237", "html_url": "https://github.com/rust-lang/rust/commit/2130f2221600f03129df95f3611444468806b237"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "a7b9c137331b854817362cf0ef32184b3916cf37", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70fe20a69827a2b1abfef338c83f9ec9be7c9376/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe20a69827a2b1abfef338c83f9ec9be7c9376/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=70fe20a69827a2b1abfef338c83f9ec9be7c9376", "patch": "@@ -940,6 +940,7 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             controlflow::trans_loop(bcx, expr.id, &**body)\n         }\n         ast::ExprAssign(ref dst, ref src) => {\n+            let src_datum = unpack_datum!(bcx, trans(bcx, &**src));\n             let dst_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, &**dst, \"assign\"));\n \n             if ty::type_needs_drop(bcx.tcx(), dst_datum.ty) {\n@@ -960,7 +961,6 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 // We could avoid this intermediary with some analysis\n                 // to determine whether `dst` may possibly own `src`.\n                 debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n-                let src_datum = unpack_datum!(bcx, trans(bcx, &**src));\n                 let src_datum = unpack_datum!(\n                     bcx, src_datum.to_rvalue_datum(bcx, \"ExprAssign\"));\n                 bcx = glue::drop_ty(bcx,\n@@ -969,7 +969,7 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                     Some(NodeInfo { id: expr.id, span: expr.span }));\n                 src_datum.store_to(bcx, dst_datum.val)\n             } else {\n-                trans_into(bcx, &**src, SaveIn(dst_datum.to_llref()))\n+                src_datum.store_to(bcx, dst_datum.val)\n             }\n         }\n         ast::ExprAssignOp(op, ref dst, ref src) => {"}, {"sha": "2a44df7a1b5667770c167662348ff0524779b2db", "filename": "src/test/run-pass/out-pointer-aliasing.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/70fe20a69827a2b1abfef338c83f9ec9be7c9376/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe20a69827a2b1abfef338c83f9ec9be7c9376/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs?ref=70fe20a69827a2b1abfef338c83f9ec9be7c9376", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo {\n+    f1: int,\n+    _f2: int,\n+}\n+\n+#[inline(never)]\n+pub fn foo(f: &mut Foo) -> Foo {\n+    let ret = *f;\n+    f.f1 = 0;\n+    ret\n+}\n+\n+pub fn main() {\n+    let mut f = Foo {\n+        f1: 8,\n+        _f2: 9,\n+    };\n+    f = foo(&mut f);\n+    assert_eq!(f.f1, 8);\n+}"}]}