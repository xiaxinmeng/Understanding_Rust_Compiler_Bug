{"sha": "5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjRkZTFhMTY3M2U0ZDA3ZmNlODg2MTk2YTA5ZmQ3YWQ3ZTZiN2M=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2015-10-15T02:16:13Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2015-10-15T05:07:22Z"}, "message": "Update the comments for Win64 ABI in tests.", "tree": {"sha": "7e836c88326584331e3e10b5746f54a6768ba97d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e836c88326584331e3e10b5746f54a6768ba97d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c", "html_url": "https://github.com/rust-lang/rust/commit/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c31841c72228ef45bfad8660e95528e8ffeab2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c31841c72228ef45bfad8660e95528e8ffeab2b", "html_url": "https://github.com/rust-lang/rust/commit/3c31841c72228ef45bfad8660e95528e8ffeab2b"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "1a7e3389b7fc413a66bf261be4349d86acc33ab3", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.c", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c?ref=5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c", "patch": "@@ -38,9 +38,14 @@ struct Huge {\n     int32_t e;\n };\n \n-// SysV ABI:\n+// System V x86_64 ABI:\n // a, b, c, d, e should be in registers\n // s should be byval pointer\n+//\n+// Win64 ABI:\n+// a, b, c, d should be in registers\n+// e should be on the stack\n+// s should be byval pointer\n void byval_rect(int32_t a, int32_t b, int32_t c, int32_t d, int32_t e, struct Rect s) {\n     assert(a == 1);\n     assert(b == 2);\n@@ -53,10 +58,16 @@ void byval_rect(int32_t a, int32_t b, int32_t c, int32_t d, int32_t e, struct Re\n     assert(s.d == 556);\n }\n \n-// SysV ABI:\n+// System V x86_64 ABI:\n // a, b, c, d, e, f, g should be in sse registers\n // s should be split across 2 registers\n // t should be byval pointer\n+//\n+// Win64 ABI:\n+// a, b, c, d should be in sse registers\n+// e, f, g should be on the stack\n+// s should be on the stack (treated as 2 i64's)\n+// t should be on the stack (treated as an i64 and a double)\n void byval_rect_floats(float a, float b, double c, float d, float e,\n                        float f, double g, struct Rect s, struct FloatRect t) {\n     assert(a == 1.);\n@@ -75,9 +86,15 @@ void byval_rect_floats(float a, float b, double c, float d, float e,\n     assert(t.c == 8.);\n }\n \n-// SysV ABI:\n-// a, b, d, e should be in registers\n+// System V x86_64 ABI:\n+// a, b, d, e, f should be in registers\n+// c passed via sse registers\n+// s should be byval pointer\n+//\n+// Win64 ABI:\n+// a, b, d should be in registers\n // c passed via sse registers\n+// e, f should be on the stack\n // s should be byval pointer\n void byval_rect_with_float(int32_t a, int32_t b, float c, int32_t d,\n                            int32_t e, int32_t f, struct Rect s) {\n@@ -93,9 +110,9 @@ void byval_rect_with_float(int32_t a, int32_t b, float c, int32_t d,\n     assert(s.d == 556);\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // a, b should be in registers\n-// s should be split across 2 registers\n+// s should be split across 2 integer registers\n void split_rect(int32_t a, int32_t b, struct Rect s) {\n     assert(a == 1);\n     assert(b == 2);\n@@ -105,9 +122,9 @@ void split_rect(int32_t a, int32_t b, struct Rect s) {\n     assert(s.d == 556);\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // a, b should be in sse registers\n-// s should be split across int32_t & sse registers\n+// s should be split across integer & sse registers\n void split_rect_floats(float a, float b, struct FloatRect s) {\n     assert(a == 1.);\n     assert(b == 2.);\n@@ -116,10 +133,16 @@ void split_rect_floats(float a, float b, struct FloatRect s) {\n     assert(s.c == 8.);\n }\n \n-// SysV ABI:\n+// System V x86_64 ABI:\n // a, b, d, f should be in registers\n // c, e passed via sse registers\n // s should be split across 2 registers\n+//\n+// Win64 ABI:\n+// a, b, d should be in registers\n+// c passed via sse registers\n+// e, f should be on the stack\n+// s should be on the stack (treated as 2 i64's)\n void split_rect_with_floats(int32_t a, int32_t b, float c,\n                             int32_t d, float e, int32_t f, struct Rect s) {\n     assert(a == 1);\n@@ -134,7 +157,7 @@ void split_rect_with_floats(int32_t a, int32_t b, float c,\n     assert(s.d == 556);\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // a, b, c should be in registers\n // s should be split across 2 registers\n // t should be a byval pointer\n@@ -152,7 +175,7 @@ void split_and_byval_rect(int32_t a, int32_t b, int32_t c, struct Rect s, struct\n     assert(t.d == 556);\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // a, b should in registers\n // s and return should be split across 2 registers\n struct Rect split_ret_byval_struct(int32_t a, int32_t b, struct Rect s) {\n@@ -165,7 +188,7 @@ struct Rect split_ret_byval_struct(int32_t a, int32_t b, struct Rect s) {\n     return s;\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // a, b, c, d should be in registers\n // return should be in a hidden sret pointer\n // s should be a byval pointer\n@@ -184,7 +207,7 @@ struct BiggerRect sret_byval_struct(int32_t a, int32_t b, int32_t c, int32_t d,\n     return t;\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // a, b should be in registers\n // return should be in a hidden sret pointer\n // s should be split across 2 registers\n@@ -201,7 +224,7 @@ struct BiggerRect sret_split_struct(int32_t a, int32_t b, struct Rect s) {\n     return t;\n }\n \n-// SysV ABI:\n+// System V x86_64 & Win64 ABI:\n // s should be byval pointer (since sizeof(s) > 16)\n // return should in a hidden sret pointer\n struct Huge huge_struct(struct Huge s) {"}, {"sha": "f223a8ddc06a25789db8fa70651ac528fb344587", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs?ref=5eb4de1a1673e4d07fce886196a09fd7ad7e6b7c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Passing structs via FFI should work regardless of whether\n-// the functions gets passed in multiple registers or is a hidden pointer\n+// they get passed in multiple registers, byval pointers or the stack\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n #[repr(C)]\n@@ -48,66 +48,27 @@ struct Huge {\n \n #[link(name = \"test\", kind = \"static\")]\n extern {\n-    // SysV ABI:\n-    // a, b, c, d, e should be in registers\n-    // s should be byval pointer\n     fn byval_rect(a: i32, b: i32, c: i32, d: i32, e: i32, s: Rect);\n \n-    // SysV ABI:\n-    // a, b, c, d, e, f, g should be in sse registers\n-    // s should be split across 2 registers\n-    // t should be byval pointer\n     fn byval_rect_floats(a: f32, b: f32, c: f64, d: f32, e: f32,\n                          f: f32, g: f64, s: Rect, t: FloatRect);\n \n-    // SysV ABI:\n-    // a, b, d, e should be in registers\n-    // c passed via sse registers\n-    // s should be byval pointer\n     fn byval_rect_with_float(a: i32, b: i32, c: f32, d: i32, e: i32, f: i32, s: Rect);\n \n-    // SysV ABI:\n-    // a, b should be in registers\n-    // s should be split across 2 registers\n     fn split_rect(a: i32, b: i32, s: Rect);\n \n-    // SysV ABI:\n-    // a, b should be in sse registers\n-    // s should be split across int & sse registers\n     fn split_rect_floats(a: f32, b: f32, s: FloatRect);\n \n-    // SysV ABI:\n-    // a, b, d, f should be in registers\n-    // c, e passed via sse registers\n-    // s should be split across 2 registers\n     fn split_rect_with_floats(a: i32, b: i32, c: f32, d: i32, e: f32, f: i32, s: Rect);\n \n-    // SysV ABI:\n-    // a, b, c should be in registers\n-    // s should be split across 2 registers\n-    // t should be a byval pointer\n     fn split_and_byval_rect(a: i32, b: i32, c: i32, s: Rect, t: Rect);\n \n-    // SysV ABI:\n-    // a, b should in registers\n-    // s and return should be split across 2 registers\n     fn split_ret_byval_struct(a: i32, b: i32, s: Rect) -> Rect;\n \n-    // SysV ABI:\n-    // a, b, c, d should be in registers\n-    // return should be in a hidden sret pointer\n-    // s should be a byval pointer\n     fn sret_byval_struct(a: i32, b: i32, c: i32, d: i32, s: Rect) -> BiggerRect;\n \n-    // SysV ABI:\n-    // a, b should be in registers\n-    // return should be in a hidden sret pointer\n-    // s should be split across 2 registers\n     fn sret_split_struct(a: i32, b: i32, s: Rect) -> BiggerRect;\n \n-    // SysV ABI:\n-    // s should be byval pointer (since sizeof(s) > 16)\n-    // return should in a hidden sret pointer\n     fn huge_struct(s: Huge) -> Huge;\n }\n "}]}