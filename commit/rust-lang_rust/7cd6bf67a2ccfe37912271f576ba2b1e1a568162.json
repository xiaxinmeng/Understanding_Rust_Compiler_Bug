{"sha": "7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZDZiZjY3YTJjY2ZlMzc5MTIyNzFmNTc2YmEyYjFlMWE1NjgxNjI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-04T00:04:17Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:24Z"}, "message": "Implement debug printing for tcx interner sty's.", "tree": {"sha": "0936f87da78017fcd602b809153a7ae960520084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0936f87da78017fcd602b809153a7ae960520084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "html_url": "https://github.com/rust-lang/rust/commit/7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fb12b8a5411901675ede6b147bbc6c0b7437b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fb12b8a5411901675ede6b147bbc6c0b7437b7", "html_url": "https://github.com/rust-lang/rust/commit/25fb12b8a5411901675ede6b147bbc6c0b7437b7"}], "stats": {"total": 126, "additions": 117, "deletions": 9}, "files": [{"sha": "dc2c7e98de52c6b9e8410db140bb558931ed8981", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "patch": "@@ -779,6 +779,77 @@ bitflags! {\n     }\n }\n \n+impl Copy for TypeFlags {}\n+\n+macro_rules! sty_debug_print {\n+    ($ctxt: expr, $($variant: ident),*) => {{\n+        // curious inner module to allow variant names to be used as\n+        // variable names.\n+        mod inner {\n+            use middle::ty;\n+            struct DebugStat {\n+                total: uint,\n+                region_infer: uint,\n+                ty_infer: uint,\n+                both_infer: uint,\n+            }\n+\n+            pub fn go(tcx: &ty::ctxt) {\n+                let mut total = DebugStat {\n+                    total: 0,\n+                    region_infer: 0, ty_infer: 0, both_infer: 0,\n+                };\n+                $(let mut $variant = total;)*\n+\n+\n+                for (_, t) in tcx.interner.borrow().iter() {\n+                    let variant = match t.sty {\n+                        ty::ty_bool | ty::ty_char | ty::ty_int(..) | ty::ty_uint(..) |\n+                            ty::ty_float(..) | ty::ty_str => continue,\n+                        ty::ty_err => /* unimportant */ continue,\n+                        $(ty::$variant(..) => &mut $variant,)*\n+                    };\n+                    let region = t.flags.intersects(ty::HAS_RE_INFER);\n+                    let ty = t.flags.intersects(ty::HAS_TY_INFER);\n+\n+                    variant.total += 1;\n+                    total.total += 1;\n+                    if region { total.region_infer += 1; variant.region_infer += 1 }\n+                    if ty { total.ty_infer += 1; variant.ty_infer += 1 }\n+                    if region && ty { total.both_infer += 1; variant.both_infer += 1 }\n+                }\n+                println!(\"Ty interner             total           ty region  both\");\n+                $(println!(\"    {:18}: {uses:6} {usespc:4.1}%, \\\n+{ty:4.1}% {region:5.1}% {both:4.1}%\",\n+                           stringify!($variant),\n+                           uses = $variant.total,\n+                           usespc = $variant.total as f64 * 100.0 / total.total as f64,\n+                           ty = $variant.ty_infer as f64 * 100.0  / total.total as f64,\n+                           region = $variant.region_infer as f64 * 100.0  / total.total as f64,\n+                           both = $variant.both_infer as f64 * 100.0  / total.total as f64);\n+                  )*\n+                println!(\"                  total {uses:6}        \\\n+{ty:4.1}% {region:5.1}% {both:4.1}%\",\n+                         uses = total.total,\n+                         ty = total.ty_infer as f64 * 100.0  / total.total as f64,\n+                         region = total.region_infer as f64 * 100.0  / total.total as f64,\n+                         both = total.both_infer as f64 * 100.0  / total.total as f64)\n+            }\n+        }\n+\n+        inner::go($ctxt)\n+    }}\n+}\n+\n+impl<'tcx> ctxt<'tcx> {\n+    pub fn print_debug_stats(&self) {\n+        sty_debug_print!(\n+            self,\n+            ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_closure, ty_trait,\n+            ty_struct, ty_unboxed_closure, ty_tup, ty_param, ty_open, ty_infer);\n+    }\n+}\n+\n #[deriving(Show)]\n pub struct TyS<'tcx> {\n     pub sty: sty<'tcx>,"}, {"sha": "aa10b63990312e1943dbddb94259ed54f145e8b0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "patch": "@@ -82,9 +82,20 @@ pub fn compile_input(sess: Session,\n         let type_arena = TypedArena::new();\n         let analysis = phase_3_run_analysis_passes(sess, ast_map, &type_arena, id);\n         phase_save_analysis(&analysis.ty_cx.sess, analysis.ty_cx.map.krate(), &analysis, outdir);\n+\n+        if log_enabled!(::log::INFO) {\n+            println!(\"Pre-trans\")\n+            analysis.ty_cx.print_debug_stats();\n+        }\n+\n         if stop_after_phase_3(&analysis.ty_cx.sess) { return; }\n         let (tcx, trans) = phase_4_translate_to_llvm(analysis);\n \n+        if log_enabled!(::log::INFO) {\n+            println!(\"Post-trans\")\n+            tcx.print_debug_stats();\n+        }\n+\n         // Discard interned strings as they are no longer required.\n         token::get_ident_interner().clear();\n "}, {"sha": "76763a861457cde4228df07fcf0c2424faeae1e9", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6bf67a2ccfe37912271f576ba2b1e1a568162/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "patch": "@@ -2125,14 +2125,20 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n fn enum_variant_size_lint(ccx: &CrateContext, enum_def: &ast::EnumDef, sp: Span, id: ast::NodeId) {\n     let mut sizes = Vec::new(); // does no allocation if no pushes, thankfully\n \n+    let print_info = log_enabled!(::log::INFO);\n+\n     let levels = ccx.tcx().node_lint_levels.borrow();\n     let lint_id = lint::LintId::of(lint::builtin::VARIANT_SIZE_DIFFERENCES);\n-    let lvlsrc = match levels.get(&(id, lint_id)) {\n-        None | Some(&(lint::Allow, _)) => return,\n-        Some(&lvlsrc) => lvlsrc,\n-    };\n+    let lvlsrc = levels.get(&(id, lint_id));\n+    let is_allow = lvlsrc.map_or(true, |&(lvl, _)| lvl == lint::Allow);\n+\n+    if is_allow && !print_info {\n+        // we're not interested in anything here\n+        return\n+    }\n \n-    let avar = adt::represent_type(ccx, ty::node_id_to_type(ccx.tcx(), id));\n+    let ty = ty::node_id_to_type(ccx.tcx(), id);\n+    let avar = adt::represent_type(ccx, ty);\n     match *avar {\n         adt::General(_, ref variants, _) => {\n             for var in variants.iter() {\n@@ -2158,13 +2164,29 @@ fn enum_variant_size_lint(ccx: &CrateContext, enum_def: &ast::EnumDef, sp: Span,\n             }\n     );\n \n+    if print_info {\n+        let llty = type_of::sizing_type_of(ccx, ty);\n+\n+        let sess = &ccx.tcx().sess;\n+        sess.span_note(sp, &*format!(\"total size: {} bytes\", llsize_of_real(ccx, llty)));\n+        match *avar {\n+            adt::General(..) => {\n+                for (i, var) in enum_def.variants.iter().enumerate() {\n+                    ccx.tcx().sess.span_note(var.span,\n+                                             &*format!(\"variant data: {} bytes\", sizes[i]));\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     // we only warn if the largest variant is at least thrice as large as\n     // the second-largest.\n-    if largest > slargest * 3 && slargest > 0 {\n+    if !is_allow && largest > slargest * 3 && slargest > 0 {\n         // Use lint::raw_emit_lint rather than sess.add_lint because the lint-printing\n         // pass for the latter already ran.\n         lint::raw_emit_lint(&ccx.tcx().sess, lint::builtin::VARIANT_SIZE_DIFFERENCES,\n-                            lvlsrc, Some(sp),\n+                            *lvlsrc.unwrap(), Some(sp),\n                             format!(\"enum variant is more than three times larger \\\n                                      ({} bytes) than the next largest (ignoring padding)\",\n                                     largest)[]);\n@@ -2332,8 +2354,12 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n       ast::ItemMod(ref m) => {\n         trans_mod(&ccx.rotate(), m);\n       }\n-      ast::ItemEnum(ref enum_definition, _) => {\n-        enum_variant_size_lint(ccx, enum_definition, item.span, item.id);\n+      ast::ItemEnum(ref enum_definition, ref gens) => {\n+        if gens.ty_params.is_empty() {\n+            // sizes only make sense for non-generic types\n+\n+            enum_variant_size_lint(ccx, enum_definition, item.span, item.id);\n+        }\n       }\n       ast::ItemConst(_, ref expr) => {\n           // Recurse on the expression to catch items in blocks"}]}