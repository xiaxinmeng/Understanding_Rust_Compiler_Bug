{"sha": "2e4e98335662dd0636338a0dfbbaf234f7ed473b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNGU5ODMzNTY2MmRkMDYzNjMzOGEwZGZiYmFmMjM0ZjdlZDQ3M2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T10:14:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:25:08Z"}, "message": "update tests", "tree": {"sha": "134c8b4670e9628d8a945e3e480ec7c53e601073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134c8b4670e9628d8a945e3e480ec7c53e601073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e4e98335662dd0636338a0dfbbaf234f7ed473b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4e98335662dd0636338a0dfbbaf234f7ed473b", "html_url": "https://github.com/rust-lang/rust/commit/2e4e98335662dd0636338a0dfbbaf234f7ed473b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e4e98335662dd0636338a0dfbbaf234f7ed473b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba20806e469958a935a320b2a6c82f4971387c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba20806e469958a935a320b2a6c82f4971387c3b", "html_url": "https://github.com/rust-lang/rust/commit/ba20806e469958a935a320b2a6c82f4971387c3b"}], "stats": {"total": 183, "additions": 178, "deletions": 5}, "files": [{"sha": "901ace59d33a04c75320af5150fe6a485e31f67c", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -1,4 +1,4 @@\n-error: user substs: Canonical { variables: [], value: [u32] }\n+error: user substs: Canonical { variables: [], value: UserSubsts { substs: [u32], user_self_ty: None } }\n   --> $DIR/dump-adt-brace-struct.rs:28:5\n    |\n LL |     SomeStruct::<u32> { t: 22 }; //~ ERROR [u32]"}, {"sha": "a26be359fc4aa4c28ed9b608c31d6604a727483d", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -1,22 +1,22 @@\n-error: user substs: Canonical { variables: [], value: [u32] }\n+error: user substs: Canonical { variables: [], value: UserSubsts { substs: [u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:36:13\n    |\n LL |     let x = foo::<u32>; //~ ERROR [u32]\n    |             ^^^^^^^^^^\n \n-error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: [?0, u32, ?1] }\n+error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [?0, u32, ?1], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:42:13\n    |\n LL |     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [?0, u32, ?1]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: user substs: Canonical { variables: [], value: [u8, u16, u32] }\n+error: user substs: Canonical { variables: [], value: UserSubsts { substs: [u8, u16, u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:46:13\n    |\n LL |     let x = <u8 as Bazoom<u16>>::method::<u32>; //~ ERROR [u8, u16, u32]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: [?0, ?1, u32] }\n+error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [?0, ?1, u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:54:5\n    |\n LL |     y.method::<u32>(44, 66); //~ ERROR [?0, ?1, u32]"}, {"sha": "4bca114e953f26916c540eb67d93052eecd6ec38", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.rs?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,19 @@\n+#![feature(nll)]\n+\n+// Check that substitutions given on the self type (here, `A`) carry\n+// through to NLL.\n+\n+struct A<'a> { x: &'a u32 }\n+\n+impl<'a> A<'a> {\n+    fn new<'b, T>(x: &'a u32, y: T) -> Self {\n+        Self { x }\n+    }\n+}\n+\n+fn foo<'a>() {\n+    let v = 22;\n+    let x = A::<'a>::new(&v, 22);\n+}\n+\n+fn main() {}"}, {"sha": "68a7684c963f902a7300dc330988165875ebc48b", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,17 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/method-ufcs-inherent-1.rs:16:26\n+   |\n+LL |     let x = A::<'a>::new(&v, 22);\n+   |                          ^^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n+  --> $DIR/method-ufcs-inherent-1.rs:14:8\n+   |\n+LL | fn foo<'a>() {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "f87f5cba391532b971707eb0fd6c11cfa59f7032", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.rs?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,19 @@\n+#![feature(nll)]\n+\n+// Check that substitutions given on the self type (here, `A`) can be\n+// used in combination with annotations given for method arguments.\n+\n+struct A<'a> { x: &'a u32 }\n+\n+impl<'a> A<'a> {\n+    fn new<'b, T>(x: &'a u32, y: T) -> Self {\n+        Self { x }\n+    }\n+}\n+\n+fn foo<'a>() {\n+    let v = 22;\n+    let x = A::<'a>::new::<&'a u32>(&v, &v);\n+}\n+\n+fn main() {}"}, {"sha": "0bdff99da9eea32f70a4ad81891cc148c802acd4", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-2.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/method-ufcs-inherent-2.rs:16:37\n+   |\n+LL |     let x = A::<'a>::new::<&'a u32>(&v, &v);\n+   |                                     ^^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n+  --> $DIR/method-ufcs-inherent-2.rs:14:8\n+   |\n+LL | fn foo<'a>() {\n+   |        ^^\n+\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/method-ufcs-inherent-2.rs:16:41\n+   |\n+LL |     let x = A::<'a>::new::<&'a u32>(&v, &v);\n+   |                                         ^^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n+  --> $DIR/method-ufcs-inherent-2.rs:14:8\n+   |\n+LL | fn foo<'a>() {\n+   |        ^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d8376e4bdc47c06470b2f753700d255960878f1c", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.rs?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,19 @@\n+#![feature(nll)]\n+\n+// Check that inherent methods invoked with `<T>::new` style\n+// carry their annotations through to NLL.\n+\n+struct A<'a> { x: &'a u32 }\n+\n+impl<'a> A<'a> {\n+    fn new<'b, T>(x: &'a u32, y: T) -> Self {\n+        Self { x }\n+    }\n+}\n+\n+fn foo<'a>() {\n+    let v = 22;\n+    let x = <A<'a>>::new(&v, 22);\n+}\n+\n+fn main() {}"}, {"sha": "122b26c72b23691bb5e604e0f729cbb18884ea09", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-3.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,17 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/method-ufcs-inherent-3.rs:16:26\n+   |\n+LL |     let x = <A<'a>>::new(&v, 22);\n+   |                          ^^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n+  --> $DIR/method-ufcs-inherent-3.rs:14:8\n+   |\n+LL | fn foo<'a>() {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e0fb9cedd37d7a64cc41070f0f807d2f111113e9", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-4.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.rs?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,20 @@\n+#![feature(nll)]\n+\n+// Check that inherent methods invoked with `<T>::new` style\n+// carry their annotations through to NLL in connection with\n+// method type parameters.\n+\n+struct A<'a> { x: &'a u32 }\n+\n+impl<'a> A<'a> {\n+    fn new<'b, T>(x: &'a u32, y: T) -> Self {\n+        Self { x }\n+    }\n+}\n+\n+fn foo<'a>() {\n+    let v = 22;\n+    let x = <A<'a>>::new::<&'a u32>(&v, &v);\n+}\n+\n+fn main() {}"}, {"sha": "b2f4066b2e86b7ea5af20e77c600f62fd68e7cd0", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-4.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e4e98335662dd0636338a0dfbbaf234f7ed473b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr?ref=2e4e98335662dd0636338a0dfbbaf234f7ed473b", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/method-ufcs-inherent-4.rs:17:37\n+   |\n+LL |     let x = <A<'a>>::new::<&'a u32>(&v, &v);\n+   |                                     ^^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:8...\n+  --> $DIR/method-ufcs-inherent-4.rs:15:8\n+   |\n+LL | fn foo<'a>() {\n+   |        ^^\n+\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/method-ufcs-inherent-4.rs:17:41\n+   |\n+LL |     let x = <A<'a>>::new::<&'a u32>(&v, &v);\n+   |                                         ^^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:8...\n+  --> $DIR/method-ufcs-inherent-4.rs:15:8\n+   |\n+LL | fn foo<'a>() {\n+   |        ^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}