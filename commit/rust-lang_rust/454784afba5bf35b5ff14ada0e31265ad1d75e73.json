{"sha": "454784afba5bf35b5ff14ada0e31265ad1d75e73", "node_id": "C_kwDOAAsO6NoAKDQ1NDc4NGFmYmE1YmYzNWI1ZmYxNGFkYTBlMzEyNjVhZDFkNzVlNzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T14:30:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T14:30:19Z"}, "message": "Auto merge of #104048 - cjgillot:split-lifetime, r=compiler-errors\n\nSeparate lifetime ident from lifetime resolution in HIR\n\nDrive-by: change how suggested generic args are computed.\nFixes https://github.com/rust-lang/rust/issues/103815\n\nI recommend reviewing commit-by-commit.", "tree": {"sha": "99c518c8558f20305cd854ab662861d9ba9a571e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c518c8558f20305cd854ab662861d9ba9a571e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454784afba5bf35b5ff14ada0e31265ad1d75e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454784afba5bf35b5ff14ada0e31265ad1d75e73", "html_url": "https://github.com/rust-lang/rust/commit/454784afba5bf35b5ff14ada0e31265ad1d75e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454784afba5bf35b5ff14ada0e31265ad1d75e73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df04d28163cc42e2c5b1072abe68460f904e42be", "url": "https://api.github.com/repos/rust-lang/rust/commits/df04d28163cc42e2c5b1072abe68460f904e42be", "html_url": "https://github.com/rust-lang/rust/commit/df04d28163cc42e2c5b1072abe68460f904e42be"}, {"sha": "5de9c841402d40ef30426b096c7696b1e01f2892", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de9c841402d40ef30426b096c7696b1e01f2892", "html_url": "https://github.com/rust-lang/rust/commit/5de9c841402d40ef30426b096c7696b1e01f2892"}], "stats": {"total": 1020, "additions": 583, "deletions": 437}, "files": [{"sha": "c14c591d3875dc593df3f4b0dd2797bb05ad4bbd", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -605,6 +605,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             output,\n             c_variadic: false,\n             implicit_self: hir::ImplicitSelfKind::None,\n+            lifetime_elision_allowed: false,\n         });\n \n         // Lower the argument pattern/ident. The ident is used again in the `.await` lowering.\n@@ -917,7 +918,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n         // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n+        let fn_decl = self.lower_fn_decl(decl, closure_id, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n             def_id: self.local_def_id(closure_id),\n@@ -1027,7 +1028,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // have to conserve the state of being inside a loop condition for the\n         // closure argument types.\n         let fn_decl =\n-            self.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n+            self.lower_fn_decl(&outer_decl, closure_id, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n             def_id: self.local_def_id(closure_id),"}, {"sha": "9def8536c824664fa4d3f00857848bfb74e7c002", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &'hir Lifetime) {\n-        self.insert(lifetime.span, lifetime.hir_id, Node::Lifetime(lifetime));\n+        self.insert(lifetime.ident.span, lifetime.hir_id, Node::Lifetime(lifetime));\n     }\n \n     fn visit_variant(&mut self, v: &'hir Variant<'hir>) {"}, {"sha": "2b47e90891291094560afbf51acb84a8467213d7", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -274,7 +274,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let mut itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n-                        this.lower_fn_decl(&decl, Some(id), *fn_sig_span, FnDeclKind::Fn, ret_id)\n+                        this.lower_fn_decl(&decl, id, *fn_sig_span, FnDeclKind::Fn, ret_id)\n                     });\n                     let sig = hir::FnSig {\n                         decl,\n@@ -659,7 +659,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(\n                                     fdec,\n-                                    None,\n+                                    i.id,\n                                     sig.span,\n                                     FnDeclKind::ExternFn,\n                                     None,\n@@ -1247,7 +1247,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let header = self.lower_fn_header(sig.header);\n         let mut itctx = ImplTraitContext::Universal;\n         let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n-            this.lower_fn_decl(&sig.decl, Some(id), sig.span, kind, is_async)\n+            this.lower_fn_decl(&sig.decl, id, sig.span, kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }\n@@ -1479,10 +1479,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }))\n             }\n             GenericParamKind::Lifetime => {\n-                let ident_span = self.lower_span(ident.span);\n                 let ident = self.lower_ident(ident);\n                 let lt_id = self.next_node_id();\n-                let lifetime = self.new_named_lifetime(id, lt_id, ident_span, ident);\n+                let lifetime = self.new_named_lifetime(id, lt_id, ident);\n                 Some(hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                     lifetime,\n                     span,"}, {"sha": "a123a58a8fbfa957b4cdb667e5864bb333276df5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 51, "deletions": 66, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -327,7 +327,14 @@ enum FnDeclKind {\n }\n \n impl FnDeclKind {\n-    fn impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+    fn param_impl_trait_allowed(&self) -> bool {\n+        match self {\n+            FnDeclKind::Fn | FnDeclKind::Inherent | FnDeclKind::Impl | FnDeclKind::Trait => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn return_impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             FnDeclKind::Fn | FnDeclKind::Inherent => true,\n             FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,\n@@ -1255,7 +1262,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     } else {\n                         self.next_node_id()\n                     };\n-                    let span = self.tcx.sess.source_map().start_point(t.span);\n+                    let span = self.tcx.sess.source_map().start_point(t.span).shrink_to_hi();\n                     Lifetime { ident: Ident::new(kw::UnderscoreLifetime, span), id }\n                 });\n                 let lifetime = self.lower_lifetime(&region);\n@@ -1267,7 +1274,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     generic_params,\n                     unsafety: self.lower_unsafety(f.unsafety),\n                     abi: self.lower_extern(f.ext),\n-                    decl: self.lower_fn_decl(&f.decl, None, t.span, FnDeclKind::Pointer, None),\n+                    decl: self.lower_fn_decl(&f.decl, t.id, t.span, FnDeclKind::Pointer, None),\n                     param_names: self.lower_fn_params_to_names(&f.decl),\n                 }))\n             }\n@@ -1546,15 +1553,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let lifetimes =\n             self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(|(_, lifetime)| {\n                 let id = self.next_node_id();\n-                let span = lifetime.ident.span;\n-\n-                let ident = if lifetime.ident.name == kw::UnderscoreLifetime {\n-                    Ident::with_dummy_span(kw::UnderscoreLifetime)\n-                } else {\n-                    lifetime.ident\n-                };\n-\n-                let l = self.new_named_lifetime(lifetime.id, id, span, ident);\n+                let l = self.new_named_lifetime(lifetime.id, id, lifetime.ident);\n                 hir::GenericArg::Lifetime(l)\n             }));\n         debug!(?lifetimes);\n@@ -1679,7 +1678,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n-        fn_node_id: Option<NodeId>,\n+        fn_node_id: NodeId,\n         fn_span: Span,\n         kind: FnDeclKind,\n         make_ret_async: Option<(NodeId, Span)>,\n@@ -1694,23 +1693,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             inputs = &inputs[..inputs.len() - 1];\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n-            if fn_node_id.is_some() {\n-                self.lower_ty_direct(&param.ty, &ImplTraitContext::Universal)\n+            let itctx = if kind.param_impl_trait_allowed() {\n+                ImplTraitContext::Universal\n             } else {\n-                self.lower_ty_direct(\n-                    &param.ty,\n-                    &ImplTraitContext::Disallowed(match kind {\n-                        FnDeclKind::Fn | FnDeclKind::Inherent => {\n-                            unreachable!(\"fn should allow in-band lifetimes\")\n-                        }\n-                        FnDeclKind::ExternFn => ImplTraitPosition::ExternFnParam,\n-                        FnDeclKind::Closure => ImplTraitPosition::ClosureParam,\n-                        FnDeclKind::Pointer => ImplTraitPosition::PointerParam,\n-                        FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n-                        FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n-                    }),\n-                )\n-            }\n+                ImplTraitContext::Disallowed(match kind {\n+                    FnDeclKind::Fn | FnDeclKind::Inherent => {\n+                        unreachable!(\"fn should allow APIT\")\n+                    }\n+                    FnDeclKind::ExternFn => ImplTraitPosition::ExternFnParam,\n+                    FnDeclKind::Closure => ImplTraitPosition::ClosureParam,\n+                    FnDeclKind::Pointer => ImplTraitPosition::PointerParam,\n+                    FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n+                    FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n+                })\n+            };\n+            self.lower_ty_direct(&param.ty, &itctx)\n         }));\n \n         let output = if let Some((ret_id, span)) = make_ret_async {\n@@ -1733,22 +1730,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             self.lower_async_fn_ret_ty(\n                 &decl.output,\n-                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                fn_node_id,\n                 ret_id,\n                 matches!(kind, FnDeclKind::Trait),\n             )\n         } else {\n             match &decl.output {\n                 FnRetTy::Ty(ty) => {\n-                    let mut context = match fn_node_id {\n-                        Some(fn_node_id) if kind.impl_trait_allowed(self.tcx) => {\n-                            let fn_def_id = self.local_def_id(fn_node_id);\n-                            ImplTraitContext::ReturnPositionOpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                                in_trait: matches!(kind, FnDeclKind::Trait),\n-                            }\n+                    let mut context = if kind.return_impl_trait_allowed(self.tcx) {\n+                        let fn_def_id = self.local_def_id(fn_node_id);\n+                        ImplTraitContext::ReturnPositionOpaqueTy {\n+                            origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                            in_trait: matches!(kind, FnDeclKind::Trait),\n                         }\n-                        _ => ImplTraitContext::Disallowed(match kind {\n+                    } else {\n+                        ImplTraitContext::Disallowed(match kind {\n                             FnDeclKind::Fn | FnDeclKind::Inherent => {\n                                 unreachable!(\"fn should allow in-band lifetimes\")\n                             }\n@@ -1757,7 +1753,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             FnDeclKind::Pointer => ImplTraitPosition::PointerReturn,\n                             FnDeclKind::Trait => ImplTraitPosition::TraitReturn,\n                             FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n-                        }),\n+                        })\n                     };\n                     hir::FnRetTy::Return(self.lower_ty(ty, &mut context))\n                 }\n@@ -1769,6 +1765,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             inputs,\n             output,\n             c_variadic,\n+            lifetime_elision_allowed: self.resolver.lifetime_elision_allowed.contains(&fn_node_id),\n             implicit_self: decl.inputs.get(0).map_or(hir::ImplicitSelfKind::None, |arg| {\n                 let is_mutable_pat = matches!(\n                     arg.pat.kind,\n@@ -2010,18 +2007,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let generic_args = self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(\n             |(_, lifetime, res)| {\n                 let id = self.next_node_id();\n-                let span = lifetime.ident.span;\n-\n-                let ident = if lifetime.ident.name == kw::UnderscoreLifetime {\n-                    Ident::with_dummy_span(kw::UnderscoreLifetime)\n-                } else {\n-                    lifetime.ident\n-                };\n-\n                 let res = res.unwrap_or(\n                     self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error),\n                 );\n-                hir::GenericArg::Lifetime(self.new_named_lifetime_with_res(id, span, ident, res))\n+                hir::GenericArg::Lifetime(self.new_named_lifetime_with_res(id, lifetime.ident, res))\n             },\n         ));\n \n@@ -2091,43 +2080,40 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_lifetime(&mut self, l: &Lifetime) -> &'hir hir::Lifetime {\n-        let span = self.lower_span(l.ident.span);\n         let ident = self.lower_ident(l.ident);\n-        self.new_named_lifetime(l.id, l.id, span, ident)\n+        self.new_named_lifetime(l.id, l.id, ident)\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn new_named_lifetime_with_res(\n         &mut self,\n         id: NodeId,\n-        span: Span,\n         ident: Ident,\n         res: LifetimeRes,\n     ) -> &'hir hir::Lifetime {\n-        let name = match res {\n+        let res = match res {\n             LifetimeRes::Param { param, .. } => {\n-                let p_name = ParamName::Plain(ident);\n                 let param = self.get_remapped_def_id(param);\n-\n-                hir::LifetimeName::Param(param, p_name)\n+                hir::LifetimeName::Param(param)\n             }\n             LifetimeRes::Fresh { param, .. } => {\n-                debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n                 let param = self.local_def_id(param);\n-\n-                hir::LifetimeName::Param(param, ParamName::Fresh)\n+                hir::LifetimeName::Param(param)\n             }\n             LifetimeRes::Infer => hir::LifetimeName::Infer,\n             LifetimeRes::Static => hir::LifetimeName::Static,\n             LifetimeRes::Error => hir::LifetimeName::Error,\n-            res => panic!(\"Unexpected lifetime resolution {:?} for {:?} at {:?}\", res, ident, span),\n+            res => panic!(\n+                \"Unexpected lifetime resolution {:?} for {:?} at {:?}\",\n+                res, ident, ident.span\n+            ),\n         };\n \n-        debug!(?name);\n+        debug!(?res);\n         self.arena.alloc(hir::Lifetime {\n             hir_id: self.lower_node_id(id),\n-            span: self.lower_span(span),\n-            name,\n+            ident: self.lower_ident(ident),\n+            res,\n         })\n     }\n \n@@ -2136,11 +2122,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         id: NodeId,\n         new_id: NodeId,\n-        span: Span,\n         ident: Ident,\n     ) -> &'hir hir::Lifetime {\n         let res = self.resolver.get_lifetime_res(id).unwrap_or(LifetimeRes::Error);\n-        self.new_named_lifetime_with_res(new_id, span, ident, res)\n+        self.new_named_lifetime_with_res(new_id, ident, res)\n     }\n \n     fn lower_generic_params_mut<'s>(\n@@ -2552,8 +2537,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn elided_dyn_bound(&mut self, span: Span) -> &'hir hir::Lifetime {\n         let r = hir::Lifetime {\n             hir_id: self.next_id(),\n-            span: self.lower_span(span),\n-            name: hir::LifetimeName::ImplicitObjectLifetimeDefault,\n+            ident: Ident::new(kw::Empty, self.lower_span(span)),\n+            res: hir::LifetimeName::ImplicitObjectLifetimeDefault,\n         };\n         debug!(\"elided_dyn_bound: r={:?}\", r);\n         self.arena.alloc(r)"}, {"sha": "dc85b5e95ea86d75a73a63cd9e0eaa1d9fb5bd1b", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let id = NodeId::from_u32(i);\n                 let l = self.lower_lifetime(&Lifetime {\n                     id,\n-                    ident: Ident::new(kw::UnderscoreLifetime, elided_lifetime_span),\n+                    ident: Ident::new(kw::Empty, elided_lifetime_span),\n                 });\n                 GenericArg::Lifetime(l)\n             }),"}, {"sha": "5ec9c5f5c1b5541ebab2610f9f4734cfecd0f393", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -2670,7 +2670,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             if let hir::TyKind::Rptr(lifetime, _) = &fn_decl.inputs[index].kind {\n                                 // With access to the lifetime, we can get\n                                 // the span of it.\n-                                arguments.push((*argument, lifetime.span));\n+                                arguments.push((*argument, lifetime.ident.span));\n                             } else {\n                                 bug!(\"ty type is a ref but hir type is not\");\n                             }\n@@ -2689,7 +2689,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let mut return_span = fn_decl.output.span();\n                 if let hir::FnRetTy::Return(ty) = &fn_decl.output {\n                     if let hir::TyKind::Rptr(lifetime, _) = ty.kind {\n-                        return_span = lifetime.span;\n+                        return_span = lifetime.ident.span;\n                     }\n                 }\n "}, {"sha": "0cf66e41001f84eff9a14acc0a0cb6cce9c0d47f", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1211,7 +1211,7 @@ fn get_mut_span_in_struct_field<'tcx>(\n         && let hir::Node::Field(field) = node\n         && let hir::TyKind::Rptr(lt, hir::MutTy { mutbl: hir::Mutability::Not, ty }) = field.ty.kind\n     {\n-        return Some(lt.span.between(ty.span));\n+        return Some(lt.ident.span.between(ty.span));\n     }\n \n     None"}, {"sha": "39173e70acfe93ccab8e84fe763c7555a36de5b6", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -576,30 +576,10 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let args = last_segment.args.as_ref()?;\n         let lifetime =\n             self.try_match_adt_and_generic_args(substs, needle_fr, args, search_stack)?;\n-        match lifetime.name {\n-            hir::LifetimeName::Param(_, hir::ParamName::Plain(_) | hir::ParamName::Error)\n-            | hir::LifetimeName::Error\n-            | hir::LifetimeName::Static => {\n-                let lifetime_span = lifetime.span;\n-                Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime_span))\n-            }\n-\n-            hir::LifetimeName::Param(_, hir::ParamName::Fresh)\n-            | hir::LifetimeName::ImplicitObjectLifetimeDefault\n-            | hir::LifetimeName::Infer => {\n-                // In this case, the user left off the lifetime; so\n-                // they wrote something like:\n-                //\n-                // ```\n-                // x: Foo<T>\n-                // ```\n-                //\n-                // where the fully elaborated form is `Foo<'_, '1,\n-                // T>`. We don't consider this a match; instead we let\n-                // the \"fully elaborated\" type fallback above handle\n-                // it.\n-                None\n-            }\n+        if lifetime.is_anonymous() {\n+            None\n+        } else {\n+            Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime.ident.span))\n         }\n     }\n "}, {"sha": "208d2fb42e42d7690205560fd3a7e7ee7dbf5dd7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 64, "deletions": 50, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -29,15 +29,16 @@ use std::fmt;\n #[derive(Debug, Copy, Clone, Encodable, HashStable_Generic)]\n pub struct Lifetime {\n     pub hir_id: HirId,\n-    pub span: Span,\n \n     /// Either \"`'a`\", referring to a named lifetime definition,\n-    /// or \"``\" (i.e., `kw::Empty`), for elision placeholders.\n+    /// `'_` referring to an anonymous lifetime (either explicitly `'_` or `&type`),\n+    /// or \"``\" (i.e., `kw::Empty`) when appearing in path.\n     ///\n-    /// HIR lowering inserts these placeholders in type paths that\n-    /// refer to type definitions needing lifetime parameters,\n-    /// `&T` and `&mut T`, and trait objects without `... + 'a`.\n-    pub name: LifetimeName,\n+    /// See `Lifetime::suggestion_position` for practical use.\n+    pub ident: Ident,\n+\n+    /// Semantics of this lifetime.\n+    pub res: LifetimeName,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Encodable, Hash, Copy)]\n@@ -88,7 +89,7 @@ impl ParamName {\n #[derive(HashStable_Generic)]\n pub enum LifetimeName {\n     /// User-given names or fresh (synthetic) names.\n-    Param(LocalDefId, ParamName),\n+    Param(LocalDefId),\n \n     /// Implicit lifetime in a context like `dyn Foo`. This is\n     /// distinguished from implicit lifetimes elsewhere because the\n@@ -116,25 +117,6 @@ pub enum LifetimeName {\n }\n \n impl LifetimeName {\n-    pub fn ident(&self) -> Ident {\n-        match *self {\n-            LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Error => Ident::empty(),\n-            LifetimeName::Infer => Ident::with_dummy_span(kw::UnderscoreLifetime),\n-            LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n-            LifetimeName::Param(_, param_name) => param_name.ident(),\n-        }\n-    }\n-\n-    pub fn is_anonymous(&self) -> bool {\n-        match *self {\n-            LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Infer\n-            | LifetimeName::Param(_, ParamName::Fresh)\n-            | LifetimeName::Error => true,\n-            LifetimeName::Static | LifetimeName::Param(..) => false,\n-        }\n-    }\n-\n     pub fn is_elided(&self) -> bool {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Infer => true,\n@@ -146,34 +128,54 @@ impl LifetimeName {\n             LifetimeName::Error | LifetimeName::Param(..) | LifetimeName::Static => false,\n         }\n     }\n-\n-    fn is_static(&self) -> bool {\n-        self == &LifetimeName::Static\n-    }\n-\n-    pub fn normalize_to_macros_2_0(&self) -> LifetimeName {\n-        match *self {\n-            LifetimeName::Param(def_id, param_name) => {\n-                LifetimeName::Param(def_id, param_name.normalize_to_macros_2_0())\n-            }\n-            lifetime_name => lifetime_name,\n-        }\n-    }\n }\n \n impl fmt::Display for Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.name.ident().fmt(f)\n+        if self.ident.name != kw::Empty { self.ident.name.fmt(f) } else { \"'_\".fmt(f) }\n     }\n }\n \n+pub enum LifetimeSuggestionPosition {\n+    /// The user wrote `'a` or `'_`.\n+    Normal,\n+    /// The user wrote `&type` or `&mut type`.\n+    Ampersand,\n+    /// The user wrote `Path` and omitted the `<'_>`.\n+    ElidedPath,\n+    /// The user wrote `Path<T>`, and omitted the `'_,`.\n+    ElidedPathArgument,\n+    /// The user wrote `dyn Trait` and omitted the `+ '_`.\n+    ObjectDefault,\n+}\n+\n impl Lifetime {\n     pub fn is_elided(&self) -> bool {\n-        self.name.is_elided()\n+        self.res.is_elided()\n+    }\n+\n+    pub fn is_anonymous(&self) -> bool {\n+        self.ident.name == kw::Empty || self.ident.name == kw::UnderscoreLifetime\n+    }\n+\n+    pub fn suggestion_position(&self) -> (LifetimeSuggestionPosition, Span) {\n+        if self.ident.name == kw::Empty {\n+            if self.ident.span.is_empty() {\n+                (LifetimeSuggestionPosition::ElidedPathArgument, self.ident.span)\n+            } else {\n+                (LifetimeSuggestionPosition::ElidedPath, self.ident.span.shrink_to_hi())\n+            }\n+        } else if self.res == LifetimeName::ImplicitObjectLifetimeDefault {\n+            (LifetimeSuggestionPosition::ObjectDefault, self.ident.span)\n+        } else if self.ident.span.is_empty() {\n+            (LifetimeSuggestionPosition::Ampersand, self.ident.span)\n+        } else {\n+            (LifetimeSuggestionPosition::Normal, self.ident.span)\n+        }\n     }\n \n     pub fn is_static(&self) -> bool {\n-        self.name.is_static()\n+        self.res == LifetimeName::Static\n     }\n }\n \n@@ -267,7 +269,7 @@ pub enum GenericArg<'hir> {\n impl GenericArg<'_> {\n     pub fn span(&self) -> Span {\n         match self {\n-            GenericArg::Lifetime(l) => l.span,\n+            GenericArg::Lifetime(l) => l.ident.span,\n             GenericArg::Type(t) => t.span,\n             GenericArg::Const(c) => c.span,\n             GenericArg::Infer(i) => i.span,\n@@ -284,7 +286,7 @@ impl GenericArg<'_> {\n     }\n \n     pub fn is_synthetic(&self) -> bool {\n-        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::empty())\n+        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.ident == Ident::empty())\n     }\n \n     pub fn descr(&self) -> &'static str {\n@@ -446,7 +448,7 @@ impl GenericBound<'_> {\n         match self {\n             GenericBound::Trait(t, ..) => t.span,\n             GenericBound::LangItemTrait(_, span, ..) => *span,\n-            GenericBound::Outlives(l) => l.span,\n+            GenericBound::Outlives(l) => l.ident.span,\n         }\n     }\n }\n@@ -559,6 +561,19 @@ impl<'hir> Generics<'hir> {\n         }\n     }\n \n+    /// If there are generic parameters, return where to introduce a new one.\n+    pub fn span_for_lifetime_suggestion(&self) -> Option<Span> {\n+        if let Some(first) = self.params.first()\n+            && self.span.contains(first.span)\n+        {\n+            // `fn foo<A>(t: impl Trait)`\n+            //         ^ suggest `'a, ` here\n+            Some(first.span.shrink_to_lo())\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// If there are generic parameters, return where to introduce a new one.\n     pub fn span_for_param_suggestion(&self) -> Option<Span> {\n         if self.params.iter().any(|p| self.span.contains(p.span)) {\n@@ -765,10 +780,7 @@ pub struct WhereRegionPredicate<'hir> {\n impl<'hir> WhereRegionPredicate<'hir> {\n     /// Returns `true` if `param_def_id` matches the `lifetime` of this predicate.\n     pub fn is_param_bound(&self, param_def_id: LocalDefId) -> bool {\n-        match self.lifetime.name {\n-            LifetimeName::Param(id, _) => id == param_def_id,\n-            _ => false,\n-        }\n+        self.lifetime.res == LifetimeName::Param(param_def_id)\n     }\n }\n \n@@ -2688,6 +2700,8 @@ pub struct FnDecl<'hir> {\n     pub c_variadic: bool,\n     /// Does the function have an implicit self?\n     pub implicit_self: ImplicitSelfKind,\n+    /// Is lifetime elision allowed.\n+    pub lifetime_elision_allowed: bool,\n }\n \n /// Represents what type of implicit self a function has, if any.\n@@ -3453,7 +3467,7 @@ impl<'hir> Node<'hir> {\n             | Node::Variant(Variant { ident, .. })\n             | Node::Item(Item { ident, .. })\n             | Node::PathSegment(PathSegment { ident, .. }) => Some(*ident),\n-            Node::Lifetime(lt) => Some(lt.name.ident()),\n+            Node::Lifetime(lt) => Some(lt.ident),\n             Node::GenericParam(p) => Some(p.name.ident()),\n             Node::TypeBinding(b) => Some(b.ident),\n             Node::Param(..)"}, {"sha": "957f8c1058e9869a63561a8c0b776f50ac42facb", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1109,17 +1109,7 @@ pub fn walk_generic_arg<'v, V: Visitor<'v>>(visitor: &mut V, generic_arg: &'v Ge\n \n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n     visitor.visit_id(lifetime.hir_id);\n-    match lifetime.name {\n-        LifetimeName::Param(_, ParamName::Plain(ident)) => {\n-            visitor.visit_ident(ident);\n-        }\n-        LifetimeName::Param(_, ParamName::Fresh)\n-        | LifetimeName::Param(_, ParamName::Error)\n-        | LifetimeName::Static\n-        | LifetimeName::Error\n-        | LifetimeName::ImplicitObjectLifetimeDefault\n-        | LifetimeName::Infer => {}\n-    }\n+    visitor.visit_ident(lifetime.ident);\n }\n \n pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath<'v>, id: HirId) {"}, {"sha": "98d967cc0b86e1446b3b1b469b580273c565a78f", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -5,6 +5,7 @@\n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n #![feature(const_btree_len)]\n+#![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "90469227a26c8e7cc7117a82e3361688a3bc0d7f", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -241,14 +241,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             None => {\n-                self.re_infer(def, lifetime.span).unwrap_or_else(|| {\n+                self.re_infer(def, lifetime.ident.span).unwrap_or_else(|| {\n                     debug!(?lifetime, \"unelided lifetime in signature\");\n \n                     // This indicates an illegal lifetime\n                     // elision. `resolve_lifetime` should have\n                     // reported an error in this case -- but if\n                     // not, let's error out.\n-                    tcx.sess.delay_span_bug(lifetime.span, \"unelided lifetime in signature\");\n+                    tcx.sess.delay_span_bug(lifetime.ident.span, \"unelided lifetime in signature\");\n \n                     // Supply some dummy value. We don't have an\n                     // `re_error`, annoyingly, so use `'static`.\n@@ -961,9 +961,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 hir::GenericBound::Outlives(lifetime) => {\n                     let region = self.ast_region_to_region(lifetime, None);\n-                    bounds\n-                        .region_bounds\n-                        .push((ty::Binder::bind_with_vars(region, bound_vars), lifetime.span));\n+                    bounds.region_bounds.push((\n+                        ty::Binder::bind_with_vars(region, bound_vars),\n+                        lifetime.ident.span,\n+                    ));\n                 }\n             }\n         }"}, {"sha": "639f81f20bfb9d2389ee19f73ae3cf2043e5087b", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -398,7 +398,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n                 Some(rl::Region::Static | rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _, _)) if debruijn < self.outer_index => {}\n                 Some(rl::Region::LateBound(..) | rl::Region::Free(..)) | None => {\n-                    self.has_late_bound_regions = Some(lt.span);\n+                    self.has_late_bound_regions = Some(lt.ident.span);\n                 }\n             }\n         }"}, {"sha": "c11eed7ad9e57cd315c94a0746d1d334198f272f", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 52, "deletions": 47, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -595,7 +595,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         this.visit_poly_trait_ref(bound);\n                     }\n                 });\n-                match lifetime.name {\n+                match lifetime.res {\n                     LifetimeName::ImplicitObjectLifetimeDefault => {\n                         // If the user does not write *anything*, we\n                         // use the object lifetime defaulting\n@@ -686,7 +686,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     if !parent_id.is_owner() {\n                         struct_span_err!(\n                             self.tcx.sess,\n-                            lifetime.span,\n+                            lifetime.ident.span,\n                             E0657,\n                             \"`impl Trait` can only capture lifetimes bound at the fn or impl level\"\n                         )\n@@ -698,7 +698,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }) = self.tcx.hir().get(parent_id)\n                     {\n                         let mut err = self.tcx.sess.struct_span_err(\n-                            lifetime.span,\n+                            lifetime.ident.span,\n                             \"higher kinded lifetime bounds on nested opaque types are not supported yet\",\n                         );\n                         err.span_note(self.tcx.def_span(def_id), \"lifetime declared here\");\n@@ -802,9 +802,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n-        match lifetime_ref.name {\n+        match lifetime_ref.res {\n             hir::LifetimeName::Static => self.insert_lifetime(lifetime_ref, Region::Static),\n-            hir::LifetimeName::Param(param_def_id, _) => {\n+            hir::LifetimeName::Param(param_def_id) => {\n                 self.resolve_lifetime_ref(param_def_id, lifetime_ref)\n             }\n             // If we've already reported an error, just ignore `lifetime_ref`.\n@@ -912,27 +912,27 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         this.visit_lifetime(lifetime);\n                         walk_list!(this, visit_param_bound, bounds);\n \n-                        if lifetime.name != hir::LifetimeName::Static {\n+                        if lifetime.res != hir::LifetimeName::Static {\n                             for bound in bounds {\n                                 let hir::GenericBound::Outlives(ref lt) = bound else {\n                                     continue;\n                                 };\n-                                if lt.name != hir::LifetimeName::Static {\n+                                if lt.res != hir::LifetimeName::Static {\n                                     continue;\n                                 }\n                                 this.insert_lifetime(lt, Region::Static);\n                                 this.tcx\n                                     .sess\n                                     .struct_span_warn(\n-                                        lifetime.span,\n+                                        lifetime.ident.span,\n                                         &format!(\n                                             \"unnecessary lifetime parameter `{}`\",\n-                                            lifetime.name.ident(),\n+                                            lifetime.ident,\n                                         ),\n                                     )\n                                     .help(&format!(\n                                         \"you can use the `'static` lifetime directly, in place of `{}`\",\n-                                        lifetime.name.ident(),\n+                                        lifetime.ident,\n                                     ))\n                                     .emit();\n                             }\n@@ -1043,15 +1043,15 @@ fn object_lifetime_default<'tcx>(tcx: TyCtxt<'tcx>, param_def_id: DefId) -> Obje\n \n                 for bound in bound.bounds {\n                     if let hir::GenericBound::Outlives(ref lifetime) = *bound {\n-                        set.insert(lifetime.name.normalize_to_macros_2_0());\n+                        set.insert(lifetime.res);\n                     }\n                 }\n             }\n \n             match set {\n                 Set1::Empty => ObjectLifetimeDefault::Empty,\n                 Set1::One(hir::LifetimeName::Static) => ObjectLifetimeDefault::Static,\n-                Set1::One(hir::LifetimeName::Param(param_def_id, _)) => {\n+                Set1::One(hir::LifetimeName::Param(param_def_id)) => {\n                     ObjectLifetimeDefault::Param(param_def_id.to_def_id())\n                 }\n                 _ => ObjectLifetimeDefault::Ambiguous,\n@@ -1195,42 +1195,50 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     // Fresh lifetimes in APIT used to be allowed in async fns and forbidden in\n                     // regular fns.\n                     if let Some(hir::PredicateOrigin::ImplTrait) = where_bound_origin\n-                        && let hir::LifetimeName::Param(_, hir::ParamName::Fresh) = lifetime_ref.name\n+                        && let hir::LifetimeName::Param(_) = lifetime_ref.res\n+                        && lifetime_ref.is_anonymous()\n                         && let hir::IsAsync::NotAsync = self.tcx.asyncness(lifetime_ref.hir_id.owner.def_id)\n                         && !self.tcx.features().anonymous_lifetime_in_impl_trait\n                     {\n                         let mut diag =  rustc_session::parse::feature_err(\n                             &self.tcx.sess.parse_sess,\n                             sym::anonymous_lifetime_in_impl_trait,\n-                            lifetime_ref.span,\n+                            lifetime_ref.ident.span,\n                             \"anonymous lifetimes in `impl Trait` are unstable\",\n                         );\n \n-                        match self.tcx.hir().get_generics(lifetime_ref.hir_id.owner.def_id) {\n-                            Some(generics) => {\n-\n-                                let new_param_sugg_tuple;\n-\n-                                new_param_sugg_tuple = match generics.span_for_param_suggestion() {\n-                                    Some(_) => {\n-                                        Some((self.tcx.sess.source_map().span_through_char(generics.span, '<').shrink_to_hi(), \"'a, \".to_owned()))\n-                                    },\n-                                    None => Some((generics.span, \"<'a>\".to_owned()))\n-                                };\n-\n-                                let mut multi_sugg_vec = vec![(lifetime_ref.span.shrink_to_hi(), \"'a \".to_owned())];\n-\n-                                if let Some(new_tuple) =  new_param_sugg_tuple{\n-                                    multi_sugg_vec.push(new_tuple);\n-                                }\n-\n-                                diag.span_label(lifetime_ref.span, \"expected named lifetime parameter\");\n-                                diag.multipart_suggestion(\"consider introducing a named lifetime parameter\",\n-                                multi_sugg_vec,\n-                                rustc_errors::Applicability::MaybeIncorrect);\n-\n-                            },\n-                            None => { }\n+                        if let Some(generics) =\n+                            self.tcx.hir().get_generics(lifetime_ref.hir_id.owner.def_id)\n+                        {\n+                            let new_param_sugg = if let Some(span) =\n+                                generics.span_for_lifetime_suggestion()\n+                            {\n+                                (span, \"'a, \".to_owned())\n+                            } else {\n+                                (generics.span, \"<'a>\".to_owned())\n+                            };\n+\n+                            let lifetime_sugg = match lifetime_ref.suggestion_position() {\n+                                (hir::LifetimeSuggestionPosition::Normal, span) => (span, \"'a\".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::Ampersand, span) => (span, \"'a \".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::ElidedPath, span) => (span, \"<'a>\".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::ElidedPathArgument, span) => (span, \"'a, \".to_owned()),\n+                                (hir::LifetimeSuggestionPosition::ObjectDefault, span) => (span, \"+ 'a\".to_owned()),\n+                            };\n+                            let suggestions = vec![\n+                                lifetime_sugg,\n+                                new_param_sugg,\n+                            ];\n+\n+                            diag.span_label(\n+                                lifetime_ref.ident.span,\n+                                \"expected named lifetime parameter\",\n+                            );\n+                            diag.multipart_suggestion(\n+                                \"consider introducing a named lifetime parameter\",\n+                                suggestions,\n+                                rustc_errors::Applicability::MaybeIncorrect,\n+                            );\n                         }\n \n                         diag.emit();\n@@ -1287,7 +1295,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     where_bound_origin: Some(hir::PredicateOrigin::ImplTrait), ..\n                 } => {\n                     let mut err = self.tcx.sess.struct_span_err(\n-                        lifetime_ref.span,\n+                        lifetime_ref.ident.span,\n                         \"`impl Trait` can only mention lifetimes bound at the fn or impl level\",\n                     );\n                     err.span_note(self.tcx.def_span(region_def_id), \"lifetime declared here\");\n@@ -1307,7 +1315,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         self.tcx.sess.delay_span_bug(\n-            lifetime_ref.span,\n+            lifetime_ref.ident.span,\n             &format!(\"Could not resolve {:?} in scope {:#?}\", lifetime_ref, self.scope,),\n         );\n     }\n@@ -1625,10 +1633,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n-        debug!(\n-            node = ?self.tcx.hir().node_to_string(lifetime_ref.hir_id),\n-            span = ?self.tcx.sess.source_map().span_to_diagnostic_string(lifetime_ref.span)\n-        );\n+        debug!(span = ?lifetime_ref.ident.span);\n         self.map.defs.insert(lifetime_ref.hir_id, def);\n     }\n \n@@ -1839,7 +1844,7 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n         }\n \n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n-            if let hir::LifetimeName::Param(def_id, _) = lifetime_ref.name {\n+            if let hir::LifetimeName::Param(def_id) = lifetime_ref.res {\n                 self.regions.insert(def_id);\n             }\n         }\n@@ -1852,7 +1857,7 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n \n     impl<'v> Visitor<'v> for AllCollector {\n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n-            if let hir::LifetimeName::Param(def_id, _) = lifetime_ref.name {\n+            if let hir::LifetimeName::Param(def_id) = lifetime_ref.res {\n                 self.regions.insert(def_id);\n             }\n         }"}, {"sha": "45e241f4e093d523cf2d6e35f380dc2a961cf464", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -229,7 +229,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 predicates.extend(region_pred.bounds.iter().map(|bound| {\n                     let (r2, span) = match bound {\n                         hir::GenericBound::Outlives(lt) => {\n-                            (<dyn AstConv<'_>>::ast_region_to_region(&icx, lt, None), lt.span)\n+                            (<dyn AstConv<'_>>::ast_region_to_region(&icx, lt, None), lt.ident.span)\n                         }\n                         _ => bug!(),\n                     };"}, {"sha": "4451db19f5c1e16be69603c89b1821fe7e2e1632", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -296,25 +296,35 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     ) -> String {\n         debug!(?path_hir_id);\n \n+        // If there was already a lifetime among the arguments, just replicate that one.\n+        if let Some(lt) = self.gen_args.args.iter().find_map(|arg| match arg {\n+            hir::GenericArg::Lifetime(lt) => Some(lt),\n+            _ => None,\n+        }) {\n+            return std::iter::repeat(lt.to_string())\n+                .take(num_params_to_take)\n+                .collect::<Vec<_>>()\n+                .join(\", \");\n+        }\n+\n         let mut ret = Vec::new();\n+        let mut ty_id = None;\n         for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n             debug!(?id);\n-            let params = if let Some(generics) = node.generics() {\n-                generics.params\n-            } else if let hir::Node::Ty(ty) = node\n-                && let hir::TyKind::BareFn(bare_fn) = ty.kind\n-            {\n-                bare_fn.generic_params\n-            } else {\n-                &[]\n-            };\n-            ret.extend(params.iter().filter_map(|p| {\n-                let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n-                    = p.kind\n-                else { return None };\n-                let hir::ParamName::Plain(name) = p.name else { return None };\n-                Some(name.to_string())\n-            }));\n+            if let hir::Node::Ty(_) = node {\n+                ty_id = Some(id);\n+            }\n+\n+            // Suggest `'_` when in function parameter or elided function return.\n+            if let Some(fn_decl) = node.fn_decl() && let Some(ty_id) = ty_id {\n+                let in_arg = fn_decl.inputs.iter().any(|t| t.hir_id == ty_id);\n+                let in_ret = matches!(fn_decl.output, hir::FnRetTy::Return(ty) if ty.hir_id == ty_id);\n+\n+                if in_arg || (in_ret && fn_decl.lifetime_elision_allowed) {\n+                    return std::iter::repeat(\"'_\".to_owned()).take(num_params_to_take).collect::<Vec<_>>().join(\", \");\n+                }\n+            }\n+\n             // Suggest `'static` when in const/static item-like.\n             if let hir::Node::Item(hir::Item {\n                 kind: hir::ItemKind::Static { .. } | hir::ItemKind::Const { .. },\n@@ -334,11 +344,29 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             })\n             | hir::Node::AnonConst(..) = node\n             {\n-                ret.extend(\n-                    std::iter::repeat(\"'static\".to_owned())\n-                        .take(num_params_to_take.saturating_sub(ret.len())),\n-                );\n+                return std::iter::repeat(\"'static\".to_owned())\n+                    .take(num_params_to_take.saturating_sub(ret.len()))\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n             }\n+\n+            let params = if let Some(generics) = node.generics() {\n+                generics.params\n+            } else if let hir::Node::Ty(ty) = node\n+                && let hir::TyKind::BareFn(bare_fn) = ty.kind\n+            {\n+                bare_fn.generic_params\n+            } else {\n+                &[]\n+            };\n+            ret.extend(params.iter().filter_map(|p| {\n+                let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n+                    = p.kind\n+                else { return None };\n+                let hir::ParamName::Plain(name) = p.name else { return None };\n+                Some(name.to_string())\n+            }));\n+\n             if ret.len() >= num_params_to_take {\n                 return ret[..num_params_to_take].join(\", \");\n             }"}, {"sha": "95729822677bd32e85597913535ca7165cdec4a6", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -2159,7 +2159,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_lifetime(&mut self, lifetime: &hir::Lifetime) {\n-        self.print_ident(lifetime.name.ident())\n+        self.print_ident(lifetime.ident)\n     }\n \n     pub fn print_where_clause(&mut self, generics: &hir::Generics<'_>) {"}, {"sha": "74c4c65cc1729a981db0c42c44e4c57d355cf6cd", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -375,7 +375,7 @@ impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n                 return false;\n             };\n \n-            if !lifetime_sub.name.is_anonymous() || !lifetime_sup.name.is_anonymous() {\n+            if !lifetime_sub.is_anonymous() || !lifetime_sup.is_anonymous() {\n                 return false;\n             };\n \n@@ -407,20 +407,20 @@ impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n             let suggestion_param_name =\n                 suggestion_param_name.map(|n| n.to_string()).unwrap_or_else(|| \"'a\".to_owned());\n \n-            debug!(?lifetime_sup.span);\n-            debug!(?lifetime_sub.span);\n-            let make_suggestion = |span: rustc_span::Span| {\n-                if span.is_empty() {\n-                    (span, format!(\"{}, \", suggestion_param_name))\n-                } else if let Ok(\"&\") = self.tcx.sess.source_map().span_to_snippet(span).as_deref()\n-                {\n-                    (span.shrink_to_hi(), format!(\"{} \", suggestion_param_name))\n+            debug!(?lifetime_sup.ident.span);\n+            debug!(?lifetime_sub.ident.span);\n+            let make_suggestion = |ident: Ident| {\n+                let sugg = if ident.name == kw::Empty {\n+                    format!(\"{}, \", suggestion_param_name)\n+                } else if ident.name == kw::UnderscoreLifetime && ident.span.is_empty() {\n+                    format!(\"{} \", suggestion_param_name)\n                 } else {\n-                    (span, suggestion_param_name.clone())\n-                }\n+                    suggestion_param_name.clone()\n+                };\n+                (ident.span, sugg)\n             };\n             let mut suggestions =\n-                vec![make_suggestion(lifetime_sub.span), make_suggestion(lifetime_sup.span)];\n+                vec![make_suggestion(lifetime_sub.ident), make_suggestion(lifetime_sup.ident)];\n \n             if introduce_new {\n                 let new_param_suggestion = if let Some(first) ="}, {"sha": "09f9aa3c84220981537e7c5734dd90c0a4dbb5a8", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -314,10 +314,10 @@ pub fn suggest_new_region_bound(\n                     .iter()\n                     .filter_map(|arg| match arg {\n                         GenericBound::Outlives(Lifetime {\n-                            name: LifetimeName::Static,\n-                            span,\n+                            res: LifetimeName::Static,\n+                            ident,\n                             ..\n-                        }) => Some(*span),\n+                        }) => Some(ident.span),\n                         _ => None,\n                     })\n                     .next()\n@@ -342,10 +342,10 @@ pub fn suggest_new_region_bound(\n                     .bounds\n                     .iter()\n                     .filter_map(|arg| match arg {\n-                        GenericBound::Outlives(Lifetime { name, span, .. })\n-                            if name.ident().to_string() == lifetime_name =>\n+                        GenericBound::Outlives(Lifetime { ident, .. })\n+                            if ident.name.to_string() == lifetime_name =>\n                         {\n-                            Some(*span)\n+                            Some(ident.span)\n                         }\n                         _ => None,\n                     })\n@@ -361,8 +361,8 @@ pub fn suggest_new_region_bound(\n                     );\n                 }\n             }\n-            TyKind::TraitObject(_, lt, _) => match lt.name {\n-                LifetimeName::ImplicitObjectLifetimeDefault => {\n+            TyKind::TraitObject(_, lt, _) => {\n+                if let LifetimeName::ImplicitObjectLifetimeDefault = lt.res {\n                     err.span_suggestion_verbose(\n                         fn_return.span.shrink_to_hi(),\n                         &format!(\n@@ -374,15 +374,14 @@ pub fn suggest_new_region_bound(\n                         &plus_lt,\n                         Applicability::MaybeIncorrect,\n                     );\n-                }\n-                name if name.ident().to_string() != lifetime_name => {\n+                } else if lt.ident.name.to_string() != lifetime_name {\n                     // With this check we avoid suggesting redundant bounds. This\n                     // would happen if there are nested impl/dyn traits and only\n                     // one of them has the bound we'd suggest already there, like\n                     // in `impl Foo<X = dyn Bar> + '_`.\n                     if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n-                            lt.span,\n+                            lt.ident.span,\n                             &format!(\"{} the trait object's {}\", consider, explicit_static),\n                             &lifetime_name,\n                             Applicability::MaybeIncorrect,\n@@ -397,8 +396,7 @@ pub fn suggest_new_region_bound(\n                         );\n                     }\n                 }\n-                _ => {}\n-            },\n+            }\n             _ => {}\n         }\n     }\n@@ -561,7 +559,7 @@ impl<'a, 'tcx> Visitor<'tcx> for HirTraitObjectVisitor<'a> {\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {\n         if let TyKind::TraitObject(\n             poly_trait_refs,\n-            Lifetime { name: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+            Lifetime { res: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n             _,\n         ) = t.kind\n         {"}, {"sha": "293f1c5c471a2c9cd6e3920eefb2b2f1407f3246", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -272,11 +272,7 @@ fn gen_args(segment: &PathSegment<'_>) -> String {\n             .args\n             .iter()\n             .filter_map(|arg| {\n-                if let GenericArg::Lifetime(lt) = arg {\n-                    Some(lt.name.ident().to_string())\n-                } else {\n-                    None\n-                }\n+                if let GenericArg::Lifetime(lt) = arg { Some(lt.ident.to_string()) } else { None }\n             })\n             .collect::<Vec<_>>();\n "}, {"sha": "cf1d82f4c06e1077250baf0d70b4d53d7c7382cd", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -78,7 +78,7 @@ fn gen_args(cx: &LateContext<'_>, segment: &PathSegment<'_>) -> String {\n             .args\n             .iter()\n             .map(|arg| match arg {\n-                GenericArg::Lifetime(lt) => lt.name.ident().to_string(),\n+                GenericArg::Lifetime(lt) => lt.to_string(),\n                 GenericArg::Type(ty) => {\n                     cx.tcx.sess.source_map().span_to_snippet(ty.span).unwrap_or_else(|_| \"_\".into())\n                 }"}, {"sha": "4617c17b1537ea67ee32d99430b1f3f5335e7db3", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1058,7 +1058,7 @@ impl<'hir> Map<'hir> {\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n             Node::Ctor(..) => self.span_with_body(self.get_parent_node(hir_id)),\n-            Node::Lifetime(lifetime) => lifetime.span,\n+            Node::Lifetime(lifetime) => lifetime.ident.span,\n             Node::GenericParam(param) => param.span,\n             Node::Infer(i) => i.span,\n             Node::Local(local) => local.span,"}, {"sha": "b087ff4bf53c4d23aaa5b11d76980bd9ebdd368f", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -397,7 +397,7 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n             hir::TyKind::TraitObject(\n                 _,\n                 hir::Lifetime {\n-                    name:\n+                    res:\n                         hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static,\n                     ..\n                 },\n@@ -421,10 +421,9 @@ pub struct StaticLifetimeVisitor<'tcx>(pub Vec<Span>, pub crate::hir::map::Map<'\n \n impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n     fn visit_lifetime(&mut self, lt: &'v hir::Lifetime) {\n-        if let hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static =\n-            lt.name\n+        if let hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static = lt.res\n         {\n-            self.0.push(lt.span);\n+            self.0.push(lt.ident.span);\n         }\n     }\n }"}, {"sha": "a8da93e4c69b0d54303c31917dd4a22a02082021", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -3,7 +3,7 @@ use crate::ty::{EarlyBinder, SubstsRef};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n \n use super::{EarlyBoundRegion, InstantiatedPredicates, ParamConst, ParamTy, Predicate, TyCtxt};\n@@ -78,6 +78,15 @@ impl GenericParamDef {\n         }\n     }\n \n+    pub fn is_anonymous_lifetime(&self) -> bool {\n+        match self.kind {\n+            GenericParamDefKind::Lifetime => {\n+                self.name == kw::UnderscoreLifetime || self.name == kw::Empty\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     pub fn default_value<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "d49f45744aee3aa3610f1b5a337ce120e270c670", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -208,6 +208,8 @@ pub struct ResolverAstLowering {\n     /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n     /// the surface (`macro` items in libcore), but are actually attributes or derives.\n     pub builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n+    /// List functions and methods for which lifetime elision was successful.\n+    pub lifetime_elision_allowed: FxHashSet<ast::NodeId>,\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -529,7 +531,7 @@ impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`).\n     pub fn has_name(&self) -> bool {\n-        self.name != kw::UnderscoreLifetime\n+        self.name != kw::UnderscoreLifetime && self.name != kw::Empty\n     }\n }\n "}, {"sha": "f93dc15068ef2a3a3aefbb2538ae571f33256519", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1977,17 +1977,13 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n         let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         match *region {\n-            ty::ReEarlyBound(ref data) => {\n-                data.name != kw::Empty && data.name != kw::UnderscoreLifetime\n-            }\n+            ty::ReEarlyBound(ref data) => data.has_name(),\n \n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n-                if let ty::BrNamed(_, name) = br {\n-                    if name != kw::Empty && name != kw::UnderscoreLifetime {\n-                        return true;\n-                    }\n+                if br.is_named() {\n+                    return true;\n                 }\n \n                 if let Some((region, _)) = highlight.highlight_bound_region {\n@@ -2063,11 +2059,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n             | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n-                if let ty::BrNamed(_, name) = br {\n-                    if name != kw::Empty && name != kw::UnderscoreLifetime {\n-                        p!(write(\"{}\", name));\n-                        return Ok(self);\n-                    }\n+                if let ty::BrNamed(_, name) = br && br.is_named() {\n+                    p!(write(\"{}\", name));\n+                    return Ok(self);\n                 }\n \n                 if let Some((region, counter)) = highlight.highlight_bound_region {\n@@ -2280,7 +2274,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n                         (name, ty::BrNamed(CRATE_DEF_ID.to_def_id(), name))\n                     }\n-                    ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n+                    ty::BrNamed(def_id, kw::UnderscoreLifetime | kw::Empty) => {\n                         let name = next_name(&self);\n \n                         if let Some(lt_idx) = lifetime_idx {"}, {"sha": "ac648152a4217d5cdc892f06e236be795f93c16b", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -83,7 +83,9 @@ pub struct BoundRegion {\n impl BoundRegionKind {\n     pub fn is_named(&self) -> bool {\n         match *self {\n-            BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,\n+            BoundRegionKind::BrNamed(_, name) => {\n+                name != kw::UnderscoreLifetime && name != kw::Empty\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "2d2408c061ee265559b9ad25ed18a633b5c7db75", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1838,6 +1838,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         let outer_failures = take(&mut self.diagnostic_metadata.current_elision_failures);\n         let output_rib = if let Ok(res) = elision_lifetime.as_ref() {\n+            self.r.lifetime_elision_allowed.insert(fn_id);\n             LifetimeRibKind::Elided(*res)\n         } else {\n             LifetimeRibKind::ElisionFailure"}, {"sha": "82214d4c3c438335819b205c87143868eec65b53", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1036,6 +1036,8 @@ pub struct Resolver<'a> {\n     /// they are declared in the static array generated by proc_macro_harness.\n     proc_macros: Vec<NodeId>,\n     confused_type_with_std_module: FxHashMap<Span, Span>,\n+    /// Whether lifetime elision was successful.\n+    lifetime_elision_allowed: FxHashSet<NodeId>,\n \n     effective_visibilities: EffectiveVisibilities,\n }\n@@ -1354,6 +1356,7 @@ impl<'a> Resolver<'a> {\n             trait_impls: Default::default(),\n             proc_macros: Default::default(),\n             confused_type_with_std_module: Default::default(),\n+            lifetime_elision_allowed: Default::default(),\n             effective_visibilities: Default::default(),\n         };\n \n@@ -1448,6 +1451,7 @@ impl<'a> Resolver<'a> {\n             def_id_to_node_id: self.def_id_to_node_id,\n             trait_map: self.trait_map,\n             builtin_macro_kinds: self.builtin_macro_kinds,\n+            lifetime_elision_allowed: self.lifetime_elision_allowed,\n         };\n         ResolverOutputs { definitions, global_ctxt, ast_lowering }\n     }\n@@ -1491,6 +1495,7 @@ impl<'a> Resolver<'a> {\n             def_id_to_node_id: self.def_id_to_node_id.clone(),\n             trait_map: self.trait_map.clone(),\n             builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n+            lifetime_elision_allowed: self.lifetime_elision_allowed.clone(),\n         };\n         ResolverOutputs { definitions, global_ctxt, ast_lowering }\n     }"}, {"sha": "9197a28c1888309481d8fbf19e8322c946199831", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -167,7 +167,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n             }\n             hir::TyKind::Rptr(ref lifetime, ref mt) => {\n                 let mut prefix = \"&\".to_owned();\n-                prefix.push_str(&lifetime.name.ident().to_string());\n+                prefix.push_str(&lifetime.ident.to_string());\n                 prefix.push(' ');\n                 if mt.mutbl.is_mut() {\n                     prefix.push_str(\"mut \");"}, {"sha": "582586d33febee531a333a5dac654e091e23f809", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -182,9 +182,7 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => {\n-                Some(GenericParamDef::lifetime(name))\n-            }\n+            ty::BrNamed(_, name) if br.is_named() => Some(GenericParamDef::lifetime(name)),\n             _ => None,\n         })\n         .collect();\n@@ -208,7 +206,7 @@ fn clean_lifetime<'tcx>(lifetime: &hir::Lifetime, cx: &mut DocContext<'tcx>) ->\n             return lt;\n         }\n     }\n-    Lifetime(lifetime.name.ident().name)\n+    Lifetime(lifetime.ident.name)\n }\n \n pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n@@ -233,16 +231,11 @@ pub(crate) fn clean_middle_const<'tcx>(\n pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Lifetime> {\n     match *region {\n         ty::ReStatic => Some(Lifetime::statik()),\n+        _ if !region.has_name() => None,\n         ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) => {\n-            if name != kw::UnderscoreLifetime { Some(Lifetime(name)) } else { None }\n-        }\n-        ty::ReEarlyBound(ref data) => {\n-            if data.name != kw::UnderscoreLifetime {\n-                Some(Lifetime(data.name))\n-            } else {\n-                None\n-            }\n+            Some(Lifetime(name))\n         }\n+        ty::ReEarlyBound(ref data) => Some(Lifetime(data.name)),\n         ty::ReLateBound(..)\n         | ty::ReFree(..)\n         | ty::ReVar(..)\n@@ -400,7 +393,7 @@ fn clean_projection_predicate<'tcx>(\n         .collect_referenced_late_bound_regions(&pred)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(Lifetime(name)),\n+            ty::BrNamed(_, name) if br.is_named() => Some(Lifetime(name)),\n             _ => None,\n         })\n         .collect();\n@@ -664,7 +657,7 @@ fn clean_ty_generics<'tcx>(\n         .params\n         .iter()\n         .filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Lifetime if param.name == kw::UnderscoreLifetime => None,\n+            ty::GenericParamDefKind::Lifetime if param.is_anonymous_lifetime() => None,\n             ty::GenericParamDefKind::Lifetime => Some(clean_generic_param_def(param, cx)),\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {\n@@ -1467,8 +1460,11 @@ fn maybe_expand_private_type_alias<'tcx>(\n                 });\n                 if let Some(lt) = lifetime {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned =\n-                        if !lt.is_elided() { clean_lifetime(lt, cx) } else { Lifetime::elided() };\n+                    let cleaned = if !lt.is_anonymous() {\n+                        clean_lifetime(lt, cx)\n+                    } else {\n+                        Lifetime::elided()\n+                    };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;\n@@ -1531,16 +1527,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::Never => Primitive(PrimitiveType::Never),\n         TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(clean_ty(m.ty, cx))),\n         TyKind::Rptr(ref l, ref m) => {\n-            // There are two times a `Fresh` lifetime can be created:\n-            // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n-            // 2. For `&x` as a parameter to an `async fn`. This corresponds to `elided_ref_lifetime in `rustc_ast_lowering`.\n-            //    See #59286 for more information.\n-            // Ideally we would only hide the `'_` for case 2., but I don't know a way to distinguish it.\n-            // Turning `fn f(&'_ self)` into `fn f(&self)` isn't the worst thing in the world, though;\n-            // there's no case where it could cause the function to fail to compile.\n-            let elided =\n-                l.is_elided() || matches!(l.name, LifetimeName::Param(_, ParamName::Fresh));\n-            let lifetime = if elided { None } else { Some(clean_lifetime(*l, cx)) };\n+            let lifetime = if l.is_anonymous() { None } else { Some(clean_lifetime(*l, cx)) };\n             BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(clean_ty(m.ty, cx)) }\n         }\n         TyKind::Slice(ty) => Slice(Box::new(clean_ty(ty, cx))),\n@@ -1915,7 +1902,7 @@ fn clean_generic_args<'tcx>(\n             .args\n             .iter()\n             .map(|arg| match arg {\n-                hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n+                hir::GenericArg::Lifetime(lt) if !lt.is_anonymous() => {\n                     GenericArg::Lifetime(clean_lifetime(*lt, cx))\n                 }\n                 hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),"}, {"sha": "8278edabe3a0655afb666ce49c9eb02aea147c15", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-102768.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -11,7 +11,7 @@ LL |     type Y<'a>;\n    |          ^ --\n help: add missing lifetime argument\n    |\n-LL |     fn f2<'a>(arg: Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n+LL |     fn f2<'a>(arg: Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n    |                                +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "bc1141b16c55d40380a91268a9592e8da0f3e706", "filename": "src/test/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -13,8 +13,8 @@ LL | struct S<'a, 'b>(&'a u8, &'b u8);\n    |        ^ --  --\n help: add missing lifetime argument\n    |\n-LL |     S::<'static, 'b>(&0, &0);\n-   |                ++++\n+LL |     S::<'static, 'static>(&0, &0);\n+   |                +++++++++\n \n error[E0107]: this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:19:5\n@@ -45,8 +45,8 @@ LL | enum E<'a, 'b> {\n    |      ^ --  --\n help: add missing lifetime argument\n    |\n-LL |     E::V::<'static, 'b>(&0);\n-   |                   ++++\n+LL |     E::V::<'static, 'static>(&0);\n+   |                   +++++++++\n \n error[E0107]: this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:24:8"}, {"sha": "a9996123f23437a6d3da97441051332a44836bcd", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -11,7 +11,7 @@ LL |     type Assoc<'a> where Self: 'a;\n    |          ^^^^^ --\n help: add missing lifetime argument\n    |\n-LL |     fn g(&self) -> Self::Assoc<'a>;\n+LL |     fn g(&self) -> Self::Assoc<'_>;\n    |                          ~~~~~~~~~\n \n error[E0107]: missing generics for associated type `Trait::Assoc`\n@@ -27,7 +27,7 @@ LL |     type Assoc<'a> where Self: 'a;\n    |          ^^^^^ --\n help: add missing lifetime argument\n    |\n-LL |     fn g(&self) -> Self::Assoc<'a> {\n+LL |     fn g(&self) -> Self::Assoc<'_> {\n    |                          ~~~~~~~~~\n \n error: aborting due to 2 previous errors"}, {"sha": "165779796e0bc4325a57d018b177e209a620bf66", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -36,7 +36,7 @@ LL |   type Y<'a>;\n    |        ^ --\n help: add missing lifetime argument\n    |\n-LL | fn foo<'a>(arg: Box<dyn X<Y('a, 'a) = &'a ()>>) {}\n+LL | fn foo<'a>(arg: Box<dyn X<Y('_, 'a) = &'a ()>>) {}\n    |                             +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n@@ -66,7 +66,7 @@ LL |   type Y<'a>;\n    |        ^ --\n help: add missing lifetime argument\n    |\n-LL | fn bar<'a>(arg: Box<dyn X<Y('a) = ()>>) {}\n+LL | fn bar<'a>(arg: Box<dyn X<Y('_) = ()>>) {}\n    |                             ++\n \n error: aborting due to 6 previous errors"}, {"sha": "9e21c567c73c52798a8442e35e4c4f4adac32937", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -11,7 +11,7 @@ LL |     type Item<'a>;\n    |          ^^^^ --\n help: add missing lifetime argument\n    |\n-LL |     fn next(&mut self) -> Option<Self::Item<'a>>;\n+LL |     fn next(&mut self) -> Option<Self::Item<'_>>;\n    |                                        ~~~~~~~~\n \n error: aborting due to previous error"}, {"sha": "752587c25a7335b589adbbae711671a9199f942f", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -11,7 +11,7 @@ LL |     type Y<'a, 'b>;\n    |          ^ --  --\n help: add missing lifetime arguments\n    |\n-LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'c, 'd> = (&'c u32, &'d u32)>>) {}\n+LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'_, '_> = (&'c u32, &'d u32)>>) {}\n    |                                ~~~~~~~~~\n \n error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n@@ -47,7 +47,7 @@ LL | struct Foo<'a, 'b, 'c> {\n    |        ^^^ --  --  --\n help: add missing lifetime arguments\n    |\n-LL | fn f<'a>(_arg: Foo<'a, 'b, 'c>) {}\n+LL | fn f<'a>(_arg: Foo<'a, 'a, 'a>) {}\n    |                      ++++++++\n \n error: aborting due to 3 previous errors"}, {"sha": "0a09ec5dc4935ba42b762e5a45a6ce3efb6b6a30", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -11,7 +11,7 @@ LL |     type Y<'a>;\n    |          ^ --\n help: add missing lifetime argument\n    |\n-LL |   fn f2<'a>(arg : Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n    |                               +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "0475eb908a779d0e1174b6be53bd444937013ddf", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -812,8 +812,8 @@ LL |         trait GenericLifetimeLifetimeAT<'a, 'b> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'b, AssocTy=()>>;\n-   |                                                           ++++\n+LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'static, AssocTy=()>>;\n+   |                                                           +++++++++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:287:26\n@@ -846,8 +846,8 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, AssocTy=()>>;\n-   |                                                               ++++\n+LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n+   |                                                               +++++++++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:294:26\n@@ -880,8 +880,8 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, (), AssocTy=()>>;\n-   |                                                               ++++\n+LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n+   |                                                               +++++++++\n \n error[E0107]: missing generics for struct `HashMap`\n   --> $DIR/wrong-number-of-args.rs:310:18"}, {"sha": "249b48ab1945b08c03bba45852182320069b4b73", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -13,8 +13,8 @@ LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n    |        ^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     S.early::<'static, 'b>();\n-   |                      ++++\n+LL |     S.early::<'static, 'static>();\n+   |                      +++++++++\n \n error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:18:7\n@@ -213,8 +213,8 @@ LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n    |        ^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     S::early::<'static, 'b>(S);\n-   |                       ++++\n+LL |     S::early::<'static, 'static>(S);\n+   |                       +++++++++\n \n error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:65:8"}, {"sha": "2a0e9497a21faf91093b0a016a7d327c206ad1ab", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -119,7 +119,7 @@ hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n hir-stats ForeignItemRef            24 ( 0.3%)             1            24\n-hir-stats Lifetime                  32 ( 0.3%)             1            32\n+hir-stats Lifetime                  24 ( 0.3%)             1            24\n hir-stats Mod                       32 ( 0.3%)             1            32\n hir-stats ExprField                 40 ( 0.4%)             1            40\n hir-stats TraitItemRef              56 ( 0.6%)             2            28\n@@ -152,7 +152,7 @@ hir-stats - Struct                    72 ( 0.8%)             1\n hir-stats - Binding                  216 ( 2.4%)             3\n hir-stats GenericParam             400 ( 4.4%)             5            80\n hir-stats Generics                 560 ( 6.1%)            10            56\n-hir-stats Ty                       720 ( 7.8%)            15            48\n+hir-stats Ty                       720 ( 7.9%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n hir-stats - Rptr                      48 ( 0.5%)             1\n hir-stats - Path                     624 ( 6.8%)            13\n@@ -171,8 +171,8 @@ hir-stats - ForeignMod                80 ( 0.9%)             1\n hir-stats - Impl                      80 ( 0.9%)             1\n hir-stats - Fn                       160 ( 1.7%)             2\n hir-stats - Use                      400 ( 4.4%)             5\n-hir-stats Path                   1_280 (13.9%)            32            40\n+hir-stats Path                   1_280 (14.0%)            32            40\n hir-stats PathSegment            1_920 (20.9%)            40            48\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_176\n+hir-stats Total                  9_168\n hir-stats"}, {"sha": "9839e973bdfe44fa106e68d75fbbd8d6cde8375f", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -2,20 +2,62 @@\n // gate-test-anonymous_lifetime_in_impl_trait\n // Verify the behaviour of `feature(anonymous_lifetime_in_impl_trait)`.\n \n-fn f(_: impl Iterator<Item = &'_ ()>) {}\n-//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+mod elided {\n+    fn f(_: impl Iterator<Item = &()>) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n \n-fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n-//~| ERROR missing lifetime specifier\n+    fn g(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n \n-// Anonymous lifetimes in async fn are already allowed.\n-// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n-async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+    async fn h(_: impl Iterator<Item = &()>) {}\n \n-// Anonymous lifetimes in async fn are already allowed.\n-// But that lifetime does not participate in resolution.\n-async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-//~^ ERROR missing lifetime specifier\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // But that lifetime does not participate in resolution.\n+    async fn i(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+mod underscore {\n+    fn f(_: impl Iterator<Item = &'_ ()>) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+    fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n+\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+    async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+\n+    // Anonymous lifetimes in async fn are already allowed.\n+    // But that lifetime does not participate in resolution.\n+    async fn i(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+mod alone_in_path {\n+    trait Foo<'a> { fn next(&mut self) -> Option<&'a ()>; }\n+\n+    fn f(_: impl Foo) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+    fn g(mut x: impl Foo) -> Option<&()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n+}\n+\n+mod in_path {\n+    trait Foo<'a, T> { fn next(&mut self) -> Option<&'a T>; }\n+\n+    fn f(_: impl Foo<()>) {}\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+    fn g(mut x: impl Foo<()>) -> Option<&()> { x.next() }\n+    //~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+    //~| ERROR missing lifetime specifier\n+}\n \n fn main() {}"}, {"sha": "50806a6725500c927195f62da3ccdcf252babef3", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.stderr", "status": "modified", "additions": 141, "deletions": 21, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -1,52 +1,172 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:50\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:9:54\n    |\n-LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-   |                                                  ^^ expected named lifetime parameter\n+LL |     fn g(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+   |                                                      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n help: consider using the `'static` lifetime\n    |\n-LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n-   |                                                  ~~~~~~~\n+LL |     fn g(mut x: impl Iterator<Item = &()>) -> Option<&'static ()> { x.next() }\n+   |                                                       +++++++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:18:56\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:19:60\n    |\n-LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-   |                                                        ^^ expected named lifetime parameter\n+LL |     async fn i(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+   |                                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n help: consider using the `'static` lifetime\n    |\n-LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n-   |                                                        ~~~~~~~\n+LL |     async fn i(mut x: impl Iterator<Item = &()>) -> Option<&'static ()> { x.next() }\n+   |                                                             +++++++\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:27:58\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                          ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                          ~~~~~~~\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:37:64\n+   |\n+LL |     async fn i(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                                ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     async fn i(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                                ~~~~~~~\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:47:37\n+   |\n+LL |     fn g(mut x: impl Foo) -> Option<&()> { x.next() }\n+   |                                     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     fn g(mut x: impl Foo) -> Option<&'static ()> { x.next() }\n+   |                                      +++++++\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:58:41\n+   |\n+LL |     fn g(mut x: impl Foo<()>) -> Option<&()> { x.next() }\n+   |                                         ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL |     fn g(mut x: impl Foo<()>) -> Option<&'static ()> { x.next() }\n+   |                                          +++++++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:6:35\n+   |\n+LL |     fn f(_: impl Iterator<Item = &()>) {}\n+   |                                   ^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n+   |         ++++                          ++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:9:39\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &()>) -> Option<&()> { x.next() }\n+   |                                       ^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn g<'a>(mut x: impl Iterator<Item = &'a ()>) -> Option<&()> { x.next() }\n+   |         ++++                              ++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:24:35\n+   |\n+LL |     fn f(_: impl Iterator<Item = &'_ ()>) {}\n+   |                                   ^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n+   |         ++++                          ~~\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:27:39\n+   |\n+LL |     fn g(mut x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                       ^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn g<'a>(mut x: impl Iterator<Item = &'a ()>) -> Option<&'_ ()> { x.next() }\n+   |         ++++                              ~~\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:44:18\n+   |\n+LL |     fn f(_: impl Foo) {}\n+   |                  ^^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn f<'a>(_: impl Foo<'a>) {}\n+   |         ++++            ++++\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:47:22\n+   |\n+LL |     fn g(mut x: impl Foo) -> Option<&()> { x.next() }\n+   |                      ^^^ expected named lifetime parameter\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     fn g<'a>(mut x: impl Foo<'a>) -> Option<&()> { x.next() }\n+   |         ++++                ++++\n \n error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:5:31\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:55:22\n    |\n-LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n-   |                               ^^ expected named lifetime parameter\n+LL |     fn f(_: impl Foo<()>) {}\n+   |                      ^ expected named lifetime parameter\n    |\n    = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn f<'a>(_: impl Iterator<Item = &'_'a  ()>) {}\n-   |     ++++                            ++\n+LL |     fn f<'a>(_: impl Foo<'a, ()>) {}\n+   |         ++++             +++\n \n error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n-  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:31\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:58:26\n    |\n-LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n-   |                               ^^ expected named lifetime parameter\n+LL |     fn g(mut x: impl Foo<()>) -> Option<&()> { x.next() }\n+   |                          ^ expected named lifetime parameter\n    |\n    = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'a>(x: impl Iterator<Item = &'_'a  ()>) -> Option<&'_ ()> { x.next() }\n-   |     ++++                            ++\n+LL |     fn g<'a>(mut x: impl Foo<'a, ()>) -> Option<&()> { x.next() }\n+   |         ++++                 +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0106, E0658.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "997bbb5e9b5af141095796077910fd8e2ebe9656", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -166,8 +166,8 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                       ++++\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       +++++++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n@@ -184,8 +184,8 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                       ++++\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       +++++++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n@@ -202,8 +202,8 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                       ++++\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       +++++++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n@@ -256,8 +256,8 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                        ++++\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        +++++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n@@ -274,8 +274,8 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                        ++++\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        +++++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n@@ -292,8 +292,8 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                        ++++\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        +++++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45"}, {"sha": "220941dcd5dbf6c4b0696b6c4d7fef98aa578a4f", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::lang_items;\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn, TraitItem,\n-    TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, LifetimeParamKind, PolyTraitRef, PredicateOrigin, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -180,7 +180,7 @@ fn check_fn_inner<'tcx>(\n                             _ => None,\n                         });\n                         for bound in lifetimes {\n-                            if bound.name != LifetimeName::Static && !bound.is_elided() {\n+                            if !bound.is_static() && !bound.is_elided() {\n                                 return;\n                             }\n                         }\n@@ -414,17 +414,13 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n \n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let Some(ref lt) = *lifetime {\n-            if lt.name == LifetimeName::Static {\n+            if lt.is_static() {\n                 self.lts.push(RefLt::Static);\n-            } else if let LifetimeName::Param(_, ParamName::Fresh) = lt.name {\n+            } else if lt.is_anonymous() {\n                 // Fresh lifetimes generated should be ignored.\n                 self.lts.push(RefLt::Unnamed);\n-            } else if lt.is_elided() {\n-                self.lts.push(RefLt::Unnamed);\n-            } else if let LifetimeName::Param(def_id, _) = lt.name {\n+            } else if let LifetimeName::Param(def_id) = lt.res {\n                 self.lts.push(RefLt::Named(def_id));\n-            } else {\n-                self.lts.push(RefLt::Unnamed);\n             }\n         } else {\n             self.lts.push(RefLt::Unnamed);\n@@ -472,7 +468,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 walk_item(self, item);\n                 self.lts.truncate(len);\n                 self.lts.extend(bounds.iter().filter_map(|bound| match bound {\n-                    GenericArg::Lifetime(l) => Some(if let LifetimeName::Param(def_id, _) = l.name {\n+                    GenericArg::Lifetime(l) => Some(if let LifetimeName::Param(def_id) = l.res {\n                         RefLt::Named(def_id)\n                     } else {\n                         RefLt::Unnamed\n@@ -498,10 +494,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n     }\n \n     fn visit_generic_arg(&mut self, generic_arg: &'tcx GenericArg<'tcx>) {\n-        if let GenericArg::Lifetime(l) = generic_arg\n-            && let LifetimeName::Param(def_id, _) = l.name\n-        {\n-            self.lifetime_generic_arg_spans.entry(def_id).or_insert(l.span);\n+        if let GenericArg::Lifetime(l) = generic_arg && let LifetimeName::Param(def_id) = l.res {\n+            self.lifetime_generic_arg_spans.entry(def_id).or_insert(l.ident.span);\n         }\n         // Replace with `walk_generic_arg` if/when https://github.com/rust-lang/rust/pull/103692 lands.\n         // walk_generic_arg(self, generic_arg);\n@@ -577,7 +571,7 @@ where\n \n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        self.map.remove(&lifetime.name.ident().name);\n+        self.map.remove(&lifetime.ident.name);\n     }\n \n     fn visit_generic_param(&mut self, param: &'tcx GenericParam<'_>) {\n@@ -601,7 +595,9 @@ fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>,\n         .params\n         .iter()\n         .filter_map(|par| match par.kind {\n-            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            GenericParamKind::Lifetime {\n+                kind: LifetimeParamKind::Explicit,\n+            } => Some((par.name.ident().name, par.span)),\n             _ => None,\n         })\n         .collect();\n@@ -626,7 +622,9 @@ fn report_extra_impl_lifetimes<'tcx>(cx: &LateContext<'tcx>, impl_: &'tcx Impl<'\n         .params\n         .iter()\n         .filter_map(|par| match par.kind {\n-            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            GenericParamKind::Lifetime {\n+                kind: LifetimeParamKind::Explicit,\n+            } => Some((par.name.ident().name, par.span)),\n             _ => None,\n         })\n         .collect();\n@@ -653,7 +651,7 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name.ident().name != kw::UnderscoreLifetime && lifetime.name.ident().name != kw::StaticLifetime {\n+        if !lifetime.is_anonymous() && lifetime.ident.name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}, {"sha": "075ecbe7eded37340c1b36db85654ea7996588dc", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -118,7 +118,7 @@ fn future_trait_ref<'tcx>(\n                 .iter()\n                 .filter_map(|bound| {\n                     if let GenericArg::Lifetime(lt) = bound {\n-                        Some(lt.name)\n+                        Some(lt.res)\n                     } else {\n                         None\n                     }\n@@ -153,7 +153,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n         .iter()\n         .filter_map(|ty| {\n             if let TyKind::Rptr(lt, _) = ty.kind {\n-                Some(lt.name)\n+                Some(lt.res)\n             } else {\n                 None\n             }"}, {"sha": "92920bbad6e0a9a394ce2797f9e1a0ef90b635e7", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -12,8 +12,8 @@ use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{\n     self as hir, AnonConst, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnRetTy, FnSig, GenericArg,\n-    ImplItemKind, ItemKind, Lifetime, LifetimeName, Mutability, Node, Param, ParamName, PatKind, QPath, TraitFn,\n-    TraitItem, TraitItemKind, TyKind, Unsafety,\n+    ImplItemKind, ItemKind, Lifetime, Mutability, Node, Param, PatKind, QPath, TraitFn, TraitItem, TraitItemKind,\n+    TyKind, Unsafety,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{Obligation, ObligationCause};\n@@ -343,21 +343,16 @@ impl PtrArg<'_> {\n }\n \n struct RefPrefix {\n-    lt: LifetimeName,\n+    lt: Lifetime,\n     mutability: Mutability,\n }\n impl fmt::Display for RefPrefix {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use fmt::Write;\n         f.write_char('&')?;\n-        match self.lt {\n-            LifetimeName::Param(_, ParamName::Plain(name)) => {\n-                name.fmt(f)?;\n-                f.write_char(' ')?;\n-            },\n-            LifetimeName::Infer => f.write_str(\"'_ \")?,\n-            LifetimeName::Static => f.write_str(\"'static \")?,\n-            _ => (),\n+        if !self.lt.is_anonymous() {\n+            self.lt.ident.fmt(f)?;\n+            f.write_char(' ')?;\n         }\n         f.write_str(self.mutability.prefix_str())\n     }\n@@ -495,7 +490,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                         ty_name: name.ident.name,\n                         method_renames,\n                         ref_prefix: RefPrefix {\n-                            lt: lt.name,\n+                            lt: lt.clone(),\n                             mutability,\n                         },\n                         deref_ty,"}, {"sha": "65dfe7637ea99e0c5b05b5dbaeadcba6cad73c76", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -31,10 +31,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                         return false;\n                     }\n \n-                    let ltopt = if lt.name.is_anonymous() {\n+                    let ltopt = if lt.is_anonymous() {\n                         String::new()\n                     } else {\n-                        format!(\"{} \", lt.name.ident().as_str())\n+                        format!(\"{} \", lt.ident.as_str())\n                     };\n \n                     if mut_ty.mutbl == Mutability::Mut {"}, {"sha": "07fb6af91ba042f8a6372abb74171233ea891eb3", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454784afba5bf35b5ff14ada0e31265ad1d75e73/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=454784afba5bf35b5ff14ada0e31265ad1d75e73", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n     ArrayLen, BinOpKind, BindingAnnotation, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg,\n-    GenericArgs, Guard, HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path,\n+    GenericArgs, Guard, HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, Pat, PatField, PatKind, Path,\n     PathSegment, PrimTy, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n@@ -337,7 +337,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_lifetime(left: &Lifetime, right: &Lifetime) -> bool {\n-        left.name == right.name\n+        left.res == right.res\n     }\n \n     fn eq_pat_field(&mut self, left: &PatField<'_>, right: &PatField<'_>) -> bool {\n@@ -925,16 +925,10 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     }\n \n     pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n-        std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n-        if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n-            std::mem::discriminant(name).hash(&mut self.s);\n+        lifetime.ident.name.hash(&mut self.s);\n+        std::mem::discriminant(&lifetime.res).hash(&mut self.s);\n+        if let LifetimeName::Param(param_id) = lifetime.res {\n             param_id.hash(&mut self.s);\n-            match name {\n-                ParamName::Plain(ref ident) => {\n-                    ident.name.hash(&mut self.s);\n-                },\n-                ParamName::Fresh | ParamName::Error => {},\n-            }\n         }\n     }\n "}]}