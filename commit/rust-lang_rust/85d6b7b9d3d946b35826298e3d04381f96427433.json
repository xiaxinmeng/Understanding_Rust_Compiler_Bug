{"sha": "85d6b7b9d3d946b35826298e3d04381f96427433", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZDZiN2I5ZDNkOTQ2YjM1ODI2Mjk4ZTNkMDQzODFmOTY0Mjc0MzM=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-28T01:58:42Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-28T01:58:42Z"}, "message": "Address naming and comments from reviews", "tree": {"sha": "b4a9fa6fec6b510bf6d64e7291f8e9e779eb6e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a9fa6fec6b510bf6d64e7291f8e9e779eb6e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d6b7b9d3d946b35826298e3d04381f96427433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d6b7b9d3d946b35826298e3d04381f96427433", "html_url": "https://github.com/rust-lang/rust/commit/85d6b7b9d3d946b35826298e3d04381f96427433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d6b7b9d3d946b35826298e3d04381f96427433/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df58fcffbcc2dea6eb31934424ce74b3636c5b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/df58fcffbcc2dea6eb31934424ce74b3636c5b68", "html_url": "https://github.com/rust-lang/rust/commit/df58fcffbcc2dea6eb31934424ce74b3636c5b68"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "dcfa2e5cb469142c389dffa4bfaaa8513ed3751f", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85d6b7b9d3d946b35826298e3d04381f96427433/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d6b7b9d3d946b35826298e3d04381f96427433/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=85d6b7b9d3d946b35826298e3d04381f96427433", "patch": "@@ -136,15 +136,15 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n         self.size.bytes() as usize\n     }\n \n-    /// Look at a slice which may describe undefined bytes or describe a relocation. This differs\n+    /// Looks at a slice which may describe undefined bytes or describe a relocation. This differs\n     /// from `get_bytes_with_undef_and_ptr` in that it does no relocation checks (even on the\n     /// edges) at all. It further ignores `AllocationExtra` callbacks.\n     /// This must not be used for reads affecting the interpreter execution.\n     pub fn inspect_with_undef_and_ptr_outside_interpreter(&self, range: Range<usize>) -> &[u8] {\n         &self.bytes[range]\n     }\n \n-    /// View the undef mask.\n+    /// Returns the undef mask.\n     pub fn undef_mask(&self) -> &UndefMask {\n         &self.undef_mask\n     }\n@@ -583,7 +583,7 @@ pub struct AllocationDefinedness {\n /// Transferring the definedness mask to other allocations.\n impl<Tag, Extra> Allocation<Tag, Extra> {\n     /// Creates a run-length encoding of the undef_mask.\n-    pub fn compress_defined_range(\n+    pub fn compress_undef_range(\n         &self,\n         src: Pointer<Tag>,\n         size: Size,\n@@ -622,7 +622,7 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n     }\n \n     /// Apply multiple instances of the run-length encoding to the undef_mask.\n-    pub fn mark_compressed_range(\n+    pub fn mark_compressed_undef_range(\n         &mut self,\n         defined: &AllocationDefinedness,\n         dest: Pointer<Tag>,"}, {"sha": "8725e69b11270a8118b5aa0fff8829b5426a3404", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85d6b7b9d3d946b35826298e3d04381f96427433/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d6b7b9d3d946b35826298e3d04381f96427433/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=85d6b7b9d3d946b35826298e3d04381f96427433", "patch": "@@ -35,9 +35,9 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;\n         if offset > next_offset {\n-            // This `inspect` is okay since we have check that it is not within a relocation, it is\n-            // within the bounds of the allocation, and it doesn't affect interpreter execution (we\n-            // inspect the result after interpreter execution). Any undef byte is replaced with\n+            // This `inspect` is okay since we have checked that it is not within a relocation, it\n+            // is within the bounds of the allocation, and it doesn't affect interpreter execution\n+            // (we inspect the result after interpreter execution). Any undef byte is replaced with\n             // some arbitrary byte value.\n             //\n             // FIXME: relay undef bytes to codegen as undef const bytes"}, {"sha": "7f7729ae5e0f49f7be44ae8722d9713f948d3e5a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85d6b7b9d3d946b35826298e3d04381f96427433/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d6b7b9d3d946b35826298e3d04381f96427433/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=85d6b7b9d3d946b35826298e3d04381f96427433", "patch": "@@ -900,11 +900,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         assert_eq!(size.bytes() as usize as u64, size.bytes());\n \n         let src_alloc = self.get(src.alloc_id)?;\n-        let compressed = src_alloc.compress_defined_range(src, size);\n+        let compressed = src_alloc.compress_undef_range(src, size);\n \n         // now fill in all the data\n         let dest_allocation = self.get_mut(dest.alloc_id)?;\n-        dest_allocation.mark_compressed_range(&compressed, dest, size, repeat);\n+        dest_allocation.mark_compressed_undef_range(&compressed, dest, size, repeat);\n \n         Ok(())\n     }"}]}