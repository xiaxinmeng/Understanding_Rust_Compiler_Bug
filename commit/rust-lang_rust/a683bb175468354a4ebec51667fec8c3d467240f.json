{"sha": "a683bb175468354a4ebec51667fec8c3d467240f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ODNiYjE3NTQ2ODM1NGE0ZWJlYzUxNjY3ZmVjOGMzZDQ2NzI0MGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-07-01T14:41:37Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-07-01T14:41:37Z"}, "message": "Revert \"implicit `Option`-returning doctests\"\n\nThis reverts commit 6bb6c001be34d0932a014df981ee18f165c43374.", "tree": {"sha": "5afe2f6f3065cab01a7a1b9e65dba25bddaf85f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5afe2f6f3065cab01a7a1b9e65dba25bddaf85f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a683bb175468354a4ebec51667fec8c3d467240f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a683bb175468354a4ebec51667fec8c3d467240f", "html_url": "https://github.com/rust-lang/rust/commit/a683bb175468354a4ebec51667fec8c3d467240f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a683bb175468354a4ebec51667fec8c3d467240f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765eebf064ae17347f3532791760fc5c2150b5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/765eebf064ae17347f3532791760fc5c2150b5ea", "html_url": "https://github.com/rust-lang/rust/commit/765eebf064ae17347f3532791760fc5c2150b5ea"}], "stats": {"total": 32, "additions": 1, "deletions": 31}, "files": [{"sha": "c9acd3c307b54690851393d1e5304d78cbcee2ad", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a683bb175468354a4ebec51667fec8c3d467240f/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/a683bb175468354a4ebec51667fec8c3d467240f/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=a683bb175468354a4ebec51667fec8c3d467240f", "patch": "@@ -253,19 +253,6 @@ conversion, so type inference fails because the type is not unique. Please note\n that you must write the `(())` in one sequence without intermediate whitespace\n so that rustdoc understands you want an implicit `Result`-returning function.\n \n-As of version 1.37.0, this simplification also works with `Option`s, which can\n-be handy to test e.g. iterators or checked arithmetic, for example:\n-\n-```ignore\n-/// ```\n-/// let _ = &[].iter().next()?;\n-///# Some(())\n-/// ```\n-```\n-\n-Note that the result must be a `Some(())` and this has to be written in one go.\n-In this case disambiguating the result isn't required.\n-\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "63545ab45bf64fbb3da8b1689d08fe8f0d94a477", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a683bb175468354a4ebec51667fec8c3d467240f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a683bb175468354a4ebec51667fec8c3d467240f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a683bb175468354a4ebec51667fec8c3d467240f", "patch": "@@ -528,13 +528,8 @@ pub fn make_test(s: &str,\n         prog.push_str(everything_else);\n     } else {\n         let returns_result = everything_else.trim_end().ends_with(\"(())\");\n-        let returns_option = everything_else.trim_end().ends_with(\"Some(())\");\n         let (main_pre, main_post) = if returns_result {\n-            (if returns_option {\n-                \"fn main() { fn _inner() -> Option<()> {\"\n-            } else {\n-                \"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\"\n-            },\n+            (\"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\",\n              \"}\\n_inner().unwrap() }\")\n         } else {\n             (\"fn main() {\\n\", \"\\n}\")"}, {"sha": "32258792b6e8b88c601b50ac6d4a53b5e84d69be", "filename": "src/test/rustdoc/process-termination.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a683bb175468354a4ebec51667fec8c3d467240f/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a683bb175468354a4ebec51667fec8c3d467240f/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprocess-termination.rs?ref=a683bb175468354a4ebec51667fec8c3d467240f", "patch": "@@ -21,16 +21,4 @@\n /// Err(\"This is returned from `main`, leading to panic\")?;\n /// Ok::<(), &'static str>(())\n /// ```\n-///\n-/// This also works with `Option<()>`s now:\n-///\n-/// ```rust\n-/// Some(())\n-/// ```\n-///\n-/// ```rust,should_panic\n-/// let x: &[u32] = &[];\n-/// let _ = x.iter().next()?;\n-/// Some(())\n-/// ```\n pub fn check_process_termination() {}"}]}