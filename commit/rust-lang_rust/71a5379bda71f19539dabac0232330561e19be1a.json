{"sha": "71a5379bda71f19539dabac0232330561e19be1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTUzNzliZGE3MWYxOTUzOWRhYmFjMDIzMjMzMDU2MWUxOWJlMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-12T09:02:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-12T09:02:18Z"}, "message": "Auto merge of #5088 - rust-lang:gha, r=Manishearth,flip1995\n\nSwitch to GitHub Actions - Part 2 - From within\n\nThis is a continuation of #5071. This time from a branch inside the rust-lang/rust-clippy repo, not from my fork, since secrets are not available in PRs from forks.\n\nCopying the description of #5071 to here:\n\nCloses #4577\n\n~~This is just an experiment. I don't think we have a consensus _if_ we should move away from travis/appveyor.~~ We have consensus: https://github.com/rust-lang/rust-clippy/pull/5071#issuecomment-576647638\n\n~~GHA would let us run up to 20 concurrent jobs. Since we have 15 integration tests and 4 (linux, linux 32-bit, macos, windows) basic tests, we would be able to run everything concurrently.~~ The org has a limit of 60 jobs across the org, so we limit the matrix of the integration tests to 6 concurrent jobs.\n\n~~Also IIUC we only have to build Clippy once for every initegration test and then only check the repos.~~ Nope, dependent jobs exist, but they won't keep the artifacts (not even the checkout).\n\nTODO before merge:\n\n- [x] Add `DEPLOY_KEY` secret to github repo\n- [x] test deployment on test branch `gh-test`#\n  - [x] Test normal deployment\n  - [x] Test deployment no changes\n  - [x] Test deployment of tag\n- [x] talk with `@rust-lang/infra` for bors, `@rust-lang/infra` is good with the move (crater also uses GHA+bors)\n- [x] ~~Get remark + clippy_dev check to work on pushes (https://github.community/t5/GitHub-Actions/~Builds-are-not-triggered-with-on-paths/m-p/44075; I contacted GH support about this) ~~That seems to start working again yesterday. Let's hope it keeps working.~~ Or not: df9be48. Now it works again: 723786a. I think we should wait, until this is reliable. It appears, that it doesn't work on force pushes (sometimes?): 5814142~~ We need to run the bors tests unconditionally anyway (47138d1) so it doesn't really matter.\n- [x] ~~impl homu checks for GHA https://github.com/rust-lang/rust-clippy/pull/5071#issuecomment-576642983 -- I prepared: https://github.com/flip1995/rust-central-station/commit/f40230dc3cebfe4120c9dce027f61c18dd8935cb. I'd suggest to first add GHA and keep the travis and appveyor checks for a few days and to remove them in a second pass. The bors dummy jobs are added in https://github.com/rust-lang/rust-clippy/pull/5088/commits/1a83b7ad7a45aa8db4db7da55a45931e725a1ca3 and work as expected: https://github.com/rust-lang/rust-clippy/pull/5088#issuecomment-582055695. I opened https://github.com/rust-lang/rust-central-station/pull/578~~ See https://github.com/rust-lang/rust-clippy/pull/5088#issuecomment-584581420\n- [x] ~Add GHA badge to Cargo.toml (blocked on rust-lang/crates.io # 1838)~ Added a FIXME in\n2332b57\n- [x] ~Maybe we should also wait until GHA supports yaml anchors. https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336/~ WIll probably not be implemented in the near future.\n- [x] Add back travis + appveyor files for transition period (!)\n\nchangelog: none", "tree": {"sha": "ae6355b22d7cdb2743048c33f7e59620242124b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae6355b22d7cdb2743048c33f7e59620242124b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a5379bda71f19539dabac0232330561e19be1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a5379bda71f19539dabac0232330561e19be1a", "html_url": "https://github.com/rust-lang/rust/commit/71a5379bda71f19539dabac0232330561e19be1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a5379bda71f19539dabac0232330561e19be1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f1736390e1d4dd88cf9fae4ab7737ee5e086b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f1736390e1d4dd88cf9fae4ab7737ee5e086b7", "html_url": "https://github.com/rust-lang/rust/commit/07f1736390e1d4dd88cf9fae4ab7737ee5e086b7"}, {"sha": "3fac289c3d7f9caea256ce6cc65b54e214aa776e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fac289c3d7f9caea256ce6cc65b54e214aa776e", "html_url": "https://github.com/rust-lang/rust/commit/3fac289c3d7f9caea256ce6cc65b54e214aa776e"}], "stats": {"total": 1104, "additions": 892, "deletions": 212}, "files": [{"sha": "4fcff830aa6ffcdf220b5f9f15b2c694941e73a7", "filename": ".github/deploy.sh", "status": "modified", "additions": 10, "deletions": 48, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -1,20 +1,7 @@\n #!/bin/bash\n \n-# Automatically deploy on gh-pages\n-\n set -ex\n \n-SOURCE_BRANCH=\"master\"\n-TARGET_BRANCH=\"gh-pages\"\n-\n-# Save some useful information\n-REPO=$(git config remote.origin.url)\n-SSH_REPO=${REPO/https:\\/\\/github.com\\//git@github.com:}\n-SHA=$(git rev-parse --verify HEAD)\n-\n-# Clone the existing gh-pages for this repo into out/\n-git clone --quiet --single-branch --branch \"$TARGET_BRANCH\" \"$REPO\" out\n-\n echo \"Removing the current docs for master\"\n rm -rf out/master/ || exit 0\n \n@@ -23,59 +10,34 @@ mkdir out/master/\n cp util/gh-pages/index.html out/master\n python ./util/export.py out/master/lints.json\n \n-if [[ -n \"$TRAVIS_TAG\" ]]; then\n-    echo \"Save the doc for the current tag ($TRAVIS_TAG) and point current/ to it\"\n-    cp -r out/master \"out/$TRAVIS_TAG\"\n-    rm -f out/current\n-    ln -s \"$TRAVIS_TAG\" out/current\n+if [[ -n $TAG_NAME ]]; then\n+  echo \"Save the doc for the current tag ($TAG_NAME) and point current/ to it\"\n+  cp -r out/master \"out/$TAG_NAME\"\n+  rm -f out/current\n+  ln -s \"$TAG_NAME\" out/current\n fi\n \n # Generate version index that is shown as root index page\n cp util/gh-pages/versions.html out/index.html\n-pushd out\n \n+cd out\n cat <<-EOF | python - > versions.json\n import os, json\n print json.dumps([\n     dir for dir in os.listdir(\".\") if not dir.startswith(\".\") and os.path.isdir(dir)\n ])\n EOF\n-popd\n-\n-# Pull requests and commits to other branches shouldn't try to deploy, just build to verify\n-if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]] || [[ \"$TRAVIS_BRANCH\" != \"$SOURCE_BRANCH\" ]]; then\n-    # Tags should deploy\n-    if [[ -z \"$TRAVIS_TAG\" ]]; then\n-        echo \"Generated, won't push\"\n-        exit 0\n-    fi\n-fi\n \n # Now let's go have some fun with the cloned repo\n-cd out\n-git config user.name \"Travis CI\"\n-git config user.email \"travis@ci.invalid\"\n+git config user.name \"GHA CI\"\n+git config user.email \"gha@ci.invalid\"\n \n if git diff --exit-code --quiet; then\n-    echo \"No changes to the output on this push; exiting.\"\n-    exit 0\n+  echo \"No changes to the output on this push; exiting.\"\n+  exit 0\n fi\n-cd -\n \n-# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc\n-ENCRYPTION_LABEL=e3a2d77100be\n-ENCRYPTED_KEY_VAR=\"encrypted_${ENCRYPTION_LABEL}_key\"\n-ENCRYPTED_IV_VAR=\"encrypted_${ENCRYPTION_LABEL}_iv\"\n-ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}\n-ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}\n-openssl aes-256-cbc -K \"$ENCRYPTED_KEY\" -iv \"$ENCRYPTED_IV\" -in .github/deploy_key.enc -out .github/deploy_key -d\n-chmod 600 .github/deploy_key\n-eval \"$(ssh-agent -s)\"\n-ssh-add .github/deploy_key\n-\n-cd out\n git add .\n git commit -m \"Automatic deploy to GitHub Pages: ${SHA}\"\n \n-# Now that we're all set up, we can push.\n git push \"$SSH_REPO\" \"$TARGET_BRANCH\""}, {"sha": "a2e87f5eb3745837c4a71cc2dad41a3473677bd3", "filename": ".github/driver.sh", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdriver.sh?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,29 @@\n+#!/bin/bash\n+\n+set -ex\n+\n+# Check sysroot handling\n+sysroot=$(./target/debug/clippy-driver --print sysroot)\n+test \"$sysroot\" = \"$(rustc --print sysroot)\"\n+\n+if [[ ${OS} == \"Windows\" ]]; then\n+  desired_sysroot=C:/tmp\n+else\n+  desired_sysroot=/tmp\n+fi\n+sysroot=$(./target/debug/clippy-driver --sysroot $desired_sysroot --print sysroot)\n+test \"$sysroot\" = $desired_sysroot\n+\n+sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)\n+test \"$sysroot\" = $desired_sysroot\n+\n+# Make sure this isn't set - clippy-driver should cope without it\n+unset CARGO_MANIFEST_DIR\n+\n+# Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n+# FIXME: How to match the clippy invocation in compile-test.rs?\n+./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr && exit 1\n+sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" cstring.stderr > normalized.stderr\n+diff normalized.stderr tests/ui/cstring.stderr\n+\n+# TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR"}, {"sha": "0d7d2929000b2fb14e1feef4d7755f8f184aca6d", "filename": ".github/workflows/clippy.yml", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,98 @@\n+name: Clippy Test\n+\n+on:\n+  push:\n+    # Ignore bors branches, since they are covered by `clippy_bors.yml`\n+    branches-ignore: [auto, try]\n+    # Don't run Clippy tests, when only textfiles were modified\n+    paths-ignore:\n+    - 'COPYRIGHT'\n+    - 'LICENSE-*'\n+    - '**.md'\n+    - '**.txt'\n+  pull_request:\n+    # Don't run Clippy tests, when only textfiles were modified\n+    paths-ignore:\n+    - 'COPYRIGHT'\n+    - 'LICENSE-*'\n+    - '**.md'\n+    - '**.txt'\n+\n+env:\n+  RUST_BACKTRACE: 1\n+  CARGO_TARGET_DIR: '${{ github.workspace }}/target'\n+  NO_FMT_TEST: 1\n+\n+jobs:\n+  base:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    # Setup\n+    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+      with:\n+        github_token: \"${{ secrets.github_token }}\"\n+\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: x86_64-unknown-linux-gnu\n+        profile: minimal\n+\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    - name: Run cargo update\n+      run: cargo update\n+\n+    - name: Cache cargo dir\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo\n+        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-${{ hashFiles('Cargo.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-x86_64-unknown-linux-gnu\n+\n+    - name: Master Toolchain Setup\n+      run: bash setup-toolchain.sh\n+\n+    # Run\n+    - name: Set LD_LIBRARY_PATH (Linux)\n+      run: |\n+        SYSROOT=$(rustc --print sysroot)\n+        echo \"::set-env name=LD_LIBRARY_PATH::${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}\"\n+\n+    - name: Build\n+      run: cargo build --features deny-warnings\n+\n+    - name: Test\n+      run: cargo test --features deny-warnings\n+\n+    - name: Test clippy_lints\n+      run: cargo test --features deny-warnings\n+      working-directory: clippy_lints\n+\n+    - name: Test rustc_tools_util\n+      run: cargo test --features deny-warnings\n+      working-directory: rustc_tools_util\n+\n+    - name: Test clippy_dev\n+      run: cargo test --features deny-warnings\n+      working-directory: clippy_dev\n+\n+    - name: Test cargo-clippy\n+      run: ../target/debug/cargo-clippy\n+      working-directory: clippy_workspace_tests\n+\n+    - name: Test clippy-driver\n+      run: bash .github/driver.sh\n+      env:\n+        OS: ${{ runner.os }}\n+\n+    # Cleanup\n+    - name: Run cargo-cache --autoclean\n+      run: |\n+        cargo +nightly install cargo-cache --debug\n+        find ~/.cargo/bin ! -type d -exec strip {} \\;\n+        cargo cache --autoclean"}, {"sha": "d147e0790a0a091bbb521e357d4a3cbd2f97a8fe", "filename": ".github/workflows/clippy_bors.yml", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,329 @@\n+name: Clippy Test (bors)\n+\n+on:\n+  push:\n+    branches: [auto, try]\n+\n+env:\n+  RUST_BACKTRACE: 1\n+  CARGO_TARGET_DIR: '${{ github.workspace }}/target'\n+  NO_FMT_TEST: 1\n+\n+jobs:\n+  changelog:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+      with:\n+        github_token: \"${{ secrets.github_token }}\"\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+      with:\n+        ref: ${{ github.ref }}\n+\n+    # Run\n+    - name: Check Changelog\n+      run: |\n+        MESSAGE=$(git log --format=%B -n 1)\n+        PR=$(echo \"$MESSAGE\" | grep -o \"#[0-9]*\" | head -1 | sed -e 's/^#//')\n+        output=$(curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -s \"https://api.github.com/repos/rust-lang/rust-clippy/pulls/$PR\" | \\\n+          python -c \"import sys, json; print(json.load(sys.stdin)['body'])\" | \\\n+          grep \"^changelog: \" | \\\n+          sed \"s/changelog: //g\")\n+        if [[ -z \"$output\" ]]; then\n+          echo \"ERROR: PR body must contain 'changelog: ...'\"\n+          exit 1\n+        elif [[ \"$output\" = \"none\" ]]; then\n+          echo \"WARNING: changelog is 'none'\"\n+        fi\n+      env:\n+        PYTHONIOENCODING: 'utf-8'\n+  base:\n+    needs: changelog\n+    strategy:\n+      matrix:\n+        os: [ubuntu-latest, windows-latest, macos-latest]\n+        host: [x86_64-unknown-linux-gnu, i686-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc]\n+        exclude:\n+        - os: ubuntu-latest\n+          host: x86_64-apple-darwin\n+        - os: ubuntu-latest\n+          host: x86_64-pc-windows-msvc\n+        - os: macos-latest\n+          host: x86_64-unknown-linux-gnu\n+        - os: macos-latest\n+          host: i686-unknown-linux-gnu\n+        - os: macos-latest\n+          host: x86_64-pc-windows-msvc\n+        - os: windows-latest\n+          host: x86_64-unknown-linux-gnu\n+        - os: windows-latest\n+          host: i686-unknown-linux-gnu\n+        - os: windows-latest\n+          host: x86_64-apple-darwin\n+\n+    runs-on: ${{ matrix.os }}\n+\n+    steps:\n+    # Setup\n+    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+      with:\n+        github_token: \"${{ secrets.github_token }}\"\n+\n+    - name: Install dependencies (Linux-i686)\n+      run: |\n+        sudo dpkg --add-architecture i386\n+        sudo apt-get update\n+        sudo apt-get install gcc-multilib libssl-dev:i386 libgit2-dev:i386\n+      if: matrix.host == 'i686-unknown-linux-gnu'\n+\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: ${{ matrix.host }}\n+        profile: minimal\n+\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    - name: Run cargo update\n+      run: cargo update\n+\n+    - name: Cache cargo dir\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo\n+        key: ${{ runner.os }}-${{ matrix.host }}-${{ hashFiles('Cargo.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-${{ matrix.host }}\n+\n+    - name: Master Toolchain Setup\n+      run: bash setup-toolchain.sh\n+      env:\n+        HOST_TOOLCHAIN: ${{ matrix.host }}\n+      shell: bash\n+\n+    # Run\n+    - name: Set LD_LIBRARY_PATH (Linux)\n+      if: runner.os == 'Linux'\n+      run: |\n+        SYSROOT=$(rustc --print sysroot)\n+        echo \"::set-env name=LD_LIBRARY_PATH::${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}\"\n+    - name: Link rustc dylib (MacOS)\n+      if: runner.os == 'macOS'\n+      run: |\n+        SYSROOT=$(rustc --print sysroot)\n+        sudo mkdir -p /usr/local/lib\n+        sudo find \"${SYSROOT}/lib\" -maxdepth 1 -name '*dylib' -exec ln -s {} /usr/local/lib \\;\n+    - name: Set PATH (Windows)\n+      if: runner.os == 'Windows'\n+      run: |\n+        $sysroot = rustc --print sysroot\n+        $env:PATH += ';' + $sysroot + '\\bin'\n+        echo \"::set-env name=PATH::$env:PATH\"\n+\n+    - name: Build\n+      run: cargo build --features deny-warnings\n+      shell: bash\n+\n+    - name: Test\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+\n+    - name: Test clippy_lints\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+      working-directory: clippy_lints\n+\n+    - name: Test rustc_tools_util\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+      working-directory: rustc_tools_util\n+\n+    - name: Test clippy_dev\n+      run: cargo test --features deny-warnings\n+      shell: bash\n+      working-directory: clippy_dev\n+\n+    - name: Test cargo-clippy\n+      run: ../target/debug/cargo-clippy\n+      shell: bash\n+      working-directory: clippy_workspace_tests\n+\n+    - name: Test clippy-driver\n+      run: bash .github/driver.sh\n+      shell: bash\n+      env:\n+        OS: ${{ runner.os }}\n+\n+    # Cleanup\n+    - name: Run cargo-cache --autoclean\n+      run: |\n+        cargo +nightly install cargo-cache --debug\n+        /usr/bin/find ~/.cargo/bin ! -type d -exec strip {} \\;\n+        cargo cache --autoclean\n+      shell: bash\n+  integration_build:\n+    needs: changelog\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    # Setup\n+    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+      with:\n+        github_token: \"${{ secrets.github_token }}\"\n+\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: x86_64-unknown-linux-gnu\n+        profile: minimal\n+\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    - name: Run cargo update\n+      run: cargo update\n+\n+    - name: Cache cargo dir\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo\n+        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-${{ hashFiles('Cargo.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-x86_64-unknown-linux-gnu\n+\n+    - name: Master Toolchain Setup\n+      run: bash setup-toolchain.sh\n+\n+    # Run\n+    - name: Build Integration Test\n+      run: cargo test --test integration --features integration --no-run\n+\n+    # Upload\n+    - name: Extract Binaries\n+      run: |\n+        DIR=$CARGO_TARGET_DIR/debug\n+        find $DIR ! -executable -o -type d ! -path $DIR | xargs rm -rf\n+        mv $DIR/integration-* $DIR/integration\n+        rm -rf $CARGO_TARGET_DIR/release\n+\n+    - name: Upload Binaries\n+      uses: actions/upload-artifact@v1\n+      with:\n+        name: target\n+        path: target\n+\n+    # Cleanup\n+    - name: Run cargo-cache --autoclean\n+      run: |\n+        cargo +nightly install cargo-cache --debug\n+        find ~/.cargo/bin ! -type d -exec strip {} \\;\n+        cargo cache --autoclean\n+  integration:\n+    needs: integration_build\n+    strategy:\n+      fail-fast: false\n+      max-parallel: 6\n+      matrix:\n+        integration:\n+        - 'rust-lang/cargo'\n+        - 'rust-lang/rls'\n+        - 'rust-lang/chalk'\n+        - 'rust-lang/rustfmt'\n+        - 'Marwes/combine'\n+        - 'Geal/nom'\n+        - 'rust-lang/stdarch'\n+        - 'serde-rs/serde'\n+        - 'chronotope/chrono'\n+        - 'hyperium/hyper'\n+        - 'rust-random/rand'\n+        - 'rust-lang/futures-rs'\n+        - 'rust-itertools/itertools'\n+        - 'rust-lang-nursery/failure'\n+        - 'rust-lang/log'\n+\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    # Setup\n+    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+      with:\n+        github_token: \"${{ secrets.github_token }}\"\n+\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: x86_64-unknown-linux-gnu\n+        profile: minimal\n+\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    - name: Run cargo update\n+      run: cargo update\n+\n+    - name: Cache cargo dir\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo\n+        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-${{ hashFiles('Cargo.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-x86_64-unknown-linux-gnu\n+\n+    - name: Master Toolchain Setup\n+      run: bash setup-toolchain.sh\n+\n+    # Download\n+    - name: Download target dir\n+      uses: actions/download-artifact@v1\n+      with:\n+        name: target\n+        path: target\n+\n+    - name: Make Binaries Executable\n+      run: chmod +x $CARGO_TARGET_DIR/debug/*\n+\n+    # Run\n+    - name: Test ${{ matrix.integration }}\n+      run: $CARGO_TARGET_DIR/debug/integration\n+      env:\n+        INTEGRATION: ${{ matrix.integration }}\n+        RUSTUP_TOOLCHAIN: master\n+\n+    # Cleanup\n+    - name: Run cargo-cache --autoclean\n+      run: |\n+        cargo +nightly install cargo-cache --debug\n+        find ~/.cargo/bin ! -type d -exec strip {} \\;\n+        cargo cache --autoclean\n+\n+  # These jobs doesn't actually test anything, but they're only used to tell\n+  # bors the build completed, as there is no practical way to detect when a\n+  # workflow is successful listening to webhooks only.\n+  #\n+  # ALL THE PREVIOUS JOBS NEED TO BE ADDED TO THE `needs` SECTION OF THIS JOB!\n+\n+  end-success:\n+    name: bors test finished\n+    if: github.event.pusher.name == 'bors' && success()\n+    runs-on: ubuntu-latest\n+    needs: [base, integration]\n+\n+    steps:\n+      - name: Mark the job as successful\n+        run: exit 0\n+\n+  end-failure:\n+    name: bors test finished\n+    if: github.event.pusher.name == 'bors' && (failure() || cancelled())\n+    runs-on: ubuntu-latest\n+    needs: [base, integration]\n+\n+    steps:\n+      - name: Mark the job as a failure\n+        run: exit 1"}, {"sha": "d6f5db014a43c3d6bc601cd5f52b6dbf5bf08283", "filename": ".github/workflows/clippy_dev.yml", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fclippy_dev.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fclippy_dev.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_dev.yml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,72 @@\n+name: Clippy Dev Test\n+\n+on:\n+  push:\n+    branches: [auto, try]\n+  pull_request:\n+    # Only run on paths, that get checked by the clippy_dev tool\n+    paths:\n+    - 'CAHNGELOG.md'\n+    - 'README.md'\n+    - '**.stderr'\n+    - '**.rs'\n+\n+env:\n+  RUST_BACKTRACE: 1\n+\n+jobs:\n+  clippy_dev:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    # Setup\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: x86_64-unknown-linux-gnu\n+        profile: minimal\n+        components: rustfmt\n+\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    # Run\n+    - name: Build\n+      run: cargo build --features deny-warnings\n+      working-directory: clippy_dev\n+\n+    - name: Test limit-stderr-length\n+      run: cargo dev --limit-stderr-length\n+\n+    - name: Test update_lints\n+      run: cargo dev update_lints --check\n+\n+    - name: Test fmt\n+      run: cargo dev fmt --check\n+\n+  # These jobs doesn't actually test anything, but they're only used to tell\n+  # bors the build completed, as there is no practical way to detect when a\n+  # workflow is successful listening to webhooks only.\n+  #\n+  # ALL THE PREVIOUS JOBS NEED TO BE ADDED TO THE `needs` SECTION OF THIS JOB!\n+\n+  end-success:\n+    name: bors dev test finished\n+    if: github.event.pusher.name == 'bors' && success()\n+    runs-on: ubuntu-latest\n+    needs: [clippy_dev]\n+\n+    steps:\n+      - name: Mark the job as successful\n+        run: exit 0\n+\n+  end-failure:\n+    name: bors dev test finished\n+    if: github.event.pusher.name == 'bors' && (failure() || cancelled())\n+    runs-on: ubuntu-latest\n+    needs: [clippy_dev]\n+\n+    steps:\n+      - name: Mark the job as a failure\n+        run: exit 1"}, {"sha": "6f79891358eb27197179c4d1bcd9426cf361416b", "filename": ".github/workflows/deploy.yml", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fdeploy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fdeploy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fdeploy.yml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,35 @@\n+name: Deploy\n+\n+on:\n+  push:\n+    branches: master\n+  release:\n+    types: [created]\n+\n+env:\n+  TARGET_BRANCH: 'gh-pages'\n+  SHA: '${{ github.sha }}'\n+  SSH_REPO: 'git@github.com:${{ github.repository }}.git'\n+  TAG_NAME: '${{ github.event.release.GITHUB_REF }}'\n+\n+jobs:\n+  deploy:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    # Setup\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+      with:\n+        ref: ${{ env.TARGET_BRANCH }}\n+        path: 'out'\n+\n+    # Run\n+    - name: Deploy\n+      run: |\n+        eval \"$(ssh-agent -s)\"\n+        ssh-add - <<< \"${{ secrets.DEPLOY_KEY }}\"\n+        bash .github/deploy.sh"}, {"sha": "3544053d399a355f246e05edaf6bb1d4389d48f4", "filename": ".github/workflows/remark.yml", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fremark.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.github%2Fworkflows%2Fremark.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fremark.yml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,53 @@\n+name: Remark\n+\n+on:\n+  push:\n+    branches: [auto, try]\n+  pull_request:\n+    paths:\n+    - '**.md'\n+\n+jobs:\n+  remark:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    # Setup\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+\n+    - name: Setup Node.js\n+      uses: actions/setup-node@v1.1.0\n+\n+    - name: Install remark\n+      run: npm install remark-cli remark-lint remark-lint-maximum-line-length remark-preset-lint-recommended\n+\n+    # Run\n+    - name: Check *.md files\n+      run: git ls-files -z '*.md' | xargs -0 -n 1 -I {} ./node_modules/.bin/remark {} -u lint -f > /dev/null\n+\n+  # These jobs doesn't actually test anything, but they're only used to tell\n+  # bors the build completed, as there is no practical way to detect when a\n+  # workflow is successful listening to webhooks only.\n+  #\n+  # ALL THE PREVIOUS JOBS NEED TO BE ADDED TO THE `needs` SECTION OF THIS JOB!\n+\n+  end-success:\n+    name: bors remark test finished\n+    if: github.event.pusher.name == 'bors' && success()\n+    runs-on: ubuntu-latest\n+    needs: [remark]\n+\n+    steps:\n+      - name: Mark the job as successful\n+        run: exit 0\n+\n+  end-failure:\n+    name: bors remark test finished\n+    if: github.event.pusher.name == 'bors' && (failure() || cancelled())\n+    runs-on: ubuntu-latest\n+    needs: [remark]\n+\n+    steps:\n+      - name: Mark the job as a failure\n+        run: exit 1"}, {"sha": "adf5e8feddf4c507efc627259e53cb146bdb45ea", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -1,4 +1,4 @@\n-# Used by Travis to be able to push:\n+# Used by CI to be able to push:\n /.github/deploy_key\n out\n "}, {"sha": "0ede7ac75cb6f98d73d8a4efa0cc2cad09b55fa3", "filename": ".remarkrc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.remarkrc", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.remarkrc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.remarkrc?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -0,0 +1,12 @@\n+{\n+  \"plugins\": [\n+    \"remark-preset-lint-recommended\",\n+    [\"remark-lint-list-item-indent\", false],\n+    [\"remark-lint-no-literal-urls\", false],\n+    [\"remark-lint-no-shortcut-reference-link\", false],\n+    [\"remark-lint-maximum-line-length\", 120]\n+  ],\n+  \"settings\": {\n+    \"commonmark\": true\n+  }\n+}"}, {"sha": "22bae13ccf8850d433afcec8a850480bcdddf974", "filename": ".remarkrc.json", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07f1736390e1d4dd88cf9fae4ab7737ee5e086b7/.remarkrc.json", "raw_url": "https://github.com/rust-lang/rust/raw/07f1736390e1d4dd88cf9fae4ab7737ee5e086b7/.remarkrc.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.remarkrc.json?ref=07f1736390e1d4dd88cf9fae4ab7737ee5e086b7", "patch": "@@ -1,12 +0,0 @@\n-{\n-  \"plugins\": {\n-    \"lint\": {\n-      \"table-pipes\": false,\n-      \"table-pipe-alignment\": false,\n-      \"maximum-line-length\": 120\n-    }\n-  },\n-  \"settings\": {\n-    \"commonmark\": true\n-  }\n-}"}, {"sha": "fa02f53340174208e143b423603d27f90d7a916b", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -48,7 +48,7 @@ install:\n         . $HOME/.nvm/nvm.sh\n         nvm install stable\n         nvm use stable\n-        npm install remark-cli remark-lint\n+        npm install remark-cli remark-lint remark-lint-maximum-line-length remark-preset-lint-recommended\n       elif [[ \"$TRAVIS_OS_NAME\" == \"windows\" ]]; then\n         choco install windows-sdk-10.1\n       fi\n@@ -152,15 +152,3 @@ script:\n     else\n       ./ci/base-tests.sh && sleep 5\n     fi\n-\n-after_success:\n-  - |\n-    if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then\n-      set -e\n-      if [[ -z ${INTEGRATION} ]]; then\n-        ./.github/deploy.sh\n-      else\n-        echo \"Not deploying, because we're in an integration test run\"\n-      fi\n-      set +e\n-    fi"}, {"sha": "2f527a407db7c69f32f488db439c5cc56f5c3dca", "filename": "CHANGELOG.md", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -203,29 +203,29 @@ Released 2019-07-04\n \n [eb9f9b1...082cfa7](https://github.com/rust-lang/rust-clippy/compare/eb9f9b1...082cfa7)\n \n- * New lints: [`find_map`], [`filter_map_next`] [#4039](https://github.com/rust-lang/rust-clippy/pull/4039)\n- * New lint: [`path_buf_push_overwrite`] [#3954](https://github.com/rust-lang/rust-clippy/pull/3954)\n- * Move `path_buf_push_overwrite` to the nursery [#4013](https://github.com/rust-lang/rust-clippy/pull/4013)\n- * Split [`redundant_closure`] into [`redundant_closure`] and [`redundant_closure_for_method_calls`] [#4110](https://github.com/rust-lang/rust-clippy/pull/4101)\n- * Allow allowing of [`toplevel_ref_arg`] lint [#4007](https://github.com/rust-lang/rust-clippy/pull/4007)\n- * Fix false negative in [`or_fun_call`] pertaining to nested constructors [#4084](https://github.com/rust-lang/rust-clippy/pull/4084)\n- * Fix false positive in [`or_fn_call`] pertaining to enum variant constructors [#4018](https://github.com/rust-lang/rust-clippy/pull/4018)\n- * Fix false positive in [`useless_let_if_seq`] pertaining to interior mutability [#4035](https://github.com/rust-lang/rust-clippy/pull/4035)\n- * Fix false positive in [`redundant_closure`] pertaining to non-function types [#4008](https://github.com/rust-lang/rust-clippy/pull/4008)\n- * Fix false positive in [`let_and_return`] pertaining to attributes on `let`s [#4024](https://github.com/rust-lang/rust-clippy/pull/4024)\n- * Fix false positive in [`module_name_repetitions`] lint pertaining to attributes [#4006](https://github.com/rust-lang/rust-clippy/pull/4006)\n- * Fix false positive on [`assertions_on_constants`] pertaining to `debug_assert!` [#3989](https://github.com/rust-lang/rust-clippy/pull/3989)\n- * Improve suggestion in [`map_clone`] to suggest `.copied()` where applicable  [#3970](https://github.com/rust-lang/rust-clippy/pull/3970) [#4043](https://github.com/rust-lang/rust-clippy/pull/4043)\n- * Improve suggestion for [`search_is_some`] [#4049](https://github.com/rust-lang/rust-clippy/pull/4049)\n- * Improve suggestion applicability for [`naive_bytecount`] [#3984](https://github.com/rust-lang/rust-clippy/pull/3984)\n- * Improve suggestion applicability for [`while_let_loop`] [#3975](https://github.com/rust-lang/rust-clippy/pull/3975)\n- * Improve diagnostics for [`too_many_arguments`] [#4053](https://github.com/rust-lang/rust-clippy/pull/4053)\n- * Improve diagnostics for [`cast_lossless`] [#4021](https://github.com/rust-lang/rust-clippy/pull/4021)\n- * Deal with macro checks in desugarings better [#4082](https://github.com/rust-lang/rust-clippy/pull/4082)\n- * Add macro check for [`unnecessary_cast`]  [#4026](https://github.com/rust-lang/rust-clippy/pull/4026)\n- * Remove [`approx_constant`]'s documentation's \"Known problems\" section. [#4027](https://github.com/rust-lang/rust-clippy/pull/4027)\n- * Fix ICE in [`suspicious_else_formatting`] [#3960](https://github.com/rust-lang/rust-clippy/pull/3960)\n- * Fix ICE in [`decimal_literal_representation`] [#3931](https://github.com/rust-lang/rust-clippy/pull/3931)\n+* New lints: [`find_map`], [`filter_map_next`] [#4039](https://github.com/rust-lang/rust-clippy/pull/4039)\n+* New lint: [`path_buf_push_overwrite`] [#3954](https://github.com/rust-lang/rust-clippy/pull/3954)\n+* Move `path_buf_push_overwrite` to the nursery [#4013](https://github.com/rust-lang/rust-clippy/pull/4013)\n+* Split [`redundant_closure`] into [`redundant_closure`] and [`redundant_closure_for_method_calls`] [#4110](https://github.com/rust-lang/rust-clippy/pull/4101)\n+* Allow allowing of [`toplevel_ref_arg`] lint [#4007](https://github.com/rust-lang/rust-clippy/pull/4007)\n+* Fix false negative in [`or_fun_call`] pertaining to nested constructors [#4084](https://github.com/rust-lang/rust-clippy/pull/4084)\n+* Fix false positive in [`or_fun_call`] pertaining to enum variant constructors [#4018](https://github.com/rust-lang/rust-clippy/pull/4018)\n+* Fix false positive in [`useless_let_if_seq`] pertaining to interior mutability [#4035](https://github.com/rust-lang/rust-clippy/pull/4035)\n+* Fix false positive in [`redundant_closure`] pertaining to non-function types [#4008](https://github.com/rust-lang/rust-clippy/pull/4008)\n+* Fix false positive in [`let_and_return`] pertaining to attributes on `let`s [#4024](https://github.com/rust-lang/rust-clippy/pull/4024)\n+* Fix false positive in [`module_name_repetitions`] lint pertaining to attributes [#4006](https://github.com/rust-lang/rust-clippy/pull/4006)\n+* Fix false positive on [`assertions_on_constants`] pertaining to `debug_assert!` [#3989](https://github.com/rust-lang/rust-clippy/pull/3989)\n+* Improve suggestion in [`map_clone`] to suggest `.copied()` where applicable  [#3970](https://github.com/rust-lang/rust-clippy/pull/3970) [#4043](https://github.com/rust-lang/rust-clippy/pull/4043)\n+* Improve suggestion for [`search_is_some`] [#4049](https://github.com/rust-lang/rust-clippy/pull/4049)\n+* Improve suggestion applicability for [`naive_bytecount`] [#3984](https://github.com/rust-lang/rust-clippy/pull/3984)\n+* Improve suggestion applicability for [`while_let_loop`] [#3975](https://github.com/rust-lang/rust-clippy/pull/3975)\n+* Improve diagnostics for [`too_many_arguments`] [#4053](https://github.com/rust-lang/rust-clippy/pull/4053)\n+* Improve diagnostics for [`cast_lossless`] [#4021](https://github.com/rust-lang/rust-clippy/pull/4021)\n+* Deal with macro checks in desugarings better [#4082](https://github.com/rust-lang/rust-clippy/pull/4082)\n+* Add macro check for [`unnecessary_cast`]  [#4026](https://github.com/rust-lang/rust-clippy/pull/4026)\n+* Remove [`approx_constant`]'s documentation's \"Known problems\" section. [#4027](https://github.com/rust-lang/rust-clippy/pull/4027)\n+* Fix ICE in [`suspicious_else_formatting`] [#3960](https://github.com/rust-lang/rust-clippy/pull/3960)\n+* Fix ICE in [`decimal_literal_representation`] [#3931](https://github.com/rust-lang/rust-clippy/pull/3931)\n \n \n ## Rust 1.35\n@@ -234,27 +234,27 @@ Released 2019-05-20\n \n [1fac380..37f5c1e](https://github.com/rust-lang/rust-clippy/compare/1fac380...37f5c1e)\n \n- * New lint: [`drop_bounds`] to detect `T: Drop` bounds\n- * Split [`redundant_closure`] into [`redundant_closure`] and [`redundant_closure_for_method_calls`] [#4110](https://github.com/rust-lang/rust-clippy/pull/4101)\n- * Rename `cyclomatic_complexity` to [`cognitive_complexity`], start work on making lint more practical for Rust code\n- * Move [`get_unwrap`] to the restriction category\n- * Improve suggestions for [`iter_cloned_collect`]\n- * Improve suggestions for [`cast_lossless`] to suggest suffixed literals\n- * Fix false positives in [`print_with_newline`] and [`write_with_newline`] pertaining to raw strings\n- * Fix false positive in [`needless_range_loop`] pertaining to structs without a `.iter()`\n- * Fix false positive in [`bool_comparison`] pertaining to non-bool types\n- * Fix false positive in [`redundant_closure`] pertaining to differences in borrows\n- * Fix false positive in [`option_map_unwrap_or`] on non-copy types\n- * Fix false positives in [`missing_const_for_fn`] pertaining to macros and trait method impls\n- * Fix false positive in [`needless_pass_by_value`] pertaining to procedural macros\n- * Fix false positive in [`needless_continue`] pertaining to loop labels\n- * Fix false positive for [`boxed_local`] pertaining to arguments moved into closures\n- * Fix false positive for [`use_self`] in nested functions\n- * Fix suggestion for [`expect_fun_call`] (https://github.com/rust-lang/rust-clippy/pull/3846)\n- * Fix suggestion for [`explicit_counter_loop`] to deal with parenthesizing range variables\n- * Fix suggestion for [`single_char_pattern`] to correctly escape single quotes\n- * Avoid triggering [`redundant_closure`] in macros\n- * ICE fixes: [#3805](https://github.com/rust-lang/rust-clippy/pull/3805), [#3772](https://github.com/rust-lang/rust-clippy/pull/3772), [#3741](https://github.com/rust-lang/rust-clippy/pull/3741)\n+* New lint: [`drop_bounds`] to detect `T: Drop` bounds\n+* Split [`redundant_closure`] into [`redundant_closure`] and [`redundant_closure_for_method_calls`] [#4110](https://github.com/rust-lang/rust-clippy/pull/4101)\n+* Rename `cyclomatic_complexity` to [`cognitive_complexity`], start work on making lint more practical for Rust code\n+* Move [`get_unwrap`] to the restriction category\n+* Improve suggestions for [`iter_cloned_collect`]\n+* Improve suggestions for [`cast_lossless`] to suggest suffixed literals\n+* Fix false positives in [`print_with_newline`] and [`write_with_newline`] pertaining to raw strings\n+* Fix false positive in [`needless_range_loop`] pertaining to structs without a `.iter()`\n+* Fix false positive in [`bool_comparison`] pertaining to non-bool types\n+* Fix false positive in [`redundant_closure`] pertaining to differences in borrows\n+* Fix false positive in [`option_map_unwrap_or`] on non-copy types\n+* Fix false positives in [`missing_const_for_fn`] pertaining to macros and trait method impls\n+* Fix false positive in [`needless_pass_by_value`] pertaining to procedural macros\n+* Fix false positive in [`needless_continue`] pertaining to loop labels\n+* Fix false positive for [`boxed_local`] pertaining to arguments moved into closures\n+* Fix false positive for [`use_self`] in nested functions\n+* Fix suggestion for [`expect_fun_call`] (https://github.com/rust-lang/rust-clippy/pull/3846)\n+* Fix suggestion for [`explicit_counter_loop`] to deal with parenthesizing range variables\n+* Fix suggestion for [`single_char_pattern`] to correctly escape single quotes\n+* Avoid triggering [`redundant_closure`] in macros\n+* ICE fixes: [#3805](https://github.com/rust-lang/rust-clippy/pull/3805), [#3772](https://github.com/rust-lang/rust-clippy/pull/3772), [#3741](https://github.com/rust-lang/rust-clippy/pull/3741)\n \n ## Rust 1.34\n \n@@ -551,7 +551,7 @@ Released 2018-09-13\n ## 0.0.181\n * Rustup to *rustc 1.25.0-nightly (97520ccb1 2018-01-21)*\n * New lints: [`else_if_without_else`], [`option_option`], [`unit_arg`], [`unnecessary_fold`]\n-* Removed [`unit_expr`]\n+* Removed `unit_expr`\n * Various false positive fixes for [`needless_pass_by_value`]\n \n ## 0.0.180\n@@ -597,11 +597,13 @@ Released 2018-09-13\n \n ## 0.0.167\n * Rustup to *rustc 1.23.0-nightly (90ef3372e 2017-10-29)*\n-* New lints: [`const_static_lifetime`], [`erasing_op`], [`fallible_impl_from`], [`println_empty_string`], [`useless_asref`]\n+* New lints: `const_static_lifetime`, [`erasing_op`], [`fallible_impl_from`], [`println_empty_string`], [`useless_asref`]\n \n ## 0.0.166\n * Rustup to *rustc 1.22.0-nightly (b7960878b 2017-10-18)*\n-* New lints: [`explicit_write`], [`identity_conversion`], [`implicit_hasher`], [`invalid_ref`], [`option_map_or_none`], [`range_minus_one`], [`range_plus_one`], [`transmute_int_to_bool`], [`transmute_int_to_char`], [`transmute_int_to_float`]\n+* New lints: [`explicit_write`], [`identity_conversion`], [`implicit_hasher`], [`invalid_ref`], [`option_map_or_none`],\n+  [`range_minus_one`], [`range_plus_one`], [`transmute_int_to_bool`], [`transmute_int_to_char`],\n+  [`transmute_int_to_float`]\n \n ## 0.0.165\n * Rust upgrade to rustc 1.22.0-nightly (0e6f4cf51 2017-09-27)\n@@ -636,7 +638,7 @@ Released 2018-09-13\n \n ## 0.0.157 - 2017-09-04\n * Update to *rustc 1.22.0-nightly (981ce7d8d 2017-09-03)*\n-* New lint: [`unit_expr`]\n+* New lint: `unit_expr`\n \n ## 0.0.156 - 2017-09-03\n * Update to *rustc 1.22.0-nightly (744dd6c1d 2017-09-02)*\n@@ -884,7 +886,7 @@ Released 2018-09-13\n   lint groups: [`filter_next`], [`for_loop_over_option`],\n   [`for_loop_over_result`] and [`match_overlapping_arm`]. You should now be\n   able to `#[allow/deny]` them individually and they are available directly\n-  through [`cargo clippy`].\n+  through `cargo clippy`.\n \n ## 0.0.87 \u2014 2016-08-31\n * Rustup to *rustc 1.13.0-nightly (eac41469d 2016-08-30)*\n@@ -897,7 +899,7 @@ Released 2018-09-13\n \n ## 0.0.85 \u2014 2016-08-19\n * Fix ICE with [`useless_attribute`]\n-* [`useless_attribute`] ignores [`unused_imports`] on `use` statements\n+* [`useless_attribute`] ignores `unused_imports` on `use` statements\n \n ## 0.0.84 \u2014 2016-08-18\n * Rustup to *rustc 1.13.0-nightly (aef6971ca 2016-08-17)*\n@@ -936,7 +938,7 @@ Released 2018-09-13\n \n ## 0.0.77 \u2014 2016-06-21\n * Rustup to *rustc 1.11.0-nightly (5522e678b 2016-06-20)*\n-* New lints: [`stutter`] and [`iter_nth`]\n+* New lints: `stutter` and [`iter_nth`]\n \n ## 0.0.76 \u2014 2016-06-10\n * Rustup to *rustc 1.11.0-nightly (7d2f75a95 2016-06-09)*\n@@ -1056,6 +1058,7 @@ Released 2018-09-13\n [pull3665]: https://github.com/rust-lang/rust-clippy/pull/3665\n [adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n \n+<!-- lint disable no-unused-definitions -->\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped"}, {"sha": "dec13e44a17f88a7ff734f3b6b4492d9e86cfd21", "filename": "CODE_OF_CONDUCT.md", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/CODE_OF_CONDUCT.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CODE_OF_CONDUCT.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -6,35 +6,65 @@ A version of this document [can be found online](https://www.rust-lang.org/condu\n \n **Contact**: [rust-mods@rust-lang.org](mailto:rust-mods@rust-lang.org)\n \n-* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n-* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n+* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience,\n+  gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age,\n+  religion, nationality, or other similar characteristic.\n+* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and\n+  welcoming environment for all.\n * Please be kind and courteous. There's no need to be mean or rude.\n-* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n-* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n-* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n-* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n+* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and\n+  numerous costs. There is seldom a right answer.\n+* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and\n+  see how it works.\n+* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We\n+  interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen\n+  Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their\n+  definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n+* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or\n+  made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation\n+  team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a\n+  safe place for you and we've got your back.\n * Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n \n ## Moderation\n \n \n-These are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Rust moderation team][mod_team].\n+These are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation,\n+please contact the [Rust moderation team][mod_team].\n \n-1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n+1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks,\n+   are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n 2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n 3. Moderators will first respond to such remarks with a warning.\n 4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n 5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n-6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n-7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n-8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n+6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended\n+   party a genuine apology.\n+7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a\n+   different moderator, **in private**. Complaints about bans in-channel are not allowed.\n+8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate\n+   situation, they should expect less leeway than others.\n \n-In the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n+In the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically\n+unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly\n+if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can\n+drive people away from the community entirely.\n \n-And if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better \u2014 remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n+And if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was\n+they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good\n+there was something you could've communicated better \u2014 remember that it's your responsibility to make your fellow\n+Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about\n+cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their\n+trust.\n \n-The enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust, #rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n+The enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust,\n+#rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo);\n+GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org\n+(users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the\n+maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider\n+explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n \n-*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n+*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the\n+[Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n \n [mod_team]: https://www.rust-lang.org/team.html#Moderation-team"}, {"sha": "4777f2fabeb2aaba484f0be46714dfebbfc9a4d8", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -2,12 +2,14 @@\n \n Hello fellow Rustacean! Great to see your interest in compiler internals and lints!\n \n-**First**: if you're unsure or afraid of _anything_, just ask or submit the issue or pull request anyway. You won't be yelled at for giving it your best effort. The worst that can happen is that you'll be politely asked to change something. We appreciate any sort of contributions, and don't want a wall of rules to get in the way of that.\n+**First**: if you're unsure or afraid of _anything_, just ask or submit the issue or pull request anyway. You won't be\n+yelled at for giving it your best effort. The worst that can happen is that you'll be politely asked to change\n+something. We appreciate any sort of contributions, and don't want a wall of rules to get in the way of that.\n \n-Clippy welcomes contributions from everyone. There are many ways to contribute to Clippy and the following document explains how\n-you can contribute and how to get started.\n-If you have any questions about contributing or need help with anything, feel free to ask questions on issues or\n-visit the `#clippy` IRC channel on `irc.mozilla.org` or meet us in `#clippy` on [Discord](https://discord.gg/rust-lang).\n+Clippy welcomes contributions from everyone. There are many ways to contribute to Clippy and the following document\n+explains how you can contribute and how to get started.  If you have any questions about contributing or need help with\n+anything, feel free to ask questions on issues or visit the `#clippy` IRC channel on `irc.mozilla.org` or meet us in\n+`#clippy` on [Discord](https://discord.gg/rust-lang).\n \n All contributors are expected to follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).\n \n@@ -49,12 +51,12 @@ matching of the syntax tree structure, and are generally easier than\n [`T-middle`](https://github.com/rust-lang/rust-clippy/labels/T-middle) issues, which involve types\n and resolved paths.\n \n-[`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) issues will generally need you to match against a predefined syntax structure. To figure out\n-how this syntax structure is encoded in the AST, it is recommended to run `rustc -Z ast-json` on an\n-example of the structure and compare with the\n-[nodes in the AST docs](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast). Usually\n-the lint will end up to be a nested series of matches and ifs,\n-[like so](https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n+[`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) issues will generally need you to match against a\n+predefined syntax structure. To figure out how this syntax structure is encoded in the AST, it is recommended to run\n+`rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST\n+docs](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast). Usually the lint will end up to be a nested series of\n+matches and ifs, [like\n+so](https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n \n [`E-medium`](https://github.com/rust-lang/rust-clippy/labels/E-medium) issues are generally\n pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n@@ -68,9 +70,9 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n \n ## Writing code\n \n-Have a look at the [docs for writing lints](doc/adding_lints.md) for more details. [Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is also a nice primer\n-to lint-writing, though it does get into advanced stuff and may be a bit\n-outdated.\n+Have a look at the [docs for writing lints](doc/adding_lints.md) for more details. [Llogiq's blog post on\n+lints](https://llogiq.github.io/2015/06/04/workflows.html) is also a nice primer to lint-writing, though it does get\n+into advanced stuff and may be a bit outdated.\n \n If you want to add a new lint or change existing ones apart from bugfixing, it's\n also a good idea to give the [stability guarantees][rfc_stability] and\n@@ -79,9 +81,11 @@ quick read.\n \n ## How Clippy works\n \n-Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there, the lint registration is delegated to the [`clippy_lints`][lint_crate] crate.\n+Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there,\n+the lint registration is delegated to the [`clippy_lints`][lint_crate] crate.\n \n-[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers them with the rustc plugin registry. For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n+[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers them with the rustc\n+plugin registry. For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n \n ```rust\n // ./clippy_lints/src/lib.rs\n@@ -103,9 +107,12 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry) {\n }\n ```\n \n-The [`plugin::PluginRegistry`][plugin_registry] provides two methods to register lints: [register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].\n-Both take an object that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in every single lint.\n-It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `cargo dev update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n+The [`plugin::PluginRegistry`][plugin_registry] provides two methods to register lints:\n+[register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].  Both take an object\n+that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in\n+every single lint. It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `cargo dev\n+update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to\n+save you some time.\n \n ```rust\n // ./clippy_lints/src/else_if_without_else.rs\n@@ -123,18 +130,25 @@ impl EarlyLintPass for ElseIfWithoutElse {\n }\n ```\n \n-The difference between `EarlyLintPass` and `LateLintPass` is that the methods of the `EarlyLintPass` trait only provide AST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information via the `LateContext` parameter.\n+The difference between `EarlyLintPass` and `LateLintPass` is that the methods of the `EarlyLintPass` trait only provide\n+AST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information\n+via the `LateContext` parameter.\n \n-That's why the `else_if_without_else` example uses the `register_early_lint_pass` function. Because the [actual lint logic][else_if_without_else] does not depend on any type information.\n+That's why the `else_if_without_else` example uses the `register_early_lint_pass` function. Because the [actual lint\n+logic][else_if_without_else] does not depend on any type information.\n \n ## Fixing build failures caused by Rust\n \n-Clippy will sometimes fail to build from source because building it depends on unstable internal Rust features. Most of the times we have to adapt to the changes and only very rarely there's an actual bug in Rust. Fixing build failures caused by Rust updates, can be a good way to learn about Rust internals.\n+Clippy will sometimes fail to build from source because building it depends on unstable internal Rust features. Most of\n+the times we have to adapt to the changes and only very rarely there's an actual bug in Rust. Fixing build failures\n+caused by Rust updates, can be a good way to learn about Rust internals.\n \n-In order to find out why Clippy does not work properly with a new Rust commit, you can use the [rust-toolstate commit history][toolstate_commit_history].\n-You will then have to look for the last commit that contains `test-pass -> build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component. [Here][toolstate_commit] is an example.\n+In order to find out why Clippy does not work properly with a new Rust commit, you can use the [rust-toolstate commit\n+history][toolstate_commit_history].  You will then have to look for the last commit that contains `test-pass ->\n+build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component. [Here][toolstate_commit] is an example.\n \n-The commit message contains a link to the PR. The PRs are usually small enough to discover the breaking API change and if they are bigger, they likely include some discussion that may help you to fix Clippy.\n+The commit message contains a link to the PR. The PRs are usually small enough to discover the breaking API change and\n+if they are bigger, they likely include some discussion that may help you to fix Clippy.\n \n To check if Clippy is available for a specific target platform, you can check\n the [rustup component history][rustup_component_history]."}, {"sha": "aefbcec15f51506d9f41b81e8aef47e0d491398a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -21,6 +21,7 @@ publish = false\n [badges]\n travis-ci = { repository = \"rust-lang/rust-clippy\" }\n appveyor = { repository = \"rust-lang/rust-clippy\" }\n+# FIXME(flip1995): Add GHA badge once rust-lang/crates.io#1838 is merged\n \n [[bin]]\n name = \"cargo-clippy\""}, {"sha": "fe62dadfcbf0d3b16d5c429cce46e4f17a9c44aa", "filename": "README.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -2,6 +2,7 @@\n \n [![Build Status](https://travis-ci.com/rust-lang/rust-clippy.svg?branch=master)](https://travis-ci.com/rust-lang/rust-clippy)\n [![Windows Build status](https://ci.appveyor.com/api/projects/status/id677xpw1dguo7iw?svg=true)](https://ci.appveyor.com/project/rust-lang-libs/rust-clippy)\n+[![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test/badge.svg?branch=master&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test%22+event%3Apush+branch%3Amaster)\n [![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n@@ -30,7 +31,9 @@ Only the following of those categories are enabled by default:\n \n Other categories need to be enabled in order for their lints to be executed.\n \n-The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also contains \"restriction lints\", which are for things which are usually not considered \"bad\", but may be useful to turn on in specific cases. These should be used very selectively, if at all.\n+The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also contains \"restriction lints\", which are\n+for things which are usually not considered \"bad\", but may be useful to turn on in specific cases. These should be used\n+very selectively, if at all.\n \n Table of contents:\n \n@@ -140,15 +143,16 @@ line. (You can swap `clippy::all` with the specific lint category you are target\n \n ## Configuration\n \n-Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a basic `variable = value` mapping eg.\n+Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a basic `variable =\n+value` mapping eg.\n \n ```toml\n blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n cognitive-complexity-threshold = 30\n ```\n \n-See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which lints can be configured and the\n-meaning of the variables.\n+See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which\n+lints can be configured and the meaning of the variables.\n \n To deactivate the \u201cfor further information visit *lint-link*\u201d message you can\n define the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n@@ -169,7 +173,10 @@ You can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n \n Note: `deny` produces errors instead of warnings.\n \n-If you do not want to include your lint levels in your code, you can globally enable/disable lints by passing extra flags to Clippy during the run: `cargo clippy -- -A clippy::lint_name` will run Clippy with `lint_name` disabled and `cargo clippy -- -W clippy::lint_name` will run it with that enabled. This also works with lint groups. For example you can run Clippy with warnings for all lints enabled: `cargo clippy -- -W clippy::pedantic`\n+If you do not want to include your lint levels in your code, you can globally enable/disable lints by passing extra\n+flags to Clippy during the run: `cargo clippy -- -A clippy::lint_name` will run Clippy with `lint_name` disabled and\n+`cargo clippy -- -W clippy::lint_name` will run it with that enabled. This also works with lint groups. For example you\n+can run Clippy with warnings for all lints enabled: `cargo clippy -- -W clippy::pedantic`\n \n ## Contributing\n "}, {"sha": "8e420ec959a26a85f79d186b922ef698333d3bdf", "filename": "clippy_dummy/PUBLISH.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/clippy_dummy%2FPUBLISH.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/clippy_dummy%2FPUBLISH.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dummy%2FPUBLISH.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -1,4 +1,6 @@\n-This is a dummy crate to publish to crates.io. It primarily exists to ensure that folks trying to install clippy from crates.io get redirected to the `rustup` technique.\n+This is a dummy crate to publish to crates.io. It primarily exists to ensure\n+that folks trying to install clippy from crates.io get redirected to the\n+`rustup` technique.\n \n-Before publishing, be sure to rename `clippy_dummy` to `clippy` in `Cargo.toml`, it has a different name to avoid workspace issues.\n- \n\\ No newline at end of file\n+Before publishing, be sure to rename `clippy_dummy` to `clippy` in `Cargo.toml`,\n+it has a different name to avoid workspace issues."}, {"sha": "cc4b5f7d1623527c76e0bc3b16ba1e499b2aa904", "filename": "doc/adding_lints.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -167,12 +167,12 @@ declare_clippy_lint! {\n ```\n \n * The section of lines prefixed with `///` constitutes the lint documentation\n-section. This is the default documentation style and will be displayed at\n-https://rust-lang.github.io/rust-clippy/master/index.html.\n+  section. This is the default documentation style and will be displayed at\n+  https://rust-lang.github.io/rust-clippy/master/index.html.\n * `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n-guidelines][lint_naming] here when naming your lint. In short, the name should\n-state the thing that is being checked for and read well when used with\n-`allow`/`warn`/`deny`.\n+  guidelines][lint_naming] here when naming your lint. In short, the name should\n+  state the thing that is being checked for and read well when used with\n+  `allow`/`warn`/`deny`.\n * `pedantic` sets the lint level to `Allow`.\n   The exact mapping can be found [here][category_level_mapping]\n * The last part should be a text that explains what exactly is wrong with the\n@@ -443,7 +443,6 @@ don't hesitate to ask on Discord, IRC or in the issue/PR.\n [lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n [category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/bd23cb89ec0ea63403a17d3fc5e50c88e38dd54f/clippy_lints/src/lib.rs#L43\n [declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/a71acac1da7eaf667ab90a1d65d10e5cc4b80191/clippy_lints/src/lib.rs#L39\n-[compilation_stages]: https://rust-lang.github.io/rustc-guide/high-level-overview.html#the-main-stages-of-compilation\n [check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html#method.check_fn\n [early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html\n [late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.LateLintPass.html"}, {"sha": "fcd7abbf3f1693cc100c0e1f4a4e4326d26a40f3", "filename": "etc/relicense/RELICENSE_DOCUMENTATION.md", "status": "modified", "additions": 54, "deletions": 21, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/etc%2Frelicense%2FRELICENSE_DOCUMENTATION.md", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/etc%2Frelicense%2FRELICENSE_DOCUMENTATION.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/etc%2Frelicense%2FRELICENSE_DOCUMENTATION.md?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -1,36 +1,69 @@\n-This repository was previously licensed under MPL-2.0, however in #3093 ([archive](http://web.archive.org/web/20181005185227/https://github.com/rust-lang-nursery/rust-clippy/issues/3093),  [screenshot](https://user-images.githubusercontent.com/1617736/46573505-5b856880-c94b-11e8-9a14-981c889b4981.png)) we relicensed it to the Rust license (dual licensed as Apache v2 / MIT)\n+This repository was previously licensed under MPL-2.0, however in #3093\n+([archive](http://web.archive.org/web/20181005185227/https://github.com/rust-lang-nursery/rust-clippy/issues/3093),\n+[screenshot](https://user-images.githubusercontent.com/1617736/46573505-5b856880-c94b-11e8-9a14-981c889b4981.png)) we\n+relicensed it to the Rust license (dual licensed as Apache v2 / MIT)\n \n At the time, the contributors were those listed in contributors.txt.\n \n-We opened a bunch of issues asking for an explicit relicensing approval. Screenshots of all these issues at the time of relicensing are archived on GitHub. We also have saved Wayback Machine copies of these:\n+We opened a bunch of issues asking for an explicit relicensing approval. Screenshots of all these issues at the time of\n+relicensing are archived on GitHub. We also have saved Wayback Machine copies of these:\n \n- - #3094 ([archive](http://web.archive.org/web/20181005191247/https://github.com/rust-lang-nursery/rust-clippy/issues/3094), [screenshot](https://user-images.githubusercontent.com/1617736/46573506-5b856880-c94b-11e8-8a44-51cb40bc16ee.png))\n- - #3095 ([archive](http://web.archive.org/web/20181005184416/https://github.com/rust-lang-nursery/rust-clippy/issues/3095), [screenshot](https://user-images.githubusercontent.com/1617736/46573507-5c1dff00-c94b-11e8-912a-4bd6b5f838f5.png))\n- - #3096 ([archive](http://web.archive.org/web/20181005184802/https://github.com/rust-lang-nursery/rust-clippy/issues/3096), [screenshot](https://user-images.githubusercontent.com/1617736/46573508-5c1dff00-c94b-11e8-9425-2464f7260ff0.png))\n- - #3097 ([archive](http://web.archive.org/web/20181005184821/https://github.com/rust-lang-nursery/rust-clippy/issues/3097), [screenshot](https://user-images.githubusercontent.com/1617736/46573509-5c1dff00-c94b-11e8-8ba2-53f687984fe7.png))\n- - #3098 ([archive](http://web.archive.org/web/20181005184900/https://github.com/rust-lang-nursery/rust-clippy/issues/3098), [screenshot](https://user-images.githubusercontent.com/1617736/46573510-5c1dff00-c94b-11e8-8f64-371698401c60.png))\n- - #3099 ([archive](http://web.archive.org/web/20181005184901/https://github.com/rust-lang-nursery/rust-clippy/issues/3099), [screenshot](https://user-images.githubusercontent.com/1617736/46573511-5c1dff00-c94b-11e8-8e20-7d0eeb392b95.png))\n- - #3100 ([archive](http://web.archive.org/web/20181005184901/https://github.com/rust-lang-nursery/rust-clippy/issues/3100), [screenshot](https://user-images.githubusercontent.com/1617736/46573512-5c1dff00-c94b-11e8-8a13-7d758ed3563d.png))\n- - #3230 ([archive](http://web.archive.org/web/20181005184903/https://github.com/rust-lang-nursery/rust-clippy/issues/3230), [screenshot](https://user-images.githubusercontent.com/1617736/46573513-5cb69580-c94b-11e8-86b1-14ce82741e5c.png))\n+- #3094\n+  ([archive](http://web.archive.org/web/20181005191247/https://github.com/rust-lang-nursery/rust-clippy/issues/3094),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573506-5b856880-c94b-11e8-8a44-51cb40bc16ee.png))\n+- #3095\n+  ([archive](http://web.archive.org/web/20181005184416/https://github.com/rust-lang-nursery/rust-clippy/issues/3095),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573507-5c1dff00-c94b-11e8-912a-4bd6b5f838f5.png))\n+- #3096\n+  ([archive](http://web.archive.org/web/20181005184802/https://github.com/rust-lang-nursery/rust-clippy/issues/3096),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573508-5c1dff00-c94b-11e8-9425-2464f7260ff0.png))\n+- #3097\n+  ([archive](http://web.archive.org/web/20181005184821/https://github.com/rust-lang-nursery/rust-clippy/issues/3097),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573509-5c1dff00-c94b-11e8-8ba2-53f687984fe7.png))\n+- #3098\n+  ([archive](http://web.archive.org/web/20181005184900/https://github.com/rust-lang-nursery/rust-clippy/issues/3098),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573510-5c1dff00-c94b-11e8-8f64-371698401c60.png))\n+- #3099\n+  ([archive](http://web.archive.org/web/20181005184901/https://github.com/rust-lang-nursery/rust-clippy/issues/3099),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573511-5c1dff00-c94b-11e8-8e20-7d0eeb392b95.png))\n+- #3100\n+  ([archive](http://web.archive.org/web/20181005184901/https://github.com/rust-lang-nursery/rust-clippy/issues/3100),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573512-5c1dff00-c94b-11e8-8a13-7d758ed3563d.png))\n+- #3230\n+  ([archive](http://web.archive.org/web/20181005184903/https://github.com/rust-lang-nursery/rust-clippy/issues/3230),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573513-5cb69580-c94b-11e8-86b1-14ce82741e5c.png))\n \n The usernames of commenters on these issues can be found in relicense_comments.txt\n \n There are a couple people in relicense_comments.txt who are not found in contributors.txt:\n \n- - @EpocSquadron has [made minor text contributions to the README](https://github.com/rust-lang/rust-clippy/commits?author=EpocSquadron) which have since been overwritten, and doesn't count\n- - @JayKickliter [agreed to the relicense on their pull request](https://github.com/rust-lang/rust-clippy/pull/3195#issuecomment-423781016) ([archive](https://web.archive.org/web/20181005190730/https://github.com/rust-lang/rust-clippy/pull/3195), [screenshot](https://user-images.githubusercontent.com/1617736/46573514-5cb69580-c94b-11e8-8ffb-05a5bd02e2cc.png)\n-)\n- - @sanmai-NL's [contribution](https://github.com/rust-lang/rust-clippy/commits?author=sanmai-NL) is a minor one-word addition which doesn't count for copyright assignment\n- - @zmt00's [contributions](https://github.com/rust-lang/rust-clippy/commits?author=zmt00) are minor typo fixes and don't count\n- - @VKlayd has [nonminor contributions](https://github.com/rust-lang/rust-clippy/commits?author=VKlayd) which we rewrote (see below)\n- - @wartman4404 has [nonminor contributions](https://github.com/rust-lang/rust-clippy/commits?author=wartman4404) which we rewrote (see below)\n+- @EpocSquadron has [made minor text contributions to the\n+  README](https://github.com/rust-lang/rust-clippy/commits?author=EpocSquadron) which have since been overwritten, and\n+  doesn't count\n+- @JayKickliter [agreed to the relicense on their pull\n+  request](https://github.com/rust-lang/rust-clippy/pull/3195#issuecomment-423781016)\n+  ([archive](https://web.archive.org/web/20181005190730/https://github.com/rust-lang/rust-clippy/pull/3195),\n+  [screenshot](https://user-images.githubusercontent.com/1617736/46573514-5cb69580-c94b-11e8-8ffb-05a5bd02e2cc.png)\n \n+- @sanmai-NL's [contribution](https://github.com/rust-lang/rust-clippy/commits?author=sanmai-NL) is a minor one-word\n+  addition which doesn't count for copyright assignment\n+- @zmt00's [contributions](https://github.com/rust-lang/rust-clippy/commits?author=zmt00) are minor typo fixes and don't\n+  count\n+- @VKlayd has [nonminor contributions](https://github.com/rust-lang/rust-clippy/commits?author=VKlayd) which we rewrote\n+  (see below)\n+- @wartman4404 has [nonminor contributions](https://github.com/rust-lang/rust-clippy/commits?author=wartman4404) which\n+  we rewrote (see below)\n \n-Two of these contributors had nonminor contributions (#2184, #427) requiring a rewrite, carried out in #3251 ([archive](http://web.archive.org/web/20181005192411/https://github.com/rust-lang-nursery/rust-clippy/pull/3251), [screenshot](https://user-images.githubusercontent.com/1617736/46573515-5cb69580-c94b-11e8-86e5-b456452121b2.png)\n-)\n \n-First, I (Manishearth) removed the lints they had added. I then documented at a high level what the lints did in #3251, asking for co-maintainers who had not seen the code for the lints to rewrite them. #2814 was rewritten by @phansch, and #427 was rewritten by @oli-obk, who did not recall having previously seen the code they were rewriting.\n+Two of these contributors had nonminor contributions (#2184, #427) requiring a rewrite, carried out in #3251\n+([archive](http://web.archive.org/web/20181005192411/https://github.com/rust-lang-nursery/rust-clippy/pull/3251),\n+[screenshot](https://user-images.githubusercontent.com/1617736/46573515-5cb69580-c94b-11e8-86e5-b456452121b2.png))\n+\n+First, I (Manishearth) removed the lints they had added. I then documented at a high level what the lints did in #3251,\n+asking for co-maintainers who had not seen the code for the lints to rewrite them. #2814 was rewritten by @phansch, and\n+#427 was rewritten by @oli-obk, who did not recall having previously seen the code they were rewriting.\n \n ------\n \n-Since this document was written, @JayKickliter and @sanmai-ML added their consent in #3230 ([archive](http://web.archive.org/web/20181006171926/https://github.com/rust-lang-nursery/rust-clippy/issues/3230))\n+Since this document was written, @JayKickliter and @sanmai-ML added their consent in #3230\n+([archive](http://web.archive.org/web/20181006171926/https://github.com/rust-lang-nursery/rust-clippy/issues/3230))"}, {"sha": "097b796e785b1abcb79af905397c6b85b559873e", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -281,6 +281,17 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     }\n }\n \n+fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<PathBuf> {\n+    home.and_then(|home| {\n+        toolchain.map(|toolchain| {\n+            let mut path = PathBuf::from(home);\n+            path.push(\"toolchains\");\n+            path.push(toolchain);\n+            path\n+        })\n+    })\n+}\n+\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     lazy_static::initialize(&ICE_HOOK);\n@@ -301,22 +312,21 @@ pub fn main() {\n             //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n             // - sysroot from rustc in the path\n             // - compile-time environment\n+            //    - SYSROOT\n+            //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n             let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n             let have_sys_root_arg = sys_root_arg.is_some();\n             let sys_root = sys_root_arg\n                 .map(PathBuf::from)\n                 .or_else(|| std::env::var(\"SYSROOT\").ok().map(PathBuf::from))\n                 .or_else(|| {\n-                    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-                    home.and_then(|home| {\n-                        toolchain.map(|toolchain| {\n-                            let mut path = PathBuf::from(home);\n-                            path.push(\"toolchains\");\n-                            path.push(toolchain);\n-                            path\n-                        })\n-                    })\n+                    let home = std::env::var(\"RUSTUP_HOME\")\n+                        .or_else(|_| std::env::var(\"MULTIRUST_HOME\"))\n+                        .ok();\n+                    let toolchain = std::env::var(\"RUSTUP_TOOLCHAIN\")\n+                        .or_else(|_| std::env::var(\"MULTIRUST_TOOLCHAIN\"))\n+                        .ok();\n+                    toolchain_path(home, toolchain)\n                 })\n                 .or_else(|| {\n                     Command::new(\"rustc\")\n@@ -328,6 +338,15 @@ pub fn main() {\n                         .map(|s| PathBuf::from(s.trim()))\n                 })\n                 .or_else(|| option_env!(\"SYSROOT\").map(PathBuf::from))\n+                .or_else(|| {\n+                    let home = option_env!(\"RUSTUP_HOME\")\n+                        .or(option_env!(\"MULTIRUST_HOME\"))\n+                        .map(ToString::to_string);\n+                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\")\n+                        .or(option_env!(\"MULTIRUST_TOOLCHAIN\"))\n+                        .map(ToString::to_string);\n+                    toolchain_path(home, toolchain)\n+                })\n                 .map(|pb| pb.to_string_lossy().to_string())\n                 .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n "}, {"sha": "3aff8741f6051d7e6b95e525bc1a37812b3e2173", "filename": "tests/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -3,7 +3,7 @@ use std::process::Command;\n \n #[test]\n fn fmt() {\n-    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() || option_env!(\"NO_FMT_TEST\").is_some() {\n         return;\n     }\n "}, {"sha": "74f9a854dc1fa5e0776d75b072f3bd3ddba9fdbd", "filename": "tests/integration.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -59,6 +59,10 @@ fn integration_test() {\n         panic!(\"query stack during panic in the output\");\n     } else if stderr.contains(\"E0463\") {\n         panic!(\"error: E0463\");\n+    } else if stderr.contains(\"E0514\") {\n+        panic!(\"incompatible crate versions\");\n+    } else if stderr.contains(\"failed to run `rustc` to learn about target-specific information\") {\n+        panic!(\"couldn't find librustc_driver, consider setting `LD_LIBRARY_PATH`\");\n     }\n \n     match output.status.code() {"}, {"sha": "5d1bd60acf3d66ff0a6eb8202e16ad052c767a6d", "filename": "util/export.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a5379bda71f19539dabac0232330561e19be1a/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/71a5379bda71f19539dabac0232330561e19be1a/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=71a5379bda71f19539dabac0232330561e19be1a", "patch": "@@ -71,7 +71,9 @@ def main():\n \n     outfile = sys.argv[1] if len(sys.argv) > 1 else \"util/gh-pages/lints.json\"\n     with open(outfile, \"w\") as fp:\n-        json.dump(list(lints.values()), fp, indent=2)\n+        lints = list(lints.values())\n+        lints.sort(key=lambda x: x['id'])\n+        json.dump(lints, fp, indent=2)\n         log.info(\"wrote JSON for great justice\")\n \n "}]}