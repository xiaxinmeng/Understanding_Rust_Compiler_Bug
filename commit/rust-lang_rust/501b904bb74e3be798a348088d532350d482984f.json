{"sha": "501b904bb74e3be798a348088d532350d482984f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMWI5MDRiYjc0ZTNiZTc5OGEzNDgwODhkNTMyMzUwZDQ4Mjk4NGY=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-06-05T07:15:19Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-06-06T07:56:59Z"}, "message": "Change to_str().to_string() to just to_str()", "tree": {"sha": "3488f6a4439b7beb39149c0015a06e9270bee532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3488f6a4439b7beb39149c0015a06e9270bee532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/501b904bb74e3be798a348088d532350d482984f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/501b904bb74e3be798a348088d532350d482984f", "html_url": "https://github.com/rust-lang/rust/commit/501b904bb74e3be798a348088d532350d482984f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/501b904bb74e3be798a348088d532350d482984f/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073c8f10fc40b07596fd1018a2002db8e6d5222a", "url": "https://api.github.com/repos/rust-lang/rust/commits/073c8f10fc40b07596fd1018a2002db8e6d5222a", "html_url": "https://github.com/rust-lang/rust/commit/073c8f10fc40b07596fd1018a2002db8e6d5222a"}], "stats": {"total": 105, "additions": 54, "deletions": 51}, "files": [{"sha": "8e79f58c60881d21399b2c98f0ab750f98222a73", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -31,7 +31,7 @@ pub fn load_errors(re: &Regex, testfile: &Path) -> Vec<ExpectedError> {\n fn parse_expected(line_num: uint, line: &str, re: &Regex) -> Option<ExpectedError> {\n     re.captures(line).and_then(|caps| {\n         let adjusts = caps.name(\"adjusts\").len();\n-        let kind = caps.name(\"kind\").to_ascii().to_lower().into_str().to_string();\n+        let kind = caps.name(\"kind\").to_ascii().to_lower().into_str();\n         let msg = caps.name(\"msg\").trim().to_string();\n \n         debug!(\"line={} kind={} msg={}\", line_num, kind, msg);"}, {"sha": "84bf0eb11553e3a5be977aada46ec7ff9a433240", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -41,7 +41,7 @@ pub fn make_new_path(path: &str) -> String {\n       Some(curr) => {\n         format!(\"{}{}{}\", path, path_div(), curr)\n       }\n-      None => path.to_str().to_string()\n+      None => path.to_str()\n     }\n }\n "}, {"sha": "9797284a65b7d6e58ad40700a438be000a030db3", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -8,7 +8,7 @@ Use [`ToStr`](std/to_str/trait.ToStr.html).\n \n ~~~\n let x: int = 42;\n-let y: String = x.to_str().to_string();\n+let y: String = x.to_str();\n ~~~\n \n **String to int**"}, {"sha": "957b1d6ccc671d8c93ae80bd09609c381afc9cf2", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -467,7 +467,7 @@ fn stringifier(channel: &sync::DuplexStream<String, uint>) {\n     let mut value: uint;\n     loop {\n         value = channel.recv();\n-        channel.send(value.to_str().to_string());\n+        channel.send(value.to_str());\n         if value == 0 { break; }\n     }\n }\n@@ -492,7 +492,7 @@ extern crate sync;\n #     let mut value: uint;\n #     loop {\n #         value = channel.recv();\n-#         channel.send(value.to_str().to_string());\n+#         channel.send(value.to_str());\n #         if value == 0u { break; }\n #     }\n # }"}, {"sha": "abd5de4d10c93ef3852160cc679ae8bfe02e3b7d", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -3579,7 +3579,7 @@ trait Printable {\n }\n \n impl Printable for int {\n-  fn to_string(&self) -> String { self.to_str().to_string() }\n+  fn to_string(&self) -> String { self.to_str() }\n }\n \n fn print(a: Box<Printable>) {"}, {"sha": "ddfe8380e09dd5c4a681f327db28f958c654a180", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -222,7 +222,7 @@ impl Name {\n \n     fn to_str(&self) -> String {\n         match *self {\n-            Short(ch) => ch.to_str().to_string(),\n+            Short(ch) => ch.to_str(),\n             Long(ref s) => s.to_string()\n         }\n     }"}, {"sha": "9ee80d283cf924621ac20309c075ea29d8fcf371", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -349,7 +349,7 @@ mod test {\n     #[test]\n     fn test_to_str() {\n         fn test(c : Complex64, s: String) {\n-            assert_eq!(c.to_str().to_string(), s);\n+            assert_eq!(c.to_str(), s);\n         }\n         test(_0_0i, \"0+0i\".to_string());\n         test(_1_0i, \"1+0i\".to_string());"}, {"sha": "faf05365c04a0eef764cc89a20afdf3cc2663dda", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -559,7 +559,7 @@ mod test {\n     fn test_to_from_str() {\n         fn test(r: Rational, s: String) {\n             assert_eq!(FromStr::from_str(s.as_slice()), Some(r));\n-            assert_eq!(r.to_str().to_string(), s);\n+            assert_eq!(r.to_str(), s);\n         }\n         test(_1, \"1/1\".to_string());\n         test(_0, \"0/1\".to_string());"}, {"sha": "89d6620f1278243fc9923a3ac20fd7de6d3a2e6b", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -611,7 +611,7 @@ fn parse(cx: &mut ExtCtxt, tts: &[ast::TokenTree]) -> Option<String> {\n     let regex = match entry.node {\n         ast::ExprLit(lit) => {\n             match lit.node {\n-                ast::LitStr(ref s, _) => s.to_str().to_string(),\n+                ast::LitStr(ref s, _) => s.to_str(),\n                 _ => {\n                     cx.span_err(entry.span, format!(\n                         \"expected string literal but got `{}`\","}, {"sha": "89c0a381cf9f295afa4e38ab1b797eba50de5978", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -533,15 +533,15 @@ impl pprust::PpAnn for IdentifiedAnnotation {\n         match node {\n             pprust::NodeItem(item) => {\n                 try!(pp::space(&mut s.s));\n-                s.synth_comment(item.id.to_str().to_string())\n+                s.synth_comment(item.id.to_str())\n             }\n             pprust::NodeBlock(blk) => {\n                 try!(pp::space(&mut s.s));\n                 s.synth_comment((format!(\"block {}\", blk.id)).to_string())\n             }\n             pprust::NodeExpr(expr) => {\n                 try!(pp::space(&mut s.s));\n-                try!(s.synth_comment(expr.id.to_str().to_string()));\n+                try!(s.synth_comment(expr.id.to_str()));\n                 s.pclose()\n             }\n             pprust::NodePat(pat) => {"}, {"sha": "b5cb0f8e5aac8b12b47e4d7075695ffcd4790f94", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -324,7 +324,7 @@ impl<'a> IrMaps<'a> {\n     fn variable_name(&self, var: Variable) -> String {\n         match self.var_kinds.get(var.get()) {\n             &Local(LocalInfo { ident: nm, .. }) | &Arg(_, nm) => {\n-                token::get_ident(nm).get().to_str().to_string()\n+                token::get_ident(nm).get().to_str()\n             },\n             &ImplicitRet => \"<implicit-ret>\".to_string()\n         }"}, {"sha": "1d2ed72f70ea0283f8c53c5430571279985f0c3d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -1303,7 +1303,7 @@ impl Repr for InteriorKind {\n     fn repr(&self, _tcx: &ty::ctxt) -> String {\n         match *self {\n             InteriorField(NamedField(fld)) => {\n-                token::get_name(fld).get().to_str().to_string()\n+                token::get_name(fld).get().to_str()\n             }\n             InteriorField(PositionalField(i)) => format!(\"\\\\#{:?}\", i),\n             InteriorElement(_) => \"[]\".to_string(),"}, {"sha": "6096060f975e9eab53456b797f3e5d4ceec3cc17", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -1927,7 +1927,7 @@ fn exported_name(ccx: &CrateContext, id: ast::NodeId,\n         _ => ccx.tcx.map.with_path(id, |mut path| {\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle\n-                path.last().unwrap().to_str().to_string()\n+                path.last().unwrap().to_str()\n             } else {\n                 match weak_lang_items::link_name(attrs) {\n                     Some(name) => name.get().to_string(),"}, {"sha": "59d73c7fb1f2d917c94e03055688aea29d08385c", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -79,13 +79,13 @@ impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n \n impl InferStr for IntVarValue {\n     fn inf_str(&self, _cx: &InferCtxt) -> String {\n-        self.to_str().to_string()\n+        self.to_str()\n     }\n }\n \n impl InferStr for ast::FloatTy {\n     fn inf_str(&self, _cx: &InferCtxt) -> String {\n-        self.to_str().to_string()\n+        self.to_str()\n     }\n }\n "}, {"sha": "e14fd89fc74d72ce6bc7a1bd3dd4fdc9b424fbcb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -366,7 +366,7 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n       ty_bare_fn(ref f) => {\n           bare_fn_to_str(cx, f.fn_style, f.abi, None, &f.sig)\n       }\n-      ty_infer(infer_ty) => infer_ty.to_str().to_string(),\n+      ty_infer(infer_ty) => infer_ty.to_str(),\n       ty_err => \"[type error]\".to_string(),\n       ty_param(param_ty {idx: id, def_id: did}) => {\n           let ident = match cx.ty_param_defs.borrow().find(&did.node) {\n@@ -753,7 +753,10 @@ impl Repr for ty::ItemVariances {\n \n impl Repr for ty::Variance {\n     fn repr(&self, _: &ctxt) -> String {\n-        self.to_str().to_string()\n+        // The first `.to_str()` returns a &'static str (it is not an implementation\n+        // of the ToStr trait). Because of that, we need to call `.to_str()` again\n+        // if we want to have a `String`.\n+        self.to_str().to_str()\n     }\n }\n \n@@ -950,13 +953,13 @@ impl UserString for ast::Ident {\n \n impl Repr for abi::Abi {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        self.to_str().to_string()\n+        self.to_str()\n     }\n }\n \n impl UserString for abi::Abi {\n     fn user_string(&self, _tcx: &ctxt) -> String {\n-        self.to_str().to_string()\n+        self.to_str()\n     }\n }\n "}, {"sha": "397476856fccb750fce2a452fd99ee471ca91d66", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -93,7 +93,7 @@ fn try_inline_def(cx: &core::DocContext,\n     cx.inlined.borrow_mut().get_mut_ref().insert(did);\n     ret.push(clean::Item {\n         source: clean::Span::empty(),\n-        name: Some(fqn.last().unwrap().to_str().to_string()),\n+        name: Some(fqn.last().unwrap().to_str()),\n         attrs: load_attrs(tcx, did),\n         inner: inner,\n         visibility: Some(ast::Public),"}, {"sha": "4614d7cee3a600504076e3b352bc9fa28181e187", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -526,7 +526,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                  external_path(\"Share\", &empty)),\n         };\n         let fqn = csearch::get_item_path(tcx, did);\n-        let fqn = fqn.move_iter().map(|i| i.to_str().to_string()).collect();\n+        let fqn = fqn.move_iter().map(|i| i.to_str()).collect();\n         cx.external_paths.borrow_mut().get_mut_ref().insert(did,\n                                                             (fqn, TypeTrait));\n         TraitBound(ResolvedPath {\n@@ -545,7 +545,7 @@ impl Clean<TyParamBound> for ty::TraitRef {\n             core::NotTyped(_) => return RegionBound,\n         };\n         let fqn = csearch::get_item_path(tcx, self.def_id);\n-        let fqn = fqn.move_iter().map(|i| i.to_str().to_string())\n+        let fqn = fqn.move_iter().map(|i| i.to_str())\n                      .collect::<Vec<String>>();\n         let path = external_path(fqn.last().unwrap().as_slice(),\n                                  &self.substs);\n@@ -1239,7 +1239,7 @@ impl Clean<Type> for ty::t {\n                 };\n                 let fqn = csearch::get_item_path(tcx, did);\n                 let fqn: Vec<String> = fqn.move_iter().map(|i| {\n-                    i.to_str().to_string()\n+                    i.to_str()\n                 }).collect();\n                 let kind = match ty::get(*self).sty {\n                     ty::ty_struct(..) => TypeStruct,\n@@ -1617,7 +1617,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n                 type_params: Vec::new(),\n             },\n             decl: self.decl.clean(),\n-            abi: self.abi.to_str().to_string(),\n+            abi: self.abi.to_str(),\n         }\n     }\n }\n@@ -1891,12 +1891,12 @@ fn lit_to_str(lit: &ast::Lit) -> String {\n         ast::LitStr(ref st, _) => st.get().to_string(),\n         ast::LitBinary(ref data) => format!(\"{:?}\", data.as_slice()),\n         ast::LitChar(c) => format!(\"'{}'\", c),\n-        ast::LitInt(i, _t) => i.to_str().to_string(),\n-        ast::LitUint(u, _t) => u.to_str().to_string(),\n-        ast::LitIntUnsuffixed(i) => i.to_str().to_string(),\n+        ast::LitInt(i, _t) => i.to_str(),\n+        ast::LitUint(u, _t) => u.to_str(),\n+        ast::LitIntUnsuffixed(i) => i.to_str(),\n         ast::LitFloat(ref f, _t) => f.get().to_string(),\n         ast::LitFloatUnsuffixed(ref f) => f.get().to_string(),\n-        ast::LitBool(b) => b.to_str().to_string(),\n+        ast::LitBool(b) => b.to_str(),\n         ast::LitNil => \"\".to_string(),\n     }\n }"}, {"sha": "51d2a67d6cbf410f9148a1ca8d074254aa4590d6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -401,7 +401,7 @@ impl fmt::Show for clean::Type {\n                        } else {\n                            let mut m = decl.bounds\n                                            .iter()\n-                                           .map(|s| s.to_str().to_string());\n+                                           .map(|s| s.to_str());\n                            format!(\n                                \": {}\",\n                                m.collect::<Vec<String>>().connect(\" + \"))"}, {"sha": "e0a8a459a6acba616ded543c7003c7b506fe202b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -208,7 +208,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         // Transform the contents of the header into a hyphenated string\n         let id = (s.as_slice().words().map(|s| {\n             match s.to_ascii_opt() {\n-                Some(s) => s.to_lower().into_str().to_string(),\n+                Some(s) => s.to_lower().into_str(),\n                 None => s.to_string()\n             }\n         }).collect::<Vec<String>>().connect(\"-\")).to_string();"}, {"sha": "58afd13f1a4a5703142cdeed4c2cfd3ee620f64d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -360,7 +360,7 @@ fn json_input(input: &str) -> Result<Output, String> {\n         }\n     };\n     match json::from_reader(&mut input) {\n-        Err(s) => Err(s.to_str().to_string()),\n+        Err(s) => Err(s.to_str()),\n         Ok(json::Object(obj)) => {\n             let mut obj = obj;\n             // Make sure the schema is what we expect"}, {"sha": "93b66ede2671f3a87d895c2d976c96c93f44f3c7", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -125,7 +125,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         Some(src) => {\n             // Add this input file to the code map to make it available as\n             // dependency information\n-            let filename = file.display().to_str().to_string();\n+            let filename = file.display().to_str();\n             let interned = token::intern_and_get_ident(src);\n             cx.codemap().new_filemap(filename, src.to_string());\n "}, {"sha": "c78d4d258f6f5ef317363c3844f5b3b71c69f962", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -252,7 +252,7 @@ pub fn add_new_extension(cx: &mut ExtCtxt,\n \n     box MacroRulesDefiner {\n         def: RefCell::new(Some(MacroDef {\n-            name: token::get_ident(name).to_str().to_string(),\n+            name: token::get_ident(name).to_str(),\n             ext: NormalTT(exp, Some(sp))\n         }))\n     } as Box<MacResult>"}, {"sha": "129ea5fdf6d0406d8e98dd6a8bf4c54f90d174ec", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -205,7 +205,7 @@ pub fn to_str(t: &Token) -> String {\n                                                ast_util::ForceSuffix),\n       LIT_UINT(u, t) => ast_util::uint_ty_to_str(t, Some(u),\n                                                  ast_util::ForceSuffix),\n-      LIT_INT_UNSUFFIXED(i) => { (i as u64).to_str().to_string() }\n+      LIT_INT_UNSUFFIXED(i) => { (i as u64).to_str() }\n       LIT_FLOAT(s, t) => {\n         let mut body = String::from_str(get_ident(s).get());\n         if body.as_slice().ends_with(\".\") {"}, {"sha": "c1aa2c77df1d2ee86f195e7128809c48bc98ff82", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -1503,7 +1503,7 @@ mod tests {\n         let filtered = filter_tests(&opts, tests);\n \n         assert_eq!(filtered.len(), 1);\n-        assert_eq!(filtered.get(0).desc.name.to_str().to_string(),\n+        assert_eq!(filtered.get(0).desc.name.to_str(),\n                    \"1\".to_string());\n         assert!(filtered.get(0).desc.ignore == false);\n     }\n@@ -1554,7 +1554,7 @@ mod tests {\n                  \"test::sort_tests\".to_string());\n \n         for (a, b) in expected.iter().zip(filtered.iter()) {\n-            assert!(*a == b.desc.name.to_str().to_string());\n+            assert!(*a == b.desc.name.to_str());\n         }\n     }\n "}, {"sha": "90af1da78a457d096655d5ff8e6ac30318c63d31", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -1020,7 +1020,7 @@ pub fn strftime(format: &str, tm: &Tm) -> String {\n           'U' => format!(\"{:02d}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n           'u' => {\n             let i = tm.tm_wday as int;\n-            (if i == 0 { 7 } else { i }).to_str().to_string()\n+            (if i == 0 { 7 } else { i }).to_str()\n           }\n           'V' => iso_week('V', tm),\n           'v' => {\n@@ -1033,8 +1033,8 @@ pub fn strftime(format: &str, tm: &Tm) -> String {\n               format!(\"{:02d}\",\n                              (tm.tm_yday - (tm.tm_wday - 1 + 7) % 7 + 7) / 7)\n           }\n-          'w' => (tm.tm_wday as int).to_str().to_string(),\n-          'Y' => (tm.tm_year as int + 1900).to_str().to_string(),\n+          'w' => (tm.tm_wday as int).to_str(),\n+          'Y' => (tm.tm_year as int + 1900).to_str(),\n           'y' => format!(\"{:02d}\", (tm.tm_year as int + 1900) % 100),\n           'Z' => \"\".to_string(),    // FIXME(pcwalton): Implement this.\n           'z' => {"}, {"sha": "af8db85a5c8d072f849beb44a4043bcb85502869", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -527,7 +527,7 @@ fn get_authority(rawurl: &str) ->\n     Result<(Option<UserInfo>, String, Option<String>, String), String> {\n     if !rawurl.starts_with(\"//\") {\n         // there is no authority.\n-        return Ok((None, \"\".to_string(), None, rawurl.to_str().to_string()));\n+        return Ok((None, \"\".to_string(), None, rawurl.to_str()));\n     }\n \n     enum State {"}, {"sha": "d229d958014cd842c7637a56f8c429398de9c202", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -90,11 +90,11 @@ impl Results {\n             let mut set = f();\n             timed(&mut self.sequential_strings, || {\n                 for i in range(0u, num_keys) {\n-                    set.insert(i.to_str().to_string());\n+                    set.insert(i.to_str());\n                 }\n \n                 for i in range(0u, num_keys) {\n-                    assert!(set.contains(&i.to_str().to_string()));\n+                    assert!(set.contains(&i.to_str()));\n                 }\n             })\n         }\n@@ -103,7 +103,7 @@ impl Results {\n             let mut set = f();\n             timed(&mut self.random_strings, || {\n                 for _ in range(0, num_keys) {\n-                    let s = rng.gen::<uint>().to_str().to_string();\n+                    let s = rng.gen::<uint>().to_str();\n                     set.insert(s);\n                 }\n             })\n@@ -112,11 +112,11 @@ impl Results {\n         {\n             let mut set = f();\n             for i in range(0u, num_keys) {\n-                set.insert(i.to_str().to_string());\n+                set.insert(i.to_str());\n             }\n             timed(&mut self.delete_strings, || {\n                 for i in range(0u, num_keys) {\n-                    assert!(set.remove(&i.to_str().to_string()));\n+                    assert!(set.remove(&i.to_str()));\n                 }\n             })\n         }"}, {"sha": "2b67ef09c59db5152d610b4ee9741dcba2488888", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -38,7 +38,7 @@ impl<A> option_monad<A> for Option<A> {\n }\n \n fn transform(x: Option<int>) -> Option<String> {\n-    x.bind(|n| Some(*n + 1) ).bind(|n| Some(n.to_str().to_string()) )\n+    x.bind(|n| Some(*n + 1) ).bind(|n| Some(n.to_str()) )\n }\n \n pub fn main() {"}, {"sha": "f6c314b20dd14fab9a0f18dc13338dbd812d5f08", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -31,7 +31,7 @@ trait uint_utils {\n \n impl uint_utils for uint {\n     fn str(&self) -> String {\n-        self.to_str().to_string()\n+        self.to_str()\n     }\n     fn multi(&self, f: |uint|) {\n         let mut c = 0u;"}, {"sha": "45c70bc2d945e48f73b0fe30a0944480a6a1b887", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -36,7 +36,7 @@ impl<T:to_str> to_str for Option<T> {\n \n impl to_str for int {\n     fn to_str_(&self) -> String {\n-        self.to_str().to_string()\n+        self.to_str()\n     }\n }\n "}, {"sha": "cd7c5c6f8f7d48ae6e94950e43cfe4d3fbf8b8cd", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/501b904bb74e3be798a348088d532350d482984f/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=501b904bb74e3be798a348088d532350d482984f", "patch": "@@ -15,7 +15,7 @@ trait to_str {\n }\n \n impl to_str for int {\n-    fn to_string(&self) -> String { self.to_str().to_string() }\n+    fn to_string(&self) -> String { self.to_str() }\n }\n \n impl<T:to_str> to_str for Vec<T> {"}]}