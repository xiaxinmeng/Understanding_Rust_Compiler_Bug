{"sha": "4c777710c6f5996e0967fe5b9d2924684c646626", "node_id": "C_kwDOAAsO6NoAKDRjNzc3NzEwYzZmNTk5NmUwOTY3ZmU1YjlkMjkyNDY4NGM2NDY2MjY", "commit": {"author": {"name": "Weihang Lo", "email": "me@weihanglo.tw", "date": "2023-03-20T03:42:54Z"}, "committer": {"name": "Weihang Lo", "email": "me@weihanglo.tw", "date": "2023-04-16T18:32:20Z"}, "message": "tidy: `check_crate_duplicate` is no longer useful\n\nAfter cargo becomes a workspace, no one uses `check_crate_duplicate` to\ncheck if cargo is a dependency anymore.", "tree": {"sha": "6dbe932153a91fbad6031caa92dd0cfa67c9252e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbe932153a91fbad6031caa92dd0cfa67c9252e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c777710c6f5996e0967fe5b9d2924684c646626", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEfYTqB0fBJAwqFtKm19vxiYJegucFAmQ8PzQACgkQ19vxiYJe\ngueL6hAAnCRXJr6Oh/9239tMF2JEhHmcqAm+412i9RlEpF8+Ta9kU3bXd14GOtdp\nSezmq/NtMDWJ3B4sYUmbXy52hGo97DARAaBR0Whl/bT8w3Oc4PSRuAyGqlzzcHhx\nPmBCykAv6n+6stFwcPMr6LZOehsOraZoNPbm4cqVhqvvjX6YLJe380P2AzM0A/oI\nddAk5FPBIejomU+UkW1onHeEfMatoFT/O+K1vNBhi1w5t9iEUEIQWqgCe8T0X3X2\n630szAYdzHbpvOx1BAMsEfAjY9xgw3u6kAXr1o3Ei4TKzLNCWn3vopY3mqsHL4BW\nHVqay7exzw7B6guZNo3haz+oMUzpPzxruEAg6BRh6ZBAcJernG5Cccnd0AOZh/e3\nFH0CRE4s6RDcq+U0Otu/sb5X6L2bLU98Pqfc/U2NjIU1Tct8Ckt/oDwLpVN26bxO\nDKQWukZQOwygwJQC9/wH8+NF5L+u6fwserKhxqxNUqiJqh0gZifzvBYZSTR9hZhA\nYb7EtDNZ0w2sYwpn1yY2v0lUUuN8F2+es+wSJRSissW2ejtqUGvJrrkdEVWldQ9q\n9PawpnC1h5IXDvKu7VNQ5u846NyPxRpxsikIHDWDECru3e8QPVpCdpMUBsbHE/rO\nyosIuNxTQ8nn5bxwFQNStTadfjkZM6JdiZpKP6QWlljKR//8PDI=\n=OYxO\n-----END PGP SIGNATURE-----", "payload": "tree 6dbe932153a91fbad6031caa92dd0cfa67c9252e\nparent f795a150fe01b68bdd62503c39fbdc9ed04a5219\nauthor Weihang Lo <me@weihanglo.tw> 1679283774 +0800\ncommitter Weihang Lo <me@weihanglo.tw> 1681669940 +0100\n\ntidy: `check_crate_duplicate` is no longer useful\n\nAfter cargo becomes a workspace, no one uses `check_crate_duplicate` to\ncheck if cargo is a dependency anymore.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c777710c6f5996e0967fe5b9d2924684c646626", "html_url": "https://github.com/rust-lang/rust/commit/4c777710c6f5996e0967fe5b9d2924684c646626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c777710c6f5996e0967fe5b9d2924684c646626/comments", "author": {"login": "weihanglo", "id": 14314532, "node_id": "MDQ6VXNlcjE0MzE0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/14314532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihanglo", "html_url": "https://github.com/weihanglo", "followers_url": "https://api.github.com/users/weihanglo/followers", "following_url": "https://api.github.com/users/weihanglo/following{/other_user}", "gists_url": "https://api.github.com/users/weihanglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihanglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihanglo/subscriptions", "organizations_url": "https://api.github.com/users/weihanglo/orgs", "repos_url": "https://api.github.com/users/weihanglo/repos", "events_url": "https://api.github.com/users/weihanglo/events{/privacy}", "received_events_url": "https://api.github.com/users/weihanglo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weihanglo", "id": 14314532, "node_id": "MDQ6VXNlcjE0MzE0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/14314532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihanglo", "html_url": "https://github.com/weihanglo", "followers_url": "https://api.github.com/users/weihanglo/followers", "following_url": "https://api.github.com/users/weihanglo/following{/other_user}", "gists_url": "https://api.github.com/users/weihanglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihanglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihanglo/subscriptions", "organizations_url": "https://api.github.com/users/weihanglo/orgs", "repos_url": "https://api.github.com/users/weihanglo/repos", "events_url": "https://api.github.com/users/weihanglo/events{/privacy}", "received_events_url": "https://api.github.com/users/weihanglo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f795a150fe01b68bdd62503c39fbdc9ed04a5219", "url": "https://api.github.com/repos/rust-lang/rust/commits/f795a150fe01b68bdd62503c39fbdc9ed04a5219", "html_url": "https://github.com/rust-lang/rust/commit/f795a150fe01b68bdd62503c39fbdc9ed04a5219"}], "stats": {"total": 55, "additions": 8, "deletions": 47}, "files": [{"sha": "0e0a517ae49db216e792cc02ec48f2f580829fb0", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4c777710c6f5996e0967fe5b9d2924684c646626/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c777710c6f5996e0967fe5b9d2924684c646626/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=4c777710c6f5996e0967fe5b9d2924684c646626", "patch": "@@ -335,13 +335,6 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"windows_x86_64_msvc\",\n ];\n \n-const FORBIDDEN_TO_HAVE_DUPLICATES: &[&str] = &[\n-    // This crate takes quite a long time to build, so don't allow two versions of them\n-    // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n-    // under control.\n-    \"cargo\",\n-];\n-\n /// Dependency checks.\n ///\n /// `root` is path to the directory with the root `Cargo.toml` (for the workspace). `cargo` is path\n@@ -361,7 +354,6 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         &[\"rustc_driver\", \"rustc_codegen_llvm\"],\n         bad,\n     );\n-    check_crate_duplicate(&metadata, &[], bad);\n \n     // Check cargo independently as it has it's own workspace.\n     let mut cmd = cargo_metadata::MetadataCommand::new();\n@@ -371,7 +363,6 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n     let cargo_metadata = t!(cmd.exec());\n     let runtime_ids = HashSet::new();\n     check_license_exceptions(&cargo_metadata, EXCEPTIONS_CARGO, runtime_ids, bad);\n-    check_crate_duplicate(&cargo_metadata, FORBIDDEN_TO_HAVE_DUPLICATES, bad);\n     check_rustfix(&metadata, &cargo_metadata, bad);\n \n     // Check rustc_codegen_cranelift independently as it has it's own workspace.\n@@ -389,7 +380,6 @@ pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n         &[\"rustc_codegen_cranelift\"],\n         bad,\n     );\n-    check_crate_duplicate(&metadata, &[], bad);\n \n     let mut cmd = cargo_metadata::MetadataCommand::new();\n     cmd.cargo_path(cargo)\n@@ -535,40 +525,6 @@ fn check_permitted_dependencies(\n     }\n }\n \n-/// Prevents multiple versions of some expensive crates.\n-fn check_crate_duplicate(\n-    metadata: &Metadata,\n-    forbidden_to_have_duplicates: &[&str],\n-    bad: &mut bool,\n-) {\n-    for &name in forbidden_to_have_duplicates {\n-        let matches: Vec<_> = metadata.packages.iter().filter(|pkg| pkg.name == name).collect();\n-        match matches.len() {\n-            0 => {\n-                tidy_error!(\n-                    bad,\n-                    \"crate `{}` is missing, update `check_crate_duplicate` \\\n-                    if it is no longer used\",\n-                    name\n-                );\n-            }\n-            1 => {}\n-            _ => {\n-                tidy_error!(\n-                    bad,\n-                    \"crate `{}` is duplicated in `Cargo.lock`, \\\n-                    it is too expensive to build multiple times, \\\n-                    so make sure only one version appears across all dependencies\",\n-                    name\n-                );\n-                for pkg in matches {\n-                    println!(\"  * {}\", pkg.id);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n /// Finds a package with the given name.\n fn pkg_from_name<'a>(metadata: &'a Metadata, name: &'static str) -> &'a Package {\n     let mut i = metadata.packages.iter().filter(|p| p.name == name);\n@@ -618,18 +574,23 @@ fn deps_of_filtered<'a>(\n     }\n }\n \n-fn direct_deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> impl Iterator<Item = &'a Package> {\n+fn direct_deps_of<'a>(\n+    metadata: &'a Metadata,\n+    pkg_id: &'a PackageId,\n+) -> impl Iterator<Item = &'a Package> {\n     let resolve = metadata.resolve.as_ref().unwrap();\n     let node = resolve.nodes.iter().find(|n| &n.id == pkg_id).unwrap();\n     node.deps.iter().map(|dep| pkg_from_id(metadata, &dep.pkg))\n }\n \n fn check_rustfix(rust_metadata: &Metadata, cargo_metadata: &Metadata, bad: &mut bool) {\n     let cargo = pkg_from_name(cargo_metadata, \"cargo\");\n-    let cargo_rustfix = direct_deps_of(cargo_metadata, &cargo.id).find(|p| p.name == \"rustfix\").unwrap();\n+    let cargo_rustfix =\n+        direct_deps_of(cargo_metadata, &cargo.id).find(|p| p.name == \"rustfix\").unwrap();\n \n     let compiletest = pkg_from_name(rust_metadata, \"compiletest\");\n-    let compiletest_rustfix = direct_deps_of(rust_metadata, &compiletest.id).find(|p| p.name == \"rustfix\").unwrap();\n+    let compiletest_rustfix =\n+        direct_deps_of(rust_metadata, &compiletest.id).find(|p| p.name == \"rustfix\").unwrap();\n \n     if cargo_rustfix.version != compiletest_rustfix.version {\n         tidy_error!("}]}