{"sha": "b88ba007cc2631799c2334753a7de807c548685e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OGJhMDA3Y2MyNjMxNzk5YzIzMzQ3NTNhN2RlODA3YzU0ODY4NWU=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-01-30T02:39:09Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-01-30T02:39:09Z"}, "message": "Pass Documentation up to LSP and add \"rust\" to our codeblocks there", "tree": {"sha": "0cbc02b9f764fdd8ff26e22135af281d3cbbd57f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cbc02b9f764fdd8ff26e22135af281d3cbbd57f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88ba007cc2631799c2334753a7de807c548685e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88ba007cc2631799c2334753a7de807c548685e", "html_url": "https://github.com/rust-lang/rust/commit/b88ba007cc2631799c2334753a7de807c548685e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88ba007cc2631799c2334753a7de807c548685e/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d2acb297459fb06cbb49bdce2eccb4c2591714", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d2acb297459fb06cbb49bdce2eccb4c2591714", "html_url": "https://github.com/rust-lang/rust/commit/48d2acb297459fb06cbb49bdce2eccb4c2591714"}], "stats": {"total": 192, "additions": 103, "deletions": 89}, "files": [{"sha": "2eb388e0e763dec1ac33342ce9858245881c3aab", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 18, "deletions": 48, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -3,9 +3,10 @@ use ra_db::SourceDatabase;\n use ra_syntax::{\n     AstNode, SyntaxNode, TextUnit, TextRange,\n     SyntaxKind::FN_DEF,\n-    ast::{self, ArgListOwner, DocCommentsOwner},\n+    ast::{self, ArgListOwner},\n     algo::find_node_at_offset,\n };\n+use hir::Docs;\n \n use crate::{FilePosition, CallInfo, db::RootDatabase};\n \n@@ -26,7 +27,9 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let fn_file = db.parse(symbol.file_id);\n     let fn_def = symbol.ptr.to_node(&fn_file);\n     let fn_def = ast::FnDef::cast(fn_def).unwrap();\n-    let mut call_info = CallInfo::new(fn_def)?;\n+    let function = hir::source_binder::function_from_source(db, symbol.file_id, fn_def)?;\n+\n+    let mut call_info = CallInfo::new(db, function, fn_def)?;\n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters.len();\n     let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n@@ -110,46 +113,13 @@ impl<'a> FnCallNode<'a> {\n }\n \n impl CallInfo {\n-    fn new(node: &ast::FnDef) -> Option<Self> {\n-        let label: String = if let Some(body) = node.body() {\n-            let body_range = body.syntax().range();\n-            let label: String = node\n-                .syntax()\n-                .children()\n-                .filter(|child| !child.range().is_subrange(&body_range)) // Filter out body\n-                .filter(|child| ast::Comment::cast(child).is_none()) // Filter out doc comments\n-                .map(|node| node.text().to_string())\n-                .collect();\n-            label\n-        } else {\n-            node.syntax().text().to_string()\n-        };\n-\n-        let mut doc = None;\n-        if let Some(docs) = node.doc_comment_text() {\n-            // Massage markdown\n-            let mut processed_lines = Vec::new();\n-            let mut in_code_block = false;\n-            for line in docs.lines() {\n-                if line.starts_with(\"```\") {\n-                    in_code_block = !in_code_block;\n-                }\n-\n-                let line = if in_code_block && line.starts_with(\"```\") && !line.contains(\"rust\") {\n-                    \"```rust\".into()\n-                } else {\n-                    line.to_string()\n-                };\n-\n-                processed_lines.push(line);\n-            }\n-\n-            doc = Some(processed_lines.join(\"\\n\"));\n-        }\n+    fn new(db: &RootDatabase, function: hir::Function, node: &ast::FnDef) -> Option<Self> {\n+        let label = crate::completion::function_label(node)?;\n+        let doc = function.docs(db);\n \n         Some(CallInfo {\n             parameters: param_list(node),\n-            label: label.trim().to_owned(),\n+            label,\n             doc,\n             active_parameter: None,\n         })\n@@ -284,7 +254,7 @@ fn bar() {\n         assert_eq!(info.parameters, vec![\"j\".to_string()]);\n         assert_eq!(info.active_parameter, Some(0));\n         assert_eq!(info.label, \"fn foo(j: u32) -> u32\".to_string());\n-        assert_eq!(info.doc, Some(\"test\".into()));\n+        assert_eq!(info.doc.map(|it| it.into()), Some(\"test\".to_string()));\n     }\n \n     #[test]\n@@ -313,18 +283,18 @@ pub fn do() {\n         assert_eq!(info.active_parameter, Some(0));\n         assert_eq!(info.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n         assert_eq!(\n-            info.doc,\n+            info.doc.map(|it| it.into()),\n             Some(\n                 r#\"Adds one to the number given.\n \n # Examples\n \n-```rust\n+```\n let five = 5;\n \n assert_eq!(6, my_crate::add_one(5));\n ```\"#\n-                    .into()\n+                    .to_string()\n             )\n         );\n     }\n@@ -359,18 +329,18 @@ pub fn do_it() {\n         assert_eq!(info.active_parameter, Some(0));\n         assert_eq!(info.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n         assert_eq!(\n-            info.doc,\n+            info.doc.map(|it| it.into()),\n             Some(\n                 r#\"Adds one to the number given.\n \n # Examples\n \n-```rust\n+```\n let five = 5;\n \n assert_eq!(6, my_crate::add_one(5));\n ```\"#\n-                    .into()\n+                    .to_string()\n             )\n         );\n     }\n@@ -414,12 +384,12 @@ pub fn foo() {\n         );\n         assert_eq!(info.active_parameter, Some(1));\n         assert_eq!(\n-            info.doc,\n+            info.doc.map(|it| it.into()),\n             Some(\n                 r#\"Method is called when writer finishes.\n \n By default this method stops actor's `Context`.\"#\n-                    .into()\n+                    .to_string()\n             )\n         );\n     }"}, {"sha": "722d94f3a2c4b89a8ab62efb59e2521b33cf57f2", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -10,6 +10,7 @@ mod complete_scope;\n mod complete_postfix;\n \n use ra_db::SourceDatabase;\n+use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     db,\n@@ -61,3 +62,21 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     Some(acc)\n }\n+\n+pub fn function_label(node: &ast::FnDef) -> Option<String> {\n+    let label: String = if let Some(body) = node.body() {\n+        let body_range = body.syntax().range();\n+        let label: String = node\n+            .syntax()\n+            .children()\n+            .filter(|child| !child.range().is_subrange(&body_range)) // Filter out body\n+            .filter(|child| ast::Comment::cast(child).is_none()) // Filter out comments\n+            .map(|node| node.text().to_string())\n+            .collect();\n+        label\n+    } else {\n+        node.syntax().text().to_string()\n+    };\n+\n+    Some(label.trim().to_owned())\n+}"}, {"sha": "d3bc148944e1be9a1d6107d2c95f82df49bc6b41", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -1,12 +1,12 @@\n use hir::{Docs, Documentation};\n-use ra_syntax::{\n-    ast::{self, AstNode},\n-    TextRange,\n-};\n+use ra_syntax::TextRange;\n use ra_text_edit::TextEdit;\n use test_utils::tested_by;\n \n-use crate::completion::completion_context::CompletionContext;\n+use crate::completion::{\n+    completion_context::CompletionContext,\n+    function_label,\n+};\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -97,8 +97,8 @@ impl CompletionItem {\n         self.detail.as_ref().map(|it| it.as_str())\n     }\n     /// A doc-comment\n-    pub fn documentation(&self) -> Option<&str> {\n-        self.documentation.as_ref().map(|it| it.contents())\n+    pub fn documentation(&self) -> Option<Documentation> {\n+        self.documentation.clone()\n     }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n@@ -252,7 +252,7 @@ impl Builder {\n             self.documentation = Some(docs);\n         }\n \n-        if let Some(label) = function_label(ctx, function) {\n+        if let Some(label) = function_item_label(ctx, function) {\n             self.detail = Some(label);\n         }\n \n@@ -292,24 +292,9 @@ impl Into<Vec<CompletionItem>> for Completions {\n     }\n }\n \n-fn function_label(ctx: &CompletionContext, function: hir::Function) -> Option<String> {\n+fn function_item_label(ctx: &CompletionContext, function: hir::Function) -> Option<String> {\n     let node = function.source(ctx.db).1;\n-\n-    let label: String = if let Some(body) = node.body() {\n-        let body_range = body.syntax().range();\n-        let label: String = node\n-            .syntax()\n-            .children()\n-            .filter(|child| !child.range().is_subrange(&body_range)) // Filter out body\n-            .filter(|child| ast::Comment::cast(child).is_none()) // Filter out comments\n-            .map(|node| node.text().to_string())\n-            .collect();\n-        label\n-    } else {\n-        node.syntax().text().to_string()\n-    };\n-\n-    Some(label.trim().to_owned())\n+    function_label(&node)\n }\n \n #[cfg(test)]"}, {"sha": "09cf0216d0724fa68733aa8407d4c9c8c3e6394d", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -58,6 +58,7 @@ pub use ra_ide_api_light::{\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId\n };\n+pub use hir::Documentation;\n \n // We use jemalloc mainly to get heap usage statistics, actual performance\n // differnece is not measures.\n@@ -266,7 +267,7 @@ impl<T> RangeInfo<T> {\n #[derive(Debug)]\n pub struct CallInfo {\n     pub label: String,\n-    pub doc: Option<String>,\n+    pub doc: Option<Documentation>,\n     pub parameters: Vec<String>,\n     pub active_parameter: Option<usize>,\n }"}, {"sha": "c033ecdeaa10a1c570b9b4e4bec72b7dee60dca4", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -87,21 +87,14 @@ impl ConvWith for CompletionItem {\n             None\n         };\n \n-        let documentation = self.documentation().map(|value| {\n-            Documentation::MarkupContent(MarkupContent {\n-                kind: MarkupKind::Markdown,\n-                value: value.to_string(),\n-            })\n-        });\n-\n         let mut res = lsp_types::CompletionItem {\n             label: self.label().to_string(),\n             detail: self.detail().map(|it| it.to_string()),\n             filter_text: Some(self.lookup().to_string()),\n             kind: self.kind().map(|it| it.conv()),\n             text_edit: Some(text_edit),\n             additional_text_edits,\n-            documentation: documentation,\n+            documentation: self.documentation().map(|it| it.conv()),\n             ..Default::default()\n         };\n         res.insert_text_format = Some(match self.insert_text_format() {\n@@ -160,6 +153,16 @@ impl ConvWith for Range {\n     }\n }\n \n+impl Conv for ra_ide_api::Documentation {\n+    type Output = lsp_types::Documentation;\n+    fn conv(self) -> Documentation {\n+        Documentation::MarkupContent(MarkupContent {\n+            kind: MarkupKind::Markdown,\n+            value: crate::markdown::sanitize_markdown(self).into(),\n+        })\n+    }\n+}\n+\n impl ConvWith for TextEdit {\n     type Ctx = LineIndex;\n     type Output = Vec<lsp_types::TextEdit>;"}, {"sha": "5b5f3b948fddda5e85a686d812ee0dae055d299b", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -2,6 +2,7 @@ mod caps;\n mod cargo_target_spec;\n mod conv;\n mod main_loop;\n+mod markdown;\n mod project_model;\n pub mod req;\n mod server_world;"}, {"sha": "4f75f9a22930d00dfe4888452d3cf6e2794ee559", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -1,7 +1,7 @@\n use gen_lsp_server::ErrorCode;\n use lsp_types::{\n     CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity,\n-    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, Documentation, FoldingRange,\n+    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n     MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n     RenameParams, SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit,\n@@ -401,12 +401,9 @@ pub fn handle_signature_help(\n                 documentation: None,\n             })\n             .collect();\n-        let documentation = call_info.doc.map(|value| {\n-            Documentation::MarkupContent(MarkupContent {\n-                kind: MarkupKind::Markdown,\n-                value,\n-            })\n-        });\n+\n+        let documentation = call_info.doc.map(|it| it.conv());\n+\n         let sig_info = SignatureInformation {\n             label: call_info.label,\n             documentation,"}, {"sha": "f505755e866d681a36634966ce8b767e2058a9c8", "filename": "crates/ra_lsp_server/src/markdown.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88ba007cc2631799c2334753a7de807c548685e/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs?ref=b88ba007cc2631799c2334753a7de807c548685e", "patch": "@@ -0,0 +1,38 @@\n+use ra_ide_api::Documentation;\n+\n+pub(crate) fn sanitize_markdown(docs: Documentation) -> Documentation {\n+    let docs: String = docs.into();\n+\n+    // Massage markdown\n+    let mut processed_lines = Vec::new();\n+    let mut in_code_block = false;\n+    for line in docs.lines() {\n+        if line.starts_with(\"```\") {\n+            in_code_block = !in_code_block;\n+        }\n+\n+        let line = if in_code_block && line.starts_with(\"```\") && !line.contains(\"rust\") {\n+            \"```rust\".into()\n+        } else {\n+            line.to_string()\n+        };\n+\n+        processed_lines.push(line);\n+    }\n+\n+    Documentation::new(&processed_lines.join(\"\\n\"))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_codeblock_adds_rust() {\n+        let comment = \"```\\nfn some_rust() {}\\n```\";\n+        assert_eq!(\n+            sanitize_markdown(Documentation::new(comment)).contents(),\n+            \"```rust\\nfn some_rust() {}\\n```\"\n+        );\n+    }\n+}"}]}