{"sha": "31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZTViZTAyN2U3MTdlYWVkYjUxOTkyYTRjOTM4ZjhhYTllN2ZkZDE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-12T09:41:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-12T09:41:13Z"}, "message": "Rollup merge of #72096 - jonas-schievink:mirck-docs, r=matthewjasper\n\nMake MIR typeck use `LocalDefId` and fix docs\n\nThe docs on `fn type_check` were not in sync with the arguments it takes.\n\nr? @matthewjasper", "tree": {"sha": "af0f890b100ebbd02ed9751f8b8a3b76f9c5ee1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af0f890b100ebbd02ed9751f8b8a3b76f9c5ee1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeum86CRBK7hj4Ov3rIwAAdHIIAB4zcHp0g7QewTaedGWfshO1\nQ7mZ4fRwL42tFp5BRA332WuewfXylEJtcLahrZ3VQ66frTL6n4EUMdDy0hZRHkyd\nZ5yK1DF/zUAI91TqHRlI270Bw1Fwb9K56f//1Rf15+p3Nqg5KtEQqyriy/K5gXEH\nqK7fIiYEmlKrw/nI/xvkGTuv1Gz47gkXgG6JE2U3SZqFLHP4x4AdCNTa13KNU16W\nq/m9C+zuTEbko6WdtOobB/JORlbC2slnf86HdLslYM/LiVCwJf9R7SRfN0svcvxU\n8rPCKbc0RWq3BewTWGU5/Kf7YlM69m3Idol41bv5jfeLFTL41+W/Vd5JjfCI+KM=\n=IT3D\n-----END PGP SIGNATURE-----\n", "payload": "tree af0f890b100ebbd02ed9751f8b8a3b76f9c5ee1e\nparent 0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774\nparent a32463ade42d12de8da974796fb45a72e57721db\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589276473 +0200\ncommitter GitHub <noreply@github.com> 1589276473 +0200\n\nRollup merge of #72096 - jonas-schievink:mirck-docs, r=matthewjasper\n\nMake MIR typeck use `LocalDefId` and fix docs\n\nThe docs on `fn type_check` were not in sync with the arguments it takes.\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "html_url": "https://github.com/rust-lang/rust/commit/31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "html_url": "https://github.com/rust-lang/rust/commit/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774"}, {"sha": "a32463ade42d12de8da974796fb45a72e57721db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32463ade42d12de8da974796fb45a72e57721db", "html_url": "https://github.com/rust-lang/rust/commit/a32463ade42d12de8da974796fb45a72e57721db"}], "stats": {"total": 104, "additions": 50, "deletions": 54}, "files": [{"sha": "a3ee49651ba7b9a0de492f705a5bb20edfe45f73", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "patch": "@@ -209,7 +209,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         nll_errors,\n     } = nll::compute_regions(\n         infcx,\n-        def_id.to_def_id(),\n+        def_id,\n         free_regions,\n         body,\n         &promoted,"}, {"sha": "b820b79c47fe8c547298925afff63a5abf04845c", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Diagnostic;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{\n@@ -157,7 +157,7 @@ fn populate_polonius_move_facts(\n /// This may result in errors being reported.\n pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -272,7 +272,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     // Dump facts if requested.\n     let polonius_output = all_facts.and_then(|all_facts| {\n         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n-            let def_path = infcx.tcx.def_path(def_id);\n+            let def_path = infcx.tcx.def_path(def_id.to_def_id());\n             let dir_path =\n                 PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n@@ -292,7 +292,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n     // Solve the region constraints.\n     let (closure_region_requirements, nll_errors) =\n-        regioncx.solve(infcx, &body, def_id, polonius_output.clone());\n+        regioncx.solve(infcx, &body, def_id.to_def_id(), polonius_output.clone());\n \n     if !nll_errors.is_empty() {\n         // Suppress unhelpful extra errors in `infer_opaque_types`."}, {"sha": "edd2dc3c2de55acf0e0424511e9b329b8dcfb412", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "patch": "@@ -33,35 +33,37 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         //\n         // e.g., `|x: FxHashMap<_, &'static u32>| ...`\n         let user_provided_sig;\n-        if !self.tcx().is_closure(self.mir_def_id) {\n+        if !self.tcx().is_closure(self.mir_def_id.to_def_id()) {\n             user_provided_sig = None;\n         } else {\n-            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id.expect_local());\n-            user_provided_sig = match typeck_tables.user_provided_sigs.get(&self.mir_def_id) {\n-                None => None,\n-                Some(user_provided_poly_sig) => {\n-                    // Instantiate the canonicalized variables from\n-                    // user-provided signature (e.g., the `_` in the code\n-                    // above) with fresh variables.\n-                    let (poly_sig, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n-                        body.span,\n-                        &user_provided_poly_sig,\n-                    );\n-\n-                    // Replace the bound items in the fn sig with fresh\n-                    // variables, so that they represent the view from\n-                    // \"inside\" the closure.\n-                    Some(\n-                        self.infcx\n-                            .replace_bound_vars_with_fresh_vars(\n+            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id);\n+            user_provided_sig =\n+                match typeck_tables.user_provided_sigs.get(&self.mir_def_id.to_def_id()) {\n+                    None => None,\n+                    Some(user_provided_poly_sig) => {\n+                        // Instantiate the canonicalized variables from\n+                        // user-provided signature (e.g., the `_` in the code\n+                        // above) with fresh variables.\n+                        let (poly_sig, _) =\n+                            self.infcx.instantiate_canonical_with_fresh_inference_vars(\n                                 body.span,\n-                                LateBoundRegionConversionTime::FnCall,\n-                                &poly_sig,\n-                            )\n-                            .0,\n-                    )\n+                                &user_provided_poly_sig,\n+                            );\n+\n+                        // Replace the bound items in the fn sig with fresh\n+                        // variables, so that they represent the view from\n+                        // \"inside\" the closure.\n+                        Some(\n+                            self.infcx\n+                                .replace_bound_vars_with_fresh_vars(\n+                                    body.span,\n+                                    LateBoundRegionConversionTime::FnCall,\n+                                    &poly_sig,\n+                                )\n+                                .0,\n+                        )\n+                    }\n                 }\n-            }\n         };\n \n         debug!(\n@@ -120,7 +122,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Err(terr) = self.eq_opaque_type_and_type(\n             mir_output_ty,\n             normalized_output_ty,\n-            self.mir_def_id,\n+            self.mir_def_id.to_def_id(),\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n         ) {\n@@ -143,7 +145,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n                 user_provided_output_ty,\n-                self.mir_def_id,\n+                self.mir_def_id.to_def_id(),\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n             ) {"}, {"sha": "9282a0a06b480e3381022ea97b9c87bc8c07c2a0", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5be027e717eaedb51992a4c938f8aa9e7fdd1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "patch": "@@ -108,26 +108,22 @@ mod relate_tys;\n ///\n /// - `infcx` -- inference context to use\n /// - `param_env` -- parameter environment to use for trait solving\n-/// - `mir` -- MIR to type-check\n-/// - `mir_def_id` -- DefId from which the MIR is derived (must be local)\n-/// - `region_bound_pairs` -- the implied outlives obligations between type parameters\n-///   and lifetimes (e.g., `&'a T` implies `T: 'a`)\n-/// - `implicit_region_bound` -- a region which all generic parameters are assumed\n-///   to outlive; should represent the fn body\n-/// - `input_tys` -- fully liberated, but **not** normalized, expected types of the arguments;\n-///   the types of the input parameters found in the MIR itself will be equated with these\n-/// - `output_ty` -- fully liberated, but **not** normalized, expected return type;\n-///   the type for the RETURN_PLACE will be equated with this\n-/// - `liveness` -- results of a liveness computation on the MIR; used to create liveness\n-///   constraints for the regions in the types of variables\n+/// - `body` -- MIR body to type-check\n+/// - `promoted` -- map of promoted constants within `body`\n+/// - `mir_def_id` -- `LocalDefId` from which the MIR is derived\n+/// - `universal_regions` -- the universal regions from `body`s function signature\n+/// - `location_table` -- MIR location map of `body`\n+/// - `borrow_set` -- information about borrows occurring in `body`\n+/// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts\n /// - `flow_inits` -- results of a maybe-init dataflow analysis\n /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n+/// - `elements` -- MIR region map\n pub(crate) fn type_check<'mir, 'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n     borrow_set: &BorrowSet<'tcx>,\n@@ -191,7 +187,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n \n fn type_check_internal<'a, 'tcx, R>(\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &'a Body<'tcx>,\n     promoted: &'a IndexVec<Promoted, Body<'tcx>>,\n@@ -271,7 +267,7 @@ struct TypeVerifier<'a, 'b, 'tcx> {\n     body: &'b Body<'tcx>,\n     promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n     last_span: Span,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     errors_reported: bool,\n }\n \n@@ -815,7 +811,7 @@ struct TypeChecker<'a, 'tcx> {\n     /// User type annotations are shared between the main MIR and the MIR of\n     /// all of the promoted items.\n     user_type_annotations: &'a CanonicalUserTypeAnnotations<'tcx>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n@@ -963,7 +959,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn new(\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         body: &'a Body<'tcx>,\n-        mir_def_id: DefId,\n+        mir_def_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: ty::Region<'tcx>,\n@@ -1142,7 +1138,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // When you have `let x: impl Foo = ...` in a closure,\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n-                let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id);\n+                let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id.to_def_id());\n                 return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n             } else {\n                 return Err(terr);\n@@ -1994,7 +1990,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n                             let ccx = ConstCx::new_with_param_env(\n                                 tcx,\n-                                self.mir_def_id.expect_local(),\n+                                self.mir_def_id,\n                                 body,\n                                 self.param_env,\n                             );\n@@ -2010,9 +2006,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                 &traits::Obligation::new(\n                                     ObligationCause::new(\n                                         span,\n-                                        self.tcx()\n-                                            .hir()\n-                                            .local_def_id_to_hir_id(self.mir_def_id.expect_local()),\n+                                        self.tcx().hir().local_def_id_to_hir_id(self.mir_def_id),\n                                         traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                     ),\n                                     self.param_env,"}]}