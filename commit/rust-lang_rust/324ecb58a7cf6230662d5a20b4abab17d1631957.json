{"sha": "324ecb58a7cf6230662d5a20b4abab17d1631957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNGVjYjU4YTdjZjYyMzA2NjJkNWEyMGI0YWJhYjE3ZDE2MzE5NTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-28T01:22:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-28T02:34:42Z"}, "message": "Add libc module to libcore and utility file to help generate it.", "tree": {"sha": "5f2bf89d6b5a51bccdc8de5474d72a605dda704f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f2bf89d6b5a51bccdc8de5474d72a605dda704f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/324ecb58a7cf6230662d5a20b4abab17d1631957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/324ecb58a7cf6230662d5a20b4abab17d1631957", "html_url": "https://github.com/rust-lang/rust/commit/324ecb58a7cf6230662d5a20b4abab17d1631957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/324ecb58a7cf6230662d5a20b4abab17d1631957/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61691c2428b29a250fb7eb3dd1e31e717da4773f", "url": "https://api.github.com/repos/rust-lang/rust/commits/61691c2428b29a250fb7eb3dd1e31e717da4773f", "html_url": "https://github.com/rust-lang/rust/commit/61691c2428b29a250fb7eb3dd1e31e717da4773f"}], "stats": {"total": 1151, "additions": 1144, "deletions": 7}, "files": [{"sha": "5ab0c74f180235c95b0b5dcf92b015cd2ae59b54", "filename": "src/etc/libc.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Fetc%2Flibc.c", "raw_url": "https://github.com/rust-lang/rust/raw/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Fetc%2Flibc.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flibc.c?ref=324ecb58a7cf6230662d5a20b4abab17d1631957", "patch": "@@ -0,0 +1,237 @@\n+/*\n+ * This calculates the platform-variable portion of the libc module.\n+ * Move code in here only as you discover it is platform-variable.\n+ *\n+ */\n+\n+ /* c95 */\n+#include <stddef.h>\n+#include <time.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <limits.h>\n+\n+/* c99 */\n+#include <inttypes.h>\n+\n+/* posix */\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+\n+#define S(T) ((((T)-1)<0) ? 'i' : 'u')\n+#define B(T) (((int)sizeof(T)) * CHAR_BIT)\n+#define put_type(N,T) \\\n+        printf(\"        type %s = %c%d;\\n\", N, S(T), B(T))\n+\n+#define CT(T) ((((T)-1)<0) ? \"int\" : \"uint\")\n+#define CS(T) ((((T)-1)<0) ? \"\" : \"_u\")\n+#define put_const(N,T)                            \\\n+        printf(\"        const %s : %s = %d%s;\\n\", \\\n+               #N, CT(T), N, CS(T))\n+\n+void c95_types() {\n+  printf(\"    mod c95 {\\n\");\n+\n+  put_type(\"c_char\", char);\n+  put_type(\"c_schar\", signed char);\n+  put_type(\"c_uchar\", unsigned char);\n+\n+  put_type(\"c_short\", short);\n+  put_type(\"c_ushort\", unsigned short);\n+\n+  put_type(\"c_int\", int);\n+  put_type(\"c_uint\", unsigned int);\n+\n+  put_type(\"c_long\", long);\n+  put_type(\"c_ulong\", unsigned long);\n+\n+  put_type(\"size_t\", size_t);\n+  put_type(\"ptrdiff_t\", ptrdiff_t);\n+\n+  put_type(\"clock_t\", clock_t);\n+  put_type(\"time_t\", time_t);\n+\n+  printf(\"    }\\n\");\n+}\n+\n+void c99_types() {\n+  printf(\"    mod c99 {\\n\");\n+\n+  put_type(\"c_longlong\", long long);\n+  put_type(\"c_ulonglong\", unsigned long long);\n+\n+  put_type(\"intptr_t\", intptr_t);\n+  put_type(\"uintptr_t\", uintptr_t);\n+\n+  printf(\"    }\\n\");\n+}\n+\n+void posix88_types() {\n+  printf(\"    mod posix88 {\\n\");\n+\n+  put_type(\"off_t\", off_t);\n+  put_type(\"dev_t\", dev_t);\n+  put_type(\"ino_t\", ino_t);\n+  put_type(\"pid_t\", pid_t);\n+#ifndef __WIN32__\n+  put_type(\"uid_t\", uid_t);\n+  put_type(\"gid_t\", gid_t);\n+#endif\n+  put_type(\"useconds_t\", useconds_t);\n+  put_type(\"mode_t\", mode_t);\n+\n+  put_type(\"ssize_t\", ssize_t);\n+\n+  printf(\"    }\\n\");\n+}\n+\n+void extra_types() {\n+  printf(\"    mod extra {\\n\");\n+  printf(\"    }\\n\");\n+}\n+\n+\n+void c95_consts() {\n+  printf(\"    mod c95 {\\n\");\n+\n+  put_const(EXIT_FAILURE, int);\n+  put_const(EXIT_SUCCESS, int);\n+  put_const(RAND_MAX, int);\n+\n+  put_const(EOF, int);\n+  put_const(SEEK_SET, int);\n+  put_const(SEEK_CUR, int);\n+  put_const(SEEK_END, int);\n+\n+  put_const(_IOFBF, int);\n+  put_const(_IONBF, int);\n+  put_const(_IOLBF, int);\n+\n+  put_const(BUFSIZ, size_t);\n+  put_const(FOPEN_MAX, size_t);\n+  put_const(FILENAME_MAX, size_t);\n+  put_const(L_tmpnam, size_t);\n+  put_const(TMP_MAX, size_t);\n+\n+  printf(\"    }\\n\");\n+}\n+\n+\n+void posix88_consts() {\n+  printf(\"    mod posix88 {\\n\");\n+  put_const(O_RDONLY, int);\n+  put_const(O_WRONLY, int);\n+  put_const(O_RDWR, int);\n+  put_const(O_APPEND, int);\n+  put_const(O_CREAT, int);\n+  put_const(O_EXCL, int);\n+  put_const(O_TRUNC, int);\n+\n+  put_const(S_IFIFO, int);\n+  put_const(S_IFCHR, int);\n+  put_const(S_IFBLK, int);\n+  put_const(S_IFDIR, int);\n+  put_const(S_IFREG, int);\n+  put_const(S_IFMT, int);\n+\n+  put_const(S_IEXEC, int);\n+  put_const(S_IWRITE, int);\n+  put_const(S_IREAD, int);\n+\n+  put_const(S_IRWXU, int);\n+  put_const(S_IXUSR, int);\n+  put_const(S_IWUSR, int);\n+  put_const(S_IRUSR, int);\n+\n+#ifdef F_OK\n+  put_const(F_OK, int);\n+#endif\n+#ifdef R_OK\n+  put_const(R_OK, int);\n+#endif\n+#ifdef W_OK\n+  put_const(W_OK, int);\n+#endif\n+#ifdef X_OK\n+  put_const(X_OK, int);\n+#endif\n+\n+#ifdef STDERR_FILENO\n+  put_const(STDERR_FILENO, int);\n+#endif\n+#ifdef STDIN_FILENO\n+  put_const(STDIN_FILENO, int);\n+#endif\n+#ifdef STDOUT_FILENO\n+  put_const(STDOUT_FILENO, int);\n+#endif\n+\n+#ifdef F_LOCK\n+  put_const(F_LOCK, int);\n+#endif\n+\n+#ifdef F_TEST\n+  put_const(F_TEST, int);\n+#endif\n+\n+#ifdef F_TLOCK\n+  put_const(F_TLOCK, int);\n+#endif\n+\n+#ifdef F_ULOCK\n+  put_const(F_ULOCK, int);\n+#endif\n+\n+  printf(\"    }\\n\");\n+}\n+\n+void extra_consts() {\n+  printf(\"    mod extra {\\n\");\n+#ifdef O_RSYNC\n+  put_const(O_RSYNC, int);\n+#endif\n+\n+#ifdef O_DSYNC\n+  put_const(O_DSYNC, int);\n+#endif\n+\n+#ifdef O_SYNC\n+  put_const(O_SYNC, int);\n+#endif\n+\n+#ifdef O_TEXT\n+  put_const(O_TEXT, int);\n+#endif\n+\n+#ifdef O_BINARY\n+  put_const(O_BINARY, int);\n+#endif\n+\n+#ifdef O_IRUSR\n+  put_const(O_IRUSR, int);\n+#endif\n+\n+#ifdef O_IWUSR\n+  put_const(O_IWUSR, int);\n+#endif\n+\n+  printf(\"    }\\n\");\n+}\n+\n+int main() {\n+  printf(\"mod types {\");\n+  c95_types();\n+  c99_types();\n+  posix88_types();\n+  extra_types();\n+  printf(\"}\\n\");\n+\n+  printf(\"mod consts {\\n\");\n+  c95_consts();\n+  posix88_consts();\n+  extra_consts();\n+  printf(\"}\\n\");\n+}\n+"}, {"sha": "37e7fe6ec02c4d890278ddcda1a2ebf32ae2158c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=324ecb58a7cf6230662d5a20b4abab17d1631957", "patch": "@@ -81,6 +81,7 @@ mod to_str;\n \n // Runtime and language-primitive support\n \n+mod libc;\n mod ctypes;\n mod math;\n mod cmath;"}, {"sha": "60ede88c89aee5f5c095758ad704c2ef95cffbf5", "filename": "src/libcore/libc.rs", "status": "added", "additions": 904, "deletions": 0, "changes": 904, "blob_url": "https://github.com/rust-lang/rust/blob/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=324ecb58a7cf6230662d5a20b4abab17d1631957", "patch": "@@ -0,0 +1,904 @@\n+//\n+// We consider the following specs reasonably normative with respect\n+// to interoperating with the C standard library (libc/msvcrt):\n+//\n+//   - ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n+//   - ISO 9899:1999 ('C99' or 'C9x').\n+//   - ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n+//   - ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008').\n+//\n+// Despite having several names each, these are *reasonably* coherent\n+// point-in-time, list-of-definition sorts of specs. You can get each under a\n+// variety of names but will wind up with the same definition in each case.\n+//\n+// Our interface to these libraries is complicated by the non-universality of\n+// conformance to any of them. About the only thing universally supported is\n+// the first (C95), beyond that definitions quickly become absent on various\n+// platforms.\n+//\n+// We therefore wind up dividing our module-space up (mostly for the sake of\n+// sanity while editing) into definitions common-to-all (held in modules named\n+// c95, c99, posix88, and posix08) and definitions that appear only on *some*\n+// platforms (named 'extra').\n+//\n+\n+// Initial glob-exports mean that all the contents of all the modules\n+// wind up exported, if you're interested in writing platform-specific code.\n+\n+// FIXME: change these to glob-exports when sufficiently supported.\n+\n+import types::common::c95::*;\n+import types::common::posix88::*;\n+import types::os::arch::c95::*;\n+import types::os::arch::c99::*;\n+import types::os::arch::posix88::*;\n+import types::os::arch::extra::*;\n+\n+import consts::os::c95::*;\n+import consts::os::posix88::*;\n+import consts::os::extra::*;\n+\n+import funcs::c95::ctype::*;\n+import funcs::c95::stdio::*;\n+import funcs::c95::stdlib::*;\n+import funcs::c95::string::*;\n+\n+import funcs::posix88::stat::*;\n+import funcs::posix88::stdio::*;\n+import funcs::posix88::fcntl::*;\n+import funcs::posix88::dirent::*;\n+import funcs::posix88::unistd::*;\n+\n+// Explicit export lists for the intersection (provided here) mean that\n+// you can write more-platform-agnostic code if you stick to just these\n+// symbols.\n+\n+export c_double, c_void, FILE, fpos_t;\n+export DIR, dirent;\n+export c_char, c_schar, c_uchar;\n+export c_short, c_ushort, c_int, c_uint, c_long, c_ulong;\n+export size_t, ptrdiff_t, clock_t, time_t;\n+export c_longlong, c_ulonglong, intptr_t, uintptr_t;\n+export off_t, dev_t, ino_t, pid_t, mode_t, ssize_t;\n+\n+export isalnum, isalpha, iscntrl, isdigit, islower, isprint, ispunct,\n+       isspace, isupper, isxdigit, tolower, toupper;\n+\n+export fopen, freopen, fflush, fclose, remove, tmpfile, setvbuf, setbuf,\n+       fgetc, fgets, fputc, fputs, puts, ungetc, fread, fwrite, fseek, ftell,\n+       rewind, fgetpos, fsetpos, feof, ferror, perror;\n+\n+export abs, labs, atof, atoi, strtod, strtol, strtoul, calloc, malloc,\n+       realloc, free, abort, exit, system, getenv, rand, srand;\n+\n+export strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcoll, strchr,\n+       strrchr, strspn, strcspn, strpbrk, strstr, strlen, strerror, strtok,\n+       strxfrm, memcpy, memmove, memcmp, memchr, memset;\n+\n+export chmod, mkdir;\n+export popen, pclose;\n+export open, creat;\n+export access, chdir, close, dup, dup2, execv, execve, execvp, getcwd,\n+       getpid, isatty, lseek, pipe, read, rmdir, unlink, write;\n+\n+\n+mod types {\n+\n+    // Types tend to vary *per architecture* so we pull their definitions out\n+    // into this module.\n+\n+    // Standard types that are opaque or common, so are not per-target.\n+    mod common {\n+        mod c95 {\n+            type c_double = float;\n+            enum c_void {}\n+            enum FILE {}\n+            enum fpos_t {}\n+        }\n+\n+        mod posix88 {\n+            enum DIR {}\n+            enum dirent {}\n+        }\n+    }\n+\n+    // Standard types that are scalar but vary by OS and arch.\n+\n+    #[cfg(target_os = \"linux\")]\n+    mod os {\n+        #[cfg(target_arch = \"x86\")]\n+        mod arch {\n+            mod c95 {\n+                type c_char = i8;\n+                type c_schar = i8;\n+                type c_uchar = u8;\n+                type c_short = i16;\n+                type c_ushort = u16;\n+                type c_int = i32;\n+                type c_uint = u32;\n+                type c_long = i32;\n+                type c_ulong = u32;\n+                type size_t = u32;\n+                type ptrdiff_t = i32;\n+                type clock_t = i32;\n+                type time_t = i32;\n+            }\n+            mod c99 {\n+                type c_longlong = i64;\n+                type c_ulonglong = u64;\n+                type intptr_t = i32;\n+                type uintptr_t = u32;\n+            }\n+            mod posix88 {\n+                type off_t = i32;\n+                type dev_t = u64;\n+                type ino_t = u32;\n+                type pid_t = i32;\n+                type uid_t = u32;\n+                type gid_t = u32;\n+                type useconds_t = u32;\n+                type mode_t = u32;\n+                type ssize_t = i32;\n+            }\n+            mod extra {\n+            }\n+        }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        mod arch {\n+            mod c95 {\n+                type c_char = i8;\n+                type c_schar = i8;\n+                type c_uchar = u8;\n+                type c_short = i16;\n+                type c_ushort = u16;\n+                type c_int = i32;\n+                type c_uint = u32;\n+                type c_long = i64;\n+                type c_ulong = u64;\n+                type size_t = u64;\n+                type ptrdiff_t = i64;\n+                type clock_t = i64;\n+                type time_t = i64;\n+            }\n+            mod c99 {\n+                type c_longlong = i64;\n+                type c_ulonglong = u64;\n+                type intptr_t = i64;\n+                type uintptr_t = u64;\n+            }\n+            mod posix88 {\n+                type off_t = i64;\n+                type dev_t = u64;\n+                type ino_t = u64;\n+                type pid_t = i32;\n+                type uid_t = u32;\n+                type gid_t = u32;\n+                type useconds_t = u32;\n+                type mode_t = u32;\n+                type ssize_t = i64;\n+            }\n+            mod extra {\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_os = \"freebsd\")]\n+    mod os {\n+        #[cfg(target_arch = \"x86_64\")]\n+        mod arch {\n+            mod c95 {\n+                type c_char = i8;\n+                type c_schar = i8;\n+                type c_uchar = u8;\n+                type c_short = i16;\n+                type c_ushort = u16;\n+                type c_int = i32;\n+                type c_uint = u32;\n+                type c_long = i64;\n+                type c_ulong = u64;\n+                type size_t = u64;\n+                type ptrdiff_t = i64;\n+                type clock_t = i32;\n+                type time_t = i64;\n+            }\n+            mod c99 {\n+                type c_longlong = i64;\n+                type c_ulonglong = u64;\n+                type intptr_t = i64;\n+                type uintptr_t = u64;\n+            }\n+            mod posix88 {\n+                type off_t = i64;\n+                type dev_t = u32;\n+                type ino_t = u32;\n+                type pid_t = i32;\n+                type uid_t = u32;\n+                type gid_t = u32;\n+                type useconds_t = u32;\n+                type mode_t = u16;\n+                type ssize_t = i64;\n+            }\n+            mod extra {\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_os = \"win32\")]\n+    mod os {\n+        #[cfg(target_arch = \"x86\")]\n+        mod arch {\n+            mod c95 {\n+                type c_char = i8;\n+                type c_schar = i8;\n+                type c_uchar = u8;\n+                type c_short = i16;\n+                type c_ushort = u16;\n+                type c_int = i32;\n+                type c_uint = u32;\n+                type c_long = i32;\n+                type c_ulong = u32;\n+                type size_t = u32;\n+                type ptrdiff_t = i32;\n+                type clock_t = i32;\n+                type time_t = i32;\n+            }\n+            mod c99 {\n+                type c_longlong = i64;\n+                type c_ulonglong = u64;\n+                type intptr_t = i32;\n+                type uintptr_t = u32;\n+            }\n+            mod posix88 {\n+                type off_t = i32;\n+                type dev_t = u32;\n+                type ino_t = i16;\n+                type pid_t = i32;\n+                type useconds_t = u32;\n+                type mode_t = u16;\n+                type ssize_t = i32;\n+            }\n+            mod extra {\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    mod os {\n+        #[cfg(target_arch = \"x86\")]\n+        mod arch {\n+            mod c95 {\n+                type c_char = i8;\n+                type c_schar = i8;\n+                type c_uchar = u8;\n+                type c_short = i16;\n+                type c_ushort = u16;\n+                type c_int = i32;\n+                type c_uint = u32;\n+                type c_long = i32;\n+                type c_ulong = u32;\n+                type size_t = u32;\n+                type ptrdiff_t = i32;\n+                type clock_t = u32;\n+                type time_t = i32;\n+            }\n+            mod c99 {\n+                type c_longlong = i64;\n+                type c_ulonglong = u64;\n+                type intptr_t = i32;\n+                type uintptr_t = u32;\n+            }\n+            mod posix88 {\n+                type off_t = i64;\n+                type dev_t = i32;\n+                type ino_t = u64;\n+                type pid_t = i32;\n+                type uid_t = u32;\n+                type gid_t = u32;\n+                type useconds_t = u32;\n+                type mode_t = u16;\n+                type ssize_t = i32;\n+            }\n+            mod extra {\n+            }\n+        }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        mod arch {\n+            mod c95 {\n+                type c_char = i8;\n+                type c_schar = i8;\n+                type c_uchar = u8;\n+                type c_short = i16;\n+                type c_ushort = u16;\n+                type c_int = i32;\n+                type c_uint = u32;\n+                type c_long = i64;\n+                type c_ulong = u64;\n+                type size_t = u64;\n+                type ptrdiff_t = i64;\n+                type clock_t = u64;\n+                type time_t = i64;\n+            }\n+            mod c99 {\n+                type c_longlong = i64;\n+                type c_ulonglong = u64;\n+                type intptr_t = i64;\n+                type uintptr_t = u64;\n+            }\n+            mod posix88 {\n+                type off_t = i64;\n+                type dev_t = i32;\n+                type ino_t = u64;\n+                type pid_t = i32;\n+                type uid_t = u32;\n+                type gid_t = u32;\n+                type useconds_t = u32;\n+                type mode_t = u16;\n+                type ssize_t = i64;\n+            }\n+            mod extra {\n+            }\n+        }\n+    }\n+}\n+\n+mod consts {\n+\n+    // Consts tend to vary per OS so we pull their definitions out\n+    // into this module.\n+\n+    #[cfg(target_os = \"win32\")]\n+    mod os {\n+        mod c95 {\n+            const EXIT_FAILURE : int = 1;\n+            const EXIT_SUCCESS : int = 0;\n+            const RAND_MAX : int = 32767;\n+            const EOF : int = -1;\n+            const SEEK_SET : int = 0;\n+            const SEEK_CUR : int = 1;\n+            const SEEK_END : int = 2;\n+            const _IOFBF : int = 0;\n+            const _IONBF : int = 4;\n+            const _IOLBF : int = 64;\n+            const BUFSIZ : uint = 512_u;\n+            const FOPEN_MAX : uint = 20_u;\n+            const FILENAME_MAX : uint = 260_u;\n+            const L_tmpnam : uint = 16_u;\n+            const TMP_MAX : uint = 32767_u;\n+        }\n+        mod posix88 {\n+            const O_RDONLY : int = 0;\n+            const O_WRONLY : int = 1;\n+            const O_RDWR : int = 2;\n+            const O_APPEND : int = 8;\n+            const O_CREAT : int = 256;\n+            const O_EXCL : int = 1024;\n+            const O_TRUNC : int = 512;\n+            const S_IFIFO : int = 4096;\n+            const S_IFCHR : int = 8192;\n+            const S_IFBLK : int = 12288;\n+            const S_IFDIR : int = 16384;\n+            const S_IFREG : int = 32768;\n+            const S_IFMT : int = 61440;\n+            const S_IEXEC : int = 64;\n+            const S_IWRITE : int = 128;\n+            const S_IREAD : int = 256;\n+            const S_IRWXU : int = 448;\n+            const S_IXUSR : int = 64;\n+            const S_IWUSR : int = 128;\n+            const S_IRUSR : int = 256;\n+            const F_OK : int = 0;\n+            const R_OK : int = 4;\n+            const W_OK : int = 2;\n+            const X_OK : int = 1;\n+            const STDERR_FILENO : int = 2;\n+            const STDIN_FILENO : int = 0;\n+            const STDOUT_FILENO : int = 1;\n+        }\n+        mod extra {\n+            const O_TEXT : int = 16384;\n+            const O_BINARY : int = 32768;\n+        }\n+    }\n+\n+\n+    #[cfg(target_os = \"linux\")]\n+    mod os {\n+        mod c95 {\n+            const EXIT_FAILURE : int = 1;\n+            const EXIT_SUCCESS : int = 0;\n+            const RAND_MAX : int = 2147483647;\n+            const EOF : int = -1;\n+            const SEEK_SET : int = 0;\n+            const SEEK_CUR : int = 1;\n+            const SEEK_END : int = 2;\n+            const _IOFBF : int = 0;\n+            const _IONBF : int = 2;\n+            const _IOLBF : int = 1;\n+            const BUFSIZ : uint = 8192_u;\n+            const FOPEN_MAX : uint = 16_u;\n+            const FILENAME_MAX : uint = 4096_u;\n+            const L_tmpnam : uint = 20_u;\n+            const TMP_MAX : uint = 238328_u;\n+        }\n+        mod posix88 {\n+            const O_RDONLY : int = 0;\n+            const O_WRONLY : int = 1;\n+            const O_RDWR : int = 2;\n+            const O_APPEND : int = 1024;\n+            const O_CREAT : int = 64;\n+            const O_EXCL : int = 128;\n+            const O_TRUNC : int = 512;\n+            const S_IFIFO : int = 4096;\n+            const S_IFCHR : int = 8192;\n+            const S_IFBLK : int = 24576;\n+            const S_IFDIR : int = 16384;\n+            const S_IFREG : int = 32768;\n+            const S_IFMT : int = 61440;\n+            const S_IEXEC : int = 64;\n+            const S_IWRITE : int = 128;\n+            const S_IREAD : int = 256;\n+            const S_IRWXU : int = 448;\n+            const S_IXUSR : int = 64;\n+            const S_IWUSR : int = 128;\n+            const S_IRUSR : int = 256;\n+            const F_OK : int = 0;\n+            const R_OK : int = 4;\n+            const W_OK : int = 2;\n+            const X_OK : int = 1;\n+            const F_LOCK : int = 1;\n+            const F_TEST : int = 3;\n+            const F_TLOCK : int = 2;\n+            const F_ULOCK : int = 0;\n+        }\n+        mod extra {\n+            const O_RSYNC : int = 1052672;\n+            const O_DSYNC : int = 4096;\n+            const O_SYNC : int = 1052672;\n+        }\n+    }\n+\n+    #[cfg(target_os = \"freebsd\")]\n+    mod os {\n+        mod c95 {\n+            const EXIT_FAILURE : int = 1;\n+            const EXIT_SUCCESS : int = 0;\n+            const RAND_MAX : int = 2147483647;\n+            const EOF : int = -1;\n+            const SEEK_SET : int = 0;\n+            const SEEK_CUR : int = 1;\n+            const SEEK_END : int = 2;\n+            const _IOFBF : int = 0;\n+            const _IONBF : int = 2;\n+            const _IOLBF : int = 1;\n+            const BUFSIZ : uint = 1024_u;\n+            const FOPEN_MAX : uint = 20_u;\n+            const FILENAME_MAX : uint = 1024_u;\n+            const L_tmpnam : uint = 1024_u;\n+            const TMP_MAX : uint = 308915776_u;\n+        }\n+        mod posix88 {\n+            const O_RDONLY : int = 0;\n+            const O_WRONLY : int = 1;\n+            const O_RDWR : int = 2;\n+            const O_APPEND : int = 8;\n+            const O_CREAT : int = 512;\n+            const O_EXCL : int = 2048;\n+            const O_TRUNC : int = 1024;\n+            const S_IFIFO : int = 4096;\n+            const S_IFCHR : int = 8192;\n+            const S_IFBLK : int = 24576;\n+            const S_IFDIR : int = 16384;\n+            const S_IFREG : int = 32768;\n+            const S_IFMT : int = 61440;\n+            const S_IEXEC : int = 64;\n+            const S_IWRITE : int = 128;\n+            const S_IREAD : int = 256;\n+            const S_IRWXU : int = 448;\n+            const S_IXUSR : int = 64;\n+            const S_IWUSR : int = 128;\n+            const S_IRUSR : int = 256;\n+            const F_OK : int = 0;\n+            const R_OK : int = 4;\n+            const W_OK : int = 2;\n+            const X_OK : int = 1;\n+            const STDERR_FILENO : int = 2;\n+            const STDIN_FILENO : int = 0;\n+            const STDOUT_FILENO : int = 1;\n+            const F_LOCK : int = 1;\n+            const F_TEST : int = 3;\n+            const F_TLOCK : int = 2;\n+            const F_ULOCK : int = 0;\n+        }\n+        mod extra {\n+            const O_SYNC : int = 128;\n+        }\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    mod os {\n+        mod c95 {\n+            const EXIT_FAILURE : int = 1;\n+            const EXIT_SUCCESS : int = 0;\n+            const RAND_MAX : int = 2147483647;\n+            const EOF : int = -1;\n+            const SEEK_SET : int = 0;\n+            const SEEK_CUR : int = 1;\n+            const SEEK_END : int = 2;\n+            const _IOFBF : int = 0;\n+            const _IONBF : int = 2;\n+            const _IOLBF : int = 1;\n+            const BUFSIZ : uint = 1024_u;\n+            const FOPEN_MAX : uint = 20_u;\n+            const FILENAME_MAX : uint = 1024_u;\n+            const L_tmpnam : uint = 1024_u;\n+            const TMP_MAX : uint = 308915776_u;\n+        }\n+        mod posix88 {\n+            const O_RDONLY : int = 0;\n+            const O_WRONLY : int = 1;\n+            const O_RDWR : int = 2;\n+            const O_APPEND : int = 8;\n+            const O_CREAT : int = 512;\n+            const O_EXCL : int = 2048;\n+            const O_TRUNC : int = 1024;\n+            const S_IFIFO : int = 4096;\n+            const S_IFCHR : int = 8192;\n+            const S_IFBLK : int = 24576;\n+            const S_IFDIR : int = 16384;\n+            const S_IFREG : int = 32768;\n+            const S_IFMT : int = 61440;\n+            const S_IEXEC : int = 64;\n+            const S_IWRITE : int = 128;\n+            const S_IREAD : int = 256;\n+            const S_IRWXU : int = 448;\n+            const S_IXUSR : int = 64;\n+            const S_IWUSR : int = 128;\n+            const S_IRUSR : int = 256;\n+            const F_OK : int = 0;\n+            const R_OK : int = 4;\n+            const W_OK : int = 2;\n+            const X_OK : int = 1;\n+            const STDERR_FILENO : int = 2;\n+            const STDIN_FILENO : int = 0;\n+            const STDOUT_FILENO : int = 1;\n+            const F_LOCK : int = 1;\n+            const F_TEST : int = 3;\n+            const F_TLOCK : int = 2;\n+            const F_ULOCK : int = 0;\n+        }\n+        mod extra {\n+            const O_DSYNC : int = 4194304;\n+            const O_SYNC : int = 128;\n+        }\n+    }\n+}\n+\n+\n+mod funcs {\n+\n+    // Thankfull most of c95 is universally available and does not vary by OS\n+    // or anything. The same is not true of POSIX.\n+\n+    mod c95 {\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod ctype {\n+            fn isalnum(c: c_int) -> c_int;\n+            fn isalpha(c: c_int) -> c_int;\n+            fn iscntrl(c: c_int) -> c_int;\n+            fn isdigit(c: c_int) -> c_int;\n+            fn isgraph(c: c_int) -> c_int;\n+            fn islower(c: c_int) -> c_int;\n+            fn isprint(c: c_int) -> c_int;\n+            fn ispunct(c: c_int) -> c_int;\n+            fn isspace(c: c_int) -> c_int;\n+            fn isupper(c: c_int) -> c_int;\n+            fn isxdigit(c: c_int) -> c_int;\n+            fn tolower(c: c_int) -> c_int;\n+            fn toupper(c: c_int) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod stdio {\n+\n+            fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n+            fn freopen(filename: *c_char, mode: *c_char,\n+                       file: *FILE) -> *FILE;\n+            fn fflush(file: *FILE) -> c_int;\n+            fn fclose(file: *FILE) -> c_int;\n+            fn remove(filename: *c_char) -> c_int;\n+            fn rename(oldname: *c_char, newname: *c_char) -> c_int;\n+            fn tmpfile() -> *FILE;\n+            fn setvbuf(stream: *FILE, buffer: *c_char,\n+                       mode: c_int, size: size_t) -> c_int;\n+            fn setbuf(stream: *FILE, buf: *c_char);\n+            // Omitted: printf and scanf variants.\n+            fn fgetc(stream: *FILE) -> c_int;\n+            fn fgets(buf: *c_char, n: c_int, stream: *FILE) -> *c_char;\n+            fn fputc(c: c_int, stream: *FILE) -> c_int;\n+            fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n+            // Omitted: getc, getchar (might be macros).\n+\n+            // Omitted: gets, so ridiculously unsafe that it should not\n+            // survive.\n+\n+            // Omitted: putc, putchar (might be macros).\n+            fn puts(s: *c_char) -> c_int;\n+            fn ungetc(c: c_int, stream: *FILE) -> c_int;\n+            fn fread(ptr: *c_void, size: size_t,\n+                     nobj: size_t, stream: *FILE) -> size_t;\n+            fn fwrite(ptr: *c_void, size: size_t,\n+                      nobj: size_t, stream: *FILE) -> size_t;\n+            fn fseek(stream: *FILE, offset: c_long, whence: c_int) -> c_int;\n+            fn ftell(stream: *FILE) -> c_long;\n+            fn rewind(stream: *FILE);\n+            fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+            fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+            fn feof(stream: *FILE) -> c_int;\n+            fn ferror(stream: *FILE) -> c_int;\n+            fn perror(s: *c_char);\n+        }\n+\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod stdlib {\n+            fn abs(i: c_int) -> c_int;\n+            fn labs(i: c_long) -> c_long;\n+            // Omitted: div, ldiv (return type incomplete).\n+            fn atof(s: *c_char) -> c_double;\n+            fn atoi(s: *c_char) -> c_int;\n+            fn strtod(s: *c_char, endp: **c_char) -> c_double;\n+            fn strtol(s: *c_char, endp: **c_char, base: c_int) -> c_long;\n+            fn strtoul(s: *c_char, endp: **c_char, base: c_int) -> c_ulong;\n+            fn calloc(nobj: size_t, size: size_t) -> *c_void;\n+            fn malloc(size: size_t) -> *c_void;\n+            fn realloc(p: *c_void, size: size_t) -> *c_void;\n+            fn free(p: *c_void);\n+            fn abort() -> !;\n+            fn exit(status: c_int) -> !;\n+            // Omitted: atexit.\n+            fn system(s: *c_char) -> c_int;\n+            fn getenv(s: *c_char) -> *c_char;\n+            // Omitted: bsearch, qsort\n+            fn rand() -> c_int;\n+            fn srand(seed: c_uint);\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod string {\n+\n+            fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n+            fn strncpy(dst: *c_char, src: *c_char, n: size_t) -> *c_char;\n+            fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n+            fn strncat(s: *c_char, ct: *c_char, n: size_t) -> *c_char;\n+            fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n+            fn strncmp(cs: *c_char, ct: *c_char, n: size_t) -> c_int;\n+            fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n+            fn strchr(cs: *c_char, c: c_int) -> *c_char;\n+            fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n+            fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n+            fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n+            fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n+            fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n+            fn strlen(cs: *c_char) -> size_t;\n+            fn strerror(n: c_int) -> *c_char;\n+            fn strtok(s: *c_char, t: *c_char) -> *c_char;\n+            fn strxfrm(s: *c_char, ct: *c_char, n: size_t) -> size_t;\n+            fn memcpy(s: *c_void, ct: *c_void, n: size_t) -> *c_void;\n+            fn memmove(s: *c_void, ct: *c_void, n: size_t) -> *c_void;\n+            fn memcmp(cx: *c_void, ct: *c_void, n: size_t) -> c_int;\n+            fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n+            fn memset(s: *c_void, c: c_int, n: size_t) -> *c_void;\n+        }\n+    }\n+\n+    // Microsoft helpfully underscore-qualifies all of its POSIX-like symbols\n+    // to make sure you don't use them accidentally. It also randomly deviates\n+    // from the exact signatures you might otherwise expect, and omits much,\n+    // so be careful when trying to write portable code; it won't always work\n+    // with the same POSIX functions and types as other platforms.\n+\n+    #[cfg(target_os = \"win32\")]\n+    mod posix88 {\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod stat {\n+            #[link_name = \"_chmod\"]\n+            fn chmod(path: *c_char, mode: c_int) -> c_int;\n+\n+            #[link_name = \"_mkdir\"]\n+            fn mkdir(path: *c_char) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod stdio {\n+            #[link_name = \"_popen\"]\n+            fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+\n+            #[link_name = \"_pclose\"]\n+            fn pclose(stream: *FILE) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod fcntl {\n+            #[link_name = \"_open\"]\n+            fn open(path: *c_char, oflag: c_int) -> c_int;\n+\n+            #[link_name = \"_creat\"]\n+            fn creat(path: *c_char, mode: c_int) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod dirent {\n+            // Not supplied at all.\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod unistd {\n+            #[link_name = \"_access\"]\n+            fn access(path: *c_char, amode: c_int) -> c_int;\n+\n+            #[link_name = \"_chdir\"]\n+            fn chdir(dir: *c_char) -> c_int;\n+\n+            #[link_name = \"_close\"]\n+            fn close(fd: c_int) -> c_int;\n+\n+            #[link_name = \"_dup\"]\n+            fn dup(fd: c_int) -> c_int;\n+\n+            #[link_name = \"_dup2\"]\n+            fn dup2(src: c_int, dst: c_int) -> c_int;\n+\n+            #[link_name = \"_execv\"]\n+            fn execv(prog: *c_char, argv: **c_char) -> intptr_t;\n+\n+            #[link_name = \"_execve\"]\n+            fn execve(prog: *c_char, argv: **c_char, envp: **c_char) -> c_int;\n+\n+            #[link_name = \"_execvp\"]\n+            fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+\n+            #[link_name = \"_execvpe\"]\n+            fn execvpe(c: *c_char, argv: **c_char, envp: **c_char) -> c_int;\n+\n+            #[link_name = \"_getcwd\"]\n+            fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+\n+            #[link_name = \"_getpid\"]\n+            fn getpid() -> c_int;\n+\n+            #[link_name = \"_isatty\"]\n+            fn isatty(fd: c_int) -> c_int;\n+\n+            #[link_name = \"_lseek\"]\n+            fn lseek(fd: c_int, offset: c_long, origin: c_int) -> c_long;\n+\n+            #[link_name = \"_pipe\"]\n+            fn pipe(fds: *c_int, psize: c_uint, textmode: c_int) -> c_int;\n+\n+            #[link_name = \"_read\"]\n+            fn read(fd: c_int, buf: *c_void, count: c_uint) -> c_int;\n+\n+            #[link_name = \"_rmdir\"]\n+            fn rmdir(path: *c_char) -> c_int;\n+\n+            #[link_name = \"_unlink\"]\n+            fn unlink(c: *c_char) -> c_int;\n+\n+            #[link_name = \"_write\"]\n+            fn write(fd: c_int, buf: *c_void, count: c_uint) -> c_uint;\n+\n+        }\n+    }\n+\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    mod posix88 {\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod stat {\n+            fn chmod(path: *c_char, mode: mode_t) -> c_int;\n+            fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n+            fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n+            fn mkfifo(ath: *c_char, mode: mode_t) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod stdio {\n+            fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+            fn pclose(stream: *FILE) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod fcntl {\n+            fn open(path: *c_char, oflag: c_int) -> c_int;\n+            fn creat(path: *c_char, mode: mode_t) -> c_int;\n+            fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod dirent {\n+            fn opendir(dirname: *c_char) -> *DIR;\n+            fn closedir(dirp: *DIR) -> c_int;\n+            fn readdir(dirp: *DIR) -> *dirent;\n+            fn rewinddir(dirp: *DIR);\n+            fn seekdir(dirp: *DIR, loc: c_long);\n+            fn telldir(dirp: *DIR) -> c_long;\n+        }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod unistd {\n+            fn access(path: *c_char, amode: c_int) -> c_int;\n+            fn alarm(seconds: c_uint) -> c_uint;\n+            fn chdir(dir: *c_char) -> c_int;\n+            fn chown(path: *c_char, uid: uid_t, gid: gid_t) -> c_int;\n+            fn close(fd: c_int) -> c_int;\n+            fn dup(fd: c_int) -> c_int;\n+            fn dup2(src: c_int, dst: c_int) -> c_int;\n+            fn execv(prog: *c_char, argv: **c_char) -> c_int;\n+            fn execve(prog: *c_char, argv: **c_char, envp: **c_char) -> c_int;\n+            fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+            fn fork() -> pid_t;\n+            fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n+            fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+            fn getegid() -> gid_t;\n+            fn geteuid() -> uid_t;\n+            fn getgid() -> gid_t ;\n+            fn getgroups(ngroups_max: c_int, groups: *gid_t) -> c_int;\n+            fn getlogin() -> *c_char;\n+            fn getopt(argc: c_int, argv: **c_char, optstr: *c_char) -> c_int;\n+            fn getpgrp() -> pid_t;\n+            fn getpid() -> pid_t;\n+            fn getppid() -> pid_t;\n+            fn getuid() -> uid_t;\n+            fn isatty(fd: c_int) -> c_int;\n+            fn link(src: *c_char, dst: *c_char) -> c_int;\n+            fn lseek(fd: c_int, offset: off_t, whence: c_int) -> off_t;\n+            fn pathconf(path: *c_char, name: c_int) -> c_long;\n+            fn pause() -> c_int;\n+            fn pipe(fds: *c_int) -> c_int;\n+            fn read(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;\n+            fn rmdir(path: *c_char) -> c_int;\n+            fn setgid(gid: gid_t) -> c_int;\n+            fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n+            fn setsid() -> pid_t;\n+            fn setuid(uid: uid_t) -> c_int;\n+            fn sleep(secs: c_uint) -> c_uint;\n+            fn sysconf(name: c_int) -> c_long;\n+            fn tcgetpgrp(fd: c_int) -> pid_t;\n+            fn ttyname(fd: c_int) -> *c_char;\n+            fn unlink(c: *c_char) -> c_int;\n+            fn write(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;\n+        }\n+    }\n+    mod extra {\n+    }\n+}\n+\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:"}, {"sha": "ea5aa1133e433dd4f48b4a27cc552982ef7c2b0f", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324ecb58a7cf6230662d5a20b4abab17d1631957/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=324ecb58a7cf6230662d5a20b4abab17d1631957", "patch": "@@ -1149,12 +1149,6 @@ mod u8 {\n     export lt, le, eq, ne, ge, gt;\n     export hash;\n \n-    #[nolink]\n-    #[abi = \"cdecl\"]\n-    native mod libc {\n-        fn memcmp(s1: *u8, s2: *u8, n: ctypes::size_t) -> ctypes::c_int;\n-    }\n-\n     /*\n     Function cmp\n \n@@ -1164,7 +1158,8 @@ mod u8 {\n         let a_len = len(a);\n         let b_len = len(b);\n         let n = math::min(a_len, b_len) as ctypes::size_t;\n-        let r = libc::memcmp(to_ptr(a), to_ptr(b), n) as int;\n+        let r = libc::memcmp(to_ptr(a) as *libc::c_void,\n+                             to_ptr(b) as *libc::c_void, n) as int;\n \n         if r != 0 { r } else {\n             if a_len == b_len {"}]}