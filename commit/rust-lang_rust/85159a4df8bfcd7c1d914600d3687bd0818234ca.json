{"sha": "85159a4df8bfcd7c1d914600d3687bd0818234ca", "node_id": "C_kwDOAAsO6NoAKDg1MTU5YTRkZjhiZmNkN2MxZDkxNDYwMGQzNjg3YmQwODE4MjM0Y2E", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-14T08:44:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-14T08:44:22Z"}, "message": "Rollup merge of #99126 - NiklasJonsson:84447/rustc_span, r=petrochenkov\n\nremove allow(rustc::potential_query_instability) in rustc_span\n\nAlso, avoid sorting before debug output as iteration order can now be\nrelied upon.\n\nRelated #84447", "tree": {"sha": "01bb300f1560e8e4152ecc9bda15ff48b7fd8e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01bb300f1560e8e4152ecc9bda15ff48b7fd8e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85159a4df8bfcd7c1d914600d3687bd0818234ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiz9dnCRBK7hj4Ov3rIwAA3fMIABJ/RB/NW1E9UZ+8T6AeHdO/\nndC5w34gZF53Nz5T3FJSWwvH1Jc+gIVUNTYdxQWG7Te3QjdCgxGbcUKbICPEg0ZU\nrDtONtNWmpQYkz3YNnpGpPipvTvTBFA9yLM1OdvDaw5mMUjiPy35SEz+O4z6iZX0\nOKmVGnTkQn25QhPHWQC9lR+XI8iUf6JsWP69bRgKbXxV1Oxe0g3luhremTbcTI/P\ngsK/lpqZbdCMB74pjJZRIo5Zm7TufldCjjz5b1KMCjhMz48zQzce579H+RvYizpl\nSalVkxRcKb1tQ1NYHQRQSJov+r173lha0RGwnuq7veWxk3t90Qs1XMBFd8F3aWk=\n=WFoP\n-----END PGP SIGNATURE-----\n", "payload": "tree 01bb300f1560e8e4152ecc9bda15ff48b7fd8e5d\nparent e5a86d7358520477b816e118200fc7dc664b3f6e\nparent f94484fe7e90297c94ddde52bf64a8a4c4c09797\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657788262 +0530\ncommitter GitHub <noreply@github.com> 1657788262 +0530\n\nRollup merge of #99126 - NiklasJonsson:84447/rustc_span, r=petrochenkov\n\nremove allow(rustc::potential_query_instability) in rustc_span\n\nAlso, avoid sorting before debug output as iteration order can now be\nrelied upon.\n\nRelated #84447\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85159a4df8bfcd7c1d914600d3687bd0818234ca", "html_url": "https://github.com/rust-lang/rust/commit/85159a4df8bfcd7c1d914600d3687bd0818234ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85159a4df8bfcd7c1d914600d3687bd0818234ca/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a86d7358520477b816e118200fc7dc664b3f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a86d7358520477b816e118200fc7dc664b3f6e", "html_url": "https://github.com/rust-lang/rust/commit/e5a86d7358520477b816e118200fc7dc664b3f6e"}, {"sha": "f94484fe7e90297c94ddde52bf64a8a4c4c09797", "url": "https://api.github.com/repos/rust-lang/rust/commits/f94484fe7e90297c94ddde52bf64a8a4c4c09797", "html_url": "https://github.com/rust-lang/rust/commit/f94484fe7e90297c94ddde52bf64a8a4c4c09797"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "5bdff82a29bcedc074e05fc8ab971b1064ed9aa3", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85159a4df8bfcd7c1d914600d3687bd0818234ca/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85159a4df8bfcd7c1d914600d3687bd0818234ca/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=85159a4df8bfcd7c1d914600d3687bd0818234ca", "patch": "@@ -644,7 +644,10 @@ pub fn debug_hygiene_data(verbose: bool) -> String {\n                 let expn_data = expn_data.as_ref().expect(\"no expansion data for an expansion ID\");\n                 debug_expn_data((&id.to_expn_id(), expn_data))\n             });\n+\n             // Sort the hash map for more reproducible output.\n+            // Because of this, it is fine to rely on the unstable iteration order of the map.\n+            #[allow(rustc::potential_query_instability)]\n             let mut foreign_expn_data: Vec<_> = data.foreign_expn_data.iter().collect();\n             foreign_expn_data.sort_by_key(|(id, _)| (id.krate, id.local_id));\n             foreign_expn_data.into_iter().for_each(debug_expn_data);\n@@ -1208,6 +1211,7 @@ impl HygieneEncodeContext {\n             // It's fine to iterate over a HashMap, because the serialization\n             // of the table that we insert data into doesn't depend on insertion\n             // order\n+            #[allow(rustc::potential_query_instability)]\n             for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {\n                 if self.serialized_ctxts.lock().insert(ctxt) {\n                     encode_ctxt(encoder, index, data);\n@@ -1216,6 +1220,8 @@ impl HygieneEncodeContext {\n \n             let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };\n \n+            // Same as above, this is fine as we are inserting into a order-independent hashset\n+            #[allow(rustc::potential_query_instability)]\n             for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {\n                 if self.serialized_expns.lock().insert(expn) {\n                     encode_expn(encoder, expn, data, hash);"}, {"sha": "a8074b5b1ba8f06ae317fb5932b7260299eaa2e5", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85159a4df8bfcd7c1d914600d3687bd0818234ca/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85159a4df8bfcd7c1d914600d3687bd0818234ca/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=85159a4df8bfcd7c1d914600d3687bd0818234ca", "patch": "@@ -20,7 +20,6 @@\n #![feature(negative_impls)]\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}]}