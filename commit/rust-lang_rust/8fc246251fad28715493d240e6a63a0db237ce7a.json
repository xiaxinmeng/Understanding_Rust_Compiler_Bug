{"sha": "8fc246251fad28715493d240e6a63a0db237ce7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzI0NjI1MWZhZDI4NzE1NDkzZDI0MGU2YTYzYTBkYjIzN2NlN2E=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-10T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-10T00:00:00Z"}, "message": "Types with a hidden niche are not known to be non-null", "tree": {"sha": "430cf8c24972d6c7cf93a3dc2bb11599f67e9911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430cf8c24972d6c7cf93a3dc2bb11599f67e9911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc246251fad28715493d240e6a63a0db237ce7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc246251fad28715493d240e6a63a0db237ce7a", "html_url": "https://github.com/rust-lang/rust/commit/8fc246251fad28715493d240e6a63a0db237ce7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc246251fad28715493d240e6a63a0db237ce7a/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e413d89aa706060ddc347e1e06d551ec86d3f471", "url": "https://api.github.com/repos/rust-lang/rust/commits/e413d89aa706060ddc347e1e06d551ec86d3f471", "html_url": "https://github.com/rust-lang/rust/commit/e413d89aa706060ddc347e1e06d551ec86d3f471"}], "stats": {"total": 201, "additions": 154, "deletions": 47}, "files": [{"sha": "c1b37f97d781b8e0f7f9a563fe7d1bbb856fdce1", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fc246251fad28715493d240e6a63a0db237ce7a/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc246251fad28715493d240e6a63a0db237ce7a/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=8fc246251fad28715493d240e6a63a0db237ce7a", "patch": "@@ -659,7 +659,7 @@ pub fn transparent_newtype_field<'a, 'tcx>(\n }\n \n /// Is type known to be non-null?\n-crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n+fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n     let tcx = cx.tcx;\n     match ty.kind() {\n         ty::FnPtr(_) => true,\n@@ -672,6 +672,12 @@ crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: C\n                 return true;\n             }\n \n+            // Types with a `#[repr(no_niche)]` attribute have their niche hidden.\n+            // The attribute is used by the UnsafeCell for example (the only use so far).\n+            if def.repr.hide_niche() {\n+                return false;\n+            }\n+\n             for variant in &def.variants {\n                 if let Some(field) = transparent_newtype_field(cx.tcx, variant) {\n                     if ty_is_known_nonnull(cx, field.ty(tcx, substs), mode) {"}, {"sha": "2ce4dd56eab0dcc534033544ef0e80e7fb1e3dfb", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=8fc246251fad28715493d240e6a63a0db237ce7a", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // aux-build:external_extern_fn.rs\n #![crate_type = \"lib\"]\n+#![feature(no_niche)]\n #![warn(clashing_extern_declarations)]\n \n mod redeclared_different_signature {\n@@ -383,3 +384,36 @@ mod unknown_layout {\n         }\n     }\n }\n+\n+mod hidden_niche {\n+    mod a {\n+        extern \"C\" {\n+            fn hidden_niche_transparent() -> usize;\n+            fn hidden_niche_transparent_no_niche() -> usize;\n+            fn hidden_niche_unsafe_cell() -> usize;\n+        }\n+    }\n+    mod b {\n+        use std::cell::UnsafeCell;\n+        use std::num::NonZeroUsize;\n+\n+        #[repr(transparent)]\n+        struct Transparent { x: NonZeroUsize }\n+\n+        #[repr(no_niche)]\n+        #[repr(transparent)]\n+        struct TransparentNoNiche { y: NonZeroUsize }\n+\n+        extern \"C\" {\n+            fn hidden_niche_transparent() -> Option<Transparent>;\n+\n+            fn hidden_niche_transparent_no_niche() -> Option<TransparentNoNiche>;\n+            //~^ WARN redeclared with a different signature\n+            //~| WARN block uses type `Option<TransparentNoNiche>`, which is not FFI-safe\n+\n+            fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize>>;\n+            //~^ WARN redeclared with a different signature\n+            //~| WARN block uses type `Option<UnsafeCell<NonZeroUsize>>`, which is not FFI-safe\n+        }\n+    }\n+}"}, {"sha": "a856de322c8ca5dac6e9f75cd9369995d20420f1", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 60, "deletions": 17, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=8fc246251fad28715493d240e6a63a0db237ce7a", "patch": "@@ -1,5 +1,5 @@\n warning: `clash` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:14:13\n+  --> $DIR/clashing-extern-fn.rs:15:13\n    |\n LL |             fn clash(x: u8);\n    |             ---------------- `clash` previously declared here\n@@ -8,15 +8,15 @@ LL |             fn clash(x: u64);\n    |             ^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n note: the lint level is defined here\n-  --> $DIR/clashing-extern-fn.rs:4:9\n+  --> $DIR/clashing-extern-fn.rs:5:9\n    |\n LL | #![warn(clashing_extern_declarations)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(u8)`\n               found `unsafe extern \"C\" fn(u64)`\n \n warning: `extern_link_name` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:52:9\n+  --> $DIR/clashing-extern-fn.rs:53:9\n    |\n LL | /     #[link_name = \"extern_link_name\"]\n LL | |     fn some_new_name(x: i16);\n@@ -29,7 +29,7 @@ LL |           fn extern_link_name(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `some_other_extern_link_name` redeclares `some_other_new_name` with a different signature\n-  --> $DIR/clashing-extern-fn.rs:55:9\n+  --> $DIR/clashing-extern-fn.rs:56:9\n    |\n LL |       fn some_other_new_name(x: i16);\n    |       ------------------------------- `some_other_new_name` previously declared here\n@@ -43,7 +43,7 @@ LL | |         fn some_other_extern_link_name(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `other_both_names_different` redeclares `link_name_same` with a different signature\n-  --> $DIR/clashing-extern-fn.rs:59:9\n+  --> $DIR/clashing-extern-fn.rs:60:9\n    |\n LL | /     #[link_name = \"link_name_same\"]\n LL | |     fn both_names_different(x: i16);\n@@ -58,7 +58,7 @@ LL | |         fn other_both_names_different(x: u32);\n               found `unsafe extern \"C\" fn(u32)`\n \n warning: `different_mod` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:72:9\n+  --> $DIR/clashing-extern-fn.rs:73:9\n    |\n LL |         fn different_mod(x: u8);\n    |         ------------------------ `different_mod` previously declared here\n@@ -70,7 +70,7 @@ LL |         fn different_mod(x: u64);\n               found `unsafe extern \"C\" fn(u64)`\n \n warning: `variadic_decl` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:82:9\n+  --> $DIR/clashing-extern-fn.rs:83:9\n    |\n LL |     fn variadic_decl(x: u8, ...);\n    |     ----------------------------- `variadic_decl` previously declared here\n@@ -82,7 +82,7 @@ LL |         fn variadic_decl(x: u8);\n               found `unsafe extern \"C\" fn(u8)`\n \n warning: `weigh_banana` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:142:13\n+  --> $DIR/clashing-extern-fn.rs:143:13\n    |\n LL |             fn weigh_banana(count: *const Banana) -> u64;\n    |             --------------------------------------------- `weigh_banana` previously declared here\n@@ -94,7 +94,7 @@ LL |             fn weigh_banana(count: *const Banana) -> u64;\n               found `unsafe extern \"C\" fn(*const three::Banana) -> u64`\n \n warning: `draw_point` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:171:13\n+  --> $DIR/clashing-extern-fn.rs:172:13\n    |\n LL |             fn draw_point(p: Point);\n    |             ------------------------ `draw_point` previously declared here\n@@ -106,7 +106,7 @@ LL |             fn draw_point(p: Point);\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`\n \n warning: `origin` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:197:13\n+  --> $DIR/clashing-extern-fn.rs:198:13\n    |\n LL |             fn origin() -> Point3;\n    |             ---------------------- `origin` previously declared here\n@@ -118,7 +118,7 @@ LL |             fn origin() -> Point3;\n               found `unsafe extern \"C\" fn() -> same_sized_members_clash::b::Point3`\n \n warning: `transparent_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:220:13\n+  --> $DIR/clashing-extern-fn.rs:221:13\n    |\n LL |             fn transparent_incorrect() -> T;\n    |             -------------------------------- `transparent_incorrect` previously declared here\n@@ -130,7 +130,7 @@ LL |             fn transparent_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `missing_return_type` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:238:13\n+  --> $DIR/clashing-extern-fn.rs:239:13\n    |\n LL |             fn missing_return_type() -> usize;\n    |             ---------------------------------- `missing_return_type` previously declared here\n@@ -142,7 +142,7 @@ LL |             fn missing_return_type();\n               found `unsafe extern \"C\" fn()`\n \n warning: `non_zero_usize` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:256:13\n+  --> $DIR/clashing-extern-fn.rs:257:13\n    |\n LL |             fn non_zero_usize() -> core::num::NonZeroUsize;\n    |             ----------------------------------------------- `non_zero_usize` previously declared here\n@@ -154,7 +154,7 @@ LL |             fn non_zero_usize() -> usize;\n               found `unsafe extern \"C\" fn() -> usize`\n \n warning: `non_null_ptr` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:258:13\n+  --> $DIR/clashing-extern-fn.rs:259:13\n    |\n LL |             fn non_null_ptr() -> core::ptr::NonNull<usize>;\n    |             ----------------------------------------------- `non_null_ptr` previously declared here\n@@ -166,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:356:13\n+  --> $DIR/clashing-extern-fn.rs:357:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -178,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:358:13\n+  --> $DIR/clashing-extern-fn.rs:359:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here\n@@ -189,5 +189,48 @@ LL |             fn option_non_null_ptr_incorrect() -> *const isize;\n    = note: expected `unsafe extern \"C\" fn() -> *const usize`\n               found `unsafe extern \"C\" fn() -> *const isize`\n \n-warning: 15 warnings emitted\n+warning: `hidden_niche_transparent_no_niche` redeclared with a different signature\n+  --> $DIR/clashing-extern-fn.rs:410:13\n+   |\n+LL |             fn hidden_niche_transparent_no_niche() -> usize;\n+   |             ------------------------------------------------ `hidden_niche_transparent_no_niche` previously declared here\n+...\n+LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoNiche>;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+   |\n+   = note: expected `unsafe extern \"C\" fn() -> usize`\n+              found `unsafe extern \"C\" fn() -> Option<TransparentNoNiche>`\n+\n+warning: `hidden_niche_unsafe_cell` redeclared with a different signature\n+  --> $DIR/clashing-extern-fn.rs:414:13\n+   |\n+LL |             fn hidden_niche_unsafe_cell() -> usize;\n+   |             --------------------------------------- `hidden_niche_unsafe_cell` previously declared here\n+...\n+LL |             fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize>>;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+   |\n+   = note: expected `unsafe extern \"C\" fn() -> usize`\n+              found `unsafe extern \"C\" fn() -> Option<UnsafeCell<NonZeroUsize>>`\n+\n+warning: `extern` block uses type `Option<TransparentNoNiche>`, which is not FFI-safe\n+  --> $DIR/clashing-extern-fn.rs:410:55\n+   |\n+LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoNiche>;\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: `#[warn(improper_ctypes)]` on by default\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n+\n+warning: `extern` block uses type `Option<UnsafeCell<NonZeroUsize>>`, which is not FFI-safe\n+  --> $DIR/clashing-extern-fn.rs:414:46\n+   |\n+LL |             fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize>>;\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n+\n+warning: 19 warnings emitted\n "}, {"sha": "2f37aa20750d1ba5672bfe6a2d975dcd6a78ca0a", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=8fc246251fad28715493d240e6a63a0db237ce7a", "patch": "@@ -5,6 +5,7 @@\n \n extern crate libc;\n \n+use std::cell::UnsafeCell;\n use std::marker::PhantomData;\n \n trait Bar { }\n@@ -70,6 +71,11 @@ extern {\n     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `Box<u32>`\n     pub fn raw_array(arr: [u8; 8]); //~ ERROR: uses type `[u8; 8]`\n \n+    pub fn no_niche_a(a: Option<UnsafeCell<extern fn()>>);\n+    //~^ ERROR: uses type `Option<UnsafeCell<extern \"C\" fn()>>`\n+    pub fn no_niche_b(b: Option<UnsafeCell<&i32>>);\n+    //~^ ERROR: uses type `Option<UnsafeCell<&i32>>`\n+\n     pub static static_u128_type: u128; //~ ERROR: uses type `u128`\n     pub static static_u128_array_type: [u128; 16]; //~ ERROR: uses type `u128`\n "}, {"sha": "7f21e412c385c1b584c156b92e850c5b607a73cf", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fc246251fad28715493d240e6a63a0db237ce7a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=8fc246251fad28715493d240e6a63a0db237ce7a", "patch": "@@ -1,5 +1,5 @@\n error: `extern` block uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:47:28\n+  --> $DIR/lint-ctypes.rs:48:28\n    |\n LL |     pub fn ptr_type1(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -12,27 +12,27 @@ LL | #![deny(improper_ctypes)]\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:25:1\n+  --> $DIR/lint-ctypes.rs:26:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:48:28\n+  --> $DIR/lint-ctypes.rs:49:28\n    |\n LL |     pub fn ptr_type2(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:25:1\n+  --> $DIR/lint-ctypes.rs:26:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:49:26\n+  --> $DIR/lint-ctypes.rs:50:26\n    |\n LL |     pub fn slice_type(p: &[u32]);\n    |                          ^^^^^^ not FFI-safe\n@@ -41,7 +41,7 @@ LL |     pub fn slice_type(p: &[u32]);\n    = note: slices have no C equivalent\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:50:24\n+  --> $DIR/lint-ctypes.rs:51:24\n    |\n LL |     pub fn str_type(p: &str);\n    |                        ^^^^ not FFI-safe\n@@ -50,7 +50,7 @@ LL |     pub fn str_type(p: &str);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:51:24\n+  --> $DIR/lint-ctypes.rs:52:24\n    |\n LL |     pub fn box_type(p: Box<u32>);\n    |                        ^^^^^^^^ not FFI-safe\n@@ -59,7 +59,7 @@ LL |     pub fn box_type(p: Box<u32>);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `Option<Box<u32>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:52:28\n+  --> $DIR/lint-ctypes.rs:53:28\n    |\n LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    |                            ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -68,7 +68,7 @@ LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:54:25\n+  --> $DIR/lint-ctypes.rs:55:25\n    |\n LL |     pub fn char_type(p: char);\n    |                         ^^^^ not FFI-safe\n@@ -77,31 +77,31 @@ LL |     pub fn char_type(p: char);\n    = note: the `char` type has no C equivalent\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:55:25\n+  --> $DIR/lint-ctypes.rs:56:25\n    |\n LL |     pub fn i128_type(p: i128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:56:25\n+  --> $DIR/lint-ctypes.rs:57:25\n    |\n LL |     pub fn u128_type(p: u128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `dyn Bar`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:57:26\n+  --> $DIR/lint-ctypes.rs:58:26\n    |\n LL |     pub fn trait_type(p: &dyn Bar);\n    |                          ^^^^^^^^ not FFI-safe\n    |\n    = note: trait objects have no C equivalent\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:58:26\n+  --> $DIR/lint-ctypes.rs:59:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32));\n    |                          ^^^^^^^^^^ not FFI-safe\n@@ -110,7 +110,7 @@ LL |     pub fn tuple_type(p: (i32, i32));\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:59:27\n+  --> $DIR/lint-ctypes.rs:60:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair);\n    |                           ^^^^^^^ not FFI-safe\n@@ -119,42 +119,42 @@ LL |     pub fn tuple_type2(p: I32Pair);\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:60:25\n+  --> $DIR/lint-ctypes.rs:61:25\n    |\n LL |     pub fn zero_size(p: ZeroSize);\n    |                         ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a member to this struct\n    = note: this struct has no fields\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:21:1\n+  --> $DIR/lint-ctypes.rs:22:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:61:33\n+  --> $DIR/lint-ctypes.rs:62:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:44:1\n+  --> $DIR/lint-ctypes.rs:45:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:64:12\n+  --> $DIR/lint-ctypes.rs:65:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:65:23\n+  --> $DIR/lint-ctypes.rs:66:23\n    |\n LL |     pub fn fn_type(p: RustFn);\n    |                       ^^^^^^ not FFI-safe\n@@ -163,7 +163,7 @@ LL |     pub fn fn_type(p: RustFn);\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:66:24\n+  --> $DIR/lint-ctypes.rs:67:24\n    |\n LL |     pub fn fn_type2(p: fn());\n    |                        ^^^^ not FFI-safe\n@@ -172,7 +172,7 @@ LL |     pub fn fn_type2(p: fn());\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:67:28\n+  --> $DIR/lint-ctypes.rs:68:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -181,15 +181,15 @@ LL |     pub fn fn_contained(p: RustBadRet);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:68:32\n+  --> $DIR/lint-ctypes.rs:69:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128);\n    |                                ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:69:31\n+  --> $DIR/lint-ctypes.rs:70:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr);\n    |                               ^^^^^^^^^^^^^^ not FFI-safe\n@@ -198,7 +198,7 @@ LL |     pub fn transparent_str(p: TransparentStr);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:70:30\n+  --> $DIR/lint-ctypes.rs:71:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n    |                              ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -207,29 +207,47 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:71:27\n+  --> $DIR/lint-ctypes.rs:72:27\n    |\n LL |     pub fn raw_array(arr: [u8; 8]);\n    |                           ^^^^^^^ not FFI-safe\n    |\n    = help: consider passing a pointer to the array\n    = note: passing raw arrays by value is not FFI-safe\n \n+error: `extern` block uses type `Option<UnsafeCell<extern \"C\" fn()>>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:74:26\n+   |\n+LL |     pub fn no_niche_a(a: Option<UnsafeCell<extern fn()>>);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n+\n+error: `extern` block uses type `Option<UnsafeCell<&i32>>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:76:26\n+   |\n+LL |     pub fn no_niche_b(b: Option<UnsafeCell<&i32>>);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n+\n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:73:34\n+  --> $DIR/lint-ctypes.rs:79:34\n    |\n LL |     pub static static_u128_type: u128;\n    |                                  ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:74:40\n+  --> $DIR/lint-ctypes.rs:80:40\n    |\n LL |     pub static static_u128_array_type: [u128; 16];\n    |                                        ^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 26 previous errors\n "}]}