{"sha": "b80472d84c4b5b28fd22c5ef56af181bbf544c88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MDQ3MmQ4NGM0YjViMjhmZDIyYzVlZjU2YWYxODFiYmY1NDRjODg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-04-25T15:38:15Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-04-27T16:02:36Z"}, "message": "fixed tests", "tree": {"sha": "d817daf3682cc4ead3f2bca326eaa814711969ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d817daf3682cc4ead3f2bca326eaa814711969ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80472d84c4b5b28fd22c5ef56af181bbf544c88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80472d84c4b5b28fd22c5ef56af181bbf544c88", "html_url": "https://github.com/rust-lang/rust/commit/b80472d84c4b5b28fd22c5ef56af181bbf544c88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80472d84c4b5b28fd22c5ef56af181bbf544c88/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cadf251b7874cbd94198ebef95e6260c118a2fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadf251b7874cbd94198ebef95e6260c118a2fef", "html_url": "https://github.com/rust-lang/rust/commit/cadf251b7874cbd94198ebef95e6260c118a2fef"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "2891cd59e3e1f1f82f5e3d5102f48ea618248dba", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=b80472d84c4b5b28fd22c5ef56af181bbf544c88", "patch": "@@ -10,9 +10,6 @@\n \n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n-\n-#![feature(conservative_impl_trait, universal_impl_trait)]\n-\n use std::fmt::Debug;\n \n // Allowed"}, {"sha": "57a0040600a255d506e893c997c8b983494b9479", "filename": "src/test/ui/impl_trait_projections.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=b80472d84c4b5b28fd22c5ef56af181bbf544c88", "patch": "@@ -7,9 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-#![feature(conservative_impl_trait, universal_impl_trait)]\n-\n use std::fmt::Debug;\n use std::option;\n "}, {"sha": "f6d58984ecef747ae3994640d005c6380d7ae928", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=b80472d84c4b5b28fd22c5ef56af181bbf544c88", "patch": "@@ -1,29 +1,29 @@\n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:24:51\n+  --> $DIR/impl_trait_projections.rs:21:51\n    |\n LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |                                                   ^^^^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:31:9\n+  --> $DIR/impl_trait_projections.rs:28:9\n    |\n LL |     -> <impl Iterator as Iterator>::Item\n    |         ^^^^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:38:27\n+  --> $DIR/impl_trait_projections.rs:35:27\n    |\n LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n    |                           ^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:45:29\n+  --> $DIR/impl_trait_projections.rs:42:29\n    |\n LL |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n    |                             ^^^^^^^^^^\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/impl_trait_projections.rs:24:50\n+  --> $DIR/impl_trait_projections.rs:21:50\n    |\n LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type"}, {"sha": "4cf7feddd46541376fbe52cd6b875e5cdf82d895", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=b80472d84c4b5b28fd22c5ef56af181bbf544c88", "patch": "@@ -1,11 +1,11 @@\n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait.rs:33:16\n+  --> $DIR/dyn-trait.rs:32:16\n    |\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n \n error: free region `'a` does not outlive free region `'static`\n-  --> $DIR/dyn-trait.rs:33:5\n+  --> $DIR/dyn-trait.rs:32:5\n    |\n LL |     static_val(x); //~ ERROR cannot infer\n    |     ^^^^^^^^^^^^^"}, {"sha": "cdc0c78e6941463cfa16390f5793deda1f671744", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b80472d84c4b5b28fd22c5ef56af181bbf544c88/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=b80472d84c4b5b28fd22c5ef56af181bbf544c88", "patch": "@@ -1,29 +1,29 @@\n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:14\n+  --> $DIR/dyn-trait-underscore.rs:18:14\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |              ^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:20\n+  --> $DIR/dyn-trait-underscore.rs:18:20\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |                    ^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:5\n+  --> $DIR/dyn-trait-underscore.rs:18:5\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:5\n+  --> $DIR/dyn-trait-underscore.rs:18:5\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: free region `` does not outlive free region `'static`\n-  --> $DIR/dyn-trait-underscore.rs:18:52\n+  --> $DIR/dyn-trait-underscore.rs:16:52\n    |\n LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |  ____________________________________________________^"}]}