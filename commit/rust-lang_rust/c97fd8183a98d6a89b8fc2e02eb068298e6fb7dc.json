{"sha": "c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "node_id": "C_kwDOAAsO6NoAKGM5N2ZkODE4M2E5OGQ2YTg5YjhmYzJlMDJlYjA2ODI5OGU2ZmI3ZGM", "commit": {"author": {"name": "Mateusz", "email": "mat@gienieczko.com", "date": "2022-11-04T20:33:32Z"}, "committer": {"name": "Mateusz", "email": "mat@gienieczko.com", "date": "2022-11-04T20:33:32Z"}, "message": "Refactor tcx mk_const parameters.", "tree": {"sha": "ea41c9f0fbf776f19898a9e7eacd76d0e244bdac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea41c9f0fbf776f19898a9e7eacd76d0e244bdac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQS6ttWmD/dycqbuYdU4bLXkFRN0aQUCY2V3HAAKCRA4bLXkFRN0\naZP8AP9b9Ki4qfGrKnBVFw7PctwDKedAsAPw4o4M8nN2MqE1jgEAmRsG72LxoIxG\nmReUKGmGZYUwRdn/eTLWa5l6qvNurA4=\n=Z3X2\n-----END PGP SIGNATURE-----", "payload": "tree ea41c9f0fbf776f19898a9e7eacd76d0e244bdac\nparent 6330c27ae24ec1556cf2b97eeac333dc23391686\nauthor Mateusz <mat@gienieczko.com> 1667594012 +0000\ncommitter Mateusz <mat@gienieczko.com> 1667594012 +0000\n\nRefactor tcx mk_const parameters.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "html_url": "https://github.com/rust-lang/rust/commit/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/comments", "author": {"login": "V0ldek", "id": 20441980, "node_id": "MDQ6VXNlcjIwNDQxOTgw", "avatar_url": "https://avatars.githubusercontent.com/u/20441980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/V0ldek", "html_url": "https://github.com/V0ldek", "followers_url": "https://api.github.com/users/V0ldek/followers", "following_url": "https://api.github.com/users/V0ldek/following{/other_user}", "gists_url": "https://api.github.com/users/V0ldek/gists{/gist_id}", "starred_url": "https://api.github.com/users/V0ldek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/V0ldek/subscriptions", "organizations_url": "https://api.github.com/users/V0ldek/orgs", "repos_url": "https://api.github.com/users/V0ldek/repos", "events_url": "https://api.github.com/users/V0ldek/events{/privacy}", "received_events_url": "https://api.github.com/users/V0ldek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "V0ldek", "id": 20441980, "node_id": "MDQ6VXNlcjIwNDQxOTgw", "avatar_url": "https://avatars.githubusercontent.com/u/20441980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/V0ldek", "html_url": "https://github.com/V0ldek", "followers_url": "https://api.github.com/users/V0ldek/followers", "following_url": "https://api.github.com/users/V0ldek/following{/other_user}", "gists_url": "https://api.github.com/users/V0ldek/gists{/gist_id}", "starred_url": "https://api.github.com/users/V0ldek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/V0ldek/subscriptions", "organizations_url": "https://api.github.com/users/V0ldek/orgs", "repos_url": "https://api.github.com/users/V0ldek/repos", "events_url": "https://api.github.com/users/V0ldek/events{/privacy}", "received_events_url": "https://api.github.com/users/V0ldek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6330c27ae24ec1556cf2b97eeac333dc23391686", "url": "https://api.github.com/repos/rust-lang/rust/commits/6330c27ae24ec1556cf2b97eeac333dc23391686", "html_url": "https://github.com/rust-lang/rust/commit/6330c27ae24ec1556cf2b97eeac333dc23391686"}], "stats": {"total": 178, "additions": 74, "deletions": 104}, "files": [{"sha": "c6b497e9b9fc40aad71e61a8d16ef285c4cdea9b", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -1655,13 +1655,10 @@ pub fn check_type_bounds<'tcx>(\n         GenericParamDefKind::Const { .. } => {\n             let bound_var = ty::BoundVariableKind::Const;\n             bound_vars.push(bound_var);\n-            tcx.mk_const(ty::ConstS {\n-                ty: tcx.type_of(param.def_id),\n-                kind: ty::ConstKind::Bound(\n-                    ty::INNERMOST,\n-                    ty::BoundVar::from_usize(bound_vars.len() - 1),\n-                ),\n-            })\n+            tcx.mk_const(\n+                ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(bound_vars.len() - 1)),\n+                tcx.type_of(param.def_id),\n+            )\n             .into()\n         }\n     });"}, {"sha": "365b4b1fccdb4ef8ad018c5dd3c88a85751d33b9", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -773,10 +773,10 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_const(bound_to)\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n-            self.tcx().mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Bound(self.binder_index, var),\n-                ty: self.fold_ty(const_var.ty()),\n-            })\n+            self.tcx().mk_const(\n+                ty::ConstKind::Bound(self.binder_index, var),\n+                self.fold_ty(const_var.ty()),\n+            )\n         }\n     }\n }"}, {"sha": "0794792d8cb3786311cc2758fb8f647cfcebb7ad", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -147,12 +147,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n-                self.tcx\n-                    .mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Placeholder(placeholder_mapped),\n-                        ty,\n-                    })\n-                    .into()\n+                self.tcx.mk_const(ty::ConstKind::Placeholder(placeholder_mapped), ty).into()\n             }\n         }\n     }"}, {"sha": "a973bf54b055eb7b98ca89147abc3d3f1f8007d5", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -741,10 +741,10 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     substs,\n                     substs,\n                 )?;\n-                Ok(self.tcx().mk_const(ty::ConstS {\n-                    ty: c.ty(),\n-                    kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                }))\n+                Ok(self.tcx().mk_const(\n+                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n+                    c.ty(),\n+                ))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n@@ -955,10 +955,10 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     substs,\n                 )?;\n \n-                Ok(self.tcx().mk_const(ty::ConstS {\n-                    ty: c.ty(),\n-                    kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                }))\n+                Ok(self.tcx().mk_const(\n+                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n+                    c.ty(),\n+                ))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }"}, {"sha": "d739323de77c817d7bbe41e3ea2fee0e70b15297", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -94,13 +94,13 @@ impl<'tcx> InferCtxt<'tcx> {\n                 }))\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n-                self.tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                self.tcx.mk_const(\n+                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: next_universe,\n                         name: bound_var,\n                     }),\n                     ty,\n-                })\n+                )\n             },\n         };\n "}, {"sha": "c2eecd9e87a384f16725433eb85bd9ddd0d97059", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -2065,13 +2065,13 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                 if ty.has_non_region_param() || ty.has_non_region_infer() {\n                     bug!(\"const `{ct}`'s type should not reference params or types\");\n                 }\n-                tcx.mk_const(ty::ConstS {\n-                    ty,\n-                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                tcx.mk_const(\n+                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n                         name: ty::BoundVar::from_usize(idx),\n                     }),\n-                })\n+                    ty,\n+                )\n                 .into()\n             }\n             _ => arg,"}, {"sha": "8d1ed4b2a5228d4a82560676f93f400e7f7ea757", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -341,10 +341,10 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                         tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n                     }\n                     GenericArgKind::Const(ct) => tcx\n-                        .mk_const(ty::ConstS {\n-                            ty: ct.ty(),\n-                            kind: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n-                        })\n+                        .mk_const(\n+                            ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n+                            ct.ty(),\n+                        )\n                         .into(),\n                 })\n                 .collect(),"}, {"sha": "0a96d23e3543b49306b959ff04bc65fa04a54cfa", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -2414,10 +2414,8 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                let ty_const = tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n-                    ty,\n-                });\n+                let ty_const =\n+                    tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty);\n                 debug!(?ty_const);\n \n                 return Self::Ty(ty_const);"}, {"sha": "7263e8306cf0933d52a5bd30d0b2f4d0e878450e", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -310,7 +310,8 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::Const<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        decoder.interner().mk_const(Decodable::decode(decoder))\n+        let consts: ty::ConstS<'tcx> = Decodable::decode(decoder);\n+        decoder.interner().mk_const(consts.kind, consts.ty)\n     }\n }\n "}, {"sha": "33fdf1a83709465ed858e95f839111412dc37c43", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -77,13 +77,13 @@ impl<'tcx> Const<'tcx> {\n \n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n-            None => tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n+            None => tcx.mk_const(\n+                ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                 }),\n                 ty,\n-            }),\n+            ),\n         }\n     }\n \n@@ -138,10 +138,7 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                Some(tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n-                    ty,\n-                }))\n+                Some(tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty))\n             }\n             _ => None,\n         }\n@@ -150,7 +147,7 @@ impl<'tcx> Const<'tcx> {\n     /// Interns the given value as a constant.\n     #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {\n-        tcx.mk_const(ConstS { kind: ConstKind::Value(val), ty })\n+        tcx.mk_const(ConstKind::Value(val), ty)\n     }\n \n     /// Panics if self.kind != ty::ConstKind::Value"}, {"sha": "e039436fe0afa69c0108293c2cb792d6f8cacbfd", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -1316,7 +1316,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         msg: &str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Error(reported), ty })\n+        self.mk_const(ty::ConstKind::Error(reported), ty)\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n@@ -2231,7 +2231,7 @@ macro_rules! direct_interners {\n \n direct_interners! {\n     region: mk_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n-    const_: mk_const(ConstS<'tcx>): Const -> Const<'tcx>,\n+    const_: mk_const_internal(ConstS<'tcx>): Const -> Const<'tcx>,\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: intern_layout(LayoutS<'tcx>): Layout -> Layout<'tcx>,\n     adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n@@ -2569,9 +2569,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty_infer(TyVar(v))\n     }\n \n+    #[inline]\n+    pub fn mk_const(self, kind: ty::ConstKind<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const_internal(ty::ConstS { kind, ty })\n+    }\n+\n     #[inline]\n     pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Infer(InferConst::Var(v)), ty })\n+        self.mk_const(ty::ConstKind::Infer(InferConst::Var(v)), ty)\n     }\n \n     #[inline]\n@@ -2591,7 +2596,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Infer(ic), ty })\n+        self.mk_const(ty::ConstKind::Infer(ic), ty)\n     }\n \n     #[inline]\n@@ -2601,7 +2606,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstS { kind: ty::ConstKind::Param(ParamConst { index, name }), ty })\n+        self.mk_const(ty::ConstKind::Param(ParamConst { index, name }), ty)\n     }\n \n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {"}, {"sha": "a329753726ef2b91a114d9e3d24a9862226e1525", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -566,10 +566,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     ))\n                 },\n                 consts: &mut |c, ty: Ty<'tcx>| {\n-                    self.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)),\n-                        ty,\n-                    })\n+                    self.mk_const(ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)), ty)\n                 },\n             },\n         )\n@@ -648,7 +645,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let () = entry.or_insert_with(|| ty::BoundVariableKind::Const).expect_const();\n-                self.tcx.mk_const(ty::ConstS { ty, kind: ty::ConstKind::Bound(ty::INNERMOST, var) })\n+                self.tcx.mk_const(ty::ConstKind::Bound(ty::INNERMOST, var), ty)\n             }\n         }\n \n@@ -732,10 +729,7 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n                 ct\n             } else {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Bound(debruijn, bound_ct),\n-                    ty: ct.ty(),\n-                })\n+                self.tcx.mk_const(ty::ConstKind::Bound(debruijn, bound_ct), ct.ty())\n             }\n         } else {\n             ct.super_fold_with(self)"}, {"sha": "c083a405e3cfb605252b89902a4a6efe4f7007b0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -639,10 +639,10 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 au.substs,\n                 bu.substs,\n             )?;\n-            return Ok(tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n-                ty: a.ty(),\n-            }));\n+            return Ok(tcx.mk_const(\n+                ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n+                a.ty(),\n+            ));\n         }\n         _ => false,\n     };"}, {"sha": "f2070869ce0cd887cf5ae297121ef41f95d6cdad", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -805,7 +805,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n         let ty = self.ty().try_fold_with(folder)?;\n         let kind = self.kind().try_fold_with(folder)?;\n         if ty != self.ty() || kind != self.kind() {\n-            Ok(folder.tcx().mk_const(ty::ConstS { ty, kind }))\n+            Ok(folder.tcx().mk_const(kind, ty))\n         } else {\n             Ok(self)\n         }"}, {"sha": "98df9c3f0e8df364a961a1f6d8f9699d554058ab", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -74,8 +74,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty, span, literal }\n             }\n             ExprKind::ConstParam { param, def_id: _ } => {\n-                let const_param =\n-                    tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Param(param), ty: expr.ty });\n+                let const_param = tcx.mk_const(ty::ConstKind::Param(param), expr.ty);\n                 let literal = ConstantKind::Ty(const_param);\n \n                 Constant { user_ty: None, span, literal }"}, {"sha": "2109b3c24962e6b4db7d1d01637decdcdeeb7f7b", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -654,8 +654,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                             .builtin_deref(true)\n                             .expect(\"tried to dereference on non-ptr type\")\n                             .ty;\n-                        let dereferenced_const =\n-                            self.tcx.mk_const(ty::ConstS { kind: ct.kind(), ty: pointee_ty });\n+                        let dereferenced_const = self.tcx.mk_const(ct.kind(), pointee_ty);\n                         self = dereferenced_const.print(self)?;\n                     }\n                 }"}, {"sha": "daee5dd8f02e6ed14a210c950bdf429a59d1b25c", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -831,9 +831,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderConst { universe, name: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n-                self.infcx\n-                    .tcx\n-                    .mk_const(ty::ConstS { kind: ty::ConstKind::Placeholder(p), ty: ct.ty() })\n+                self.infcx.tcx.mk_const(ty::ConstKind::Placeholder(p), ct.ty())\n             }\n             _ => ct.super_fold_with(self),\n         }\n@@ -968,10 +966,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                     let db = ty::DebruijnIndex::from_usize(\n                         self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                     );\n-                    self.tcx().mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Bound(db, *replace_var),\n-                        ty: ct.ty(),\n-                    })\n+                    self.tcx().mk_const(ty::ConstKind::Bound(db, *replace_var), ct.ty())\n                 }\n                 None => ct,\n             }\n@@ -2173,7 +2168,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n         let kind = ty::ConstKind::Unevaluated(ty::UnevaluatedConst::new(did, identity_substs));\n-        ty.map_bound(|ty| tcx.mk_const(ty::ConstS { ty, kind }).into())\n+        ty.map_bound(|ty| tcx.mk_const(kind, ty).into())\n     } else {\n         ty.map_bound(|ty| ty.into())\n     };"}, {"sha": "28b4bae7cbecf2c44e6f50c86d4d7f78147d2d10", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -555,13 +555,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             GenericParamDefKind::Const { .. } => {\n                                 let bound_var = ty::BoundVariableKind::Const;\n                                 bound_vars.push(bound_var);\n-                                tcx.mk_const(ty::ConstS {\n-                                    ty: tcx.type_of(param.def_id),\n-                                    kind: ty::ConstKind::Bound(\n+                                tcx.mk_const(\n+                                    ty::ConstKind::Bound(\n                                         ty::INNERMOST,\n                                         ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                     ),\n-                                })\n+                                    tcx.type_of(param.def_id),\n+                                )\n                                 .into()\n                             }\n                         });"}, {"sha": "2035252fe39a63bb66611c6e84cfebab0e954541", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -734,10 +734,10 @@ fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx\n         }\n \n         ty::GenericParamDefKind::Const { .. } => tcx\n-            .mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n-                ty: tcx.type_of(param.def_id),\n-            })\n+            .mk_const(\n+                ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n+                tcx.type_of(param.def_id),\n+            )\n             .into(),\n     })\n }"}, {"sha": "0492e94b94e9830d602f2cdee3a8940abf488cb7", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -546,7 +546,7 @@ impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'t\n             chalk_ir::ConstValue::Placeholder(_p) => unimplemented!(),\n             chalk_ir::ConstValue::Concrete(c) => ty::ConstKind::Value(c.interned),\n         };\n-        interner.tcx.mk_const(ty::ConstS { ty, kind })\n+        interner.tcx.mk_const(kind, ty)\n     }\n }\n "}, {"sha": "3cef47c0f8ba481d2b3bde2a117b38be3ae5bb18", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=c97fd8183a98d6a89b8fc2e02eb068298e6fb7dc", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn destructure_const<'tcx>(\n             // construct the consts for the elements of the array/slice\n             let field_consts = branches\n                 .iter()\n-                .map(|b| tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty }))\n+                .map(|b| tcx.mk_const(ty::ConstKind::Value(*b), *inner_ty))\n                 .collect::<Vec<_>>();\n             debug!(?field_consts);\n \n@@ -52,10 +52,7 @@ pub(crate) fn destructure_const<'tcx>(\n \n             for (field, field_valtree) in iter::zip(fields, branches) {\n                 let field_ty = field.ty(tcx, substs);\n-                let field_const = tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Value(*field_valtree),\n-                    ty: field_ty,\n-                });\n+                let field_const = tcx.mk_const(ty::ConstKind::Value(*field_valtree), field_ty);\n                 field_consts.push(field_const);\n             }\n             debug!(?field_consts);\n@@ -65,10 +62,7 @@ pub(crate) fn destructure_const<'tcx>(\n         ty::Tuple(elem_tys) => {\n             let fields = iter::zip(*elem_tys, branches)\n                 .map(|(elem_ty, elem_valtree)| {\n-                    tcx.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Value(*elem_valtree),\n-                        ty: elem_ty,\n-                    })\n+                    tcx.mk_const(ty::ConstKind::Value(*elem_valtree), elem_ty)\n                 })\n                 .collect::<Vec<_>>();\n \n@@ -261,17 +255,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let uneval =\n                     ty::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n \n-                let constant = self\n-                    .tcx\n-                    .mk_const(ty::ConstS { kind: ty::ConstKind::Unevaluated(uneval), ty: node.ty });\n+                let constant = self.tcx.mk_const(ty::ConstKind::Unevaluated(uneval), node.ty);\n \n                 self.nodes.push(Node::Leaf(constant))\n             }\n \n             ExprKind::ConstParam { param, .. } => {\n-                let const_param = self\n-                    .tcx\n-                    .mk_const(ty::ConstS { kind: ty::ConstKind::Param(*param), ty: node.ty });\n+                let const_param = self.tcx.mk_const(ty::ConstKind::Param(*param), node.ty);\n                 self.nodes.push(Node::Leaf(const_param))\n             }\n "}]}