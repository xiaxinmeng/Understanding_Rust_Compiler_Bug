{"sha": "a95b342f0283dd213ef0248bc1a42e158dbef603", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NWIzNDJmMDI4M2RkMjEzZWYwMjQ4YmMxYTQyZTE1OGRiZWY2MDM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-03-14T19:11:37Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-11T18:35:38Z"}, "message": "Test `-Zthir-unsafeck` for unsafe function calls", "tree": {"sha": "66bad2c99b5cdebc10bde77d0d6b8f38d8ecbe29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66bad2c99b5cdebc10bde77d0d6b8f38d8ecbe29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a95b342f0283dd213ef0248bc1a42e158dbef603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a95b342f0283dd213ef0248bc1a42e158dbef603", "html_url": "https://github.com/rust-lang/rust/commit/a95b342f0283dd213ef0248bc1a42e158dbef603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a95b342f0283dd213ef0248bc1a42e158dbef603/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29780f43e2067ee1c88e73fa76ef1cced28758d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/29780f43e2067ee1c88e73fa76ef1cced28758d3", "html_url": "https://github.com/rust-lang/rust/commit/29780f43e2067ee1c88e73fa76ef1cced28758d3"}], "stats": {"total": 467, "additions": 422, "deletions": 45}, "files": [{"sha": "d22413beecbcf4e6516262a71a320ec7322d7129", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.mir.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:12:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:13:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:18:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr"}, {"sha": "2ed343b4a07fcbece8420c9a4509f1635cf0af30", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n struct S;\n "}, {"sha": "d22413beecbcf4e6516262a71a320ec7322d7129", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.thir.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,35 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "2f9c7973b5a1647840f647eee5f3d842239ed887", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.mir.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:12:23\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:15:23\n    |\n LL |     let result: i32 = foo(5, 5);\n    |                       ^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:21:23\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:24:23\n    |\n LL |     let result: i32 = foo(5, 5);\n    |                       ^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.stderr"}, {"sha": "bdb3eb23c38f84124d67dc39d7ce40b2f2d54183", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n // Ensure we get unsafe function after coercion\n unsafe fn add(a: i32, b: i32) -> i32 {\n     a + b"}, {"sha": "2f9c7973b5a1647840f647eee5f3d842239ed887", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:15:23\n+   |\n+LL |     let result: i32 = foo(5, 5);\n+   |                       ^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:24:23\n+   |\n+LL |     let result: i32 = foo(5, 5);\n+   |                       ^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a60100ddaeaeb1b40e282202cbc8b03e212a0b26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:2:31\n+  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.stderr"}, {"sha": "57358fbdd8404139e644e91b63764a4bc23ecbce", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n fn main() {\n     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n     //~^ ERROR E0133"}, {"sha": "a60100ddaeaeb1b40e282202cbc8b03e212a0b26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n+   |\n+LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b643ecc0ce8d98047bc458e7aeff00114368c70e", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:8:5\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n LL |     foo();\n    |     ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:6:17\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n    |                 ^^^^^ call to unsafe function", "previous_filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.stderr"}, {"sha": "1ce781479708335eab495c1c62231857721d03e0", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(const_extern_fn)]\n \n const unsafe extern \"C\" fn foo() -> usize { 5 }"}, {"sha": "b643ecc0ce8d98047bc458e7aeff00114368c70e", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n+   |\n+LL |     foo();\n+   |     ^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n+   |\n+LL |     let a: [u8; foo()];\n+   |                 ^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b11d5e2c2fc729092954da02bf092c3edde49202", "filename": "src/test/ui/error-codes/E0133.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/E0133.rs:4:5\n+  --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/error-codes/E0133.stderr"}, {"sha": "dee1475ba213a8839535aa222359aaf72424939a", "filename": "src/test/ui/error-codes/E0133.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe fn f() { return; }\n \n fn main() {"}, {"sha": "b11d5e2c2fc729092954da02bf092c3edde49202", "filename": "src/test/ui/error-codes/E0133.thir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-called-from-safe.rs:4:5\n+  --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.stderr"}, {"sha": "04efea0b230de6a8bb6f7db841aff78307549c15", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.mir.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:8:43\n+  --> $DIR/feature-gate-const_fn_transmute.rs:11:43\n    |\n LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:11:53\n+  --> $DIR/feature-gate-const_fn_transmute.rs:14:53\n    |\n LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transm\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:14:58\n+  --> $DIR/feature-gate-const_fn_transmute.rs:17:58\n    |\n LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:17:48\n+  --> $DIR/feature-gate-const_fn_transmute.rs:20:48\n    |\n LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n@@ -39,7 +39,7 @@ LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:20:58\n+  --> $DIR/feature-gate-const_fn_transmute.rs:23:58\n    |\n LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::t\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:23:63\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:63\n    |\n LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrins\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n    |\n LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^\n@@ -69,7 +69,7 @@ LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n    |\n LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n    |\n LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -89,23 +89,23 @@ LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::tran\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n    |\n LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n    |\n LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n    |\n LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.stderr"}, {"sha": "9a45dbc51d42aa5a6b80f7e01560fc366a8c37bc", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n use std::mem;\n \n #[repr(transparent)]"}, {"sha": "04efea0b230de6a8bb6f7db841aff78307549c15", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.thir.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,118 @@\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:11:43\n+   |\n+LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:14:53\n+   |\n+LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:17:58\n+   |\n+LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:20:48\n+   |\n+LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:23:58\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:63\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "d3cf5d84fdd98be1457cf37de3bc8e034b48e678", "filename": "src/test/ui/foreign-unsafe-fn-called.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/foreign-unsafe-fn-called.rs:8:5\n+  --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();\n    |     ^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/foreign-unsafe-fn-called.stderr"}, {"sha": "de3de286fc93ae6bc80343f56d1e737af46b4116", "filename": "src/test/ui/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n mod test {\n     extern \"C\" {\n         pub fn free();"}, {"sha": "d3cf5d84fdd98be1457cf37de3bc8e034b48e678", "filename": "src/test/ui/foreign-unsafe-fn-called.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/foreign-unsafe-fn-called.rs:11:5\n+   |\n+LL |     test::free();\n+   |     ^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "26b2f9f2713118988be3b6db66c55bde479a9e80", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,21 +1,21 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unchecked_math_unsafe.rs:5:15\n+  --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unchecked_math_unsafe.rs:6:15\n+  --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unchecked_math_unsafe.rs:7:15\n+  --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/intrinsics/unchecked_math_unsafe.stderr"}, {"sha": "98d3a11ad027643ede5c575a27bdbabdb76e4f4f", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "26b2f9f2713118988be3b6db66c55bde479a9e80", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.thir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:8:15\n+   |\n+LL |     let add = std::intrinsics::unchecked_add(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:9:15\n+   |\n+LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:10:15\n+   |\n+LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1d470fb5e0f00b41904244964b096fafb4954039", "filename": "src/test/ui/issues/issue-28776.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-28776.rs:4:5\n+  --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/issues/issue-28776.stderr"}, {"sha": "19df3c4a4252b1c51fc22dd6d52afb2c6e874971", "filename": "src/test/ui/issues/issue-28776.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-28776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-28776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n use std::ptr;\n \n fn main() {"}, {"sha": "1d470fb5e0f00b41904244964b096fafb4954039", "filename": "src/test/ui/issues/issue-28776.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28776.rs:7:5\n+   |\n+LL |     (&ptr::write)(1 as *mut _, 42);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "f395c30b8155a54554e9d97e871e73c7b6529365", "filename": "src/test/ui/issues/issue-3080.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-3080.rs:7:5\n+  --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();\n    |     ^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/issues/issue-3080.stderr"}, {"sha": "2b5269dda8fa6b05ef0b156e46f41bf993f056c7", "filename": "src/test/ui/issues/issue-3080.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n struct X(());\n impl X {\n     pub unsafe fn with(&self) { }"}, {"sha": "f395c30b8155a54554e9d97e871e73c7b6529365", "filename": "src/test/ui/issues/issue-3080.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-3080.rs:10:5\n+   |\n+LL |     X(()).with();\n+   |     ^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "6134d6889ff6cb7f2dbae943a469f935dc6f8747", "filename": "src/test/ui/issues/issue-5844.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-5844.rs:6:5\n+  --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/issues/issue-5844.stderr"}, {"sha": "4f90a9c66451f1825be4cc510a8f61a93e8aaad9", "filename": "src/test/ui/issues/issue-5844.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,4 +1,6 @@\n //aux-build:issue-5844-aux.rs\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n extern crate issue_5844_aux;\n "}, {"sha": "6134d6889ff6cb7f2dbae943a469f935dc6f8747", "filename": "src/test/ui/issues/issue-5844.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-5844.rs:8:5\n+   |\n+LL |     issue_5844_aux::rand();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "0f4b5936dd015ac61941045e9ed0903c91843428", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -7,10 +7,10 @@ LL |     __KEY.get(Default::default)\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:21:5\n+  --> $DIR/issue-43733.rs:20:42\n    |\n-LL |     std::thread::LocalKey::new(__getit);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n ", "previous_filename": "src/test/ui/threads-sendsync/issue-43733.stderr"}, {"sha": "5434140cd61280b7bc7f6d06eed501b815aac9f3", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,30 +1,31 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n type Foo = std::cell::RefCell<String>;\n \n #[cfg(target_thread_local)]\n #[thread_local]\n-static __KEY: std::thread::__FastLocalKeyInner<Foo> =\n-    std::thread::__FastLocalKeyInner::new();\n+static __KEY: std::thread::__FastLocalKeyInner<Foo> = std::thread::__FastLocalKeyInner::new();\n \n #[cfg(not(target_thread_local))]\n-static __KEY: std::thread::__OsLocalKeyInner<Foo> =\n-    std::thread::__OsLocalKeyInner::new();\n+static __KEY: std::thread::__OsLocalKeyInner<Foo> = std::thread::__OsLocalKeyInner::new();\n \n-fn __getit() -> std::option::Option<&'static Foo>\n-{\n+fn __getit() -> std::option::Option<&'static Foo> {\n     __KEY.get(Default::default) //~ ERROR call to unsafe function is unsafe\n }\n \n-static FOO: std::thread::LocalKey<Foo> =\n-    std::thread::LocalKey::new(__getit);\n+static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n //~^ ERROR call to unsafe function is unsafe\n \n fn main() {\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));\n     std::thread::spawn(|| {\n         FOO.with(|foo| *foo.borrow_mut() += \"foo\");\n-    }).join().unwrap();\n+    })\n+    .join()\n+    .unwrap();\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));\n }"}, {"sha": "0f4b5936dd015ac61941045e9ed0903c91843428", "filename": "src/test/ui/threads-sendsync/issue-43733.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:17:5\n+   |\n+LL |     __KEY.get(Default::default)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:20:42\n+   |\n+LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "3031be720f02e8dbdd4514b290ee7052013f73ae", "filename": "src/test/ui/unsafe/unsafe-const-fn.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-const-fn.rs:7:18\n+  --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n    |                  ^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/unsafe-const-fn.stderr"}, {"sha": "65e3acf3063726233ef35b681b7259833ae13ff1", "filename": "src/test/ui/unsafe/unsafe-const-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,8 @@\n // A quick test of 'unsafe const fn' functionality\n \n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n const unsafe fn dummy(v: u32) -> u32 {\n     !v\n }"}, {"sha": "3031be720f02e8dbdd4514b290ee7052013f73ae", "filename": "src/test/ui/unsafe/unsafe-const-fn.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-const-fn.rs:10:18\n+   |\n+LL | const VAL: u32 = dummy(0xFFFF);\n+   |                  ^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1d6fa4cbf407d9357793be3e4901c35fa23a9d6f", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "df12e4415165ccc5cb7674ffef0a70bc5a55e0d2", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe fn f() { return; }\n \n fn main() {"}, {"sha": "1d6fa4cbf407d9357793be3e4901c35fa23a9d6f", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b08a7109dda57566934650b12c64157305f6a3fb", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-used-as-value.rs:5:5\n+  --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.stderr"}, {"sha": "2af0786617bccba4ea753432eee66ee822f3af07", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe fn f() { return; }\n \n fn main() {"}, {"sha": "b08a7109dda57566934650b12c64157305f6a3fb", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-used-as-value.rs:8:5\n+   |\n+LL |     x();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "d46ff7c41e91bc83b249dce580abeea309c39650", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95b342f0283dd213ef0248bc1a42e158dbef603/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=a95b342f0283dd213ef0248bc1a42e158dbef603", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1388;\n+const ROOT_ENTRY_LIMIT: usize = 1369;\n const ISSUES_ENTRY_LIMIT: usize = 2551;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}