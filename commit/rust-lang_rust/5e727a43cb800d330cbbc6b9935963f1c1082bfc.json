{"sha": "5e727a43cb800d330cbbc6b9935963f1c1082bfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzI3YTQzY2I4MDBkMzMwY2JiYzZiOTkzNTk2M2YxYzEwODJiZmM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T16:07:57Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T18:12:20Z"}, "message": "Rollup merge of #57034 - Zoxc:query-perf8, r=michaelwoerister\n\nInline tweaks\n\nr? @michaelwoerister", "tree": {"sha": "4c31a122eebeb85497f77efcff063b188ceef710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c31a122eebeb85497f77efcff063b188ceef710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e727a43cb800d330cbbc6b9935963f1c1082bfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwefoUACgkQ/vbIBR0O\nATy0CBAAwU0BIaVU3WKLsqKgsXeH9NObdng67ltjLbrlSYZ6/BX2QJq/HyG+S4Ps\nTyTbNigxORJ/xpLd9H1iHp/LvcVPzp2fihwEEr9aXYnAVMfyb3UNz6msSeob7acB\n9NIlXZ+Lm6UmvCiSo9vB0DC2Fn2nNRfn2v3OG5tn4gM8Z54Ka9pXSyGpUzj+Iso5\nJFr3ktSU0nlNsWdM/OTiF8ggj3PWfIoQRPOYTZCDaBPNH1KEufAmuAcnVcGQxlF7\nU8IqtW8drX9BvRecptaW+uEbScrSMZLdVGibGjG8LicOCMq0KctYsswMDoCsLJeh\nokUqFC8gZm4OdYZTB+XpDlmCUJXhmwin+RSIi/uyAPUDnqfFX0Q0pTXNAvKQESfy\nnEoAnEaDO42p4jLXEer0Bro0tY+4FwtVz7Enhbr6GshArg+XAIbeM+3oR6ujsl1Z\nWfdaap4s5d2fYYYNpvPLIm1S3nWkGTne7P8QiIuc7AWTgIrK+eRTS9dfeEjtewkK\nYNVzYiikqJsxcoSlptrL79AcpDK6DC/PXZBZJF9eRCWmbyA1ZE1PMsxmG/Nxt9hW\n5+CujUsC+Ds18Nr7mPYQ5RwitBXXPDtkBuFi0qHWe0wDRBxBI2fMNEZFnl/Lf1ni\nizpXuP1vykKV7JGmWC9rWTrmfan0GjofwRgn8NjZ+BEqaf8WrRM=\n=Xs5R\n-----END PGP SIGNATURE-----", "payload": "tree 4c31a122eebeb85497f77efcff063b188ceef710\nparent 9b2331d2ca3c5348922211f309198af465fa23ff\nparent 4f30a24e42137149373311f20525ac52cff44d94\nauthor kennytm <kennytm@gmail.com> 1545494877 +0800\ncommitter kennytm <kennytm@gmail.com> 1545502340 +0800\n\nRollup merge of #57034 - Zoxc:query-perf8, r=michaelwoerister\n\nInline tweaks\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e727a43cb800d330cbbc6b9935963f1c1082bfc", "html_url": "https://github.com/rust-lang/rust/commit/5e727a43cb800d330cbbc6b9935963f1c1082bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e727a43cb800d330cbbc6b9935963f1c1082bfc/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2331d2ca3c5348922211f309198af465fa23ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2331d2ca3c5348922211f309198af465fa23ff", "html_url": "https://github.com/rust-lang/rust/commit/9b2331d2ca3c5348922211f309198af465fa23ff"}, {"sha": "4f30a24e42137149373311f20525ac52cff44d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f30a24e42137149373311f20525ac52cff44d94", "html_url": "https://github.com/rust-lang/rust/commit/4f30a24e42137149373311f20525ac52cff44d94"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "9883752da0b69beec0010d4950752a8b014e689e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5e727a43cb800d330cbbc6b9935963f1c1082bfc", "patch": "@@ -1926,13 +1926,15 @@ pub mod tls {\n     /// to `value` during the call to `f`. It is restored to its previous value after.\n     /// This is used to set the pointer to the new ImplicitCtxt.\n     #[cfg(parallel_queries)]\n+    #[inline]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         rayon_core::tlv::with(value, f)\n     }\n \n     /// Gets Rayon's thread local variable which is preserved for Rayon jobs.\n     /// This is used to get the pointer to the current ImplicitCtxt.\n     #[cfg(parallel_queries)]\n+    #[inline]\n     fn get_tlv() -> usize {\n         rayon_core::tlv::get()\n     }\n@@ -1945,6 +1947,7 @@ pub mod tls {\n     /// It is restored to its previous value after.\n     /// This is used to set the pointer to the new ImplicitCtxt.\n     #[cfg(not(parallel_queries))]\n+    #[inline]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         let old = get_tlv();\n         let _reset = OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n@@ -2009,6 +2012,7 @@ pub mod tls {\n     }\n \n     /// Sets `context` as the new current ImplicitCtxt for the duration of the function `f`\n+    #[inline]\n     pub fn enter_context<'a, 'gcx: 'tcx, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'gcx, 'tcx>,\n                                                      f: F) -> R\n         where F: FnOnce(&ImplicitCtxt<'a, 'gcx, 'tcx>) -> R\n@@ -2080,6 +2084,7 @@ pub mod tls {\n     }\n \n     /// Allows access to the current ImplicitCtxt in a closure if one is available\n+    #[inline]\n     pub fn with_context_opt<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'gcx, 'tcx>>) -> R\n     {\n@@ -2097,6 +2102,7 @@ pub mod tls {\n \n     /// Allows access to the current ImplicitCtxt.\n     /// Panics if there is no ImplicitCtxt available\n+    #[inline]\n     pub fn with_context<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(&ImplicitCtxt<'a, 'gcx, 'tcx>) -> R\n     {\n@@ -2108,6 +2114,7 @@ pub mod tls {\n     /// with the same 'gcx lifetime as the TyCtxt passed in.\n     /// This will panic if you pass it a TyCtxt which has a different global interner from\n     /// the current ImplicitCtxt's tcx field.\n+    #[inline]\n     pub fn with_related_context<'a, 'gcx, 'tcx1, F, R>(tcx: TyCtxt<'a, 'gcx, 'tcx1>, f: F) -> R\n         where F: for<'b, 'tcx2> FnOnce(&ImplicitCtxt<'b, 'gcx, 'tcx2>) -> R\n     {\n@@ -2126,6 +2133,7 @@ pub mod tls {\n     /// is given an ImplicitCtxt with the same 'tcx and 'gcx lifetimes as the TyCtxt passed in.\n     /// This will panic if you pass it a TyCtxt which has a different global interner or\n     /// a different local interner from the current ImplicitCtxt's tcx field.\n+    #[inline]\n     pub fn with_fully_related_context<'a, 'gcx, 'tcx, F, R>(tcx: TyCtxt<'a, 'gcx, 'tcx>, f: F) -> R\n         where F: for<'b> FnOnce(&ImplicitCtxt<'b, 'gcx, 'tcx>) -> R\n     {\n@@ -2143,6 +2151,7 @@ pub mod tls {\n \n     /// Allows access to the TyCtxt in the current ImplicitCtxt.\n     /// Panics if there is no ImplicitCtxt available\n+    #[inline]\n     pub fn with<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'a, 'gcx, 'tcx>) -> R\n     {\n@@ -2151,6 +2160,7 @@ pub mod tls {\n \n     /// Allows access to the TyCtxt in the current ImplicitCtxt.\n     /// The closure is passed None if there is no ImplicitCtxt available\n+    #[inline]\n     pub fn with_opt<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(Option<TyCtxt<'a, 'gcx, 'tcx>>) -> R\n     {"}, {"sha": "0359890dd932780f1ca7f3d6e156bf4925ea585c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5e727a43cb800d330cbbc6b9935963f1c1082bfc", "patch": "@@ -174,6 +174,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n \n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n+    #[inline(always)]\n     pub(super) fn complete(self, result: &Q::Value, dep_node_index: DepNodeIndex) {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n@@ -230,6 +231,8 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n }\n \n impl<'a, 'tcx, Q: QueryDescription<'tcx>> Drop for JobOwner<'a, 'tcx, Q> {\n+    #[inline(never)]\n+    #[cold]\n     fn drop(&mut self) {\n         // Poison the query so jobs waiting on it panic\n         self.cache.borrow_mut().active.insert(self.key.clone(), QueryResult::Poisoned);"}, {"sha": "066e1739841d64615f6862ec683d46bed497ac76", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=5e727a43cb800d330cbbc6b9935963f1c1082bfc", "patch": "@@ -112,12 +112,14 @@ pub struct OnDrop<F: Fn()>(pub F);\n impl<F: Fn()> OnDrop<F> {\n       /// Forgets the function which prevents it from running.\n       /// Ensure that the function owns no memory, otherwise it will be leaked.\n+      #[inline]\n       pub fn disable(self) {\n             std::mem::forget(self);\n       }\n }\n \n impl<F: Fn()> Drop for OnDrop<F> {\n+      #[inline]\n       fn drop(&mut self) {\n             (self.0)();\n       }"}, {"sha": "3eb7bc14a927fe64a6fb8f5a4ef93ca9ca875fdb", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=5e727a43cb800d330cbbc6b9935963f1c1082bfc", "patch": "@@ -172,6 +172,7 @@ pub struct Decoder<'a> {\n }\n \n impl<'a> Decoder<'a> {\n+    #[inline]\n     pub fn new(data: &'a [u8], position: usize) -> Decoder<'a> {\n         Decoder {\n             data,"}, {"sha": "7195175db28a6181decfcfce1f2528934d41fc67", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e727a43cb800d330cbbc6b9935963f1c1082bfc/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=5e727a43cb800d330cbbc6b9935963f1c1082bfc", "patch": "@@ -740,6 +740,7 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n+    #[inline]\n     fn new_internal(\n         capacity: usize,\n         fallibility: Fallibility,\n@@ -755,12 +756,14 @@ impl<K, V> RawTable<K, V> {\n \n     /// Tries to create a new raw table from a given capacity. If it cannot allocate,\n     /// it returns with AllocErr.\n+    #[inline]\n     pub fn try_new(capacity: usize) -> Result<RawTable<K, V>, CollectionAllocErr> {\n         Self::new_internal(capacity, Fallible)\n     }\n \n     /// Creates a new raw table from a given capacity. All buckets are\n     /// initially empty.\n+    #[inline]\n     pub fn new(capacity: usize) -> RawTable<K, V> {\n         match Self::new_internal(capacity, Infallible) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),"}]}