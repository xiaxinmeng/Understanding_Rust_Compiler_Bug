{"sha": "a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjgyYWRiMTJhOWJmYmFhZjRlNDQ2YjRiMTdkY2IzNWE1NDYyMjM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-03-08T05:48:18Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-09T20:31:03Z"}, "message": "Add tests", "tree": {"sha": "7e77d0d5bdda442643e8b1894a9880930e211020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e77d0d5bdda442643e8b1894a9880930e211020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "html_url": "https://github.com/rust-lang/rust/commit/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875b31c33f6b0ccbb8590c2b3c9cbf1b11ed6165", "url": "https://api.github.com/repos/rust-lang/rust/commits/875b31c33f6b0ccbb8590c2b3c9cbf1b11ed6165", "html_url": "https://github.com/rust-lang/rust/commit/875b31c33f6b0ccbb8590c2b3c9cbf1b11ed6165"}], "stats": {"total": 141, "additions": 140, "deletions": 1}, "files": [{"sha": "59da77de622b9e85198dcf4bd55d7f20c237f802", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "patch": "@@ -59,6 +59,24 @@ macro_rules! test_mask_api {\n                 let mask = core_simd::$name::<8>::splat(false);\n                 let _ = mask.test(8);\n             }\n+\n+            #[test]\n+            fn any() {\n+                assert!(!core_simd::$name::<8>::splat(false).any());\n+                assert!(core_simd::$name::<8>::splat(true).any());\n+                let mut v = core_simd::$name::<8>::splat(false);\n+                v.set(2, true);\n+                assert!(v.any());\n+            }\n+\n+            #[test]\n+            fn all() {\n+                assert!(!core_simd::$name::<8>::splat(false).all());\n+                assert!(core_simd::$name::<8>::splat(true).all());\n+                let mut v = core_simd::$name::<8>::splat(false);\n+                v.set(2, true);\n+                assert!(!v.all());\n+            }\n         }\n     }\n }"}, {"sha": "d9f705cf39010ea063ffdf40af52f6ff3775ba9f", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "patch": "@@ -136,6 +136,83 @@ macro_rules! impl_binary_checked_op_test {\n     };\n }\n \n+#[macro_export]\n+macro_rules! impl_common_integer_tests {\n+    { $vector:ident, $scalar:ident } => {\n+        test_helpers::test_lanes! {\n+            fn wrapping_sum<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).wrapping_sum(),\n+                        x.iter().copied().fold(0 as $scalar, $scalar::wrapping_add),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+\n+            fn wrapping_product<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).wrapping_product(),\n+                        x.iter().copied().fold(1 as $scalar, $scalar::wrapping_mul),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+\n+            fn and_lanes<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).and_lanes(),\n+                        x.iter().copied().fold(-1i8 as $scalar, <$scalar as core::ops::BitAnd>::bitand),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+\n+            fn or_lanes<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).or_lanes(),\n+                        x.iter().copied().fold(0 as $scalar, <$scalar as core::ops::BitOr>::bitor),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+\n+            fn xor_lanes<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).xor_lanes(),\n+                        x.iter().copied().fold(0 as $scalar, <$scalar as core::ops::BitXor>::bitxor),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+\n+            fn max_lane<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).max_lane(),\n+                        x.iter().copied().max().unwrap(),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+\n+            fn min_lane<const LANES: usize>() {\n+                test_helpers::test_1(&|x| {\n+                    test_helpers::prop_assert_biteq! (\n+                        $vector::<LANES>::from_array(x).min_lane(),\n+                        x.iter().copied().min().unwrap(),\n+                    );\n+                    Ok(())\n+                });\n+            }\n+        }\n+    }\n+}\n+\n /// Implement tests for signed integers.\n #[macro_export]\n macro_rules! impl_signed_tests {\n@@ -144,6 +221,8 @@ macro_rules! impl_signed_tests {\n             type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n             type Scalar = $scalar;\n \n+            impl_common_integer_tests! { Vector, Scalar }\n+\n             test_helpers::test_lanes! {\n                 fn neg<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n@@ -241,6 +320,8 @@ macro_rules! impl_unsigned_tests {\n             type Vector<const LANES: usize> = core_simd::$vector<LANES>;\n             type Scalar = $scalar;\n \n+            impl_common_integer_tests! { Vector, Scalar }\n+\n             test_helpers::test_lanes_panic! {\n                 fn rem_zero_panic<const LANES: usize>() {\n                     let a = Vector::<LANES>::splat(42);\n@@ -397,6 +478,46 @@ macro_rules! impl_float_tests {\n                         },\n                     ).unwrap();\n                 }\n+\n+                fn sum<const LANES: usize>() {\n+                    test_helpers::test_1(&|x| {\n+                        test_helpers::prop_assert_biteq! (\n+                            Vector::<LANES>::from_array(x).sum(),\n+                            x.iter().copied().fold(0 as Scalar, <Scalar as core::ops::Add>::add),\n+                        );\n+                        Ok(())\n+                    });\n+                }\n+\n+                fn product<const LANES: usize>() {\n+                    test_helpers::test_1(&|x| {\n+                        test_helpers::prop_assert_biteq! (\n+                            Vector::<LANES>::from_array(x).product(),\n+                            x.iter().copied().fold(1. as Scalar, <Scalar as core::ops::Mul>::mul),\n+                        );\n+                        Ok(())\n+                    });\n+                }\n+\n+                fn max_lane<const LANES: usize>() {\n+                    test_helpers::test_1(&|x| {\n+                        test_helpers::prop_assert_biteq! (\n+                            Vector::<LANES>::from_array(x).max_lane(),\n+                            x.iter().copied().fold(Scalar::NAN, Scalar::max),\n+                        );\n+                        Ok(())\n+                    });\n+                }\n+\n+                fn min_lane<const LANES: usize>() {\n+                    test_helpers::test_1(&|x| {\n+                        test_helpers::prop_assert_biteq! (\n+                            Vector::<LANES>::from_array(x).min_lane(),\n+                            x.iter().copied().fold(Scalar::NAN, Scalar::min),\n+                        );\n+                        Ok(())\n+                    });\n+                }\n             }\n         }\n     }"}, {"sha": "00350e22418d029a63c9704e82205c14e3dd405f", "filename": "crates/test_helpers/src/biteq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/crates%2Ftest_helpers%2Fsrc%2Fbiteq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b82adb12a9bfbaaf4e446b4b17dcb35a546223/crates%2Ftest_helpers%2Fsrc%2Fbiteq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Fbiteq.rs?ref=a7b82adb12a9bfbaaf4e446b4b17dcb35a546223", "patch": "@@ -95,7 +95,7 @@ impl<T: BitEq> core::fmt::Debug for BitEqWrapper<'_, T> {\n \n #[macro_export]\n macro_rules! prop_assert_biteq {\n-    { $a:expr, $b:expr } => {\n+    { $a:expr, $b:expr $(,)? } => {\n         {\n             use $crate::biteq::BitEqWrapper;\n             let a = $a;"}]}