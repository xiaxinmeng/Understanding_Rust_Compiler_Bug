{"sha": "1b8c7784e58de489331dd8957a889916a0dcbee3", "node_id": "C_kwDOAAsO6NoAKDFiOGM3Nzg0ZTU4ZGU0ODkzMzFkZDg5NTdhODg5OTE2YTBkY2JlZTM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T11:48:17Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T11:48:17Z"}, "message": "Add new `ToPredicate` impls and `TraitRef` methods to remove some `ty::Binber::dummy` calls", "tree": {"sha": "17771a54655cbbf234a6f8600c73a931518da1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17771a54655cbbf234a6f8600c73a931518da1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8c7784e58de489331dd8957a889916a0dcbee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8c7784e58de489331dd8957a889916a0dcbee3", "html_url": "https://github.com/rust-lang/rust/commit/1b8c7784e58de489331dd8957a889916a0dcbee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8c7784e58de489331dd8957a889916a0dcbee3/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2532fb531919478b2655925cacb614d8c9f569", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2532fb531919478b2655925cacb614d8c9f569", "html_url": "https://github.com/rust-lang/rust/commit/4f2532fb531919478b2655925cacb614d8c9f569"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "1da20579021a1d44db1be444b592eff19c9be801", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -157,13 +157,8 @@ impl Qualif for NeedsNonConstDrop {\n             cx.tcx,\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n-            ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-                cx.tcx,\n-                LangItem::Destruct,\n-                cx.body.span,\n-                [ty],\n-            ))\n-            .with_constness(ty::BoundConstness::ConstIfConst),\n+            ty::TraitRef::from_lang_item(cx.tcx, LangItem::Destruct, cx.body.span, [ty])\n+                .with_constness(ty::BoundConstness::ConstIfConst),\n         );\n \n         let infcx = cx.tcx.infer_ctxt().build();"}, {"sha": "f25eaa785044adb94ccea7b99cf15a86cb230f92", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> Bounds<'tcx> {\n \n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n-        let trait_ref = ty::Binder::dummy(ty::TraitRef::new(tcx, sized_def_id, [ty]));\n+        let trait_ref = ty::TraitRef::new(tcx, sized_def_id, [ty]);\n         // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n         self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n     }"}, {"sha": "62a227082106c94fb6c76ac229ec5e49bbae20ff", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -1207,6 +1207,18 @@ impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for Binder<'tcx, TraitRef\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for TraitRef<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        ty::Binder::dummy(self).to_predicate(tcx)\n+    }\n+}\n+\n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for TraitPredicate<'tcx> {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        ty::Binder::dummy(self)\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::Trait(p))).to_predicate(tcx)\n@@ -1231,6 +1243,12 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx> for TraitPredicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::Clause(Clause::Trait(self)).to_predicate(tcx)\n+    }\n+}\n+\n impl<'tcx> Predicate<'tcx> {\n     pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {\n         let predicate = self.kind();"}, {"sha": "1849a66fa8f64c04eefdad4cc757f472ee2f74cb", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -871,6 +871,18 @@ impl<'tcx> TraitRef<'tcx> {\n         )\n     }\n \n+    /// Converts this trait ref to a trait predicate with a given `constness` and a positive polarity.\n+    #[inline]\n+    pub fn with_constness(self, constness: ty::BoundConstness) -> ty::TraitPredicate<'tcx> {\n+        ty::TraitPredicate { trait_ref: self, constness, polarity: ty::ImplPolarity::Positive }\n+    }\n+\n+    /// Converts this trait ref to a trait predicate without `const` and a positive polarity.\n+    #[inline]\n+    pub fn without_const(self) -> ty::TraitPredicate<'tcx> {\n+        self.with_constness(ty::BoundConstness::NotConst)\n+    }\n+\n     #[inline]\n     pub fn self_ty(&self) -> Ty<'tcx> {\n         self.substs.type_at(0)"}, {"sha": "af1c253c3add2d5181d6892447ed85f5495435a9", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -127,7 +127,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     ty: Ty<'tcx>,\n     def_id: DefId,\n ) -> bool {\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::new(infcx.tcx, def_id, [ty]));\n+    let trait_ref = ty::TraitRef::new(infcx.tcx, def_id, [ty]);\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const())\n }\n "}, {"sha": "3f526e70522a8b9d8274faef85ec3266a4ea0062", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -769,13 +769,10 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(ty::TraitRef::new(\n-            tcx,\n-            unsize_did,\n-            [tcx.types.self_param, unsized_self_ty],\n-        ))\n-        .without_const()\n-        .to_predicate(tcx);\n+        let unsize_predicate =\n+            ty::TraitRef::new(tcx, unsize_did, [tcx.types.self_param, unsized_self_ty])\n+                .without_const()\n+                .to_predicate(tcx);\n \n         // U: Trait<Arg1, ..., ArgN>\n         let trait_predicate = {"}, {"sha": "f46bf36ea21486ca72d0bf9a6423a5d8814e5ccb", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -1319,7 +1319,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n         // FIXME(named-returns): Binders\n-        let trait_predicate = ty::Binder::dummy(ty::TraitRef::new(tcx, trait_def_id, trait_substs));\n+        let trait_predicate = ty::TraitRef::new(tcx, trait_def_id, trait_substs);\n \n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n@@ -1682,10 +1682,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                             if selcx.infcx.predicate_must_hold_modulo_regions(\n                                 &obligation.with(\n                                     selcx.tcx(),\n-                                    ty::Binder::dummy(\n-                                        ty::TraitRef::from_lang_item(selcx.tcx(), LangItem::Sized, obligation.cause.span(),[self_ty]),\n-                                    )\n-                                    .without_const(),\n+                                    ty::TraitRef::from_lang_item(selcx.tcx(), LangItem::Sized, obligation.cause.span(),[self_ty])\n+                                        .without_const(),\n                                 ),\n                             ) =>\n                         {\n@@ -1948,12 +1946,12 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n             )\n         });\n         if check_is_sized {\n-            let sized_predicate = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+            let sized_predicate = ty::TraitRef::from_lang_item(\n                 tcx,\n                 LangItem::Sized,\n                 obligation.cause.span(),\n                 [self_ty],\n-            ))\n+            )\n             .without_const();\n             obligations.push(obligation.with(tcx, sized_predicate));\n         }"}, {"sha": "422285d947400a7153499990fb7e8eb03a61ca1e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -1049,12 +1049,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-                    tcx,\n-                    LangItem::Sized,\n-                    cause.span,\n-                    [source],\n-                ));\n+                let tr = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, cause.span, [source]);\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "78efcce572d4bf9333c2083b598aafb73d511cb2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c7784e58de489331dd8957a889916a0dcbee3/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=1b8c7784e58de489331dd8957a889916a0dcbee3", "patch": "@@ -62,9 +62,8 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(tcx, sized_trait, [ty]))\n-                .without_const()\n-                .to_predicate(tcx);\n+            let sized_predicate =\n+                ty::TraitRef::new(tcx, sized_trait, [ty]).without_const().to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;\n             if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }\n         }"}]}