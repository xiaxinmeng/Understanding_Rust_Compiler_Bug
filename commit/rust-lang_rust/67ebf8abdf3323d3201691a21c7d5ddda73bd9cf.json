{"sha": "67ebf8abdf3323d3201691a21c7d5ddda73bd9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZWJmOGFiZGYzMzIzZDMyMDE2OTFhMjFjN2Q1ZGRkYTczYmQ5Y2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-03-02T05:38:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-03-09T21:17:26Z"}, "message": "mk: dist-installer builds a binary installer", "tree": {"sha": "5a993ec4c5247ef36990fb94ee03bf8f937f8f99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a993ec4c5247ef36990fb94ee03bf8f937f8f99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf", "html_url": "https://github.com/rust-lang/rust/commit/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111137b5f5d6ed1a633edd319244e69457609f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/111137b5f5d6ed1a633edd319244e69457609f25", "html_url": "https://github.com/rust-lang/rust/commit/111137b5f5d6ed1a633edd319244e69457609f25"}], "stats": {"total": 286, "additions": 286, "deletions": 0}, "files": [{"sha": "b5fd9d1b2290c152287f9745401003e05460e4f9", "filename": "mk/dist.mk", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=67ebf8abdf3323d3201691a21c7d5ddda73bd9cf", "patch": "@@ -71,6 +71,7 @@ dist-prepare-win: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n dist-prepare-win: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n dist-prepare-win: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-prepare-win: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-prepare-win: PREPARE_CLEAN=true\n dist-prepare-win: prepare-base\n \n endif\n@@ -156,3 +157,24 @@ distcheck-osx: $(PKG_OSX)\n \t@echo -----------------------------------------------\n \n endif\n+\n+dist-installer: $(foreach host,$(CFG_HOST),dist-installer-$(host))\n+\n+define DEF_INSTALLER\n+dist-installer-$(1): PREPARE_HOST=$(1)\n+dist-installer-$(1): PREPARE_TARGETS=$(1)\n+dist-installer-$(1): PREPARE_STAGE=2\n+dist-installer-$(1): PREPARE_DEST_DIR=tmp/dist/installer-$(1)\n+dist-installer-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+dist-installer-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+dist-installer-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+dist-installer-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-installer-$(1): PREPARE_CLEAN=true\n+dist-installer-$(1): prepare-base\n+\t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find -type f) \\\n+      > $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/$$(CFG_RUSTLIBDIR)/manifest\n+\t$$(Q)cp $$(S)src/etc/install.sh $$(PREPARE_DEST_DIR)\n+endef\n+\n+$(foreach host,$(CFG_HOST),\\\n+  $(eval $(call DEF_INSTALLER,$(host))))"}, {"sha": "28e97195973882bf8573cc7314e793dc98a7e613", "filename": "src/etc/install.sh", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/67ebf8abdf3323d3201691a21c7d5ddda73bd9cf/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=67ebf8abdf3323d3201691a21c7d5ddda73bd9cf", "patch": "@@ -0,0 +1,264 @@\n+#!/bin/sh\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+msg() {\n+    echo \"install: $1\"\n+}\n+\n+step_msg() {\n+    msg\n+    msg \"$1\"\n+    msg\n+}\n+\n+warn() {\n+    echo \"install: WARNING: $1\"\n+}\n+\n+err() {\n+    echo \"install: error: $1\"\n+    exit 1\n+}\n+\n+need_ok() {\n+    if [ $? -ne 0 ]\n+    then\n+        err \"$1\"\n+    fi\n+}\n+\n+putvar() {\n+    local T\n+    eval T=\\$$1\n+    eval TLEN=\\${#$1}\n+    if [ $TLEN -gt 35 ]\n+    then\n+        printf \"install: %-20s := %.35s ...\\n\" $1 \"$T\"\n+    else\n+        printf \"install: %-20s := %s %s\\n\" $1 \"$T\" \"$2\"\n+    fi\n+    printf \"%-20s := %s\\n\" $1 \"$T\" >>config.tmp\n+}\n+\n+valopt() {\n+    VAL_OPTIONS=\"$VAL_OPTIONS $1\"\n+\n+    local OP=$1\n+    local DEFAULT=$2\n+    shift\n+    shift\n+    local DOC=\"$*\"\n+    if [ $HELP -eq 0 ]\n+    then\n+        local UOP=$(echo $OP | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n+        local V=\"CFG_${UOP}\"\n+        eval $V=\"$DEFAULT\"\n+        for arg in $CFG_ARGS\n+        do\n+            if echo \"$arg\" | grep -q -- \"--$OP=\"\n+            then\n+                val=$(echo \"$arg\" | cut -f2 -d=)\n+                eval $V=$val\n+            fi\n+        done\n+        putvar $V\n+    else\n+        if [ -z \"$DEFAULT\" ]\n+        then\n+            DEFAULT=\"<none>\"\n+        fi\n+        OP=\"${OP}=[${DEFAULT}]\"\n+        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n+    fi\n+}\n+\n+opt() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+\n+    local OP=$1\n+    local DEFAULT=$2\n+    shift\n+    shift\n+    local DOC=\"$*\"\n+    local FLAG=\"\"\n+\n+    if [ $DEFAULT -eq 0 ]\n+    then\n+        FLAG=\"enable\"\n+    else\n+        FLAG=\"disable\"\n+        DOC=\"don't $DOC\"\n+    fi\n+\n+    if [ $HELP -eq 0 ]\n+    then\n+        for arg in $CFG_ARGS\n+        do\n+            if [ \"$arg\" = \"--${FLAG}-${OP}\" ]\n+            then\n+                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n+                FLAG=$(echo $FLAG | tr 'a-z' 'A-Z')\n+                local V=\"CFG_${FLAG}_${OP}\"\n+                eval $V=1\n+                putvar $V\n+            fi\n+        done\n+    else\n+        if [ ! -z \"$META\" ]\n+        then\n+            OP=\"$OP=<$META>\"\n+        fi\n+        printf \"    --%-30s %s\\n\" \"$FLAG-$OP\" \"$DOC\"\n+     fi\n+}\n+\n+flag() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+\n+    local OP=$1\n+    shift\n+    local DOC=\"$*\"\n+\n+    if [ $HELP -eq 0 ]\n+    then\n+        for arg in $CFG_ARGS\n+        do\n+            if [ \"$arg\" = \"--${OP}\" ]\n+            then\n+                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n+                local V=\"CFG_${OP}\"\n+                eval $V=1\n+                putvar $V\n+            fi\n+        done\n+    else\n+        if [ ! -z \"$META\" ]\n+        then\n+            OP=\"$OP=<$META>\"\n+        fi\n+        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n+     fi\n+}\n+\n+validate_opt () {\n+    for arg in $CFG_ARGS\n+    do\n+        isArgValid=0\n+        for option in $BOOL_OPTIONS\n+        do\n+            if test --disable-$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+            if test --enable-$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+            if test --$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+        done\n+        for option in $VAL_OPTIONS\n+        do\n+            if echo \"$arg\" | grep -q -- \"--$option=\"\n+            then\n+                isArgValid=1\n+            fi\n+        done\n+        if [ \"$arg\" = \"--help\" ]\n+        then\n+            echo\n+            echo \"No more help available for Configure options,\"\n+            echo \"check the Wiki or join our IRC channel\"\n+            break\n+        else\n+            if test $isArgValid -eq 0\n+            then\n+                err \"Option '$arg' is not recognized\"\n+            fi\n+        fi\n+    done\n+}\n+\n+CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n+CFG_SELF=\"$0\"\n+CFG_ARGS=\"$@\"\n+\n+HELP=0\n+if [ \"$1\" = \"--help\" ]\n+then\n+    HELP=1\n+    shift\n+    echo\n+    echo \"Usage: $CFG_SELF [options]\"\n+    echo\n+    echo \"Options:\"\n+    echo\n+else\n+    step_msg \"processing $CFG_SELF args\"\n+fi\n+\n+OPTIONS=\"\"\n+BOOL_OPTIONS=\"\"\n+VAL_OPTIONS=\"\"\n+\n+flag uninstall \"only uninstall from the installation prefix\"\n+valopt prefix \"/usr/local\" \"set installation prefix\"\n+\n+if [ $HELP -eq 1 ]\n+then\n+    echo\n+    exit 0\n+fi\n+\n+step_msg \"validating $CFG_SELF args\"\n+validate_opt\n+\n+# First, uninstall from the installation prefix\n+# FIXME: Hardcoded 'rustlib' ignores CFG_RUSTLIBDIR\n+if [ -f \"${CFG_PREFIX}/lib/rustlib/manifest\" ]\n+then\n+\twhile read p; do\n+\t\tmsg \"uninstall ${CFG_PREFIX}/$p\"\n+\t\trm \"${CFG_PREFIX}/$p\"\n+\t\tneed_ok \"failed to remove file\"\n+\tdone < \"${CFG_PREFIX}/lib/rustlib/manifest\"\n+\n+    # Remove 'rustlib' directory\n+\tmsg \"uninstall ${CFG_PREFIX}/lib/rustlib\"\n+\trm -r \"${CFG_PREFIX}/lib/rustlib\"\n+\tneed_ok \"failed to remove rustlib\"\n+fi\n+\n+# If we're only uninstalling then exit\n+if [ -n \"${CFG_UNINSTALL}\" ]\n+then\n+\texit 0\n+fi\n+\n+# Iterate through the new manifest and install files\n+while read p; do\n+\n+\tumask 022 && mkdir -p \"${CFG_PREFIX}/$(dirname $p)\"\n+\tneed_ok \"directory creation failed\"\n+\n+\tmsg \"${CFG_PREFIX}/$p\"\n+\tif echo \"$p\" | grep \"/bin/\" > /dev/null\n+\tthen\n+\t\tinstall -m755 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+\telse\n+\t\tinstall -m644 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+\tfi\n+\tneed_ok \"file creation failed\"\n+\n+# The manifest lists all files to install\n+done < \"${CFG_SRC_DIR}/lib/rustlib/manifest\""}]}