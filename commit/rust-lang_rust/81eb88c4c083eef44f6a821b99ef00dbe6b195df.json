{"sha": "81eb88c4c083eef44f6a821b99ef00dbe6b195df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZWI4OGM0YzA4M2VlZjQ0ZjZhODIxYjk5ZWYwMGRiZTZiMTk1ZGY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-17T06:24:49Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-17T06:24:49Z"}, "message": "Respect leading whitespace in original comment when wrapping comment", "tree": {"sha": "6cca280a3b47ef267f2b0a0ca8bfd7da4f2b17a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cca280a3b47ef267f2b0a0ca8bfd7da4f2b17a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81eb88c4c083eef44f6a821b99ef00dbe6b195df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81eb88c4c083eef44f6a821b99ef00dbe6b195df", "html_url": "https://github.com/rust-lang/rust/commit/81eb88c4c083eef44f6a821b99ef00dbe6b195df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81eb88c4c083eef44f6a821b99ef00dbe6b195df/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366621eb461c29371d385b049843ef48e4696ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/366621eb461c29371d385b049843ef48e4696ebc", "html_url": "https://github.com/rust-lang/rust/commit/366621eb461c29371d385b049843ef48e4696ebc"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "6423ebca47716ce6a9e546edb0da12bf8dfae662", "filename": "src/comment.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/81eb88c4c083eef44f6a821b99ef00dbe6b195df/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81eb88c4c083eef44f6a821b99ef00dbe6b195df/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=81eb88c4c083eef44f6a821b99ef00dbe6b195df", "patch": "@@ -305,27 +305,39 @@ fn rewrite_comment_inner(\n             line\n         })\n         .map(|s| left_trim_comment_line(s, &style))\n-        .map(|line| {\n+        .map(|(line, has_leading_whitespace)| {\n             if orig.starts_with(\"/*\") && line_breaks == 0 {\n-                line.trim_left()\n+                (\n+                    line.trim_left(),\n+                    has_leading_whitespace || config.normalize_comments(),\n+                )\n             } else {\n-                line\n+                (line, has_leading_whitespace || config.normalize_comments())\n             }\n         });\n \n-    let mut result = opener.to_owned();\n+    let mut result = String::with_capacity(orig.len() * 2);\n+    result.push_str(opener);\n     let mut is_prev_line_multi_line = false;\n     let mut inside_code_block = false;\n     let comment_line_separator = format!(\"\\n{}{}\", indent_str, line_start);\n-    for line in lines {\n+    for (i, (line, has_leading_whitespace)) in lines.enumerate() {\n+        let is_last = i == count_newlines(orig);\n         if result == opener {\n+            let force_leading_whitespace = opener == \"/* \" && count_newlines(orig) == 0;\n+            if !has_leading_whitespace && !force_leading_whitespace && result.ends_with(' ') {\n+                result.pop();\n+            }\n             if line.is_empty() {\n                 continue;\n             }\n         } else if is_prev_line_multi_line && !line.is_empty() {\n             result.push(' ')\n         } else {\n             result.push_str(&comment_line_separator);\n+            if !has_leading_whitespace && result.ends_with(' ') {\n+                result.pop();\n+            }\n         }\n \n         if line.starts_with(\"```\") {\n@@ -473,32 +485,33 @@ fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<\n }\n \n /// Trims comment characters and possibly a single space from the left of a string.\n-/// Does not trim all whitespace.\n-fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> &'a str {\n+/// Does not trim all whitespace. If a single space is trimmed from the left of the string,\n+/// this function returns true.\n+fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> (&'a str, bool) {\n     if line.starts_with(\"//! \") || line.starts_with(\"/// \") || line.starts_with(\"/*! \")\n         || line.starts_with(\"/** \")\n     {\n-        &line[4..]\n+        (&line[4..], true)\n     } else if let CommentStyle::Custom(opener) = *style {\n         if line.starts_with(opener) {\n-            &line[opener.len()..]\n+            (&line[opener.len()..], true)\n         } else {\n-            &line[opener.trim_right().len()..]\n+            (&line[opener.trim_right().len()..], false)\n         }\n     } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\")\n         || line.starts_with(\"///\") || line.starts_with(\"** \")\n         || line.starts_with(\"/*!\")\n         || (line.starts_with(\"/**\") && !line.starts_with(\"/**/\"))\n     {\n-        &line[3..]\n+        (&line[3..], line.chars().nth(2).unwrap() == ' ')\n     } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\")\n         || line.starts_with(\"**\")\n     {\n-        &line[2..]\n+        (&line[2..], line.chars().nth(1).unwrap() == ' ')\n     } else if line.starts_with('*') {\n-        &line[1..]\n+        (&line[1..], false)\n     } else {\n-        line\n+        (line, line.starts_with(' '))\n     }\n }\n "}]}