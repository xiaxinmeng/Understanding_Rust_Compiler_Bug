{"sha": "c4d4869f23dbe481c42a8fb24d2bc43e36b88933", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZDQ4NjlmMjNkYmU0ODFjNDJhOGZiMjRkMmJjNDNlMzZiODg5MzM=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-01T07:11:43Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-01T07:11:43Z"}, "message": "remove debug eprintln!", "tree": {"sha": "daa632a8bde62855c1063ba6c4db387806c1bcd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa632a8bde62855c1063ba6c4db387806c1bcd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4d4869f23dbe481c42a8fb24d2bc43e36b88933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d4869f23dbe481c42a8fb24d2bc43e36b88933", "html_url": "https://github.com/rust-lang/rust/commit/c4d4869f23dbe481c42a8fb24d2bc43e36b88933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4d4869f23dbe481c42a8fb24d2bc43e36b88933/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bbfc2543af326783cce7d6975efb809766a534", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bbfc2543af326783cce7d6975efb809766a534", "html_url": "https://github.com/rust-lang/rust/commit/b7bbfc2543af326783cce7d6975efb809766a534"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "1065eb619d2b3e7de4cb0febaeb5dc913fe0be5a", "filename": "crates/ra_ide/src/link_rewrite.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4d4869f23dbe481c42a8fb24d2bc43e36b88933/crates%2Fra_ide%2Fsrc%2Flink_rewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d4869f23dbe481c42a8fb24d2bc43e36b88933/crates%2Fra_ide%2Fsrc%2Flink_rewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flink_rewrite.rs?ref=c4d4869f23dbe481c42a8fb24d2bc43e36b88933", "patch": "@@ -159,8 +159,6 @@ fn try_resolve_intra(\n     link_text: &str,\n     link_target: &str,\n ) -> Option<(String, String)> {\n-    eprintln!(\"resolving intra\");\n-\n     // Set link_target for implied shortlinks\n     let link_target =\n         if link_target.is_empty() { link_text.trim_matches('`') } else { link_target };\n@@ -175,7 +173,7 @@ fn try_resolve_intra(\n     let path = Path::parse(link_target).ok()?;\n     let modpath = ModPath::from_src(path, &Hygiene::new_unhygienic()).unwrap();\n \n-    // Resolve it relative to symbol's location (according to the RFC this should consider small scopes\n+    // Resolve it relative to symbol's location (according to the RFC this should consider small scopes)\n     let resolver = definition.resolver(db)?;\n \n     let resolved = resolver.resolve_module_path_in_items(db, &modpath);\n@@ -219,8 +217,6 @@ fn try_resolve_intra(\n \n /// Try to resolve path to local documentation via path-based links (i.e. `../gateway/struct.Shard.html`).\n fn try_resolve_path(db: &RootDatabase, definition: &Definition, link: &str) -> Option<String> {\n-    eprintln!(\"resolving path\");\n-\n     if !link.contains(\"#\") && !link.contains(\".html\") {\n         return None;\n     }"}]}