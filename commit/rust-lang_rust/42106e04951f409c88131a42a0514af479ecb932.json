{"sha": "42106e04951f409c88131a42a0514af479ecb932", "node_id": "C_kwDOAAsO6NoAKDQyMTA2ZTA0OTUxZjQwOWM4ODEzMWE0MmEwNTE0YWY0NzllY2I5MzI", "commit": {"author": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2022-12-17T23:16:04Z"}, "committer": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2022-12-18T00:02:45Z"}, "message": "Add lint `fn_null_check`", "tree": {"sha": "61a0dbf6f7b817206bbfc10adcbe9752aa9f1c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a0dbf6f7b817206bbfc10adcbe9752aa9f1c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42106e04951f409c88131a42a0514af479ecb932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42106e04951f409c88131a42a0514af479ecb932", "html_url": "https://github.com/rust-lang/rust/commit/42106e04951f409c88131a42a0514af479ecb932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42106e04951f409c88131a42a0514af479ecb932/comments", "author": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc67d08569b5cf847242532f99c5aca838dbdeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc67d08569b5cf847242532f99c5aca838dbdeb", "html_url": "https://github.com/rust-lang/rust/commit/3cc67d08569b5cf847242532f99c5aca838dbdeb"}], "stats": {"total": 197, "additions": 196, "deletions": 1}, "files": [{"sha": "17ff182c7beebb1e6cbef5b5ba04081788a3cd81", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42106e04951f409c88131a42a0514af479ecb932/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/42106e04951f409c88131a42a0514af479ecb932/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=42106e04951f409c88131a42a0514af479ecb932", "patch": "@@ -4203,6 +4203,7 @@ Released 2018-09-13\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n [`float_equality_without_abs`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_equality_without_abs\n [`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n+[`fn_null_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_null_check\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any"}, {"sha": "480a65ac70ca2345ca760da44501b89e26754dd9", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42106e04951f409c88131a42a0514af479ecb932/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42106e04951f409c88131a42a0514af479ecb932/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=42106e04951f409c88131a42a0514af479ecb932", "patch": "@@ -161,6 +161,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::float_literal::LOSSY_FLOAT_LITERAL_INFO,\n     crate::floating_point_arithmetic::IMPRECISE_FLOPS_INFO,\n     crate::floating_point_arithmetic::SUBOPTIMAL_FLOPS_INFO,\n+    crate::fn_null_check::FN_NULL_CHECK_INFO,\n     crate::format::USELESS_FORMAT_INFO,\n     crate::format_args::FORMAT_IN_FORMAT_ARGS_INFO,\n     crate::format_args::TO_STRING_IN_FORMAT_ARGS_INFO,"}, {"sha": "d0e82500dd0c26c371885cdb5a1205f1e1edd697", "filename": "clippy_lints/src/fn_null_check.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/42106e04951f409c88131a42a0514af479ecb932/clippy_lints%2Fsrc%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42106e04951f409c88131a42a0514af479ecb932/clippy_lints%2Fsrc%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffn_null_check.rs?ref=42106e04951f409c88131a42a0514af479ecb932", "patch": "@@ -0,0 +1,129 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n+use if_chain::if_chain;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for comparing a function pointer to null.\n+    ///\n+    /// ### Why is this bad?\n+    /// Function pointers are assumed to not be null.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let fn_ptr: fn() = /* somehow obtained nullable function pointer */\n+    ///\n+    /// if (fn_ptr as *const ()).is_null() { ... }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let fn_ptr: Option<fn()> = /* somehow obtained nullable function pointer */\n+    ///\n+    /// if fn_ptr.is_none() { ... }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub FN_NULL_CHECK,\n+    correctness,\n+    \"`fn()` type assumed to be nullable\"\n+}\n+declare_lint_pass!(FnNullCheck => [FN_NULL_CHECK]);\n+\n+const LINT_MSG: &str = \"function pointer assumed to be nullable, even though it isn't\";\n+const HELP_MSG: &str = \"try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\";\n+\n+fn is_fn_ptr_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let ExprKind::Cast(cast_expr, cast_ty) = expr.kind;\n+        if let TyKind::Ptr(_) = cast_ty.kind;\n+        if cx.typeck_results().expr_ty_adjusted(cast_expr).is_fn();\n+        then {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        // Catching:\n+        // (fn_ptr as *<const/mut> <ty>).is_null()\n+        if_chain! {\n+            if let ExprKind::MethodCall(method_name, receiver, _, _) = expr.kind;\n+            if method_name.ident.as_str() == \"is_null\";\n+            if is_fn_ptr_cast(cx, receiver);\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    FN_NULL_CHECK,\n+                    expr.span,\n+                    LINT_MSG,\n+                    None,\n+                    HELP_MSG\n+                );\n+            }\n+        }\n+\n+        if let ExprKind::Binary(op, left, right) = expr.kind\n+            && let BinOpKind::Eq = op.node\n+        {\n+            let to_check: &Expr<'_>;\n+            if is_fn_ptr_cast(cx, left) {\n+                to_check = right;\n+            } else if is_fn_ptr_cast(cx, right) {\n+                to_check = left;\n+            } else {\n+                return;\n+            }\n+\n+            // Catching:\n+            // (fn_ptr as *<const/mut> <ty>) == <const that evaluates to null_ptr>\n+            let c = constant(cx, cx.typeck_results(), to_check);\n+            if let Some((Constant::RawPtr(0), _)) = c {\n+                span_lint_and_help(\n+                    cx,\n+                    FN_NULL_CHECK,\n+                    expr.span,\n+                    LINT_MSG,\n+                    None,\n+                    HELP_MSG\n+                );\n+                return;\n+            }\n+\n+            // Catching:\n+            // (fn_ptr as *<const/mut> <ty>) == (0 as <ty>)\n+            if let ExprKind::Cast(cast_expr, _) = to_check.kind && is_integer_literal(cast_expr, 0) {\n+                span_lint_and_help(\n+                    cx,\n+                    FN_NULL_CHECK,\n+                    expr.span,\n+                    LINT_MSG,\n+                    None,\n+                    HELP_MSG\n+                );\n+                return;\n+            }\n+\n+            // Catching:\n+            // (fn_ptr as *<const/mut> <ty>) == std::ptr::null()\n+            if let ExprKind::Call(func, []) = to_check.kind &&\n+                is_path_diagnostic_item(cx, func, sym::ptr_null)\n+            {\n+                span_lint_and_help(\n+                    cx,\n+                    FN_NULL_CHECK,\n+                    expr.span,\n+                    LINT_MSG,\n+                    None,\n+                    HELP_MSG\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "032b4c1e2d202a754a27cc9a66b2aa6fb990bb39", "filename": "clippy_lints/src/transmute/transmute_null_to_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42106e04951f409c88131a42a0514af479ecb932/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42106e04951f409c88131a42a0514af479ecb932/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs?ref=42106e04951f409c88131a42a0514af479ecb932", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n use super::TRANSMUTE_NULL_TO_FN;\n \n const LINT_MSG: &str = \"transmuting a known null pointer into a function pointer\";\n-const NOTE_MSG: &str = \"this transmute results in a null function pointer\";\n+const NOTE_MSG: &str = \"this transmute results in undefined behavior\";\n const HELP_MSG: &str =\n     \"try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\";\n "}, {"sha": "df5bc8420d57b4872241d06fba47dea030baa94f", "filename": "tests/ui/fn_null_check.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42106e04951f409c88131a42a0514af479ecb932/tests%2Fui%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42106e04951f409c88131a42a0514af479ecb932/tests%2Fui%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_null_check.rs?ref=42106e04951f409c88131a42a0514af479ecb932", "patch": "@@ -0,0 +1,21 @@\n+#![allow(unused)]\n+#![warn(clippy::fn_null_check)]\n+#![allow(clippy::cmp_null)]\n+#![allow(clippy::ptr_eq)]\n+#![allow(clippy::zero_ptr)]\n+\n+pub const ZPTR: *const () = 0 as *const _;\n+pub const NOT_ZPTR: *const () = 1 as *const _;\n+\n+fn main() {\n+    let fn_ptr = main;\n+\n+    if (fn_ptr as *mut ()).is_null() {}\n+    if (fn_ptr as *const u8).is_null() {}\n+    if (fn_ptr as *const ()) == std::ptr::null() {}\n+    if (fn_ptr as *const ()) == (0 as *const ()) {}\n+    if (fn_ptr as *const ()) == ZPTR {}\n+\n+    // no lint\n+    if (fn_ptr as *const ()) == NOT_ZPTR {}\n+}"}, {"sha": "660dd3239792205efd143d4389fb502e836cbdbf", "filename": "tests/ui/fn_null_check.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/42106e04951f409c88131a42a0514af479ecb932/tests%2Fui%2Ffn_null_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42106e04951f409c88131a42a0514af479ecb932/tests%2Fui%2Ffn_null_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_null_check.stderr?ref=42106e04951f409c88131a42a0514af479ecb932", "patch": "@@ -0,0 +1,43 @@\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:13:8\n+   |\n+LL |     if (fn_ptr as *mut ()).is_null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+   = note: `-D clippy::fn-null-check` implied by `-D warnings`\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:14:8\n+   |\n+LL |     if (fn_ptr as *const u8).is_null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:15:8\n+   |\n+LL |     if (fn_ptr as *const ()) == std::ptr::null() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:16:8\n+   |\n+LL |     if (fn_ptr as *const ()) == (0 as *const ()) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: function pointer assumed to be nullable, even though it isn't\n+  --> $DIR/fn_null_check.rs:17:8\n+   |\n+LL |     if (fn_ptr as *const ()) == ZPTR {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\n+\n+error: aborting due to 5 previous errors\n+"}]}