{"sha": "984a6bf9c11b7356f696c685a145d7136fff051c", "node_id": "C_kwDOAAsO6NoAKDk4NGE2YmY5YzExYjczNTZmNjk2YzY4NWExNDVkNzEzNmZmZjA1MWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-31T16:38:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-31T16:38:23Z"}, "message": "Auto merge of #92175 - Aaron1011:fix-missing-source-file, r=cjgillot\n\nImport `SourceFile`s from crate before decoding foreign `Span`\n\nFixes #92163\nFixes #92014\n\nWhen writing to the incremental cache, we encode all `Span`s\nwe encounter, regardless of whether or not their `SourceFile`\ncomes from the local crate, or from a foreign crate.\n\nWhen we decode a `Span`, we use the `StableSourceFileId` we encoded\nto locate the matching `SourceFile` in the current session. If this\nid corresponds to a `SourceFile` from another crate, then we need to\nhave already imported that `SourceFile` into our current session.\n\nThis usually happens automatically during resolution / macro expansion,\nwhen we try to resolve definitions from other crates. In certain cases,\nhowever, we may try to load a `Span` from a transitive dependency\nwithout having ever imported the `SourceFile`s from that crate, leading\nto an ICE.\n\nThis PR fixes the issue by enconding the `SourceFile`'s `CrateNum`\nwhen we encode a `Span`. During decoding, we call `imported_source_files()`\nwhen we encounter a foreign `CrateNum`, which ensure that all\n`SourceFile`s from that crate are imported into the current session.", "tree": {"sha": "31d92d9cabd3d2ebec0cf370efd69c97458836f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d92d9cabd3d2ebec0cf370efd69c97458836f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984a6bf9c11b7356f696c685a145d7136fff051c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984a6bf9c11b7356f696c685a145d7136fff051c", "html_url": "https://github.com/rust-lang/rust/commit/984a6bf9c11b7356f696c685a145d7136fff051c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984a6bf9c11b7356f696c685a145d7136fff051c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed935e92dfb09ae388344b12284bf5110cf9265", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed935e92dfb09ae388344b12284bf5110cf9265", "html_url": "https://github.com/rust-lang/rust/commit/8ed935e92dfb09ae388344b12284bf5110cf9265"}, {"sha": "d9220924dc5603730b480706d94f5d68663f69b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9220924dc5603730b480706d94f5d68663f69b2", "html_url": "https://github.com/rust-lang/rust/commit/d9220924dc5603730b480706d94f5d68663f69b2"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "6ca190c9adddf177ab1bb852065c8aaaafc8f620", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/984a6bf9c11b7356f696c685a145d7136fff051c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984a6bf9c11b7356f696c685a145d7136fff051c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=984a6bf9c11b7356f696c685a145d7136fff051c", "patch": "@@ -554,4 +554,8 @@ impl CrateStore for CStore {\n     ) -> ExpnId {\n         self.get_crate_data(cnum).expn_hash_to_expn_id(sess, index_guess, hash)\n     }\n+\n+    fn import_source_files(&self, sess: &Session, cnum: CrateNum) {\n+        self.get_crate_data(cnum).imported_source_files(sess);\n+    }\n }"}, {"sha": "6a88e1235374c2b78f1b2d7015afdf38a130c6ae", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/984a6bf9c11b7356f696c685a145d7136fff051c/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984a6bf9c11b7356f696c685a145d7136fff051c/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=984a6bf9c11b7356f696c685a145d7136fff051c", "patch": "@@ -495,6 +495,20 @@ impl<'a, 'tcx> CacheDecoder<'a, 'tcx> {\n             .entry(index)\n             .or_insert_with(|| {\n                 let stable_id = file_index_to_stable_id[&index].translate(tcx);\n+\n+                // If this `SourceFile` is from a foreign crate, then make sure\n+                // that we've imported all of the source files from that crate.\n+                // This has usually already been done during macro invocation.\n+                // However, when encoding query results like `TypeckResults`,\n+                // we might encode an `AdtDef` for a foreign type (because it\n+                // was referenced in the body of the function). There is no guarantee\n+                // that we will load the source files from that crate during macro\n+                // expansion, so we use `import_source_files` to ensure that the foreign\n+                // source files are actually imported before we call `source_file_by_stable_id`.\n+                if stable_id.cnum != LOCAL_CRATE {\n+                    self.tcx.cstore_untracked().import_source_files(self.tcx.sess, stable_id.cnum);\n+                }\n+\n                 source_map\n                     .source_file_by_stable_id(stable_id)\n                     .expect(\"failed to lookup `SourceFile` in new context\")"}, {"sha": "281fc887633d9ad7b983c5aec19e444922eaa681", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/984a6bf9c11b7356f696c685a145d7136fff051c/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984a6bf9c11b7356f696c685a145d7136fff051c/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=984a6bf9c11b7356f696c685a145d7136fff051c", "patch": "@@ -201,6 +201,12 @@ pub trait CrateStore: std::fmt::Debug {\n         index_guess: u32,\n         hash: ExpnHash,\n     ) -> ExpnId;\n+\n+    /// Imports all `SourceFile`s from the given crate into the current session.\n+    /// This normally happens automatically when we decode a `Span` from\n+    /// that crate's metadata - however, the incr comp cache needs\n+    /// to trigger this manually when decoding a foreign `Span`\n+    fn import_source_files(&self, sess: &Session, cnum: CrateNum);\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "134afd4fbb142ee285e64f71c0f4c06d451254f4", "filename": "src/test/incremental/issue-92163-missing-sourcefile/auxiliary/first_crate.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/984a6bf9c11b7356f696c685a145d7136fff051c/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fauxiliary%2Ffirst_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984a6bf9c11b7356f696c685a145d7136fff051c/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fauxiliary%2Ffirst_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fauxiliary%2Ffirst_crate.rs?ref=984a6bf9c11b7356f696c685a145d7136fff051c", "patch": "@@ -0,0 +1,3 @@\n+pub enum Foo {\n+    Variant\n+}"}, {"sha": "ab7961f3823709384865034cd2179e562854a12b", "filename": "src/test/incremental/issue-92163-missing-sourcefile/auxiliary/second_crate.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/984a6bf9c11b7356f696c685a145d7136fff051c/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fauxiliary%2Fsecond_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984a6bf9c11b7356f696c685a145d7136fff051c/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fauxiliary%2Fsecond_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fauxiliary%2Fsecond_crate.rs?ref=984a6bf9c11b7356f696c685a145d7136fff051c", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags:--extern first_crate\n+\n+// Note: adding `first_crate` to the extern prelude\n+// (instead of using `extern_crate`) appears to be necessary to\n+// trigger the original incremental compilation bug.\n+// I'm not entirely sure why this is the case\n+\n+pub fn make_it() -> first_crate::Foo {\n+    panic!()\n+}"}, {"sha": "e9219c6f5ab29678f45d9ae086c0c7ee959e7015", "filename": "src/test/incremental/issue-92163-missing-sourcefile/issue_92163_main.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/984a6bf9c11b7356f696c685a145d7136fff051c/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fissue_92163_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984a6bf9c11b7356f696c685a145d7136fff051c/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fissue_92163_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-92163-missing-sourcefile%2Fissue_92163_main.rs?ref=984a6bf9c11b7356f696c685a145d7136fff051c", "patch": "@@ -0,0 +1,31 @@\n+// aux-build:first_crate.rs\n+// aux-build:second_crate.rs\n+// revisions:rpass1 rpass2\n+\n+// Regression test for issue #92163\n+// Under certain circumstances, we may end up trying to\n+// decode a foreign `Span` from the incremental cache, without previously\n+// having imported the `SourceFile`s from the owning crate. This can happen\n+// if the `Span` comes from a transitive dependency (so we never try to resolve\n+// items from the crate during expansion/resolution).\n+//\n+// Previously, this would result in an ICE, since we would not have loaded\n+// the corresponding `SourceFile` for the `StableSourceFileId` we decoded.\n+// This test verifies that the decoding of a foreign `Span` will always\n+// try to import the `SourceFile`s from the foreign crate, instead of\n+// relying on that having already happened during expansion.\n+\n+extern crate second_crate;\n+\n+pub struct Outer;\n+\n+impl Outer {\n+    pub fn use_it() {\n+        // This returns `first_crate::Foo`, causing\n+        // us to encode the `AdtDef `first_crate::Foo` (along with its `Span`s)\n+        // into the query cache for the `TypeckResults` for this function.\n+        second_crate::make_it();\n+    }\n+}\n+\n+fn main() {}"}]}