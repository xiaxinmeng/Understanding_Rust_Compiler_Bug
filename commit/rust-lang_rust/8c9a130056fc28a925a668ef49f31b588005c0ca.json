{"sha": "8c9a130056fc28a925a668ef49f31b588005c0ca", "node_id": "C_kwDOAAsO6NoAKDhjOWExMzAwNTZmYzI4YTkyNWE2NjhlZjQ5ZjMxYjU4ODAwNWMwY2E", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-07-06T16:16:29Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-07-06T16:20:40Z"}, "message": "Edit `rustc_mir_dataflow::framework` documentation", "tree": {"sha": "9cdc11b1e5a71792482149d537c3a34423927843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cdc11b1e5a71792482149d537c3a34423927843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c9a130056fc28a925a668ef49f31b588005c0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9a130056fc28a925a668ef49f31b588005c0ca", "html_url": "https://github.com/rust-lang/rust/commit/8c9a130056fc28a925a668ef49f31b588005c0ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c9a130056fc28a925a668ef49f31b588005c0ca/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aef72017f0db429d0a2f9fae36c9c5b5d0a1225", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aef72017f0db429d0a2f9fae36c9c5b5d0a1225", "html_url": "https://github.com/rust-lang/rust/commit/0aef72017f0db429d0a2f9fae36c9c5b5d0a1225"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f9fd6c9c56b424333800c62248928d2637c94875", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c9a130056fc28a925a668ef49f31b588005c0ca/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9a130056fc28a925a668ef49f31b588005c0ca/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=8c9a130056fc28a925a668ef49f31b588005c0ca", "patch": "@@ -1,7 +1,7 @@\n //! A framework that can express both [gen-kill] and generic dataflow problems.\n //!\n-//! To actually use this framework, you must implement either the `Analysis` or the\n-//! `GenKillAnalysis` trait. If your transfer function can be expressed with only gen/kill\n+//! To use this framework, implement either the [`Analysis`] or the\n+//! [`GenKillAnalysis`] trait. If your transfer function can be expressed with only gen/kill\n //! operations, prefer `GenKillAnalysis` since it will run faster while iterating to fixpoint. The\n //! `impls` module contains several examples of gen/kill dataflow analyses.\n //!\n@@ -96,7 +96,7 @@ impl<T: Idx> BitSetExt<T> for ChunkedBitSet<T> {\n     }\n }\n \n-/// Define the domain of a dataflow problem.\n+/// Defines the domain of a dataflow problem.\n ///\n /// This trait specifies the lattice on which this analysis operates (the domain) as well as its\n /// initial value at the entry point of each basic block.\n@@ -113,12 +113,12 @@ pub trait AnalysisDomain<'tcx> {\n     /// suitable as part of a filename.\n     const NAME: &'static str;\n \n-    /// The initial value of the dataflow state upon entry to each basic block.\n+    /// Returns the initial value of the dataflow state upon entry to each basic block.\n     fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain;\n \n     /// Mutates the initial value of the dataflow state upon entry to the `START_BLOCK`.\n     ///\n-    /// For backward analyses, initial state besides the bottom value is not yet supported. Trying\n+    /// For backward analyses, initial state (besides the bottom value) is not yet supported. Trying\n     /// to mutate the initial state will result in a panic.\n     //\n     // FIXME: For backward dataflow analyses, the initial state should be applied to every basic\n@@ -155,9 +155,9 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// Updates the current dataflow state with an effect that occurs immediately *before* the\n     /// given statement.\n     ///\n-    /// This method is useful if the consumer of the results of this analysis needs only to observe\n+    /// This method is useful if the consumer of the results of this analysis only needs to observe\n     /// *part* of the effect of a statement (e.g. for two-phase borrows). As a general rule,\n-    /// analyses should not implement this without implementing `apply_statement_effect`.\n+    /// analyses should not implement this without also implementing `apply_statement_effect`.\n     fn apply_before_statement_effect(\n         &self,\n         _state: &mut Self::Domain,\n@@ -184,7 +184,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     ///\n     /// This method is useful if the consumer of the results of this analysis needs only to observe\n     /// *part* of the effect of a terminator (e.g. for two-phase borrows). As a general rule,\n-    /// analyses should not implement this without implementing `apply_terminator_effect`.\n+    /// analyses should not implement this without also implementing `apply_terminator_effect`.\n     fn apply_before_terminator_effect(\n         &self,\n         _state: &mut Self::Domain,"}]}