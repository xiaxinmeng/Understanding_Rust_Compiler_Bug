{"sha": "c17501fea4f9b73134446fbc0700e5d1203909ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNzUwMWZlYTRmOWI3MzEzNDQ0NmZiYzA3MDBlNWQxMjAzOTA5YWM=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-08-04T18:13:40Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-08-04T21:15:52Z"}, "message": "ignore deprecation for items deprecated by the same attribute\n\nWhenever a node whould be reported as deprecated:\n\n- check if the parent item is also deprecated\n\n- if it is and both were deprecated by the same attribute\n\n- skip the deprecation warning\n\nfixes #35128\ncloses #16490", "tree": {"sha": "3eca5f99ff0a5fbe13f75fd24e695dfce3181e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eca5f99ff0a5fbe13f75fd24e695dfce3181e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17501fea4f9b73134446fbc0700e5d1203909ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17501fea4f9b73134446fbc0700e5d1203909ac", "html_url": "https://github.com/rust-lang/rust/commit/c17501fea4f9b73134446fbc0700e5d1203909ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17501fea4f9b73134446fbc0700e5d1203909ac/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c6a39ccf051c9a05956d25e8b075659ae60d1c", "html_url": "https://github.com/rust-lang/rust/commit/b4c6a39ccf051c9a05956d25e8b075659ae60d1c"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "cbbc2c4f98f5e09b025f59756289a153805b0f7d", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c17501fea4f9b73134446fbc0700e5d1203909ac/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17501fea4f9b73134446fbc0700e5d1203909ac/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c17501fea4f9b73134446fbc0700e5d1203909ac", "patch": "@@ -386,7 +386,7 @@ struct Checker<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn check(&mut self, id: DefId, span: Span,\n-             stab: &Option<&Stability>, _depr: &Option<Deprecation>) {\n+             stab: &Option<&Stability>, _depr: &Option<DeprecationEntry>) {\n         if !is_staged_api(self.tcx, id) {\n             return;\n         }\n@@ -511,7 +511,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             warn_about_defns: bool,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     match item.node {\n         hir::ItemExternCrate(_) => {\n             // compiler-generated `extern crate` items have a dummy span.\n@@ -550,7 +550,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     let span;\n     let id = match e.node {\n         hir::ExprMethodCall(i, _, _) => {\n@@ -614,7 +614,7 @@ pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             path: &hir::Path, id: ast::NodeId,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     // Paths in import prefixes may have no resolution.\n     match tcx.expect_def_or_none(id) {\n         Some(Def::PrimTy(..)) => {}\n@@ -630,7 +630,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       item: &hir::PathListItem,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n-                                                     &Option<Deprecation>)) {\n+                                                     &Option<DeprecationEntry>)) {\n     match tcx.expect_def(item.node.id()) {\n         Def::PrimTy(..) => {}\n         def => {\n@@ -642,7 +642,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n                            cb: &mut FnMut(DefId, Span,\n                                           &Option<&Stability>,\n-                                          &Option<Deprecation>)) {\n+                                          &Option<DeprecationEntry>)) {\n     debug!(\"check_pat(pat = {:?})\", pat);\n     if is_internal(tcx, pat.span) { return; }\n \n@@ -673,7 +673,7 @@ fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       id: DefId, span: Span,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n-                                                     &Option<Deprecation>)) {\n+                                                     &Option<DeprecationEntry>)) {\n     if is_internal(tcx, span) {\n         debug!(\"maybe_do_stability_check: \\\n                 skipping span={:?} since it is internal\", span);\n@@ -682,7 +682,7 @@ fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (stability, deprecation) = if is_staged_api(tcx, id) {\n         (tcx.lookup_stability(id), None)\n     } else {\n-        (None, tcx.lookup_deprecation(id))\n+        (None, tcx.lookup_deprecation_entry(id))\n     };\n     debug!(\"maybe_do_stability_check: \\\n             inspecting id={:?} span={:?} of stability={:?}\", id, span, stability);"}, {"sha": "49dad2d0f6d924653de235ab358a5540f163c512", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c17501fea4f9b73134446fbc0700e5d1203909ac/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17501fea4f9b73134446fbc0700e5d1203909ac/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c17501fea4f9b73134446fbc0700e5d1203909ac", "patch": "@@ -583,13 +583,20 @@ impl Deprecated {\n     }\n \n     fn lint(&self, cx: &LateContext, _id: DefId, span: Span,\n-            stability: &Option<&attr::Stability>, deprecation: &Option<attr::Deprecation>) {\n+            stability: &Option<&attr::Stability>,\n+            deprecation: &Option<stability::DeprecationEntry>) {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(&attr::Stability{rustc_depr: Some(attr::RustcDeprecation{ref reason, ..}), ..})\n                 = *stability {\n             output(cx, DEPRECATED, span, Some(&reason))\n-        } else if let Some(attr::Deprecation{ref note, ..}) = *deprecation {\n-            output(cx, DEPRECATED, span, note.as_ref().map(|x| &**x))\n+        } else if let Some(ref depr_entry) = *deprecation {\n+            if let Some(parent_depr) = cx.tcx.lookup_deprecation_entry(self.parent_def(cx)) {\n+                if parent_depr.same_origin(depr_entry) {\n+                    return;\n+                }\n+            }\n+\n+            output(cx, DEPRECATED, span, depr_entry.attr.note.as_ref().map(|x| &**x))\n         }\n \n         fn output(cx: &LateContext, lint: &'static Lint, span: Span, note: Option<&str>) {"}]}