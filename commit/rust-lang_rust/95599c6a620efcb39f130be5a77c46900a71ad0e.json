{"sha": "95599c6a620efcb39f130be5a77c46900a71ad0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTk5YzZhNjIwZWZjYjM5ZjEzMGJlNWE3N2M0NjkwMGE3MWFkMGU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-29T21:42:19Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-29T21:42:19Z"}, "message": "Synchronise comments with wiki\n\nWiki commits bfa439b and 9b8ced8.", "tree": {"sha": "357f0573061249ad9b3727143d66107e03759afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357f0573061249ad9b3727143d66107e03759afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95599c6a620efcb39f130be5a77c46900a71ad0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95599c6a620efcb39f130be5a77c46900a71ad0e", "html_url": "https://github.com/rust-lang/rust/commit/95599c6a620efcb39f130be5a77c46900a71ad0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95599c6a620efcb39f130be5a77c46900a71ad0e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "997a565aeb92f01342d4e35075be609b292befcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/997a565aeb92f01342d4e35075be609b292befcd", "html_url": "https://github.com/rust-lang/rust/commit/997a565aeb92f01342d4e35075be609b292befcd"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "dd89b22a40f953c3a2cb6fbe9fea47f77d8f055b", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95599c6a620efcb39f130be5a77c46900a71ad0e/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95599c6a620efcb39f130be5a77c46900a71ad0e/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=95599c6a620efcb39f130be5a77c46900a71ad0e", "patch": "@@ -19,7 +19,7 @@ use syntax::codemap::Spanned;\n use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n \n /// **What it does:** This lint checks for nested `if`-statements which can be collapsed by\n-/// `&&`-combining their conditions and for `else { if .. } expressions that can be collapsed to\n+/// `&&`-combining their conditions and for `else { if .. }` expressions that can be collapsed to\n /// `else if ..`. It is `Warn` by default.\n ///\n /// **Why is this bad?** Each `if`-statement adds one level of nesting, which makes code look more complex than it really is."}, {"sha": "ca7649f75b3de7f884cdf9462ede11871320ecb2", "filename": "src/derive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95599c6a620efcb39f130be5a77c46900a71ad0e/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95599c6a620efcb39f130be5a77c46900a71ad0e/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=95599c6a620efcb39f130be5a77c46900a71ad0e", "patch": "@@ -29,6 +29,7 @@ use rustc::middle::ty::TypeVariants;\n /// impl PartialEq for Foo {\n ///     ..\n /// }\n+/// ```\n declare_lint! {\n     pub DERIVE_HASH_NOT_EQ,\n     Warn,\n@@ -52,6 +53,7 @@ declare_lint! {\n /// impl Clone for Foo {\n ///     ..\n /// }\n+/// ```\n declare_lint! {\n     pub EXPL_IMPL_CLONE_ON_COPY,\n     Warn,"}, {"sha": "8eb3364b2bd09866a0d81131682f8d68d1f9f466", "filename": "src/items_after_statements.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95599c6a620efcb39f130be5a77c46900a71ad0e/src%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95599c6a620efcb39f130be5a77c46900a71ad0e/src%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems_after_statements.rs?ref=95599c6a620efcb39f130be5a77c46900a71ad0e", "patch": "@@ -5,9 +5,12 @@ use syntax::attr::*;\n use syntax::ast::*;\n use utils::in_macro;\n \n-/// **What it does:** It `Warn`s on blocks where there are items that are declared in the middle of or after the statements\n+/// **What it does:** It `Warn`s on blocks where there are items that are declared in the middle of\n+/// or after the statements\n ///\n-/// **Why is this bad?** Items live for the entire scope they are declared in. But statements are processed in order. This might cause confusion as it's hard to figure out which item is meant in a statement.\n+/// **Why is this bad?** Items live for the entire scope they are declared in. But statements are\n+/// processed in order. This might cause confusion as it's hard to figure out which item is meant\n+/// in a statement.\n ///\n /// **Known problems:** None\n ///\n@@ -23,6 +26,7 @@ use utils::in_macro;\n ///     }\n ///     foo(); // prints \"foo\"\n /// }\n+/// ```\n declare_lint! { pub ITEMS_AFTER_STATEMENTS, Warn, \"finds blocks where an item comes after a statement\" }\n \n pub struct ItemsAfterStatemets;"}]}