{"sha": "52e074e40ee3eaf04415b2044c93bcfddad52f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTA3NGU0MGVlM2VhZjA0NDE1YjIwNDRjOTNiY2ZkZGFkNTJmMzU=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-01-02T02:56:22Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-01-13T17:45:19Z"}, "message": "Better Debug impl for io::Error.", "tree": {"sha": "88085b9241489713387d5c0ba14d0cef7270fd8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88085b9241489713387d5c0ba14d0cef7270fd8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e074e40ee3eaf04415b2044c93bcfddad52f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e074e40ee3eaf04415b2044c93bcfddad52f35", "html_url": "https://github.com/rust-lang/rust/commit/52e074e40ee3eaf04415b2044c93bcfddad52f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e074e40ee3eaf04415b2044c93bcfddad52f35/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b65f0bedd2f22d9661ecb7092f07746dc2ccfb0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65f0bedd2f22d9661ecb7092f07746dc2ccfb0d", "html_url": "https://github.com/rust-lang/rust/commit/b65f0bedd2f22d9661ecb7092f07746dc2ccfb0d"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "f0b41f30251e09d10209422ea9cd23eb139588ad", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/52e074e40ee3eaf04415b2044c93bcfddad52f35/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e074e40ee3eaf04415b2044c93bcfddad52f35/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=52e074e40ee3eaf04415b2044c93bcfddad52f35", "patch": "@@ -62,12 +62,18 @@ pub type Result<T> = result::Result<T, Error>;\n /// [`Write`]: ../io/trait.Write.html\n /// [`Seek`]: ../io/trait.Seek.html\n /// [`ErrorKind`]: enum.ErrorKind.html\n-#[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Error {\n     repr: Repr,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Debug for Error {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&self.repr, f)\n+    }\n+}\n+\n enum Repr {\n     Os(i32),\n     Simple(ErrorKind),\n@@ -511,10 +517,12 @@ impl Error {\n impl fmt::Debug for Repr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            Repr::Os(ref code) =>\n-                fmt.debug_struct(\"Os\").field(\"code\", code)\n-                   .field(\"message\", &sys::os::error_string(*code)).finish(),\n-            Repr::Custom(ref c) => fmt.debug_tuple(\"Custom\").field(c).finish(),\n+            Repr::Os(code) =>\n+                fmt.debug_struct(\"Os\")\n+                    .field(\"code\", &code)\n+                    .field(\"kind\", &sys::decode_error_kind(code))\n+                    .field(\"message\", &sys::os::error_string(code)).finish(),\n+            Repr::Custom(ref c) => fmt::Debug::fmt(&c, fmt),\n             Repr::Simple(kind) => fmt.debug_tuple(\"Kind\").field(&kind).finish(),\n         }\n     }\n@@ -559,17 +567,36 @@ fn _assert_error_is_sync_send() {\n \n #[cfg(test)]\n mod test {\n-    use super::{Error, ErrorKind};\n+    use super::{Error, ErrorKind, Repr, Custom};\n     use error;\n     use fmt;\n     use sys::os::error_string;\n+    use sys::decode_error_kind;\n \n     #[test]\n     fn test_debug_error() {\n         let code = 6;\n         let msg = error_string(code);\n-        let err = Error { repr: super::Repr::Os(code) };\n-        let expected = format!(\"Error {{ repr: Os {{ code: {:?}, message: {:?} }} }}\", code, msg);\n+        let kind = decode_error_kind(code);\n+        let err = Error {\n+            repr: Repr::Custom(box Custom {\n+                kind: ErrorKind::InvalidInput,\n+                error: box Error {\n+                    repr: super::Repr::Os(code)\n+                },\n+            })\n+        };\n+        let expected = format!(\n+            \"Custom {{ \\\n+                kind: InvalidInput, \\\n+                error: Os {{ \\\n+                    code: {:?}, \\\n+                    kind: {:?}, \\\n+                    message: {:?} \\\n+                }} \\\n+            }}\",\n+            code, kind, msg\n+        );\n         assert_eq!(format!(\"{:?}\", err), expected);\n     }\n "}]}