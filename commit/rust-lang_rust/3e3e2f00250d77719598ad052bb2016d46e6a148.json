{"sha": "3e3e2f00250d77719598ad052bb2016d46e6a148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlM2UyZjAwMjUwZDc3NzE5NTk4YWQwNTJiYjIwMTZkNDZlNmExNDg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-01T03:20:08Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-01T14:49:41Z"}, "message": "allow parsing attributes on struct fields", "tree": {"sha": "54d73d9114028163156ef6947e6b95d80a91c25f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d73d9114028163156ef6947e6b95d80a91c25f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3e2f00250d77719598ad052bb2016d46e6a148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3e2f00250d77719598ad052bb2016d46e6a148", "html_url": "https://github.com/rust-lang/rust/commit/3e3e2f00250d77719598ad052bb2016d46e6a148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3e2f00250d77719598ad052bb2016d46e6a148/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e1f47955571fab24fc731c0af97e4c71f4ada9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e1f47955571fab24fc731c0af97e4c71f4ada9", "html_url": "https://github.com/rust-lang/rust/commit/c2e1f47955571fab24fc731c0af97e4c71f4ada9"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "a853dbed2f123a1e4eb2c18de6f01b088f4e96a4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3e3e2f00250d77719598ad052bb2016d46e6a148", "patch": "@@ -1158,6 +1158,7 @@ pub struct struct_field_ {\n     kind: struct_field_kind,\n     id: node_id,\n     ty: @Ty,\n+    attrs: ~[attribute],\n }\n \n pub type struct_field = spanned<struct_field_>;"}, {"sha": "e876972fe6878c1cf74099a790da96247f84797d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=3e3e2f00250d77719598ad052bb2016d46e6a148", "patch": "@@ -415,7 +415,8 @@ impl gen_init for protocol {\n                             ast::struct_immutable,\n                             ast::inherited),\n                     id: cx.next_id(),\n-                    ty: fty\n+                    ty: fty,\n+                    attrs: ~[],\n                 },\n                 span: dummy_sp()\n             }"}, {"sha": "36565395e598899df3b6842ae07d65afc515d20d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3e3e2f00250d77719598ad052bb2016d46e6a148", "patch": "@@ -222,9 +222,12 @@ pub fn noop_fold_item(i: @item, fld: @ast_fold) -> Option<@item> {\n \n fn noop_fold_struct_field(sf: @struct_field, fld: @ast_fold)\n                        -> @struct_field {\n+    let fold_attribute = |x| fold_attribute_(x, fld);\n+\n     @spanned { node: ast::struct_field_ { kind: copy sf.node.kind,\n                                           id: sf.node.id,\n-                                          ty: fld.fold_ty(sf.node.ty) },\n+                                          ty: fld.fold_ty(sf.node.ty),\n+                                          attrs: sf.node.attrs.map(|e| fold_attribute(*e)) },\n                span: sf.span }\n }\n \n@@ -309,6 +312,7 @@ fn fold_struct_field(f: @struct_field, fld: @ast_fold) -> @struct_field {\n             kind: copy f.node.kind,\n             id: fld.new_id(f.node.id),\n             ty: fld.fold_ty(f.node.ty),\n+            attrs: /* FIXME (#2543) */ copy f.node.attrs,\n         },\n         span: fld.new_span(f.span),\n     }\n@@ -757,6 +761,7 @@ impl ast_fold for AstFoldFns {\n                 kind: copy sf.node.kind,\n                 id: sf.node.id,\n                 ty: (self as @ast_fold).fold_ty(sf.node.ty),\n+                attrs: copy sf.node.attrs,\n             },\n             span: (self.new_span)(sf.span),\n         }"}, {"sha": "c1afc53def0c24f40f122ff08b0b1dfb6764262d", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=3e3e2f00250d77719598ad052bb2016d46e6a148", "patch": "@@ -18,7 +18,7 @@ removed.\n */\n \n \n-use ast::{expr, expr_lit, lit_nil};\n+use ast::{expr, expr_lit, lit_nil, attribute};\n use ast;\n use codemap::{span, respan};\n use parse::parser::Parser;\n@@ -282,13 +282,13 @@ pub impl Parser {\n         }\n     }\n \n-    fn try_parse_obsolete_priv_section(&self) -> bool {\n+    fn try_parse_obsolete_priv_section(&self, attrs: ~[attribute]) -> bool {\n         if self.is_keyword(&~\"priv\") && self.look_ahead(1) == token::LBRACE {\n             self.obsolete(copy *self.span, ObsoletePrivSection);\n             self.eat_keyword(&~\"priv\");\n             self.bump();\n             while *self.token != token::RBRACE {\n-                self.parse_single_struct_field(ast::private);\n+                self.parse_single_struct_field(ast::private, attrs);\n             }\n             self.bump();\n             true"}, {"sha": "74af745840891addf7c7d3ce7ea3606419f64f5b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3e3e2f00250d77719598ad052bb2016d46e6a148", "patch": "@@ -2520,7 +2520,9 @@ pub impl Parser {\n     }\n \n     // parse a structure field\n-    fn parse_name_and_ty(&self, pr: visibility) -> @struct_field {\n+    fn parse_name_and_ty(&self,\n+                         pr: visibility,\n+                         attrs: ~[attribute]) -> @struct_field {\n         let mut is_mutbl = struct_immutable;\n         let lo = self.span.lo;\n         if self.eat_keyword(&~\"mut\") {\n@@ -2535,7 +2537,8 @@ pub impl Parser {\n         @spanned(lo, self.last_span.hi, ast::struct_field_ {\n             kind: named_field(name, is_mutbl, pr),\n             id: self.get_id(),\n-            ty: ty\n+            ty: ty,\n+            attrs: attrs,\n         })\n     }\n \n@@ -3318,11 +3321,13 @@ pub impl Parser {\n                 &token::RPAREN,\n                 seq_sep_trailing_allowed(token::COMMA)\n             ) |p| {\n+                let attrs = self.parse_outer_attributes();\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::struct_field_ {\n                     kind: unnamed_field,\n                     id: self.get_id(),\n-                    ty: p.parse_ty(false)\n+                    ty: p.parse_ty(false),\n+                    attrs: attrs,\n                 };\n                 @spanned(lo, p.span.hi, struct_field_)\n             };\n@@ -3359,12 +3364,14 @@ pub impl Parser {\n     }\n \n     // parse a structure field declaration\n-    fn parse_single_struct_field(&self, vis: visibility) -> @struct_field {\n+    fn parse_single_struct_field(&self,\n+                                 vis: visibility,\n+                                 attrs: ~[attribute]) -> @struct_field {\n         if self.eat_obsolete_ident(\"let\") {\n             self.obsolete(*self.last_span, ObsoleteLet);\n         }\n \n-        let a_var = self.parse_name_and_ty(vis);\n+        let a_var = self.parse_name_and_ty(vis, attrs);\n         match *self.token {\n             token::SEMI => {\n                 self.obsolete(copy *self.span, ObsoleteFieldTerminator);\n@@ -3390,26 +3397,25 @@ pub impl Parser {\n     // parse an element of a struct definition\n     fn parse_struct_decl_field(&self) -> ~[@struct_field] {\n \n-        if self.try_parse_obsolete_priv_section() {\n+        let attrs = self.parse_outer_attributes();\n+\n+        if self.try_parse_obsolete_priv_section(attrs) {\n             return ~[];\n         }\n \n-        // Need this to parse comments on fields.\n-        let _attrs = self.parse_outer_attributes();\n-\n         if self.eat_keyword(&~\"priv\") {\n-            return ~[self.parse_single_struct_field(private)]\n+            return ~[self.parse_single_struct_field(private, attrs)]\n         }\n \n         if self.eat_keyword(&~\"pub\") {\n-           return ~[self.parse_single_struct_field(public)];\n+           return ~[self.parse_single_struct_field(public, attrs)];\n         }\n \n         if self.try_parse_obsolete_struct_ctor() {\n             return ~[];\n         }\n \n-        return ~[self.parse_single_struct_field(inherited)];\n+        return ~[self.parse_single_struct_field(inherited, attrs)];\n     }\n \n     // parse visiility: PUB, PRIV, or nothing"}, {"sha": "ab958d8b5cef512c1e917b15de4c198f46049576", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3e2f00250d77719598ad052bb2016d46e6a148/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3e3e2f00250d77719598ad052bb2016d46e6a148", "patch": "@@ -700,6 +700,7 @@ pub fn print_struct(s: @ps,\n                 ast::named_field(ident, mutability, visibility) => {\n                     hardbreak_if_not_bol(s);\n                     maybe_print_comment(s, field.span.lo);\n+                    print_outer_attributes(s, field.node.attrs);\n                     print_visibility(s, visibility);\n                     if mutability == ast::struct_mutable {\n                         word_nbsp(s, ~\"mut\");"}]}