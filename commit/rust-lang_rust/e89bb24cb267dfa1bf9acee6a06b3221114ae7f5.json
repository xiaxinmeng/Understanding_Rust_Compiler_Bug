{"sha": "e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWJiMjRjYjI2N2RmYTFiZjlhY2VlNmEwNmIzMjIxMTE0YWU3ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-14T19:42:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-14T19:42:26Z"}, "message": "Auto merge of #26071 - petrochenkov:assert1, r=alexcrichton\n\n`assert_eq!` has better diagnostics than `assert!` and is more helpful when something actually breaks, but the diagnostics has it's price - `assert_eq!` generate some formatting code which is slower to compile and possibly run.\r\n[My measurements](https://internals.rust-lang.org/t/assert-a-b-or-assert-eq-a-b/1367/12?u=petrochenkov) show that presence of this formatting code doesn't affect compilation + execution time of the test suite significantly, so `assert_eq!` can be used instead of `assert!` consistently.\r\n\r\n(Some tests doesn't reside in src/test, they are not affected by these changes, I'll probably open a separate PR for them later)", "tree": {"sha": "86f9732669315753701a11ac5831fd3bb42ee11b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f9732669315753701a11ac5831fd3bb42ee11b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "html_url": "https://github.com/rust-lang/rust/commit/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc44423566726260e316d879a0a1dd9d3fb92e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc44423566726260e316d879a0a1dd9d3fb92e07", "html_url": "https://github.com/rust-lang/rust/commit/cc44423566726260e316d879a0a1dd9d3fb92e07"}, {"sha": "bddb685e7322c8ffb9578ae9e5a3a161071b257b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bddb685e7322c8ffb9578ae9e5a3a161071b257b", "html_url": "https://github.com/rust-lang/rust/commit/bddb685e7322c8ffb9578ae9e5a3a161071b257b"}], "stats": {"total": 779, "additions": 396, "deletions": 383}, "files": [{"sha": "22cbc415eb4cef9849a1366e017b5cf9236122a4", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,10 +14,10 @@\n #[inline(never)]\n #[cfg(target_arch = \"x86_64\")]\n pub extern \"win64\" fn foo(a: isize, b: isize, c: isize, d: isize) {\n-    assert!(a == 1);\n-    assert!(b == 2);\n-    assert!(c == 3);\n-    assert!(d == 4);\n+    assert_eq!(a, 1);\n+    assert_eq!(b, 2);\n+    assert_eq!(c, 3);\n+    assert_eq!(d, 4);\n \n     println!(\"a: {}, b: {}, c: {}, d: {}\",\n              a, b, c, d)\n@@ -26,10 +26,10 @@ pub extern \"win64\" fn foo(a: isize, b: isize, c: isize, d: isize) {\n #[inline(never)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n pub extern fn foo(a: isize, b: isize, c: isize, d: isize) {\n-    assert!(a == 1);\n-    assert!(b == 2);\n-    assert!(c == 3);\n-    assert!(d == 4);\n+    assert_eq!(a, 1);\n+    assert_eq!(b, 2);\n+    assert_eq!(c, 3);\n+    assert_eq!(d, 4);\n \n     println!(\"a: {}, b: {}, c: {}, d: {}\",\n              a, b, c, d)"}, {"sha": "4ae788454e3e897aa7230d5123ebde1c096353f9", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -54,7 +54,7 @@ const LIMIT: f64 = 2.0;\n const WORKERS: usize = 16;\n \n fn mandelbrot<W: Write>(w: usize, mut out: W) -> io::Result<()> {\n-    assert!(WORKERS % 2 == 0);\n+    assert_eq!(WORKERS % 2, 0);\n \n     // Ensure w and h are multiples of 8.\n     let w = (w + 7) / 8 * 8;\n@@ -76,7 +76,7 @@ fn mandelbrot<W: Write>(w: usize, mut out: W) -> io::Result<()> {\n     let v_consts = f64x2(1.5, 1.0);\n \n     // A lot of this code assumes this (so do other lang benchmarks)\n-    assert!(w == h);\n+    assert_eq!(w, h);\n     let mut precalc_r = Vec::with_capacity(w);\n     let mut precalc_i = Vec::with_capacity(h);\n "}, {"sha": "037364c7a531c4ff64a64504fe02bfb61ec62e27", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -23,5 +23,5 @@ impl <T: Sync> Foo for T { }\n fn main() {\n     let (tx, rx) = channel();\n     1193182.foo(tx);\n-    assert!(rx.recv() == 1193182);\n+    assert_eq!(rx.recv(), 1193182);\n }"}, {"sha": "afc858c0c299e5a588ff61ef7e1e830258bb9261", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -22,7 +22,7 @@ fn f() {\n         //~^ ERROR constant in pattern `a` should have an upper case name such as `A`\n         (x, y) => 1 + x + y,\n     };\n-    assert!(r == 1);\n+    assert_eq!(r, 1);\n }\n \n mod m {\n@@ -37,7 +37,7 @@ fn g() {\n         //~^ ERROR constant in pattern `aha` should have an upper case name such as `AHA`\n         (x, y)   => 1 + x + y,\n     };\n-    assert!(r == 1);\n+    assert_eq!(r, 1);\n }\n \n mod n {\n@@ -51,7 +51,7 @@ fn h() {\n //~^ ERROR constant in pattern `not_okay` should have an upper case name such as `NOT_OKAY`\n         (x, y)   => 1 + x + y,\n     };\n-    assert!(r == 1);\n+    assert_eq!(r, 1);\n }\n \n fn main () {"}, {"sha": "3b794da10536e078c8dd6d8b204196205a0500ee", "filename": "src/test/compile-fail/mod_file_correct_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,5 +13,5 @@\n mod mod_file_aux;\n \n fn main() {\n-    assert!(mod_file_aux::bar() == 10); //~ ERROR unresolved name\n+    assert_eq!(mod_file_aux::bar(), 10); //~ ERROR unresolved name\n }"}, {"sha": "067c17668c612c024c149d2cbd8a20908f254445", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,6 +14,6 @@ use cci_class::kitties::cat;\n \n fn main() {\n   let nyan : cat = cat(52, 99);\n-  assert!((nyan.meows == 52));\n+  assert_eq!(nyan.meows, 52);\n   //~^ ERROR field `meows` of struct `cci_class::kitties::cat` is private\n }"}, {"sha": "1423117dc816ad366f79ca85ed028cf83640f908", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -20,5 +20,5 @@ mod cat {\n \n fn main() {\n     let nyan = cat::new_cat();\n-    assert!(nyan.meows == 52);    //~ ERROR field `meows` of struct `cat::Cat` is private\n+    assert_eq!(nyan.meows, 52);    //~ ERROR field `meows` of struct `cat::Cat` is private\n }"}, {"sha": "506aed6b2ee1db80740ae59788d486294f231be9", "filename": "src/test/compile-fail/syntax-extension-minor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -17,6 +17,5 @@ pub fn main() {\n     assert_eq!(concat_idents!(asd, f_f, dsa), \"<.<\".to_string());\n     //~^ ERROR: unresolved name `asdf_fdsa`\n \n-    assert!(stringify!(use_mention_distinction) ==\n-                \"use_mention_distinction\");\n+    assert_eq!(stringify!(use_mention_distinction), \"use_mention_distinction\");\n }"}, {"sha": "5931631cceefcb7431bf0699544c4d54c7229f56", "filename": "src/test/parse-fail/macros-no-semicolon.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fparse-fail%2Fmacros-no-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fparse-fail%2Fmacros-no-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmacros-no-semicolon.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    assert!(1 == 2)\n-    assert!(3 == 4) //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `assert`\n+    assert_eq!(1, 2)\n+    assert_eq!(3, 4) //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `assert_eq`\n     println!(\"hello\");\n }"}, {"sha": "c9501e8166f14bf0f413cbec52129b89d8fdf435", "filename": "src/test/pretty/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fpretty%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Fpretty%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdo1.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,4 +12,4 @@\n \n fn f<F>(f: F) where F: Fn(isize) { f(10) }\n \n-fn main() { f(|i| { assert!(i == 10) }) }\n+fn main() { f(|i| { assert_eq!(i , 10) }) }"}, {"sha": "6773c6b9b5184cb07995efd429e774a0acaee1bc", "filename": "src/test/run-fail/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:1 == 2\n-fn main() { assert!((1 == 2)); }\n+fn main() { assert!(1 == 2); }"}, {"sha": "9923ff83a918500f0d3c888564fa986ee0035ef4", "filename": "src/test/run-make/extern-flag-disambiguates/d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fd.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,6 +16,6 @@ extern crate c;\n fn t(a: &'static usize) -> usize { a as *const _ as usize }\n \n fn main() {\n-    assert!(t(a::token()) == t(b::a_token()));\n+    assert_eq!(t(a::token()), t(b::a_token()));\n     assert!(t(a::token()) != t(c::a_token()));\n }"}, {"sha": "ba4860be91d66457c42ceb46f513f4efdc3e601f", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     }).join().err().unwrap();\n \n     unsafe {\n-        assert!(lib::statik == 1);\n-        assert!(statik == 1);\n+        assert_eq!(lib::statik, 1);\n+        assert_eq!(statik, 1);\n     }\n }"}, {"sha": "0805bc5dcb35955b1ca833d9c0cc62f5180d4cd5", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -78,5 +78,5 @@ fn main() {\n     // we should never get use this filename, but lets make sure they are valid args.\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n     rustc_driver::run_compiler(&args, &mut tc);\n-    assert!(tc.count == 30);\n+    assert_eq!(tc.count, 30);\n }"}, {"sha": "a89873b1277e0fcadb5b1198fdba2eef6e9d4225", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -27,6 +27,6 @@ pub fn main() {\n         let _x: Box<Fat<[Foo]>> = Box::<Fat<[Foo; 3]>>::new(Fat { f: [Foo, Foo, Foo] });\n     }\n     unsafe {\n-        assert!(DROP_RAN == 3);\n+        assert_eq!(DROP_RAN, 3);\n     }\n }"}, {"sha": "48e834cf54dd10cad00bd7a3ac29d738f854e1bb", "filename": "src/test/run-pass/arith-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Farith-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Farith-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,6 +13,6 @@\n \n pub fn main() {\n     let i32_c: isize = 0x10101010;\n-    assert!(i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3) ==\n+    assert_eq!(i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3),\n                  i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3));\n }"}, {"sha": "de946d94d07b9cbd233fae314004ac29e4e098e9", "filename": "src/test/run-pass/artificial-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fartificial-block.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -11,4 +11,4 @@\n \n fn f() -> isize { { return 3; } }\n \n-pub fn main() { assert!((f() == 3)); }\n+pub fn main() { assert_eq!(f(), 3); }"}, {"sha": "0ee460052c73f73865ae76a86b205dda9d794abc", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -43,7 +43,7 @@ fn length<A, T: iterable<A>>(x: T) -> usize {\n pub fn main() {\n     let x: Vec<isize> = vec!(0,1,2,3);\n     // Call a method\n-    x.iterate(|y| { assert!(x[*y as usize] == *y); true });\n+    x.iterate(|y| { assert_eq!(x[*y as usize], *y); true });\n     // Call a parameterized function\n     assert_eq!(length(x.clone()), x.len());\n     // Call a parameterized function, with type arguments that require"}, {"sha": "f5434c9eb865ce4adaf964854eb0d1d13c3ce739", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,7 +16,7 @@ pub trait Foo {\n     fn boo(&self) -> <Self as Foo>::A;\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n pub struct Bar;\n \n impl Foo for isize {\n@@ -44,12 +44,12 @@ fn foo2<I: Foo>(x: I) -> <I as Foo>::A {\n \n pub fn main() {\n     let a = 42;\n-    assert!(foo2(a) == 42);\n+    assert_eq!(foo2(a), 42);\n \n     let a = Bar;\n-    assert!(foo2(a) == 43);\n+    assert_eq!(foo2(a), 43);\n \n     let a = 'a';\n     foo1(a);\n-    assert!(foo2(a) == Bar);\n+    assert_eq!(foo2(a), Bar);\n }"}, {"sha": "1152574d069424d85106ac24f91fa3db0f1066ff", "filename": "src/test/run-pass/bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -74,8 +74,8 @@ fn main() {\n     assert!(true >= false);\n     assert!(!(true <= false));\n \n-    assert!(true.cmp(&true) == Equal);\n-    assert!(false.cmp(&false) == Equal);\n-    assert!(true.cmp(&false) == Greater);\n-    assert!(false.cmp(&true) == Less);\n+    assert_eq!(true.cmp(&true), Equal);\n+    assert_eq!(false.cmp(&false), Equal);\n+    assert_eq!(true.cmp(&false), Greater);\n+    assert_eq!(false.cmp(&true), Less);\n }"}, {"sha": "e028c3b9d4b30bedc4302d34a05debfe046a4da3", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -30,5 +30,5 @@ fn foo<T: Foo + 'static>(val: T, chan: Sender<T>) {\n pub fn main() {\n     let (tx, rx) = channel();\n     foo(31337, tx);\n-    assert!(rx.recv().unwrap() == 31337);\n+    assert_eq!(rx.recv().unwrap(), 31337);\n }"}, {"sha": "1a27eae19432846c1b1143543fb0bd3b354e65ee", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -20,7 +20,7 @@ extern crate trait_superkinds_in_metadata;\n use std::sync::mpsc::{channel, Sender, Receiver};\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n struct X<T>(T);\n \n impl <T: Sync> RequiresShare for X<T> { }\n@@ -33,5 +33,5 @@ fn foo<T: RequiresRequiresShareAndSend + 'static>(val: T, chan: Sender<T>) {\n pub fn main() {\n     let (tx, rx): (Sender<X<isize>>, Receiver<X<isize>>) = channel();\n     foo(X(31337), tx);\n-    assert!(rx.recv().unwrap() == X(31337));\n+    assert_eq!(rx.recv().unwrap(), X(31337));\n }"}, {"sha": "99a68790e76e91d34d006927dc4b72d5eed22d86", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -26,5 +26,5 @@ fn foo<T: Foo + 'static>(val: T, chan: Sender<T>) {\n pub fn main() {\n     let (tx, rx): (Sender<isize>, Receiver<isize>) = channel();\n     foo(31337, tx);\n-    assert!(rx.recv().unwrap() == 31337);\n+    assert_eq!(rx.recv().unwrap(), 31337);\n }"}, {"sha": "9b8893b0762fdbc69e53e36f2c132f01138c6a7e", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -25,5 +25,5 @@ impl <T: Send + 'static> Foo for T { }\n pub fn main() {\n     let (tx, rx) = channel();\n     1193182.foo(tx);\n-    assert!(rx.recv().unwrap() == 1193182);\n+    assert_eq!(rx.recv().unwrap(), 1193182);\n }"}, {"sha": "84f22025a1d7ac529f28ce9020dc0f81c29e11aa", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -37,6 +37,6 @@ fn atoll(s: String) -> i64 {\n \n pub fn main() {\n     assert_eq!(atol(\"1024\".to_string()) * 10, atol(\"10240\".to_string()));\n-    assert!((atoll(\"11111111111111111\".to_string()) * 10) ==\n+    assert_eq!((atoll(\"11111111111111111\".to_string()) * 10),\n              atoll(\"111111111111111110\".to_string()));\n }"}, {"sha": "998f41259777111b2a96bf6c09cf55a10d3f91ad", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -22,6 +22,6 @@ pub fn main() {\n \n         //let bt1 = sys::frame_address();\n         //println!(\"%?\", bt1);\n-        //assert!(bt0 == bt1);\n+        //assert_eq!(bt0, bt1);\n     })\n }"}, {"sha": "4d9646522749cfe8b2f2321372c2754b39a189c0", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     //println!(\"%?\", bt0);\n     cci_iter_lib::iter(&[1, 2, 3], |i| {\n         println!(\"{}\", *i);\n-        //assert!(bt0 == sys::rusti::frame_address(2));\n+        //assert_eq!(bt0, sys::rusti::frame_address(2));\n     })\n }"}, {"sha": "9286991a4a38ac5a6cc77fc5f37b95c0a1db988b", "filename": "src/test/run-pass/check-static-slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -28,14 +28,14 @@ static cf: isize = af[2];\n \n fn main () {\n     let b: &[isize] = &[1, 2, 3];\n-    assert!(ac == b);\n-    assert!(ad == b);\n-    assert!(af == b);\n+    assert_eq!(ac, b);\n+    assert_eq!(ad, b);\n+    assert_eq!(af, b);\n \n-    assert!(ca == 1);\n-    assert!(cb == 2);\n-    assert!(cc == 3);\n-    assert!(cd == 1);\n-    assert!(ce == 2);\n-    assert!(cf == 3);\n+    assert_eq!(ca, 1);\n+    assert_eq!(cb, 2);\n+    assert_eq!(cc, 3);\n+    assert_eq!(cd, 1);\n+    assert_eq!(ce, 2);\n+    assert_eq!(cf, 3);\n }"}, {"sha": "27a57a888591556955e86166cc56aa6d0140f28c", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -104,7 +104,7 @@ impl<T> cat<T> {\n pub fn main() {\n     let mut nyan: cat<String> = cat::new(0, 2, \"nyan\".to_string());\n     for _ in 1_usize..5 { nyan.speak(); }\n-    assert!(*nyan.find(&1).unwrap() == \"nyan\".to_string());\n+    assert_eq!(*nyan.find(&1).unwrap(), \"nyan\".to_string());\n     assert_eq!(nyan.find(&10), None);\n     let mut spotty: cat<cat_type> = cat::new(2, 57, cat_type::tuxedo);\n     for _ in 0_usize..6 { spotty.speak(); }"}, {"sha": "d4b570a4db654b41f07b6bff096d36834d9d6cbd", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,6 +13,7 @@ use std::cmp::Ordering;\n \n // Test default methods in PartialOrd and PartialEq\n //\n+#[derive(Debug)]\n struct Fool(bool);\n \n impl PartialEq for Fool {\n@@ -74,8 +75,8 @@ pub fn main() {\n     assert!(RevInt(1) >= RevInt(2));\n     assert!(RevInt(1) >= RevInt(1));\n \n-    assert!(Fool(true)  == Fool(false));\n+    assert_eq!(Fool(true), Fool(false));\n     assert!(Fool(true)  != Fool(true));\n     assert!(Fool(false) != Fool(false));\n-    assert!(Fool(false) == Fool(true));\n+    assert_eq!(Fool(false), Fool(true));\n }"}, {"sha": "33e5e054650005416c7cc928b4772b38790e2f48", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n         _ => panic!()\n     }\n     match Y {\n-        Foo::Bar(s) => assert!(s == 2654435769),\n+        Foo::Bar(s) => assert_eq!(s, 2654435769),\n         _ => panic!()\n     }\n     match Z {"}, {"sha": "a526e0be3da41378e95c833a075f9a35bf239e76", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,6 +19,6 @@ static C: E = E::S1 { u: 23 };\n pub fn main() {\n     match C {\n         E::S0 { .. } => panic!(),\n-        E::S1 { u } => assert!(u == 23)\n+        E::S1 { u } => assert_eq!(u, 23)\n     }\n }"}, {"sha": "56aec867f9d6bcefef7a01713038d6724d7925a4", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n         _ => panic!()\n     }\n     match C1 {\n-        E::V1(n) => assert!(n == 0xDEADBEE),\n+        E::V1(n) => assert_eq!(n, 0xDEADBEE),\n         _ => panic!()\n     }\n \n@@ -32,7 +32,7 @@ pub fn main() {\n         _ => panic!()\n     }\n     match D1 {\n-        E::V1(n) => assert!(n == 0xDEADBEE),\n+        E::V1(n) => assert_eq!(n, 0xDEADBEE),\n         _ => panic!()\n     }\n }"}, {"sha": "0bd18a02e4a2da5cd6529d4bfb5ffd6e2c426fab", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,7 +14,7 @@ static C: &'static [E] = &[E::V0, E::V1(0xDEADBEE), E::V0];\n \n pub fn main() {\n     match C[1] {\n-        E::V1(n) => assert!(n == 0xDEADBEE),\n+        E::V1(n) => assert_eq!(n, 0xDEADBEE),\n         _ => panic!()\n     }\n     match C[2] {"}, {"sha": "e7a6f520a9924a50c16ddf87901cd4e527aad6af", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,7 +14,7 @@ static C: [E; 3] = [E::V0, E::V1(0xDEADBEE), E::V0];\n \n pub fn main() {\n     match C[1] {\n-        E::V1(n) => assert!(n == 0xDEADBEE),\n+        E::V1(n) => assert_eq!(n, 0xDEADBEE),\n         _ => panic!()\n     }\n     match C[2] {"}, {"sha": "93cae04a933010ae790723b1362e57501140eb64", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     unsafe {\n         let foo = &A as *const u8;\n         assert_eq!(str::from_utf8_unchecked(&A), \"hi\");\n-        assert!(*C == A[0]);\n-        assert!(*(&B[0] as *const u8) == A[0]);\n+        assert_eq!(*C, A[0]);\n+        assert_eq!(*(&B[0] as *const u8), A[0]);\n     }\n }"}, {"sha": "9ae4f2c1e70853cf887cab3b13e280e5b3adfdeb", "filename": "src/test/run-pass/deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdeep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdeep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,4 +16,4 @@ fn f(x: isize) -> isize {\n     if x == 1 { return 1; } else { let y: isize = 1 + f(x - 1); return y; }\n }\n \n-pub fn main() { assert!((f(5000) == 5000)); }\n+pub fn main() { assert_eq!(f(5000), 5000); }"}, {"sha": "fa50e3144ed843d7413e6dadd43b127393f1eb8b", "filename": "src/test/run-pass/deref-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-rc.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,5 +13,5 @@ use std::rc::Rc;\n \n fn main() {\n     let x = Rc::new([1, 2, 3, 4]);\n-    assert!(*x == [1, 2, 3, 4]);\n+    assert_eq!(*x, [1, 2, 3, 4]);\n }"}, {"sha": "328cc134f3b1fdf17da835c24c68ad925169d447", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -28,5 +28,5 @@ fn main() {\n     let obj = A { foo: Box::new([true, false]) };\n     let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(&s).unwrap();\n-    assert!(obj.foo == obj2.foo);\n+    assert_eq!(obj.foo, obj2.foo);\n }"}, {"sha": "6e5eb86c584116ab287768b69d112726ebc516a7", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -38,6 +38,6 @@ fn main() {\n     };\n     let s = json::encode(&obj).unwrap();\n     let obj2: B = json::decode(&s).unwrap();\n-    assert!(obj.foo.get() == obj2.foo.get());\n-    assert!(obj.bar.borrow().baz == obj2.bar.borrow().baz);\n+    assert_eq!(obj.foo.get(), obj2.foo.get());\n+    assert_eq!(obj.bar.borrow().baz, obj2.bar.borrow().baz);\n }"}, {"sha": "f490cca6a699d7000ef578c4b6e4e58a666ffaec", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(PartialEq, PartialOrd, Eq, Ord)]\n+#[derive(PartialEq, PartialOrd, Eq, Ord, Debug)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let a = Foo(Box::new([0, 1, 2]));\n     let b = Foo(Box::new([0, 1, 2]));\n-    assert!(a == b);\n+    assert_eq!(a, b);\n     println!(\"{}\", a != b);\n     println!(\"{}\", a < b);\n     println!(\"{}\", a <= b);"}, {"sha": "b5fb5205d7c38c3c62ac8690069bbfbeccec7c6f", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -35,6 +35,6 @@ fn main() {\n         name: \"Bob\".to_string(),\n         phone: 555_666_7777\n     };\n-    assert!(hash(&person1) == hash(&person1));\n+    assert_eq!(hash(&person1), hash(&person1));\n     assert!(hash(&person1) != hash(&person2));\n }"}, {"sha": "9dffac00a2274c26a47aa287bbeb7013e41661ee", "filename": "src/test/run-pass/deriving-via-extension-struct-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,8 +16,8 @@ pub fn main() {\n   let a2 = Foo(5, 6, \"abc\".to_string());\n   let b = Foo(5, 7, \"def\".to_string());\n \n-  assert!(a1 == a1);\n-  assert!(a2 == a1);\n+  assert_eq!(a1, a1);\n+  assert_eq!(a2, a1);\n   assert!(!(a1 == b));\n \n   assert!(a1 != b);"}, {"sha": "0666e41738e3c88410e3702300d2cc12615999ff", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -33,9 +33,9 @@ impl DerefMut for Arr {\n \n pub fn foo(arr: &mut Arr) {\n     let x: &mut [usize] = &mut **arr;\n-    assert!(x[0] == 1);\n-    assert!(x[1] == 2);\n-    assert!(x[2] == 3);\n+    assert_eq!(x[0], 1);\n+    assert_eq!(x[1], 2);\n+    assert_eq!(x[2], 3);\n }\n \n fn main() {"}, {"sha": "957ed13a3d8175009f2563dce6269afd5675c504", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -26,11 +26,11 @@ impl Deref for Arr {\n }\n \n pub fn foo(arr: &Arr) {\n-    assert!(arr.len() == 3);\n+    assert_eq!(arr.len(), 3);\n     let x: &[usize] = &**arr;\n-    assert!(x[0] == 1);\n-    assert!(x[1] == 2);\n-    assert!(x[2] == 3);\n+    assert_eq!(x[0], 1);\n+    assert_eq!(x[1], 2);\n+    assert_eq!(x[2], 3);\n }\n \n fn main() {"}, {"sha": "3a74626b0299f2be8af8229e70da2ad5ded479db", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -35,41 +35,41 @@ pub fn main() {\n     let r = unsafe {\n         (&*z).foo()\n     };\n-    assert!(r == 42);\n+    assert_eq!(r, 42);\n \n     // raw DST struct\n     let p = Foo {f: A { f: 42 }};\n     let o: *const Foo<Trait> = &p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n-    assert!(r == 42);\n+    assert_eq!(r, 42);\n \n     // raw slice\n     let a: *const [_] = &[1, 2, 3];\n     unsafe {\n         let b = (*a)[2];\n-        assert!(b == 3);\n+        assert_eq!(b, 3);\n         let len = (*a).len();\n-        assert!(len == 3);\n+        assert_eq!(len, 3);\n     }\n \n     // raw slice with explicit cast\n     let a = &[1, 2, 3] as *const [i32];\n     unsafe {\n         let b = (*a)[2];\n-        assert!(b == 3);\n+        assert_eq!(b, 3);\n         let len = (*a).len();\n-        assert!(len == 3);\n+        assert_eq!(len, 3);\n     }\n \n     // raw DST struct with slice\n     let c: *const Foo<[_]> = &Foo {f: [1, 2, 3]};\n     unsafe {\n         let b = (&*c).f[0];\n-        assert!(b == 1);\n+        assert_eq!(b, 1);\n         let len = (&*c).f.len();\n-        assert!(len == 3);\n+        assert_eq!(len, 3);\n     }\n \n     // all of the above with *mut\n@@ -78,36 +78,36 @@ pub fn main() {\n     let r = unsafe {\n         (&*z).foo()\n     };\n-    assert!(r == 42);\n+    assert_eq!(r, 42);\n \n     let mut p = Foo {f: A { f: 42 }};\n     let o: *mut Foo<Trait> = &mut p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n-    assert!(r == 42);\n+    assert_eq!(r, 42);\n \n     let a: *mut [_] = &mut [1, 2, 3];\n     unsafe {\n         let b = (*a)[2];\n-        assert!(b == 3);\n+        assert_eq!(b, 3);\n         let len = (*a).len();\n-        assert!(len == 3);\n+        assert_eq!(len, 3);\n     }\n \n     let a = &mut [1, 2, 3] as *mut [i32];\n     unsafe {\n         let b = (*a)[2];\n-        assert!(b == 3);\n+        assert_eq!(b, 3);\n         let len = (*a).len();\n-        assert!(len == 3);\n+        assert_eq!(len, 3);\n     }\n \n     let c: *mut Foo<[_]> = &mut Foo {f: [1, 2, 3]};\n     unsafe {\n         let b = (&*c).f[0];\n-        assert!(b == 1);\n+        assert_eq!(b, 1);\n         let len = (&*c).f.len();\n-        assert!(len == 3);\n+        assert_eq!(len, 3);\n     }\n }"}, {"sha": "58d7b35a5275cc2de0351d2e97ecd6342818c05d", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,20 +18,20 @@ struct Fat<T: ?Sized> {\n // x is a fat pointer\n fn foo(x: &Fat<[isize]>) {\n     let y = &x.ptr;\n-    assert!(x.ptr.len() == 3);\n-    assert!(y[0] == 1);\n-    assert!(x.ptr[1] == 2);\n+    assert_eq!(x.ptr.len(), 3);\n+    assert_eq!(y[0], 1);\n+    assert_eq!(x.ptr[1], 2);\n }\n \n fn foo2<T:ToBar>(x: &Fat<[T]>) {\n     let y = &x.ptr;\n     let bar = Bar;\n-    assert!(x.ptr.len() == 3);\n-    assert!(y[0].to_bar() == bar);\n-    assert!(x.ptr[1].to_bar() == bar);\n+    assert_eq!(x.ptr.len(), 3);\n+    assert_eq!(y[0].to_bar(), bar);\n+    assert_eq!(x.ptr[1].to_bar(), bar);\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n struct Bar;\n \n trait ToBar {\n@@ -73,9 +73,9 @@ pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<[isize]> = &mut Fat { ptr: [1, 2, 3] };\n     f5.ptr[1] = 34;\n-    assert!(f5.ptr[0] == 1);\n-    assert!(f5.ptr[1] == 34);\n-    assert!(f5.ptr[2] == 3);\n+    assert_eq!(f5.ptr[0], 1);\n+    assert_eq!(f5.ptr[1], 34);\n+    assert_eq!(f5.ptr[2], 3);\n \n     // Zero size vec.\n     let f5: &Fat<[isize]> = &Fat { ptr: [] };"}, {"sha": "94efa7a256b4d0cf0c1d6c638ad5611aaa001763", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -21,36 +21,36 @@ struct Fat<T: ?Sized> {\n // x is a fat pointer\n fn foo(x: &Fat<[isize]>) {\n     let y = &x.ptr;\n-    assert!(x.ptr.len() == 3);\n-    assert!(y[0] == 1);\n-    assert!(x.ptr[1] == 2);\n-    assert!(x.f1 == 5);\n-    assert!(x.f2 == \"some str\");\n+    assert_eq!(x.ptr.len(), 3);\n+    assert_eq!(y[0], 1);\n+    assert_eq!(x.ptr[1], 2);\n+    assert_eq!(x.f1, 5);\n+    assert_eq!(x.f2, \"some str\");\n }\n \n fn foo2<T:ToBar>(x: &Fat<[T]>) {\n     let y = &x.ptr;\n     let bar = Bar;\n-    assert!(x.ptr.len() == 3);\n-    assert!(y[0].to_bar() == bar);\n-    assert!(x.ptr[1].to_bar() == bar);\n-    assert!(x.f1 == 5);\n-    assert!(x.f2 == \"some str\");\n+    assert_eq!(x.ptr.len(), 3);\n+    assert_eq!(y[0].to_bar(), bar);\n+    assert_eq!(x.ptr[1].to_bar(), bar);\n+    assert_eq!(x.f1, 5);\n+    assert_eq!(x.f2, \"some str\");\n }\n \n fn foo3(x: &Fat<Fat<[isize]>>) {\n     let y = &x.ptr.ptr;\n-    assert!(x.f1 == 5);\n-    assert!(x.f2 == \"some str\");\n-    assert!(x.ptr.f1 == 8);\n-    assert!(x.ptr.f2 == \"deep str\");\n-    assert!(x.ptr.ptr.len() == 3);\n-    assert!(y[0] == 1);\n-    assert!(x.ptr.ptr[1] == 2);\n+    assert_eq!(x.f1, 5);\n+    assert_eq!(x.f2, \"some str\");\n+    assert_eq!(x.ptr.f1, 8);\n+    assert_eq!(x.ptr.f2, \"deep str\");\n+    assert_eq!(x.ptr.ptr.len(), 3);\n+    assert_eq!(y[0], 1);\n+    assert_eq!(x.ptr.ptr[1], 2);\n }\n \n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n struct Bar;\n \n trait ToBar {\n@@ -92,9 +92,9 @@ pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<[isize]> = &mut Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n     f5.ptr[1] = 34;\n-    assert!(f5.ptr[0] == 1);\n-    assert!(f5.ptr[1] == 34);\n-    assert!(f5.ptr[2] == 3);\n+    assert_eq!(f5.ptr[0], 1);\n+    assert_eq!(f5.ptr[1], 34);\n+    assert_eq!(f5.ptr[2], 3);\n \n     // Zero size vec.\n     let f5: &Fat<[isize]> = &Fat { f1: 5, f2: \"some str\", ptr: [] };\n@@ -117,9 +117,9 @@ pub fn main() {\n \n     // Box.\n     let f1 = Box::new([1, 2, 3]);\n-    assert!((*f1)[1] == 2);\n+    assert_eq!((*f1)[1], 2);\n     let f2: Box<[isize]> = f1;\n-    assert!((*f2)[1] == 2);\n+    assert_eq!((*f2)[1], 2);\n \n     // Nested Box.\n     let f1 : Box<Fat<[isize; 3]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };"}, {"sha": "9d12a4a34b7d4a1c5ca7c688ba5e019b0d94b529", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,7 +18,7 @@ struct Fat<T: ?Sized> {\n     ptr: T\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n struct Bar;\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n@@ -50,32 +50,32 @@ impl ToBar for Bar1 {\n \n // x is a fat pointer\n fn foo(x: &Fat<ToBar>) {\n-    assert!(x.f1 == 5);\n-    assert!(x.f2 == \"some str\");\n-    assert!(x.ptr.to_bar() == Bar);\n-    assert!(x.ptr.to_val() == 42);\n+    assert_eq!(x.f1, 5);\n+    assert_eq!(x.f2, \"some str\");\n+    assert_eq!(x.ptr.to_bar(), Bar);\n+    assert_eq!(x.ptr.to_val(), 42);\n \n     let y = &x.ptr;\n-    assert!(y.to_bar() == Bar);\n-    assert!(y.to_val() == 42);\n+    assert_eq!(y.to_bar(), Bar);\n+    assert_eq!(y.to_val(), 42);\n }\n \n fn bar(x: &ToBar) {\n-    assert!(x.to_bar() == Bar);\n-    assert!(x.to_val() == 42);\n+    assert_eq!(x.to_bar(), Bar);\n+    assert_eq!(x.to_val(), 42);\n }\n \n fn baz(x: &Fat<Fat<ToBar>>) {\n-    assert!(x.f1 == 5);\n-    assert!(x.f2 == \"some str\");\n-    assert!(x.ptr.f1 == 8);\n-    assert!(x.ptr.f2 == \"deep str\");\n-    assert!(x.ptr.ptr.to_bar() == Bar);\n-    assert!(x.ptr.ptr.to_val() == 42);\n+    assert_eq!(x.f1, 5);\n+    assert_eq!(x.f2, \"some str\");\n+    assert_eq!(x.ptr.f1, 8);\n+    assert_eq!(x.ptr.f2, \"deep str\");\n+    assert_eq!(x.ptr.ptr.to_bar(), Bar);\n+    assert_eq!(x.ptr.ptr.to_val(), 42);\n \n     let y = &x.ptr.ptr;\n-    assert!(y.to_bar() == Bar);\n-    assert!(y.to_val() == 42);\n+    assert_eq!(y.to_bar(), Bar);\n+    assert_eq!(y.to_val(), 42);\n \n }\n \n@@ -93,7 +93,7 @@ pub fn main() {\n \n     // Zero size object.\n     let f6: &Fat<ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar };\n-    assert!(f6.ptr.to_bar() == Bar);\n+    assert_eq!(f6.ptr.to_bar(), Bar);\n \n     // &*\n     //"}, {"sha": "fafd8b576ff0fc467ee274678f4ef01cdba2b3c9", "filename": "src/test/run-pass/enum-discr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discr.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -26,6 +26,6 @@ enum Hero {\n pub fn main() {\n     let pet: Animal = Animal::Snake;\n     let hero: Hero = Hero::Superman;\n-    assert!(pet as usize == 3);\n-    assert!(hero as isize == -2);\n+    assert_eq!(pet as usize, 3);\n+    assert_eq!(hero as isize, -2);\n }"}, {"sha": "425d8f6d651ccab3023dc55895e22495ff12d4fb", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n }\n \n fn test_color(color: color, val: isize, _name: String) {\n-    assert!(color as isize == val);\n+    assert_eq!(color as isize , val);\n }"}, {"sha": "2110f0b3bf9d607caef7cae98c8532033e41340d", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     let oldhome = var(\"HOME\");\n \n     set_var(\"HOME\", \"/home/MountainView\");\n-    assert!(home_dir() == Some(PathBuf::from(\"/home/MountainView\")));\n+    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n \n     remove_var(\"HOME\");\n     if cfg!(target_os = \"android\") {\n@@ -40,14 +40,14 @@ fn main() {\n     assert!(home_dir().is_some());\n \n     set_var(\"HOME\", \"/home/MountainView\");\n-    assert!(home_dir() == Some(PathBuf::from(\"/home/MountainView\")));\n+    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n \n     remove_var(\"HOME\");\n \n     set_var(\"USERPROFILE\", \"/home/MountainView\");\n-    assert!(home_dir() == Some(PathBuf::from(\"/home/MountainView\")));\n+    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n \n     set_var(\"HOME\", \"/home/MountainView\");\n     set_var(\"USERPROFILE\", \"/home/PaloAlto\");\n-    assert!(home_dir() == Some(PathBuf::from(\"/home/MountainView\")));\n+    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n }"}, {"sha": "ca37ee28bcbc2ea11a9bcd7d4133a6338aef090a", "filename": "src/test/run-pass/eq-multidispatch.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -9,10 +9,13 @@\n // except according to those terms.\n \n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n struct Bar;\n+#[derive(Debug)]\n struct Baz;\n+#[derive(Debug)]\n struct Foo;\n+#[derive(Debug)]\n struct Fu;\n \n impl PartialEq for Baz { fn eq(&self, _: &Baz) -> bool  { true } }\n@@ -27,10 +30,10 @@ fn main() {\n     assert!(Bar != Foo);\n     assert!(Foo != Bar);\n \n-    assert!(Bar == Bar);\n+    assert_eq!(Bar, Bar);\n \n-    assert!(Baz == Baz);\n+    assert_eq!(Baz, Baz);\n \n-    assert!(Foo == Fu);\n-    assert!(Fu == Foo);\n+    assert_eq!(Foo, Fu);\n+    assert_eq!(Fu, Foo);\n }"}, {"sha": "32641c4a3f2c968127a16cfc756f2bf4953cf723", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,7 +14,7 @@\n fn test_fn() {\n     fn ten() -> isize { return 10; }\n     let rs = ten;\n-    assert!((rs() == 10));\n+    assert_eq!(rs(), 10);\n }\n \n pub fn main() { test_fn(); }"}, {"sha": "eb24d70de90f6c5d6fa14c503bb70723f941f90d", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,4 +13,4 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub fn main() { let x: Box<_> = { box 100 }; assert!((*x == 100)); }\n+pub fn main() { let x: Box<_> = { box 100 }; assert_eq!(*x, 100); }"}, {"sha": "664555caf26bb944163e88cd2e9e7bc5f9ad7468", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,7 +18,7 @@ fn test_basic() { let rs: bool = { true }; assert!((rs)); }\n \n struct RS { v1: isize, v2: isize }\n \n-fn test_rec() { let rs = { RS {v1: 10, v2: 20} }; assert!((rs.v2 == 20)); }\n+fn test_rec() { let rs = { RS {v1: 10, v2: 20} }; assert_eq!(rs.v2, 20); }\n \n fn test_filled_with_stuff() {\n     let rs = { let mut a = 0; while a < 10 { a += 1; } a };"}, {"sha": "1bedc2a5a17073810f7876ef1b924ad6b4d9c202", "filename": "src/test/run-pass/expr-if-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -11,7 +11,7 @@\n \n fn test_if_panic() {\n     let x = if false { panic!() } else { 10 };\n-    assert!((x == 10));\n+    assert_eq!(x, 10);\n }\n \n fn test_else_panic() {"}, {"sha": "5ab6c7774d55cf3a83c3012fe4ef9a8db6f9393f", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,9 +16,9 @@ use std::cell::Cell;\n struct Point {x: isize, y: isize, z: isize}\n \n fn f(p: &Cell<Point>) {\n-    assert!((p.get().z == 12));\n+    assert_eq!(p.get().z, 12);\n     p.set(Point {x: 10, y: 11, z: 13});\n-    assert!((p.get().z == 13));\n+    assert_eq!(p.get().z, 13);\n }\n \n pub fn main() {"}, {"sha": "0926386ef93c48571a887ebaf847092885765103", "filename": "src/test/run-pass/fat-ptr-cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -26,13 +26,13 @@ fn main() {\n     let a: *const [i32] = &[1, 2, 3];\n     let b = a as *const [i32; 2];\n     unsafe {\n-        assert!(*b == [1, 2]);\n+        assert_eq!(*b, [1, 2]);\n     }\n \n     // Test conversion to an address (usize).\n     let a: *const [i32; 3] = &[1, 2, 3];\n     let b: *const [i32] = a;\n-    assert!(a as usize == b as *const () as usize);\n+    assert_eq!(a as usize, b as *const () as usize);\n \n     // And conversion to a void pointer/address for trait objects too.\n     let a: *mut Foo = &mut Bar;\n@@ -43,7 +43,7 @@ fn main() {\n         r.data\n     };\n \n-    assert!(b == d);\n-    assert!(c == d as usize);\n+    assert_eq!(b, d);\n+    assert_eq!(c, d as usize);\n \n }"}, {"sha": "e63c29eb0173a6f6f0086cb307bc1aaf4edbfbd3", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,5 +18,5 @@ pub fn main() {\n         }\n         y += *i;\n     }\n-    assert!(y == 11);\n+    assert_eq!(y, 11);\n }"}, {"sha": "ea55c90bdf12db1dce0df7ae9db1c3cf8940c9cd", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -20,5 +20,5 @@ pub fn main() {\n         }\n         q += *i + p;\n     }\n-    assert!(q == 1010100);\n+    assert_eq!(q, 1010100);\n }"}, {"sha": "9b847517ec8fb9536f6fde982eb62b58903fcc54", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -15,5 +15,5 @@ pub fn main() {\n     for i in &x[..] {\n         y += *i\n     }\n-    assert!(y == 100);\n+    assert_eq!(y, 100);\n }"}, {"sha": "bff86207f7862f841255d8571b442ee854a58da3", "filename": "src/test/run-pass/generic-fn-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,4 +16,4 @@\n \n fn id<T>(x: T) -> T { return x; }\n \n-pub fn main() { let x: isize = 42; let y: isize = id(x); assert!((x == y)); }\n+pub fn main() { let x: isize = 42; let y: isize = id(x); assert_eq!(x, y); }"}, {"sha": "1acb23209009eabdad6db4e8d409a96e7b5d6a43", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,7 +14,7 @@ struct Pair { x: isize, y: isize }\n \n pub fn main() {\n     let nop: noption<isize> = noption::some::<isize>(5);\n-    match nop { noption::some::<isize>(n) => { println!(\"{}\", n); assert!((n == 5)); } }\n+    match nop { noption::some::<isize>(n) => { println!(\"{}\", n); assert_eq!(n, 5); } }\n     let nop2: noption<Pair> = noption::some(Pair{x: 17, y: 42});\n     match nop2 {\n       noption::some(t) => {"}, {"sha": "80a6efe7a0ef9e13ecf5746473b63a52e4536e88", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -11,7 +11,7 @@\n \n fn mk() -> isize { return 1; }\n \n-fn chk(a: isize) { println!(\"{}\", a); assert!((a == 1)); }\n+fn chk(a: isize) { println!(\"{}\", a); assert_eq!(a, 1); }\n \n fn apply<T>(produce: fn() -> T,\n             consume: fn(T)) {"}, {"sha": "8e155c459965db3fe56f53bf7f1efac560a14ed8", "filename": "src/test/run-pass/global-scope.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglobal-scope.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,7 +14,10 @@ pub fn f() -> isize { return 1; }\n \n pub mod foo {\n     pub fn f() -> isize { return 2; }\n-    pub fn g() { assert!((f() == 2)); assert!((::f() == 1)); }\n+    pub fn g() {\n+        assert_eq!(f(), 2);\n+        assert_eq!(::f(), 1);\n+    }\n }\n \n pub fn main() { return foo::g(); }"}, {"sha": "143787a466b80ebadc4a32be051350c46b968961", "filename": "src/test/run-pass/i32-sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi32-sub.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,4 +12,4 @@\n \n \n \n-pub fn main() { let mut x: i32 = -400; x = 0 - x; assert!((x == 400)); }\n+pub fn main() { let mut x: i32 = -400; x = 0 - x; assert_eq!(x, 400); }"}, {"sha": "f547519b671f1e28e04f16fb59f7a664287f0548", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -102,13 +102,13 @@ pub fn main() {\n \n         // Causes linker error\n         // undefined reference to llvm.ceil.f32/64\n-        //assert!((ceilf32(-2.3f32) == -2.0f32));\n-        //assert!((ceilf64(3.8f64) == 4.0f64));\n+        //assert_eq!(ceilf32(-2.3f32), -2.0f32);\n+        //assert_eq!(ceilf64(3.8f64), 4.0f64);\n \n         // Causes linker error\n         // undefined reference to llvm.trunc.f32/64\n-        //assert!((truncf32(0.1f32) == 0.0f32));\n-        //assert!((truncf64(-0.1f64) == 0.0f64));\n+        //assert_eq!(truncf32(0.1f32), 0.0f32);\n+        //assert_eq!(truncf64(-0.1f64), 0.0f64);\n     }\n \n }"}, {"sha": "3dc96ecde1c0769b84d32dadea417104537fd485", "filename": "src/test/run-pass/issue-10734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-10734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-10734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10734.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n         let _a = Foo{ dropped: false };\n     }\n     // Check that we dropped already (as expected from a `{ expr }`).\n-    unsafe { assert!(drop_count == 1); }\n+    unsafe { assert_eq!(drop_count, 1); }\n \n     // An `if false {} else { expr }` statement should compile the same as `{ expr }`.\n     if false {\n@@ -43,5 +43,5 @@ pub fn main() {\n         let _a = Foo{ dropped: false };\n     }\n     // Check that we dropped already (as expected from a `{ expr }`).\n-    unsafe { assert!(drop_count == 2); }\n+    unsafe { assert_eq!(drop_count, 2); }\n }"}, {"sha": "7b00ea4a520cddb5f3be7c429073c855af69004b", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -29,5 +29,5 @@ fn main() {\n                 break\n         }\n     }\n-    assert!(result == [2, 4]);\n+    assert_eq!(result, [2, 4]);\n }"}, {"sha": "20d66cd8176e72d474ea39612bdfa5a795b7880c", "filename": "src/test/run-pass/issue-15689-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-15689-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-15689-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15689-1.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n enum Test<'a> {\n     Slice(&'a isize)\n }\n \n fn main() {\n-    assert!(Test::Slice(&1) == Test::Slice(&1))\n+    assert_eq!(Test::Slice(&1), Test::Slice(&1))\n }"}, {"sha": "66b0aeeb988d74f51ef9939e131a486edb476c9a", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -57,14 +57,14 @@ fn main() {\n     let m = Mat::new(vec!(1, 2, 3, 4, 5, 6), 3);\n     let r = m.row(1);\n \n-    assert!(r.index(2) == &6);\n-    assert!(r[2] == 6);\n-    assert!(r[2] == 6);\n-    assert!(6 == r[2]);\n+    assert_eq!(r.index(2), &6);\n+    assert_eq!(r[2], 6);\n+    assert_eq!(r[2], 6);\n+    assert_eq!(6, r[2]);\n \n     let e = r[2];\n-    assert!(e == 6);\n+    assert_eq!(e, 6);\n \n     let e: usize = r[2];\n-    assert!(e == 6);\n+    assert_eq!(e, 6);\n }"}, {"sha": "bc144ee33306d7652f2d3f7ff1e02004dc1fcb7d", "filename": "src/test/run-pass/issue-16530.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-16530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-16530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16530.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -17,5 +17,5 @@ use std::hash::{SipHasher, hash};\n struct Empty;\n \n pub fn main() {\n-    assert!(hash::<_, SipHasher>(&Empty) == hash::<_, SipHasher>(&Empty));\n+    assert_eq!(hash::<_, SipHasher>(&Empty), hash::<_, SipHasher>(&Empty));\n }"}, {"sha": "2ef66809a8d80ba0680af27246bad0e3ce2f6e8c", "filename": "src/test/run-pass/issue-21384.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21384.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -15,16 +15,16 @@ fn test<T : Clone>(arg: T) -> T {\n     arg.clone()\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n struct Test(isize);\n \n fn main() {\n     // Check that ranges implement clone\n-    assert!(test(1..5) == (1..5));\n-    assert!(test(..5) == (..5));\n-    assert!(test(1..) == (1..));\n-    assert!(test(RangeFull) == (RangeFull));\n+    assert_eq!(test(1..5), (1..5));\n+    assert_eq!(test(..5), (..5));\n+    assert_eq!(test(1..), (1..));\n+    assert_eq!(test(RangeFull), (RangeFull));\n \n     // Check that ranges can still be used with non-clone limits\n-    assert!((Test(1)..Test(5)) == (Test(1)..Test(5)));\n+    assert_eq!((Test(1)..Test(5)), (Test(1)..Test(5)));\n }"}, {"sha": "d82fce97c41dc52707c899516d1e751bb9bff55e", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -70,14 +70,14 @@ fn read_board_grid<rdr:'static + Read>(mut input: rdr)\n     }\n     grid.push(row);\n     let width = grid[0].len();\n-    for row in &grid { assert!(row.len() == width) }\n+    for row in &grid { assert_eq!(row.len(), width) }\n     grid\n }\n \n mod test {\n     #[test]\n     pub fn trivial_to_string() {\n-        assert!(lambda.to_string() == \"\\\\\")\n+        assert_eq!(lambda.to_string(), \"\\\\\")\n     }\n }\n "}, {"sha": "bdd0a535303951d258a5a5c6800c4cce7292a123", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,4 +13,4 @@ fn quux<T>(x: T) -> T { let f = id::<T>; return f(x); }\n \n fn id<T>(x: T) -> T { return x; }\n \n-pub fn main() { assert!((quux(10) == 10)); }\n+pub fn main() { assert_eq!(quux(10), 10); }"}, {"sha": "406746ab8c54cfba4d1a84ed463f2870e7212b26", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,5 +14,5 @@\n pub fn main() {\n     let _f = |ref x: isize| { *x };\n     let foo = 10;\n-    assert!(_f(foo) == 10);\n+    assert_eq!(_f(foo), 10);\n }"}, {"sha": "87e0799f634612a3aabf3144cfca6169555aba70", "filename": "src/test/run-pass/issue-7663.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-7663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-7663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7663.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,7 +19,7 @@ mod test1 {\n     pub mod baz {\n         use test1::bar::p;\n \n-        pub fn my_main() { assert!(p() == 2); }\n+        pub fn my_main() { assert_eq!(p(), 2); }\n     }\n }\n \n@@ -31,7 +31,7 @@ mod test2 {\n     pub mod baz {\n         use test2::bar::p;\n \n-        pub fn my_main() { assert!(p() == 2); }\n+        pub fn my_main() { assert_eq!(p(), 2); }\n     }\n }\n "}, {"sha": "badc013cd621f6297af82991af69264dc35b0073", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -37,6 +37,6 @@ fn main() {\n     let out = bar(\"baz\", \"foo\");\n     let [a, xs.., d] = out;\n     assert_eq!(a, \"baz\");\n-    assert!(xs == [\"foo\", \"foo\"]);\n+    assert_eq!(xs, [\"foo\", \"foo\"]);\n     assert_eq!(d, \"baz\");\n }"}, {"sha": "d57b2a3236895727b8a3186ee8cee582267092ba", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,23 +13,23 @@ pub fn main() {\n     match &[(Box::new(5),Box::new(7))] {\n         ps => {\n            let (ref y, _) = ps[0];\n-           assert!(**y == 5);\n+           assert_eq!(**y, 5);\n         }\n     }\n \n     match Some(&[(Box::new(5),)]) {\n         Some(ps) => {\n            let (ref y,) = ps[0];\n-           assert!(**y == 5);\n+           assert_eq!(**y, 5);\n         }\n         None => ()\n     }\n \n     match Some(&[(Box::new(5),Box::new(7))]) {\n         Some(ps) => {\n            let (ref y, ref z) = ps[0];\n-           assert!(**y == 5);\n-           assert!(**z == 7);\n+           assert_eq!(**y, 5);\n+           assert_eq!(**z, 7);\n         }\n         None => ()\n     }"}, {"sha": "3197d7f0160a67151175e8c46be6e207898ec83c", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,7 +16,7 @@ fn test_stack_assign() {\n     let s: String = \"a\".to_string();\n     println!(\"{}\", s.clone());\n     let t: String = \"a\".to_string();\n-    assert!(s == t);\n+    assert_eq!(s, t);\n     let u: String = \"b\".to_string();\n     assert!((s != u));\n }\n@@ -26,7 +26,7 @@ fn test_heap_lit() { \"a big string\".to_string(); }\n fn test_heap_assign() {\n     let s: String = \"a big ol' string\".to_string();\n     let t: String = \"a big ol' string\".to_string();\n-    assert!(s == t);\n+    assert_eq!(s, t);\n     let u: String = \"a bad ol' string\".to_string();\n     assert!((s != u));\n }\n@@ -48,10 +48,10 @@ fn test_append() {\n \n     let mut s = String::from(\"c\");\n     s.push_str(\"offee\");\n-    assert!(s == \"coffee\");\n+    assert_eq!(s, \"coffee\");\n \n     s.push_str(\"&tea\");\n-    assert!(s == \"coffee&tea\");\n+    assert_eq!(s, \"coffee&tea\");\n }\n \n pub fn main() {"}, {"sha": "ddb4e40aea6332a9b772efb71a346dad3b939a39", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,11 +19,11 @@ pub fn main() {\n     let s = \"hello there\".to_string();\n     let mut i: isize = 0;\n     for c in s.bytes() {\n-        if i == 0 { assert!((c == 'h' as u8)); }\n-        if i == 1 { assert!((c == 'e' as u8)); }\n-        if i == 2 { assert!((c == 'l' as u8)); }\n-        if i == 3 { assert!((c == 'l' as u8)); }\n-        if i == 4 { assert!((c == 'o' as u8)); }\n+        if i == 0 { assert_eq!(c, 'h' as u8); }\n+        if i == 1 { assert_eq!(c, 'e' as u8); }\n+        if i == 2 { assert_eq!(c, 'l' as u8); }\n+        if i == 3 { assert_eq!(c, 'l' as u8); }\n+        if i == 4 { assert_eq!(c, 'o' as u8); }\n         // ...\n \n         i += 1;"}, {"sha": "1b1cdcb1102a2d3015e772388af3e32799254e92", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -20,7 +20,7 @@ struct Foo(Cell<isize>);\n impl fmt::Debug for Foo {\n     fn fmt(&self, _fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Foo(ref f) = *self;\n-        assert!(f.get() == 0);\n+        assert_eq!(f.get(), 0);\n         f.set(1);\n         Ok(())\n     }\n@@ -31,6 +31,6 @@ pub fn main() {\n         let mut f = Foo(Cell::new(0));\n         println!(\"{:?}\", f);\n         let Foo(ref mut f) = f;\n-        assert!(f.get() == 1);\n+        assert_eq!(f.get(), 1);\n     }).join().ok().unwrap();\n }"}, {"sha": "2cac9226117a29ae91e412f97d105c0039fd390a", "filename": "src/test/run-pass/macro-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n         })\n     }\n \n-    assert!(mylambda_tt!(y, y * 2)(8) == 16);\n+    assert_eq!(mylambda_tt!(y, y * 2)(8), 16);\n }"}, {"sha": "caf76b3ab2fe177e8ef538334ff3edeba5595b9f", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,7 +19,9 @@ pub fn main() {\n     let x_internal = &mut *x;\n     match *x_internal {\n       Pair {a: ref mut a, b: ref mut _b} => {\n-        assert!(**a == 10); *a = box 30; assert!(**a == 30);\n+        assert_eq!(**a, 10);\n+        *a = box 30;\n+        assert_eq!(**a, 30);\n       }\n     }\n }"}, {"sha": "32de1c6c6742747a9fc77d2727926d2deea4e820", "filename": "src/test/run-pass/match-pattern-lit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,4 +18,7 @@ fn altlit(f: isize) -> isize {\n     }\n }\n \n-pub fn main() { assert!((altlit(10) == 20)); assert!((altlit(11) == 22)); }\n+pub fn main() {\n+    assert_eq!(altlit(10), 20);\n+    assert_eq!(altlit(11), 22);\n+}"}, {"sha": "77e3b724cbe777fd71567a4640263a3b3ea36e37", "filename": "src/test/run-pass/match-static-const-rename.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -26,12 +26,12 @@ fn f() {\n         (0, A) => 0,\n         (x, y) => 1 + x + y,\n     };\n-    assert!(r == 1);\n+    assert_eq!(r, 1);\n     let r = match (0,97) {\n         (0, A) => 0,\n         (x, y) => 1 + x + y,\n     };\n-    assert!(r == 0);\n+    assert_eq!(r, 0);\n }\n \n mod m {\n@@ -45,25 +45,25 @@ fn g() {\n         (0, AHA) => 0,\n         (x, y)   => 1 + x + y,\n     };\n-    assert!(r == 1);\n+    assert_eq!(r, 1);\n     let r = match (0,7) {\n         (0, AHA) => 0,\n         (x, y)   => 1 + x + y,\n     };\n-    assert!(r == 0);\n+    assert_eq!(r, 0);\n }\n \n fn h() {\n     let r = match (0,0) {\n         (0, self::m::aha) => 0,\n         (x, y)      => 1 + x + y,\n     };\n-    assert!(r == 1);\n+    assert_eq!(r, 1);\n     let r = match (0,7) {\n         (0, self::m::aha) => 0,\n         (x, y)      => 1 + x + y,\n     };\n-    assert!(r == 0);\n+    assert_eq!(r, 0);\n }\n \n pub fn main () {"}, {"sha": "e7615711b4cfdb66c06b2fd472846326856caf5c", "filename": "src/test/run-pass/method-self-arg-aux1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -27,5 +27,5 @@ fn main() {\n \n     x.foo(&x);\n \n-    assert!(method_self_arg1::get_count() == 2*3*3*3*5*5*5*7*7*7);\n+    assert_eq!(method_self_arg1::get_count(), 2*3*3*3*5*5*5*7*7*7);\n }"}, {"sha": "0a1efc96fcfee5a4e7c58ed0b21a45a3d695b2ca", "filename": "src/test/run-pass/method-self-arg-aux2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -31,5 +31,5 @@ fn main() {\n \n     x.run_trait();\n \n-    assert!(method_self_arg2::get_count() == 2*2*3*3*5*5*7*7*11*11*13*13*17);\n+    assert_eq!(method_self_arg2::get_count(), 2*2*3*3*5*5*7*7*11*11*13*13*17);\n }"}, {"sha": "d93cf2b0983ee85730c68881730d0323d508f582", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -76,5 +76,5 @@ fn main() {\n \n     x.baz();\n \n-    unsafe { assert!(COUNT == 2*2*3*3*5*5*7*7*11*11*13*13*17); }\n+    unsafe { assert_eq!(COUNT, 2*2*3*3*5*5*7*7*11*11*13*13*17); }\n }"}, {"sha": "4361c9b05635c74affb1f005f2692ce98c68f9e4", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -55,5 +55,5 @@ fn main() {\n \n     x.foo(&x);\n \n-    unsafe { assert!(COUNT == 2*3*3*3*5*5*5*7*7*7); }\n+    unsafe { assert_eq!(COUNT, 2*3*3*3*5*5*5*7*7*7); }\n }"}, {"sha": "2babf19e164784ec6d5c9c62607ba694f3e969ed", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -17,5 +17,5 @@ struct X { x: isize, y: isize, z: isize }\n pub fn main() {\n     let x: Box<_> = box X{x: 1, y: 2, z: 3};\n     let y = x;\n-    assert!((y.y == 2));\n+    assert_eq!(y.y, 2);\n }"}, {"sha": "926e28ed155f55c77688c564ad8b1ff5245458b9", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,4 +14,4 @@\n \n struct X { x: isize, y: isize, z: isize }\n \n-pub fn main() { let x: Box<_> = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }\n+pub fn main() { let x: Box<_> = box X {x: 1, y: 2, z: 3}; let y = x; assert_eq!(y.y, 2); }"}, {"sha": "153da8e1339a6f56fd3edd1125c6be75a1e45ee7", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -25,5 +25,5 @@ fn test(foo: Box<Triple>) -> Box<Triple> {\n pub fn main() {\n     let x = box Triple{a: 1, b: 2, c: 3};\n     let y = test(x);\n-    assert!((y.c == 3));\n+    assert_eq!(y.c, 3);\n }"}, {"sha": "bed339e158637e9ae658c9c482a72c141c66e115", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,7 +12,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-fn test(foo: Box<Vec<isize>> ) { assert!(((*foo)[0] == 10)); }\n+fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }\n \n pub fn main() {\n     let x = box vec!(10);"}, {"sha": "a6a26ab357876c85ac4e7da281fed148b5c8a33f", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,7 +12,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-fn test(foo: Box<Vec<isize>>) { assert!(((*foo)[0] == 10)); }\n+fn test(foo: Box<Vec<isize>>) { assert_eq!((*foo)[0], 10); }\n \n pub fn main() {\n     let x = box vec!(10);"}, {"sha": "1883c66987e00517b6a0a15ab65083d5f2033d32", "filename": "src/test/run-pass/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n \n-fn test(foo: isize) { assert!((foo == 10)); }\n+fn test(foo: isize) { assert_eq!(foo, 10); }\n \n pub fn main() { let x = 10; test(x); }"}, {"sha": "3b060bb18868b3f30d9247bbf77ca310e83788e0", "filename": "src/test/run-pass/multi-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmulti-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmulti-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-let.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,5 +12,5 @@\n pub fn main() {\n     let x = 10;\n     let y = x;\n-    assert!((y == 10));\n+    assert_eq!(y, 10);\n }"}, {"sha": "010f656d53141521cbead35054a0d0abd5b3b1ca", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,7 +18,7 @@ fn f(mut y: Box<isize>) {\n }\n \n fn g() {\n-    let frob = |mut q: Box<isize>| { *q = 2; assert!(*q == 2); };\n+    let frob = |mut q: Box<isize>| { *q = 2; assert_eq!(*q, 2); };\n     let w = box 37;\n     frob(w);\n "}, {"sha": "8b5b290aa6fb4cd83acdf12ffea8ac6dde89a943", "filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -18,7 +18,7 @@ fn test1() {\n fn test2() {\n     let mut ints = [0; 32];\n     for i in &mut ints { *i += 22; }\n-    for i in &ints { assert!(*i == 22); }\n+    for i in &ints { assert_eq!(*i, 22); }\n }\n \n pub fn main() {"}, {"sha": "cfd3bb49f34d45f9750e5888e704fedc8e619569", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -40,7 +40,7 @@ impl<T> E<T> {\n \n macro_rules! check_option {\n     ($e:expr, $T:ty) => {{\n-        check_option!($e, $T, |ptr| assert!(*ptr == $e));\n+        check_option!($e, $T, |ptr| assert_eq!(*ptr, $e));\n     }};\n     ($e:expr, $T:ty, |$v:ident| $chk:expr) => {{\n         assert!(option::Option::None::<$T>.is_none());\n@@ -53,7 +53,7 @@ macro_rules! check_option {\n \n macro_rules! check_fancy {\n     ($e:expr, $T:ty) => {{\n-        check_fancy!($e, $T, |ptr| assert!(*ptr == $e));\n+        check_fancy!($e, $T, |ptr| assert_eq!(*ptr, $e));\n     }};\n     ($e:expr, $T:ty, |$v:ident| $chk:expr) => {{\n         assert!(E::Nothing::<$T>((), ((), ()), [23; 0]).is_none());\n@@ -81,6 +81,6 @@ pub fn main() {\n     check_type!(vec!(20, 22), Vec<isize> );\n     let mint: usize = unsafe { mem::transmute(main) };\n     check_type!(main, fn(), |pthing| {\n-        assert!(mint == unsafe { mem::transmute(*pthing) })\n+        assert_eq!(mint, unsafe { mem::transmute(*pthing) })\n     });\n }"}, {"sha": "86ca8f3325a82143a3ed38ed67aae0df9120e5d1", "filename": "src/test/run-pass/operator-associativity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foperator-associativity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foperator-associativity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-associativity.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,4 +13,4 @@\n \n // Testcase for issue #130, operator associativity.\n \n-pub fn main() { assert!((3 * 5 / 2 == 7)); }\n+pub fn main() { assert_eq!(3 * 5 / 2, 7); }"}, {"sha": "38ed90a45471b3758d2bf4d726157118e3691e0b", "filename": "src/test/run-pass/overloaded-autoderef-vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -43,5 +43,5 @@ impl Foo {\n pub fn main() {\n     let x: DerefWithHelper<Option<Foo>, Foo> =\n         DerefWithHelper { helper: Some(Foo {x: 5}), value: Foo { x: 2 } };\n-    assert!(x.foo() == 5);\n+    assert_eq!(x.foo(), 5);\n }"}, {"sha": "97da5fc8c09e9cf22da24252aa1dcae1a6cc7f76", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -37,8 +37,8 @@ pub fn main() {\n     let mut_s = Rc::new(RefCell::new(String::from(\"foo\")));\n     mut_s.borrow_mut().push_str(\"bar\");\n     // HACK assert_eq! would panic here because it stores the LHS and RHS in two locals.\n-    assert!(&**mut_s.borrow() == \"foobar\");\n-    assert!(&**mut_s.borrow_mut() == \"foobar\");\n+    assert_eq!(&**mut_s.borrow(), \"foobar\");\n+    assert_eq!(&**mut_s.borrow_mut(), \"foobar\");\n \n     let p = Rc::new(RefCell::new(Point {x: 1, y: 2}));\n     p.borrow_mut().x = 3;"}, {"sha": "8541c1c0a898684e75d81875c97310c77ebdfa73", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -37,8 +37,8 @@ pub fn main() {\n     let mut_s = Rc::new(RefCell::new(String::from(\"foo\")));\n     (*(*mut_s).borrow_mut()).push_str(\"bar\");\n     // assert_eq! would panic here because it stores the LHS and RHS in two locals.\n-    assert!((*(*mut_s).borrow()) == \"foobar\");\n-    assert!((*(*mut_s).borrow_mut()) == \"foobar\");\n+    assert_eq!((*(*mut_s).borrow()), \"foobar\");\n+    assert_eq!((*(*mut_s).borrow_mut()), \"foobar\");\n \n     let p = Rc::new(RefCell::new(Point {x: 1, y: 2}));\n     (*(*p).borrow_mut()).x = 3;"}, {"sha": "e0f61fd84974ae1ecf207b8792346d34be77b14d", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -52,9 +52,9 @@ pub fn main() {\n     list.push(foo.clone(), 22);\n     list.push(bar.clone(), 44);\n \n-    assert!(list[&foo] == 22);\n-    assert!(list[&bar] == 44);\n+    assert_eq!(list[&foo], 22);\n+    assert_eq!(list[&bar], 44);\n \n-    assert!(list[&foo] == 22);\n-    assert!(list[&bar] == 44);\n+    assert_eq!(list[&foo], 22);\n+    assert_eq!(list[&bar], 44);\n }"}, {"sha": "b962a5c79338214ad24ba17de2ed1353a757a400", "filename": "src/test/run-pass/packed-struct-generic-layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n         let s = S { a: 0xff_ff_ff_ffu32, b: 1, c: 0xaa_aa_aa_aa as i32 };\n         let transd : [u8; 9] = mem::transmute(s);\n         // Don't worry about endianness, the numbers are palindromic.\n-        assert!(transd ==\n+        assert_eq!(transd,\n                    [0xff, 0xff, 0xff, 0xff,\n                     1,\n                     0xaa, 0xaa, 0xaa, 0xaa]);\n@@ -32,7 +32,7 @@ pub fn main() {\n         let s = S { a: 1u8, b: 2u8, c: 0b10000001_10000001 as i16};\n         let transd : [u8; 4] = mem::transmute(s);\n         // Again, no endianness problems.\n-        assert!(transd ==\n+        assert_eq!(transd,\n                    [1, 2, 0b10000001, 0b10000001]);\n     }\n }"}, {"sha": "92308c9fc3e4e0eddebe36707b3cf215c32144fc", "filename": "src/test/run-pass/packed-struct-layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -27,11 +27,11 @@ pub fn main() {\n     unsafe {\n         let s4 = S4 { a: 1, b: [2,3,4] };\n         let transd : [u8; 4] = mem::transmute(s4);\n-        assert!(transd == [1, 2, 3, 4]);\n+        assert_eq!(transd, [1, 2, 3, 4]);\n \n         let s5 = S5 { a: 1, b: 0xff_00_00_ff };\n         let transd : [u8; 5] = mem::transmute(s5);\n         // Don't worry about endianness, the u32 is palindromic.\n-        assert!(transd == [1, 0xff, 0, 0, 0xff]);\n+        assert_eq!(transd, [1, 0xff, 0, 0, 0xff]);\n     }\n }"}, {"sha": "411c1807a16b71491410c7c4bfedf810985dcd2f", "filename": "src/test/run-pass/packed-tuple-struct-layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -21,11 +21,11 @@ pub fn main() {\n     unsafe {\n         let s4 = S4(1, [2,3,4]);\n         let transd : [u8; 4] = mem::transmute(s4);\n-        assert!(transd == [1, 2, 3, 4]);\n+        assert_eq!(transd, [1, 2, 3, 4]);\n \n         let s5 = S5(1, 0xff_00_00_ff);\n         let transd : [u8; 5] = mem::transmute(s5);\n         // Don't worry about endianness, the u32 is palindromic.\n-        assert!(transd == [1, 0xff, 0, 0, 0xff]);\n+        assert_eq!(transd, [1, 0xff, 0, 0, 0xff]);\n     }\n }"}, {"sha": "24261772add0353a3ecb25055132e5abe03b9142", "filename": "src/test/run-pass/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -23,23 +23,23 @@ pub fn main() {\n         assert!(i >= 0 && i < 10);\n         count += i;\n     }\n-    assert!(count == 45);\n+    assert_eq!(count, 45);\n \n     let mut count = 0;\n     let mut range = 0_usize..10;\n     for i in range {\n         assert!(i >= 0 && i < 10);\n         count += i;\n     }\n-    assert!(count == 45);\n+    assert_eq!(count, 45);\n \n     let mut count = 0;\n     let mut rf = 3_usize..;\n     for i in rf.take(10) {\n         assert!(i >= 3 && i < 13);\n         count += i;\n     }\n-    assert!(count == 75);\n+    assert_eq!(count, 75);\n \n     let _ = 0_usize..4+4-3;\n     let _ = 0..foo();"}, {"sha": "eb404751ee6f99bc7ff579742c2e03a075fab59e", "filename": "src/test/run-pass/ranges-precedence.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Franges-precedence.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -22,30 +22,30 @@ impl Foo {\n \n fn main() {\n     let x = 1+3..4+5;\n-    assert!(x == (4..9));\n+    assert_eq!(x, (4..9));\n \n     let x = 1..4+5;\n-    assert!(x == (1..9));\n+    assert_eq!(x, (1..9));\n \n     let x = 1+3..4;\n-    assert!(x == (4..4));\n+    assert_eq!(x, (4..4));\n \n     let a = Foo { foo: 3 };\n     let x = a.foo..a.bar();\n-    assert!(x == (3..5));\n+    assert_eq!(x, (3..5));\n \n     let x = 1+3..;\n-    assert!(x == (4..));\n+    assert_eq!(x, (4..));\n     let x = ..1+3;\n-    assert!(x == (..4));\n+    assert_eq!(x, (..4));\n \n     let a = &[0, 1, 2, 3, 4, 5, 6];\n     let x = &a[1+1..2+2];\n-    assert!(x == &a[2..4]);\n+    assert_eq!(x, &a[2..4]);\n     let x = &a[..1+2];\n-    assert!(x == &a[..3]);\n+    assert_eq!(x, &a[..3]);\n     let x = &a[1+2..];\n-    assert!(x == &a[3..]);\n+    assert_eq!(x, &a[3..]);\n \n     for _i in 2+4..10-3 {}\n \n@@ -54,8 +54,8 @@ fn main() {\n     for _ in 1.. { break; }\n \n     let x = [1]..[2];\n-    assert!(x == (([1])..([2])));\n+    assert_eq!(x, (([1])..([2])));\n \n     let y = ..;\n-    assert!(y == (..));\n+    assert_eq!(y, (..));\n }"}, {"sha": "56b15c243618f4d5b621659698d17efd33b60a67", "filename": "src/test/run-pass/readalias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Freadalias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Freadalias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freadalias.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,6 +14,6 @@\n \n struct Point {x: isize, y: isize, z: isize}\n \n-fn f(p: Point) { assert!((p.z == 12)); }\n+fn f(p: Point) { assert_eq!(p.z, 12); }\n \n pub fn main() { let x: Point = Point {x: 10, y: 11, z: 12}; f(x); }"}, {"sha": "df034df73624d55cdfeafbae1f6ea5b2fe09d3be", "filename": "src/test/run-pass/regions-lifetime-static-items-enclosing-scopes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fregions-lifetime-static-items-enclosing-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fregions-lifetime-static-items-enclosing-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-static-items-enclosing-scopes.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,8 +14,8 @@\n \n use std::cmp::PartialEq;\n \n-fn f<T:PartialEq>(o: &mut Option<T>) {\n-    assert!(*o == None);\n+fn f<T:PartialEq+std::fmt::Debug>(o: &mut Option<T>) {\n+    assert_eq!(*o, None);\n }\n \n pub fn main() {"}, {"sha": "fc85aa8b51025a84446615531edf05a8e72b2f97", "filename": "src/test/run-pass/repeat-expr-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Frepeat-expr-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Frepeat-expr-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeat-expr-in-static.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,5 +13,5 @@ static FOO: [isize; 4] = [32; 4];\n static BAR: [isize; 4] = [32, 32, 32, 32];\n \n pub fn main() {\n-    assert!(FOO == BAR);\n+    assert_eq!(FOO, BAR);\n }"}, {"sha": "6159b24165e44db866e84c78cbc9fc49212b9071", "filename": "src/test/run-pass/resolve-issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -11,4 +11,4 @@\n \n const foo: isize = 4 >> 1;\n enum bs { thing = foo }\n-pub fn main() { assert!((bs::thing as isize == foo)); }\n+pub fn main() { assert_eq!(bs::thing as isize, foo); }"}, {"sha": "c92a9ca8480ca7c5fc979d813997196f5e2a4044", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -32,7 +32,7 @@ fn shrinky_pointer(i: &Cell<isize>) -> shrinky_pointer {\n \n pub fn main() {\n     let my_total = &Cell::new(10);\n-    { let pt = shrinky_pointer(my_total); assert!((pt.look_at() == 10)); }\n+    { let pt = shrinky_pointer(my_total); assert_eq!(pt.look_at(), 10); }\n     println!(\"my_total = {}\", my_total.get());\n     assert_eq!(my_total.get(), 9);\n }"}, {"sha": "a523340784c70bec746e5225627a29046394d84f", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -20,9 +20,9 @@ use std::rc::Rc;\n pub fn main() {\n    let mut x: Box<_> = box 3;\n    x = x;\n-   assert!(*x == 3);\n+   assert_eq!(*x, 3);\n \n    let mut x = Rc::new(3);\n    x = x;\n-   assert!(*x == 3);\n+   assert_eq!(*x, 3);\n }"}, {"sha": "5ef6e08f857c1609fff2a60c11941dadc6b3de43", "filename": "src/test/run-pass/self-shadowing-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,7 +19,7 @@ mod a {\n \n mod c {\n     use a::b::a;\n-    pub fn bar() { assert!((a::foo() == 1)); }\n+    pub fn bar() { assert_eq!(a::foo(), 1); }\n }\n \n pub fn main() { c::bar(); }"}, {"sha": "b764fc6f1ec967143c1f00731debf9ba96ef8e73", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -27,4 +27,4 @@ fn foo(c: Vec<isize> ) {\n \n enum t<T> { none, some(T), }\n \n-pub fn main() { let x = 10; let x = x + 20; assert!((x == 30)); foo(Vec::new()); }\n+pub fn main() { let x = 10; let x = x + 20; assert_eq!(x, 30); foo(Vec::new()); }"}, {"sha": "3a99fd9af932e9409d67463d7a6d9181e9f2a5c2", "filename": "src/test/run-pass/slice-2.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,57 +14,57 @@\n fn main() {\n     let x: &[isize] = &[1, 2, 3, 4, 5];\n     let cmp: &[isize] = &[1, 2, 3, 4, 5];\n-    assert!(&x[..] == cmp);\n+    assert_eq!(&x[..], cmp);\n     let cmp: &[isize] = &[3, 4, 5];\n-    assert!(&x[2..] == cmp);\n+    assert_eq!(&x[2..], cmp);\n     let cmp: &[isize] = &[1, 2, 3];\n-    assert!(&x[..3] == cmp);\n+    assert_eq!(&x[..3], cmp);\n     let cmp: &[isize] = &[2, 3, 4];\n-    assert!(&x[1..4] == cmp);\n+    assert_eq!(&x[1..4], cmp);\n \n     let x: Vec<isize> = vec![1, 2, 3, 4, 5];\n     let cmp: &[isize] = &[1, 2, 3, 4, 5];\n-    assert!(&x[..] == cmp);\n+    assert_eq!(&x[..], cmp);\n     let cmp: &[isize] = &[3, 4, 5];\n-    assert!(&x[2..] == cmp);\n+    assert_eq!(&x[2..], cmp);\n     let cmp: &[isize] = &[1, 2, 3];\n-    assert!(&x[..3] == cmp);\n+    assert_eq!(&x[..3], cmp);\n     let cmp: &[isize] = &[2, 3, 4];\n-    assert!(&x[1..4] == cmp);\n+    assert_eq!(&x[1..4], cmp);\n \n     let x: &mut [isize] = &mut [1, 2, 3, 4, 5];\n     {\n         let cmp: &mut [isize] = &mut [1, 2, 3, 4, 5];\n-        assert!(&mut x[..] == cmp);\n+        assert_eq!(&mut x[..], cmp);\n     }\n     {\n         let cmp: &mut [isize] = &mut [3, 4, 5];\n-        assert!(&mut x[2..] == cmp);\n+        assert_eq!(&mut x[2..], cmp);\n     }\n     {\n         let cmp: &mut [isize] = &mut [1, 2, 3];\n-        assert!(&mut x[..3] == cmp);\n+        assert_eq!(&mut x[..3], cmp);\n     }\n     {\n         let cmp: &mut [isize] = &mut [2, 3, 4];\n-        assert!(&mut x[1..4] == cmp);\n+        assert_eq!(&mut x[1..4], cmp);\n     }\n \n     let mut x: Vec<isize> = vec![1, 2, 3, 4, 5];\n     {\n         let cmp: &mut [isize] = &mut [1, 2, 3, 4, 5];\n-        assert!(&mut x[..] == cmp);\n+        assert_eq!(&mut x[..], cmp);\n     }\n     {\n         let cmp: &mut [isize] = &mut [3, 4, 5];\n-        assert!(&mut x[2..] == cmp);\n+        assert_eq!(&mut x[2..], cmp);\n     }\n     {\n         let cmp: &mut [isize] = &mut [1, 2, 3];\n-        assert!(&mut x[..3] == cmp);\n+        assert_eq!(&mut x[..3], cmp);\n     }\n     {\n         let cmp: &mut [isize] = &mut [2, 3, 4];\n-        assert!(&mut x[1..4] == cmp);\n+        assert_eq!(&mut x[1..4], cmp);\n     }\n }"}, {"sha": "ed949fe082877ae50c9d388d5ccff252227c85f0", "filename": "src/test/run-pass/slice-panic-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -28,5 +28,5 @@ fn foo() {\n \n fn main() {\n     let _ = thread::spawn(move|| foo()).join();\n-    unsafe { assert!(DTOR_COUNT == 2); }\n+    unsafe { assert_eq!(DTOR_COUNT, 2); }\n }"}, {"sha": "4103c9495e102ca063b894a5713ec531968c0ed8", "filename": "src/test/run-pass/slice-panic-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -32,5 +32,5 @@ fn foo() {\n \n fn main() {\n     let _ = thread::spawn(move|| foo()).join();\n-    unsafe { assert!(DTOR_COUNT == 2); }\n+    unsafe { assert_eq!(DTOR_COUNT, 2); }\n }"}, {"sha": "8e1d96d366973d3f894effaddb1107625e8d837b", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -86,6 +86,6 @@ fn main() {\n     &mut x[..Foo];\n     &mut x[Foo..Foo];\n     unsafe {\n-        assert!(COUNT == 8);\n+        assert_eq!(COUNT, 8);\n     }\n }"}, {"sha": "00be41a27d2c2727fa9e0c3880d3ebb2e5cc5740", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,4 +14,4 @@ pub fn main() {\n     thread::spawn(move|| child(10)).join().ok().unwrap();\n }\n \n-fn child(i: isize) { println!(\"{}\", i); assert!((i == 10)); }\n+fn child(i: isize) { println!(\"{}\", i); assert_eq!(i, 10); }"}, {"sha": "4dcb82c4b43b5c400557d6c387dd11e202419097", "filename": "src/test/run-pass/static-mut-foreign.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -30,16 +30,16 @@ fn static_bound_set(a: &'static mut libc::c_int) {\n }\n \n unsafe fn run() {\n-    assert!(rust_dbg_static_mut == 3);\n+    assert_eq!(rust_dbg_static_mut, 3);\n     rust_dbg_static_mut = 4;\n-    assert!(rust_dbg_static_mut == 4);\n+    assert_eq!(rust_dbg_static_mut, 4);\n     rust_dbg_static_mut_check_four();\n     rust_dbg_static_mut += 1;\n-    assert!(rust_dbg_static_mut == 5);\n+    assert_eq!(rust_dbg_static_mut, 5);\n     rust_dbg_static_mut *= 3;\n-    assert!(rust_dbg_static_mut == 15);\n+    assert_eq!(rust_dbg_static_mut, 15);\n     rust_dbg_static_mut = -3;\n-    assert!(rust_dbg_static_mut == -3);\n+    assert_eq!(rust_dbg_static_mut, -3);\n     static_bound(&rust_dbg_static_mut);\n     static_bound_set(&mut rust_dbg_static_mut);\n }"}, {"sha": "5911b6cfa8504e4f22fd6b87517f6b84c92a14dd", "filename": "src/test/run-pass/static-mut-xc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fstatic-mut-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fstatic-mut-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-xc.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -24,15 +24,15 @@ fn static_bound_set(a: &'static mut isize) {\n }\n \n unsafe fn run() {\n-    assert!(static_mut_xc::a == 3);\n+    assert_eq!(static_mut_xc::a, 3);\n     static_mut_xc::a = 4;\n-    assert!(static_mut_xc::a == 4);\n+    assert_eq!(static_mut_xc::a, 4);\n     static_mut_xc::a += 1;\n-    assert!(static_mut_xc::a == 5);\n+    assert_eq!(static_mut_xc::a, 5);\n     static_mut_xc::a *= 3;\n-    assert!(static_mut_xc::a == 15);\n+    assert_eq!(static_mut_xc::a, 15);\n     static_mut_xc::a = -3;\n-    assert!(static_mut_xc::a == -3);\n+    assert_eq!(static_mut_xc::a, -3);\n     static_bound(&static_mut_xc::a);\n     static_bound_set(&mut static_mut_xc::a);\n }"}, {"sha": "acd9e0675aed92ab2fbcc9837b3f4a2c3de87e27", "filename": "src/test/run-pass/string-escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fstring-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fstring-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-escapes.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,5 +12,5 @@\n fn main() {\n     let x = \"\\\\\\\\\\\n     \";\n-    assert!(x == r\"\\\\\"); // extraneous whitespace stripped\n+    assert_eq!(x, r\"\\\\\"); // extraneous whitespace stripped\n }"}, {"sha": "12e72aac38d4a6926997bb1cc2805aaef96486b7", "filename": "src/test/run-pass/swap-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fswap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fswap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-1.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,5 +14,6 @@ use std::mem::swap;\n pub fn main() {\n     let mut x = 3; let mut y = 7;\n     swap(&mut x, &mut y);\n-    assert!((x == 7)); assert!((y == 3));\n+    assert_eq!(x, 7);\n+    assert_eq!(y, 3);\n }"}, {"sha": "d752015a4dcdc515acc03fa47d8dbea5ff090297", "filename": "src/test/run-pass/syntax-extension-source-utils-files/includeme.fragment", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -2,6 +2,6 @@\n \n {\n     assert!(file!().ends_with(\"includeme.fragment\"));\n-    assert!(line!() == 5u32);\n+    assert_eq!(line!(), 5u32);\n     format!(\"victory robot {}\", line!())\n }"}, {"sha": "2f52e424936ea321874bb63c838cd8d1eaa2e6dc", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -25,7 +25,7 @@ macro_rules! indirect_line { () => ( line!() ) }\n \n pub fn main() {\n     assert_eq!(line!(), 27);\n-    assert!((column!() == 4));\n+    assert_eq!(column!(), 4);\n     assert_eq!(indirect_line!(), 29);\n     assert!((file!().ends_with(\"syntax-extension-source-utils.rs\")));\n     assert_eq!(stringify!((2*3) + 5).to_string(), \"( 2 * 3 ) + 5\".to_string());"}, {"sha": "9a2b3b1ff00178dd9c8663be09aae19b55b8c47c", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -41,10 +41,10 @@ pub fn main() {\n }\n \n fn test_color(color: color, val: isize, name: String) {\n-    //assert!(unsafe::transmute(color) == val);\n+    //assert_eq!(unsafe::transmute(color), val);\n     assert_eq!(color as isize, val);\n-    assert!(get_color_alt(color) == name);\n-    assert!(get_color_if(color) == name);\n+    assert_eq!(get_color_alt(color), name);\n+    assert_eq!(get_color_if(color), name);\n }\n \n fn get_color_alt(color: color) -> String {"}, {"sha": "ced240502ed8b9fff17d2ab0d6f7a8d3a8d59f19", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -20,10 +20,10 @@ fn start(tx: &Sender<Sender<String>>) {\n     let mut a;\n     let mut b;\n     a = rx.recv().unwrap();\n-    assert!(a == \"A\".to_string());\n+    assert_eq!(a, \"A\".to_string());\n     println!(\"{}\", a);\n     b = rx.recv().unwrap();\n-    assert!(b == \"B\".to_string());\n+    assert_eq!(b, \"B\".to_string());\n     println!(\"{}\", b);\n }\n "}, {"sha": "e940f6c2126f32f301cecc95317848ecd004fbe7", "filename": "src/test/run-pass/trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-impl.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -42,7 +42,7 @@ fn main() {\n     T::foo(x);\n     T::bar();\n \n-    unsafe { assert!(COUNT == 12); }\n+    unsafe { assert_eq!(COUNT, 12); }\n \n     // Cross-crait case\n     let x: &Bar = &Foo;"}, {"sha": "3d82ee67925043e03376c4dae4c1043a63150ac8", "filename": "src/test/run-pass/trait-inheritance-subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -32,5 +32,5 @@ fn mi(v: isize) -> MyInt { MyInt { val: v } }\n pub fn main() {\n     let (x, y) = (mi(3), mi(5));\n     let z = f(x, y);\n-    assert!(z.val == 8)\n+    assert_eq!(z.val, 8)\n }"}, {"sha": "8fa628def79691c5f12386837f61b8538b112fd3", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -29,16 +29,16 @@ impl<T:to_str> to_str for Vec<T> {\n }\n \n pub fn main() {\n-    assert!(1.to_string_() == \"1\".to_string());\n-    assert!((vec!(2, 3, 4)).to_string_() == \"[2, 3, 4]\".to_string());\n+    assert_eq!(1.to_string_(), \"1\".to_string());\n+    assert_eq!((vec!(2, 3, 4)).to_string_(), \"[2, 3, 4]\".to_string());\n \n     fn indirect<T:to_str>(x: T) -> String {\n         format!(\"{}!\", x.to_string_())\n     }\n-    assert!(indirect(vec!(10, 20)) == \"[10, 20]!\".to_string());\n+    assert_eq!(indirect(vec!(10, 20)), \"[10, 20]!\".to_string());\n \n     fn indirect2<T:to_str>(x: T) -> String {\n         indirect(x)\n     }\n-    assert!(indirect2(vec!(1)) == \"[1]!\".to_string());\n+    assert_eq!(indirect2(vec!(1)), \"[1]!\".to_string());\n }"}, {"sha": "7172e9b85e3c8e0269616b3679997edf4a1353e7", "filename": "src/test/run-pass/type-namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftype-namespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftype-namespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-namespace.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,4 +13,4 @@ struct A { a: isize }\n \n fn a(a: A) -> isize { return a.a; }\n \n-pub fn main() { let x: A = A {a: 1}; assert!((a(x) == 1)); }\n+pub fn main() { let x: A = A {a: 1}; assert_eq!(a(x), 1); }"}, {"sha": "86159ce340b4d6fe2396e294c3ded8e08a6b9a8a", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n     assert_eq!(size_of::<u>(), 3 as usize);\n     // Alignment causes padding before the char and the u32.\n \n-    assert!(size_of::<v>() ==\n+    assert_eq!(size_of::<v>(),\n                 16 as usize);\n     assert_eq!(size_of::<isize>(), size_of::<usize>());\n     assert_eq!(size_of::<w>(), size_of::<isize>());"}, {"sha": "a47883463e8a098b55390e4b07ac25c3ee5d14fe", "filename": "src/test/run-pass/typestate-multi-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftypestate-multi-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Ftypestate-multi-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypestate-multi-decl.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -12,5 +12,5 @@\n pub fn main() {\n     let (x, y) = (10, 20);\n     let z = x + y;\n-    assert!((z == 30));\n+    assert_eq!(z, 30);\n }"}, {"sha": "74c5f6949082578439f56713c26835b3c886dae9", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -38,6 +38,6 @@ fn call_box(f: &mut FnMut(i32) -> i32, x: i32) -> i32 {\n fn main() {\n     let x = call_it(S, 1);\n     let y = call_box(&mut S, 1);\n-    assert!(x == 4);\n-    assert!(y == 4);\n+    assert_eq!(x, 4);\n+    assert_eq!(y, 4);\n }"}, {"sha": "1bd44ecb7217a3782178eeeec673933158ff005f", "filename": "src/test/run-pass/unique-cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-cmp.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,7 +14,7 @@\n \n pub fn main() {\n     let i: Box<_> = box 100;\n-    assert!(i == box 100);\n+    assert_eq!(i, box 100);\n     assert!(i < box 101);\n     assert!(i <= box 100);\n     assert!(i > box 99);"}, {"sha": "026bc0435d91c339ab3ec3e3c13bed43a32a618a", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -14,5 +14,5 @@\n \n pub fn main() {\n     let vect : Vec<Box<_>> = vec!(box 100);\n-    assert!(vect[0] == box 100);\n+    assert_eq!(vect[0], box 100);\n }"}, {"sha": "f45b3285da76221f40829f13c0530313189bb7b7", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -13,11 +13,12 @@\n #![feature(box_syntax)]\n \n use std::cmp::PartialEq;\n+use std::fmt::Debug;\n \n fn sendable() {\n \n-    fn f<T:Send + PartialEq>(i: T, j: T) {\n-        assert!(i == j);\n+    fn f<T:Send + PartialEq + Debug>(i: T, j: T) {\n+        assert_eq!(i, j);\n     }\n \n     fn g<T:Send + PartialEq>(i: T, j: T) {\n@@ -34,8 +35,8 @@ fn sendable() {\n \n fn copyable() {\n \n-    fn f<T:PartialEq>(i: T, j: T) {\n-        assert!(i == j);\n+    fn f<T:PartialEq + Debug>(i: T, j: T) {\n+        assert_eq!(i, j);\n     }\n \n     fn g<T:PartialEq>(i: T, j: T) {\n@@ -52,8 +53,8 @@ fn copyable() {\n \n fn noncopyable() {\n \n-    fn f<T:PartialEq>(i: T, j: T) {\n-        assert!(i == j);\n+    fn f<T:PartialEq + Debug>(i: T, j: T) {\n+        assert_eq!(i, j);\n     }\n \n     fn g<T:PartialEq>(i: T, j: T) {"}, {"sha": "07eec85672aaed8acabc21716cb256b083975d10", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -70,8 +70,8 @@ pub fn main() {\n \n         let data: Box<Foo_<i32>> = box Foo_{f: [1, 2, 3] };\n         let x: &Foo<i32> = mem::transmute(slice::from_raw_parts(&*data, 3));\n-        assert!(x.f.len() == 3);\n-        assert!(x.f[0] == 1);\n+        assert_eq!(x.f.len(), 3);\n+        assert_eq!(x.f[0], 1);\n \n         struct Baz_ {\n             f1: usize,\n@@ -81,14 +81,14 @@ pub fn main() {\n         let data: Box<_> = box Baz_ {\n             f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n         let x: &Baz = mem::transmute(slice::from_raw_parts(&*data, 5));\n-        assert!(x.f1 == 42);\n+        assert_eq!(x.f1, 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n-        assert!(chs.len() == 5);\n-        assert!(chs[0] == 'a');\n-        assert!(chs[1] == 'b');\n-        assert!(chs[2] == 'c');\n-        assert!(chs[3] == 'd');\n-        assert!(chs[4] == 'e');\n+        assert_eq!(chs.len(), 5);\n+        assert_eq!(chs[0], 'a');\n+        assert_eq!(chs[1], 'b');\n+        assert_eq!(chs[2], 'c');\n+        assert_eq!(chs[3], 'd');\n+        assert_eq!(chs[4], 'e');\n \n         struct Qux_ {\n             f: St\n@@ -100,6 +100,6 @@ pub fn main() {\n         let data: Box<_> = box Qux_{ f: St { f: 234 } };\n         let x: &Qux = mem::transmute(raw::TraitObject { vtable: obj.vtable,\n                                                         data: mem::transmute(&*data) });\n-        assert!(x.f.foo() == 234);\n+        assert_eq!(x.f.foo(), 234);\n     }\n }"}, {"sha": "4d369ba4d872db10d68159c890bd72c48e6ed335", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -19,12 +19,12 @@ pub fn main() {\n     let s: String = chs.iter().cloned().collect();\n     let schs: Vec<char> = s.chars().collect();\n \n-    assert!(s.len() == 10);\n-    assert!(s.chars().count() == 4);\n-    assert!(schs.len() == 4);\n-    assert!(schs.iter().cloned().collect::<String>() == s);\n-    assert!(s.char_at(0) == 'e');\n-    assert!(s.char_at(1) == '\u00e9');\n+    assert_eq!(s.len(), 10);\n+    assert_eq!(s.chars().count(), 4);\n+    assert_eq!(schs.len(), 4);\n+    assert_eq!(schs.iter().cloned().collect::<String>(), s);\n+    assert_eq!(s.char_at(0), 'e');\n+    assert_eq!(s.char_at(1), '\u00e9');\n \n     assert!((str::from_utf8(s.as_bytes()).is_ok()));\n     // invalid prefix"}, {"sha": "aadbb922f676316c67afc3dca8064ae888e7319f", "filename": "src/test/run-pass/vec-dst.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-dst.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,21 +16,21 @@ pub fn main() {\n     // Tests for indexing into box/& [T; n]\n     let x: [isize; 3] = [1, 2, 3];\n     let mut x: Box<[isize; 3]> = box x;\n-    assert!(x[0] == 1);\n-    assert!(x[1] == 2);\n-    assert!(x[2] == 3);\n+    assert_eq!(x[0], 1);\n+    assert_eq!(x[1], 2);\n+    assert_eq!(x[2], 3);\n     x[1] = 45;\n-    assert!(x[0] == 1);\n-    assert!(x[1] == 45);\n-    assert!(x[2] == 3);\n+    assert_eq!(x[0], 1);\n+    assert_eq!(x[1], 45);\n+    assert_eq!(x[2], 3);\n \n     let mut x: [isize; 3] = [1, 2, 3];\n     let x: &mut [isize; 3] = &mut x;\n-    assert!(x[0] == 1);\n-    assert!(x[1] == 2);\n-    assert!(x[2] == 3);\n+    assert_eq!(x[0], 1);\n+    assert_eq!(x[1], 2);\n+    assert_eq!(x[2], 3);\n     x[1] = 45;\n-    assert!(x[0] == 1);\n-    assert!(x[1] == 45);\n-    assert!(x[2] == 3);\n+    assert_eq!(x[0], 1);\n+    assert_eq!(x[1], 45);\n+    assert_eq!(x[2], 3);\n }"}, {"sha": "9df777e7af0dc4e85f6d2dc82441f061d5f063e5", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     match x {\n         [2, _, _] => panic!(),\n         [1, a, b] => {\n-            assert!([a, b] == [2, 3]);\n+            assert_eq!([a, b], [2, 3]);\n         }\n         [_, _, _] => panic!(),\n     }"}, {"sha": "6cc7e3a072cf040d4dc60f574d17d66764295c96", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -24,10 +24,10 @@ pub fn main() {\n     ];\n     match x {\n         [ref first, tail..] => {\n-            assert!(first.string == \"foo\".to_string());\n+            assert_eq!(first.string, \"foo\".to_string());\n             assert_eq!(tail.len(), 2);\n-            assert!(tail[0].string == \"bar\".to_string());\n-            assert!(tail[1].string == \"baz\".to_string());\n+            assert_eq!(tail[0].string, \"bar\".to_string());\n+            assert_eq!(tail[1].string, \"baz\".to_string());\n \n             match tail {\n                 [Foo { .. }, _, Foo { .. }, _tail..] => {"}, {"sha": "ee19e76c14628ba3397e222b703b18e9173dc69b", "filename": "src/test/run-pass/where-for-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -55,6 +55,6 @@ fn main() {\n     foo1(&x);\n     foo2(&x);\n     unsafe {\n-        assert!(COUNT == 12);\n+        assert_eq!(COUNT, 12);\n     }\n }"}, {"sha": "fecbeed407c0359b749a333eff8b00af5354eeea", "filename": "src/test/run-pass/zero-size-type-destructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -28,5 +28,5 @@ pub fn foo() {\n \n pub fn main() {\n   foo();\n-  assert!((unsafe { destructions } == 0));\n+  assert_eq!(unsafe { destructions }, 0);\n }"}, {"sha": "af67f7e2c1fb7bd2a2d412f7581eb1ba0f864a4e", "filename": "src/test/rustdoc/hidden-line.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89bb24cb267dfa1bf9acee6a06b3221114ae7f5/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-line.rs?ref=e89bb24cb267dfa1bf9acee6a06b3221114ae7f5", "patch": "@@ -22,7 +22,7 @@\n ///\n /// fn test() {\n ///     let x = Bar(Foo);\n-///     assert!(x == x); // check that the derivings worked\n+///     assert_eq!(x, x); // check that the derivings worked\n /// }\n ///\n /// }"}]}