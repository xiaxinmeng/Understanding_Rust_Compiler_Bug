{"sha": "24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWExZjRmNzQ3ZTYxOGRkYjM0MWJkZTM1YmE3YmQwNWRiZjc2NmI=", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-09-27T02:23:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-27T02:23:29Z"}, "message": "Merge pull request #2 from rust-lang/feature/initial-types\n\nFeature/initial types", "tree": {"sha": "f1bbd565f1ae80f7346885a3a849c539851635d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1bbd565f1ae80f7346885a3a849c539851635d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfb/ehCRBK7hj4Ov3rIwAAdHIIAEMvTvVHAd1Kd5ohj382Q3T5\npC+Z+ioJZrzh7MwNU/k8WAu0BypaajpgSK7dkolmVYY0f2nE9Do/396/VGout+5j\nGklZwHHSWCoFlfyE1GmMdzfNiwMfUoGllfOnzWJhPK8uKz0k5hToUaEqeaMAcpPR\npfLrW47F7i7JRMICNHmGIH97ucaHK07BUpn+N4XwItB54Sq4PGHVZdjxV2c1jFri\nHNrJvCw+egauGvKZ93BKJMOsAV6VEPapmCP2RZFjmQho2EYx0tfN2adDNRgDoRwL\nHr9p78ckKDBYfFBA6M8UraF9qUVgFu70pyabPYt1b3DDB8JhIN/f2OtcB3b0rOQ=\n=rCHC\n-----END PGP SIGNATURE-----\n", "payload": "tree f1bbd565f1ae80f7346885a3a849c539851635d6\nparent 8ee9cbaf607f7077d7ccc6b7d288f75cf55cf9b8\nparent cfda50a82a7eb1c04c8ed18600c69e587af3556e\nauthor Lokathor <zefria@gmail.com> 1601173409 -0600\ncommitter GitHub <noreply@github.com> 1601173409 -0600\n\nMerge pull request #2 from rust-lang/feature/initial-types\n\nFeature/initial types"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "html_url": "https://github.com/rust-lang/rust/commit/24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee9cbaf607f7077d7ccc6b7d288f75cf55cf9b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee9cbaf607f7077d7ccc6b7d288f75cf55cf9b8", "html_url": "https://github.com/rust-lang/rust/commit/8ee9cbaf607f7077d7ccc6b7d288f75cf55cf9b8"}, {"sha": "cfda50a82a7eb1c04c8ed18600c69e587af3556e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfda50a82a7eb1c04c8ed18600c69e587af3556e", "html_url": "https://github.com/rust-lang/rust/commit/cfda50a82a7eb1c04c8ed18600c69e587af3556e"}], "stats": {"total": 963, "additions": 963, "deletions": 0}, "files": [{"sha": "96ef6c0b944e24fc22f51f18136cd62ffd5b0b8f", "filename": ".gitignore", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,2 @@\n+/target\n+Cargo.lock"}, {"sha": "f3538db7559062d680ceec43436c85ca1e26eab1", "filename": "Cargo.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,5 @@\n+[workspace]\n+\n+members = [\n+    \"crates/core_simd\",\n+]"}, {"sha": "d4aef6f059c5efdb14bb30a7066c776428ac9f11", "filename": "crates/core_simd/Cargo.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,5 @@\n+[package]\n+name = \"core_simd\"\n+version = \"0.1.0\"\n+authors = [\"Caleb Zulawski <caleb.zulawski@gmail.com>\"]\n+edition = \"2018\""}, {"sha": "c634e0546bc1b46011a69774f7fb630dbefd64d9", "filename": "crates/core_simd/src/fmt.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,105 @@\n+macro_rules! debug_wrapper {\n+    { $($trait:ident => $name:ident,)* } => {\n+        $(\n+            pub(crate) fn $name<T: core::fmt::$trait>(slice: &[T], f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                #[repr(transparent)]\n+                struct Wrapper<'a, T: core::fmt::$trait>(&'a T);\n+\n+                impl<T: core::fmt::$trait> core::fmt::Debug for Wrapper<'_, T> {\n+                    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                        self.0.fmt(f)\n+                    }\n+                }\n+\n+                f.debug_list()\n+                    .entries(slice.iter().map(|x| Wrapper(x)))\n+                    .finish()\n+            }\n+        )*\n+    }\n+}\n+\n+debug_wrapper! {\n+    Debug => format,\n+    Binary => format_binary,\n+    LowerExp => format_lower_exp,\n+    UpperExp => format_upper_exp,\n+    Octal => format_octal,\n+    LowerHex => format_lower_hex,\n+    UpperHex => format_upper_hex,\n+}\n+\n+macro_rules! impl_fmt_trait {\n+    { $($type:ty => $(($trait:ident, $format:ident)),*;)* } => {\n+        $( // repeat type\n+            $( // repeat trait\n+                impl core::fmt::$trait for $type {\n+                    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                        $format(self.as_ref(), f)\n+                    }\n+                }\n+            )*\n+        )*\n+    };\n+    { integers: $($type:ty,)* } => {\n+        impl_fmt_trait! {\n+            $($type =>\n+              (Debug, format),\n+              (Binary, format_binary),\n+              (LowerExp, format_lower_exp),\n+              (UpperExp, format_upper_exp),\n+              (Octal, format_octal),\n+              (LowerHex, format_lower_hex),\n+              (UpperHex, format_upper_hex);\n+            )*\n+        }\n+    };\n+    { floats: $($type:ty,)* } => {\n+        impl_fmt_trait! {\n+            $($type =>\n+              (Debug, format),\n+              (LowerExp, format_lower_exp),\n+              (UpperExp, format_upper_exp);\n+            )*\n+        }\n+    };\n+    { masks: $($type:ty,)* } => {\n+        impl_fmt_trait! {\n+            $($type =>\n+              (Debug, format);\n+            )*\n+        }\n+    }\n+}\n+\n+impl_fmt_trait! {\n+    integers:\n+        crate::u8x8,    crate::u8x16,    crate::u8x32,    crate::u8x64,\n+        crate::i8x8,    crate::i8x16,    crate::i8x32,    crate::i8x64,\n+        crate::u16x4,   crate::u16x8,   crate::u16x16,   crate::u16x32,\n+        crate::i16x4,   crate::i16x8,   crate::i16x16,   crate::i16x32,\n+        crate::u32x2,   crate::u32x4,   crate::u32x8,   crate::u32x16,\n+        crate::i32x2,   crate::i32x4,   crate::i32x8,   crate::i32x16,\n+        crate::u64x2,   crate::u64x4,   crate::u64x8,\n+        crate::i64x2,   crate::i64x4,   crate::i64x8,\n+        crate::u128x2,  crate::u128x4,\n+        crate::i128x2,  crate::i128x4,\n+        crate::usizex2, crate::usizex4, crate::usizex8,\n+        crate::isizex2, crate::isizex4, crate::isizex8,\n+}\n+\n+impl_fmt_trait! {\n+    floats:\n+        crate::f32x2, crate::f32x4, crate::f32x8, crate::f32x16,\n+        crate::f64x2, crate::f64x4, crate::f64x8,\n+}\n+\n+impl_fmt_trait! {\n+    masks:\n+        crate::mask8x8,    crate::mask8x16,    crate::mask8x32,    crate::mask8x64,\n+        crate::mask16x4,   crate::mask16x8,   crate::mask16x16,   crate::mask16x32,\n+        crate::mask32x2,   crate::mask32x4,   crate::mask32x8,   crate::mask32x16,\n+        crate::mask64x2,   crate::mask64x4,   crate::mask64x8,\n+        crate::mask128x2,  crate::mask128x4,\n+        crate::masksizex2, crate::masksizex4, crate::masksizex8,\n+}"}, {"sha": "d88f5b1eac45dce75f0555bdb1030c2f9bd502a9", "filename": "crates/core_simd/src/lib.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,56 @@\n+#![no_std]\n+#![feature(repr_simd)]\n+#![warn(missing_docs)]\n+//! Portable SIMD module.\n+\n+#[macro_use]\n+mod macros;\n+\n+mod fmt;\n+\n+mod masks;\n+pub use masks::*;\n+\n+mod vectors_u8;\n+pub use vectors_u8::*;\n+mod vectors_u16;\n+pub use vectors_u16::*;\n+mod vectors_u32;\n+pub use vectors_u32::*;\n+mod vectors_u64;\n+pub use vectors_u64::*;\n+mod vectors_u128;\n+pub use vectors_u128::*;\n+mod vectors_usize;\n+pub use vectors_usize::*;\n+\n+mod vectors_i8;\n+pub use vectors_i8::*;\n+mod vectors_i16;\n+pub use vectors_i16::*;\n+mod vectors_i32;\n+pub use vectors_i32::*;\n+mod vectors_i64;\n+pub use vectors_i64::*;\n+mod vectors_i128;\n+pub use vectors_i128::*;\n+mod vectors_isize;\n+pub use vectors_isize::*;\n+\n+mod vectors_f32;\n+pub use vectors_f32::*;\n+mod vectors_f64;\n+pub use vectors_f64::*;\n+\n+mod vectors_mask8;\n+pub use vectors_mask8::*;\n+mod vectors_mask16;\n+pub use vectors_mask16::*;\n+mod vectors_mask32;\n+pub use vectors_mask32::*;\n+mod vectors_mask64;\n+pub use vectors_mask64::*;\n+mod vectors_mask128;\n+pub use vectors_mask128::*;\n+mod vectors_masksize;\n+pub use vectors_masksize::*;"}, {"sha": "2f93db19035200a29d3a2cbc5a794ce40a81eb9c", "filename": "crates/core_simd/src/macros.rs", "status": "added", "additions": 320, "deletions": 0, "changes": 320, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,320 @@\n+/// Provides implementations of `From<$a> for $b` and `From<$b> for $a` that transmutes the value.\n+macro_rules! from_transmute {\n+    { unsafe $a:ty => $b:ty } => {\n+        from_transmute!{ @impl $a => $b }\n+        from_transmute!{ @impl $b => $a }\n+    };\n+    { @impl $from:ty => $to:ty } => {\n+        impl core::convert::From<$from> for $to {\n+            #[inline]\n+            fn from(value: $from) -> $to {\n+                unsafe { core::mem::transmute(value) }\n+            }\n+        }\n+    };\n+}\n+\n+/// Provides implementations of `From<$generic> for core::arch::{x86, x86_64}::$intel` and\n+/// vice-versa that transmutes the value.\n+macro_rules! from_transmute_x86 {\n+    { unsafe $generic:ty => $intel:ident } => {\n+        #[cfg(target_arch = \"x86\")]\n+        from_transmute! { unsafe $generic => core::arch::x86::$intel }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        from_transmute! { unsafe $generic => core::arch::x86_64::$intel }\n+    }\n+}\n+\n+/// Calls a the macro `$mac` with the provided `$args` followed by `$repeat` repeated the specified\n+/// number of times.\n+macro_rules! call_repeat {\n+    { 1 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)*\n+        }\n+    };\n+    { 2 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 4 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 8 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 16 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 32 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+    { 64 => $mac:path [$($repeat:tt)*] $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+            $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)* $($repeat)*\n+        }\n+    };\n+}\n+\n+/// Calls the macro `$mac` with the specified `$args` followed by the specified number of unique\n+/// identifiers.\n+macro_rules! call_counting_args {\n+    { 1 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            value\n+        }\n+    };\n+    { 2 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1\n+        }\n+    };\n+    { 4 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1 v2 v3\n+        }\n+    };\n+    { 8 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1 v2 v3 v4 v5 v6 v7\n+        }\n+    };\n+    { 16 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15\n+        }\n+    };\n+    { 32 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0  v1  v2  v3  v4  v5  v6  v7  v8  v9  v10 v11 v12 v13 v14 v15\n+            v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31\n+        }\n+    };\n+    { 64 => $mac:path => $($args:tt)* } => {\n+        $mac! {\n+            $($args)*\n+            v0  v1  v2  v3  v4  v5  v6  v7  v8  v9  v10 v11 v12 v13 v14 v15\n+            v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31\n+            v32 v33 v34 v35 v36 v37 v38 v39 v40 v41 v42 v43 v44 v45 v46 v47\n+            v48 v49 v50 v51 v52 v53 v54 v55 v56 v57 v58 v59 v60 v61 v62 v63\n+        }\n+    };\n+}\n+\n+/// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n+macro_rules! base_vector_traits {\n+    { $name:path => [$type:ty; $lanes:literal] } => {\n+        impl Copy for $name {}\n+\n+        impl Clone for $name {\n+            #[inline]\n+            fn clone(&self) -> Self {\n+                *self\n+            }\n+        }\n+\n+        impl Default for $name {\n+            #[inline]\n+            fn default() -> Self {\n+                Self::splat(<$type>::default())\n+            }\n+        }\n+\n+        impl PartialEq for $name {\n+            #[inline]\n+            fn eq(&self, other: &Self) -> bool {\n+                AsRef::<[$type]>::as_ref(self) == AsRef::<[$type]>::as_ref(other)\n+            }\n+        }\n+\n+        impl PartialOrd for $name {\n+            #[inline]\n+            fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+                AsRef::<[$type]>::as_ref(self).partial_cmp(AsRef::<[$type]>::as_ref(other))\n+            }\n+        }\n+\n+        // array references\n+        impl AsRef<[$type; $lanes]> for $name {\n+            #[inline]\n+            fn as_ref(&self) -> &[$type; $lanes] {\n+                unsafe { &*(self as *const _ as *const _) }\n+            }\n+        }\n+\n+        impl AsMut<[$type; $lanes]> for $name {\n+            #[inline]\n+            fn as_mut(&mut self) -> &mut [$type; $lanes] {\n+                unsafe { &mut *(self as *mut _ as *mut _) }\n+            }\n+        }\n+\n+        // slice references\n+        impl AsRef<[$type]> for $name {\n+            #[inline]\n+            fn as_ref(&self) -> &[$type] {\n+                AsRef::<[$type; $lanes]>::as_ref(self)\n+            }\n+        }\n+\n+        impl AsMut<[$type]> for $name {\n+            #[inline]\n+            fn as_mut(&mut self) -> &mut [$type] {\n+                AsMut::<[$type; $lanes]>::as_mut(self)\n+            }\n+        }\n+\n+        // vector/array conversion\n+        from_transmute! { unsafe $name => [$type; $lanes] }\n+\n+        // splat\n+        impl From<$type> for $name {\n+            #[inline]\n+            fn from(value: $type) -> Self {\n+                Self::splat(value)\n+            }\n+        }\n+    }\n+}\n+\n+/// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n+macro_rules! integer_vector_traits {\n+    { $name:path => [$type:ty; $lanes:literal] } => {\n+        impl Eq for $name {}\n+\n+        impl Ord for $name {\n+            #[inline]\n+            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n+                AsRef::<[$type]>::as_ref(self).cmp(AsRef::<[$type]>::as_ref(other))\n+            }\n+        }\n+\n+        impl core::hash::Hash for $name {\n+            #[inline]\n+            fn hash<H>(&self, state: &mut H)\n+            where\n+                H: core::hash::Hasher\n+            {\n+                AsRef::<[$type]>::as_ref(self).hash(state)\n+            }\n+        }\n+    }\n+}\n+\n+/// Defines a vector `$name` containing multiple `$lanes` of `$type`.\n+macro_rules! define_vector {\n+    { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n+        call_repeat! { $lanes => define_vector [$type] def $(#[$attr])* | $name | }\n+\n+        impl $name {\n+            call_repeat! { $lanes => define_vector [$type] splat $type | }\n+            call_counting_args! { $lanes => define_vector => new $type | }\n+        }\n+\n+        base_vector_traits! { $name => [$type; $lanes] }\n+    };\n+    { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        #[repr(simd)]\n+        pub struct $name($($itype),*);\n+    };\n+    { splat $type:ty | $($itype:ty)* } => {\n+        /// Construct a vector by setting all lanes to the given value.\n+        #[inline]\n+        pub const fn splat(value: $type) -> Self {\n+            Self($(value as $itype),*)\n+        }\n+    };\n+    { new $type:ty | $($var:ident)* } => {\n+        /// Construct a vector by setting each lane to the given values.\n+        #[allow(clippy::too_many_arguments)]\n+        #[inline]\n+        pub const fn new($($var: $type),*) -> Self {\n+            Self($($var),*)\n+        }\n+    }\n+}\n+\n+/// Defines an integer vector `$name` containing multiple `$lanes` of integer `$type`.\n+macro_rules! define_integer_vector {\n+    { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n+        define_vector! {\n+            $(#[$attr])*\n+            struct $name([$type; $lanes]);\n+        }\n+\n+        integer_vector_traits! { $name => [$type; $lanes] }\n+    }\n+}\n+\n+/// Defines a mask vector `$name` containing multiple `$lanes` of `$type`, represented by the\n+/// underlying type `$impl_type`.\n+macro_rules! define_mask_vector {\n+    { $(#[$attr:meta])* struct $name:ident([$impl_type:ty as $type:ty; $lanes:tt]); } => {\n+        call_repeat! { $lanes => define_mask_vector [$impl_type] def $(#[$attr])* | $name | }\n+\n+        impl $name {\n+            call_repeat! { $lanes => define_mask_vector [$impl_type] splat $type | }\n+            call_counting_args! { $lanes => define_mask_vector => new $type | }\n+        }\n+\n+        base_vector_traits! { $name => [$type; $lanes] }\n+        integer_vector_traits! { $name => [$type; $lanes] }\n+    };\n+    { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        #[repr(simd)]\n+        pub struct $name($($itype),*);\n+    };\n+    { splat $type:ty | $($itype:ty)* } => {\n+        /// Construct a vector by setting all lanes to the given value.\n+        #[inline]\n+        pub const fn splat(value: $type) -> Self {\n+            Self($(value.0 as $itype),*)\n+        }\n+    };\n+    { new $type:ty | $($var:ident)* } => {\n+        /// Construct a vector by setting each lane to the given values.\n+        #[allow(clippy::too_many_arguments)]\n+        #[inline]\n+        pub const fn new($($var: $type),*) -> Self {\n+            Self($($var.0),*)\n+        }\n+    }\n+}"}, {"sha": "1fc281a310d38cbc188044153231e3423944669d", "filename": "crates/core_simd/src/masks.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,73 @@\n+macro_rules! define_mask {\n+    { $(#[$attr:meta])* struct $name:ident($type:ty); } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        #[derive(Copy, Clone, Default, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+        #[repr(transparent)]\n+        pub struct $name(pub(crate) $type);\n+\n+        impl $name {\n+            /// Construct a mask from the given value.\n+            pub const fn new(value: bool) -> Self {\n+                if value {\n+                    Self(!0)\n+                } else {\n+                    Self(0)\n+                }\n+            }\n+\n+            /// Test if the mask is set.\n+            pub const fn test(&self) -> bool {\n+                self.0 != 0\n+            }\n+        }\n+\n+        impl core::convert::From<bool> for $name {\n+            fn from(value: bool) -> Self {\n+                Self::new(value)\n+            }\n+        }\n+\n+        impl core::convert::From<$name> for bool {\n+            fn from(mask: $name) -> Self {\n+                mask.test()\n+            }\n+        }\n+\n+        impl core::fmt::Debug for $name {\n+            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                self.test().fmt(f)\n+            }\n+        }\n+    }\n+}\n+\n+define_mask! {\n+    /// 8-bit mask\n+    struct mask8(i8);\n+}\n+\n+define_mask! {\n+    /// 16-bit mask\n+    struct mask16(i16);\n+}\n+\n+define_mask! {\n+    /// 32-bit mask\n+    struct mask32(i32);\n+}\n+\n+define_mask! {\n+    /// 64-bit mask\n+    struct mask64(i64);\n+}\n+\n+define_mask! {\n+    /// 128-bit mask\n+    struct mask128(i128);\n+}\n+\n+define_mask! {\n+    /// `isize`-wide mask\n+    struct masksize(isize);\n+}"}, {"sha": "9fcbd9d53f0f83778f3f7b761902f1cac766a749", "filename": "crates/core_simd/src/vectors_f32.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f32.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_vector! {\n+    /// Vector of two `f32` values\n+    struct f32x2([f32; 2]);\n+}\n+\n+define_vector! {\n+    /// Vector of four `f32` values\n+    struct f32x4([f32; 4]);\n+}\n+\n+define_vector! {\n+    /// Vector of eight `f32` values\n+    struct f32x8([f32; 8]);\n+}\n+\n+define_vector! {\n+    /// Vector of 16 `f32` values\n+    struct f32x16([f32; 16]);\n+}\n+\n+from_transmute_x86! { unsafe f32x4 => __m128 }\n+from_transmute_x86! { unsafe f32x8 => __m256 }\n+//from_transmute_x86! { unsafe f32x16 => __m512 }"}, {"sha": "d741aabe88e0fcdc9e1cb2cc81012a00ad7033bb", "filename": "crates/core_simd/src/vectors_f64.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_f64.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,18 @@\n+define_vector! {\n+    /// Vector of two `f64` values\n+    struct f64x2([f64; 2]);\n+}\n+\n+define_vector! {\n+    /// Vector of four `f64` values\n+    struct f64x4([f64; 4]);\n+}\n+\n+define_vector! {\n+    /// Vector of eight `f64` values\n+    struct f64x8([f64; 8]);\n+}\n+\n+from_transmute_x86! { unsafe f64x2 => __m128d }\n+from_transmute_x86! { unsafe f64x4 => __m256d }\n+//from_transmute_x86! { unsafe f64x8 => __m512d }"}, {"sha": "5c8354070e819c8092f755f6af6ed5a61e49dbc2", "filename": "crates/core_simd/src/vectors_i128.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,12 @@\n+define_integer_vector! {\n+    /// Vector of two `i128` values\n+    struct i128x2([i128; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `i128` values\n+    struct i128x4([i128; 4]);\n+}\n+\n+from_transmute_x86! { unsafe i128x2 => __m256i }\n+//from_transmute_x86! { unsafe i128x4 => __m512i }"}, {"sha": "8aabd136b1042dedf693c623b38000babeba8896", "filename": "crates/core_simd/src/vectors_i16.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_integer_vector! {\n+    /// Vector of four `i16` values\n+    struct i16x4([i16; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `i16` values\n+    struct i16x8([i16; 8]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 16 `i16` values\n+    struct i16x16([i16; 16]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 32 `i16` values\n+    struct i16x32([i16; 32]);\n+}\n+\n+from_transmute_x86! { unsafe i16x8 => __m128i }\n+from_transmute_x86! { unsafe i16x16 => __m256i }\n+//from_transmute_x86! { unsafe i16x32 => __m512i }"}, {"sha": "9aa9bc8e9dc83ab30a45c49da61b38540c3ea7d8", "filename": "crates/core_simd/src/vectors_i32.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_integer_vector! {\n+    /// Vector of two `i32` values\n+    struct i32x2([i32; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `i32` values\n+    struct i32x4([i32; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `i32` values\n+    struct i32x8([i32; 8]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 16 `i32` values\n+    struct i32x16([i32; 16]);\n+}\n+\n+from_transmute_x86! { unsafe i32x4 => __m128i }\n+from_transmute_x86! { unsafe i32x8 => __m256i }\n+//from_transmute_x86! { unsafe i32x16 => __m512i }"}, {"sha": "ba66aba2095d86bba1868fb1026d012d63df1745", "filename": "crates/core_simd/src/vectors_i64.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,18 @@\n+define_integer_vector! {\n+    /// Vector of two `i64` values\n+    struct i64x2([i64; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `i64` values\n+    struct i64x4([i64; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `i64` values\n+    struct i64x8([i64; 8]);\n+}\n+\n+from_transmute_x86! { unsafe i64x2 => __m128i }\n+from_transmute_x86! { unsafe i64x4 => __m256i }\n+//from_transmute_x86! { unsafe i64x8 => __m512i }"}, {"sha": "3e52d894cc220341ad84e6199273f59dcf945cdb", "filename": "crates/core_simd/src/vectors_i8.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_integer_vector! {\n+    /// Vector of eight `i8` values\n+    struct i8x8([i8; 8]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 16 `i8` values\n+    struct i8x16([i8; 16]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 32 `i8` values\n+    struct i8x32([i8; 32]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 64 `i8` values\n+    struct i8x64([i8; 64]);\n+}\n+\n+from_transmute_x86! { unsafe i8x16 => __m128i }\n+from_transmute_x86! { unsafe i8x32 => __m256i }\n+//from_transmute_x86! { unsafe i8x64 => __m512i }"}, {"sha": "35dac8bcbd457f8fd5d53c69553a29469d92b0bb", "filename": "crates/core_simd/src/vectors_isize.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,26 @@\n+define_integer_vector! {\n+    /// Vector of two `isize` values\n+    struct isizex2([isize; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `isize` values\n+    struct isizex4([isize; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `isize` values\n+    struct isizex8([isize; 8]);\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe isizex4 => __m128i }\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe isizex8 => __m256i }\n+\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe isizex2 => __m128i }\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe isizex4 => __m256i }\n+//#[cfg(target_pointer_width = \"64\")]\n+//from_transmute_x86! { unsafe isizex8 => __m512i }"}, {"sha": "adf56a3684b3be8829e28ac9d6d0911536ef75ad", "filename": "crates/core_simd/src/vectors_mask128.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,11 @@\n+use crate::mask128;\n+\n+define_mask_vector! {\n+    /// Vector of two `mask128` values\n+    struct mask128x2([i128 as mask128; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `mask128` values\n+    struct mask128x4([i128 as mask128; 4]);\n+}"}, {"sha": "406d7255a11efe3bd31407ba73b476488f467568", "filename": "crates/core_simd/src/vectors_mask16.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,21 @@\n+use crate::mask16;\n+\n+define_mask_vector! {\n+    /// Vector of four `mask16` values\n+    struct mask16x4([i16 as mask16; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `mask16` values\n+    struct mask16x8([i16 as mask16; 8]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 16 `mask16` values\n+    struct mask16x16([i16 as mask16; 16]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 32 `mask16` values\n+    struct mask16x32([i16 as mask16; 32]);\n+}"}, {"sha": "fad191421f3879fa97648c6fe4fc7c424f10921d", "filename": "crates/core_simd/src/vectors_mask32.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,21 @@\n+use crate::mask32;\n+\n+define_mask_vector! {\n+    /// Vector of two `mask32` values\n+    struct mask32x2([i32 as mask32; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `mask32` values\n+    struct mask32x4([i32 as mask32; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `mask32` values\n+    struct mask32x8([i32 as mask32; 8]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 16 `mask32` values\n+    struct mask32x16([i32 as mask32; 16]);\n+}"}, {"sha": "554e731ccf24b0d177f6ba492cdf0d6e5797c80e", "filename": "crates/core_simd/src/vectors_mask64.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,16 @@\n+use crate::mask64;\n+\n+define_mask_vector! {\n+    /// Vector of two `mask64` values\n+    struct mask64x2([i64 as mask64; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `mask64` values\n+    struct mask64x4([i64 as mask64; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `mask64` values\n+    struct mask64x8([i64 as mask64; 8]);\n+}"}, {"sha": "d038b33610444a1d084e09021a2a57270e46bc9b", "filename": "crates/core_simd/src/vectors_mask8.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,21 @@\n+use crate::mask8;\n+\n+define_mask_vector! {\n+    /// Vector of eight `mask8` values\n+    struct mask8x8([i8 as mask8; 8]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 16 `mask8` values\n+    struct mask8x16([i8 as mask8; 16]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 32 `mask8` values\n+    struct mask8x32([i8 as mask8; 32]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 64 `mask8` values\n+    struct mask8x64([i8 as mask8; 64]);\n+}"}, {"sha": "a838aee51985352443a3a3673f5ef88da79ade67", "filename": "crates/core_simd/src/vectors_masksize.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,16 @@\n+use crate::masksize;\n+\n+define_mask_vector! {\n+    /// Vector of two `masksize` values\n+    struct masksizex2([isize as masksize; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `masksize` values\n+    struct masksizex4([isize as masksize; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `masksize` values\n+    struct masksizex8([isize as masksize; 8]);\n+}"}, {"sha": "eec7bde1722f7fe29bdce7722a9e5e8216caa802", "filename": "crates/core_simd/src/vectors_u128.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,12 @@\n+define_integer_vector! {\n+    /// Vector of two `u128` values\n+    struct u128x2([u128; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `u128` values\n+    struct u128x4([u128; 4]);\n+}\n+\n+from_transmute_x86! { unsafe u128x2 => __m256i }\n+//from_transmute_x86! { unsafe u128x4 => __m512i }"}, {"sha": "809ab10383cd39f6daeec2cb7a8916a35e340b35", "filename": "crates/core_simd/src/vectors_u16.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_integer_vector! {\n+    /// Vector of four `u16` values\n+    struct u16x4([u16; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `u16` values\n+    struct u16x8([u16; 8]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 16 `u16` values\n+    struct u16x16([u16; 16]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 32 `u16` values\n+    struct u16x32([u16; 32]);\n+}\n+\n+from_transmute_x86! { unsafe u16x8 => __m128i }\n+from_transmute_x86! { unsafe u16x16 => __m256i }\n+//from_transmute_x86! { unsafe u16x32 => __m512i }"}, {"sha": "b00c63d9058ffa5f75176104db821cd9ab6f1c6c", "filename": "crates/core_simd/src/vectors_u32.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_integer_vector! {\n+    /// Vector of two `u32` values\n+    struct u32x2([u32; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `u32` values\n+    struct u32x4([u32; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `u32` values\n+    struct u32x8([u32; 8]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 16 `u32` values\n+    struct u32x16([u32; 16]);\n+}\n+\n+from_transmute_x86! { unsafe u32x4 => __m128i }\n+from_transmute_x86! { unsafe u32x8 => __m256i }\n+//from_transmute_x86! { unsafe u32x16 => __m512i }"}, {"sha": "0bcf28ebc265af0ad7ddd9a43575f65947e13f8b", "filename": "crates/core_simd/src/vectors_u64.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,18 @@\n+define_integer_vector! {\n+    /// Vector of two `u64` values\n+    struct u64x2([u64; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `u64` values\n+    struct u64x4([u64; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `u64` values\n+    struct u64x8([u64; 8]);\n+}\n+\n+from_transmute_x86! { unsafe u64x2 => __m128i }\n+from_transmute_x86! { unsafe u64x4 => __m256i }\n+//from_transmute_x86! { unsafe u64x8 => __m512i }"}, {"sha": "a187bc6f7b4284435965325bee03709e7012b13d", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,23 @@\n+define_integer_vector! {\n+    /// Vector of eight `u8` values\n+    struct u8x8([u8; 8]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 16 `u8` values\n+    struct u8x16([u8; 16]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 32 `u8` values\n+    struct u8x32([u8; 32]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of 64 `u8` values\n+    struct u8x64([u8; 64]);\n+}\n+\n+from_transmute_x86! { unsafe u8x16 => __m128i }\n+from_transmute_x86! { unsafe u8x32 => __m256i }\n+//from_transmute_x86! { unsafe u8x64 => __m512i }"}, {"sha": "84a4b8e509b396db6fa11973c1a35a818a49c56a", "filename": "crates/core_simd/src/vectors_usize.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa1f4f747e618ddb341bde35ba7bd05dbf766b/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs?ref=24aa1f4f747e618ddb341bde35ba7bd05dbf766b", "patch": "@@ -0,0 +1,26 @@\n+define_integer_vector! {\n+    /// Vector of two `usize` values\n+    struct usizex2([usize; 2]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of four `usize` values\n+    struct usizex4([usize; 4]);\n+}\n+\n+define_integer_vector! {\n+    /// Vector of eight `usize` values\n+    struct usizex8([usize; 8]);\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe usizex4 => __m128i }\n+#[cfg(target_pointer_width = \"32\")]\n+from_transmute_x86! { unsafe usizex8 => __m256i }\n+\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe usizex2 => __m128i }\n+#[cfg(target_pointer_width = \"64\")]\n+from_transmute_x86! { unsafe usizex4 => __m256i }\n+//#[cfg(target_pointer_width = \"64\")]\n+//from_transmute_x86! { unsafe usizex8 => __m512i }"}]}