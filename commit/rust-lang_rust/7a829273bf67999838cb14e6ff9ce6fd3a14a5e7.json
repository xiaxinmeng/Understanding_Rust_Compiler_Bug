{"sha": "7a829273bf67999838cb14e6ff9ce6fd3a14a5e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODI5MjczYmY2Nzk5OTgzOGNiMTRlNmZmOWNlNmZkM2ExNGE1ZTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-16T10:14:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:46Z"}, "message": "Rename ty_param_bound to generic_bound", "tree": {"sha": "740369f919c6508869a7424278402290ba25cab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740369f919c6508869a7424278402290ba25cab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7", "html_url": "https://github.com/rust-lang/rust/commit/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4343c20819f1129924d2657322442d66672f213d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4343c20819f1129924d2657322442d66672f213d", "html_url": "https://github.com/rust-lang/rust/commit/4343c20819f1129924d2657322442d66672f213d"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "de087049267b1f1ed82a4db643497692355a3061", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=7a829273bf67999838cb14e6ff9ce6fd3a14a5e7", "patch": "@@ -1037,7 +1037,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         self.access_levels.is_public(trait_id)\n     }\n \n-    fn check_ty_param_bound(&mut self, bound: &hir::GenericBound) {\n+    fn check_generic_bound(&mut self, bound: &hir::GenericBound) {\n         if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {\n             if self.path_is_private_type(&trait_ref.trait_ref.path) {\n                 self.old_error_set.insert(trait_ref.trait_ref.ref_id);\n@@ -1100,7 +1100,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                 }\n \n                 for bound in bounds.iter() {\n-                    self.check_ty_param_bound(bound)\n+                    self.check_generic_bound(bound)\n                 }\n             }\n \n@@ -1271,15 +1271,15 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n             GenericParamKind::Lifetime { .. } => {}\n             GenericParamKind::Type { .. } => {\n                 for bound in &param.bounds {\n-                    self.check_ty_param_bound(bound);\n+                    self.check_generic_bound(bound);\n                 }\n             }\n         });\n         for predicate in &generics.where_clause.predicates {\n             match predicate {\n                 &hir::WherePredicate::BoundPredicate(ref bound_pred) => {\n                     for bound in bound_pred.bounds.iter() {\n-                        self.check_ty_param_bound(bound)\n+                        self.check_generic_bound(bound)\n                     }\n                 }\n                 &hir::WherePredicate::RegionPredicate(_) => {}"}, {"sha": "2bb8fff40370e96de79e6a1cc5d83637bd26f24a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a829273bf67999838cb14e6ff9ce6fd3a14a5e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7a829273bf67999838cb14e6ff9ce6fd3a14a5e7", "patch": "@@ -1509,21 +1509,21 @@ impl<'a> Parser<'a> {\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n             // Always parse bounds greedily for better error recovery.\n-            let bounds = self.parse_ty_param_bounds()?;\n+            let bounds = self.parse_generic_bounds()?;\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::ImplTrait(bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n                   self.look_ahead(1, |t| t.can_begin_bound() &&\n                                          !can_continue_type_after_non_fn_ident(t)) {\n             self.bump(); // `dyn`\n             // Always parse bounds greedily for better error recovery.\n-            let bounds = self.parse_ty_param_bounds()?;\n+            let bounds = self.parse_generic_bounds()?;\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn)\n         } else if self.check(&token::Question) ||\n                   self.check_lifetime() && self.look_ahead(1, |t| t.is_like_plus()) {\n             // Bound list (trait object type)\n-            TyKind::TraitObject(self.parse_ty_param_bounds_common(allow_plus)?,\n+            TyKind::TraitObject(self.parse_generic_bounds_common(allow_plus)?,\n                                 TraitObjectSyntax::None)\n         } else if self.eat_lt() {\n             // Qualified path\n@@ -1569,7 +1569,7 @@ impl<'a> Parser<'a> {\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_ty_param_bounds()?);\n+            bounds.append(&mut self.parse_generic_bounds()?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -1594,7 +1594,7 @@ impl<'a> Parser<'a> {\n         }\n \n         self.bump(); // `+`\n-        let bounds = self.parse_ty_param_bounds()?;\n+        let bounds = self.parse_generic_bounds()?;\n         let sum_span = ty.span.to(self.prev_span);\n \n         let mut err = struct_span_err!(self.sess.span_diagnostic, sum_span, E0178,\n@@ -4735,7 +4735,7 @@ impl<'a> Parser<'a> {\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n     // TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n     // TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n-    fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, GenericBounds> {\n+    fn parse_generic_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         loop {\n             // This needs to be syncronized with `Token::can_begin_bound`.\n@@ -4784,8 +4784,8 @@ impl<'a> Parser<'a> {\n         return Ok(bounds);\n     }\n \n-    fn parse_ty_param_bounds(&mut self) -> PResult<'a, GenericBounds> {\n-        self.parse_ty_param_bounds_common(true)\n+    fn parse_generic_bounds(&mut self) -> PResult<'a, GenericBounds> {\n+        self.parse_generic_bounds_common(true)\n     }\n \n     // Parse bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -4810,7 +4810,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_ty_param_bounds()?\n+            self.parse_generic_bounds()?\n         } else {\n             Vec::new()\n         };\n@@ -4841,7 +4841,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_ty_param_bounds()?\n+            self.parse_generic_bounds()?\n         } else {\n             Vec::new()\n         };\n@@ -5036,7 +5036,7 @@ impl<'a> Parser<'a> {\n                 // or with mandatory equality sign and the second type.\n                 let ty = self.parse_ty()?;\n                 if self.eat(&token::Colon) {\n-                    let bounds = self.parse_ty_param_bounds()?;\n+                    let bounds = self.parse_generic_bounds()?;\n                     where_clause.predicates.push(ast::WherePredicate::BoundPredicate(\n                         ast::WhereBoundPredicate {\n                             span: lo.to(self.prev_span),\n@@ -5536,14 +5536,14 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and supertrait bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_ty_param_bounds()?\n+            self.parse_generic_bounds()?\n         } else {\n             Vec::new()\n         };\n \n         if self.eat(&token::Eq) {\n             // it's a trait alias\n-            let bounds = self.parse_ty_param_bounds()?;\n+            let bounds = self.parse_generic_bounds()?;\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n             if unsafety != Unsafety::Normal {"}]}