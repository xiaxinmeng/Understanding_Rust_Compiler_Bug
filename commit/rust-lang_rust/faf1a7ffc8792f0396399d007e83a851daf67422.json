{"sha": "faf1a7ffc8792f0396399d007e83a851daf67422", "node_id": "C_kwDOAAsO6NoAKGZhZjFhN2ZmYzg3OTJmMDM5NjM5OWQwMDdlODNhODUxZGFmNjc0MjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-06T14:41:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-06T14:41:26Z"}, "message": "Rollup merge of #93412 - fee1-dead:improve-rustdoc-const-bounds, r=GuillaumeGomez\n\nImprove rustdoc const bounds\n\n - Rustdoc no longer displays `~const` in trait bounds, because it currently means nothing for stable users, and because we still haven't decided on the final syntax yet.\n - Rustdoc will hide trait bounds where the trait is `Drop` AND it is `~const`, i.e. `~const Drop` bounds because it has no effect on stable users as well.\n - Because of additional logic that hides the whole `where` statement where it consists of `~const Drop` bounds (so it doesn't display `struct Foo<T>() where ;` like that), bounds that have no trait e.g. `where [T; N+1]: ;` are also hidden.\n\nCherry-picked from #92433.", "tree": {"sha": "592b69807bc27ff483868c10ccacefc40c4c008c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592b69807bc27ff483868c10ccacefc40c4c008c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf1a7ffc8792f0396399d007e83a851daf67422", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJMgWCRBK7hj4Ov3rIwAA2aMIAJ/9U7EJW2wWOMQazH2K6SyH\ntdX3URnVG2pdJnMayP66BFgUeCzKI7rlKYE6GN1K/zRxKGPBEomaHbIlRFML4mN0\n1UGN6tUbBCpr65fZzGo+mMZ6qqhbpt7HXGthCueChl8KzebI6kh/aqUMdYstF4GS\nnJcKBycnfWpS4ub1ojDA9X3rHcKR/jj0/FDiq9leCUlqcOnYnQWiaZdKdOm1iEV+\nN/dIi/2nQX0f25cCq+hQoKR9ou7GNwDoHps7Dl6L1v2ij2PL8aFODQPxNti4qVoa\nI81PmhC3kx3pdIp1QmWL+D2fwRW9rcvlu8GxcQPlYbALZQIxgknPTI1BI8K26Eo=\n=WFhW\n-----END PGP SIGNATURE-----\n", "payload": "tree 592b69807bc27ff483868c10ccacefc40c4c008c\nparent ad0d1d71d3bc6f85f53d8ab2bf47daa7c8bc2c51\nparent 484936bbfcb09c357569198f9a5a21deed8dd041\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646577686 +0100\ncommitter GitHub <noreply@github.com> 1646577686 +0100\n\nRollup merge of #93412 - fee1-dead:improve-rustdoc-const-bounds, r=GuillaumeGomez\n\nImprove rustdoc const bounds\n\n - Rustdoc no longer displays `~const` in trait bounds, because it currently means nothing for stable users, and because we still haven't decided on the final syntax yet.\n - Rustdoc will hide trait bounds where the trait is `Drop` AND it is `~const`, i.e. `~const Drop` bounds because it has no effect on stable users as well.\n - Because of additional logic that hides the whole `where` statement where it consists of `~const Drop` bounds (so it doesn't display `struct Foo<T>() where ;` like that), bounds that have no trait e.g. `where [T; N+1]: ;` are also hidden.\n\nCherry-picked from #92433.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf1a7ffc8792f0396399d007e83a851daf67422", "html_url": "https://github.com/rust-lang/rust/commit/faf1a7ffc8792f0396399d007e83a851daf67422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf1a7ffc8792f0396399d007e83a851daf67422/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad0d1d71d3bc6f85f53d8ab2bf47daa7c8bc2c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0d1d71d3bc6f85f53d8ab2bf47daa7c8bc2c51", "html_url": "https://github.com/rust-lang/rust/commit/ad0d1d71d3bc6f85f53d8ab2bf47daa7c8bc2c51"}, {"sha": "484936bbfcb09c357569198f9a5a21deed8dd041", "url": "https://api.github.com/repos/rust-lang/rust/commits/484936bbfcb09c357569198f9a5a21deed8dd041", "html_url": "https://github.com/rust-lang/rust/commit/484936bbfcb09c357569198f9a5a21deed8dd041"}], "stats": {"total": 219, "additions": 146, "deletions": 73}, "files": [{"sha": "a2f48c164652df4c5d351127be6ff6d931e8cf77", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 85, "deletions": 72, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/faf1a7ffc8792f0396399d007e83a851daf67422/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1a7ffc8792f0396399d007e83a851daf67422/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=faf1a7ffc8792f0396399d007e83a851daf67422", "patch": "@@ -143,11 +143,14 @@ impl Buffer {\n     }\n }\n \n-fn comma_sep<T: fmt::Display>(items: impl Iterator<Item = T>) -> impl fmt::Display {\n+fn comma_sep<T: fmt::Display>(\n+    items: impl Iterator<Item = T>,\n+    space_after_comma: bool,\n+) -> impl fmt::Display {\n     display_fn(move |f| {\n         for (i, item) in items.enumerate() {\n             if i != 0 {\n-                write!(f, \", \")?;\n+                write!(f, \",{}\", if space_after_comma { \" \" } else { \"\" })?;\n             }\n             fmt::Display::fmt(&item, f)?;\n         }\n@@ -248,9 +251,9 @@ impl clean::Generics {\n             }\n \n             if f.alternate() {\n-                write!(f, \"<{:#}>\", comma_sep(real_params.map(|g| g.print(cx))))\n+                write!(f, \"<{:#}>\", comma_sep(real_params.map(|g| g.print(cx)), true))\n             } else {\n-                write!(f, \"&lt;{}&gt;\", comma_sep(real_params.map(|g| g.print(cx))))\n+                write!(f, \"&lt;{}&gt;\", comma_sep(real_params.map(|g| g.print(cx)), true))\n             }\n         })\n     }\n@@ -266,10 +269,80 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n     end_newline: bool,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n     display_fn(move |f| {\n-        if gens.where_predicates.is_empty() {\n+        let mut where_predicates = gens.where_predicates.iter().filter(|pred| {\n+            !matches!(pred, clean::WherePredicate::BoundPredicate { bounds, .. } if bounds.is_empty())\n+        }).map(|pred| {\n+            display_fn(move |f| {\n+                if f.alternate() {\n+                    f.write_str(\" \")?;\n+                } else {\n+                    f.write_str(\"<br>\")?;\n+                }\n+\n+                match pred {\n+                    clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n+                        let bounds = bounds;\n+                        let for_prefix = if bound_params.is_empty() {\n+                            String::new()\n+                        } else if f.alternate() {\n+                            format!(\n+                                \"for&lt;{:#}&gt; \",\n+                                comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                            )\n+                        } else {\n+                            format!(\n+                                \"for&lt;{}&gt; \",\n+                                comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                            )\n+                        };\n+\n+                        if f.alternate() {\n+                            write!(\n+                                f,\n+                                \"{}{:#}: {:#}\",\n+                                for_prefix,\n+                                ty.print(cx),\n+                                print_generic_bounds(bounds, cx)\n+                            )\n+                        } else {\n+                            write!(\n+                                f,\n+                                \"{}{}: {}\",\n+                                for_prefix,\n+                                ty.print(cx),\n+                                print_generic_bounds(bounds, cx)\n+                            )\n+                        }\n+                    }\n+                    clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n+                        write!(\n+                            f,\n+                            \"{}: {}\",\n+                            lifetime.print(),\n+                            bounds\n+                                .iter()\n+                                .map(|b| b.print(cx).to_string())\n+                                .collect::<Vec<_>>()\n+                                .join(\" + \")\n+                        )\n+                    }\n+                    clean::WherePredicate::EqPredicate { lhs, rhs } => {\n+                        if f.alternate() {\n+                            write!(f, \"{:#} == {:#}\", lhs.print(cx), rhs.print(cx),)\n+                        } else {\n+                            write!(f, \"{} == {}\", lhs.print(cx), rhs.print(cx),)\n+                        }\n+                    }\n+                }\n+            })\n+        }).peekable();\n+\n+        if where_predicates.peek().is_none() {\n             return Ok(());\n         }\n+\n         let mut clause = String::new();\n+\n         if f.alternate() {\n             clause.push_str(\" where\");\n         } else {\n@@ -279,72 +352,11 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n                 clause.push_str(\" <span class=\\\"where\\\">where\");\n             }\n         }\n-        for (i, pred) in gens.where_predicates.iter().enumerate() {\n-            if f.alternate() {\n-                clause.push(' ');\n-            } else {\n-                clause.push_str(\"<br>\");\n-            }\n-\n-            match pred {\n-                clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n-                    let bounds = bounds;\n-                    let for_prefix = match bound_params.len() {\n-                        0 => String::new(),\n-                        _ if f.alternate() => {\n-                            format!(\n-                                \"for&lt;{:#}&gt; \",\n-                                comma_sep(bound_params.iter().map(|lt| lt.print()))\n-                            )\n-                        }\n-                        _ => format!(\n-                            \"for&lt;{}&gt; \",\n-                            comma_sep(bound_params.iter().map(|lt| lt.print()))\n-                        ),\n-                    };\n-\n-                    if f.alternate() {\n-                        clause.push_str(&format!(\n-                            \"{}{:#}: {:#}\",\n-                            for_prefix,\n-                            ty.print(cx),\n-                            print_generic_bounds(bounds, cx)\n-                        ));\n-                    } else {\n-                        clause.push_str(&format!(\n-                            \"{}{}: {}\",\n-                            for_prefix,\n-                            ty.print(cx),\n-                            print_generic_bounds(bounds, cx)\n-                        ));\n-                    }\n-                }\n-                clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n-                    clause.push_str(&format!(\n-                        \"{}: {}\",\n-                        lifetime.print(),\n-                        bounds\n-                            .iter()\n-                            .map(|b| b.print(cx).to_string())\n-                            .collect::<Vec<_>>()\n-                            .join(\" + \")\n-                    ));\n-                }\n-                clean::WherePredicate::EqPredicate { lhs, rhs } => {\n-                    if f.alternate() {\n-                        clause.push_str(&format!(\"{:#} == {:#}\", lhs.print(cx), rhs.print(cx),));\n-                    } else {\n-                        clause.push_str(&format!(\"{} == {}\", lhs.print(cx), rhs.print(cx),));\n-                    }\n-                }\n-            }\n \n-            if i < gens.where_predicates.len() - 1 || end_newline {\n-                clause.push(',');\n-            }\n-        }\n+        clause.push_str(&comma_sep(where_predicates, false).to_string());\n \n         if end_newline {\n+            clause.push(',');\n             // add a space so stripping <br> tags and breaking spaces still renders properly\n             if f.alternate() {\n                 clause.push(' ');\n@@ -394,13 +406,13 @@ impl clean::PolyTrait {\n                     write!(\n                         f,\n                         \"for<{:#}> \",\n-                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                     )?;\n                 } else {\n                     write!(\n                         f,\n                         \"for&lt;{}&gt; \",\n-                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                     )?;\n                 }\n             }\n@@ -424,7 +436,8 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n-                    hir::TraitBoundModifier::MaybeConst => \"~const\",\n+                    // ~const is experimental; do not display those bounds in rustdoc\n+                    hir::TraitBoundModifier::MaybeConst => \"\",\n                 };\n                 if f.alternate() {\n                     write!(f, \"{}{:#}\", modifier_str, ty.print(cx))\n@@ -1111,7 +1124,7 @@ impl clean::BareFunctionDecl {\n                 write!(\n                     f,\n                     \"for&lt;{}&gt; \",\n-                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                 )\n             } else {\n                 Ok(())"}, {"sha": "215ee228eb857dfba2f05370de52b9390a767dc8", "filename": "src/test/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf1a7ffc8792f0396399d007e83a851daf67422/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1a7ffc8792f0396399d007e83a851daf67422/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=faf1a7ffc8792f0396399d007e83a851daf67422", "patch": "@@ -3,5 +3,5 @@\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n // @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\\n-//      'pub struct Ice<const N: usize> where [(); N + 1]: ;'\n+//      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "2adf69f6514cd95a2fe50c27875ec91bcda2bcdf", "filename": "src/test/rustdoc/rfc-2632-const-trait-impl.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/faf1a7ffc8792f0396399d007e83a851daf67422/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1a7ffc8792f0396399d007e83a851daf67422/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=faf1a7ffc8792f0396399d007e83a851daf67422", "patch": "@@ -0,0 +1,60 @@\n+// Test that we do not currently display `~const` in rustdoc\n+// as that syntax is currently provisional; `~const Drop` has\n+// no effect on stable code so it should be hidden as well.\n+//\n+// To future blessers: make sure that `const_trait_impl` is\n+// stabilized when changing `@!has` to `@has`, and please do\n+// not remove this test.\n+#![feature(const_trait_impl)]\n+#![crate_name = \"foo\"]\n+\n+pub struct S<T>(T);\n+\n+// @!has foo/trait.Tr.html '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' '~const'\n+// @!has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Drop'\n+// @has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' '~const'\n+// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' 'Drop'\n+// @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n+pub trait Tr<T> {\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Drop'\n+    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    #[default_method_body_is_const]\n+    fn a<A: ~const Drop + ~const Clone>() where Option<A>: ~const Drop + ~const Clone {}\n+}\n+\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]' '~const'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Drop'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where\"]' '~const'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+impl<T: ~const Drop + ~const Clone> const Tr<T> for T where Option<T>: ~const Drop + ~const Clone {\n+    fn a<A: ~const Drop + ~const Clone>() where Option<A>: ~const Drop + ~const Clone {}\n+}\n+\n+// @!has foo/fn.foo.html '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' '~const'\n+// @!has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Drop'\n+// @has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' 'Drop'\n+// @has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+pub const fn foo<F: ~const Drop + ~const Clone>() where Option<F>: ~const Drop + ~const Clone {\n+    F::a()\n+}\n+\n+impl<T> S<T> {\n+    // @!has foo/struct.S.html '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]' '~const'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Drop'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    pub const fn foo<B: ~const Drop + ~const Clone>() where B: ~const Drop + ~const Clone {\n+        B::a()\n+    }\n+}"}]}