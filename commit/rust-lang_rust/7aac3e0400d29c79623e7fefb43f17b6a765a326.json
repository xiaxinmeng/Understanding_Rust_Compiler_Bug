{"sha": "7aac3e0400d29c79623e7fefb43f17b6a765a326", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYWMzZTA0MDBkMjljNzk2MjNlN2ZlZmI0M2YxN2I2YTc2NWEzMjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-13T12:41:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-13T12:41:04Z"}, "message": "pin docs: add some forward references", "tree": {"sha": "267e43e1b0fb717c3a70a450813e31b9d364c152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267e43e1b0fb717c3a70a450813e31b9d364c152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aac3e0400d29c79623e7fefb43f17b6a765a326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aac3e0400d29c79623e7fefb43f17b6a765a326", "html_url": "https://github.com/rust-lang/rust/commit/7aac3e0400d29c79623e7fefb43f17b6a765a326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aac3e0400d29c79623e7fefb43f17b6a765a326/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fbed1739c384faabf00cd8a62abedbf506e949b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fbed1739c384faabf00cd8a62abedbf506e949b", "html_url": "https://github.com/rust-lang/rust/commit/3fbed1739c384faabf00cd8a62abedbf506e949b"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "960cccc0fb21147ee2cf9c0019f5b08c6359e763", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7aac3e0400d29c79623e7fefb43f17b6a765a326/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aac3e0400d29c79623e7fefb43f17b6a765a326/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=7aac3e0400d29c79623e7fefb43f17b6a765a326", "patch": "@@ -6,9 +6,12 @@\n //! as moving an object with pointers to itself will invalidate them, which could cause undefined\n //! behavior.\n //!\n-//! A [`Pin<P>`] ensures that the pointee of any pointer type `P` has a stable location in memory,\n-//! meaning it cannot be moved elsewhere and its memory cannot be deallocated\n-//! until it gets dropped. We say that the pointee is \"pinned\".\n+//! At a high level, a [`Pin<P>`] ensures that the pointee of any pointer type\n+//! `P` has a stable location in memory, meaning it cannot be moved elsewhere\n+//! and its memory cannot be deallocated until it gets dropped. We say that the\n+//! pointee is \"pinned\". Things get more subtle when discussing types that\n+//! combine pinned with non-pinned data; [see below](#projections-and-structural-pinning)\n+//! for more details.\n //!\n //! By default, all types in Rust are movable. Rust allows passing all types by-value,\n //! and common smart-pointer types such as [`Box<T>`] and `&mut T` allow replacing and\n@@ -61,6 +64,10 @@\n //!\n //! # Example: self-referential struct\n //!\n+//! Before we go into more details to explain the guarantees and choices\n+//! associated with `Pin<T>`, we discuss some examples for how it might be used.\n+//! Feel free to [skip to where the theoretical discussion continues](#drop-guarantee).\n+//!\n //! ```rust\n //! use std::pin::Pin;\n //! use std::marker::PhantomPinned;"}]}