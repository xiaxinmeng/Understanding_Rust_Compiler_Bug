{"sha": "6b68882e4530e343af7134a0a4c6d9d3e1ac0430", "node_id": "C_kwDOAAsO6NoAKDZiNjg4ODJlNDUzMGUzNDNhZjcxMzRhMGE0YzZkOWQzZTFhYzA0MzA", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-25T16:06:23Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-25T16:06:23Z"}, "message": "Remove needless borrows from core::fmt", "tree": {"sha": "babd08704a927492120618af35a45fc4d7f532a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/babd08704a927492120618af35a45fc4d7f532a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b68882e4530e343af7134a0a4c6d9d3e1ac0430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b68882e4530e343af7134a0a4c6d9d3e1ac0430", "html_url": "https://github.com/rust-lang/rust/commit/6b68882e4530e343af7134a0a4c6d9d3e1ac0430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b68882e4530e343af7134a0a4c6d9d3e1ac0430/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228", "html_url": "https://github.com/rust-lang/rust/commit/9b2a46591ad0cc9dbe7699c17e2ecdb4dc921228"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "32d1a4e55083428dee2923730ce162130a63bb94", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b68882e4530e343af7134a0a4c6d9d3e1ac0430/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b68882e4530e343af7134a0a4c6d9d3e1ac0430/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=6b68882e4530e343af7134a0a4c6d9d3e1ac0430", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                 writer.write_str(name)?;\n                 writer.write_str(\": \")?;\n                 value.fmt(&mut writer)?;\n@@ -189,7 +189,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n                 if self.is_pretty() {\n                     let mut slot = None;\n                     let mut state = Default::default();\n-                    let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                    let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                     writer.write_str(\"..\\n\")?;\n                     self.fmt.write_str(\"}\")\n                 } else {\n@@ -323,7 +323,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                 value.fmt(&mut writer)?;\n                 writer.write_str(\",\\n\")\n             } else {\n@@ -394,7 +394,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                 entry.fmt(&mut writer)?;\n                 writer.write_str(\",\\n\")\n             } else {\n@@ -789,7 +789,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 self.state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut self.state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut self.state);\n                 key.fmt(&mut writer)?;\n                 writer.write_str(\": \")?;\n             } else {\n@@ -845,7 +845,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n \n             if self.is_pretty() {\n                 let mut slot = None;\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut self.state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut self.state);\n                 value.fmt(&mut writer)?;\n                 writer.write_str(\",\\n\")?;\n             } else {"}]}