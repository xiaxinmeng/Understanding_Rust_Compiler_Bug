{"sha": "6ed9bface6f86cc6ddf50aae9f94389695f84184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZDliZmFjZTZmODZjYzZkZGY1MGFhZTlmOTQzODk2OTVmODQxODQ=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-27T14:03:41Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Use `fill` instead of `memset`", "tree": {"sha": "98edf876d2a71df1a858e5f6ea2f20ad785b3e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98edf876d2a71df1a858e5f6ea2f20ad785b3e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ed9bface6f86cc6ddf50aae9f94389695f84184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed9bface6f86cc6ddf50aae9f94389695f84184", "html_url": "https://github.com/rust-lang/rust/commit/6ed9bface6f86cc6ddf50aae9f94389695f84184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ed9bface6f86cc6ddf50aae9f94389695f84184/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f3195a5df18d8a7a886fca17371612f5f6847a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3195a5df18d8a7a886fca17371612f5f6847a3", "html_url": "https://github.com/rust-lang/rust/commit/1f3195a5df18d8a7a886fca17371612f5f6847a3"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "42397de2b63fc0de74544104ac42d3dff3ae9cd4", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9bface6f86cc6ddf50aae9f94389695f84184/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9bface6f86cc6ddf50aae9f94389695f84184/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6ed9bface6f86cc6ddf50aae9f94389695f84184", "patch": "@@ -299,6 +299,7 @@\n #![feature(rustc_private)]\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n+#![feature(slice_fill)]\n #![feature(slice_internals)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]"}, {"sha": "4f821a12e12ee91be3ee6d7f0b2cc1c33bae98b6", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9bface6f86cc6ddf50aae9f94389695f84184/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9bface6f86cc6ddf50aae9f94389695f84184/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=6ed9bface6f86cc6ddf50aae9f94389695f84184", "patch": "@@ -72,9 +72,9 @@ fn add_to_ancillary_data<T>(\n     cmsg_level: libc::c_int,\n     cmsg_type: libc::c_int,\n ) -> bool {\n-    let len = if let Some(len) = source.len().checked_mul(size_of::<T>()) {\n-        if let Ok(len) = u32::try_from(len) {\n-            len\n+    let source_len = if let Some(source_len) = source.len().checked_mul(size_of::<T>()) {\n+        if let Ok(source_len) = u32::try_from(source_len) {\n+            source_len\n         } else {\n             return false;\n         }\n@@ -83,14 +83,21 @@ fn add_to_ancillary_data<T>(\n     };\n \n     unsafe {\n-        let additional_space = libc::CMSG_SPACE(len) as usize;\n-        if *length + additional_space > buffer.len() {\n+        let additional_space = libc::CMSG_SPACE(source_len) as usize;\n+\n+        let new_length = if let Some(new_length) = additional_space.checked_add(*length) {\n+            new_length\n+        } else {\n+            return false;\n+        };\n+\n+        if new_length > buffer.len() {\n             return false;\n         }\n \n-        libc::memset(buffer[*length..].as_mut_ptr().cast(), 0, additional_space);\n+        buffer[*length..new_length].fill(0);\n \n-        *length += additional_space;\n+        *length = new_length;\n \n         let msg = libc::msghdr {\n             msg_name: null_mut(),\n@@ -115,11 +122,11 @@ fn add_to_ancillary_data<T>(\n \n         (*previous_cmsg).cmsg_level = cmsg_level;\n         (*previous_cmsg).cmsg_type = cmsg_type;\n-        (*previous_cmsg).cmsg_len = libc::CMSG_LEN(len) as usize;\n+        (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as usize;\n \n         let data = libc::CMSG_DATA(previous_cmsg).cast();\n \n-        libc::memcpy(data, source.as_ptr().cast(), len as usize);\n+        libc::memcpy(data, source.as_ptr().cast(), source_len as usize);\n     }\n     true\n }"}]}