{"sha": "ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "node_id": "C_kwDOAAsO6NoAKGVmMmUyZjBhMGM2MWFjMjk5ODZhYzFjZWU1YzA2NDA2NzgzYTg5YTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T22:13:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T22:13:13Z"}, "message": "Auto merge of #7693 - F3real:vec2, r=Manishearth\n\nExpand box_vec lint to box_collection\n\nfixed #7451\n\nchangelog: Expand `box_vec` into [`box_collection`], and have it error on all sorts of boxed collections", "tree": {"sha": "e37c5d8e6b854ebc1a6709b60c8a7688a087902d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e37c5d8e6b854ebc1a6709b60c8a7688a087902d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "html_url": "https://github.com/rust-lang/rust/commit/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd54ba637760f301873358bd0fd8106b2d1a9d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd54ba637760f301873358bd0fd8106b2d1a9d9", "html_url": "https://github.com/rust-lang/rust/commit/3cd54ba637760f301873358bd0fd8106b2d1a9d9"}, {"sha": "bb971e0f58da2c670883826f4a4810b03882f0d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb971e0f58da2c670883826f4a4810b03882f0d1", "html_url": "https://github.com/rust-lang/rust/commit/bb971e0f58da2c670883826f4a4810b03882f0d1"}], "stats": {"total": 148, "additions": 99, "deletions": 49}, "files": [{"sha": "59a3dc651bc886113a7f74957678d8c91beb91ae", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -1050,7 +1050,7 @@ Released 2020-11-19\n   [#5913](https://github.com/rust-lang/rust-clippy/pull/5913)\n * Add example of false positive to [`ptr_arg`] docs.\n   [#5885](https://github.com/rust-lang/rust-clippy/pull/5885)\n-* [`box_vec`], [`vec_box`] and [`borrowed_box`]: add link to the documentation of `Box`\n+* [`box_vec`](https://rust-lang.github.io/rust-clippy/master/index.html#box_collection), [`vec_box`] and [`borrowed_box`]: add link to the documentation of `Box`\n   [#6023](https://github.com/rust-lang/rust-clippy/pull/6023)\n \n ## Rust 1.47\n@@ -2570,7 +2570,7 @@ Released 2018-09-13\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n-[`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n+[`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\n [`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow"}, {"sha": "c7e59cb168374204c6baac442708f37b142cfd22", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -956,7 +956,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         transmuting_null::TRANSMUTING_NULL,\n         try_err::TRY_ERR,\n         types::BORROWED_BOX,\n-        types::BOX_VEC,\n+        types::BOX_COLLECTION,\n         types::LINKEDLIST,\n         types::OPTION_OPTION,\n         types::RC_BUFFER,\n@@ -1454,7 +1454,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(transmuting_null::TRANSMUTING_NULL),\n         LintId::of(try_err::TRY_ERR),\n         LintId::of(types::BORROWED_BOX),\n-        LintId::of(types::BOX_VEC),\n+        LintId::of(types::BOX_COLLECTION),\n         LintId::of(types::REDUNDANT_ALLOCATION),\n         LintId::of(types::TYPE_COMPLEXITY),\n         LintId::of(types::VEC_BOX),\n@@ -1792,7 +1792,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(redundant_clone::REDUNDANT_CLONE),\n         LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n-        LintId::of(types::BOX_VEC),\n+        LintId::of(types::BOX_COLLECTION),\n         LintId::of(types::REDUNDANT_ALLOCATION),\n         LintId::of(vec::USELESS_VEC),\n         LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n@@ -2193,6 +2193,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\");\n     ls.register_renamed(\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\");\n     ls.register_renamed(\"clippy::option_and_then_some\", \"clippy::bind_instead_of_map\");\n+    ls.register_renamed(\"clippy::box_vec\", \"clippy::box_collection\");\n     ls.register_renamed(\"clippy::block_in_if_condition_expr\", \"clippy::blocks_in_if_conditions\");\n     ls.register_renamed(\"clippy::block_in_if_condition_stmt\", \"clippy::blocks_in_if_conditions\");\n     ls.register_renamed(\"clippy::option_map_unwrap_or\", \"clippy::map_unwrap_or\");"}, {"sha": "718aea471d9ce1a00969b527327791fbb4bec7b6", "filename": "clippy_lints/src/types/box_collection.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -0,0 +1,50 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_ty_param_diagnostic_item;\n+use rustc_hir::{self as hir, def_id::DefId, QPath};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+use super::BOX_COLLECTION;\n+\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n+    if_chain! {\n+        if Some(def_id) == cx.tcx.lang_items().owned_box();\n+        if let Some(item_type) = get_std_collection(cx, qpath);\n+        then {\n+            let generic = if item_type == \"String\" {\n+                \"\"\n+            } else {\n+                \"<..>\"\n+            };\n+            span_lint_and_help(\n+                cx,\n+                BOX_COLLECTION,\n+                hir_ty.span,\n+                &format!(\n+                    \"you seem to be trying to use `Box<{outer}{generic}>`. Consider using just `{outer}{generic}`\",\n+                    outer=item_type,\n+                    generic = generic),\n+                None,\n+                &format!(\n+                    \"`{outer}{generic}` is already on the heap, `Box<{outer}{generic}>` makes an extra allocation\",\n+                    outer=item_type,\n+                    generic = generic)\n+            );\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<String> {\n+    if is_ty_param_diagnostic_item(cx, qpath, sym::vec_type).is_some() {\n+        Some(String::from(\"Vec\"))\n+    } else if is_ty_param_diagnostic_item(cx, qpath, sym::string_type).is_some() {\n+        Some(String::from(\"String\"))\n+    } else if is_ty_param_diagnostic_item(cx, qpath, sym::hashmap_type).is_some() {\n+        Some(String::from(\"HashMap\"))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "d8b1953457ccc961f4803370e7195540ee168ca3", "filename": "clippy_lints/src/types/box_vec.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3cd54ba637760f301873358bd0fd8106b2d1a9d9/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd54ba637760f301873358bd0fd8106b2d1a9d9/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs?ref=3cd54ba637760f301873358bd0fd8106b2d1a9d9", "patch": "@@ -1,25 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_ty_param_diagnostic_item;\n-use rustc_hir::{self as hir, def_id::DefId, QPath};\n-use rustc_lint::LateContext;\n-use rustc_span::symbol::sym;\n-\n-use super::BOX_VEC;\n-\n-pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if Some(def_id) == cx.tcx.lang_items().owned_box()\n-        && is_ty_param_diagnostic_item(cx, qpath, sym::vec_type).is_some()\n-    {\n-        span_lint_and_help(\n-            cx,\n-            BOX_VEC,\n-            hir_ty.span,\n-            \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n-            None,\n-            \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\",\n-        );\n-        true\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "bbe07db5358cdc805be57a209fc87c22871b24ee", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -1,5 +1,5 @@\n mod borrowed_box;\n-mod box_vec;\n+mod box_collection;\n mod linked_list;\n mod option_option;\n mod rc_buffer;\n@@ -21,12 +21,12 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `Box<Vec<_>>` anywhere in the code.\n+    /// Checks for use of `Box<T>` where T is a collection such as Vec anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// ### Why is this bad?\n-    /// `Vec` already keeps its contents in a separate area on\n-    /// the heap. So if you `Box` it, you just add another level of indirection\n+    /// Collections already keeps their contents in a separate area on\n+    /// the heap. So if you `Box` them, you just add another level of indirection\n     /// without any benefit whatsoever.\n     ///\n     /// ### Example\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     ///     values: Vec<Foo>,\n     /// }\n     /// ```\n-    pub BOX_VEC,\n+    pub BOX_COLLECTION,\n     perf,\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n@@ -298,7 +298,7 @@ pub struct Types {\n     avoid_breaking_exported_api: bool,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n+impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n@@ -447,7 +447,7 @@ impl Types {\n                         // in `clippy_lints::utils::conf.rs`\n \n                         let mut triggered = false;\n-                        triggered |= box_vec::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= box_collection::check(cx, hir_ty, qpath, def_id);\n                         triggered |= redundant_allocation::check(cx, hir_ty, qpath, def_id);\n                         triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n                         triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);"}, {"sha": "1e0447239be99813cb7777c9e929fa600e86c71c", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -136,7 +136,7 @@ macro_rules! define_Conf {\n }\n \n define_Conf! {\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_VEC, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),"}, {"sha": "e00f061f28a94b67a91f87d105b43a4131d68bc0", "filename": "tests/ui/box_collection.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/tests%2Fui%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/tests%2Fui%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.rs?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -6,6 +6,8 @@\n     unused\n )]\n \n+use std::collections::HashMap;\n+\n macro_rules! boxit {\n     ($init:expr, $x:ty) => {\n         let _: Box<$x> = Box::new($init);\n@@ -15,20 +17,26 @@ macro_rules! boxit {\n fn test_macro() {\n     boxit!(Vec::new(), Vec<u8>);\n }\n+\n fn test(foo: Box<Vec<bool>>) {}\n \n fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n     // pass if #31 is fixed\n     foo(vec![1, 2, 3])\n }\n \n+fn test3(foo: Box<String>) {}\n+\n+fn test4(foo: Box<HashMap<String, String>>) {}\n+\n fn test_local_not_linted() {\n     let _: Box<Vec<bool>>;\n }\n \n // All of these test should be allowed because they are part of the\n // public api and `avoid_breaking_exported_api` is `false` by default.\n pub fn pub_test(foo: Box<Vec<bool>>) {}\n+\n pub fn pub_test_ret() -> Box<Vec<bool>> {\n     Box::new(Vec::new())\n }", "previous_filename": "tests/ui/box_vec.rs"}, {"sha": "6de85d05a99f32b59eac0905a7f19967d8419f6e", "filename": "tests/ui/box_collection.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/tests%2Fui%2Fbox_collection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef2e2f0a0c61ac29986ac1cee5c06406783a89a2/tests%2Fui%2Fbox_collection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.stderr?ref=ef2e2f0a0c61ac29986ac1cee5c06406783a89a2", "patch": "@@ -0,0 +1,27 @@\n+error: you seem to be trying to use `Box<Vec<..>>`. Consider using just `Vec<..>`\n+  --> $DIR/box_collection.rs:21:14\n+   |\n+LL | fn test(foo: Box<Vec<bool>>) {}\n+   |              ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::box-collection` implied by `-D warnings`\n+   = help: `Vec<..>` is already on the heap, `Box<Vec<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<String>`. Consider using just `String`\n+  --> $DIR/box_collection.rs:28:15\n+   |\n+LL | fn test3(foo: Box<String>) {}\n+   |               ^^^^^^^^^^^\n+   |\n+   = help: `String` is already on the heap, `Box<String>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<HashMap<..>>`. Consider using just `HashMap<..>`\n+  --> $DIR/box_collection.rs:30:15\n+   |\n+LL | fn test4(foo: Box<HashMap<String, String>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `HashMap<..>` is already on the heap, `Box<HashMap<..>>` makes an extra allocation\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "58c1f13fb877b1ba77deda63048b0ed41bf36314", "filename": "tests/ui/box_vec.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3cd54ba637760f301873358bd0fd8106b2d1a9d9/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cd54ba637760f301873358bd0fd8106b2d1a9d9/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=3cd54ba637760f301873358bd0fd8106b2d1a9d9", "patch": "@@ -1,11 +0,0 @@\n-error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n-  --> $DIR/box_vec.rs:18:14\n-   |\n-LL | fn test(foo: Box<Vec<bool>>) {}\n-   |              ^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::box-vec` implied by `-D warnings`\n-   = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\n-\n-error: aborting due to previous error\n-"}]}