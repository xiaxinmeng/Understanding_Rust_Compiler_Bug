{"sha": "3c1a1f3643efb57b9bba515fc753d84ce39819e0", "node_id": "C_kwDOAAsO6NoAKDNjMWExZjM2NDNlZmI1N2I5YmJhNTE1ZmM3NTNkODRjZTM5ODE5ZTA", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-11-09T23:22:48Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `expect.rs`", "tree": {"sha": "b0ba1d19e0ae4ee07bd8a755d94f8d08d3cb5e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ba1d19e0ae4ee07bd8a755d94f8d08d3cb5e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c1a1f3643efb57b9bba515fc753d84ce39819e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1a1f3643efb57b9bba515fc753d84ce39819e0", "html_url": "https://github.com/rust-lang/rust/commit/3c1a1f3643efb57b9bba515fc753d84ce39819e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c1a1f3643efb57b9bba515fc753d84ce39819e0/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffecd2059316e2eb07ee0983e62f24027e52704", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffecd2059316e2eb07ee0983e62f24027e52704", "html_url": "https://github.com/rust-lang/rust/commit/6ffecd2059316e2eb07ee0983e62f24027e52704"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "c0e62a8d9fc0998a81e320c66c43342ffcd9967d", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3c1a1f3643efb57b9bba515fc753d84ce39819e0/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1a1f3643efb57b9bba515fc753d84ce39819e0/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=3c1a1f3643efb57b9bba515fc753d84ce39819e0", "patch": "@@ -1,8 +1,9 @@\n-use crate::builtin;\n-use rustc_errors::fluent;\n-use rustc_hir::HirId;\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::lints::Expectation;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::{lint::LintExpectation, ty::TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::lint::builtin::UNFULFILLED_LINT_EXPECTATIONS;\n use rustc_session::lint::LintExpectationId;\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n@@ -28,34 +29,15 @@ fn check_expectations(tcx: TyCtxt<'_>, tool_filter: Option<Symbol>) {\n             if !fulfilled_expectations.contains(&id)\n                 && tool_filter.map_or(true, |filter| expectation.lint_tool == Some(filter))\n             {\n-                emit_unfulfilled_expectation_lint(tcx, *hir_id, expectation);\n+                tcx.emit_spanned_lint(\n+                    UNFULFILLED_LINT_EXPECTATIONS,\n+                    *hir_id,\n+                    expectation.emission_span,\n+                    Expectation { expectation },\n+                );\n             }\n         } else {\n             unreachable!(\"at this stage all `LintExpectationId`s are stable\");\n         }\n     }\n }\n-\n-fn emit_unfulfilled_expectation_lint(\n-    tcx: TyCtxt<'_>,\n-    hir_id: HirId,\n-    expectation: &LintExpectation,\n-) {\n-    tcx.struct_span_lint_hir(\n-        builtin::UNFULFILLED_LINT_EXPECTATIONS,\n-        hir_id,\n-        expectation.emission_span,\n-        fluent::lint_expectation,\n-        |lint| {\n-            if let Some(rationale) = expectation.reason {\n-                lint.note(rationale.as_str());\n-            }\n-\n-            if expectation.is_unfulfilled_lint_expectations {\n-                lint.note(fluent::note);\n-            }\n-\n-            lint\n-        },\n-    );\n-}"}, {"sha": "782cf668b290b98ce2b9acdf0e074e1ce82f76b0", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3c1a1f3643efb57b9bba515fc753d84ce39819e0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1a1f3643efb57b9bba515fc753d84ce39819e0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=3c1a1f3643efb57b9bba515fc753d84ce39819e0", "patch": "@@ -3,7 +3,10 @@ use std::num::NonZeroU32;\n use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage};\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n-use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n+use rustc_middle::{\n+    lint::LintExpectation,\n+    ty::{Predicate, Ty, TyCtxt},\n+};\n use rustc_span::{edition::Edition, symbol::Ident, Span, Symbol};\n \n use crate::{errors::OverruledAttributeSub, LateContext};\n@@ -304,6 +307,32 @@ pub struct EnumIntrinsicsMemVariant<'a> {\n     pub ty_param: Ty<'a>,\n }\n \n+// expect.rs\n+pub struct Expectation<'a> {\n+    pub expectation: &'a LintExpectation,\n+}\n+\n+impl<'a> DecorateLint<'a, ()> for Expectation<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n+        if let Some(rationale) = self.expectation.reason {\n+            diag.note(rationale.as_str());\n+        }\n+\n+        if self.expectation.is_unfulfilled_lint_expectations {\n+            diag.note(fluent::note);\n+        }\n+\n+        diag\n+    }\n+\n+    fn msg(&self) -> DiagnosticMessage {\n+        fluent::lint_expectation\n+    }\n+}\n+\n // internal.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_default_hash_types)]"}]}