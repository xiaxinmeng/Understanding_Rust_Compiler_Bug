{"sha": "8df945c4717ffaf923b57bf30c473df6fc98bc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZjk0NWM0NzE3ZmZhZjkyM2I1N2JmMzBjNDczZGY2ZmM5OGJjODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T10:10:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T10:10:08Z"}, "message": "Auto merge of #87269 - GuillaumeGomez:rollup-qukedv0, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #86230 (Add --nocapture option to rustdoc)\n - #87210 (Rustdoc accessibility: make the sidebar headers actual headers)\n - #87227 (Move asm! and global_asm! to core::arch)\n - #87236 (Simplify command-line argument initialization on unix)\n - #87251 (Fix \"item info\" width)\n - #87256 (Extend HIR-based WF checking to associated type defaults)\n - #87259 (triagebot shortcut config)\n - #87268 (Don't create references to uninitialized data in `List::from_arena`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8929ee5e23a7bd91146213570268566f37deb884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8929ee5e23a7bd91146213570268566f37deb884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8df945c4717ffaf923b57bf30c473df6fc98bc85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8df945c4717ffaf923b57bf30c473df6fc98bc85", "html_url": "https://github.com/rust-lang/rust/commit/8df945c4717ffaf923b57bf30c473df6fc98bc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8df945c4717ffaf923b57bf30c473df6fc98bc85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f08223a90b71f59e5dc5f38e384a49a76c8452", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f08223a90b71f59e5dc5f38e384a49a76c8452", "html_url": "https://github.com/rust-lang/rust/commit/83f08223a90b71f59e5dc5f38e384a49a76c8452"}, {"sha": "6cb69ea790ad635acb3a8d4826e03ac29ca10351", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb69ea790ad635acb3a8d4826e03ac29ca10351", "html_url": "https://github.com/rust-lang/rust/commit/6cb69ea790ad635acb3a8d4826e03ac29ca10351"}], "stats": {"total": 365, "additions": 239, "deletions": 126}, "files": [{"sha": "1dceda6c7aad0f9e81353601732ef047139ac2ff", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -63,17 +63,17 @@ impl<T: Copy> List<T> {\n \n         let (layout, _offset) =\n             Layout::new::<usize>().extend(Layout::for_value::<[T]>(slice)).unwrap();\n-        let mem = arena.dropless.alloc_raw(layout);\n+        let mem = arena.dropless.alloc_raw(layout) as *mut List<T>;\n         unsafe {\n-            let result = &mut *(mem as *mut List<T>);\n             // Write the length\n-            result.len = slice.len();\n+            ptr::addr_of_mut!((*mem).len).write(slice.len());\n \n             // Write the elements\n-            let arena_slice = slice::from_raw_parts_mut(result.data.as_mut_ptr(), result.len);\n-            arena_slice.copy_from_slice(slice);\n+            ptr::addr_of_mut!((*mem).data)\n+                .cast::<T>()\n+                .copy_from_nonoverlapping(slice.as_ptr(), slice.len());\n \n-            result\n+            &mut *mem\n         }\n     }\n "}, {"sha": "a8ec7b79e571f284141e7343e525a86ea6faba56", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -121,7 +121,11 @@ fn diagnostic_hir_wf_check<'tcx>(\n \n     let ty = match tcx.hir().get(hir_id) {\n         hir::Node::ImplItem(item) => match item.kind {\n-            hir::ImplItemKind::TyAlias(ref ty) => Some(ty),\n+            hir::ImplItemKind::TyAlias(ty) => Some(ty),\n+            _ => None,\n+        },\n+        hir::Node::TraitItem(item) => match item.kind {\n+            hir::TraitItemKind::Type(_, ty) => ty,\n             _ => None,\n         },\n         _ => None,"}, {"sha": "540cdf124ee9cf5f1a0c12394b61e9e120c6eddf", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -316,5 +316,35 @@ pub mod primitive;\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n mod core_arch;\n \n+#[doc = include_str!(\"../../stdarch/crates/core_arch/src/core_arch_docs.md\")]\n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-pub use core_arch::arch;\n+pub mod arch {\n+    #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+    pub use crate::core_arch::arch::*;\n+\n+    /// Inline assembly.\n+    ///\n+    /// Read the [unstable book] for the usage.\n+    ///\n+    /// [unstable book]: ../../unstable-book/library-features/asm.html\n+    #[unstable(\n+        feature = \"asm\",\n+        issue = \"72016\",\n+        reason = \"inline assembly is not stable enough for use and is subject to change\"\n+    )]\n+    #[rustc_builtin_macro]\n+    pub macro asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n+        /* compiler built-in */\n+    }\n+\n+    /// Module-level inline assembly.\n+    #[unstable(\n+        feature = \"global_asm\",\n+        issue = \"35119\",\n+        reason = \"`global_asm!` is not stable enough for use and is subject to change\"\n+    )]\n+    #[rustc_builtin_macro]\n+    pub macro global_asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n+        /* compiler built-in */\n+    }\n+}"}, {"sha": "3ca8f27c79ab7f60b11610cdb50595a1b64e2efa", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -1312,27 +1312,6 @@ pub(crate) mod builtin {\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n     }\n \n-    /// Inline assembly.\n-    ///\n-    /// Read the [unstable book] for the usage.\n-    ///\n-    /// [unstable book]: ../unstable-book/library-features/asm.html\n-    #[unstable(\n-        feature = \"asm\",\n-        issue = \"72016\",\n-        reason = \"inline assembly is not stable enough for use and is subject to change\"\n-    )]\n-    #[rustc_builtin_macro]\n-    #[macro_export]\n-    macro_rules! asm {\n-        (\"assembly template\",\n-            $(operands,)*\n-            $(options($(option),*))?\n-        ) => {\n-            /* compiler built-in */\n-        };\n-    }\n-\n     /// LLVM-style inline assembly.\n     ///\n     /// Read the [unstable book] for the usage.\n@@ -1355,23 +1334,6 @@ pub(crate) mod builtin {\n         };\n     }\n \n-    /// Module-level inline assembly.\n-    #[unstable(\n-        feature = \"global_asm\",\n-        issue = \"35119\",\n-        reason = \"`global_asm!` is not stable enough for use and is subject to change\"\n-    )]\n-    #[rustc_builtin_macro]\n-    #[macro_export]\n-    macro_rules! global_asm {\n-        (\"assembly template\",\n-            $(operands,)*\n-            $(options($(option),*))?\n-        ) => {\n-            /* compiler built-in */\n-        };\n-    }\n-\n     /// Prints passed tokens into the standard output.\n     #[unstable(\n         feature = \"log_syntax\","}, {"sha": "6b51ef5b0122d5ccbd89dcce30732a4e23b8a0b2", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -55,11 +55,27 @@ pub use crate::hash::macros::Hash;\n #[allow(deprecated)]\n #[doc(no_inline)]\n pub use crate::{\n-    asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n-    module_path, option_env, stringify, trace_macros,\n+    assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n+    format_args_nl, include, include_bytes, include_str, line, llvm_asm, log_syntax, module_path,\n+    option_env, stringify, trace_macros,\n };\n \n+#[unstable(\n+    feature = \"asm\",\n+    issue = \"72016\",\n+    reason = \"inline assembly is not stable enough for use and is subject to change\"\n+)]\n+#[doc(no_inline)]\n+pub use crate::arch::asm;\n+\n+#[unstable(\n+    feature = \"global_asm\",\n+    issue = \"35119\",\n+    reason = \"`global_asm!` is not stable enough for use and is subject to change\"\n+)]\n+#[doc(no_inline)]\n+pub use crate::arch::global_asm;\n+\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated, deprecated_in_future)]\n #[doc(no_inline)]"}, {"sha": "cfbfe7cc191605497cfb9bf0302d9b6ac7a7c159", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -556,9 +556,9 @@ pub use core::{\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n pub use core::{\n-    asm, assert, assert_matches, cfg, column, compile_error, concat, concat_idents, env, file,\n-    format_args, format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm,\n-    log_syntax, module_path, option_env, stringify, trace_macros,\n+    assert, assert_matches, cfg, column, compile_error, concat, concat_idents, env, file,\n+    format_args, format_args_nl, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]"}, {"sha": "772044f0149200684a69855dce455d52a8c8c187", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -39,12 +39,28 @@ pub use crate::result::Result::{self, Err, Ok};\n #[allow(deprecated)]\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n-    asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n-    module_path, option_env, stringify, trace_macros, Clone, Copy, Debug, Default, Eq, Hash, Ord,\n-    PartialEq, PartialOrd,\n+    assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n+    format_args_nl, include, include_bytes, include_str, line, llvm_asm, log_syntax, module_path,\n+    option_env, stringify, trace_macros, Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq,\n+    PartialOrd,\n };\n \n+#[unstable(\n+    feature = \"asm\",\n+    issue = \"72016\",\n+    reason = \"inline assembly is not stable enough for use and is subject to change\"\n+)]\n+#[doc(no_inline)]\n+pub use core::prelude::v1::asm;\n+\n+#[unstable(\n+    feature = \"global_asm\",\n+    issue = \"35119\",\n+    reason = \"`global_asm!` is not stable enough for use and is subject to change\"\n+)]\n+#[doc(no_inline)]\n+pub use core::prelude::v1::global_asm;\n+\n // FIXME: Attribute and internal derive macros are not documented because for them rustdoc generates\n // dead links which fail link checker testing.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "ad93fa610c4819fe7d7c7c4acf32a67d4ab978a7", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -14,11 +14,6 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     imp::init(argc, argv)\n }\n \n-/// One-time global cleanup.\n-pub unsafe fn cleanup() {\n-    imp::cleanup()\n-}\n-\n /// Returns the command line arguments\n pub fn args() -> Args {\n     imp::args()\n@@ -82,16 +77,10 @@ mod imp {\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n \n-    use crate::sys_common::mutex::StaticMutex;\n-\n     static ARGC: AtomicIsize = AtomicIsize::new(0);\n     static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());\n-    // We never call `ENV_LOCK.init()`, so it is UB to attempt to\n-    // acquire this mutex reentrantly!\n-    static LOCK: StaticMutex = StaticMutex::new();\n \n     unsafe fn really_init(argc: isize, argv: *const *const u8) {\n-        let _guard = LOCK.lock();\n         ARGC.store(argc, Ordering::Relaxed);\n         ARGV.store(argv as *mut _, Ordering::Relaxed);\n     }\n@@ -127,21 +116,16 @@ mod imp {\n         init_wrapper\n     };\n \n-    pub unsafe fn cleanup() {\n-        let _guard = LOCK.lock();\n-        ARGC.store(0, Ordering::Relaxed);\n-        ARGV.store(ptr::null_mut(), Ordering::Relaxed);\n-    }\n-\n     pub fn args() -> Args {\n         Args { iter: clone().into_iter() }\n     }\n \n     fn clone() -> Vec<OsString> {\n         unsafe {\n-            let _guard = LOCK.lock();\n-            let argc = ARGC.load(Ordering::Relaxed);\n+            // Load ARGC and ARGV without a lock. If the store to either ARGV or\n+            // ARGC isn't visible yet, we'll return an empty argument list.\n             let argv = ARGV.load(Ordering::Relaxed);\n+            let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n             (0..argc)\n                 .map(|i| {\n                     let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);\n@@ -159,8 +143,6 @@ mod imp {\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n \n-    pub fn cleanup() {}\n-\n     #[cfg(target_os = \"macos\")]\n     pub fn args() -> Args {\n         use crate::os::unix::prelude::*;"}, {"sha": "9e553ec7682b1a3b82a98f8636232ddcb35501fd", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -123,7 +123,6 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n // SAFETY: must be called only once during runtime cleanup.\n // NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {\n-    args::cleanup();\n     stack_overflow::cleanup();\n }\n "}, {"sha": "c8af369a9695e7f6f9f82985a7e32181f25c6f02", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -417,3 +417,10 @@ This flag is **deprecated** and **has no effect**.\n Rustdoc only supports Rust source code and Markdown input formats. If the\n file ends in `.md` or `.markdown`, `rustdoc` treats it as a Markdown file.\n Otherwise, it assumes that the input file is Rust.\n+\n+## `--nocapture`\n+\n+When this flag is used with `--test`, the output (stdout and stderr) of your tests won't be\n+captured by rustdoc. Instead, the output will be directed to your terminal,\n+as if you had run the test executable manually. This is especially useful\n+for debugging your tests!"}, {"sha": "adbdde0d92cd6034fe7ea78c33dc7dec546757c2", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -156,6 +156,8 @@ crate struct Options {\n     crate run_check: bool,\n     /// Whether doctests should emit unused externs\n     crate json_unused_externs: bool,\n+    /// Whether to skip capturing stdout and stderr of tests.\n+    crate nocapture: bool,\n }\n \n impl fmt::Debug for Options {\n@@ -199,6 +201,7 @@ impl fmt::Debug for Options {\n             .field(\"enable-per-target-ignores\", &self.enable_per_target_ignores)\n             .field(\"run_check\", &self.run_check)\n             .field(\"no_run\", &self.no_run)\n+            .field(\"nocapture\", &self.nocapture)\n             .finish()\n     }\n }\n@@ -627,6 +630,7 @@ impl Options {\n         let run_check = matches.opt_present(\"check\");\n         let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n         let show_type_layout = matches.opt_present(\"show-type-layout\");\n+        let nocapture = matches.opt_present(\"nocapture\");\n \n         let (lint_opts, describe_lints, lint_cap, _) =\n             get_cmd_lint_options(matches, error_format, &debugging_opts);\n@@ -665,6 +669,7 @@ impl Options {\n             test_builder,\n             run_check,\n             no_run,\n+            nocapture,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "5ce7c49278d23baea4b41267e8931ff2a0f9af42", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -107,6 +107,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let mut test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n+    let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n     let json_unused_externs = options.json_unused_externs;\n \n@@ -166,6 +167,9 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     };\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n+    if nocapture {\n+        test_args.push(\"--nocapture\".to_string());\n+    }\n \n     test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n \n@@ -456,7 +460,16 @@ fn run_test(\n         cmd.current_dir(run_directory);\n     }\n \n-    match cmd.output() {\n+    let result = if options.nocapture {\n+        cmd.status().map(|status| process::Output {\n+            status,\n+            stdout: Vec::new(),\n+            stderr: Vec::new(),\n+        })\n+    } else {\n+        cmd.output()\n+    };\n+    match result {\n         Err(e) => return Err(TestFailure::ExecutionError(e)),\n         Ok(out) => {\n             if should_panic && out.status.success() {"}, {"sha": "b6c3220901f06ad4289f50311357ebbf525084dc", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -539,7 +539,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         };\n         let sidebar = if let Some(ref version) = self.cache.crate_version {\n             format!(\n-                \"<p class=\\\"location\\\">Crate {}</p>\\\n+                \"<h2 class=\\\"location\\\">Crate {}</h2>\\\n                      <div class=\\\"block version\\\">\\\n                          <p>Version {}</p>\\\n                      </div>\\\n@@ -567,7 +567,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         page.root_path = \"./\";\n \n         let mut style_files = self.shared.style_files.clone();\n-        let sidebar = \"<p class=\\\"location\\\">Settings</p><div class=\\\"sidebar-elems\\\"></div>\";\n+        let sidebar = \"<h2 class=\\\"location\\\">Settings</h2><div class=\\\"sidebar-elems\\\"></div>\";\n         style_files.push(StylePath { path: PathBuf::from(\"settings.css\"), disabled: false });\n         let v = layout::render(\n             &self.shared.templates,"}, {"sha": "68c59612ccc448d58c4c508ada7f1e675e3c8da4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -1654,7 +1654,7 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     {\n         write!(\n             buffer,\n-            \"<p class=\\\"location\\\">{}{}</p>\",\n+            \"<h2 class=\\\"location\\\">{}{}</h2>\",\n             match *it.kind {\n                 clean::StructItem(..) => \"Struct \",\n                 clean::TraitItem(..) => \"Trait \",\n@@ -1718,7 +1718,7 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     // to navigate the documentation (though slightly inefficiently).\n \n     if !it.is_mod() {\n-        buffer.write_str(\"<p class=\\\"location\\\">Other items in<br>\");\n+        buffer.write_str(\"<h2 class=\\\"location\\\">Other items in<br>\");\n         for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n             if i > 0 {\n                 buffer.write_str(\"::<wbr>\");\n@@ -1730,7 +1730,7 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n                 *name\n             );\n         }\n-        buffer.write_str(\"</p>\");\n+        buffer.write_str(\"</h2>\");\n     }\n \n     // Sidebar refers to the enclosing module, not this module.\n@@ -1841,7 +1841,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 ret.sort();\n \n                 out.push_str(\n-                    \"<a class=\\\"sidebar-title\\\" href=\\\"#implementations\\\">Methods</a>\\\n+                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementations\\\">Methods</a></h3>\\\n                      <div class=\\\"sidebar-links\\\">\",\n                 );\n                 for line in ret {\n@@ -1906,24 +1906,24 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n \n             if !concrete_format.is_empty() {\n                 out.push_str(\n-                    \"<a class=\\\"sidebar-title\\\" href=\\\"#trait-implementations\\\">\\\n-                        Trait Implementations</a>\",\n+                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#trait-implementations\\\">\\\n+                        Trait Implementations</a></h3>\",\n                 );\n                 write_sidebar_links(out, concrete_format);\n             }\n \n             if !synthetic_format.is_empty() {\n                 out.push_str(\n-                    \"<a class=\\\"sidebar-title\\\" href=\\\"#synthetic-implementations\\\">\\\n-                        Auto Trait Implementations</a>\",\n+                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#synthetic-implementations\\\">\\\n+                        Auto Trait Implementations</a></h3>\",\n                 );\n                 write_sidebar_links(out, synthetic_format);\n             }\n \n             if !blanket_format.is_empty() {\n                 out.push_str(\n-                    \"<a class=\\\"sidebar-title\\\" href=\\\"#blanket-implementations\\\">\\\n-                        Blanket Implementations</a>\",\n+                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#blanket-implementations\\\">\\\n+                        Blanket Implementations</a></h3>\",\n                 );\n                 write_sidebar_links(out, blanket_format);\n             }\n@@ -1975,7 +1975,7 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n             if !ret.is_empty() {\n                 write!(\n                     out,\n-                    \"<a class=\\\"sidebar-title\\\" href=\\\"#deref-methods\\\">Methods from {}&lt;Target={}&gt;</a>\",\n+                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#deref-methods\\\">Methods from {}&lt;Target={}&gt;</a></h3>\",\n                     Escape(&format!(\"{:#}\", impl_.inner_impl().trait_.as_ref().unwrap().print(cx))),\n                     Escape(&format!(\"{:#}\", real_target.print(cx))),\n                 );\n@@ -1998,7 +1998,7 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     if !fields.is_empty() {\n         if let CtorKind::Fictive = s.struct_type {\n             sidebar.push_str(\n-                \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n+                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n                 <div class=\\\"sidebar-links\\\">\",\n             );\n \n@@ -2075,8 +2075,8 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<a class=\\\"sidebar-title\\\" href=\\\"#associated-types\\\">\\\n-            Associated Types</a><div class=\\\"sidebar-links\\\">\",\n+        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-types\\\">\\\n+            Associated Types</a></h3><div class=\\\"sidebar-links\\\">\",\n         |m| m.is_associated_type(),\n         |out, sym| write!(out, \"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n         \"</div>\",\n@@ -2085,8 +2085,8 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<a class=\\\"sidebar-title\\\" href=\\\"#associated-const\\\">\\\n-            Associated Constants</a><div class=\\\"sidebar-links\\\">\",\n+        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-const\\\">\\\n+            Associated Constants</a></h3><div class=\\\"sidebar-links\\\">\",\n         |m| m.is_associated_const(),\n         |out, sym| write!(out, \"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n         \"</div>\",\n@@ -2095,8 +2095,8 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<a class=\\\"sidebar-title\\\" href=\\\"#required-methods\\\">\\\n-            Required Methods</a><div class=\\\"sidebar-links\\\">\",\n+        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#required-methods\\\">\\\n+            Required Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n         |m| m.is_ty_method(),\n         |out, sym| write!(out, \"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n         \"</div>\",\n@@ -2105,8 +2105,8 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<a class=\\\"sidebar-title\\\" href=\\\"#provided-methods\\\">\\\n-            Provided Methods</a><div class=\\\"sidebar-links\\\">\",\n+        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#provided-methods\\\">\\\n+            Provided Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n         |m| m.is_method(),\n         |out, sym| write!(out, \"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n         \"</div>\",\n@@ -2128,8 +2128,8 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n         if !res.is_empty() {\n             res.sort();\n             buf.push_str(\n-                \"<a class=\\\"sidebar-title\\\" href=\\\"#foreign-impls\\\">\\\n-                    Implementations on Foreign Types</a>\\\n+                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#foreign-impls\\\">\\\n+                    Implementations on Foreign Types</a></h3>\\\n                  <div class=\\\"sidebar-links\\\">\",\n             );\n             for (name, id) in res.into_iter() {\n@@ -2141,11 +2141,11 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n     sidebar_assoc_items(cx, buf, it);\n \n-    buf.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#implementors\\\">Implementors</a>\");\n+    buf.push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementors\\\">Implementors</a></h3>\");\n     if t.is_auto {\n         buf.push_str(\n-            \"<a class=\\\"sidebar-title\\\" \\\n-                href=\\\"#synthetic-implementors\\\">Auto Implementors</a>\",\n+            \"<h3 class=\\\"sidebar-title\\\"><a \\\n+                href=\\\"#synthetic-implementors\\\">Auto Implementors</a></h3>\",\n         );\n     }\n \n@@ -2188,7 +2188,7 @@ fn sidebar_union(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, u: &clean\n \n     if !fields.is_empty() {\n         sidebar.push_str(\n-            \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n+            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n             <div class=\\\"sidebar-links\\\">\",\n         );\n \n@@ -2220,7 +2220,7 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n     if !variants.is_empty() {\n         variants.sort_unstable();\n         sidebar.push_str(&format!(\n-            \"<a class=\\\"sidebar-title\\\" href=\\\"#variants\\\">Variants</a>\\\n+            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#variants\\\">Variants</a></h3>\\\n              <div class=\\\"sidebar-links\\\">{}</div>\",\n             variants.join(\"\"),\n         ));"}, {"sha": "e608ad05b17dac04606b1f3e91343c59dfe0371d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -342,6 +342,8 @@ nav.sub {\n \tmargin: 30px 10px 20px 10px;\n \ttext-align: center;\n \tword-wrap: break-word;\n+\tfont-weight: inherit;\n+\tpadding: 0;\n }\n \n .sidebar .version {\n@@ -394,6 +396,8 @@ nav.sub {\n \ttext-align: center;\n \tfont-size: 17px;\n \tmargin-bottom: 5px;\n+\tfont-weight: inherit;\n+\tpadding: 0;\n }\n \n .sidebar-links {\n@@ -921,6 +925,9 @@ body.blur > :not(#help) {\n \tpadding: 0 20px 20px 17px;;\n }\n \n+.item-info .stab {\n+\tdisplay: table;\n+}\n .stab {\n \tborder-width: 1px;\n \tborder-style: solid;"}, {"sha": "19deaa11388d8601d012b03a6299d3ba44939506", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -604,6 +604,9 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"show-type-layout\", |o| {\n             o.optflagmulti(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n         }),\n+        unstable(\"nocapture\", |o| {\n+            o.optflag(\"\", \"nocapture\", \"Don't capture stdout and stderr of tests\")\n+        }),\n     ]\n }\n "}, {"sha": "6c8b95c04c9e4be674830bf15916feed5b805e3c", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -136,6 +136,9 @@ crate fn test(mut options: Options) -> Result<(), String> {\n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n+    if options.nocapture {\n+        options.test_args.push(\"--nocapture\".to_string());\n+    }\n     test::test_main(\n         &options.test_args,\n         collector.tests,"}, {"sha": "44b79e60912c63eb2670e6c049025c1184daec7f", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1,7 @@\n+// This test ensures that the item information don't take 100% of the width if unnecessary.\n+goto: file://|DOC_PATH|/lib2/struct.Foo.html\n+// We set a fixed size so there is no chance of \"random\" resize.\n+size: (1100, 800)\n+// We check that \".item-info\" is bigger than its content.\n+assert-css: (\".item-info\", {\"width\": \"807px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"343px\"})"}, {"sha": "7138f91667573bcda4ae8c425139a603cfb6af70", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -13,7 +13,7 @@ click: \".sidebar-menu\"\n assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n // Force the sidebar open by focusing a link inside it.\n // This makes it easier for keyboard users to get to it.\n-focus: \".sidebar-title\"\n+focus: \".sidebar-title a\"\n assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})\n // When we tab out of the sidebar, close it.\n focus: \".search-input\""}, {"sha": "cd00348cad3d1b5b81ce24ea8706fcce9567fb3f", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -1,5 +1,7 @@\n // ignore-tidy-linelength\n \n+#![feature(doc_cfg)]\n+\n pub mod module {\n     pub mod sub_module {\n         pub mod sub_sub_module {\n@@ -14,6 +16,7 @@ pub fn foobar() {}\n \n pub type Alias = u32;\n \n+#[doc(cfg(feature = \"foo-method\"))]\n pub struct Foo {\n     pub x: Alias,\n }"}, {"sha": "7706bd1f3e39ca19937fe6ce90b4ebe6251ae54f", "filename": "src/test/rustdoc-ui/nocapture-fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// compile-flags:--test -Zunstable-options --nocapture\n+// normalize-stderr-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+\n+/// ```compile_fail\n+/// fn foo() {\n+///     Input: 123\n+/// }\n+/// ```\n+pub struct Foo;"}, {"sha": "16a5ac47cd2579401e3c06df48f346751e207156", "filename": "src/test/rustdoc-ui/nocapture-fail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1,18 @@\n+error: struct literal body without path\n+  --> $DIR/nocapture-fail.rs:8:10\n+   |\n+LL |   fn foo() {\n+   |  __________^\n+LL | |     Input: 123\n+LL | | }\n+   | |_^\n+   |\n+help: you might have forgotten to add the struct literal inside the block\n+   |\n+LL | fn foo() { SomeStruct {\n+LL |     Input: 123\n+LL | } }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "754f77db53ca3a535ad4a25565a389499eb89d53", "filename": "src/test/rustdoc-ui/nocapture-fail.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stdout?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/nocapture-fail.rs - Foo (line 7) - compile fail ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "321f5ca08eded169d0bb4f4ca150804df0f71d2c", "filename": "src/test/rustdoc-ui/nocapture.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// compile-flags:--test -Zunstable-options --nocapture\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+\n+/// ```\n+/// println!(\"hello!\");\n+/// eprintln!(\"stderr\");\n+/// ```\n+pub struct Foo;"}, {"sha": "af6415db3c72404d1adfed96a44dde1c9af0f416", "filename": "src/test/rustdoc-ui/nocapture.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture.stderr?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1 @@\n+stderr"}, {"sha": "4880e75da706227b5b992429e9361f1d871f3066", "filename": "src/test/rustdoc-ui/nocapture.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc-ui%2Fnocapture.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture.stdout?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -0,0 +1,7 @@\n+\n+running 1 test\n+hello!\n+test $DIR/nocapture.rs - Foo (line 6) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "d42ff384b29b83863eb9b9aa81600bb74930d634", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -6,7 +6,7 @@\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_b\"]' 'pub fn foo_b(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"][@href=\"#deref-methods\"]' 'Methods from Deref<Target=FooJ>'\n+// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods\"]' 'Methods from Deref<Target=FooJ>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'"}, {"sha": "d63ab346045eec60f1c8d7849037ac33de9fbd98", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -4,6 +4,6 @@\n pub struct Foo;\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#trait-implementations\"]' 'Trait Implementations'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n // @has - '//*[@class=\"sidebar-links\"]/a' '!Sync'\n impl !Sync for Foo {}"}, {"sha": "5da660b4df304a5ab3fa4b3b40346c5175889623", "filename": "src/test/rustdoc/sidebar-items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-items.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n // @has foo/trait.Foo.html\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#required-methods\"]' 'Required Methods'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#required-methods\"]' 'Required Methods'\n // @has - '//*[@class=\"sidebar-links\"]/a' 'bar'\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#provided-methods\"]' 'Provided Methods'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#provided-methods\"]' 'Provided Methods'\n // @has - '//*[@class=\"sidebar-links\"]/a' 'foo'\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#associated-const\"]' 'Associated Constants'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#associated-const\"]' 'Associated Constants'\n // @has - '//*[@class=\"sidebar-links\"]/a' 'BAR'\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#associated-types\"]' 'Associated Types'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#associated-types\"]' 'Associated Types'\n // @has - '//*[@class=\"sidebar-links\"]/a' 'Output'\n pub trait Foo {\n     const BAR: u32 = 0;\n@@ -18,7 +18,7 @@ pub trait Foo {\n }\n \n // @has foo/struct.Bar.html\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#fields\"]' 'Fields'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f\"]' 'f'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.u\"]' 'u'\n // @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n@@ -29,7 +29,7 @@ pub struct Bar {\n }\n \n // @has foo/enum.En.html\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#variants\"]' 'Variants'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#variants\"]' 'Variants'\n // @has - '//*[@class=\"sidebar-links\"]/a' 'foo'\n // @has - '//*[@class=\"sidebar-links\"]/a' 'bar'\n pub enum En {\n@@ -38,7 +38,7 @@ pub enum En {\n }\n \n // @has foo/union.MyUnion.html\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#fields\"]' 'Fields'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f1\"]' 'f1'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f2\"]' 'f2'\n // @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'"}, {"sha": "e73c5b4f640cf3d4eb3baa695de1cd990937e2c3", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/trait.Foo.html\n-// @has - '//*[@class=\"sidebar-title\"][@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n+// @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n // @has - '//div[@id=\"impl-Foo-for-u32\"]//code' 'impl Foo for u32'"}, {"sha": "479cd91a9dc6043e8971ccf755aeb39634f210c5", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -12,7 +12,7 @@ impl MyStruct {\n // @has - '//*[@class=\"impl has-srclink\"]//code' 'impl MyAlias'\n // @has - '//*[@class=\"impl has-srclink\"]//code' 'impl MyTrait for MyAlias'\n // @has - 'Alias docstring'\n-// @has - '//*[@class=\"sidebar\"]//p[@class=\"location\"]' 'Type Definition MyAlias'\n+// @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'Type Definition MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n /// Alias docstring"}, {"sha": "73ef567ffae6db158edd31d1f79f17644e2dd4c5", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/defaults-wf.rs:7:5\n+  --> $DIR/defaults-wf.rs:7:15\n    |\n LL |     type Ty = Vec<[u8]>;\n-   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |               ^^^^^^^^^ doesn't have a size known at compile-time\n    | \n   ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |"}, {"sha": "d67e110edeeee0aabb7406503e707c9615e21df0", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -8,7 +8,7 @@ struct IsCopy<T:Copy> { x: T }\n \n trait SomeTrait {\n     type Type1;\n-    type Type2 = IsCopy<Self::Type1>;\n+    type Type2 = (IsCopy<Self::Type1>, bool);\n     //~^ ERROR E0277\n }\n "}, {"sha": "d1c2c65043d21b8ee8fe2ec862cc504bd8d4743a", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `<Self as SomeTrait>::Type1: Copy` is not satisfied\n-  --> $DIR/wf-trait-associated-type-trait.rs:11:5\n+  --> $DIR/wf-trait-associated-type-trait.rs:11:19\n    |\n LL | struct IsCopy<T:Copy> { x: T }\n    |                 ---- required by this bound in `IsCopy`\n ...\n-LL |     type Type2 = IsCopy<Self::Type1>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `<Self as SomeTrait>::Type1`\n+LL |     type Type2 = (IsCopy<Self::Type1>, bool);\n+   |                   ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `<Self as SomeTrait>::Type1`\n    |\n help: consider further restricting the associated type\n    |"}, {"sha": "bf30927448a8026d5ef0382283122a9f93ce2b6c", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df945c4717ffaf923b57bf30c473df6fc98bc85/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8df945c4717ffaf923b57bf30c473df6fc98bc85/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=8df945c4717ffaf923b57bf30c473df6fc98bc85", "patch": "@@ -117,3 +117,5 @@ format = \"rustc\"\n project-name = \"Rust\"\n changelog-path = \"RELEASES.md\"\n changelog-branch = \"master\"\n+\n+[shortcut]"}]}