{"sha": "52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZGFjYmM4NzZmM2Y2MGYyNWNkYmRmMGU4YTBhMzczN2JlYjY3MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T14:15:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T14:15:28Z"}, "message": "Auto merge of #5445 - logan-dev-oss:master, r=flip1995\n\nFixes issue #4892.\n\nFirst contribution here \ud83d\ude0a ! Do not hesitate to correct me.\n\nThis PR is related to issue #4892 .\n\n# Summary\n\n```rust\n-literal.method_call(args)\n```\nThe main idea is to not trigger `clippy::precedence` when the method call is an odd function.\n\n# Example\n\n```rust\n// should trigger lint\nlet _ = -1.0_f64.abs() //precedence of method call abs() and neg ('-') is ambiguous\n\n// should not trigger lint\nlet _ = -1.0_f64.sin() // sin is an odd function => -sin(x) = sin(-x)\n```\n\n# Theory\n\nRust allows following literals:\n- char\n- string\n- integers\n- floats\n- byte\n- bool\n\nOnly integers/floats implements the relevant `std::ops::Neg`.\nFollowing odd functions are implemented on i[8-128] and/or f[32-64]:\n- `asin`\n- `asinh`\n- `atan`\n- `atanh`\n- `cbrt`\n- `fract`\n- `round`\n- `signum`\n- `sin`\n- `sinh`\n- `tan`\n- `tanh `\n- `to_degrees`\n- `to_radians`\n\n# Implementation\n\nAs suggested by `flip1995` in [comment](https://github.com/rust-lang/rust-clippy/issues/4892#issuecomment-568249683), this PR add a whitelist of odd functions and compare method call to the the whitelist before triggering lint.\n\nchangelog: Don't trigger [`clippy::precedence`] on odd functions.", "tree": {"sha": "ccf9a5cdc0da3e189437c9c3a75805afb86176e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf9a5cdc0da3e189437c9c3a75805afb86176e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "html_url": "https://github.com/rust-lang/rust/commit/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea8e5e85659db1af8a1d76d39f88639c0724f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea8e5e85659db1af8a1d76d39f88639c0724f99", "html_url": "https://github.com/rust-lang/rust/commit/3ea8e5e85659db1af8a1d76d39f88639c0724f99"}, {"sha": "66b855c30b590e8c3140375f9e5afc71ce0b2775", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b855c30b590e8c3140375f9e5afc71ce0b2775", "html_url": "https://github.com/rust-lang/rust/commit/66b855c30b590e8c3140375f9e5afc71ce0b2775"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "cc783baa687232f7c01f6d898a8b8d3c3aa3853a", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "patch": "@@ -5,6 +5,23 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n+const ODD_FUNCTIONS_WHITELIST: [&str; 14] = [\n+    \"asin\",\n+    \"asinh\",\n+    \"atan\",\n+    \"atanh\",\n+    \"cbrt\",\n+    \"fract\",\n+    \"round\",\n+    \"signum\",\n+    \"sin\",\n+    \"sinh\",\n+    \"tan\",\n+    \"tanh\",\n+    \"to_degrees\",\n+    \"to_radians\",\n+];\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for operations where precedence may be unclear\n     /// and suggests to add parentheses. Currently it catches the following:\n@@ -86,11 +103,18 @@ impl EarlyLintPass for Precedence {\n         }\n \n         if let ExprKind::Unary(UnOp::Neg, ref rhs) = expr.kind {\n-            if let ExprKind::MethodCall(_, ref args) = rhs.kind {\n+            if let ExprKind::MethodCall(ref path_segment, ref args) = rhs.kind {\n+                let path_segment_str = path_segment.ident.name.as_str();\n                 if let Some(slf) = args.first() {\n                     if let ExprKind::Lit(ref lit) = slf.kind {\n                         match lit.kind {\n                             LitKind::Int(..) | LitKind::Float(..) => {\n+                                if ODD_FUNCTIONS_WHITELIST\n+                                    .iter()\n+                                    .any(|odd_function| **odd_function == *path_segment_str)\n+                                {\n+                                    return;\n+                                }\n                                 let mut applicability = Applicability::MachineApplicable;\n                                 span_lint_and_sugg(\n                                     cx,"}, {"sha": "17b1f1bd0bf300171fd79a797ff0df0a765f1697", "filename": "tests/ui/precedence.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/tests%2Fui%2Fprecedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/tests%2Fui%2Fprecedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.fixed?ref=52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "patch": "@@ -32,6 +32,22 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n+    // Odd functions shoud not trigger an error\n+    let _ = -1f64.asin();\n+    let _ = -1f64.asinh();\n+    let _ = -1f64.atan();\n+    let _ = -1f64.atanh();\n+    let _ = -1f64.cbrt();\n+    let _ = -1f64.fract();\n+    let _ = -1f64.round();\n+    let _ = -1f64.signum();\n+    let _ = -1f64.sin();\n+    let _ = -1f64.sinh();\n+    let _ = -1f64.tan();\n+    let _ = -1f64.tanh();\n+    let _ = -1f64.to_degrees();\n+    let _ = -1f64.to_radians();\n+\n     let b = 3;\n     trip!(b * 8);\n }"}, {"sha": "2d0891fd3c20c1c90631e6a582d14f50eafcdf95", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dacbc876f3f60f25cdbdf0e8a0a3737beb6704/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=52dacbc876f3f60f25cdbdf0e8a0a3737beb6704", "patch": "@@ -32,6 +32,22 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n+    // Odd functions shoud not trigger an error\n+    let _ = -1f64.asin();\n+    let _ = -1f64.asinh();\n+    let _ = -1f64.atan();\n+    let _ = -1f64.atanh();\n+    let _ = -1f64.cbrt();\n+    let _ = -1f64.fract();\n+    let _ = -1f64.round();\n+    let _ = -1f64.signum();\n+    let _ = -1f64.sin();\n+    let _ = -1f64.sinh();\n+    let _ = -1f64.tan();\n+    let _ = -1f64.tanh();\n+    let _ = -1f64.to_degrees();\n+    let _ = -1f64.to_radians();\n+\n     let b = 3;\n     trip!(b * 8);\n }"}]}