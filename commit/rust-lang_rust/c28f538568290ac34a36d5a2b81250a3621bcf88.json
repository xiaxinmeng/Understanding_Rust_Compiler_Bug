{"sha": "c28f538568290ac34a36d5a2b81250a3621bcf88", "node_id": "C_kwDOAAsO6NoAKGMyOGY1Mzg1NjgyOTBhYzM0YTM2ZDVhMmI4MTI1MGEzNjIxYmNmODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-15T20:11:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-15T20:11:30Z"}, "message": "Auto merge of #14580 - lowr:patch/parse-more-unstable-pat, r=Veykril\n\nParse more exclusive range patterns and inline const patterns\n\nCloses #13955\n\nThis PR\n- implements exclusive range pattern without start bound (tracking issue: rust-lang/rust#37854)\n  - additionally moves rest pattern handling into the same place since they only differ in whether another pattern follows; this actually solves some FIXMEs\n- updates `PATTERN_FIRST` token set to include `const` token so we can parse inline const pattern in nested patterns", "tree": {"sha": "25c277a6bab7ad3b738965b99327af28075a7769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c277a6bab7ad3b738965b99327af28075a7769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28f538568290ac34a36d5a2b81250a3621bcf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28f538568290ac34a36d5a2b81250a3621bcf88", "html_url": "https://github.com/rust-lang/rust/commit/c28f538568290ac34a36d5a2b81250a3621bcf88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28f538568290ac34a36d5a2b81250a3621bcf88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b218009f46dd012abcd2d9c2656c3dc498075368", "url": "https://api.github.com/repos/rust-lang/rust/commits/b218009f46dd012abcd2d9c2656c3dc498075368", "html_url": "https://github.com/rust-lang/rust/commit/b218009f46dd012abcd2d9c2656c3dc498075368"}, {"sha": "83a93f4bd3cb07f19044b27d954df746e9fb809e", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a93f4bd3cb07f19044b27d954df746e9fb809e", "html_url": "https://github.com/rust-lang/rust/commit/83a93f4bd3cb07f19044b27d954df746e9fb809e"}], "stats": {"total": 291, "additions": 253, "deletions": 38}, "files": [{"sha": "e5cb9b95676d70bfce64f332aec58d7c2276bc02", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -106,7 +106,6 @@ stringify!(;\n \n #[test]\n fn range_patterns() {\n-    // FIXME: rustc thinks there are three patterns here, not one.\n     check(\n         r#\"\n macro_rules! m {\n@@ -118,7 +117,7 @@ m!(.. .. ..);\n macro_rules! m {\n     ($($p:pat)*) => (stringify!($($p |)*);)\n }\n-stringify!(.. .. .. |);\n+stringify!(.. | .. | .. |);\n \"#]],\n     );\n }"}, {"sha": "4801732101fc9c961f8e0313857da163daf2baf8", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 59, "deletions": 34, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -5,6 +5,7 @@ pub(super) const PATTERN_FIRST: TokenSet =\n         T![box],\n         T![ref],\n         T![mut],\n+        T![const],\n         T!['('],\n         T!['['],\n         T![&],\n@@ -15,6 +16,10 @@ pub(super) const PATTERN_FIRST: TokenSet =\n \n const PAT_TOP_FIRST: TokenSet = PATTERN_FIRST.union(TokenSet::new(&[T![|]]));\n \n+/// Set of possible tokens at the start of a range pattern's end bound.\n+const RANGE_PAT_END_FIRST: TokenSet =\n+    expressions::LITERAL_FIRST.union(paths::PATH_FIRST).union(TokenSet::new(&[T![-], T![const]]));\n+\n pub(crate) fn pattern(p: &mut Parser<'_>) {\n     pattern_r(p, PAT_RECOVERY_SET);\n }\n@@ -105,6 +110,52 @@ fn pattern_single_r(p: &mut Parser<'_>, recovery_set: TokenSet) {\n         return;\n     }\n \n+    // test exclusive_range_pat\n+    // fn main() {\n+    //     match 42 {\n+    //         ..0 => {}\n+    //         1..2 => {}\n+    //     }\n+    // }\n+\n+    // test dot_dot_pat\n+    // fn main() {\n+    //     let .. = ();\n+    //     //\n+    //     // Tuples\n+    //     //\n+    //     let (a, ..) = ();\n+    //     let (a, ..,) = ();\n+    //     let Tuple(a, ..) = ();\n+    //     let Tuple(a, ..,) = ();\n+    //     let (.., ..) = ();\n+    //     let Tuple(.., ..) = ();\n+    //     let (.., a, ..) = ();\n+    //     let Tuple(.., a, ..) = ();\n+    //     //\n+    //     // Slices\n+    //     //\n+    //     let [..] = ();\n+    //     let [head, ..] = ();\n+    //     let [head, tail @ ..] = ();\n+    //     let [head, .., cons] = ();\n+    //     let [head, mid @ .., cons] = ();\n+    //     let [head, .., .., cons] = ();\n+    //     let [head, .., mid, tail @ ..] = ();\n+    //     let [head, .., mid, .., cons] = ();\n+    // }\n+    if p.at(T![..]) {\n+        let m = p.start();\n+        p.bump(T![..]);\n+        if p.at_ts(RANGE_PAT_END_FIRST) {\n+            atom_pat(p, recovery_set);\n+            m.complete(p, RANGE_PAT);\n+        } else {\n+            m.complete(p, REST_PAT);\n+        }\n+        return;\n+    }\n+\n     if let Some(lhs) = atom_pat(p, recovery_set) {\n         for range_op in [T![...], T![..=], T![..]] {\n             if p.at(range_op) {\n@@ -173,7 +224,6 @@ fn atom_pat(p: &mut Parser<'_>, recovery_set: TokenSet) -> Option<CompletedMarke\n         _ if paths::is_path_start(p) => path_or_macro_pat(p),\n         _ if is_literal_pat_start(p) => literal_pat(p),\n \n-        T![.] if p.at(T![..]) => rest_pat(p),\n         T![_] => wildcard_pat(p),\n         T![&] => ref_pat(p),\n         T!['('] => tuple_pat(p),\n@@ -334,39 +384,6 @@ fn wildcard_pat(p: &mut Parser<'_>) -> CompletedMarker {\n     m.complete(p, WILDCARD_PAT)\n }\n \n-// test dot_dot_pat\n-// fn main() {\n-//     let .. = ();\n-//     //\n-//     // Tuples\n-//     //\n-//     let (a, ..) = ();\n-//     let (a, ..,) = ();\n-//     let Tuple(a, ..) = ();\n-//     let Tuple(a, ..,) = ();\n-//     let (.., ..) = ();\n-//     let Tuple(.., ..) = ();\n-//     let (.., a, ..) = ();\n-//     let Tuple(.., a, ..) = ();\n-//     //\n-//     // Slices\n-//     //\n-//     let [..] = ();\n-//     let [head, ..] = ();\n-//     let [head, tail @ ..] = ();\n-//     let [head, .., cons] = ();\n-//     let [head, mid @ .., cons] = ();\n-//     let [head, .., .., cons] = ();\n-//     let [head, .., mid, tail @ ..] = ();\n-//     let [head, .., mid, .., cons] = ();\n-// }\n-fn rest_pat(p: &mut Parser<'_>) -> CompletedMarker {\n-    assert!(p.at(T![..]));\n-    let m = p.start();\n-    p.bump(T![..]);\n-    m.complete(p, REST_PAT)\n-}\n-\n // test ref_pat\n // fn main() {\n //     let &a = ();\n@@ -483,6 +500,14 @@ fn box_pat(p: &mut Parser<'_>) -> CompletedMarker {\n // fn main() {\n //     let const { 15 } = ();\n //     let const { foo(); bar() } = ();\n+//\n+//     match 42 {\n+//         const { 0 } .. const { 1 } => (),\n+//         .. const { 0 } => (),\n+//         const { 2 } .. => (),\n+//     }\n+//\n+//     let (const { () },) = ();\n // }\n fn const_block_pat(p: &mut Parser<'_>) -> CompletedMarker {\n     assert!(p.at(T![const]));"}, {"sha": "11f9c34abdf1e67b8e94466dcf2e99c82662ac69", "filename": "crates/parser/src/tests/prefix_entries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -33,8 +33,7 @@ fn stmt() {\n fn pat() {\n     check(PrefixEntryPoint::Pat, \"x y\", \"x\");\n     check(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n-    // FIXME: This one is wrong, we should consume only one pattern.\n-    check(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n+    check(PrefixEntryPoint::Pat, \".. ..\", \"..\");\n }\n \n #[test]"}, {"sha": "593867a7b12bb674ea99dbd4f60b93e268075197", "filename": "crates/parser/test_data/parser/inline/ok/0156_const_block_pat.rast", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rast?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -74,6 +74,126 @@ SOURCE_FILE\n             L_PAREN \"(\"\n             R_PAREN \")\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n\\n    \"\n+        EXPR_STMT\n+          MATCH_EXPR\n+            MATCH_KW \"match\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"42\"\n+            WHITESPACE \" \"\n+            MATCH_ARM_LIST\n+              L_CURLY \"{\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RANGE_PAT\n+                  CONST_BLOCK_PAT\n+                    CONST_KW \"const\"\n+                    WHITESPACE \" \"\n+                    BLOCK_EXPR\n+                      STMT_LIST\n+                        L_CURLY \"{\"\n+                        WHITESPACE \" \"\n+                        LITERAL\n+                          INT_NUMBER \"0\"\n+                        WHITESPACE \" \"\n+                        R_CURLY \"}\"\n+                  WHITESPACE \" \"\n+                  DOT2 \"..\"\n+                  WHITESPACE \" \"\n+                  CONST_BLOCK_PAT\n+                    CONST_KW \"const\"\n+                    WHITESPACE \" \"\n+                    BLOCK_EXPR\n+                      STMT_LIST\n+                        L_CURLY \"{\"\n+                        WHITESPACE \" \"\n+                        LITERAL\n+                          INT_NUMBER \"1\"\n+                        WHITESPACE \" \"\n+                        R_CURLY \"}\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RANGE_PAT\n+                  DOT2 \"..\"\n+                  WHITESPACE \" \"\n+                  CONST_BLOCK_PAT\n+                    CONST_KW \"const\"\n+                    WHITESPACE \" \"\n+                    BLOCK_EXPR\n+                      STMT_LIST\n+                        L_CURLY \"{\"\n+                        WHITESPACE \" \"\n+                        LITERAL\n+                          INT_NUMBER \"0\"\n+                        WHITESPACE \" \"\n+                        R_CURLY \"}\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RANGE_PAT\n+                  CONST_BLOCK_PAT\n+                    CONST_KW \"const\"\n+                    WHITESPACE \" \"\n+                    BLOCK_EXPR\n+                      STMT_LIST\n+                        L_CURLY \"{\"\n+                        WHITESPACE \" \"\n+                        LITERAL\n+                          INT_NUMBER \"2\"\n+                        WHITESPACE \" \"\n+                        R_CURLY \"}\"\n+                  WHITESPACE \" \"\n+                  DOT2 \"..\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n    \"\n+              R_CURLY \"}\"\n+        WHITESPACE \"\\n\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          TUPLE_PAT\n+            L_PAREN \"(\"\n+            CONST_BLOCK_PAT\n+              CONST_KW \"const\"\n+              WHITESPACE \" \"\n+              BLOCK_EXPR\n+                STMT_LIST\n+                  L_CURLY \"{\"\n+                  WHITESPACE \" \"\n+                  TUPLE_EXPR\n+                    L_PAREN \"(\"\n+                    R_PAREN \")\"\n+                  WHITESPACE \" \"\n+                  R_CURLY \"}\"\n+            COMMA \",\"\n+            R_PAREN \")\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          TUPLE_EXPR\n+            L_PAREN \"(\"\n+            R_PAREN \")\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "6ecdee849b794b5ff979afef740d3232343d491d", "filename": "crates/parser/test_data/parser/inline/ok/0156_const_block_pat.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_const_block_pat.rs?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -1,4 +1,12 @@\n fn main() {\n     let const { 15 } = ();\n     let const { foo(); bar() } = ();\n+\n+    match 42 {\n+        const { 0 } .. const { 1 } => (),\n+        .. const { 0 } => (),\n+        const { 2 } .. => (),\n+    }\n+\n+    let (const { () },) = ();\n }"}, {"sha": "fd2c422d0d1915c889e336bae22983393da66917", "filename": "crates/parser/test_data/parser/inline/ok/0207_exclusive_range_pat.rast", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rast?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -0,0 +1,58 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"main\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        MATCH_EXPR\n+          MATCH_KW \"match\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            INT_NUMBER \"42\"\n+          WHITESPACE \" \"\n+          MATCH_ARM_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \"\\n        \"\n+            MATCH_ARM\n+              RANGE_PAT\n+                DOT2 \"..\"\n+                LITERAL_PAT\n+                  LITERAL\n+                    INT_NUMBER \"0\"\n+              WHITESPACE \" \"\n+              FAT_ARROW \"=>\"\n+              WHITESPACE \" \"\n+              BLOCK_EXPR\n+                STMT_LIST\n+                  L_CURLY \"{\"\n+                  R_CURLY \"}\"\n+            WHITESPACE \"\\n        \"\n+            MATCH_ARM\n+              RANGE_PAT\n+                LITERAL_PAT\n+                  LITERAL\n+                    INT_NUMBER \"1\"\n+                DOT2 \"..\"\n+                LITERAL_PAT\n+                  LITERAL\n+                    INT_NUMBER \"2\"\n+              WHITESPACE \" \"\n+              FAT_ARROW \"=>\"\n+              WHITESPACE \" \"\n+              BLOCK_EXPR\n+                STMT_LIST\n+                  L_CURLY \"{\"\n+                  R_CURLY \"}\"\n+            WHITESPACE \"\\n    \"\n+            R_CURLY \"}\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "e80505d8bd4ba4b242650c3e89c51f8914f3ad90", "filename": "crates/parser/test_data/parser/inline/ok/0207_exclusive_range_pat.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0207_exclusive_range_pat.rs?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    match 42 {\n+        ..0 => {}\n+        1..2 => {}\n+    }\n+}"}]}