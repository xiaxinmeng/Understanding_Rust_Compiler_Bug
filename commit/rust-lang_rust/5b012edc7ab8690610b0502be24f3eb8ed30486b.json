{"sha": "5b012edc7ab8690610b0502be24f3eb8ed30486b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDEyZWRjN2FiODY5MDYxMGIwNTAyYmUyNGYzZWI4ZWQzMDQ4NmI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-22T05:23:50Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-22T05:23:50Z"}, "message": "Rename AbstractPtr to Ptr.", "tree": {"sha": "65f3cf0a53d439f7d20adbd82ef59c2fbbaf6fcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f3cf0a53d439f7d20adbd82ef59c2fbbaf6fcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b012edc7ab8690610b0502be24f3eb8ed30486b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b012edc7ab8690610b0502be24f3eb8ed30486b", "html_url": "https://github.com/rust-lang/rust/commit/5b012edc7ab8690610b0502be24f3eb8ed30486b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b012edc7ab8690610b0502be24f3eb8ed30486b/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "840594115dd6a992b45090ff986f8257503ee8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/840594115dd6a992b45090ff986f8257503ee8a0", "html_url": "https://github.com/rust-lang/rust/commit/840594115dd6a992b45090ff986f8257503ee8a0"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "06cbf2495dac78fa9402bb49b0f10d34a943e39d", "filename": "src/interpreter/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Finterpreter%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Finterpreter%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fcast.rs?ref=5b012edc7ab8690610b0502be24f3eb8ed30486b", "patch": "@@ -28,15 +28,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             U64(u) |\n             IntegerPtr(u) => self.cast_const_int(u, ty, false),\n             FnPtr(ptr) |\n-            AbstractPtr(ptr) => self.cast_ptr(ptr, ty),\n+            Ptr(ptr) => self.cast_ptr(ptr, ty),\n         }\n     }\n \n     fn cast_ptr(&self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         use primval::PrimVal::*;\n         match ty.sty {\n             ty::TyRef(..) |\n-            ty::TyRawPtr(_) => Ok(AbstractPtr(ptr)),\n+            ty::TyRawPtr(_) => Ok(Ptr(ptr)),\n             ty::TyFnPtr(_) => Ok(FnPtr(ptr)),\n             _ => Err(EvalError::Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }"}, {"sha": "c6bbe829b5cad3d86ee58af8c4af1d8cf016a594", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=5b012edc7ab8690610b0502be24f3eb8ed30486b", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_bytes(ptr, s.as_bytes())?;\n                 self.memory.freeze(ptr.alloc_id)?;\n                 Value::ByValPair(\n-                    PrimVal::AbstractPtr(ptr),\n+                    PrimVal::Ptr(ptr),\n                     self.target_usize_primval(s.len() as u64)\n                 )\n             }\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let ptr = self.memory.allocate(bs.len(), 1)?;\n                 self.memory.write_bytes(ptr, bs)?;\n                 self.memory.freeze(ptr.alloc_id)?;\n-                Value::ByVal(PrimVal::AbstractPtr(ptr))\n+                Value::ByVal(PrimVal::Ptr(ptr))\n             }\n \n             Struct(_)    => unimplemented!(),\n@@ -1050,7 +1050,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             &ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n                 if self.type_is_sized(ty) {\n                     match self.memory.read_ptr(ptr) {\n-                        Ok(p) => PrimVal::AbstractPtr(p),\n+                        Ok(p) => PrimVal::Ptr(p),\n                         Err(EvalError::ReadBytesAsPointer) => {\n                             PrimVal::IntegerPtr(self.memory.read_usize(ptr)?)\n                         }"}, {"sha": "10273881b67c6221853c87b03ae5a741ab4e77a1", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=5b012edc7ab8690610b0502be24f3eb8ed30486b", "patch": "@@ -420,7 +420,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         // FIXME: this is a memory leak, should probably add the pointer to the\n                         // current stack.\n                         let first = self.value_to_ptr(args[0].0, args[0].1)?;\n-                        args[0].0 = Value::ByVal(PrimVal::AbstractPtr(first));\n+                        args[0].0 = Value::ByVal(PrimVal::Ptr(first));\n                         args[0].1 = self.tcx.mk_mut_ptr(args[0].1);\n                     }\n "}, {"sha": "0108f7e5d9c18d8594792a9ecb69744708c9c495", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=5b012edc7ab8690610b0502be24f3eb8ed30486b", "patch": "@@ -530,7 +530,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             PrimVal::F32(f) => self.write_f32(ptr, f),\n             PrimVal::F64(f) => self.write_f64(ptr, f),\n             PrimVal::FnPtr(p) |\n-            PrimVal::AbstractPtr(p) => self.write_ptr(ptr, p),\n+            PrimVal::Ptr(p) => self.write_ptr(ptr, p),\n         }\n     }\n "}, {"sha": "50ef05a245dfd96504911bf6403c0883aabbca2d", "filename": "src/primval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b012edc7ab8690610b0502be24f3eb8ed30486b/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=5b012edc7ab8690610b0502be24f3eb8ed30486b", "patch": "@@ -12,7 +12,7 @@ pub enum PrimVal {\n     I8(i8), I16(i16), I32(i32), I64(i64),\n     U8(u8), U16(u16), U32(u32), U64(u64),\n \n-    AbstractPtr(Pointer),\n+    Ptr(Pointer),\n     FnPtr(Pointer),\n     IntegerPtr(u64),\n     Char(char),\n@@ -211,10 +211,10 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n \n         (IntegerPtr(l), IntegerPtr(r)) => int_binops!(IntegerPtr, l, r),\n \n-        (AbstractPtr(_), IntegerPtr(_)) |\n-        (IntegerPtr(_), AbstractPtr(_)) |\n-        (FnPtr(_), AbstractPtr(_)) |\n-        (AbstractPtr(_), FnPtr(_)) |\n+        (Ptr(_), IntegerPtr(_)) |\n+        (IntegerPtr(_), Ptr(_)) |\n+        (FnPtr(_), Ptr(_)) |\n+        (Ptr(_), FnPtr(_)) |\n         (FnPtr(_), IntegerPtr(_)) |\n         (IntegerPtr(_), FnPtr(_)) =>\n             unrelated_ptr_ops(bin_op)?,\n@@ -225,7 +225,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n             _ => return Err(EvalError::Unimplemented(format!(\"unimplemented fn ptr comparison: {:?}\", bin_op))),\n         },\n \n-        (AbstractPtr(l_ptr), AbstractPtr(r_ptr)) => {\n+        (Ptr(l_ptr), Ptr(r_ptr)) => {\n             if l_ptr.alloc_id != r_ptr.alloc_id {\n                 return Ok((unrelated_ptr_ops(bin_op)?, false));\n             }"}]}