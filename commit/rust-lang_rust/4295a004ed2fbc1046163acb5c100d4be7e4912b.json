{"sha": "4295a004ed2fbc1046163acb5c100d4be7e4912b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOTVhMDA0ZWQyZmJjMTA0NjE2M2FjYjVjMTAwZDRiZTdlNDkxMmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-15T22:49:59Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-15T22:49:59Z"}, "message": "Operate only on AST paths instead of HIR", "tree": {"sha": "2bda14ebd9c5d8f180bfcb845002da418aa3e32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bda14ebd9c5d8f180bfcb845002da418aa3e32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4295a004ed2fbc1046163acb5c100d4be7e4912b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4295a004ed2fbc1046163acb5c100d4be7e4912b", "html_url": "https://github.com/rust-lang/rust/commit/4295a004ed2fbc1046163acb5c100d4be7e4912b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4295a004ed2fbc1046163acb5c100d4be7e4912b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaaa68b56cc8520f09649acef22ae0eb26ee9678", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaa68b56cc8520f09649acef22ae0eb26ee9678", "html_url": "https://github.com/rust-lang/rust/commit/aaaa68b56cc8520f09649acef22ae0eb26ee9678"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "b4784c333114f93998ca632582d666c3289ce660", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4295a004ed2fbc1046163acb5c100d4be7e4912b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4295a004ed2fbc1046163acb5c100d4be7e4912b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=4295a004ed2fbc1046163acb5c100d4be7e4912b", "patch": "@@ -1,4 +1,4 @@\n-use hir::{self, ModPath};\n+use hir;\n use ra_syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SmolStr, SyntaxNode};\n \n use crate::{\n@@ -50,13 +50,9 @@ pub(crate) fn replace_qualified_name_with_use(\n \n             // Now that we've brought the name into scope, re-qualify all paths that could be\n             // affected (that is, all paths inside the node we added the `use` to).\n-            let hir_path = match hir::Path::from_ast(path.clone()) {\n-                Some(p) => p,\n-                None => return,\n-            };\n             let mut rewriter = SyntaxRewriter::default();\n             let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n-            shorten_paths(&mut rewriter, syntax, hir_path.mod_path());\n+            shorten_paths(&mut rewriter, syntax, path);\n             builder.rewrite(rewriter);\n         },\n     )\n@@ -83,7 +79,7 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n }\n \n /// Adds replacements to `re` that shorten `path` in all descendants of `node`.\n-fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: &ModPath) {\n+fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: ast::Path) {\n     for child in node.children() {\n         match_ast! {\n             match child {\n@@ -94,47 +90,57 @@ fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path:\n                 ast::Module(_it) => continue,\n \n                 ast::Path(p) => {\n-                    match maybe_replace_path(rewriter, &p, path) {\n+                    match maybe_replace_path(rewriter, p.clone(), path.clone()) {\n                         Some(()) => {},\n-                        None => shorten_paths(rewriter, p.syntax().clone(), path),\n+                        None => shorten_paths(rewriter, p.syntax().clone(), path.clone()),\n                     }\n                 },\n-                _ => shorten_paths(rewriter, child, path),\n+                _ => shorten_paths(rewriter, child, path.clone()),\n             }\n         }\n     }\n }\n \n fn maybe_replace_path(\n-    re: &mut SyntaxRewriter<'static>,\n-    p: &ast::Path,\n-    path: &ModPath,\n+    rewriter: &mut SyntaxRewriter<'static>,\n+    path: ast::Path,\n+    target: ast::Path,\n ) -> Option<()> {\n-    let hir_path = hir::Path::from_ast(p.clone())?;\n-\n-    if hir_path.mod_path() != path {\n+    if !path_eq(path.clone(), target.clone()) {\n         return None;\n     }\n \n-    // Replace path with its last \"plain\" segment.\n-    let mut mod_path = hir_path.mod_path().clone();\n-    let last = mod_path.segments.len() - 1;\n-    mod_path.segments.swap(0, last);\n-    mod_path.segments.truncate(1);\n-    mod_path.kind = hir::PathKind::Plain;\n-\n-    let mut new_path = crate::ast_transform::path_to_ast(mod_path);\n-\n-    let type_args = p.segment().and_then(|s| s.type_arg_list());\n-    if let Some(type_args) = type_args {\n-        let last_segment = new_path.segment().unwrap();\n-        new_path = new_path.with_segment(last_segment.with_type_args(type_args));\n+    // Shorten `path`, leaving only its last segment.\n+    if let Some(parent) = path.qualifier() {\n+        rewriter.delete(parent.syntax());\n+    }\n+    if let Some(double_colon) = path.coloncolon_token() {\n+        rewriter.delete(&double_colon);\n     }\n \n-    re.replace(p.syntax(), new_path.syntax());\n     Some(())\n }\n \n+fn path_eq(lhs: ast::Path, rhs: ast::Path) -> bool {\n+    let mut lhs_curr = lhs;\n+    let mut rhs_curr = rhs;\n+    loop {\n+        match (lhs_curr.segment(), rhs_curr.segment()) {\n+            (Some(lhs), Some(rhs)) if lhs.syntax().text() == rhs.syntax().text() => (),\n+            _ => return false,\n+        }\n+\n+        match (lhs_curr.qualifier(), rhs_curr.qualifier()) {\n+            (Some(lhs), Some(rhs)) => {\n+                lhs_curr = lhs;\n+                rhs_curr = rhs;\n+            }\n+            (None, None) => return true,\n+            _ => return false,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}]}