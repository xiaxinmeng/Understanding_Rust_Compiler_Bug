{"sha": "eb7f8d6089e2dba4006f0452ab25262735bbbf61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViN2Y4ZDYwODllMmRiYTQwMDZmMDQ1MmFiMjUyNjI3MzViYmJmNjE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-13T23:01:03Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-15T18:44:09Z"}, "message": "Move some utils to ty_utils", "tree": {"sha": "220d35be34d239f540f65a2a9a4ce0cc52af6770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220d35be34d239f540f65a2a9a4ce0cc52af6770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7f8d6089e2dba4006f0452ab25262735bbbf61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f8d6089e2dba4006f0452ab25262735bbbf61", "html_url": "https://github.com/rust-lang/rust/commit/eb7f8d6089e2dba4006f0452ab25262735bbbf61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f8d6089e2dba4006f0452ab25262735bbbf61/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e042d2f7070f071cfc0c426181634d5d27cfa5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e042d2f7070f071cfc0c426181634d5d27cfa5c", "html_url": "https://github.com/rust-lang/rust/commit/0e042d2f7070f071cfc0c426181634d5d27cfa5c"}], "stats": {"total": 1087, "additions": 578, "deletions": 509}, "files": [{"sha": "ae3003241583a068b96d118686279acbae2ea11e", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{\n-    eq_expr_value, get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, trait_ref_of_method,\n-};\n+use crate::utils::{eq_expr_value, get_trait_def_id, snippet_opt, span_lint_and_then, trait_ref_of_method};\n use crate::utils::{higher, sugg};\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "1e185e97df6fa6ddb9d79aa8803fae6dd0f460b1", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{implements_trait, snippet, span_lint_and_then};\n+use crate::utils::{snippet, span_lint_and_then};\n+use clippy_utils::ty::implements_trait;\n use rustc_errors::Applicability;\n use rustc_hir::{AsyncGeneratorKind, Body, BodyId, ExprKind, GeneratorKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "222bb39f89c2680dc8b9f217af15741cd947a097", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    differing_macro_contexts, get_parent_expr, implements_trait, snippet_block_with_applicability, span_lint,\n-    span_lint_and_sugg,\n+    differing_macro_contexts, get_parent_expr, snippet_block_with_applicability, span_lint, span_lint_and_sugg,\n };\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "affc7d2c93f0d1061e678215d680810356ec506f", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    eq_expr_value, get_trait_def_id, implements_trait, in_macro, is_type_diagnostic_item, paths, snippet_opt,\n-    span_lint_and_sugg, span_lint_and_then,\n+    eq_expr_value, get_trait_def_id, in_macro, paths, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n };\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "67cca8dcadb2562faca76a84ff9b9ee991c9c530", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::{\n-    contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n+    contains_name, get_pat_name, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n };\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};"}, {"sha": "902fb423ff1bec71fe840154f75c22ac6f61eb37", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,9 +1,10 @@\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{in_constant, is_isize_or_usize, snippet_opt, span_lint_and_sugg};\n+use crate::utils::{in_constant, snippet_opt, span_lint_and_sugg};\n \n use super::{utils, CAST_LOSSLESS};\n "}, {"sha": "522ef5348be689a8287cf751cccc9036bdfa1cb6", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{is_isize_or_usize, span_lint};\n+use crate::utils::span_lint;\n \n use super::{utils, CAST_POSSIBLE_TRUNCATION};\n "}, {"sha": "931252415ad5235c8ddb7b2a89adc73afaa81371", "filename": "clippy_lints/src/casts/cast_possible_wrap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::Ty;\n \n-use crate::utils::{is_isize_or_usize, span_lint};\n+use crate::utils::span_lint;\n \n use super::{utils, CAST_POSSIBLE_WRAP};\n "}, {"sha": "b6905c21c78c61232dbb4e31aba357b34e78c4d6", "filename": "clippy_lints/src/casts/cast_precision_loss.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{is_isize_or_usize, span_lint};\n+use crate::utils::span_lint;\n \n use super::{utils, CAST_PRECISION_LOSS};\n "}, {"sha": "3d842a4681337b24ad29a36fb90dc064c0431a5d", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n //! calculate cognitive complexity and warn about overly complex functions\n \n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::Attribute;\n use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n@@ -9,7 +10,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n \n-use crate::utils::{is_type_diagnostic_item, snippet_opt, span_lint_and_help, LimitStack};\n+use crate::utils::{snippet_opt, span_lint_and_help, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity."}, {"sha": "9843033a2e0f3d0442e54e85815c53e49de94bde", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    get_trait_def_id, if_sequence, implements_trait, parent_node_is_if_expr, paths, span_lint_and_help, SpanlessEq,\n-};\n+use crate::utils::{get_trait_def_id, if_sequence, parent_node_is_if_expr, paths, span_lint_and_help, SpanlessEq};\n+use clippy_utils::ty::implements_trait;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "434d8958da59dafb169cbd3603e65e277f6c92b0", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_copy, span_lint_and_note};\n+use crate::utils::span_lint_and_note;\n+use clippy_utils::ty::is_copy;\n use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "8842ea9628dc3d0d9b6e6f118a28f95fccc3d1d5", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_parent_node, in_macro, is_allowed, peel_mid_ty_refs, snippet_with_context, span_lint_and_sugg};\n+use crate::utils::{get_parent_node, in_macro, is_allowed, snippet_with_context, span_lint_and_sugg};\n+use clippy_utils::ty::peel_mid_ty_refs;\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};"}, {"sha": "460fe385272bd09111299f940edeaee89e5a4bd1", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::paths;\n use crate::utils::{\n-    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_def_path, span_lint_and_help,\n-    span_lint_and_note, span_lint_and_then,\n+    get_trait_def_id, is_allowed, is_automatically_derived, match_def_path, span_lint_and_help, span_lint_and_note,\n+    span_lint_and_then,\n };\n+use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};"}, {"sha": "4f3c573691e7d64a9a7c27fef7e37b585c2fdf27", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    implements_trait, is_entrypoint_fn, is_expn_of, is_type_diagnostic_item, match_panic_def_id, method_chain_args,\n-    return_ty, span_lint, span_lint_and_note,\n+    is_entrypoint_fn, is_expn_of, match_panic_def_id, method_chain_args, return_ty, span_lint, span_lint_and_note,\n };\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};"}, {"sha": "dd145ba686728b274763eaf4ecf657bf5092e454", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_copy, match_def_path, paths, span_lint_and_note};\n+use crate::utils::{match_def_path, paths, span_lint_and_note};\n+use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "c97392e3385b00a3b01188f84899b1f6ba03a8ee", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -7,7 +8,7 @@ use rustc_span::source_map::Spanned;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::{match_type, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calculation of subsecond microseconds or milliseconds"}, {"sha": "68363e53f0ea45203b556f90284183efc5112e2b", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n+use crate::utils::{get_item_name, paths, snippet, snippet_opt};\n use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "fa19f16074df04479f72a61410347f6286e3b1f9", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,8 @@\n use crate::utils::{\n-    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, implements_trait, in_macro, is_copy, is_expn_of,\n-    multispan_sugg, snippet, span_lint, span_lint_and_then,\n+    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of, multispan_sugg, snippet,\n+    span_lint, span_lint_and_then,\n };\n+use clippy_utils::ty::{implements_trait, is_copy};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};"}, {"sha": "a7258eea0ad0a3058175c45a94667d9c3caff523", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -10,7 +11,7 @@ use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n-use crate::utils::{contains_ty, span_lint};\n+use crate::utils::span_lint;\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {"}, {"sha": "d93c32c179fe969653ac8d1e54c4ef23aa1ee72c", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,6 @@\n+use clippy_utils::higher;\n+use clippy_utils::higher::VecArgs;\n+use clippy_utils::ty::{implements_trait, type_is_unsafe_function};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def_id, Expr, ExprKind, Param, PatKind, QPath};\n@@ -6,12 +9,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{\n-    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n-    type_is_unsafe_function,\n-};\n-use clippy_utils::higher;\n-use clippy_utils::higher::VecArgs;\n+use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for closures which just call another function where"}, {"sha": "cc4e570956b2eb18c2d62718111d37362abb31a3", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, match_panic_def_id, method_chain_args, span_lint_and_then};\n+use crate::utils::{is_expn_of, match_panic_def_id, method_chain_args, span_lint_and_then};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "b6209f815bc7545f7e3c90f879730c07c5cf8e66", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::paths;\n use crate::utils::{\n-    is_expn_of, is_type_diagnostic_item, last_path_segment, match_def_path, match_function_call, snippet, snippet_opt,\n-    span_lint_and_then,\n+    is_expn_of, last_path_segment, match_def_path, match_function_call, snippet, snippet_opt, span_lint_and_then,\n };\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "b92c8ccfb1b3f95bfe6379310aa280638127a7a0", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def, Expr, ExprKind, PrimTy, QPath, TyKind};\n@@ -6,7 +7,6 @@ use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n-use crate::utils::is_type_diagnostic_item;\n use crate::utils::span_lint_and_sugg;\n use crate::utils::sugg::Sugg;\n "}, {"sha": "349cd39ffb6eb6d5c7cbdde66187c174876c4cc2", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::{\n-    attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n-    match_def_path, must_use_attr, path_to_local, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help,\n-    span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    attr_by_name, attrs::is_proc_macro, is_trait_impl_item, iter_input_pats, match_def_path, must_use_attr,\n+    path_to_local, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then,\n+    trait_ref_of_method,\n };\n+use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, type_is_unsafe_function};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "478008ea48cfff0160394d7c73343d44c78f147d", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n //! lint on using `x.get(x.len() - 1)` instead of `x.last()`\n \n-use crate::utils::{is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "f53d1b1cf3b3a5991bf678963bfc8ccacd5a285c", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help, SpanlessEq};\n+use crate::utils::{span_lint_and_help, SpanlessEq};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir::intravisit::{self as visit, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, MatchSource};"}, {"sha": "0cd44a1c3a0a56d8b0daf06e4199a6f010890657", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, MatchSource, PatKind, QPath};"}, {"sha": "6bce205ec3a0181605752219bb4cddabcf95c400", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n+use clippy_utils::ty::{implements_trait, match_type};\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, match_type, paths, span_lint};\n+use crate::utils::{get_trait_def_id, higher, match_qpath, paths, span_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for iteration that is guaranteed to be infinite."}, {"sha": "9207413cd69614d4f6542e9d0a7a2a2a2dc4721e", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,13 +1,11 @@\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::{ImplItem, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-use crate::utils::{\n-    get_trait_def_id, implements_trait, is_type_diagnostic_item, paths, return_ty, span_lint_and_help,\n-    trait_ref_of_method,\n-};\n+use crate::utils::{get_trait_def_id, paths, return_ty, span_lint_and_help, trait_ref_of_method};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`."}, {"sha": "2da7137b48bdcb07ade7ca1386712b439eab67c9", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,11 +1,12 @@\n+use clippy_utils::ty::{is_must_use_ty, match_type};\n use if_chain::if_chain;\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n+use crate::utils::{is_must_use_func_call, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`"}, {"sha": "b70585015cada215ff5ac3612bce2ecf3952137b", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,12 +1,12 @@\n use super::EXPLICIT_ITER_LOOP;\n-use crate::utils::{match_trait_method, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TyS};\n use rustc_span::sym;\n \n-use crate::utils::{is_type_diagnostic_item, match_type, paths};\n+use crate::utils::{match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n \n pub(super) fn check(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n     let should_lint = match method_name {"}, {"sha": "aef218868038b1cd2ce5bf724ca64017ffd429ed", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use super::FOR_KV_MAP;\n use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{is_type_diagnostic_item, match_type, multispan_sugg, paths, snippet, span_lint_and_then, sugg};\n+use crate::utils::{multispan_sugg, paths, snippet, span_lint_and_then, sugg};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;"}, {"sha": "063078adcd159fa8a2aa7f79531fd662bd47b5d2", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use super::FOR_LOOPS_OVER_FALLIBLES;\n-use crate::utils::{is_type_diagnostic_item, snippet, span_lint_and_help};\n+use crate::utils::{snippet, span_lint_and_help};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir::{Expr, Pat};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;"}, {"sha": "362124c082ae3a69a00deed0539e0f83373624d7", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,7 @@\n use super::{get_span_of_entire_for_loop, IncrementVisitor, InitializeVisitor, MANUAL_MEMCPY};\n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    get_enclosing_block, higher, is_type_diagnostic_item, path_to_local, snippet, span_lint_and_sugg, sugg,\n-};\n+use crate::utils::{get_enclosing_block, higher, path_to_local, snippet, span_lint_and_sugg, sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;"}, {"sha": "f4d3b9eb2720a08d4201202424e170ff46c64003", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,9 +1,7 @@\n use super::NEEDLESS_COLLECT;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    is_trait_method, is_type_diagnostic_item, match_type, path_to_local_id, paths, snippet, span_lint_and_sugg,\n-    span_lint_and_then,\n-};\n+use crate::utils::{is_trait_method, path_to_local_id, paths, snippet, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "6d498149166d7f3916b9ee983eb983917df65805", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,9 +1,10 @@\n use super::NEEDLESS_RANGE_LOOP;\n use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n-    contains_name, has_iter_method, higher, is_integer_const, match_trait_method, multispan_sugg, path_to_local_id,\n-    paths, snippet, span_lint_and_then, sugg, SpanlessEq,\n+    contains_name, higher, is_integer_const, match_trait_method, multispan_sugg, path_to_local_id, paths, snippet,\n+    span_lint_and_then, sugg, SpanlessEq,\n };\n+use clippy_utils::ty::has_iter_method;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "f891f7b8a1f4c2980a0fc847817a2d63fad593f2", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use super::SAME_ITEM_PUSH;\n-use crate::utils::{implements_trait, is_type_diagnostic_item, snippet_with_macro_callsite, span_lint_and_help};\n+use crate::utils::{snippet_with_macro_callsite, span_lint_and_help};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "b85676570b44a152befd22b1dd3b614e21f670a0", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    get_parent_expr, has_iter_method, implements_trait, is_integer_const, path_to_local, path_to_local_id, sugg,\n-};\n+use crate::utils::{get_parent_expr, is_integer_const, path_to_local, path_to_local_id, sugg};\n+use clippy_utils::ty::{has_iter_method, implements_trait};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;"}, {"sha": "619fd1554f029741c4baf158c436b1cc74e21307", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -2,16 +2,16 @@ use super::utils::{LoopNestVisitor, Nesting};\n use super::WHILE_LET_ON_ITERATOR;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_enclosing_block, implements_trait, is_refutable, is_trait_method, last_path_segment, path_to_local,\n-    path_to_local_id, snippet_with_applicability, span_lint_and_sugg,\n+    get_enclosing_block, is_refutable, is_trait_method, last_path_segment, path_to_local, path_to_local_id,\n+    snippet_with_applicability, span_lint_and_sugg,\n };\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource, Node, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-\n use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "7c89359f2d9f5db9cb120a1aedcbf03c56a61689", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -2,11 +2,11 @@ use crate::{\n     map_unit_fn::OPTION_MAP_UNIT_FN,\n     matches::MATCH_AS_REF,\n     utils::{\n-        can_partially_move_ty, is_allowed, is_type_diagnostic_item, match_def_path, match_var, paths,\n-        peel_hir_expr_refs, peel_mid_ty_refs_is_mutable, snippet_with_applicability, snippet_with_context,\n-        span_lint_and_sugg,\n+        is_allowed, match_def_path, match_var, paths, peel_hir_expr_refs, snippet_with_applicability,\n+        snippet_with_context, span_lint_and_sugg,\n     },\n };\n+use clippy_utils::ty::{can_partially_move_ty, is_type_diagnostic_item, peel_mid_ty_refs_is_mutable};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{"}, {"sha": "b08829a8bbf57068d450d9821f4d4791360629ef", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    indent_of, is_type_diagnostic_item, match_qpath, path_to_local_id, paths, reindent_multiline, snippet_opt,\n-    span_lint_and_sugg,\n+    indent_of, match_qpath, path_to_local_id, paths, reindent_multiline, snippet_opt, span_lint_and_sugg,\n };\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind};"}, {"sha": "3a1bde9540d55d8ab9ad415fc3f89ed7e3f0c0d4", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use crate::consts::constant_simple;\n use crate::utils;\n use crate::utils::{path_to_local_id, sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, Expr, ExprKind, Pat, PatKind};\n@@ -96,9 +97,9 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n     if_chain! {\n         if let ExprKind::Match(scrutinee, match_arms, _) = expr.kind;\n         let ty = cx.typeck_results().expr_ty(scrutinee);\n-        if let Some(case) = if utils::is_type_diagnostic_item(cx, ty, sym::option_type) {\n+        if let Some(case) = if is_type_diagnostic_item(cx, ty, sym::option_type) {\n             Some(Case::Option)\n-        } else if utils::is_type_diagnostic_item(cx, ty, sym::result_type) {\n+        } else if is_type_diagnostic_item(cx, ty, sym::result_type) {\n             Some(Case::Result)\n         } else {\n             None"}, {"sha": "73d924cd51ea64522d49686d009e12f05582c2fa", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,6 @@\n-use crate::utils::{\n-    is_copy, is_trait_method, is_type_diagnostic_item, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use crate::utils::is_trait_method;\n+use crate::utils::{remove_blocks, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "79570367ed9777017e8d8fbbe7a960bf31124ffd", "filename": "clippy_lints/src/map_identity.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,5 @@\n-use crate::utils::{\n-    is_adjusted, is_trait_method, is_type_diagnostic_item, match_path, match_var, paths, remove_blocks,\n-    span_lint_and_sugg,\n-};\n+use crate::utils::{is_adjusted, is_trait_method, match_path, match_var, paths, remove_blocks, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Body, Expr, ExprKind, Pat, PatKind, QPath, StmtKind};"}, {"sha": "6f4ce87ea5cf092c350038f93a51605e75e39be5", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, iter_input_pats, method_chain_args, snippet, span_lint_and_then};\n+use crate::utils::{iter_input_pats, method_chain_args, snippet, span_lint_and_then};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "65afd691d622704faf31260e525bfe2fb53fdb60", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, is_type_lang_item, snippet, span_lint_and_sugg};\n+use crate::utils::{snippet, span_lint_and_sugg};\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem, MatchSource};"}, {"sha": "4689974e8509730ad0f393823fc694132b6d2b5d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -2,13 +2,13 @@ use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n-    expr_block, get_parent_expr, implements_trait, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n-    is_type_diagnostic_item, is_wild, match_qpath, match_type, meets_msrv, multispan_sugg, path_to_local,\n-    path_to_local_id, peel_hir_pat_refs, peel_mid_ty_refs, peel_n_hir_expr_refs, remove_blocks, snippet, snippet_block,\n-    snippet_opt, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n-    span_lint_and_then, strip_pat_refs,\n+    expr_block, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath,\n+    meets_msrv, multispan_sugg, path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs,\n+    remove_blocks, snippet, snippet_block, snippet_opt, snippet_with_applicability, span_lint_and_help,\n+    span_lint_and_note, span_lint_and_sugg, span_lint_and_then, strip_pat_refs,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "d9d86ac99126bcdcaf70fe8af75ddc8d21c6ee3c", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,10 +1,10 @@\n-use crate::utils::{match_def_path, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n+use crate::utils::{match_def_path, paths, snippet, span_lint_and_then};\n+use clippy_utils::ty::walk_ptrs_ty_depth;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n use std::iter;\n \n declare_clippy_lint! {"}, {"sha": "073d684dbe32c3e5cc1ff11df2a29729a7438bf8", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use crate::utils::{\n-    in_macro, match_qpath, match_type, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, snippet,\n+    in_macro, match_qpath, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, snippet,\n     snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then, visitors::find_all_ret_expressions,\n };\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "a695c27f11b11f2e00eed37f4c9df1a96ae398d4", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "954d589a47eef34b730feeadce8e974af9eabb48", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_copy, span_lint_and_then, sugg};\n+use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "7bc4ed622dc58dae8ab183187971dbe61f7a60ca", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, match_type, paths, snippet_with_macro_callsite, span_lint_and_sugg};\n+use crate::utils::{paths, snippet_with_macro_callsite, span_lint_and_sugg};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "3de35c930ea7903f0dcf8e4fa8534a62b4574f3c", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, snippet, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{is_expn_of, snippet, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "37c41194b4a76ab9dbc81eff4a1bda50d4fdba6e", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;"}, {"sha": "791fe3647cbb667b626f2e411dba2239e201e15e", "filename": "clippy_lints/src/methods/filetype_is_file.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_parent_expr, match_type, paths, span_lint_and_help};\n+use crate::utils::{get_parent_expr, paths, span_lint_and_help};\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "9b46adaac58a85d9a3bc42c290eb7442872fc7cc", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_trait_def_id, implements_trait, paths, span_lint_and_sugg, sugg};\n+use crate::utils::{get_trait_def_id, paths, span_lint_and_sugg, sugg};\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "35071a25cecdfc209beb8a7b90c9f9ca5a59da26", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{\n-    get_parent_expr, is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use crate::utils::{get_parent_expr, paths, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "42ba62cd4e744bc7290f9bf412d04cfdfb951bfe", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,6 @@\n use super::INEFFICIENT_TO_STRING;\n-use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, paths, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty_depth,\n-};\n+use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_then};\n+use clippy_utils::ty::{is_type_diagnostic_item, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "f28f082e6fc7f9295358122e36c90373362fb6ea", "filename": "clippy_lints/src/methods/into_iter_on_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{has_iter_method, match_trait_method, paths, span_lint_and_sugg};\n+use crate::utils::{match_trait_method, paths, span_lint_and_sugg};\n+use clippy_utils::ty::has_iter_method;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "1e1d3fdcf70b86b16978d3f412e63f8aeea26b41", "filename": "clippy_lints/src/methods/iter_cloned_collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "320fd15d6f8a31d1dcccd9f0c24dcbd8a4304128", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg};\n-\n+use crate::utils::{paths, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "736148d4fb8e2d97a84bc6b82924d5e01c83b15b", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{get_parent_expr, higher, is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{get_parent_expr, higher, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;"}, {"sha": "17600bb81530e675862e16eb7471b2bf2c3d6a3e", "filename": "clippy_lints/src/methods/iter_nth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use crate::methods::derefs_to_slice;\n use crate::methods::iter_nth_zero;\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;"}, {"sha": "0a8837be75267b35ededb66571bd66507cbb4417", "filename": "clippy_lints/src/methods/map_collect_result_unit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "3d1c6408deadce74b9b4d3605683d08a461af41b", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "4346869ae0dee88ea2b1c2432d71d120f0a8586b", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{is_type_diagnostic_item, meets_msrv, snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{meets_msrv, snippet, span_lint, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "3e78b662b896f2dc00c90d2d3ef6b7538977190d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -52,6 +52,7 @@ mod wrong_self_convention;\n mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n+use clippy_utils::ty::{contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n@@ -66,9 +67,9 @@ use rustc_span::symbol::{sym, SymbolStr};\n use rustc_typeck::hir_ty_to_ty;\n \n use crate::utils::{\n-    contains_return, contains_ty, get_trait_def_id, implements_trait, in_macro, is_copy, is_type_diagnostic_item,\n-    iter_input_pats, match_def_path, match_qpath, method_calls, method_chain_args, paths, return_ty,\n-    single_segment_path, snippet_with_applicability, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n+    contains_return, get_trait_def_id, in_macro, iter_input_pats, match_def_path, match_qpath, method_calls,\n+    method_chain_args, paths, return_ty, single_segment_path, snippet_with_applicability, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n \n declare_clippy_lint! {"}, {"sha": "2618d04b24276e3130cd95a5ff42b320c2a7876c", "filename": "clippy_lints/src/methods/ok_expect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{implements_trait, is_type_diagnostic_item, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "17444336a5ef94e63d6ab70e92588a21e612d77c", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,5 @@\n-use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks, snippet,\n-    span_lint_and_sugg,\n-};\n+use crate::utils::{match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "5bd4a5bfe21a968628a7869ae318c1853b3eadf4", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, match_qpath, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "d1c78b3a83396eb5c7a29ed7eec2a59d52bb7156", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{differing_macro_contexts, snippet_with_applicability, span_lint_and_then};\n-use crate::utils::{is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::is_copy;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};"}, {"sha": "9f24fe79089d4cc3bb3430409f26ec8ac94e0bc5", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::{\n-    contains_return, get_trait_def_id, implements_trait, is_type_diagnostic_item, last_path_segment, match_type, paths,\n-    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint_and_sugg,\n+    contains_return, get_trait_def_id, last_path_segment, paths, snippet, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint_and_sugg,\n };\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "d903f1e74d3836b6ceb56fccc26c685db29b4a73", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    is_trait_method, is_type_diagnostic_item, snippet, snippet_with_applicability, span_lint_and_help,\n-    span_lint_and_sugg, strip_pat_refs,\n+    is_trait_method, snippet, snippet_with_applicability, span_lint_and_help, span_lint_and_sugg, strip_pat_refs,\n };\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "5b8cca3493186ecfb4d360cc29303c13243d0fad", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "d260a771c01a41da407610ae159f8361db86b849", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{eager_or_lazy, usage};\n-use crate::utils::{is_type_diagnostic_item, snippet, span_lint_and_sugg};\n+use crate::utils::{snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "efe43a6a952db488b21df8234b089db84e932cab", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;"}, {"sha": "e6b1789a4a80cfa3d8998ca6cd36a8de761b6c9e", "filename": "clippy_lints/src/methods/useless_asref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    get_parent_expr, match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg, walk_ptrs_ty_depth,\n-};\n+use crate::utils::{get_parent_expr, match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::walk_ptrs_ty_depth;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "5c4d4401cd912ef22acd4a3e69bd0d89a819923f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -17,9 +18,9 @@ use rustc_span::symbol::sym;\n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_diagnostic_assoc_item, is_integer_const,\n-    iter_input_pats, last_path_segment, match_qpath, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_lint_hir_and_then, unsext, SpanlessEq,\n+    get_item_name, get_parent_expr, higher, in_constant, is_diagnostic_assoc_item, is_integer_const, iter_input_pats,\n+    last_path_segment, match_qpath, snippet, snippet_opt, span_lint, span_lint_and_sugg, span_lint_and_then,\n+    span_lint_hir_and_then, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {"}, {"sha": "4cc20b8d38c7cb7e7c93f25945ca169188327bf2", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::qualify_min_const_fn::is_min_const_fn;\n-use crate::utils::{\n-    fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, meets_msrv, span_lint, trait_ref_of_method,\n-};\n+use crate::utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, span_lint, trait_ref_of_method};\n+use clippy_utils::ty::has_drop;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};"}, {"sha": "e4a57661f979a05ecf9e6b39fb65ddc62c3ccb46", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability};"}, {"sha": "9f746ce2e1a6110014f355e037b227ef4d02c3af", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -2,7 +2,8 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{is_type_diagnostic_item, span_lint};\n+use crate::utils::span_lint;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};"}, {"sha": "14989283681d1b5f0cb8246f0b702efa61d15896", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,6 @@\n use crate::utils::ptr::get_spans;\n-use crate::utils::{\n-    get_trait_def_id, implements_trait, is_copy, is_self, is_type_diagnostic_item, multispan_sugg, paths, snippet,\n-    snippet_opt, span_lint_and_then,\n-};\n+use crate::utils::{get_trait_def_id, is_self, multispan_sugg, paths, snippet, snippet_opt, span_lint_and_then};\n+use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "d616290ee9c9eff4bcaf98297f811b40c6489558", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -175,8 +176,8 @@ fn is_some_or_ok_call<'a>(\n             let outer_ty = cx.typeck_results().expr_ty(expr);\n \n             // Check if outer and inner type are Option\n-            let outer_is_some = utils::is_type_diagnostic_item(cx, outer_ty, sym::option_type);\n-            let inner_is_some = utils::is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n+            let outer_is_some = is_type_diagnostic_item(cx, outer_ty, sym::option_type);\n+            let inner_is_some = is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n \n             // Check for Option MSRV\n             let meets_option_msrv = utils::meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_OPTION_MSRV);\n@@ -185,8 +186,8 @@ fn is_some_or_ok_call<'a>(\n             }\n \n             // Check if outer and inner type are Result\n-            let outer_is_result = utils::is_type_diagnostic_item(cx, outer_ty, sym::result_type);\n-            let inner_is_result = utils::is_type_diagnostic_item(cx, inner_ty, sym::result_type);\n+            let outer_is_result = is_type_diagnostic_item(cx, outer_ty, sym::result_type);\n+            let inner_is_result = is_type_diagnostic_item(cx, inner_ty, sym::result_type);\n \n             // Additional check: if the error type of the Result can be converted\n             // via the From trait, then don't match"}, {"sha": "67d49f06ad91fd19031133780ae64bf2064044af", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -60,15 +61,15 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n \n                 let implements_ord = {\n                     if let Some(id) = utils::get_trait_def_id(cx, &paths::ORD) {\n-                        utils::implements_trait(cx, ty, id, &[])\n+                        implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;\n                     }\n                 };\n \n                 let implements_partial_ord = {\n                     if let Some(id) = cx.tcx.lang_items().partial_ord_trait() {\n-                        utils::implements_trait(cx, ty, id, &[])\n+                        implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;\n                     }"}, {"sha": "c377d373ad6d08dd07d0b4542674c66ac2ada712", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{has_drop, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{snippet_opt, span_lint, span_lint_and_sugg};\n+use clippy_utils::ty::has_drop;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};"}, {"sha": "71e77932f7a4e792eabaa6164ec2b37350bbbaa2", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_type, paths, span_lint};\n+use crate::utils::{paths, span_lint};\n+use clippy_utils::ty::match_type;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "8a6d257848f16c9be9d33cca1b3d50a5e29a9aa4", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,8 @@\n use crate::utils;\n use crate::utils::eager_or_lazy;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{is_type_diagnostic_item, paths, span_lint_and_sugg};\n+use crate::utils::{paths, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n \n use rustc_errors::Applicability;"}, {"sha": "1821e2611ff056e163f891367153aaa129c8c52e", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{find_macro_calls, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use crate::utils::{find_macro_calls, return_ty, span_lint_and_then};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "c9b59b89306ce615ced7bf9a0ad86be9b4a01c22", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use std::cmp;\n \n-use crate::utils::{is_copy, is_self_ty, snippet, span_lint_and_sugg};\n+use crate::utils::{is_self_ty, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_ast::attr;\n use rustc_errors::Applicability;"}, {"sha": "46533682d429a8d375210b184b709fc704a26760", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "c2649a135eb2808e4178c319a49d9dfb041d4df0", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,10 +1,8 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n use crate::utils::ptr::get_spans;\n-use crate::utils::{\n-    is_allowed, is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, walk_ptrs_hir_ty,\n-};\n+use crate::utils::{is_allowed, match_qpath, paths, snippet_opt, span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{"}, {"sha": "dc00aaffa58147ba1d45afa1871d33b692623ae6", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n@@ -7,10 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    eq_expr_value, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n-    span_lint_and_sugg,\n-};\n+use crate::utils::{eq_expr_value, match_def_path, match_qpath, paths, snippet_with_applicability, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions that could be replaced by the question mark operator."}, {"sha": "d2e5a5db3724f27edd6770537052d409070bb5d1", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    fn_has_unsatisfiable_preds, has_drop, is_copy, is_type_diagnostic_item, match_def_path, paths, snippet_opt,\n-    span_lint_hir, span_lint_hir_and_then, walk_ptrs_ty_depth,\n+    fn_has_unsatisfiable_preds, match_def_path, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n };\n+use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n use rustc_errors::Applicability;"}, {"sha": "992d19015848dde521d47b4c2d46e7114603b5a9", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,11 +1,12 @@\n+use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::{lint::in_external_macro, ty::TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_type_lang_item, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for redundant slicing expressions which use the full range, and"}, {"sha": "7d668739c5a57cb56d2fffa825e811d54efd4e57", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_context, Constant};\n-use crate::utils::{in_macro, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "62b4b40df458bc4da4818d3287fdd9e5f2b036ac", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,10 @@\n+use crate::utils::SpanlessEq;\n+use crate::utils::{\n+    get_parent_expr, is_allowed, match_function_call, method_calls, paths, span_lint, span_lint_and_help,\n+    span_lint_and_sugg,\n+};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -7,14 +14,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::SpanlessEq;\n-use crate::utils::{\n-    get_parent_expr, is_allowed, is_type_diagnostic_item, match_function_call, method_calls, paths, span_lint,\n-    span_lint_and_help, span_lint_and_sugg,\n-};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for string appends of the form `x = x + y` (without\n     /// `let`!)."}, {"sha": "ba2d73a8228be46aa1333a4bdfcad3435f8cf00c", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    differing_macro_contexts, eq_expr_value, is_type_diagnostic_item, snippet_with_applicability, span_lint_and_then,\n-};\n+use crate::utils::{differing_macro_contexts, eq_expr_value, snippet_with_applicability, span_lint_and_then};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, StmtKind};"}, {"sha": "f4b0f20599338f8b759b4b83768c9f7525c96858", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_normalizable, last_path_segment, snippet};\n+use crate::utils::{last_path_segment, snippet};\n+use clippy_utils::ty::is_normalizable;\n use if_chain::if_chain;\n use rustc_hir::{Expr, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;"}, {"sha": "bdb81ea32d7b2b2646734474d5cb199ef0d2414c", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,7 +1,8 @@\n use crate::utils::{\n-    differing_macro_contexts, in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet,\n-    snippet_with_macro_callsite, span_lint_and_sugg,\n+    differing_macro_contexts, in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n+    span_lint_and_sugg,\n };\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem, MatchSource, QPath};"}, {"sha": "fcd38718b9b54a38f1d25fbf8a9f0d4464fb0905", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -13,6 +13,7 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n+use clippy_utils::ty::{is_isize_or_usize, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -37,9 +38,9 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, indent_of, int_bits, is_isize_or_usize,\n-    is_type_diagnostic_item, match_path, multispan_sugg, reindent_multiline, sext, snippet, snippet_opt,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_then, unsext,\n+    clip, comparisons, differing_macro_contexts, higher, indent_of, int_bits, match_path, multispan_sugg,\n+    reindent_multiline, sext, snippet, snippet_opt, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n+    span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {"}, {"sha": "8c34ca16e6f9ffe418b3f431b62397ef84e0cb83", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_lang_item, match_function_call, paths, span_lint_and_help};\n+use crate::utils::{match_function_call, paths, span_lint_and_help};\n+use clippy_utils::ty::is_type_lang_item;\n use rustc_hir::{lang_items, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "7e385b00646fe124313c8ebe50570d419d74942f", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,5 +1,6 @@\n use crate::utils;\n use crate::utils::sugg::Sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n@@ -176,7 +177,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n         if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n-        if utils::is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::vec_type);\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::vec_type);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &[\n             Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},"}, {"sha": "43b5f138a429eacfab9d22e7142fa96d3726b78c", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    differing_macro_contexts, is_type_diagnostic_item, span_lint_and_then, usage::is_potentially_mutated,\n-};\n+use crate::utils::{differing_macro_contexts, span_lint_and_then, usage::is_potentially_mutated};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, Path, QPath, UnOp};"}, {"sha": "6a8f8211566cf778135c9a8173d9ccfd03ebba31", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,9 @@\n-use crate::utils::{is_type_diagnostic_item, method_chain_args, return_ty, span_lint_and_then};\n+use crate::utils::{method_chain_args, return_ty, span_lint_and_then};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Expr, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n@@ -66,9 +69,6 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n     }\n }\n \n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Expr, ImplItemKind};\n-\n struct FindExpectUnwrap<'a, 'tcx> {\n     lcx: &'a LateContext<'tcx>,\n     typeck_results: &'tcx ty::TypeckResults<'tcx>,"}, {"sha": "23032c74f9a858fcb6b36b95d7c767e1e0cf1ed3", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_parent_expr, is_type_diagnostic_item, match_def_path, match_trait_method, paths, snippet,\n-    snippet_with_macro_callsite, span_lint_and_help, span_lint_and_sugg,\n+    get_parent_expr, match_def_path, match_trait_method, paths, snippet, snippet_with_macro_callsite,\n+    span_lint_and_help, span_lint_and_sugg,\n };\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};"}, {"sha": "2f4bc74ef641c1f3f0c2ef81067cffe1a496c467", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,8 +1,9 @@\n use crate::consts::{constant_simple, Constant};\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, run_lints, snippet,\n-    span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n+    is_expn_of, match_def_path, match_qpath, method_calls, path_to_res, paths, run_lints, snippet, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, ModKind, NodeId};\n use rustc_ast::visit::FnKind;"}, {"sha": "682cc35a7d77eb83166fca4f8eabebd7b140edbb", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::rustc_target::abi::LayoutOf;\n-use crate::utils::{higher, is_copy, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{higher, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};"}, {"sha": "b3262a253e7bbc355de52b4fff3bbf5885de79a6", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, path_to_local, path_to_local_id, paths, snippet, span_lint_and_sugg,\n-};\n+use crate::utils::{match_def_path, path_to_local, path_to_local_id, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "079a4279c60ce35e55417440d2d5d4e1a7518359", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_type, paths, span_lint_and_help};\n+use crate::utils::{paths, span_lint_and_help};\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "ab27b60cfa4a55182c74b73b8ccb0fe44ed56faf", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -7,7 +8,7 @@ use rustc_span::sym;\n use rustc_target::abi::LayoutOf as _;\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{is_normalizable, is_type_diagnostic_item, match_type, paths, span_lint_and_help};\n+use crate::utils::{paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for maps with zero-sized value types anywhere in the code."}, {"sha": "88b115a63d78829680ad81a6ea911f1d9228c9fc", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -9,7 +9,8 @@\n //!  - or-fun-call\n //!  - option-if-let-else\n \n-use crate::{is_ctor_or_promotable_const_function, is_type_diagnostic_item};\n+use crate::is_ctor_or_promotable_const_function;\n+use crate::ty::is_type_diagnostic_item;\n use rustc_hir::def::{DefKind, Res};\n \n use rustc_hir::intravisit;"}, {"sha": "366962d8b77727f8c7252f3f73be86a619abe52b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 24, "deletions": 299, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -42,6 +42,7 @@ pub mod paths;\n pub mod ptr;\n pub mod qualify_min_const_fn;\n pub mod sugg;\n+pub mod ty;\n pub mod usage;\n pub mod visitors;\n \n@@ -54,7 +55,7 @@ use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n \n use if_chain::if_chain;\n-use rustc_ast::ast::{self, Attribute, BorrowKind, LitKind, Mutability};\n+use rustc_ast::ast::{self, Attribute, BorrowKind, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -65,14 +66,13 @@ use rustc_hir::{\n     def, Arm, BindingAnnotation, Block, Body, Constness, CrateItem, Expr, ExprKind, FnDecl, ForeignItem, GenericArgs,\n     GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local, MacroDef,\n     MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, StructField, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, Unsafety, Variant, Visibility,\n+    TraitRef, TyKind, Variant, Visibility,\n };\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, layout::IntegerExt, DefIdTree, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n+use rustc_middle::ty as rustc_ty;\n+use rustc_middle::ty::{layout::IntegerExt, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{self, ExpnKind, MacroKind};\n@@ -81,11 +81,10 @@ use rustc_span::sym;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{BytePos, Pos, Span, SyntaxContext, DUMMY_SP};\n use rustc_target::abi::Integer;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n-use std::collections::HashMap;\n+use crate::ty::is_recursively_primitive_type;\n \n pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n     if let Ok(version) = RustcVersion::parse(msrv) {\n@@ -256,35 +255,6 @@ pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n-/// Checks if type is struct, enum or union type with the given def path.\n-///\n-/// If the type is a diagnostic item, use `is_type_diagnostic_item` instead.\n-/// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n-pub fn match_type(cx: &LateContext<'_>, ty: Ty<'_>, path: &[&str]) -> bool {\n-    match ty.kind() {\n-        ty::Adt(adt, _) => match_def_path(cx, adt.did, path),\n-        _ => false,\n-    }\n-}\n-\n-/// Checks if the type is equal to a diagnostic item\n-///\n-/// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n-pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n-    match ty.kind() {\n-        ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),\n-        _ => false,\n-    }\n-}\n-\n-/// Checks if the type is equal to a lang item\n-pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangItem) -> bool {\n-    match ty.kind() {\n-        ty::Adt(adt, _) => cx.tcx.lang_items().require(lang_item).unwrap() == adt.did,\n-        _ => false,\n-    }\n-}\n-\n /// Checks if the first type parameter is a lang item.\n pub fn is_ty_param_lang_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item: LangItem) -> Option<&'tcx hir::Ty<'tcx>> {\n     let ty = get_qpath_generic_tys(qpath).next()?;\n@@ -319,11 +289,6 @@ pub fn is_ty_param_diagnostic_item(\n     }\n }\n \n-/// Return `true` if the passed `typ` is `isize` or `usize`.\n-pub fn is_isize_or_usize(typ: Ty<'_>) -> bool {\n-    matches!(typ.kind(), ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize))\n-}\n-\n /// Checks if the method call given in `expr` belongs to the given trait.\n /// This is a deprecated function, consider using [`is_trait_method`].\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {\n@@ -338,10 +303,10 @@ pub fn is_diagnostic_assoc_item(cx: &LateContext<'_>, def_id: DefId, diag_item:\n     cx.tcx\n         .opt_associated_item(def_id)\n         .and_then(|associated_item| match associated_item.container {\n-            ty::TraitContainer(assoc_def_id) => Some(assoc_def_id),\n-            ty::ImplContainer(assoc_def_id) => match cx.tcx.type_of(assoc_def_id).kind() {\n-                ty::Adt(adt, _) => Some(adt.did),\n-                ty::Slice(_) => cx.tcx.get_diagnostic_item(sym::slice), // this isn't perfect but it works\n+            rustc_ty::TraitContainer(assoc_def_id) => Some(assoc_def_id),\n+            rustc_ty::ImplContainer(assoc_def_id) => match cx.tcx.type_of(assoc_def_id).kind() {\n+                rustc_ty::Adt(adt, _) => Some(adt.did),\n+                rustc_ty::Slice(_) => cx.tcx.get_diagnostic_item(sym::slice), // this isn't perfect but it works\n                 _ => None,\n             },\n         })\n@@ -540,26 +505,6 @@ pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n     }\n }\n \n-/// Checks whether a type implements a trait.\n-/// See also `get_trait_def_id`.\n-pub fn implements_trait<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    ty: Ty<'tcx>,\n-    trait_id: DefId,\n-    ty_params: &[GenericArg<'tcx>],\n-) -> bool {\n-    // Do not check on infer_types to avoid panic in evaluate_obligation.\n-    if ty.has_infer_types() {\n-        return false;\n-    }\n-    let ty = cx.tcx.erase_regions(ty);\n-    if ty.has_escaping_bound_vars() {\n-        return false;\n-    }\n-    let ty_params = cx.tcx.mk_substs(ty_params.iter());\n-    cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n-}\n-\n /// Gets the `hir::TraitRef` of the trait the given method is implemented for.\n ///\n /// Use this if you want to find the `TraitRef` of the `Add` trait in this example:\n@@ -587,26 +532,6 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n     None\n }\n \n-/// Checks whether this type implements `Drop`.\n-pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.ty_adt_def() {\n-        Some(def) => def.has_dtor(cx.tcx),\n-        None => false,\n-    }\n-}\n-\n-/// Checks whether a type can be partially moved.\n-pub fn can_partially_move_ty(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    if has_drop(cx, ty) || is_copy(cx, ty) {\n-        return false;\n-    }\n-    match ty.kind() {\n-        ty::Param(_) => false,\n-        ty::Adt(def, subs) => def.all_fields().any(|f| !is_copy(cx, f.ty(cx.tcx, subs))),\n-        _ => true,\n-    }\n-}\n-\n /// Returns the method names and argument list of nested method call expressions that make up\n /// `expr`. method/span lists are sorted with the most recent call first.\n pub fn method_calls<'tcx>(\n@@ -1155,26 +1080,6 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n     }\n }\n \n-/// Returns the base type for HIR references and pointers.\n-pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n-    match ty.kind {\n-        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(&mut_ty.ty),\n-        _ => ty,\n-    }\n-}\n-\n-/// Returns the base type for references and raw pointers, and count reference\n-/// depth.\n-pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {\n-    fn inner(ty: Ty<'_>, depth: usize) -> (Ty<'_>, usize) {\n-        match ty.kind() {\n-            ty::Ref(_, ty, _) => inner(ty, depth + 1),\n-            _ => (ty, depth),\n-        }\n-    }\n-    inner(ty, 0)\n-}\n-\n /// Checks whether the given expression is a constant integer of the given value.\n /// unlike `is_integer_literal`, this version does const folding\n pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool {\n@@ -1270,26 +1175,6 @@ pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx>\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n-/// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n-    ty.walk().any(|inner| match inner.unpack() {\n-        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n-        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-    })\n-}\n-\n-/// Returns `true` if the given type is an `unsafe` function.\n-pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        ty::FnDef(..) | ty::FnPtr(_) => ty.fn_sig(cx.tcx).unsafety() == Unsafety::Unsafe,\n-        _ => false,\n-    }\n-}\n-\n-pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n-}\n-\n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n@@ -1338,11 +1223,13 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         },\n         PatKind::Slice(ref head, ref middle, ref tail) => {\n             match &cx.typeck_results().node_type(pat.hir_id).kind() {\n-                ty::Slice(..) => {\n+                rustc_ty::Slice(..) => {\n                     // [..] is the only irrefutable slice pattern.\n                     !head.is_empty() || middle.is_none() || !tail.is_empty()\n                 },\n-                ty::Array(..) => are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat)),\n+                rustc_ty::Array(..) => {\n+                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n+                },\n                 _ => {\n                     // unreachable!()\n                     true\n@@ -1454,26 +1341,26 @@ pub fn strip_pat_refs<'hir>(mut pat: &'hir Pat<'hir>) -> &'hir Pat<'hir> {\n     pat\n }\n \n-pub fn int_bits(tcx: TyCtxt<'_>, ity: ty::IntTy) -> u64 {\n+pub fn int_bits(tcx: TyCtxt<'_>, ity: rustc_ty::IntTy) -> u64 {\n     Integer::from_int_ty(&tcx, ity).size().bits()\n }\n \n #[allow(clippy::cast_possible_wrap)]\n /// Turn a constant int byte representation into an i128\n-pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: ty::IntTy) -> i128 {\n+pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: rustc_ty::IntTy) -> i128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as i128) << amt) >> amt\n }\n \n #[allow(clippy::cast_sign_loss)]\n /// clip unused bytes\n-pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: ty::IntTy) -> u128 {\n+pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: rustc_ty::IntTy) -> u128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as u128) << amt) >> amt\n }\n \n /// clip unused bytes\n-pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: ty::UintTy) -> u128 {\n+pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: rustc_ty::UintTy) -> u128 {\n     let bits = Integer::from_uint_ty(&tcx, ity).size().bits();\n     let amt = 128 - bits;\n     (u << amt) >> amt\n@@ -1526,47 +1413,6 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool\n     false\n }\n \n-/// Returns true if ty has `iter` or `iter_mut` methods\n-pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n-    // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n-    // exists and has the desired signature. Unfortunately FnCtxt is not exported\n-    // so we can't use its `lookup_method` method.\n-    let into_iter_collections: &[Symbol] = &[\n-        sym::vec_type,\n-        sym::option_type,\n-        sym::result_type,\n-        sym::BTreeMap,\n-        sym::BTreeSet,\n-        sym::vecdeque_type,\n-        sym::LinkedList,\n-        sym::BinaryHeap,\n-        sym::hashset_type,\n-        sym::hashmap_type,\n-        sym::PathBuf,\n-        sym::Path,\n-        sym::Receiver,\n-    ];\n-\n-    let ty_to_check = match probably_ref_ty.kind() {\n-        ty::Ref(_, ty_to_check, _) => ty_to_check,\n-        _ => probably_ref_ty,\n-    };\n-\n-    let def_id = match ty_to_check.kind() {\n-        ty::Array(..) => return Some(sym::array),\n-        ty::Slice(..) => return Some(sym::slice),\n-        ty::Adt(adt, _) => adt.did,\n-        _ => return None,\n-    };\n-\n-    for &name in into_iter_collections {\n-        if cx.tcx.is_diagnostic_item(name, def_id) {\n-            return Some(cx.tcx.item_name(def_id));\n-        }\n-    }\n-    None\n-}\n-\n /// Matches a function call with the given path and returns the arguments.\n ///\n /// Usage:\n@@ -1591,51 +1437,6 @@ pub fn match_function_call<'tcx>(\n     None\n }\n \n-// FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n-// this function can be removed once the `normalizie` method does not panic when normalization does\n-// not succeed\n-/// Checks if `Ty` is normalizable. This function is useful\n-/// to avoid crashes on `layout_of`.\n-pub fn is_normalizable<'tcx>(cx: &LateContext<'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n-    is_normalizable_helper(cx, param_env, ty, &mut HashMap::new())\n-}\n-\n-fn is_normalizable_helper<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    ty: Ty<'tcx>,\n-    cache: &mut HashMap<Ty<'tcx>, bool>,\n-) -> bool {\n-    if let Some(&cached_result) = cache.get(ty) {\n-        return cached_result;\n-    }\n-    // prevent recursive loops, false-negative is better than endless loop leading to stack overflow\n-    cache.insert(ty, false);\n-    let result = cx.tcx.infer_ctxt().enter(|infcx| {\n-        let cause = rustc_middle::traits::ObligationCause::dummy();\n-        if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n-            match ty.kind() {\n-                ty::Adt(def, substs) => def.variants.iter().all(|variant| {\n-                    variant\n-                        .fields\n-                        .iter()\n-                        .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n-                }),\n-                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n-                    GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n-                        is_normalizable_helper(cx, param_env, inner_ty, cache)\n-                    },\n-                    _ => true, // if inner_ty == ty, we've already checked it\n-                }),\n-            }\n-        } else {\n-            false\n-        }\n-    });\n-    cache.insert(ty, result);\n-    result\n-}\n-\n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n     // We have to convert `syms` to `&[Symbol]` here because rustc's `match_def_path`\n     // accepts only that. We should probably move to Symbols in Clippy as well.\n@@ -1721,44 +1522,6 @@ pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n     attr_by_name(attrs, \"must_use\")\n }\n \n-// Returns whether the type has #[must_use] attribute\n-pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        ty::Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n-        ty::Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n-        ty::Slice(ref ty)\n-        | ty::Array(ref ty, _)\n-        | ty::RawPtr(ty::TypeAndMut { ref ty, .. })\n-        | ty::Ref(_, ref ty, _) => {\n-            // for the Array case we don't need to care for the len == 0 case\n-            // because we don't want to lint functions returning empty arrays\n-            is_must_use_ty(cx, *ty)\n-        },\n-        ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n-                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.kind().skip_binder() {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        },\n-        ty::Dynamic(binder, _) => {\n-            for predicate in binder.iter() {\n-                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        },\n-        _ => false,\n-    }\n-}\n-\n // check if expr is calling method or function with #[must_use] attribute\n pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let did = match expr.kind {\n@@ -1853,28 +1616,16 @@ pub fn run_lints(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bo\n     })\n }\n \n-/// Returns true iff the given type is a primitive (a bool or char, any integer or floating-point\n-/// number type, a str, or an array, slice, or tuple of those types).\n-pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n-        ty::Ref(_, inner, _) if *inner.kind() == ty::Str => true,\n-        ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(inner_type),\n-        ty::Tuple(inner_types) => inner_types.types().all(is_recursively_primitive_type),\n-        _ => false,\n-    }\n-}\n-\n /// Returns Option<String> where String is a textual representation of the type encapsulated in the\n /// slice iff the given expression is a slice of primitives (as defined in the\n /// `is_recursively_primitive_type` function) and None otherwise.\n pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n     let expr_type = cx.typeck_results().expr_ty_adjusted(expr);\n     let expr_kind = expr_type.kind();\n     let is_primitive = match expr_kind {\n-        ty::Slice(element_type) => is_recursively_primitive_type(element_type),\n-        ty::Ref(_, inner_ty, _) if matches!(inner_ty.kind(), &ty::Slice(_)) => {\n-            if let ty::Slice(element_type) = inner_ty.kind() {\n+        rustc_ty::Slice(element_type) => is_recursively_primitive_type(element_type),\n+        rustc_ty::Ref(_, inner_ty, _) if matches!(inner_ty.kind(), &rustc_ty::Slice(_)) => {\n+            if let rustc_ty::Slice(element_type) = inner_ty.kind() {\n                 is_recursively_primitive_type(element_type)\n             } else {\n                 unreachable!()\n@@ -1887,9 +1638,9 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n         // if we have wrappers like Array, Slice or Tuple, print these\n         // and get the type enclosed in the slice ref\n         match expr_type.peel_refs().walk().nth(1).unwrap().expect_ty().kind() {\n-            ty::Slice(..) => return Some(\"slice\".into()),\n-            ty::Array(..) => return Some(\"array\".into()),\n-            ty::Tuple(..) => return Some(\"tuple\".into()),\n+            rustc_ty::Slice(..) => return Some(\"slice\".into()),\n+            rustc_ty::Array(..) => return Some(\"array\".into()),\n+            rustc_ty::Tuple(..) => return Some(\"tuple\".into()),\n             _ => {\n                 // is_recursively_primitive_type() should have taken care\n                 // of the rest and we can rely on the type that is found\n@@ -1973,32 +1724,6 @@ pub fn peel_hir_expr_refs(expr: &'a Expr<'a>) -> (&'a Expr<'a>, usize) {\n     f(expr, 0)\n }\n \n-/// Peels off all references on the type. Returns the underlying type and the number of references\n-/// removed.\n-pub fn peel_mid_ty_refs(ty: Ty<'_>) -> (Ty<'_>, usize) {\n-    fn peel(ty: Ty<'_>, count: usize) -> (Ty<'_>, usize) {\n-        if let ty::Ref(_, ty, _) = ty.kind() {\n-            peel(ty, count + 1)\n-        } else {\n-            (ty, count)\n-        }\n-    }\n-    peel(ty, 0)\n-}\n-\n-/// Peels off all references on the type.Returns the underlying type, the number of references\n-/// removed, and whether the pointer is ultimately mutable or not.\n-pub fn peel_mid_ty_refs_is_mutable(ty: Ty<'_>) -> (Ty<'_>, usize, Mutability) {\n-    fn f(ty: Ty<'_>, count: usize, mutability: Mutability) -> (Ty<'_>, usize, Mutability) {\n-        match ty.kind() {\n-            ty::Ref(_, ty, Mutability::Mut) => f(ty, count + 1, mutability),\n-            ty::Ref(_, ty, Mutability::Not) => f(ty, count + 1, Mutability::Not),\n-            _ => (ty, count, mutability),\n-        }\n-    }\n-    f(ty, 0, Mutability::Mut)\n-}\n-\n #[macro_export]\n macro_rules! unwrap_cargo_metadata {\n     ($cx: ident, $lint: ident, $deps: expr) => {{"}, {"sha": "f4a1ae67da3c0391f2708f4c9848f1e6dda6c3ef", "filename": "clippy_utils/src/ty.rs", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f8d6089e2dba4006f0452ab25262735bbbf61/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=eb7f8d6089e2dba4006f0452ab25262735bbbf61", "patch": "@@ -0,0 +1,296 @@\n+//! Util methods for [`rustc_middle::ty`]\n+\n+#![allow(clippy::module_name_repetitions)]\n+\n+use std::collections::HashMap;\n+\n+use rustc_ast::ast::Mutability;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{TyKind, Unsafety};\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n+use rustc_middle::ty::{self, IntTy, Ty, TypeFoldable, UintTy};\n+use rustc_span::sym;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::DUMMY_SP;\n+use rustc_trait_selection::traits::query::normalize::AtExt;\n+\n+use crate::{match_def_path, must_use_attr};\n+\n+pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n+}\n+\n+/// Checks whether a type can be partially moved.\n+pub fn can_partially_move_ty(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    if has_drop(cx, ty) || is_copy(cx, ty) {\n+        return false;\n+    }\n+    match ty.kind() {\n+        ty::Param(_) => false,\n+        ty::Adt(def, subs) => def.all_fields().any(|f| !is_copy(cx, f.ty(cx.tcx, subs))),\n+        _ => true,\n+    }\n+}\n+\n+/// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n+pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n+        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n+        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+    })\n+}\n+\n+/// Returns true if ty has `iter` or `iter_mut` methods\n+pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n+    // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n+    // exists and has the desired signature. Unfortunately FnCtxt is not exported\n+    // so we can't use its `lookup_method` method.\n+    let into_iter_collections: &[Symbol] = &[\n+        sym::vec_type,\n+        sym::option_type,\n+        sym::result_type,\n+        sym::BTreeMap,\n+        sym::BTreeSet,\n+        sym::vecdeque_type,\n+        sym::LinkedList,\n+        sym::BinaryHeap,\n+        sym::hashset_type,\n+        sym::hashmap_type,\n+        sym::PathBuf,\n+        sym::Path,\n+        sym::Receiver,\n+    ];\n+\n+    let ty_to_check = match probably_ref_ty.kind() {\n+        ty::Ref(_, ty_to_check, _) => ty_to_check,\n+        _ => probably_ref_ty,\n+    };\n+\n+    let def_id = match ty_to_check.kind() {\n+        ty::Array(..) => return Some(sym::array),\n+        ty::Slice(..) => return Some(sym::slice),\n+        ty::Adt(adt, _) => adt.did,\n+        _ => return None,\n+    };\n+\n+    for &name in into_iter_collections {\n+        if cx.tcx.is_diagnostic_item(name, def_id) {\n+            return Some(cx.tcx.item_name(def_id));\n+        }\n+    }\n+    None\n+}\n+\n+/// Checks whether a type implements a trait.\n+/// See also `get_trait_def_id`.\n+pub fn implements_trait<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    ty: Ty<'tcx>,\n+    trait_id: DefId,\n+    ty_params: &[GenericArg<'tcx>],\n+) -> bool {\n+    // Do not check on infer_types to avoid panic in evaluate_obligation.\n+    if ty.has_infer_types() {\n+        return false;\n+    }\n+    let ty = cx.tcx.erase_regions(ty);\n+    if ty.has_escaping_bound_vars() {\n+        return false;\n+    }\n+    let ty_params = cx.tcx.mk_substs(ty_params.iter());\n+    cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n+}\n+\n+/// Checks whether this type implements `Drop`.\n+pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.ty_adt_def() {\n+        Some(def) => def.has_dtor(cx.tcx),\n+        None => false,\n+    }\n+}\n+\n+// Returns whether the type has #[must_use] attribute\n+pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.kind() {\n+        ty::Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n+        ty::Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n+        ty::Slice(ref ty)\n+        | ty::Array(ref ty, _)\n+        | ty::RawPtr(ty::TypeAndMut { ref ty, .. })\n+        | ty::Ref(_, ref ty, _) => {\n+            // for the Array case we don't need to care for the len == 0 case\n+            // because we don't want to lint functions returning empty arrays\n+            is_must_use_ty(cx, *ty)\n+        },\n+        ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n+        ty::Opaque(ref def_id, _) => {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n+                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.kind().skip_binder() {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n+                        return true;\n+                    }\n+                }\n+            }\n+            false\n+        },\n+        ty::Dynamic(binder, _) => {\n+            for predicate in binder.iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n+                        return true;\n+                    }\n+                }\n+            }\n+            false\n+        },\n+        _ => false,\n+    }\n+}\n+\n+// FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n+// this function can be removed once the `normalizie` method does not panic when normalization does\n+// not succeed\n+/// Checks if `Ty` is normalizable. This function is useful\n+/// to avoid crashes on `layout_of`.\n+pub fn is_normalizable<'tcx>(cx: &LateContext<'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n+    is_normalizable_helper(cx, param_env, ty, &mut HashMap::new())\n+}\n+\n+fn is_normalizable_helper<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    cache: &mut HashMap<Ty<'tcx>, bool>,\n+) -> bool {\n+    if let Some(&cached_result) = cache.get(ty) {\n+        return cached_result;\n+    }\n+    // prevent recursive loops, false-negative is better than endless loop leading to stack overflow\n+    cache.insert(ty, false);\n+    let result = cx.tcx.infer_ctxt().enter(|infcx| {\n+        let cause = rustc_middle::traits::ObligationCause::dummy();\n+        if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n+            match ty.kind() {\n+                ty::Adt(def, substs) => def.variants.iter().all(|variant| {\n+                    variant\n+                        .fields\n+                        .iter()\n+                        .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n+                }),\n+                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n+                    GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n+                        is_normalizable_helper(cx, param_env, inner_ty, cache)\n+                    },\n+                    _ => true, // if inner_ty == ty, we've already checked it\n+                }),\n+            }\n+        } else {\n+            false\n+        }\n+    });\n+    cache.insert(ty, result);\n+    result\n+}\n+\n+/// Returns true iff the given type is a primitive (a bool or char, any integer or floating-point\n+/// number type, a str, or an array, slice, or tuple of those types).\n+pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n+    match ty.kind() {\n+        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n+        ty::Ref(_, inner, _) if *inner.kind() == ty::Str => true,\n+        ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(inner_type),\n+        ty::Tuple(inner_types) => inner_types.types().all(is_recursively_primitive_type),\n+        _ => false,\n+    }\n+}\n+\n+/// Checks if the type is equal to a diagnostic item\n+///\n+/// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n+pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n+    match ty.kind() {\n+        ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),\n+        _ => false,\n+    }\n+}\n+\n+/// Checks if the type is equal to a lang item\n+pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangItem) -> bool {\n+    match ty.kind() {\n+        ty::Adt(adt, _) => cx.tcx.lang_items().require(lang_item).unwrap() == adt.did,\n+        _ => false,\n+    }\n+}\n+\n+/// Return `true` if the passed `typ` is `isize` or `usize`.\n+pub fn is_isize_or_usize(typ: Ty<'_>) -> bool {\n+    matches!(typ.kind(), ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize))\n+}\n+\n+/// Checks if type is struct, enum or union type with the given def path.\n+///\n+/// If the type is a diagnostic item, use `is_type_diagnostic_item` instead.\n+/// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n+pub fn match_type(cx: &LateContext<'_>, ty: Ty<'_>, path: &[&str]) -> bool {\n+    match ty.kind() {\n+        ty::Adt(adt, _) => match_def_path(cx, adt.did, path),\n+        _ => false,\n+    }\n+}\n+\n+/// Peels off all references on the type. Returns the underlying type and the number of references\n+/// removed.\n+pub fn peel_mid_ty_refs(ty: Ty<'_>) -> (Ty<'_>, usize) {\n+    fn peel(ty: Ty<'_>, count: usize) -> (Ty<'_>, usize) {\n+        if let ty::Ref(_, ty, _) = ty.kind() {\n+            peel(ty, count + 1)\n+        } else {\n+            (ty, count)\n+        }\n+    }\n+    peel(ty, 0)\n+}\n+\n+/// Peels off all references on the type.Returns the underlying type, the number of references\n+/// removed, and whether the pointer is ultimately mutable or not.\n+pub fn peel_mid_ty_refs_is_mutable(ty: Ty<'_>) -> (Ty<'_>, usize, Mutability) {\n+    fn f(ty: Ty<'_>, count: usize, mutability: Mutability) -> (Ty<'_>, usize, Mutability) {\n+        match ty.kind() {\n+            ty::Ref(_, ty, Mutability::Mut) => f(ty, count + 1, mutability),\n+            ty::Ref(_, ty, Mutability::Not) => f(ty, count + 1, Mutability::Not),\n+            _ => (ty, count, mutability),\n+        }\n+    }\n+    f(ty, 0, Mutability::Mut)\n+}\n+\n+/// Returns `true` if the given type is an `unsafe` function.\n+pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.kind() {\n+        ty::FnDef(..) | ty::FnPtr(_) => ty.fn_sig(cx.tcx).unsafety() == Unsafety::Unsafe,\n+        _ => false,\n+    }\n+}\n+\n+/// Returns the base type for HIR references and pointers.\n+pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n+    match ty.kind {\n+        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(&mut_ty.ty),\n+        _ => ty,\n+    }\n+}\n+\n+/// Returns the base type for references and raw pointers, and count reference\n+/// depth.\n+pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {\n+    fn inner(ty: Ty<'_>, depth: usize) -> (Ty<'_>, usize) {\n+        match ty.kind() {\n+            ty::Ref(_, ty, _) => inner(ty, depth + 1),\n+            _ => (ty, depth),\n+        }\n+    }\n+    inner(ty, 0)\n+}"}]}