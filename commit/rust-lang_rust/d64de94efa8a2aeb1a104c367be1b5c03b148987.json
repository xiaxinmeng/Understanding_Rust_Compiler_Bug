{"sha": "d64de94efa8a2aeb1a104c367be1b5c03b148987", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGRlOTRlZmE4YTJhZWIxYTEwNGMzNjdiZTFiNWMwM2IxNDg5ODc=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-13T18:11:29Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-13T20:51:05Z"}, "message": "Update std::collections' docs to use iterator (etc.) boilerplate\n\nThis greatly improves consistency.", "tree": {"sha": "b8af11648e01498020d6c4ddb13a2d7c78aacc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8af11648e01498020d6c4ddb13a2d7c78aacc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64de94efa8a2aeb1a104c367be1b5c03b148987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64de94efa8a2aeb1a104c367be1b5c03b148987", "html_url": "https://github.com/rust-lang/rust/commit/d64de94efa8a2aeb1a104c367be1b5c03b148987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64de94efa8a2aeb1a104c367be1b5c03b148987/comments", "author": null, "committer": null, "parents": [{"sha": "ea376822a17dd911244c313c5b07dffdfe3c023a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea376822a17dd911244c313c5b07dffdfe3c023a", "html_url": "https://github.com/rust-lang/rust/commit/ea376822a17dd911244c313c5b07dffdfe3c023a"}], "stats": {"total": 302, "additions": 252, "deletions": 50}, "files": [{"sha": "0fad377c6b25e4f930df927c4de943dbc6429927", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -218,10 +218,14 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n-/// A container object that represents the result of the [`peek_mut`] method\n-/// on `BinaryHeap`. See its documentation for details.\n+/// Object representing a mutable reference to the greatest item on a\n+/// `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See\n+/// its documentation for more.\n ///\n /// [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>,\n@@ -971,7 +975,13 @@ impl<'a, T> Drop for Hole<'a, T> {\n     }\n }\n \n-/// `BinaryHeap` iterator.\n+/// An iterator over the elements of a `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`BinaryHeap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.BinaryHeap.html#method.iter\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n@@ -1027,7 +1037,13 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n-/// An iterator that moves out of a `BinaryHeap`.\n+/// An owning iterator over the elements of a `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.BinaryHeap.html#method.into_iter\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {\n@@ -1076,7 +1092,13 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-/// An iterator that drains a `BinaryHeap`.\n+/// A draining iterator over the elements of a `BinaryHeap`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`BinaryHeap`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.BinaryHeap.html#method.drain\n+/// [`BinaryHeap`]: struct.BinaryHeap.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n #[derive(Debug)]\n pub struct Drain<'a, T: 'a> {"}, {"sha": "e7e91a2fcaad484368966f8fec2d7c4d8833df4d", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -262,7 +262,13 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n     }\n }\n \n-/// An iterator over a `BTreeMap`'s entries.\n+/// An iterator over the entries of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.BTreeMap.html#method.iter\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     range: Range<'a, K, V>,\n@@ -276,15 +282,27 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n     }\n }\n \n-/// A mutable iterator over a `BTreeMap`'s entries.\n+/// A mutable iterator over the entries of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.BTreeMap.html#method.iter_mut\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n }\n \n-/// An owning iterator over a `BTreeMap`'s entries.\n+/// An owning iterator over the entries of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.BTreeMap.html#method.into_iter\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     front: Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge>,\n@@ -303,7 +321,13 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n     }\n }\n \n-/// An iterator over a `BTreeMap`'s keys.\n+/// An iterator over the keys of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`keys`]: struct.BTreeMap.html#method.keys\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -316,7 +340,13 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n     }\n }\n \n-/// An iterator over a `BTreeMap`'s values.\n+/// An iterator over the values of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`values`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values`]: struct.BTreeMap.html#method.values\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -329,14 +359,26 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V>\n     }\n }\n \n-/// A mutable iterator over a `BTreeMap`'s values.\n+/// A mutable iterator over the values of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values_mut`]: struct.BTreeMap.html#method.values_mut\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n-/// An iterator over a sub-range of `BTreeMap`'s entries.\n+/// An iterator over a sub-range of entries in a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`range`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`range`]: struct.BTreeMap.html#method.range\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -350,7 +392,13 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V>\n     }\n }\n \n-/// A mutable iterator over a sub-range of `BTreeMap`'s entries.\n+/// A mutable iterator over a sub-range of entries in a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its\n+/// documentation for more.\n+///\n+/// [`range_mut`]: struct.BTreeMap.html#method.range_mut\n+/// [`BTreeMap`]: struct.BTreeMap.html\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,"}, {"sha": "37c7581e5f4726b5dbc416d35cf5e450c0b04366", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -74,9 +74,10 @@ pub struct BTreeSet<T> {\n     map: BTreeMap<T, ()>,\n }\n \n-/// An iterator over a `BTreeSet`'s items.\n+/// An iterator over the items of a `BTreeSet`.\n ///\n-/// This structure is created by the [`iter`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`iter`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`iter`]: struct.BTreeSet.html#method.iter\n@@ -94,21 +95,23 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     }\n }\n \n-/// An owning iterator over a `BTreeSet`'s items.\n+/// An owning iterator over the items of a `BTreeSet`.\n ///\n-/// This structure is created by the `into_iter` method on [`BTreeSet`]\n-/// [`BTreeSet`] (provided by the `IntoIterator` trait).\n+/// This `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n+/// [`into_iter`]: struct.BTreeSet.html#method.into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n \n-/// An iterator over a sub-range of `BTreeSet`'s items.\n+/// An iterator over a sub-range of items in a `BTreeSet`.\n ///\n-/// This structure is created by the [`range`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`range`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n@@ -118,9 +121,10 @@ pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n \n-/// A lazy iterator producing elements in the set difference (in-order).\n+/// A lazy iterator producing elements in the difference of `BTreeSet`s.\n ///\n-/// This structure is created by the [`difference`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`difference`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`difference`]: struct.BTreeSet.html#method.difference\n@@ -139,10 +143,10 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n     }\n }\n \n-/// A lazy iterator producing elements in the set symmetric difference (in-order).\n+/// A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.\n ///\n-/// This structure is created by the [`symmetric_difference`] method on\n-/// [`BTreeSet`].\n+/// This `struct` is created by the [`symmetric_difference`] method on\n+/// [`BTreeSet`]. See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`symmetric_difference`]: struct.BTreeSet.html#method.symmetric_difference\n@@ -161,9 +165,10 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n     }\n }\n \n-/// A lazy iterator producing elements in the set intersection (in-order).\n+/// A lazy iterator producing elements in the intersection of `BTreeSet`s.\n ///\n-/// This structure is created by the [`intersection`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`intersection`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`intersection`]: struct.BTreeSet.html#method.intersection\n@@ -182,9 +187,10 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n     }\n }\n \n-/// A lazy iterator producing elements in the set union (in-order).\n+/// A lazy iterator producing elements in the union of `BTreeSet`s.\n ///\n-/// This structure is created by the [`union`] method on [`BTreeSet`].\n+/// This `struct` is created by the [`union`] method on [`BTreeSet`].\n+/// See its documentation for more.\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`union`]: struct.BTreeSet.html#method.union"}, {"sha": "eabf7e47f004dc5616685d8d687a2ff6c3a58e82", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -56,7 +56,13 @@ struct Node<T> {\n     element: T,\n }\n \n-/// An iterator over references to the elements of a `LinkedList`.\n+/// An iterator over the elements of a `LinkedList`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`LinkedList`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.LinkedList.html#method.iter\n+/// [`LinkedList`]: struct.LinkedList.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     head: Option<Shared<Node<T>>>,\n@@ -82,7 +88,13 @@ impl<'a, T> Clone for Iter<'a, T> {\n     }\n }\n \n-/// An iterator over mutable references to the elements of a `LinkedList`.\n+/// A mutable iterator over the elements of a `LinkedList`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`LinkedList`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.LinkedList.html#method.iter_mut\n+/// [`LinkedList`]: struct.LinkedList.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     list: &'a mut LinkedList<T>,\n@@ -100,7 +112,13 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n     }\n }\n \n-/// An iterator over the elements of a `LinkedList`.\n+/// An owning iterator over the elements of a `LinkedList`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`LinkedList`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.LinkedList.html#method.into_iter\n+/// [`LinkedList`]: struct.LinkedList.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "7fe11c71d240517e57c1ad2dde45f915e967940e", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -1890,7 +1890,13 @@ fn count(tail: usize, head: usize, size: usize) -> usize {\n     (head.wrapping_sub(tail)) & (size - 1)\n }\n \n-/// `VecDeque` iterator.\n+/// An iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.VecDeque.html#method.iter\n+/// [`VecDeque`]: struct.VecDeque.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ring: &'a [T],\n@@ -1971,7 +1977,13 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n \n-/// `VecDeque` mutable iterator.\n+/// A mutable iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.VecDeque.html#method.iter_mut\n+/// [`VecDeque`]: struct.VecDeque.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ring: &'a mut [T],\n@@ -2047,7 +2059,13 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n-/// A by-value `VecDeque` iterator\n+/// An owning iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.VecDeque.html#method.into_iter\n+/// [`VecDeque`]: struct.VecDeque.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n@@ -2097,7 +2115,13 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-/// A draining `VecDeque` iterator\n+/// A draining iterator over the elements of a `VecDeque`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`VecDeque`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.VecDeque.html#method.drain\n+/// [`VecDeque`]: struct.VecDeque.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     after_tail: usize,"}, {"sha": "e7c7ba64099bc2c058587be30e847a87d43947a7", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -1333,7 +1333,13 @@ impl<'a, K, Q: ?Sized, V, S> Index<&'a Q> for HashMap<K, V, S>\n     }\n }\n \n-/// HashMap iterator.\n+/// An iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter`]: struct.HashMap.html#method.iter\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     inner: table::Iter<'a, K, V>,\n@@ -1356,19 +1362,37 @@ impl<'a, K: Debug, V: Debug> fmt::Debug for Iter<'a, K, V> {\n     }\n }\n \n-/// HashMap mutable values iterator.\n+/// A mutable iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`iter_mut`]: struct.HashMap.html#method.iter_mut\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     inner: table::IterMut<'a, K, V>,\n }\n \n-/// HashMap move iterator.\n+/// An owning iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`HashMap`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`into_iter`]: struct.HashMap.html#method.into_iter\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     pub(super) inner: table::IntoIter<K, V>,\n }\n \n-/// HashMap keys iterator.\n+/// An iterator over the keys of a `HashMap`.\n+///\n+/// This `struct` is created by the [`keys`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`keys`]: struct.HashMap.html#method.keys\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1391,7 +1415,13 @@ impl<'a, K: Debug, V: Debug> fmt::Debug for Keys<'a, K, V> {\n     }\n }\n \n-/// HashMap values iterator.\n+/// An iterator over the values of a `HashMap`.\n+///\n+/// This `struct` is created by the [`values`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values`]: struct.HashMap.html#method.values\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1414,13 +1444,25 @@ impl<'a, K: Debug, V: Debug> fmt::Debug for Values<'a, K, V> {\n     }\n }\n \n-/// HashMap drain iterator.\n+/// A draining iterator over the entries of a `HashMap`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`drain`]: struct.HashMap.html#method.drain\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     pub(super) inner: table::Drain<'a, K, V>,\n }\n \n-/// Mutable HashMap values iterator.\n+/// A mutable iterator over the values of a `HashMap`.\n+///\n+/// This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its\n+/// documentation for more.\n+///\n+/// [`values_mut`]: struct.HashMap.html#method.values_mut\n+/// [`HashMap`]: struct.HashMap.html\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,"}, {"sha": "86e819b99fb4d26fa48b83631257450a64bc6055", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64de94efa8a2aeb1a104c367be1b5c03b148987/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=d64de94efa8a2aeb1a104c367be1b5c03b148987", "patch": "@@ -856,25 +856,49 @@ impl<'a, 'b, T, S> Sub<&'b HashSet<T, S>> for &'a HashSet<T, S>\n     }\n }\n \n-/// HashSet iterator\n+/// An iterator over the items of a `HashSet`.\n+///\n+/// This `struct` is created by the [`iter`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`iter`]: struct.HashSet.html#method.iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a> {\n     iter: Keys<'a, K, ()>,\n }\n \n-/// HashSet move iterator\n+/// An owning iterator over the items of a `HashSet`.\n+///\n+/// This `struct` is created by the [`into_iter`] method on [`HashSet`]\n+/// (provided by the `IntoIterator` trait). See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`into_iter`]: struct.HashSet.html#method.into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n     iter: map::IntoIter<K, ()>,\n }\n \n-/// HashSet drain iterator\n+/// A draining iterator over the items of a `HashSet`.\n+///\n+/// This `struct` is created by the [`drain`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`drain`]: struct.HashSet.html#method.drain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n     iter: map::Drain<'a, K, ()>,\n }\n \n-/// Intersection iterator\n+/// A lazy iterator producing elements in the intersection of `HashSet`s.\n+///\n+/// This `struct` is created by the [`intersection`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`intersection`]: struct.HashSet.html#method.intersection\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -883,7 +907,13 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n     other: &'a HashSet<T, S>,\n }\n \n-/// Difference iterator\n+/// A lazy iterator producing elements in the difference of `HashSet`s.\n+///\n+/// This `struct` is created by the [`difference`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`difference`]: struct.HashSet.html#method.difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -892,13 +922,25 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n     other: &'a HashSet<T, S>,\n }\n \n-/// Symmetric difference iterator.\n+/// A lazy iterator producing elements in the symmetric difference of `HashSet`s.\n+///\n+/// This `struct` is created by the [`symmetric_difference`] method on\n+/// [`HashSet`]. See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n }\n \n-/// Set union iterator.\n+/// A lazy iterator producing elements in the union of `HashSet`s.\n+///\n+/// This `struct` is created by the [`union`] method on [`HashSet`].\n+/// See its documentation for more.\n+///\n+/// [`HashSet`]: struct.HashSet.html\n+/// [`union`]: struct.HashSet.html#method.union\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}]}