{"sha": "9ce9a4ae0d7a857018589b5fed816599b299fc77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTlhNGFlMGQ3YTg1NzAxODU4OWI1ZmVkODE2NTk5YjI5OWZjNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T21:06:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T21:06:15Z"}, "message": "Simplify tests", "tree": {"sha": "06c91c57e26dd63cb74ca4bd3fef054aff1d64e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c91c57e26dd63cb74ca4bd3fef054aff1d64e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce9a4ae0d7a857018589b5fed816599b299fc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce9a4ae0d7a857018589b5fed816599b299fc77", "html_url": "https://github.com/rust-lang/rust/commit/9ce9a4ae0d7a857018589b5fed816599b299fc77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce9a4ae0d7a857018589b5fed816599b299fc77/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b4600752d3c7102f01d074c25b4798b75c2bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b4600752d3c7102f01d074c25b4798b75c2bed", "html_url": "https://github.com/rust-lang/rust/commit/e4b4600752d3c7102f01d074c25b4798b75c2bed"}], "stats": {"total": 114, "additions": 55, "deletions": 59}, "files": [{"sha": "933e9b7148ae39574896895560e73763d7e6e10a", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 55, "deletions": 59, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/9ce9a4ae0d7a857018589b5fed816599b299fc77/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce9a4ae0d7a857018589b5fed816599b299fc77/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=9ce9a4ae0d7a857018589b5fed816599b299fc77", "patch": "@@ -389,10 +389,9 @@ mod tests {\n         assert_eq!(offset, position.into());\n     }\n \n-    fn check_hover_result(ra_fixture: &str, expected: &[&str]) -> (String, Vec<HoverAction>) {\n+    fn check_hover_result(ra_fixture: &str, expected: &str) -> (String, Vec<HoverAction>) {\n         let (analysis, position) = analysis_and_position(ra_fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        let expected = expected.join(\"\\n\\n___\\n\");\n         let actual = trim_markup(hover.info.markup.as_str());\n         assert_eq!(expected, actual);\n \n@@ -423,8 +422,7 @@ fn main() {\n \n     #[test]\n     fn hover_shows_long_type_of_an_expression() {\n-        check_hover_result(\n-            r#\"\n+        check_hover_result(r#\"\n             //- /main.rs\n             struct Scan<A, B, C> {\n                 a: A,\n@@ -457,9 +455,7 @@ fn main() {\n                 let number = 5u32;\n                 let mut iter<|> = scan(OtherStruct { i: num }, closure, number);\n             }\n-            \"#,\n-            &[\"FakeIter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> FakeOption<u32>, u32>>\"],\n-        );\n+            \"#, \"FakeIter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> FakeOption<u32>, u32>>\");\n     }\n \n     #[test]\n@@ -474,7 +470,7 @@ fn main() {\n                 let foo_test = fo<|>o();\n             }\n         \"#,\n-            &[\"pub fn foo() -> u32\"],\n+            \"pub fn foo() -> u32\",\n         );\n \n         // Multiple candidates but results are ambiguous.\n@@ -498,7 +494,7 @@ fn main() {\n                 let foo_test = fo<|>o();\n             }\n         \"#,\n-            &[\"{unknown}\"],\n+            \"{unknown}\",\n         );\n     }\n \n@@ -513,7 +509,7 @@ fn main() {\n                 let foo_test = fo<|>o();\n             }\n         \"#,\n-            &[\"pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str\"],\n+            \"pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str\",\n         );\n     }\n \n@@ -527,7 +523,7 @@ fn main() {\n             fn main() {\n             }\n         \"#,\n-            &[\"pub fn foo(a: u32, b: u32) -> u32\"],\n+            \"pub fn foo(a: u32, b: u32) -> u32\",\n         );\n     }\n \n@@ -547,7 +543,7 @@ fn main() {\n                 };\n             }\n         \"#,\n-            &[\"Foo\\n```\\n\\n```rust\\nfield_a: u32\"],\n+            \"Foo\\n```\\n\\n```rust\\nfield_a: u32\",\n         );\n \n         // Hovering over the field in the definition\n@@ -564,7 +560,7 @@ fn main() {\n                 };\n             }\n         \"#,\n-            &[\"Foo\\n```\\n\\n```rust\\nfield_a: u32\"],\n+            \"Foo\\n```\\n\\n```rust\\nfield_a: u32\",\n         );\n     }\n \n@@ -575,15 +571,15 @@ fn main() {\n             //- /main.rs\n             const foo<|>: u32 = 0;\n         \"#,\n-            &[\"const foo: u32\"],\n+            \"const foo: u32\",\n         );\n \n         check_hover_result(\n             r#\"\n             //- /main.rs\n             static foo<|>: u32 = 0;\n         \"#,\n-            &[\"static foo: u32\"],\n+            \"static foo: u32\",\n         );\n     }\n \n@@ -600,7 +596,7 @@ struct Test<K, T = u8> {\n fn main() {\n     let zz<|> = Test { t: 23u8, k: 33 };\n }\"#,\n-            &[\"Test<i32, u8>\"],\n+            \"Test<i32, u8>\",\n         );\n     }\n \n@@ -643,7 +639,7 @@ fn main() {\n                 Non<|>e\n             }\n         \"#,\n-            &[\"\n+            \"\n Option\n ```\n \n@@ -654,7 +650,7 @@ ___\n \n The None variant\n             \"\n-            .trim()],\n+            .trim(),\n         );\n \n         check_hover_result(\n@@ -668,7 +664,7 @@ The None variant\n                 let s = Option::Som<|>e(12);\n             }\n         \"#,\n-            &[\"\n+            \"\n Option\n ```\n \n@@ -679,7 +675,7 @@ ___\n \n The Some variant\n             \"\n-            .trim()],\n+            .trim(),\n         );\n     }\n \n@@ -900,7 +896,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 }\n             }\n             \",\n-            &[\"fn foo()\"],\n+            \"fn foo()\",\n         );\n \n         assert_eq!(hover_on, \"foo\")\n@@ -918,7 +914,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let a = id!(ba<|>r);\n             }\n             \",\n-            &[\"u32\"],\n+            \"u32\",\n         );\n \n         assert_eq!(hover_on, \"bar\")\n@@ -939,7 +935,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let a = id!(ba<|>r);\n             }\n             \",\n-            &[\"u32\"],\n+            \"u32\",\n         );\n \n         assert_eq!(hover_on, \"bar\")\n@@ -963,7 +959,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let a = id!([0u32, bar(<|>)] );\n             }\n             \",\n-            &[\"u32\"],\n+            \"u32\",\n         );\n \n         assert_eq!(hover_on, \"bar()\")\n@@ -982,7 +978,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let _ = arr!(\"Tr<|>acks\", &mastered_for_itunes);\n             }\n             \"#,\n-            &[\"&str\"],\n+            \"&str\",\n         );\n \n         assert_eq!(hover_on, \"\\\"Tracks\\\"\");\n@@ -1001,7 +997,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 assert!(ba<|>r());\n             }\n             \",\n-            &[\"fn bar() -> bool\"],\n+            \"fn bar() -> bool\",\n         );\n \n         assert_eq!(hover_on, \"bar\");\n@@ -1035,7 +1031,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 fo<|>o();\n             }\n             \",\n-            &[\"fn foo()\\n```\\n___\\n\\n<- `\\u{3000}` here\"],\n+            \"fn foo()\\n```\\n___\\n\\n<- `\\u{3000}` here\",\n         );\n     }\n \n@@ -1046,21 +1042,21 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             //- /lib.rs\n             async fn foo<|>() {}\n             \",\n-            &[\"async fn foo()\"],\n+            \"async fn foo()\",\n         );\n         check_hover_result(\n             r\"\n             //- /lib.rs\n             pub const unsafe fn foo<|>() {}\n             \",\n-            &[\"pub const unsafe fn foo()\"],\n+            \"pub const unsafe fn foo()\",\n         );\n         check_hover_result(\n             r#\"\n             //- /lib.rs\n             pub(crate) async unsafe extern \"C\" fn foo<|>() {}\n             \"#,\n-            &[r#\"pub(crate) async unsafe extern \"C\" fn foo()\"#],\n+            r#\"pub(crate) async unsafe extern \"C\" fn foo()\"#,\n         );\n     }\n \n@@ -1071,7 +1067,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             //- /lib.rs\n             unsafe trait foo<|>() {}\n             \",\n-            &[\"unsafe trait foo\"],\n+            \"unsafe trait foo\",\n         );\n         assert_impl_action(&actions[0], 13);\n     }\n@@ -1089,7 +1085,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n             fn my() {}\n             \",\n-            &[\"mod my\"],\n+            \"mod my\",\n         );\n     }\n \n@@ -1105,7 +1101,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let bar = Ba<|>r;\n             }\n             \"#,\n-            &[\"struct Bar\\n```\\n___\\n\\nbar docs\"],\n+            \"struct Bar\\n```\\n___\\n\\nbar docs\",\n         );\n     }\n \n@@ -1121,7 +1117,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let bar = Ba<|>r;\n             }\n             \"#,\n-            &[\"struct Bar\\n```\\n___\\n\\nbar docs\"],\n+            \"struct Bar\\n```\\n___\\n\\nbar docs\",\n         );\n     }\n \n@@ -1139,7 +1135,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let bar = Ba<|>r;\n             }\n             \"#,\n-            &[\"struct Bar\\n```\\n___\\n\\nbar docs 0\\n\\nbar docs 1\\n\\nbar docs 2\"],\n+            \"struct Bar\\n```\\n___\\n\\nbar docs 0\\n\\nbar docs 1\\n\\nbar docs 2\",\n         );\n     }\n \n@@ -1167,7 +1163,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 bar.fo<|>o();\n             }\n             \"#,\n-            &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\n Do the foo\"],\n+            \"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\n Do the foo\",\n         );\n     }\n \n@@ -1195,7 +1191,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 bar.fo<|>o();\n             }\n             \"#,\n-            &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\nDo the foo\"],\n+            \"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\nDo the foo\",\n         );\n     }\n \n@@ -1206,7 +1202,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             //- /lib.rs\n             trait foo<|>() {}\n             \",\n-            &[\"trait foo\"],\n+            \"trait foo\",\n         );\n         assert_impl_action(&actions[0], 6);\n     }\n@@ -1218,7 +1214,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             //- /lib.rs\n             struct foo<|>() {}\n             \",\n-            &[\"struct foo\"],\n+            \"struct foo\",\n         );\n         assert_impl_action(&actions[0], 7);\n     }\n@@ -1230,7 +1226,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             //- /lib.rs\n             union foo<|>() {}\n             \",\n-            &[\"union foo\"],\n+            \"union foo\",\n         );\n         assert_impl_action(&actions[0], 6);\n     }\n@@ -1245,7 +1241,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 B\n             }\n             \",\n-            &[\"enum foo\"],\n+            \"enum foo\",\n         );\n         assert_impl_action(&actions[0], 5);\n     }\n@@ -1258,7 +1254,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             #[test]\n             fn foo_<|>test() {}\n             \",\n-            &[\"fn foo_test()\"],\n+            \"fn foo_test()\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1304,7 +1300,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 fn foo_test() {}\n             }\n             \",\n-            &[\"mod tests\"],\n+            \"mod tests\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1346,7 +1342,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = S{ f1:0 };\n             }\n             \",\n-            &[\"S\"],\n+            \"S\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1390,7 +1386,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = S{ f1:Arg(0) };\n             }\n             \",\n-            &[\"S<Arg>\"],\n+            \"S<Arg>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1453,7 +1449,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = S{ f1: S{ f1: Arg(0) } };\n             }\n             \",\n-            &[\"S<S<Arg>>\"],\n+            \"S<S<Arg>>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1519,7 +1515,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = (A(1), B(2), M::C(3) );\n             }\n             \",\n-            &[\"(A, B, C)\"],\n+            \"(A, B, C)\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1602,7 +1598,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = foo();\n             }\n             \",\n-            &[\"impl Foo\"],\n+            \"impl Foo\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1648,7 +1644,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = foo();\n             }\n             \",\n-            &[\"impl Foo<S>\"],\n+            \"impl Foo<S>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1713,7 +1709,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = foo();\n             }\n             \",\n-            &[\"impl Foo + Bar\"],\n+            \"impl Foo + Bar\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1780,7 +1776,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = foo();\n             }\n             \",\n-            &[\"impl Foo<S1> + Bar<S2>\"],\n+            \"impl Foo<S1> + Bar<S2>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1877,7 +1873,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             trait Foo {}\n             fn foo(ar<|>g: &impl Foo) {}\n             \",\n-            &[\"&impl Foo\"],\n+            \"&impl Foo\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1920,7 +1916,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n             fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n             \",\n-            &[\"&impl Foo + Bar<S>\"],\n+            \"&impl Foo + Bar<S>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -1999,7 +1995,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             struct S {}\n             fn foo(ar<|>g: &impl Foo<S>) {}\n             \",\n-            &[\"&impl Foo<S>\"],\n+            \"&impl Foo<S>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -2067,7 +2063,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = foo();\n             }\n             \",\n-            &[\"B<dyn Foo>\"],\n+            \"B<dyn Foo>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -2126,7 +2122,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             trait Foo {}\n             fn foo(ar<|>g: &dyn Foo) {}\n             \",\n-            &[\"&dyn Foo\"],\n+            \"&dyn Foo\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -2167,7 +2163,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             struct S {}\n             fn foo(ar<|>g: &dyn Foo<S>) {}\n             \",\n-            &[\"&dyn Foo<S>\"],\n+            \"&dyn Foo<S>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -2230,7 +2226,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n             fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n             \",\n-            &[\"&impl ImplTrait<B<dyn DynTrait<B<S>>>>\"],\n+            \"&impl ImplTrait<B<dyn DynTrait<B<S>>>>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -2344,7 +2340,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let s<|>t = test().get();\n             }\n             \",\n-            &[\"Foo::Item<impl Foo>\"],\n+            \"Foo::Item<impl Foo>\",\n         );\n         assert_debug_snapshot!(actions,\n             @r###\""}]}