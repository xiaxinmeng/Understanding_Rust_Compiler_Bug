{"sha": "084ac77cf29e786df7251392bed0b6e6c7ea8786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NGFjNzdjZjI5ZTc4NmRmNzI1MTM5MmJlZDBiNmU2YzdlYTg3ODY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T15:53:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T15:53:13Z"}, "message": "Rollup merge of #73715 - MaulingMonkey:pr-natvis-tuples, r=Amanieu\n\ndebuginfo:  Mangle tuples to be natvis friendly, typedef basic types\n\nThese changes are meant to unblock rust-lang/rust#70052 \"Update hashbrown to 0.8.0\" by allowing the use of `tuple<u64, u64>` as a .natvis expression in MSVC style debuggers (MSVC, WinDbg, CDB, etc.)\n\n* f8eb81b does the actual mangling of `(u64, u64)` -> `tuple<u64, 64>`\n* 24a728a allows `u64` to resolve (fixing `$T1` / `$T2` when used to visualize `HashMap<u64, u64, ...>`)", "tree": {"sha": "15255db5e83787345ba5062ead32274a4786c51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15255db5e83787345ba5062ead32274a4786c51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084ac77cf29e786df7251392bed0b6e6c7ea8786", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCeBpCRBK7hj4Ov3rIwAAdHIIAGwXIo+1i6PDQ0kgNYWrdB0u\nLlS2WYf3VM6rewTTkgMM2d0/lrVKS8jCTQEW1+kCuJawYAuhBngVpPyXMZnmol1Q\nevUIjlt2oX+fOPBgofyXigm4KREz5JgLWL8Zq214q9w2U8Pi1x5a9ibYmTE9JiIv\nrYycTx0lZIZy6iCIzq7dGOl17YrMKAiyNUzsWbRmfRU1B6P3DLINL+xZ9WNGyMLf\n7UX38qyDodfDEV6guw3brG8wr/Q50qK4fI3q2bVhyIEmB80sYHNH+hG+Hxn+nTDw\nXch+Moz3toTSmTxoqwZ0bWC4zEKBrDYVSN0FCoSc5P3ISDa6hx8wDhRSLPAMHII=\n=iRKy\n-----END PGP SIGNATURE-----\n", "payload": "tree 15255db5e83787345ba5062ead32274a4786c51e\nparent 90f1d724c8d9b364b4b0c81817484afa04c73009\nparent 24a728a8eb4832568509eb757c2374934a76cb98\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594482793 -0700\ncommitter GitHub <noreply@github.com> 1594482793 -0700\n\nRollup merge of #73715 - MaulingMonkey:pr-natvis-tuples, r=Amanieu\n\ndebuginfo:  Mangle tuples to be natvis friendly, typedef basic types\n\nThese changes are meant to unblock rust-lang/rust#70052 \"Update hashbrown to 0.8.0\" by allowing the use of `tuple<u64, u64>` as a .natvis expression in MSVC style debuggers (MSVC, WinDbg, CDB, etc.)\n\n* f8eb81b does the actual mangling of `(u64, u64)` -> `tuple<u64, 64>`\n* 24a728a allows `u64` to resolve (fixing `$T1` / `$T2` when used to visualize `HashMap<u64, u64, ...>`)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084ac77cf29e786df7251392bed0b6e6c7ea8786", "html_url": "https://github.com/rust-lang/rust/commit/084ac77cf29e786df7251392bed0b6e6c7ea8786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084ac77cf29e786df7251392bed0b6e6c7ea8786/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f1d724c8d9b364b4b0c81817484afa04c73009", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f1d724c8d9b364b4b0c81817484afa04c73009", "html_url": "https://github.com/rust-lang/rust/commit/90f1d724c8d9b364b4b0c81817484afa04c73009"}, {"sha": "24a728a8eb4832568509eb757c2374934a76cb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a728a8eb4832568509eb757c2374934a76cb98", "html_url": "https://github.com/rust-lang/rust/commit/24a728a8eb4832568509eb757c2374934a76cb98"}], "stats": {"total": 337, "additions": 334, "deletions": 3}, "files": [{"sha": "874550da8b0c97b196d1371af91879ca54c39b74", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -21,4 +21,128 @@\n       </ArrayItems>\n     </Expand>\n   </Type>\n+  <Type Name=\"tuple&lt;&gt;\">\n+    <DisplayString>()</DisplayString>\n+  </Type>\n+  <Type Name=\"tuple&lt;*&gt;\">\n+    <DisplayString>({__0})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*&gt;\">\n+    <DisplayString>({__0}, {__1})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+      <Item Name=\"[8]\">__8</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+      <Item Name=\"[8]\">__8</Item>\n+      <Item Name=\"[9]\">__9</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*,*,*&gt;\">\n+    <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9}, ...)</DisplayString>\n+    <Expand>\n+      <Item Name=\"[0]\">__0</Item>\n+      <Item Name=\"[1]\">__1</Item>\n+      <Item Name=\"[2]\">__2</Item>\n+      <Item Name=\"[3]\">__3</Item>\n+      <Item Name=\"[4]\">__4</Item>\n+      <Item Name=\"[5]\">__5</Item>\n+      <Item Name=\"[6]\">__6</Item>\n+      <Item Name=\"[7]\">__7</Item>\n+      <Item Name=\"[8]\">__8</Item>\n+      <Item Name=\"[9]\">__9</Item>\n+      <Synthetic Name=\"[...]\"><DisplayString>...</DisplayString></Synthetic>\n+    </Expand>\n+  </Type>\n </AutoVisualizer>"}, {"sha": "f2e042cf86aa5aa7822540772f170f42864ea6cd", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -19,6 +19,7 @@ use crate::llvm::debuginfo::{\n use crate::value::Value;\n \n use log::debug;\n+use rustc_ast::ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -827,14 +828,60 @@ fn file_metadata_raw(\n     }\n }\n \n+trait MsvcBasicName {\n+    fn msvc_basic_name(self) -> &'static str;\n+}\n+\n+impl MsvcBasicName for ast::IntTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::IntTy::Isize => \"ptrdiff_t\",\n+            ast::IntTy::I8 => \"__int8\",\n+            ast::IntTy::I16 => \"__int16\",\n+            ast::IntTy::I32 => \"__int32\",\n+            ast::IntTy::I64 => \"__int64\",\n+            ast::IntTy::I128 => \"__int128\",\n+        }\n+    }\n+}\n+\n+impl MsvcBasicName for ast::UintTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::UintTy::Usize => \"size_t\",\n+            ast::UintTy::U8 => \"unsigned __int8\",\n+            ast::UintTy::U16 => \"unsigned __int16\",\n+            ast::UintTy::U32 => \"unsigned __int32\",\n+            ast::UintTy::U64 => \"unsigned __int64\",\n+            ast::UintTy::U128 => \"unsigned __int128\",\n+        }\n+    }\n+}\n+\n+impl MsvcBasicName for ast::FloatTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::FloatTy::F32 => \"float\",\n+            ast::FloatTy::F64 => \"double\",\n+        }\n+    }\n+}\n+\n fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n     debug!(\"basic_type_metadata: {:?}\", t);\n \n+    // When targeting MSVC, emit MSVC style type names for compatibility with\n+    // .natvis visualizers (and perhaps other existing native debuggers?)\n+    let msvc_like_names = cx.tcx.sess.target.target.options.is_like_msvc;\n+\n     let (name, encoding) = match t.kind {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n         ty::Tuple(ref elements) if elements.is_empty() => (\"()\", DW_ATE_unsigned),\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n         ty::Char => (\"char\", DW_ATE_unsigned_char),\n+        ty::Int(int_ty) if msvc_like_names => (int_ty.msvc_basic_name(), DW_ATE_signed),\n+        ty::Uint(uint_ty) if msvc_like_names => (uint_ty.msvc_basic_name(), DW_ATE_unsigned),\n+        ty::Float(float_ty) if msvc_like_names => (float_ty.msvc_basic_name(), DW_ATE_float),\n         ty::Int(int_ty) => (int_ty.name_str(), DW_ATE_signed),\n         ty::Uint(uint_ty) => (uint_ty.name_str(), DW_ATE_unsigned),\n         ty::Float(float_ty) => (float_ty.name_str(), DW_ATE_float),\n@@ -851,7 +898,30 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         )\n     };\n \n-    ty_metadata\n+    if !msvc_like_names {\n+        return ty_metadata;\n+    }\n+\n+    let typedef_name = match t.kind {\n+        ty::Int(int_ty) => int_ty.name_str(),\n+        ty::Uint(uint_ty) => uint_ty.name_str(),\n+        ty::Float(float_ty) => float_ty.name_str(),\n+        _ => return ty_metadata,\n+    };\n+\n+    let typedef_metadata = unsafe {\n+        llvm::LLVMRustDIBuilderCreateTypedef(\n+            DIB(cx),\n+            ty_metadata,\n+            typedef_name.as_ptr().cast(),\n+            typedef_name.len(),\n+            unknown_file_metadata(cx),\n+            0,\n+            None,\n+        )\n+    };\n+\n+    typedef_metadata\n }\n \n fn foreign_type_metadata("}, {"sha": "64f5e103f0b0dbd5f06c46f84042e3a0fdbf4086", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -1703,6 +1703,16 @@ extern \"C\" {\n         Encoding: c_uint,\n     ) -> &'a DIBasicType;\n \n+    pub fn LLVMRustDIBuilderCreateTypedef(\n+        Builder: &DIBuilder<'a>,\n+        Type: &'a DIBasicType,\n+        Name: *const c_char,\n+        NameLen: size_t,\n+        File: &'a DIFile,\n+        LineNo: c_uint,\n+        Scope: Option<&'a DIScope>,\n+    ) -> &'a DIDerivedType;\n+\n     pub fn LLVMRustDIBuilderCreatePointerType(\n         Builder: &DIBuilder<'a>,\n         PointeeTy: &'a DIType,"}, {"sha": "20d440433cbb0bc4f5b27bc3f4490aabadecd39f", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -47,7 +47,12 @@ pub fn push_debuginfo_type_name<'tcx>(\n             push_type_params(tcx, substs, output, visited);\n         }\n         ty::Tuple(component_types) => {\n-            output.push('(');\n+            if cpp_like_names {\n+                output.push_str(\"tuple<\");\n+            } else {\n+                output.push('(');\n+            }\n+\n             for component_type in component_types {\n                 push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);\n                 output.push_str(\", \");\n@@ -56,7 +61,12 @@ pub fn push_debuginfo_type_name<'tcx>(\n                 output.pop();\n                 output.pop();\n             }\n-            output.push(')');\n+\n+            if cpp_like_names {\n+                output.push('>');\n+            } else {\n+                output.push(')');\n+            }\n         }\n         ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n             if !cpp_like_names {"}, {"sha": "c92cf65f98af7fc1909f483a118c23c920791a95", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -762,6 +762,14 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateBasicType(\n   return wrap(Builder->createBasicType(StringRef(Name, NameLen), SizeInBits, Encoding));\n }\n \n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTypedef(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Type, const char *Name, size_t NameLen,\n+    LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Scope) {\n+  return wrap(Builder->createTypedef(\n+    unwrap<DIType>(Type), StringRef(Name, NameLen), unwrap<DIFile>(File),\n+    LineNo, unwrap<DIScope>(Scope)));\n+}\n+\n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef PointeeTy,\n     uint64_t SizeInBits, uint32_t AlignInBits, unsigned AddressSpace,"}, {"sha": "b7fcfeef090aa590dc4e41c63a68ba840323a14c", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -123,6 +123,48 @@\n // lldbg-check:[...]$6 = { 0 = 15 1 = 16 }\n // lldbr-check:((i32, i16)) paddingAtEnd = { 0 = 15 1 = 16 }\n \n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command:dx noPadding8,d\n+// cdb-check:noPadding8,d [...]: (-100, 100) [Type: tuple<i8, u8>]\n+// cdb-check:[...][0]              : -100 [Type: [...]]\n+// cdb-check:[...][1]              : 100 [Type: [...]]\n+// cdb-command:dx noPadding16,d\n+// cdb-check:noPadding16,d [...]: (0, 1, 2) [Type: tuple<i16, i16, u16>]\n+// cdb-check:[...][0]              : 0 [Type: [...]]\n+// cdb-check:[...][1]              : 1 [Type: [...]]\n+// cdb-check:[...][2]              : 2 [Type: [...]]\n+// cdb-command:dx noPadding32,d\n+// cdb-check:noPadding32,d [...]: (3, 4.5[...], 5) [Type: tuple<i32, f32, u32>]\n+// cdb-check:[...][0]              : 3 [Type: [...]]\n+// cdb-check:[...][1]              : 4.5[...] [Type: [...]]\n+// cdb-check:[...][2]              : 5 [Type: [...]]\n+// cdb-command:dx noPadding64,d\n+// cdb-check:noPadding64,d [...]: (6, 7.5[...], 8) [Type: tuple<i64, f64, u64>]\n+// cdb-check:[...][0]              : 6 [Type: [...]]\n+// cdb-check:[...][1]              : 7.500000 [Type: [...]]\n+// cdb-check:[...][2]              : 8 [Type: [...]]\n+\n+// cdb-command:dx internalPadding1,d\n+// cdb-check:internalPadding1,d [...]: (9, 10) [Type: tuple<i16, i32>]\n+// cdb-check:[...][0]              : 9 [Type: short]\n+// cdb-check:[...][1]              : 10 [Type: int]\n+// cdb-command:dx internalPadding2,d\n+// cdb-check:internalPadding2,d [...]: (11, 12, 13, 14) [Type: tuple<i16, i32, u32, u64>]\n+// cdb-check:[...][0]              : 11 [Type: [...]]\n+// cdb-check:[...][1]              : 12 [Type: [...]]\n+// cdb-check:[...][2]              : 13 [Type: [...]]\n+// cdb-check:[...][3]              : 14 [Type: [...]]\n+\n+// cdb-command:dx paddingAtEnd,d\n+// cdb-check:paddingAtEnd,d [...]: (15, 16) [Type: tuple<i32, i16>]\n+// cdb-check:[...][0]              : 15 [Type: [...]]\n+// cdb-check:[...][1]              : 16 [Type: [...]]\n+\n+\n #![allow(unused_variables)]\n #![allow(dead_code)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "0447d8e9ddeb0d8d1caf255cf497b54d5de39cea", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ac77cf29e786df7251392bed0b6e6c7ea8786/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=084ac77cf29e786df7251392bed0b6e6c7ea8786", "patch": "@@ -59,6 +59,73 @@\n // lldbg-check:[...]$6 = { 0 = { 0 = 21 1 = 22 } 1 = 23 }\n // lldbr-check:(((i32, i16), i32)) padding_at_end2 = { 0 = { 0 = 21 1 = 22 } 1 = 23 }\n \n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command:dx no_padding1,d\n+// cdb-check:no_padding1,d [...]: ((0, 1), 2, 3) [Type: tuple<tuple<u32, u32>, u32, u32>]\n+// cdb-check:[...][0]              : (0, 1) [Type: tuple<u32, u32>]\n+// cdb-check:[...][1]              : 2 [Type: [...]]\n+// cdb-check:[...][2]              : 3 [Type: [...]]\n+// cdb-command:dx no_padding1.__0,d\n+// cdb-check:no_padding1.__0,d [...]: (0, 1) [Type: tuple<u32, u32>]\n+// cdb-check:[...][0]              : 0 [Type: [...]]\n+// cdb-check:[...][1]              : 1 [Type: [...]]\n+// cdb-command:dx no_padding2,d\n+// cdb-check:no_padding2,d [...]: (4, (5, 6), 7) [Type: tuple<u32, tuple<u32, u32>, u32>]\n+// cdb-check:[...][0]              : 4 [Type: [...]]\n+// cdb-check:[...][1]              : (5, 6) [Type: tuple<u32, u32>]\n+// cdb-check:[...][2]              : 7 [Type: [...]]\n+// cdb-command:dx no_padding2.__1,d\n+// cdb-check:no_padding2.__1,d [...]: (5, 6) [Type: tuple<u32, u32>]\n+// cdb-check:[...][0]              : 5 [Type: [...]]\n+// cdb-check:[...][1]              : 6 [Type: [...]]\n+// cdb-command:dx no_padding3,d\n+// cdb-check:no_padding3,d [...]: (8, 9, (10, 11)) [Type: tuple<u32, u32, tuple<u32, u32>>]\n+// cdb-check:[...][0]              : 8 [Type: [...]]\n+// cdb-check:[...][1]              : 9 [Type: [...]]\n+// cdb-check:[...][2]              : (10, 11) [Type: tuple<u32, u32>]\n+// cdb-command:dx no_padding3.__2,d\n+// cdb-check:no_padding3.__2,d [...]: (10, 11) [Type: tuple<u32, u32>]\n+// cdb-check:[...][0]              : 10 [Type: [...]]\n+// cdb-check:[...][1]              : 11 [Type: [...]]\n+\n+// cdb-command:dx internal_padding1,d\n+// cdb-check:internal_padding1,d [...]: (12, (13, 14)) [Type: tuple<i16, tuple<i32, i32>>]\n+// cdb-check:[...][0]              : 12 [Type: [...]]\n+// cdb-check:[...][1]              : (13, 14) [Type: tuple<i32, i32>]\n+// cdb-command:dx internal_padding1.__1,d\n+// cdb-check:internal_padding1.__1,d [...]: (13, 14) [Type: tuple<i32, i32>]\n+// cdb-check:[...][0]              : 13 [Type: [...]]\n+// cdb-check:[...][1]              : 14 [Type: [...]]\n+// cdb-command:dx internal_padding2,d\n+// cdb-check:internal_padding2,d [...]: (15, (16, 17)) [Type: tuple<i16, tuple<i16, i32>>]\n+// cdb-check:[...][0]              : 15 [Type: [...]]\n+// cdb-check:[...][1]              : (16, 17) [Type: tuple<i16, i32>]\n+// cdb-command:dx internal_padding2.__1,d\n+// cdb-check:internal_padding2.__1,d [...]: (16, 17) [Type: tuple<i16, i32>]\n+// cdb-check:[...][0]              : 16 [Type: [...]]\n+// cdb-check:[...][1]              : 17 [Type: [...]]\n+\n+// cdb-command:dx padding_at_end1,d\n+// cdb-check:padding_at_end1,d [...]: (18, (19, 20)) [Type: tuple<i32, tuple<i32, i16>>]\n+// cdb-check:[...][0]              : 18 [Type: [...]]\n+// cdb-check:[...][1]              : (19, 20) [Type: tuple<i32, i16>]\n+// cdb-command:dx padding_at_end1.__1,d\n+// cdb-check:padding_at_end1.__1,d [...][Type: tuple<i32, i16>]\n+// cdb-check:[...][0]              : 19 [Type: [...]]\n+// cdb-check:[...][1]              : 20 [Type: [...]]\n+// cdb-command:dx padding_at_end2,d\n+// cdb-check:padding_at_end2,d [...]: ((21, 22), 23) [Type: tuple<tuple<i32, i16>, i32>]\n+// cdb-check:[...][0]              : (21, 22) [Type: tuple<i32, i16>]\n+// cdb-check:[...][1]              : 23 [Type: [...]]\n+// cdb-command:dx padding_at_end2.__0,d\n+// cdb-check:padding_at_end2.__0,d [...]: (21, 22) [Type: tuple<i32, i16>]\n+// cdb-check:[...][0]              : 21 [Type: [...]]\n+// cdb-check:[...][1]              : 22 [Type: [...]]\n+\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]"}]}