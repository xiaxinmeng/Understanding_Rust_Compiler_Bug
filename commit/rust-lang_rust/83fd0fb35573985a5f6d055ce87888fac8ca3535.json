{"sha": "83fd0fb35573985a5f6d055ce87888fac8ca3535", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZmQwZmIzNTU3Mzk4NWE1ZjZkMDU1Y2U4Nzg4OGZhYzhjYTM1MzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-08T12:46:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T12:46:12Z"}, "message": "Merge #4775\n\n4775: Add goto def for enum variant field r=matklad a=unexge\n\nCloses #4764. I'm not familiar with ra codebase, there might be better ways to do that :smile: \n\nCo-authored-by: unexge <unexge@gmail.com>", "tree": {"sha": "ab266d21f8ce7d414644e0340b247ca083441795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab266d21f8ce7d414644e0340b247ca083441795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83fd0fb35573985a5f6d055ce87888fac8ca3535", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3jMUCRBK7hj4Ov3rIwAAdHIIACGMMb5qwl0iC7GdcAyaSi7e\n1jcoAC9NSLCDpk4opsOFeiGzeno2fxzvgm2t8CoaKpiAjO2lrwdiAOwuL/E4wMea\nn9Z4tvkenlsYaaSo/CFjVYFpSDrIgLzY5GS/ZapRkwIx/lhagLCMpSGDMovPVOOV\nxORS2Ab7opzw7OCngCGwUZiT1Kgfmq60Q+ggyuxxof49IcYa9sknjp6baQ/yRFEz\nWc4sQOI6FzVr2sB1UgUGvkCadCzAr9JhZ3ts7nlujNYp7dRIoUOgqBLr41c8y69F\nHDXaUHgmAl4T2El3G4Qoc3LAFz2feRKh/szRu6gJXvBEdVBDYheTUa7kpafUyqY=\n=rkXb\n-----END PGP SIGNATURE-----\n", "payload": "tree ab266d21f8ce7d414644e0340b247ca083441795\nparent db36a25839be0a799be2a229b9fd0d45da57635b\nparent 48b6dd0b332d43268796b30128502e618b5b975e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591620372 +0000\ncommitter GitHub <noreply@github.com> 1591620372 +0000\n\nMerge #4775\n\n4775: Add goto def for enum variant field r=matklad a=unexge\n\nCloses #4764. I'm not familiar with ra codebase, there might be better ways to do that :smile: \n\nCo-authored-by: unexge <unexge@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83fd0fb35573985a5f6d055ce87888fac8ca3535", "html_url": "https://github.com/rust-lang/rust/commit/83fd0fb35573985a5f6d055ce87888fac8ca3535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83fd0fb35573985a5f6d055ce87888fac8ca3535/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db36a25839be0a799be2a229b9fd0d45da57635b", "url": "https://api.github.com/repos/rust-lang/rust/commits/db36a25839be0a799be2a229b9fd0d45da57635b", "html_url": "https://github.com/rust-lang/rust/commit/db36a25839be0a799be2a229b9fd0d45da57635b"}, {"sha": "48b6dd0b332d43268796b30128502e618b5b975e", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b6dd0b332d43268796b30128502e618b5b975e", "html_url": "https://github.com/rust-lang/rust/commit/48b6dd0b332d43268796b30128502e618b5b975e"}], "stats": {"total": 81, "additions": 57, "deletions": 24}, "files": [{"sha": "0798d2c3617044f02b9a902889073af29e320cf6", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/83fd0fb35573985a5f6d055ce87888fac8ca3535/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83fd0fb35573985a5f6d055ce87888fac8ca3535/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=83fd0fb35573985a5f6d055ce87888fac8ca3535", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ra_ide_db::{\n-    defs::{classify_name, classify_name_ref},\n+    defs::{classify_name, classify_name_ref, NameClass},\n     symbol_index, RootDatabase,\n };\n use ra_syntax::{\n@@ -39,7 +39,10 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = classify_name(&sema, &name)?.definition();\n+                let def = match classify_name(&sema, &name)? {\n+                    NameClass::Definition(def) | NameClass::ConstReference(def) => def,\n+                    NameClass::FieldShorthand { local: _, field } => field,\n+                };\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },\n@@ -886,4 +889,23 @@ mod tests {\n             \"x\",\n         )\n     }\n+\n+    #[test]\n+    fn goto_def_for_enum_variant_field() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Bar { x: i32 }\n+            }\n+            fn baz(foo: Foo) {\n+                match foo {\n+                    Foo::Bar { x<|> } => x\n+                };\n+            }\n+            \",\n+            \"x RECORD_FIELD_DEF FileId(1) 21..27 21..22\",\n+            \"x: i32|x\",\n+        );\n+    }\n }"}, {"sha": "9ff7356c94c198e742d817b1ad0b2472e96f90c7", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83fd0fb35573985a5f6d055ce87888fac8ca3535/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83fd0fb35573985a5f6d055ce87888fac8ca3535/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=83fd0fb35573985a5f6d055ce87888fac8ca3535", "patch": "@@ -436,6 +436,7 @@ fn highlight_element(\n                     highlight_name(db, def) | HighlightModifier::Definition\n                 }\n                 Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n+                Some(NameClass::FieldShorthand { .. }) => HighlightTag::Field.into(),\n                 None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n             }\n         }"}, {"sha": "1826f3ac65179554e6116c0ac1b2e6b024f484f4", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/83fd0fb35573985a5f6d055ce87888fac8ca3535/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83fd0fb35573985a5f6d055ce87888fac8ca3535/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=83fd0fb35573985a5f6d055ce87888fac8ca3535", "patch": "@@ -82,38 +82,40 @@ pub enum NameClass {\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`\n     ConstReference(Definition),\n+    FieldShorthand {\n+        local: Local,\n+        field: Definition,\n+    },\n }\n \n impl NameClass {\n     pub fn into_definition(self) -> Option<Definition> {\n         match self {\n             NameClass::Definition(it) => Some(it),\n             NameClass::ConstReference(_) => None,\n+            NameClass::FieldShorthand { local, field: _ } => Some(Definition::Local(local)),\n         }\n     }\n \n     pub fn definition(self) -> Definition {\n         match self {\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+            NameClass::FieldShorthand { local: _, field } => field,\n         }\n     }\n }\n \n pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n     let _p = profile(\"classify_name\");\n \n-    if let Some(bind_pat) = name.syntax().parent().and_then(ast::BindPat::cast) {\n+    let parent = name.syntax().parent()?;\n+\n+    if let Some(bind_pat) = ast::BindPat::cast(parent.clone()) {\n         if let Some(def) = sema.resolve_bind_pat_to_const(&bind_pat) {\n             return Some(NameClass::ConstReference(Definition::ModuleDef(def)));\n         }\n     }\n \n-    classify_name_inner(sema, name).map(NameClass::Definition)\n-}\n-\n-fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<Definition> {\n-    let parent = name.syntax().parent()?;\n-\n     match_ast! {\n         match parent {\n             ast::Alias(it) => {\n@@ -123,63 +125,71 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n                 let name_ref = path_segment.name_ref()?;\n                 let name_ref_class = classify_name_ref(sema, &name_ref)?;\n \n-                Some(name_ref_class.definition())\n+                Some(NameClass::Definition(name_ref_class.definition()))\n             },\n             ast::BindPat(it) => {\n                 let local = sema.to_def(&it)?;\n-                Some(Definition::Local(local))\n+\n+                if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordFieldPat::cast) {\n+                    if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n+                        let field = Definition::Field(field);\n+                        return Some(NameClass::FieldShorthand { local, field });\n+                    }\n+                }\n+\n+                Some(NameClass::Definition(Definition::Local(local)))\n             },\n             ast::RecordFieldDef(it) => {\n                 let field: hir::Field = sema.to_def(&it)?;\n-                Some(Definition::Field(field))\n+                Some(NameClass::Definition(Definition::Field(field)))\n             },\n             ast::Module(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::StructDef(it) => {\n                 let def: hir::Struct = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::UnionDef(it) => {\n                 let def: hir::Union = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::EnumDef(it) => {\n                 let def: hir::Enum = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::TraitDef(it) => {\n                 let def: hir::Trait = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::StaticDef(it) => {\n                 let def: hir::Static = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::EnumVariant(it) => {\n                 let def: hir::EnumVariant = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::FnDef(it) => {\n                 let def: hir::Function = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::ConstDef(it) => {\n                 let def: hir::Const = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::TypeAliasDef(it) => {\n                 let def: hir::TypeAlias = sema.to_def(&it)?;\n-                Some(Definition::ModuleDef(def.into()))\n+                Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::MacroCall(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(Definition::Macro(def))\n+                Some(NameClass::Definition(Definition::Macro(def)))\n             },\n             ast::TypeParam(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(Definition::TypeParam(def))\n+                Some(NameClass::Definition(Definition::TypeParam(def)))\n             },\n             _ => None,\n         }"}]}