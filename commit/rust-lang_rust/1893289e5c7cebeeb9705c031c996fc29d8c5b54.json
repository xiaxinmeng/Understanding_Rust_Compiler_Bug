{"sha": "1893289e5c7cebeeb9705c031c996fc29d8c5b54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OTMyODllNWM3Y2ViZWViOTcwNWMwMzFjOTk2ZmMyOWQ4YzViNTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T14:33:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T14:33:57Z"}, "message": "Move progress reporting to utils", "tree": {"sha": "19ff08cc4306fb4b0fbcb057927de3973d30eb33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ff08cc4306fb4b0fbcb057927de3973d30eb33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1893289e5c7cebeeb9705c031c996fc29d8c5b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1893289e5c7cebeeb9705c031c996fc29d8c5b54", "html_url": "https://github.com/rust-lang/rust/commit/1893289e5c7cebeeb9705c031c996fc29d8c5b54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1893289e5c7cebeeb9705c031c996fc29d8c5b54/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd903bf132dfc188e2f4c634a8b457ab4d7d4852", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd903bf132dfc188e2f4c634a8b457ab4d7d4852", "html_url": "https://github.com/rust-lang/rust/commit/bd903bf132dfc188e2f4c634a8b457ab4d7d4852"}], "stats": {"total": 183, "additions": 91, "deletions": 92}, "files": [{"sha": "41659f99d2d0118724fbd678bd7547fb12e63b59", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=1893289e5c7cebeeb9705c031c996fc29d8c5b54", "patch": "@@ -21,7 +21,6 @@ use crate::{\n     main_loop::Task,\n     reload::SourceRootConfig,\n     request_metrics::{LatestRequests, RequestMetrics},\n-    show_message,\n     thread_pool::TaskPool,\n     to_proto::url_from_abs_path,\n     Result,\n@@ -182,9 +181,6 @@ impl GlobalState {\n             self.send(response.into());\n         }\n     }\n-    pub(crate) fn show_message(&self, typ: lsp_types::MessageType, message: String) {\n-        show_message(typ, message, &self.sender)\n-    }\n }\n \n impl Drop for GlobalState {"}, {"sha": "407944d852c86febb79eb5643bf83b57f6fbeac3", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=1893289e5c7cebeeb9705c031c996fc29d8c5b54", "patch": "@@ -39,7 +39,7 @@ pub mod config;\n use serde::de::DeserializeOwned;\n \n pub type Result<T, E = Box<dyn std::error::Error + Send + Sync>> = std::result::Result<T, E>;\n-pub use crate::{caps::server_capabilities, lsp_utils::show_message, main_loop::main_loop};\n+pub use crate::{caps::server_capabilities, main_loop::main_loop};\n use std::fmt;\n \n pub fn from_json<T: DeserializeOwned>(what: &'static str, json: serde_json::Value) -> Result<T> {"}, {"sha": "fd793a17cfa03c938c4b50cb3f7c8b0adcfadeb9", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 71, "deletions": 14, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=1893289e5c7cebeeb9705c031c996fc29d8c5b54", "patch": "@@ -1,24 +1,13 @@\n //! Utilities for LSP-related boilerplate code.\n use std::{error::Error, ops::Range};\n \n-use crossbeam_channel::Sender;\n-use lsp_server::{Message, Notification};\n+use lsp_server::Notification;\n+use lsp_types::request::Request;\n use ra_db::Canceled;\n use ra_ide::LineIndex;\n use serde::Serialize;\n \n-use crate::from_proto;\n-\n-pub fn show_message(\n-    typ: lsp_types::MessageType,\n-    message: impl Into<String>,\n-    sender: &Sender<Message>,\n-) {\n-    let message = message.into();\n-    let params = lsp_types::ShowMessageParams { typ, message };\n-    let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n-    sender.send(not.into()).unwrap();\n-}\n+use crate::{from_proto, global_state::GlobalState};\n \n pub(crate) fn is_canceled(e: &(dyn Error + 'static)) -> bool {\n     e.downcast_ref::<Canceled>().is_some()\n@@ -38,6 +27,74 @@ where\n     Notification::new(N::METHOD.to_string(), params)\n }\n \n+#[derive(Debug, Eq, PartialEq)]\n+pub(crate) enum Progress {\n+    Begin,\n+    Report,\n+    End,\n+}\n+\n+impl Progress {\n+    pub(crate) fn percentage(done: usize, total: usize) -> f64 {\n+        (done as f64 / total.max(1) as f64) * 100.0\n+    }\n+}\n+\n+impl GlobalState {\n+    pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n+        let message = message.into();\n+        let params = lsp_types::ShowMessageParams { typ, message };\n+        let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n+        self.send(not.into());\n+    }\n+\n+    pub(crate) fn report_progress(\n+        &mut self,\n+        title: &str,\n+        state: Progress,\n+        message: Option<String>,\n+        percentage: Option<f64>,\n+    ) {\n+        if !self.config.client_caps.work_done_progress {\n+            return;\n+        }\n+        let token = lsp_types::ProgressToken::String(format!(\"rustAnalyzer/{}\", title));\n+        let work_done_progress = match state {\n+            Progress::Begin => {\n+                let work_done_progress_create = self.req_queue.outgoing.register(\n+                    lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n+                    lsp_types::WorkDoneProgressCreateParams { token: token.clone() },\n+                    |_, _| (),\n+                );\n+                self.send(work_done_progress_create.into());\n+\n+                lsp_types::WorkDoneProgress::Begin(lsp_types::WorkDoneProgressBegin {\n+                    title: title.into(),\n+                    cancellable: None,\n+                    message,\n+                    percentage,\n+                })\n+            }\n+            Progress::Report => {\n+                lsp_types::WorkDoneProgress::Report(lsp_types::WorkDoneProgressReport {\n+                    cancellable: None,\n+                    message,\n+                    percentage,\n+                })\n+            }\n+            Progress::End => {\n+                lsp_types::WorkDoneProgress::End(lsp_types::WorkDoneProgressEnd { message })\n+            }\n+        };\n+        let notification =\n+            notification_new::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n+                token,\n+                value: lsp_types::ProgressParamsValue::WorkDone(work_done_progress),\n+            });\n+        self.send(notification.into());\n+    }\n+}\n+\n pub(crate) fn apply_document_changes(\n     old_text: &mut String,\n     content_changes: Vec<lsp_types::TextDocumentContentChangeEvent>,"}, {"sha": "ae3c7e30eb042779717aa2817ab05646876d2fd9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 63, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1893289e5c7cebeeb9705c031c996fc29d8c5b54", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     from_proto,\n     global_state::{file_id_to_url, url_to_file_id, GlobalState, Status},\n     handlers, lsp_ext,\n-    lsp_utils::{apply_document_changes, is_canceled, notification_is, notification_new},\n+    lsp_utils::{apply_document_changes, is_canceled, notification_is, notification_new, Progress},\n     Result,\n };\n \n@@ -181,12 +181,11 @@ impl GlobalState {\n                         became_ready = true;\n                         Progress::End\n                     };\n-                    report_progress(\n-                        self,\n+                    self.report_progress(\n                         \"roots scanned\",\n                         state,\n                         Some(format!(\"{}/{}\", n_done, n_total)),\n-                        Some(percentage(n_done, n_total)),\n+                        Some(Progress::percentage(n_done, n_total)),\n                     )\n                 }\n             },\n@@ -216,7 +215,7 @@ impl GlobalState {\n                         flycheck::Progress::DidStart => {\n                             self.diagnostics.clear_check();\n                             (Progress::Begin, None)\n-                        },\n+                        }\n                         flycheck::Progress::DidCheckCrate(target) => {\n                             (Progress::Report, Some(target))\n                         }\n@@ -225,7 +224,7 @@ impl GlobalState {\n                         }\n                     };\n \n-                    report_progress(self, \"cargo check\", state, message, None);\n+                    self.report_progress(\"cargo check\", state, message, None);\n                 }\n             },\n         }\n@@ -468,60 +467,3 @@ impl GlobalState {\n         });\n     }\n }\n-\n-#[derive(Debug, Eq, PartialEq)]\n-enum Progress {\n-    Begin,\n-    Report,\n-    End,\n-}\n-\n-fn percentage(done: usize, total: usize) -> f64 {\n-    (done as f64 / total.max(1) as f64) * 100.0\n-}\n-\n-fn report_progress(\n-    global_state: &mut GlobalState,\n-    title: &str,\n-    state: Progress,\n-    message: Option<String>,\n-    percentage: Option<f64>,\n-) {\n-    if !global_state.config.client_caps.work_done_progress {\n-        return;\n-    }\n-    let token = lsp_types::ProgressToken::String(format!(\"rustAnalyzer/{}\", title));\n-    let work_done_progress = match state {\n-        Progress::Begin => {\n-            let work_done_progress_create = global_state.req_queue.outgoing.register(\n-                lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n-                lsp_types::WorkDoneProgressCreateParams { token: token.clone() },\n-                |_, _| (),\n-            );\n-            global_state.send(work_done_progress_create.into());\n-\n-            lsp_types::WorkDoneProgress::Begin(lsp_types::WorkDoneProgressBegin {\n-                title: title.into(),\n-                cancellable: None,\n-                message,\n-                percentage,\n-            })\n-        }\n-        Progress::Report => {\n-            lsp_types::WorkDoneProgress::Report(lsp_types::WorkDoneProgressReport {\n-                cancellable: None,\n-                message,\n-                percentage,\n-            })\n-        }\n-        Progress::End => {\n-            lsp_types::WorkDoneProgress::End(lsp_types::WorkDoneProgressEnd { message })\n-        }\n-    };\n-    let notification =\n-        notification_new::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n-            token,\n-            value: lsp_types::ProgressParamsValue::WorkDone(work_done_progress),\n-        });\n-    global_state.send(notification.into());\n-}"}, {"sha": "fece6176e72edf0b497a7c4068848580b5c96188", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893289e5c7cebeeb9705c031c996fc29d8c5b54/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=1893289e5c7cebeeb9705c031c996fc29d8c5b54", "patch": "@@ -36,27 +36,31 @@ impl GlobalState {\n             self.config\n                 .linked_projects\n                 .iter()\n-                .filter_map(|project| match project {\n+                .map(|project| match project {\n                     LinkedProject::ProjectManifest(manifest) => {\n                         ra_project_model::ProjectWorkspace::load(\n                             manifest.clone(),\n                             &self.config.cargo,\n                             self.config.with_sysroot,\n                         )\n-                        .map_err(|err| {\n-                            log::error!(\"failed to load workspace: {:#}\", err);\n-                            self.show_message(\n-                                lsp_types::MessageType::Error,\n-                                format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n-                            );\n-                        })\n-                        .ok()\n                     }\n                     LinkedProject::InlineJsonProject(it) => {\n-                        Some(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n+                        Ok(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n                     }\n                 })\n                 .collect::<Vec<_>>()\n+                .into_iter()\n+                .filter_map(|res| {\n+                    res.map_err(|err| {\n+                        log::error!(\"failed to load workspace: {:#}\", err);\n+                        self.show_message(\n+                            lsp_types::MessageType::Error,\n+                            format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n+                        );\n+                    })\n+                    .ok()\n+                })\n+                .collect::<Vec<_>>()\n         };\n \n         if let FilesWatcher::Client = self.config.files.watcher {"}]}