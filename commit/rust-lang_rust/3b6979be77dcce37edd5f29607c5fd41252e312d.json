{"sha": "3b6979be77dcce37edd5f29607c5fd41252e312d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjk3OWJlNzdkY2NlMzdlZGQ1ZjI5NjA3YzVmZDQxMjUyZTMxMmQ=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-20T16:38:52Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-20T16:38:52Z"}, "message": "Use expect in never_type tests", "tree": {"sha": "c0d45f11daec8264432eead1c0edc0f6439f97d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d45f11daec8264432eead1c0edc0f6439f97d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6979be77dcce37edd5f29607c5fd41252e312d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6979be77dcce37edd5f29607c5fd41252e312d", "html_url": "https://github.com/rust-lang/rust/commit/3b6979be77dcce37edd5f29607c5fd41252e312d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6979be77dcce37edd5f29607c5fd41252e312d/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82899ad764502eab0ee1410afb42888bbd5099e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82899ad764502eab0ee1410afb42888bbd5099e", "html_url": "https://github.com/rust-lang/rust/commit/b82899ad764502eab0ee1410afb42888bbd5099e"}], "stats": {"total": 371, "additions": 185, "deletions": 186}, "files": [{"sha": "5eaf25a77d6f4ed30d4615eda46ba6d1165a287e", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3b6979be77dcce37edd5f29607c5fd41252e312d/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6979be77dcce37edd5f29607c5fd41252e312d/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=3b6979be77dcce37edd5f29607c5fd41252e312d", "patch": "@@ -10,6 +10,7 @@ mod display_source_code;\n \n use std::sync::Arc;\n \n+use expect::Expect;\n use hir_def::{\n     body::{BodySourceMap, SyntheticSyntax},\n     child_by_source::ChildBySource,\n@@ -344,3 +345,29 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         assert!(!format!(\"{:?}\", events).contains(\"infer\"), \"{:#?}\", events)\n     }\n }\n+\n+// Infer with some common definitions and impls.\n+fn check_infer(ra_fixture: &str, expect: Expect) {\n+    let defs = r#\"\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        #[lang = \"coerce_unsized\"]\n+        pub trait CoerceUnsized<T> {}\n+\n+        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n+    \"#;\n+\n+    // Append to the end to keep positions unchanged.\n+    let mut actual = infer(&format!(\"{}{}\", ra_fixture, defs));\n+    actual.push('\\n');\n+    expect.assert_eq(&actual);\n+}\n+\n+fn check_infer_with_mismatches(ra_fixture: &str, expect: Expect) {\n+    let mut actual = infer_with_mismatches(ra_fixture, true);\n+    actual.push('\\n');\n+    expect.assert_eq(&actual);\n+}"}, {"sha": "823abddc65c760ae4cc9b2e59931ac4d66ddaa34", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3b6979be77dcce37edd5f29607c5fd41252e312d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6979be77dcce37edd5f29607c5fd41252e312d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=3b6979be77dcce37edd5f29607c5fd41252e312d", "patch": "@@ -1,32 +1,7 @@\n+use expect::expect;\n use test_utils::mark;\n \n-use expect::{expect, Expect};\n-\n-// Infer with some common definitions and impls.\n-fn check_infer(ra_fixture: &str, expect: Expect) {\n-    let defs = r#\"\n-        #[lang = \"sized\"]\n-        pub trait Sized {}\n-        #[lang = \"unsize\"]\n-        pub trait Unsize<T: ?Sized> {}\n-        #[lang = \"coerce_unsized\"]\n-        pub trait CoerceUnsized<T> {}\n-\n-        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n-        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n-    \"#;\n-\n-    // Append to the end to keep positions unchanged.\n-    let mut actual = super::infer(&format!(\"{}{}\", ra_fixture, defs));\n-    actual.push('\\n');\n-    expect.assert_eq(&actual);\n-}\n-\n-fn check_infer_with_mismatches(ra_fixture: &str, expect: Expect) {\n-    let mut actual = super::infer_with_mismatches(ra_fixture, true);\n-    actual.push('\\n');\n-    expect.assert_eq(&actual);\n-}\n+use super::{check_infer, check_infer_with_mismatches};\n \n #[test]\n fn infer_block_expr_type_mismatch() {"}, {"sha": "49538b572db3089cd3c33cb302deb6c65221ffac", "filename": "crates/ra_hir_ty/src/tests/never_type.rs", "status": "modified", "additions": 156, "deletions": 159, "changes": 315, "blob_url": "https://github.com/rust-lang/rust/blob/3b6979be77dcce37edd5f29607c5fd41252e312d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6979be77dcce37edd5f29607c5fd41252e312d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fnever_type.rs?ref=3b6979be77dcce37edd5f29607c5fd41252e312d", "patch": "@@ -1,6 +1,6 @@\n-use insta::assert_snapshot;\n+use expect::expect;\n \n-use super::{check_types, infer_with_mismatches};\n+use super::{check_infer_with_mismatches, check_types};\n \n #[test]\n fn infer_never1() {\n@@ -240,173 +240,170 @@ fn test(a: i32) {\n \n #[test]\n fn diverging_expression_1() {\n-    let t = infer_with_mismatches(\n-        r#\"\n-//- /main.rs\n-fn test1() {\n-    let x: u32 = return;\n-}\n-fn test2() {\n-    let x: u32 = { return; };\n-}\n-fn test3() {\n-    let x: u32 = loop {};\n-}\n-fn test4() {\n-    let x: u32 = { loop {} };\n-}\n-fn test5() {\n-    let x: u32 = { if true { loop {}; } else { loop {}; } };\n-}\n-fn test6() {\n-    let x: u32 = { let y: u32 = { loop {}; }; };\n-}\n-\"#,\n-        true,\n+    check_infer_with_mismatches(\n+        r\"\n+        //- /main.rs\n+        fn test1() {\n+            let x: u32 = return;\n+        }\n+        fn test2() {\n+            let x: u32 = { return; };\n+        }\n+        fn test3() {\n+            let x: u32 = loop {};\n+        }\n+        fn test4() {\n+            let x: u32 = { loop {} };\n+        }\n+        fn test5() {\n+            let x: u32 = { if true { loop {}; } else { loop {}; } };\n+        }\n+        fn test6() {\n+            let x: u32 = { let y: u32 = { loop {}; }; };\n+        }\n+        \",\n+        expect![[r\"\n+            11..39 '{     ...urn; }': ()\n+            21..22 'x': u32\n+            30..36 'return': !\n+            51..84 '{     ...; }; }': ()\n+            61..62 'x': u32\n+            70..81 '{ return; }': u32\n+            72..78 'return': !\n+            96..125 '{     ... {}; }': ()\n+            106..107 'x': u32\n+            115..122 'loop {}': !\n+            120..122 '{}': ()\n+            137..170 '{     ...} }; }': ()\n+            147..148 'x': u32\n+            156..167 '{ loop {} }': u32\n+            158..165 'loop {}': !\n+            163..165 '{}': ()\n+            182..246 '{     ...} }; }': ()\n+            192..193 'x': u32\n+            201..243 '{ if t...}; } }': u32\n+            203..241 'if tru... {}; }': u32\n+            206..210 'true': bool\n+            211..223 '{ loop {}; }': u32\n+            213..220 'loop {}': !\n+            218..220 '{}': ()\n+            229..241 '{ loop {}; }': u32\n+            231..238 'loop {}': !\n+            236..238 '{}': ()\n+            258..310 '{     ...; }; }': ()\n+            268..269 'x': u32\n+            277..307 '{ let ...; }; }': u32\n+            283..284 'y': u32\n+            292..304 '{ loop {}; }': u32\n+            294..301 'loop {}': !\n+            299..301 '{}': ()\n+        \"]],\n     );\n-    assert_snapshot!(t, @r###\"\n-    11..39 '{     ...urn; }': ()\n-    21..22 'x': u32\n-    30..36 'return': !\n-    51..84 '{     ...; }; }': ()\n-    61..62 'x': u32\n-    70..81 '{ return; }': u32\n-    72..78 'return': !\n-    96..125 '{     ... {}; }': ()\n-    106..107 'x': u32\n-    115..122 'loop {}': !\n-    120..122 '{}': ()\n-    137..170 '{     ...} }; }': ()\n-    147..148 'x': u32\n-    156..167 '{ loop {} }': u32\n-    158..165 'loop {}': !\n-    163..165 '{}': ()\n-    182..246 '{     ...} }; }': ()\n-    192..193 'x': u32\n-    201..243 '{ if t...}; } }': u32\n-    203..241 'if tru... {}; }': u32\n-    206..210 'true': bool\n-    211..223 '{ loop {}; }': u32\n-    213..220 'loop {}': !\n-    218..220 '{}': ()\n-    229..241 '{ loop {}; }': u32\n-    231..238 'loop {}': !\n-    236..238 '{}': ()\n-    258..310 '{     ...; }; }': ()\n-    268..269 'x': u32\n-    277..307 '{ let ...; }; }': u32\n-    283..284 'y': u32\n-    292..304 '{ loop {}; }': u32\n-    294..301 'loop {}': !\n-    299..301 '{}': ()\n-    \"###);\n }\n \n #[test]\n fn diverging_expression_2() {\n-    let t = infer_with_mismatches(\n+    check_infer_with_mismatches(\n         r#\"\n-//- /main.rs\n-fn test1() {\n-    // should give type mismatch\n-    let x: u32 = { loop {}; \"foo\" };\n-}\n-\"#,\n-        true,\n+        //- /main.rs\n+        fn test1() {\n+            // should give type mismatch\n+            let x: u32 = { loop {}; \"foo\" };\n+        }\n+        \"#,\n+        expect![[r#\"\n+            11..84 '{     ...\" }; }': ()\n+            54..55 'x': u32\n+            63..81 '{ loop...foo\" }': &str\n+            65..72 'loop {}': !\n+            70..72 '{}': ()\n+            74..79 '\"foo\"': &str\n+            63..81: expected u32, got &str\n+            74..79: expected u32, got &str\n+        \"#]],\n     );\n-    assert_snapshot!(t, @r###\"\n-    11..84 '{     ...\" }; }': ()\n-    54..55 'x': u32\n-    63..81 '{ loop...foo\" }': &str\n-    65..72 'loop {}': !\n-    70..72 '{}': ()\n-    74..79 '\"foo\"': &str\n-    63..81: expected u32, got &str\n-    74..79: expected u32, got &str\n-    \"###);\n }\n \n #[test]\n fn diverging_expression_3_break() {\n-    let t = infer_with_mismatches(\n-        r#\"\n-//- /main.rs\n-fn test1() {\n-    // should give type mismatch\n-    let x: u32 = { loop { break; } };\n-}\n-fn test2() {\n-    // should give type mismatch\n-    let x: u32 = { for a in b { break; }; };\n-    // should give type mismatch as well\n-    let x: u32 = { for a in b {}; };\n-    // should give type mismatch as well\n-    let x: u32 = { for a in b { return; }; };\n-}\n-fn test3() {\n-    // should give type mismatch\n-    let x: u32 = { while true { break; }; };\n-    // should give type mismatch as well -- there's an implicit break, even if it's never hit\n-    let x: u32 = { while true {}; };\n-    // should give type mismatch as well\n-    let x: u32 = { while true { return; }; };\n-}\n-\"#,\n-        true,\n+    check_infer_with_mismatches(\n+        r\"\n+        //- /main.rs\n+        fn test1() {\n+            // should give type mismatch\n+            let x: u32 = { loop { break; } };\n+        }\n+        fn test2() {\n+            // should give type mismatch\n+            let x: u32 = { for a in b { break; }; };\n+            // should give type mismatch as well\n+            let x: u32 = { for a in b {}; };\n+            // should give type mismatch as well\n+            let x: u32 = { for a in b { return; }; };\n+        }\n+        fn test3() {\n+            // should give type mismatch\n+            let x: u32 = { while true { break; }; };\n+            // should give type mismatch as well -- there's an implicit break, even if it's never hit\n+            let x: u32 = { while true {}; };\n+            // should give type mismatch as well\n+            let x: u32 = { while true { return; }; };\n+        }\n+        \",\n+        expect![[r\"\n+            11..85 '{     ...} }; }': ()\n+            54..55 'x': u32\n+            63..82 '{ loop...k; } }': ()\n+            65..80 'loop { break; }': ()\n+            70..80 '{ break; }': ()\n+            72..77 'break': !\n+            63..82: expected u32, got ()\n+            65..80: expected u32, got ()\n+            97..343 '{     ...; }; }': ()\n+            140..141 'x': u32\n+            149..175 '{ for ...; }; }': ()\n+            151..172 'for a ...eak; }': ()\n+            155..156 'a': {unknown}\n+            160..161 'b': {unknown}\n+            162..172 '{ break; }': ()\n+            164..169 'break': !\n+            226..227 'x': u32\n+            235..253 '{ for ... {}; }': ()\n+            237..250 'for a in b {}': ()\n+            241..242 'a': {unknown}\n+            246..247 'b': {unknown}\n+            248..250 '{}': ()\n+            304..305 'x': u32\n+            313..340 '{ for ...; }; }': ()\n+            315..337 'for a ...urn; }': ()\n+            319..320 'a': {unknown}\n+            324..325 'b': {unknown}\n+            326..337 '{ return; }': ()\n+            328..334 'return': !\n+            149..175: expected u32, got ()\n+            235..253: expected u32, got ()\n+            313..340: expected u32, got ()\n+            355..654 '{     ...; }; }': ()\n+            398..399 'x': u32\n+            407..433 '{ whil...; }; }': ()\n+            409..430 'while ...eak; }': ()\n+            415..419 'true': bool\n+            420..430 '{ break; }': ()\n+            422..427 'break': !\n+            537..538 'x': u32\n+            546..564 '{ whil... {}; }': ()\n+            548..561 'while true {}': ()\n+            554..558 'true': bool\n+            559..561 '{}': ()\n+            615..616 'x': u32\n+            624..651 '{ whil...; }; }': ()\n+            626..648 'while ...urn; }': ()\n+            632..636 'true': bool\n+            637..648 '{ return; }': ()\n+            639..645 'return': !\n+            407..433: expected u32, got ()\n+            546..564: expected u32, got ()\n+            624..651: expected u32, got ()\n+        \"]],\n     );\n-    assert_snapshot!(t, @r###\"\n-    11..85 '{     ...} }; }': ()\n-    54..55 'x': u32\n-    63..82 '{ loop...k; } }': ()\n-    65..80 'loop { break; }': ()\n-    70..80 '{ break; }': ()\n-    72..77 'break': !\n-    63..82: expected u32, got ()\n-    65..80: expected u32, got ()\n-    97..343 '{     ...; }; }': ()\n-    140..141 'x': u32\n-    149..175 '{ for ...; }; }': ()\n-    151..172 'for a ...eak; }': ()\n-    155..156 'a': {unknown}\n-    160..161 'b': {unknown}\n-    162..172 '{ break; }': ()\n-    164..169 'break': !\n-    226..227 'x': u32\n-    235..253 '{ for ... {}; }': ()\n-    237..250 'for a in b {}': ()\n-    241..242 'a': {unknown}\n-    246..247 'b': {unknown}\n-    248..250 '{}': ()\n-    304..305 'x': u32\n-    313..340 '{ for ...; }; }': ()\n-    315..337 'for a ...urn; }': ()\n-    319..320 'a': {unknown}\n-    324..325 'b': {unknown}\n-    326..337 '{ return; }': ()\n-    328..334 'return': !\n-    149..175: expected u32, got ()\n-    235..253: expected u32, got ()\n-    313..340: expected u32, got ()\n-    355..654 '{     ...; }; }': ()\n-    398..399 'x': u32\n-    407..433 '{ whil...; }; }': ()\n-    409..430 'while ...eak; }': ()\n-    415..419 'true': bool\n-    420..430 '{ break; }': ()\n-    422..427 'break': !\n-    537..538 'x': u32\n-    546..564 '{ whil... {}; }': ()\n-    548..561 'while true {}': ()\n-    554..558 'true': bool\n-    559..561 '{}': ()\n-    615..616 'x': u32\n-    624..651 '{ whil...; }; }': ()\n-    626..648 'while ...urn; }': ()\n-    632..636 'true': bool\n-    637..648 '{ return; }': ()\n-    639..645 'return': !\n-    407..433: expected u32, got ()\n-    546..564: expected u32, got ()\n-    624..651: expected u32, got ()\n-    \"###);\n }"}]}