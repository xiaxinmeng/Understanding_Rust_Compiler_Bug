{"sha": "ee2e97c41627e16a818871374add27c03e7e1355", "node_id": "C_kwDOAAsO6NoAKGVlMmU5N2M0MTYyN2UxNmE4MTg4NzEzNzRhZGQyN2MwM2U3ZTEzNTU", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-24T18:40:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T18:40:11Z"}, "message": "Rollup merge of #89001 - jackh726:binder-cleanup, r=nikomatsakis\n\nBe explicit about using Binder::dummy\n\nThis is somewhat of a late followup to the binder refactor PR. It removes `ToPredicate` and `ToPolyTraitImpls` that hide the use of `Binder::dummy`. While this does make code a bit more verbose, it allows us be more careful about where we create binders.\n\nAnother alternative here might be to add a new trait `ToBinder` or something with a `dummy()` fn. Which could still allow grepping but allows doing something like `trait_ref.dummy()` (but I also wonder if longer-term, it would be better to be even more explicit with a `bind_with_vars(ty::List::empty())` *but* that's not clear yet.\n\nr? ``@nikomatsakis``", "tree": {"sha": "a01f49712f5a6ba8d16d7ae726263eb71bfc2bf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01f49712f5a6ba8d16d7ae726263eb71bfc2bf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2e97c41627e16a818871374add27c03e7e1355", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhThuMCRBK7hj4Ov3rIwAABeMIADdZE85XBWVRkIKrxWL80ZLy\nKJdtn9C2fKDkzSKZ8sesy6m3aFsN5prI855wVavoGhLEULecvBTDthp8qCK9epML\nCxtuC8Mx6K/Htnox11JXT5zAqVwRXR6wcZ08iR/jd199Ra0glI+wa/kRToHxzgMC\nrrHJogrly3jhxDgcQ6pa8TQKfNiJ9DdHXjMP60E8+o1/AxbyuAJZibXyPikQmB18\nP4Sybk3zjdOjH5HUr5UI6Vl5w1TLX8fI4g8z2QUbPXlX5AJib1iT8QunnziRnXgw\nNGXFBOzfkMJ1nIsEt5lTRLUrBU4KL+FEXYBv8TgjF4ViuxeMXFrjYwKQ88CGcRs=\n=kkvg\n-----END PGP SIGNATURE-----\n", "payload": "tree a01f49712f5a6ba8d16d7ae726263eb71bfc2bf1\nparent 2de7f1075f59e15587cacba5661c969434bdf6bd\nparent 553f6496f2988d0383e501314cee10ec097c5ebd\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1632508811 -0700\ncommitter GitHub <noreply@github.com> 1632508811 -0700\n\nRollup merge of #89001 - jackh726:binder-cleanup, r=nikomatsakis\n\nBe explicit about using Binder::dummy\n\nThis is somewhat of a late followup to the binder refactor PR. It removes `ToPredicate` and `ToPolyTraitImpls` that hide the use of `Binder::dummy`. While this does make code a bit more verbose, it allows us be more careful about where we create binders.\n\nAnother alternative here might be to add a new trait `ToBinder` or something with a `dummy()` fn. Which could still allow grepping but allows doing something like `trait_ref.dummy()` (but I also wonder if longer-term, it would be better to be even more explicit with a `bind_with_vars(ty::List::empty())` *but* that's not clear yet.\n\nr? ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2e97c41627e16a818871374add27c03e7e1355", "html_url": "https://github.com/rust-lang/rust/commit/ee2e97c41627e16a818871374add27c03e7e1355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2e97c41627e16a818871374add27c03e7e1355/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2de7f1075f59e15587cacba5661c969434bdf6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2de7f1075f59e15587cacba5661c969434bdf6bd", "html_url": "https://github.com/rust-lang/rust/commit/2de7f1075f59e15587cacba5661c969434bdf6bd"}, {"sha": "553f6496f2988d0383e501314cee10ec097c5ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/553f6496f2988d0383e501314cee10ec097c5ebd", "html_url": "https://github.com/rust-lang/rust/commit/553f6496f2988d0383e501314cee10ec097c5ebd"}], "stats": {"total": 248, "additions": 127, "deletions": 121}, "files": [{"sha": "e77619882228139f12a99e700b8d289e4856837c", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -89,10 +89,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n     ) {\n         self.prove_predicates(\n-            Some(ty::PredicateKind::Trait(ty::TraitPredicate {\n+            Some(ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n                 trait_ref,\n                 constness: ty::BoundConstness::NotConst,\n-            })),\n+            }))),\n             locations,\n             category,\n         );"}, {"sha": "10544cb67397deb9f7233fd037871eb95e7b37de", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -1080,7 +1080,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n \n                     self.prove_predicate(\n-                        ty::PredicateKind::WellFormed(inferred_ty.into()).to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))\n+                            .to_predicate(self.tcx()),\n                         Locations::All(span),\n                         ConstraintCategory::TypeAnnotation,\n                     );\n@@ -1316,7 +1317,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     obligations.obligations.push(traits::Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        ty::PredicateKind::WellFormed(revealed_ty.into()).to_predicate(infcx.tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(revealed_ty.into()))\n+                            .to_predicate(infcx.tcx),\n                     ));\n                     obligations.add(\n                         infcx\n@@ -1599,7 +1601,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_call_dest(body, term, &sig, destination, term_location);\n \n                 self.prove_predicates(\n-                    sig.inputs_and_output.iter().map(|ty| ty::PredicateKind::WellFormed(ty.into())),\n+                    sig.inputs_and_output\n+                        .iter()\n+                        .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),\n                     term_location.to_locations(),\n                     ConstraintCategory::Boring,\n                 );"}, {"sha": "b5c0307255771d3a4d9da59c21e6ca98df076488", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -669,8 +669,10 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         self.obligations.push(Obligation {\n             cause: self.cause.clone(),\n             param_env: self.param_env,\n-            predicate: ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(sup, sub))\n-                .to_predicate(self.infcx.tcx),\n+            predicate: ty::Binder::dummy(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n+                sup, sub,\n+            )))\n+            .to_predicate(self.infcx.tcx),\n             recursion_depth: 0,\n         });\n     }"}, {"sha": "3f54247ecef211bcd48e6e621b05d39037193e15", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -360,7 +360,8 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             self.obligations.push(Obligation::new(\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::PredicateKind::WellFormed(b_ty.into()).to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))\n+                    .to_predicate(self.infcx.tcx),\n             ));\n         }\n \n@@ -463,7 +464,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         self.obligations.push(Obligation::new(\n             self.trace.cause.clone(),\n             self.param_env,\n-            predicate.to_predicate(self.tcx()),\n+            ty::Binder::dummy(predicate).to_predicate(self.tcx()),\n         ));\n     }\n }"}, {"sha": "8ef0d132cf09fc5692a956adcd3c0c9bfe0da086", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -97,11 +97,11 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n                 self.fields.obligations.push(Obligation::new(\n                     self.fields.trace.cause.clone(),\n                     self.fields.param_env,\n-                    ty::PredicateKind::Subtype(ty::SubtypePredicate {\n+                    ty::Binder::dummy(ty::PredicateKind::Subtype(ty::SubtypePredicate {\n                         a_is_expected: self.a_is_expected,\n                         a,\n                         b,\n-                    })\n+                    }))\n                     .to_predicate(self.tcx()),\n                 ));\n "}, {"sha": "dce4a87b041189a49910765f763ef7798d781a77", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -35,7 +35,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n                 cause,\n                 recursion_depth: 0,\n                 param_env,\n-                predicate: trait_ref.without_const().to_predicate(infcx.tcx),\n+                predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(infcx.tcx),\n             },\n         );\n     }"}, {"sha": "30d5613d5820d8664817bab71e3ed0d836ada1f1", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -231,6 +231,7 @@ impl Elaborator<'tcx> {\n                                 None\n                             }\n                         })\n+                        .map(ty::Binder::dummy)\n                         .map(|predicate_kind| predicate_kind.to_predicate(tcx))\n                         .filter(|&predicate| visited.insert(predicate))\n                         .map(|predicate| {"}, {"sha": "b3ae76d987167fe84fa32c13f7ed621f42c96aac", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -769,12 +769,6 @@ pub trait ToPolyTraitRef<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;\n }\n \n-impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> {\n-    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n-        ty::Binder::dummy(*self)\n-    }\n-}\n-\n impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n         self.map_bound_ref(|trait_pred| trait_pred.trait_ref)\n@@ -792,23 +786,6 @@ impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     }\n }\n \n-impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n-    #[inline(always)]\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        tcx.mk_predicate(Binder::dummy(self))\n-    }\n-}\n-\n-impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::Trait(ty::TraitPredicate {\n-            trait_ref: self.value,\n-            constness: self.constness,\n-        })\n-        .to_predicate(tcx)\n-    }\n-}\n-\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.value"}, {"sha": "d3094b3e6ff4d74ccb3ea809de72d01ebcd1bcf2", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -844,8 +844,11 @@ impl<'tcx> TraitRef<'tcx> {\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n-    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n-        TraitRef { def_id, substs: InternalSubsts::identity_for_item(tcx, def_id) }\n+    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n+        ty::Binder::dummy(TraitRef {\n+            def_id,\n+            substs: InternalSubsts::identity_for_item(tcx, def_id),\n+        })\n     }\n \n     #[inline]"}, {"sha": "a89796f172c5a588c398ce440034b07936bd2857", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let obligation = traits::Obligation::new(\n             cause.clone(),\n             self.param_env,\n-            trait_ref.without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");"}, {"sha": "8fb4eb641c26a913af2e04053b1e591babf53452", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -120,7 +120,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n             cause: traits::ObligationCause::dummy(),\n             param_env,\n             recursion_depth: 0,\n-            predicate: trait_ref.without_const().to_predicate(self.tcx),\n+            predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx),\n         };\n         self.evaluate_obligation(&obligation).unwrap_or(traits::EvaluationResult::EvaluatedToErr)\n     }"}, {"sha": "9d1f409d69c665285be51a558fcfc54581800172", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -726,7 +726,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let new_obligation = Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                new_trait_ref.without_const().to_predicate(self.tcx),\n+                ty::Binder::dummy(new_trait_ref).without_const().to_predicate(self.tcx),\n             );\n \n             if self.predicate_must_hold_modulo_regions(&new_obligation) {"}, {"sha": "465d1465d5d3538325def6ae9dcf226b730f9aa6", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -418,7 +418,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 | ty::PredicateKind::Coerce(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => {\n-                    let pred = infcx.replace_bound_vars_with_placeholders(binder);\n+                    let pred =\n+                        ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![\n                         obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))"}, {"sha": "b3c9cf4c173ecdc72fb2c3a12354b7eb3bff8594", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -140,7 +140,8 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         infcx.tcx.def_path_str(def_id)\n     );\n \n-    let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n+    let trait_ref =\n+        ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n     let obligation = Obligation {\n         param_env,\n         cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),"}, {"sha": "0bb00dfeb43ad92fd54f6d035dd4d545403df7f7", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -250,7 +250,7 @@ fn predicates_reference_self(\n     trait_def_id: DefId,\n     supertraits_only: bool,\n ) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n+    let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n     } else {\n@@ -554,11 +554,11 @@ fn object_ty_for_trait<'tcx>(\n \n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n \n-    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n-        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n-    ));\n+    let trait_predicate = trait_ref.map_bound(|trait_ref| {\n+        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n+    });\n \n-    let mut associated_types = traits::supertraits(tcx, ty::Binder::dummy(trait_ref))\n+    let mut associated_types = traits::supertraits(tcx, trait_ref)\n         .flat_map(|super_trait_ref| {\n             tcx.associated_items(super_trait_ref.def_id())\n                 .in_definition_order()\n@@ -671,10 +671,10 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::TraitRef {\n+        let unsize_predicate = ty::Binder::dummy(ty::TraitRef {\n             def_id: unsize_did,\n             substs: tcx.mk_substs_trait(tcx.types.self_param, &[unsized_self_ty.into()]),\n-        }\n+        })\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -689,7 +689,9 @@ fn receiver_is_dispatchable<'tcx>(\n                     }\n                 });\n \n-            ty::TraitRef { def_id: unsize_did, substs }.without_const().to_predicate(tcx)\n+            ty::Binder::dummy(ty::TraitRef { def_id: unsize_did, substs })\n+                .without_const()\n+                .to_predicate(tcx)\n         };\n \n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n@@ -703,10 +705,10 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::TraitRef {\n+        let predicate = ty::Binder::dummy(ty::TraitRef {\n             def_id: dispatch_from_dyn_did,\n             substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n-        }\n+        })\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -789,8 +791,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n-                        let trait_ref =\n-                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n+                        let trait_ref = ty::TraitRef::identity(self.tcx, self.trait_def_id);\n                         self.supertraits = Some(\n                             traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n                         );"}, {"sha": "baf6b725648df4b0bd7209a47177f555b4305834", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;\n@@ -1028,7 +1028,7 @@ fn normalize_to_error<'a, 'tcx>(\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n ) -> NormalizedTy<'tcx> {\n-    let trait_ref = projection_ty.trait_ref(selcx.tcx()).to_poly_trait_ref();\n+    let trait_ref = ty::Binder::dummy(projection_ty.trait_ref(selcx.tcx()));\n     let trait_obligation = Obligation {\n         cause,\n         recursion_depth: depth,\n@@ -1290,7 +1290,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n \n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n-    let poly_trait_ref = obligation.predicate.trait_ref(selcx.tcx()).to_poly_trait_ref();\n+    let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n     let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());\n     let _ = selcx.infcx().commit_if_ok(|_| {\n         let impl_source = match selcx.select(&trait_obligation) {"}, {"sha": "9e1211336a4b01472026ee7a2cb0d53ecdfb3fac", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -141,6 +141,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let placeholder_trait_predicate =\n                 self.infcx().replace_bound_vars_with_placeholders(trait_predicate);\n             let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n+            let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n             let (def_id, substs) = match *placeholder_self_ty.kind() {\n                 ty::Projection(proj) => (proj.item_def_id, proj.substs),\n                 ty::Opaque(def_id, substs) => (def_id, substs),\n@@ -164,7 +165,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate.value)\n+                    .sup(placeholder_trait_predicate.to_poly_trait_ref(), candidate.value)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);\n@@ -646,7 +647,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)\n+                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind))\n                     .to_predicate(self.tcx()),\n             ));\n         }\n@@ -898,10 +899,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::TraitRef::new(\n+                let tr = ty::Binder::dummy(ty::TraitRef::new(\n                     tcx.require_lang_item(LangItem::Sized, None),\n                     tcx.mk_substs_trait(source, &[]),\n-                );\n+                ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "ed49abbbedc92dfe8415a16f377c45f0c84ba567", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -248,7 +248,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n         cause,\n         param_env,\n         recursion_depth,\n-        predicate: trait_ref.without_const().to_predicate(tcx),\n+        predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n     }\n }\n "}, {"sha": "cb47ba9c360da14401081cfc132e70e61a678641", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -349,7 +349,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         new_cause,\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n                     )\n                 }),\n         );\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n                     )\n                 }),\n         );\n@@ -416,7 +416,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 cause,\n                 self.recursion_depth,\n                 self.param_env,\n-                trait_ref.without_const().to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.infcx.tcx),\n             ));\n         }\n     }\n@@ -443,9 +443,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let obligations = self.nominal_obligations(uv.def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(\n+                            let predicate = ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n                                 ty::Unevaluated::new(uv.def, substs),\n-                            )\n+                            ))\n                             .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth(\n@@ -469,8 +469,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                     cause,\n                                     self.recursion_depth,\n                                     self.param_env,\n-                                    ty::PredicateKind::WellFormed(resolved_constant.into())\n-                                        .to_predicate(self.tcx()),\n+                                    ty::Binder::dummy(ty::PredicateKind::WellFormed(\n+                                        resolved_constant.into(),\n+                                    ))\n+                                    .to_predicate(self.tcx()),\n                                 ));\n                             }\n                         }\n@@ -556,8 +558,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             cause,\n                             depth,\n                             param_env,\n-                            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(rty, r))\n-                                .to_predicate(self.tcx()),\n+                            ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(rty, r),\n+                            ))\n+                            .to_predicate(self.tcx()),\n                         ));\n                     }\n                 }\n@@ -646,7 +650,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 cause.clone(),\n                                 depth,\n                                 param_env,\n-                                ty::PredicateKind::ObjectSafe(did).to_predicate(tcx),\n+                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did))\n+                                    .to_predicate(tcx),\n                             )\n                         }));\n                     }\n@@ -673,7 +678,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             cause,\n                             self.recursion_depth,\n                             param_env,\n-                            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+                            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n+                                .to_predicate(self.tcx()),\n                         ));\n                     } else {\n                         // Yes, resolved, proceed with the result."}, {"sha": "f954cab240ca20db69d31a7f38a8c328db404583", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -156,7 +156,8 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n             self.relate(self_ty, Variance::Invariant, impl_self_ty)?;\n \n             self.prove_predicate(\n-                ty::PredicateKind::WellFormed(impl_self_ty.into()).to_predicate(self.tcx()),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(impl_self_ty.into()))\n+                    .to_predicate(self.tcx()),\n                 span,\n             );\n         }\n@@ -173,7 +174,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         // type were ill-formed but did not appear in `ty`,\n         // which...could happen with normalization...\n         self.prove_predicate(\n-            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())).to_predicate(self.tcx()),\n             span,\n         );\n         Ok(())"}, {"sha": "6a231e719e66462a9751bd69392442e3648a124a", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -524,13 +524,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for o in obligations {\n                     match o.predicate.kind().skip_binder() {\n                         ty::PredicateKind::Trait(t) => {\n-                            let pred = ty::PredicateKind::Trait(ty::TraitPredicate {\n-                                trait_ref: ty::TraitRef {\n-                                    def_id: t.def_id(),\n-                                    substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n-                                },\n-                                constness: t.constness,\n-                            });\n+                            let pred =\n+                                ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n+                                    trait_ref: ty::TraitRef {\n+                                        def_id: t.def_id(),\n+                                        substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n+                                    },\n+                                    constness: t.constness,\n+                                }));\n                             let obl = Obligation::new(\n                                 o.cause.clone(),\n                                 self.param_env,"}, {"sha": "ef18c1e7779d862a4a9710eb6cb1c80a98bb02b1", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -256,10 +256,10 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     obligations.push(Obligation::new(\n                         self.cause.clone(),\n                         self.param_env,\n-                        ty::PredicateKind::Coerce(ty::CoercePredicate {\n+                        ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {\n                             a: source_ty,\n                             b: target_ty,\n-                        })\n+                        }))\n                         .to_predicate(self.tcx()),\n                     ));\n                 }"}, {"sha": "553f5ed8a0ca4f358cf9c59e1b7241137652dd0b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -585,7 +585,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.register_predicate(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(arg).to_predicate(self.tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx),\n         ));\n     }\n "}, {"sha": "113d495f0ce93c499238702926154ab5afb2d1bc", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -331,7 +331,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_ref = ty::TraitRef::new(trait_def_id, substs);\n \n         // Construct an obligation\n-        let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n         let obligation = traits::Obligation::misc(\n             span,\n             self.body_id,\n@@ -413,7 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         obligations.push(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(method_ty.into()).to_predicate(tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())).to_predicate(tcx),\n         ));\n \n         let callee = MethodCallee { def_id, substs: trait_ref.substs, sig: fn_sig };"}, {"sha": "5aa579f33a9d2148448ff80a0cd4c64b1d664be0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -21,9 +21,7 @@ use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{find_best_match_for_name, lev_distance};\n@@ -967,7 +965,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, assume all super-traits are relevant.\n-            let bounds = iter::once(trait_ref.to_poly_trait_ref());\n+            let bounds = iter::once(ty::Binder::dummy(trait_ref));\n             self.elaborate_bounds(bounds, |this, new_trait_ref, item| {\n                 let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);\n \n@@ -1372,7 +1370,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         trait_ref: ty::TraitRef<'tcx>,\n     ) -> traits::SelectionResult<'tcx, traits::Selection<'tcx>> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-        let predicate = trait_ref.to_poly_trait_ref().to_poly_trait_predicate();\n+        let predicate = ty::Binder::dummy(trait_ref).to_poly_trait_predicate();\n         let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n         traits::SelectionContext::new(self).select(&obligation)\n     }\n@@ -1470,7 +1468,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    let predicate = trait_ref.without_const().to_predicate(self.tcx);\n+                    let predicate =\n+                        ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx);\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         result = ProbeResult::NoMatch;"}, {"sha": "91a164ce063ea6cae022e8254e572e8149338bb9", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -12,9 +12,7 @@ use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::fast_reject::simplify_type;\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{\n-    self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, Span};\n@@ -53,7 +51,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .into()],\n                         );\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n-                        let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+                        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n                             span,\n                             self.body_id,"}, {"sha": "d08e2499108413b380f0ed16c22e7c1404ec0e6e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -540,10 +540,10 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n                         ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n                         discr_substs,\n-                    ))\n+                    )))\n                     .to_predicate(tcx),\n                 ));\n             }\n@@ -1151,10 +1151,10 @@ fn receiver_is_implemented(\n     cause: ObligationCause<'tcx>,\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n-    let trait_ref = ty::TraitRef {\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n         def_id: receiver_trait_def_id,\n         substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n-    };\n+    });\n \n     let obligation = traits::Obligation::new(\n         cause,"}, {"sha": "51f9f459af1c56390e1e37ffe92633f55eccc64b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -40,7 +40,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -2042,7 +2042,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             match item.kind {\n                 ItemKind::Impl(ref impl_) => {\n                     if impl_.defaultness.is_default() {\n-                        is_default_impl_trait = tcx.impl_trait_ref(def_id);\n+                        is_default_impl_trait = tcx\n+                            .impl_trait_ref(def_id)\n+                            .map(|trait_ref| ty::Binder::dummy(trait_ref));\n                     }\n                     &impl_.generics\n                 }\n@@ -2122,10 +2124,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // (see below). Recall that a default impl is not itself an impl, but rather a\n     // set of defaults that can be incorporated into another impl.\n     if let Some(trait_ref) = is_default_impl_trait {\n-        predicates.insert((\n-            trait_ref.to_poly_trait_ref().without_const().to_predicate(tcx),\n-            tcx.def_span(def_id),\n-        ));\n+        predicates.insert((trait_ref.without_const().to_predicate(tcx), tcx.def_span(def_id)));\n     }\n \n     // Collect the region predicates that were declared inline as\n@@ -2238,8 +2237,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         }\n                         _ => bug!(),\n                     };\n-                    let pred = ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n-                        .to_predicate(icx.tcx);\n+                    let pred = ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n+                        ty::OutlivesPredicate(r1, r2),\n+                    ))\n+                    .to_predicate(icx.tcx);\n \n                     (pred, span)\n                 }))\n@@ -2304,7 +2305,8 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(uv.shrink()).to_predicate(self.tcx),\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                        .to_predicate(self.tcx),\n                     span,\n                 ));\n             }"}, {"sha": "39bcf8999323d7fb7a9a877cda60ee0d4b355bdb", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -83,7 +83,8 @@ fn diagnostic_hir_wf_check<'tcx>(\n                     traits::Obligation::new(\n                         cause,\n                         self.param_env,\n-                        ty::PredicateKind::WellFormed(tcx_ty.into()).to_predicate(self.tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into()))\n+                            .to_predicate(self.tcx),\n                     ),\n                 );\n "}, {"sha": "9c6efffdaf0fe3d1d043d784c58143ac4281f2aa", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -104,13 +104,15 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some((\n-                            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty1, region2))\n-                                .to_predicate(tcx),\n+                            ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(ty1, region2),\n+                            ))\n+                            .to_predicate(tcx),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n-                            ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n-                                region1, region2,\n+                            ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n+                                ty::OutlivesPredicate(region1, region2),\n                             ))\n                             .to_predicate(tcx),\n                             span,"}, {"sha": "8135d4a2085dd4c3f8838b00f302bbfdbc2dc47e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -64,7 +64,11 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .instantiate(self.cx.tcx, impl_substs)\n                             .predicates\n                             .into_iter()\n-                            .chain(Some(trait_ref.without_const().to_predicate(infcx.tcx)));\n+                            .chain(Some(\n+                                ty::Binder::dummy(trait_ref)\n+                                    .without_const()\n+                                    .to_predicate(infcx.tcx),\n+                            ));\n                         for predicate in predicates {\n                             debug!(\"testing predicate {:?}\", predicate);\n                             let obligation = traits::Obligation::new("}, {"sha": "caade082c3d224e0fce61386d916de2fa40d2688", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -132,7 +132,7 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n-                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id);\n+                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n \n                 let generic_args = generic_args.clean(cx);\n                 let bindings = match generic_args {"}, {"sha": "6bbac6d9a24688598775794ba0f94a991eb1c27c", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n                             trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty().skip_binder());\n                         }\n                     }\n                 }"}, {"sha": "a04b325b56e3a42ffe4c461a21aa26dd22a5c210", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2e97c41627e16a818871374add27c03e7e1355/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2e97c41627e16a818871374add27c03e7e1355/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ee2e97c41627e16a818871374add27c03e7e1355", "patch": "@@ -2061,7 +2061,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             then {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n                     &item.ident.name.as_str(),\n@@ -2078,7 +2078,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n-            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n             if !contains_ty(cx.tcx, ret_ty, self_ty);\n \n             then {"}]}