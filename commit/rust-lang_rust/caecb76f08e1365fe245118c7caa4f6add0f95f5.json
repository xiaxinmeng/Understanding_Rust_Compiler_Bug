{"sha": "caecb76f08e1365fe245118c7caa4f6add0f95f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZWNiNzZmMDhlMTM2NWZlMjQ1MTE4YzdjYWE0ZjZhZGQwZjk1ZjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-21T11:11:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-30T19:00:30Z"}, "message": "Turn sufficiently old compatibility lints into hard errors", "tree": {"sha": "3d7762f8f32362320d0228e4e9d5b703fb8f6014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7762f8f32362320d0228e4e9d5b703fb8f6014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caecb76f08e1365fe245118c7caa4f6add0f95f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caecb76f08e1365fe245118c7caa4f6add0f95f5", "html_url": "https://github.com/rust-lang/rust/commit/caecb76f08e1365fe245118c7caa4f6add0f95f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caecb76f08e1365fe245118c7caa4f6add0f95f5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "html_url": "https://github.com/rust-lang/rust/commit/f89d8d184490ecb3cf91f7b6bb7296d649f931ba"}], "stats": {"total": 352, "additions": 102, "deletions": 250}, "files": [{"sha": "5a88731f16c380bfd8f86c13e4e035bd324f6e5a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -130,68 +130,12 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n-declare_lint! {\n-    pub INACCESSIBLE_EXTERN_CRATE,\n-    Deny,\n-    \"use of inaccessible extern crate erroneously allowed\"\n-}\n-\n-declare_lint! {\n-    pub INVALID_TYPE_PARAM_DEFAULT,\n-    Deny,\n-    \"type parameter default erroneously allowed in invalid location\"\n-}\n-\n-declare_lint! {\n-    pub ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-    Deny,\n-    \"floating-point constants cannot be used in patterns\"\n-}\n-\n-declare_lint! {\n-    pub ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-    Deny,\n-    \"constants of struct or enum type can only be used in a pattern if \\\n-     the struct or enum has `#[derive(PartialEq, Eq)]`\"\n-}\n-\n-declare_lint! {\n-    pub RAW_POINTER_DERIVE,\n-    Warn,\n-    \"uses of #[derive] with raw pointers are rarely correct\"\n-}\n-\n-declare_lint! {\n-    pub HR_LIFETIME_IN_ASSOC_TYPE,\n-    Deny,\n-    \"binding for associated type references higher-ranked lifetime \\\n-     that does not appear in the trait input types\"\n-}\n-\n-declare_lint! {\n-    pub OVERLAPPING_INHERENT_IMPLS,\n-    Deny,\n-    \"two overlapping inherent impls define an item with the same name were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub RENAMED_AND_REMOVED_LINTS,\n     Warn,\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub SUPER_OR_SELF_IN_GLOBAL_PATH,\n-    Deny,\n-    \"detects super or self keywords at the beginning of global path\"\n-}\n-\n-declare_lint! {\n-    pub LIFETIME_UNDERSCORE,\n-    Deny,\n-    \"lifetimes or labels named `'_` were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n     Warn,\n@@ -280,17 +224,8 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n-            INACCESSIBLE_EXTERN_CRATE,\n-            INVALID_TYPE_PARAM_DEFAULT,\n-            ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-            ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n             CONST_ERR,\n-            RAW_POINTER_DERIVE,\n-            OVERLAPPING_INHERENT_IMPLS,\n             RENAMED_AND_REMOVED_LINTS,\n-            SUPER_OR_SELF_IN_GLOBAL_PATH,\n-            HR_LIFETIME_IN_ASSOC_TYPE,\n-            LIFETIME_UNDERSCORE,\n             RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,"}, {"sha": "a2e0bb80d23ddf40b78d24ab9eb12b6ed18ae715", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -10,7 +10,6 @@\n \n use eval;\n \n-use rustc::lint;\n use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, TypeVariants, Region};\n@@ -644,27 +643,19 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n         debug!(\"expr={:?} pat_ty={:?} pat_id={}\", expr, pat_ty, pat_id);\n         match pat_ty.sty {\n             ty::TyFloat(_) => {\n-                self.tcx.sess.add_lint(\n-                    lint::builtin::ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-                    pat_id,\n-                    span,\n-                    format!(\"floating point constants cannot be used in patterns\"));\n+                self.tcx.sess.span_err(span, \"floating point constants cannot be used in patterns\");\n             }\n             ty::TyAdt(adt_def, _) if adt_def.is_union() => {\n                 // Matching on union fields is unsafe, we can't hide it in constants\n                 self.tcx.sess.span_err(span, \"cannot use unions in constant patterns\");\n             }\n             ty::TyAdt(adt_def, _) => {\n                 if !self.tcx.has_attr(adt_def.did, \"structural_match\") {\n-                    self.tcx.sess.add_lint(\n-                        lint::builtin::ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-                        pat_id,\n-                        span,\n-                        format!(\"to use a constant of type `{}` \\\n-                                 in a pattern, \\\n-                                 `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                self.tcx.item_path_str(adt_def.did),\n-                                self.tcx.item_path_str(adt_def.did)));\n+                    let msg = format!(\"to use a constant of type `{}` in a pattern, \\\n+                                       `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                                      self.tcx.item_path_str(adt_def.did),\n+                                      self.tcx.item_path_str(adt_def.did));\n+                    self.tcx.sess.span_err(span, &msg);\n                 }\n             }\n             _ => { }"}, {"sha": "a5b1d39dd869e0b0c31c60707bf10abb10ce001b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -179,7 +179,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     // - Create a lint defaulting to warn as normal, with ideally the same error\n     //   message you would normally give\n     // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n-    //   and include the full URL.\n+    //   and include the full URL, sort items in ascending order of issue numbers.\n     // - Later, change lint to error\n     // - Eventually, remove lint\n     store.register_future_incompatible(sess,\n@@ -189,48 +189,12 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(INACCESSIBLE_EXTERN_CRATE),\n-            reference: \"issue #36886 <https://github.com/rust-lang/rust/issues/36886>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n-            reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SUPER_OR_SELF_IN_GLOBAL_PATH),\n-            reference: \"issue #36888 <https://github.com/rust-lang/rust/issues/36888>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n-            reference: \"issue #36890 <https://github.com/rust-lang/rust/issues/36890>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n-            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n-            reference: \"issue #36891 <https://github.com/rust-lang/rust/issues/36891>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(HR_LIFETIME_IN_ASSOC_TYPE),\n-            reference: \"issue #33685 <https://github.com/rust-lang/rust/issues/33685>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LIFETIME_UNDERSCORE),\n-            reference: \"issue #36892 <https://github.com/rust-lang/rust/issues/36892>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n-            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n+            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n-            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/35112>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n-            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(EXTRA_REQUIREMENT_IN_IMPL),\n@@ -248,18 +212,26 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n+            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n-            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n+            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n+            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+        }\n         ]);\n \n     // Register renamed and removed lints\n@@ -275,5 +247,20 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"drop_with_repr_extern\", \"drop flags have been removed\");\n     store.register_removed(\"transmute_from_fn_item_types\",\n         \"always cast functions before transmuting them\");\n-    store.register_removed(\"overlapping_inherent_impls\", \"converted into hard error, see #36889\");\n+    store.register_removed(\"hr_lifetime_in_assoc_type\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/33685\");\n+    store.register_removed(\"inaccessible_extern_crate\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36886\");\n+    store.register_removed(\"invalid_type_param_default\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36887\");\n+    store.register_removed(\"super_or_self_in_global_path\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36888\");\n+    store.register_removed(\"overlapping_inherent_impls\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36889\");\n+    store.register_removed(\"illegal_floating_point_constant_pattern\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36890\");\n+    store.register_removed(\"illegal_struct_or_enum_constant_pattern\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36891\");\n+    store.register_removed(\"lifetime_underscore\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36892\");\n }"}, {"sha": "7c443a4ac7520d0701df6d7a29f61de18074204a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -36,16 +36,10 @@ impl<'a> AstValidator<'a> {\n         &self.session.parse_sess.span_diagnostic\n     }\n \n-    fn check_label(&self, label: Ident, span: Span, id: NodeId) {\n-        if label.name == keywords::StaticLifetime.name() {\n+    fn check_label(&self, label: Ident, span: Span) {\n+        if label.name == keywords::StaticLifetime.name() || label.name == \"'_\" {\n             self.err_handler().span_err(span, &format!(\"invalid label name `{}`\", label.name));\n         }\n-        if label.name == \"'_\" {\n-            self.session.add_lint(lint::builtin::LIFETIME_UNDERSCORE,\n-                                  id,\n-                                  span,\n-                                  format!(\"invalid label name `{}`\", label.name));\n-        }\n     }\n \n     fn invalid_visibility(&self, vis: &Visibility, span: Span, note: Option<&str>) {\n@@ -104,10 +98,7 @@ impl<'a> AstValidator<'a> {\n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_lifetime(&mut self, lt: &'a Lifetime) {\n         if lt.ident.name == \"'_\" {\n-            self.session.add_lint(lint::builtin::LIFETIME_UNDERSCORE,\n-                                  lt.id,\n-                                  lt.span,\n-                                  format!(\"invalid lifetime name `{}`\", lt.ident));\n+            self.err_handler().span_err(lt.span, &format!(\"invalid lifetime name `{}`\", lt.ident));\n         }\n \n         visit::walk_lifetime(self, lt)\n@@ -121,7 +112,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::ForLoop(.., Some(ident)) |\n             ExprKind::Break(Some(ident), _) |\n             ExprKind::Continue(Some(ident)) => {\n-                self.check_label(ident.node, ident.span, expr.id);\n+                self.check_label(ident.node, ident.span);\n             }\n             _ => {}\n         }\n@@ -169,14 +160,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_path(&mut self, path: &'a Path, id: NodeId) {\n+    fn visit_path(&mut self, path: &'a Path, _: NodeId) {\n         if path.segments.len() >= 2 && path.is_global() {\n             let ident = path.segments[1].identifier;\n             if token::Ident(ident).is_path_segment_keyword() {\n-                self.session.add_lint(lint::builtin::SUPER_OR_SELF_IN_GLOBAL_PATH,\n-                                      id,\n-                                      path.span,\n-                                      format!(\"global paths cannot start with `{}`\", ident));\n+                self.err_handler()\n+                    .span_err(path.span, &format!(\"global paths cannot start with `{}`\", ident));\n             }\n         }\n "}, {"sha": "a40c191f7bd29f72aa25b8f77445440062ebc53d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -1069,6 +1069,10 @@ impl<'a> NameBinding<'a> {\n             _ => false,\n         }\n     }\n+\n+    fn descr(&self) -> &'static str {\n+        if self.is_extern_crate() { \"extern crate\" } else { self.def().kind_name() }\n+    }\n }\n \n /// Interns the names of the primitive types.\n@@ -3424,18 +3428,7 @@ impl<'a> Resolver<'a> {\n \n         for &PrivacyError(span, name, binding) in &self.privacy_errors {\n             if !reported_spans.insert(span) { continue }\n-            if binding.is_extern_crate() {\n-                // Warn when using an inaccessible extern crate.\n-                let node_id = match binding.kind {\n-                    NameBindingKind::Import { directive, .. } => directive.id,\n-                    _ => unreachable!(),\n-                };\n-                let msg = format!(\"extern crate `{}` is private\", name);\n-                self.session.add_lint(lint::builtin::INACCESSIBLE_EXTERN_CRATE, node_id, span, msg);\n-            } else {\n-                let def = binding.def();\n-                self.session.span_err(span, &format!(\"{} `{}` is private\", def.kind_name(), name));\n-            }\n+            self.session.span_err(span, &format!(\"{} `{}` is private\", binding.descr(), name));\n         }\n     }\n "}, {"sha": "8745e51f5b45a3fc42c513ce3add809fcb68e7e0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -18,7 +18,6 @@ use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n use rustc::ty;\n-use rustc::lint::builtin::PRIVATE_IN_PUBLIC;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::util::nodemap::FxHashMap;\n@@ -295,8 +294,7 @@ impl<'a> Resolver<'a> {\n     // return the corresponding binding defined by the import directive.\n     pub fn import(&self, binding: &'a NameBinding<'a>, directive: &'a ImportDirective<'a>)\n                   -> &'a NameBinding<'a> {\n-        let vis = if binding.pseudo_vis().is_at_least(directive.vis.get(), self) ||\n-                     !directive.is_glob() && binding.is_extern_crate() { // c.f. `PRIVATE_IN_PUBLIC`\n+        let vis = if binding.pseudo_vis().is_at_least(directive.vis.get(), self) {\n             directive.vis.get()\n         } else {\n             binding.pseudo_vis()\n@@ -720,13 +718,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         // All namespaces must be re-exported with extra visibility for an error to occur.\n         if !any_successful_reexport {\n-            let (ns, binding) = reexport_error.unwrap();\n-            if ns == TypeNS && binding.is_extern_crate() {\n-                let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n-                                   (error E0364), consider declaring with `pub`\",\n-                                   ident);\n-                self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, directive.span, msg);\n-            } else if ns == TypeNS {\n+            if reexport_error.unwrap().0 == TypeNS {\n                 struct_span_err!(self.session, directive.span, E0365,\n                                  \"`{}` is private, and cannot be reexported\", ident)\n                     .span_label(directive.span, format!(\"reexport of private `{}`\", ident))\n@@ -792,8 +784,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.record_def(directive.id, PathResolution::new(module.def().unwrap()));\n     }\n \n-    // Miscellaneous post-processing, including recording reexports, reporting conflicts,\n-    // reporting the PRIVATE_IN_PUBLIC lint, and reporting unresolved imports.\n+    // Miscellaneous post-processing, including recording reexports,\n+    // reporting conflicts, and reporting unresolved imports.\n     fn finalize_resolutions_in(&mut self, module: Module<'b>) {\n         // Since import resolution is finished, globs will not define any more names.\n         *module.globs.borrow_mut() = Vec::new();\n@@ -838,13 +830,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n \n             match binding.kind {\n-                NameBindingKind::Import { binding: orig_binding, directive, .. } => {\n+                NameBindingKind::Import { binding: orig_binding, .. } => {\n                     if ns == TypeNS && orig_binding.is_variant() &&\n                        !orig_binding.vis.is_at_least(binding.vis, &*self) {\n-                        let msg = format!(\"variant `{}` is private, and cannot be reexported \\\n-                                           (error E0364), consider declaring its enum as `pub`\",\n-                                          ident);\n-                        self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, binding.span, msg);\n+                        let msg = format!(\"variant `{}` is private, and cannot be reexported, \\\n+                                           consider declaring its enum as `pub`\", ident);\n+                        self.session.span_err(binding.span, &msg);\n                     }\n                 }\n                 NameBindingKind::Ambiguity { b1, b2, .. }"}, {"sha": "d7813efdd2fba0cd2dd4ed4831e8e8398a14c18e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -54,7 +54,6 @@ There are some shortcomings in this design:\n */\n \n use astconv::{AstConv, Bounds};\n-use lint;\n use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n@@ -897,12 +896,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         if !allow_defaults && p.default.is_some() {\n             if !tcx.sess.features.borrow().default_type_parameter_fallback {\n-                tcx.sess.add_lint(\n-                    lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n-                    p.id,\n-                    p.span,\n-                    format!(\"defaults for type parameters are only allowed in `struct`, \\\n-                             `enum`, `type`, or `trait` definitions.\"));\n+                tcx.sess.span_err(p.span, \"defaults for type parameters are only allowed in \\\n+                                           `struct`, `enum`, `type`, or `trait` definitions.\");\n             }\n         }\n "}, {"sha": "a0d1785c6ff14a45f5d0d7e479200f63740a5259", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -231,20 +231,12 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n                    -> (P<ast::Item>, Ident) {\n     let super_ = Ident::from_str(\"super\");\n \n-    // Generate imports with `#[allow(private_in_public)]` to work around issue #36768.\n-    let allow_private_in_public = cx.ext_cx.attribute(DUMMY_SP, cx.ext_cx.meta_list(\n-        DUMMY_SP,\n-        Symbol::intern(\"allow\"),\n-        vec![cx.ext_cx.meta_list_item_word(DUMMY_SP, Symbol::intern(\"private_in_public\"))],\n-    ));\n     let items = tests.into_iter().map(|r| {\n         cx.ext_cx.item_use_simple(DUMMY_SP, ast::Visibility::Public,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n-            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n         cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Visibility::Public, r, path)\n-            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     })).collect();\n \n     let reexport_mod = ast::Mod {"}, {"sha": "9ba5045f2a0539ac72879d757b40d6cb3e9e2a9f", "filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n-#![allow(hr_lifetime_in_assoc_type)]\n \n trait Foo<'a> {\n     type Item;"}, {"sha": "b9b1317cef50f8707aeb14385e4147a4a62f281e", "filename": "src/test/compile-fail/associated-types/bound-lifetime-in-return-only.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -13,7 +13,6 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n-#![deny(hr_lifetime_in_assoc_type)]\n \n trait Foo {\n     type Item;"}, {"sha": "6bb88e409105a4e8ddbe7d402b43e0e70d7b2250", "filename": "src/test/compile-fail/extern-crate-visibility.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -8,21 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused)]\n-\n mod foo {\n     extern crate core;\n }\n \n // Check that private crates can be used from outside their modules, albeit with warnings\n-use foo::core; //~ WARN extern crate `core` is private\n-//~^ WARN this was previously accepted by the compiler but is being phased out\n use foo::core::cell; //~ ERROR extern crate `core` is private\n-//~^ WARN this was previously accepted by the compiler but is being phased out\n \n fn f() {\n     foo::core::cell::Cell::new(0); //~ ERROR extern crate `core` is private\n-    //~^ WARN this was previously accepted by the compiler but is being phased out\n \n     use foo::*;\n     mod core {} // Check that private crates are not glob imported"}, {"sha": "e6a39f95e660da73d058e05d3b3211aee7ce0e7d", "filename": "src/test/compile-fail/future-incompatible-lint-group.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Ffuture-incompatible-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Ffuture-incompatible-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffuture-incompatible-lint-group.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,18 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(private_in_public)]\n+#![deny(future_incompatible)]\n \n-mod foo {\n-    pub mod bar {\n-        extern crate core;\n-    }\n+trait Tr {\n+    fn f(u8) {} //~ ERROR use of deprecated anonymous parameter\n+                //~^ WARN this was previously accepted\n }\n \n-mod baz {\n-    pub use foo::bar::core;\n-}\n-\n-fn main() {\n-    baz::core::cell::Cell::new(0u32);\n-}\n+fn main() {}", "previous_filename": "src/test/run-pass/issue-37020.rs"}, {"sha": "3f5f7bb3a53ea95ce5235b865235b7e066b4982e", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -13,7 +13,7 @@ use std::marker;\n struct Foo<A, B, C = (A, B)>(\n     marker::PhantomData<(A,B,C)>);\n \n-impl<A, B, C = (A, B)> Foo<A, B, C> {\n+impl<A, B, C> Foo<A, B, C> {\n     fn new() -> Foo<A, B, C> {Foo(marker::PhantomData)}\n }\n "}, {"sha": "31411992089655f71bf3997107272ca283663ba2", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -15,7 +15,7 @@ struct Heap;\n struct Vec<T, A = Heap>(\n     marker::PhantomData<(T,A)>);\n \n-impl<T, A = Heap> Vec<T, A> {\n+impl<T, A> Vec<T, A> {\n     fn new() -> Vec<T, A> {Vec(marker::PhantomData)}\n }\n "}, {"sha": "f829d4645a0896d4bd9ad321d77e273c51a82332", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -11,7 +11,7 @@\n //! Test that absolute path names are correct when a crate is not linked into the root namespace\n \n mod foo {\n-    extern crate core;\n+    pub extern crate core;\n }\n \n fn assert_clone<T>() where T : Clone { }"}, {"sha": "2f5da907b95f6712e1991852e3c3b19742e5f108", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -11,7 +11,7 @@\n //! Test that when a crate is linked multiple times that the shortest absolute path name is used\n \n mod foo {\n-    extern crate core;\n+    pub extern crate core;\n }\n \n extern crate core;"}, {"sha": "2a97945f266487aac47eec09ce0dbaa9c7e41936", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -19,13 +19,11 @@ fn main() {\n     let x = NAN;\n     match x {\n         NAN => {}, //~ ERROR floating point constants cannot be used\n-                   //~| WARNING hard error\n         _ => {},\n     };\n \n     match [x, 1.0] {\n         [NAN, _] => {}, //~ ERROR floating point constants cannot be used\n-                        //~| WARNING hard error\n         _ => {},\n     };\n }"}, {"sha": "5b518a4931da8131626ed3e221c4c6309a740488", "filename": "src/test/compile-fail/lifetime-underscore.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -9,17 +9,13 @@\n // except according to those terms.\n \n fn _f<'_>() //~ ERROR invalid lifetime name `'_`\n-//~^ WARN this was previously accepted\n     -> &'_ u8 //~ ERROR invalid lifetime name `'_`\n-    //~^ WARN this was previously accepted\n {\n     panic!();\n }\n \n fn main() {\n     '_: loop { //~ ERROR invalid label name `'_`\n-    //~^ WARN this was previously accepted\n         break '_ //~ ERROR invalid label name `'_`\n-        //~^ WARN this was previously accepted\n     }\n }"}, {"sha": "70e148627c47e673610448a712822b268521b95a", "filename": "src/test/compile-fail/match-argm-statics-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -10,8 +10,10 @@\n \n use self::Direction::{North, East, South, West};\n \n+#[derive(PartialEq, Eq)]\n struct NewBool(bool);\n \n+#[derive(PartialEq, Eq)]\n enum Direction {\n     North,\n     East,"}, {"sha": "21d90dfea4b6c722772c59b8332da1ec4b3703b8", "filename": "src/test/compile-fail/privacy/restricted/struct-literal-field.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(private_in_public)]\n #![allow(warnings)]\n \n mod foo {"}, {"sha": "2e065ac051b20a81dce6f2f475a508959ae9a38a", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:pub_restricted.rs\n \n-#![deny(private_in_public)]\n #![allow(warnings)]\n extern crate pub_restricted;\n "}, {"sha": "fd92300cd1526e7b0440776d2de117792acf5c0f", "filename": "src/test/compile-fail/private-in-public-lint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -18,8 +18,6 @@ mod m1 {\n }\n \n mod m2 {\n-    #![deny(future_incompatible)]\n-\n     pub struct Pub;\n     struct Priv;\n "}, {"sha": "c77a7532e34a281ac418c6a2e1464cc551900b2b", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -8,31 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(private_in_public)]\n-#![allow(dead_code)]\n-\n-extern crate core;\n-pub use core as reexported_core; //~ ERROR extern crate `core` is private, and cannot be reexported\n-//~^ WARNING hard error\n-\n mod m1 {\n     pub use ::E::V; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n mod m2 {\n     pub use ::E::{V}; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n mod m3 {\n     pub use ::E::V::{self}; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n mod m4 {\n     pub use ::E::*; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n enum E { V }", "previous_filename": "src/test/compile-fail/private-variant-and-crate-reexport.rs"}, {"sha": "1249ba774a8ba64000dcc1728892388059d607a9", "filename": "src/test/compile-fail/pub-reexport-priv-extern-crate.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+extern crate core;\n+pub use core as reexported_core; //~ ERROR `core` is private, and cannot be reexported\n+\n+mod foo1 {\n+    extern crate core;\n+}\n+\n+mod foo2 {\n+    use foo1::core; //~ ERROR `core` is private, and cannot be reexported\n+    pub mod bar {\n+        extern crate core;\n+    }\n+}\n+\n+mod baz {\n+    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be reexported\n+}\n+\n+fn main() {}"}, {"sha": "55ae37404a9fa11d6b1bba7a43ed6cd052109fe8", "filename": "src/test/compile-fail/resolve-self-in-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -17,7 +17,6 @@ trait Tr<T = u8> {\n \n impl Tr<Self> for S {} // OK\n impl<T: Tr<Self>> Tr<T> for S {} // OK\n-impl<T = Self> Tr<T> for S {} // OK\n impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK"}, {"sha": "f729220eabbc36c9a9ff172ffaa62ef568524c19", "filename": "src/test/compile-fail/rfc1445/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -16,8 +16,7 @@\n \n // gate-test-structural_match\n \n-#![allow(dead_code)]\n-#![deny(future_incompatible)]\n+#![allow(unused)]\n #![feature(rustc_attrs)]\n #![cfg_attr(with_gate, feature(structural_match))]\n "}, {"sha": "679be9ce219fe548a9954e9beacf51d58fda3984", "filename": "src/test/compile-fail/rfc1445/match-forbidden-without-eq.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-forbidden-without-eq.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-#![deny(future_incompatible)]\n-\n use std::f32;\n \n #[derive(PartialEq)]\n@@ -25,15 +22,13 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARNING will become a hard error\n         _ => { }\n     }\n \n     let x = 0.0;\n     match x {\n         f32::INFINITY => { }\n         //~^ ERROR floating point constants cannot be used in patterns\n-        //~| WARNING will become a hard error\n         _ => { }\n     }\n }"}, {"sha": "e02f9153e7eadc673d2d10edf78724e7ba5eab12", "filename": "src/test/compile-fail/rfc1445/match-requires-both-partialeq-and-eq.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-#![deny(future_incompatible)]\n-\n #[derive(Eq)]\n struct Foo {\n     x: u32\n@@ -29,7 +26,6 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARNING will become a hard error\n         _ => { }\n     }\n }"}, {"sha": "eea6f22644b69340f545d8f954bbc5463d346d36", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -10,16 +10,11 @@\n \n // gate-test-default_type_parameter_fallback\n \n-#![deny(future_incompatible)]\n-#![allow(dead_code)]\n-\n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| WARNING hard error\n \n struct S<T>(T);\n impl<T=i32> S<T> {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| WARNING hard error\n \n fn main() {}"}, {"sha": "4162e037cf32e4ae543620581e65d03c8f26011e", "filename": "src/test/compile-fail/use-super-global-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caecb76f08e1365fe245118c7caa4f6add0f95f5/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs?ref=caecb76f08e1365fe245118c7caa4f6add0f95f5", "patch": "@@ -15,11 +15,9 @@ struct Z;\n \n mod foo {\n     use ::super::{S, Z}; //~ ERROR global paths cannot start with `super`\n-    //~^ WARN this was previously accepted by the compiler but is being phased out\n \n     pub fn g() {\n         use ::super::main; //~ ERROR global paths cannot start with `super`\n-        //~^ WARN this was previously accepted by the compiler but is being phased out\n         main();\n     }\n }"}]}