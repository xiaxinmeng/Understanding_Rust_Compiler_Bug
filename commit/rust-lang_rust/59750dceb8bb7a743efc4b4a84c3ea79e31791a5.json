{"sha": "59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzUwZGNlYjhiYjdhNzQzZWZjNGI0YTg0YzNlYTc5ZTMxNzkxYTU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-24T22:20:49Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-24T22:50:53Z"}, "message": "upper_case_acronyms: add optional aggressive mode and relax default\n\nMoves the lint back from pedantic to style group.\nThe lint default now only warns on names that are completely capitalized, like \"WORD\"\nand only if the name is longer than 2 chars (so that names where each of the letter represents a word are still distinguishable).\nFor example: FP (false positive) would still be \"valid\" and not warned about (but EOF would warn).\n\nA \"upper_case_acronyms_aggressive: true/false\" config option was added that restores the original lint behaviour to warn\non any kind of camel case name that had more than one capital letter following another capital letter.", "tree": {"sha": "ebb0d637e24e8638c2dd1580007bf4dfd0089b63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebb0d637e24e8638c2dd1580007bf4dfd0089b63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "html_url": "https://github.com/rust-lang/rust/commit/59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454515040a580f72c9b6366ee7d46256cfb4246f", "url": "https://api.github.com/repos/rust-lang/rust/commits/454515040a580f72c9b6366ee7d46256cfb4246f", "html_url": "https://github.com/rust-lang/rust/commit/454515040a580f72c9b6366ee7d46256cfb4246f"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "15262cfbf54ad3379a2de87e11a6a3fa4b174305", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "patch": "@@ -1216,7 +1216,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n-    store.register_early_pass(|| box upper_case_acronyms::UpperCaseAcronyms);\n+    let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n+    store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));\n     store.register_late_pass(|| box default::Default::default());\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n@@ -1416,7 +1417,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unused_self::UNUSED_SELF),\n-        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n         LintId::of(&zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n@@ -1835,6 +1835,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n         LintId::of(&write::PRINT_WITH_NEWLINE),"}, {"sha": "6995fbce72cc9dfe84b4031054678900f1b68ef3", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "patch": "@@ -5,16 +5,20 @@ use rustc_ast::ast::{Item, ItemKind, Variant};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for camel case name containing a capitalized acronym.\n+    /// **What it does:** Checks for fully capitalized names and optionally names containing a capitalized acronym.\n     ///\n     /// **Why is this bad?** In CamelCase, acronyms count as one word.\n     /// See [naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case)\n     /// for more.\n     ///\n+    /// By default, the lint only triggers on fully-capitalized names.\n+    /// You can use the `upper_case_acronyms_aggressive: true` config option to enable linting\n+    /// on all camel case names\n+    ///\n     /// **Known problems:** When two acronyms are contiguous, the lint can't tell where\n     /// the first acronym ends and the second starts, so it suggests to lowercase all of\n     /// the letters in the second acronym.\n@@ -29,11 +33,24 @@ declare_clippy_lint! {\n     /// struct HttpResponse;\n     /// ```\n     pub UPPER_CASE_ACRONYMS,\n-    pedantic,\n+    style,\n     \"capitalized acronyms are against the naming convention\"\n }\n \n-declare_lint_pass!(UpperCaseAcronyms => [UPPER_CASE_ACRONYMS]);\n+#[derive(Default)]\n+pub struct UpperCaseAcronyms {\n+    upper_case_acronyms_aggressive: bool,\n+}\n+\n+impl UpperCaseAcronyms {\n+    pub fn new(aggressive: bool) -> Self {\n+        Self {\n+            upper_case_acronyms_aggressive: aggressive,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(UpperCaseAcronyms => [UPPER_CASE_ACRONYMS]);\n \n fn correct_ident(ident: &str) -> String {\n     let ident = ident.chars().rev().collect::<String>();\n@@ -56,11 +73,18 @@ fn correct_ident(ident: &str) -> String {\n     ident\n }\n \n-fn check_ident(cx: &EarlyContext<'_>, ident: &Ident) {\n+fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n     let ident = &ident.as_str();\n     let corrected = correct_ident(ident);\n-    if ident != &corrected {\n+    // warn if we have pure-uppercase idents\n+    // assume that two-letter words are some kind of valid abbreviation like FP for false positive\n+    // (and don't warn)\n+    if (ident.chars().all(|c| c.is_ascii_uppercase()) && ident.len() > 2)\n+    // otherwise, warn if we have SOmeTHING lIKE THIs but only warn with the aggressive \n+    // upper_case_acronyms_aggressive config option enabled\n+    || (be_aggressive && ident != &corrected)\n+    {\n         span_lint_and_sugg(\n             cx,\n             UPPER_CASE_ACRONYMS,\n@@ -82,12 +106,12 @@ impl EarlyLintPass for UpperCaseAcronyms {\n                 ItemKind::TyAlias(..) | ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n             );\n             then {\n-                check_ident(cx, &it.ident);\n+                check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n             }\n         }\n     }\n \n     fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &Variant) {\n-        check_ident(cx, &v.ident);\n+        check_ident(cx, &v.ident, self.upper_case_acronyms_aggressive);\n     }\n }"}, {"sha": "34b9ecf2830fb2a084642172fee33530e99afb81", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59750dceb8bb7a743efc4b4a84c3ea79e31791a5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=59750dceb8bb7a743efc4b4a84c3ea79e31791a5", "patch": "@@ -173,6 +173,8 @@ define_Conf! {\n     (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n     /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions, \"unreadable_literal_lint_fractions\": bool, true),\n+    /// Lint: UPPER_CASE_ACRONYMS. Enabler verbose mode triggers if there is more than one uppercase char next to each other\n+    (upper_case_acronyms_aggressive, \"upper_case_acronyms_aggressive\": bool, false),\n     /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n     (cargo_ignore_publish, \"cargo_ignore_publish\": bool, false),\n }"}]}