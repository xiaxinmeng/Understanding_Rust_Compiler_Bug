{"sha": "3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NTBiMWMwODYwYTA3NWYxZmQ1Njk1NzdjMmEyZmVjZDFmYzJmMGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T09:31:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T09:32:34Z"}, "message": "Lift SourceChange to the ra_ide_db", "tree": {"sha": "fd9a78d80ae77f1fb706ba48bff0195be24bf5d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9a78d80ae77f1fb706ba48bff0195be24bf5d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "html_url": "https://github.com/rust-lang/rust/commit/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb35c3ecb4aa5139571aba70f7364d135302775", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb35c3ecb4aa5139571aba70f7364d135302775", "html_url": "https://github.com/rust-lang/rust/commit/beb35c3ecb4aa5139571aba70f7364d135302775"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "4ed02f60efb8edfa3296a598dce62c1f03512643", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "patch": "@@ -16,7 +16,6 @@ macro_rules! eprintln {\n }\n \n pub mod mock_analysis;\n-mod source_change;\n \n mod prime_caches;\n mod status;\n@@ -78,7 +77,6 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n-    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     ssr::SsrError,\n     syntax_highlighting::{\n         Highlight, HighlightModifier, HighlightModifiers, HighlightTag, HighlightedRange,\n@@ -94,6 +92,7 @@ pub use ra_ide_db::{\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     search::SearchScope,\n+    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     symbol_index::Query,\n     RootDatabase,\n };"}, {"sha": "1873d1d0d0abd4231ad080451d767ac7264025e1", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "patch": "@@ -1,18 +1,18 @@\n //!  structural search replace\n \n-use crate::source_change::SourceFileEdit;\n+use std::{collections::HashMap, iter::once, str::FromStr};\n+\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n-use ra_ide_db::symbol_index::SymbolsDatabase;\n-use ra_ide_db::RootDatabase;\n-use ra_syntax::ast::make::try_expr_from_text;\n+use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n use ra_syntax::ast::{\n-    ArgList, AstToken, CallExpr, Comment, Expr, MethodCallExpr, RecordField, RecordLit,\n+    make::try_expr_from_text, ArgList, AstToken, CallExpr, Comment, Expr, MethodCallExpr,\n+    RecordField, RecordLit,\n };\n use ra_syntax::{AstNode, SyntaxElement, SyntaxKind, SyntaxNode};\n use ra_text_edit::{TextEdit, TextEditBuilder};\n use rustc_hash::FxHashMap;\n-use std::collections::HashMap;\n-use std::{iter::once, str::FromStr};\n+\n+use crate::SourceFileEdit;\n \n #[derive(Debug, PartialEq)]\n pub struct SsrError(String);"}, {"sha": "6f04f0be4e12792a95defa365190a97b7ffd2c29", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "patch": "@@ -17,15 +17,16 @@ mod on_enter;\n \n use ra_db::{FilePosition, SourceDatabase};\n use ra_fmt::leading_indent;\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{source_change::SingleFileChange, RootDatabase};\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstToken},\n     AstNode, SourceFile, TextRange, TextSize,\n };\n+\n use ra_text_edit::TextEdit;\n \n-use crate::{source_change::SingleFileChange, SourceChange};\n+use crate::SourceChange;\n \n pub(crate) use on_enter::on_enter;\n "}, {"sha": "52fcd7b6f0b9bf9938deccfaa9fdf749c624269b", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "patch": "@@ -10,6 +10,7 @@ pub mod change;\n pub mod defs;\n pub mod search;\n pub mod imports_locator;\n+pub mod source_change;\n mod wasm_shims;\n \n use std::sync::Arc;"}, {"sha": "4dd01b31220b44d3d2ecff74acb89b8b651bf218", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "renamed", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "patch": "@@ -3,13 +3,12 @@\n //!\n //! It can be viewed as a dual for `AnalysisChange`.\n \n-use ra_db::RelativePathBuf;\n-use ra_text_edit::TextEdit;\n-\n-use crate::{FileId, FilePosition, SourceRootId, TextSize};\n+use ra_db::{FileId, FilePosition, RelativePathBuf, SourceRootId};\n+use ra_text_edit::{TextEdit, TextSize};\n \n #[derive(Debug)]\n pub struct SourceChange {\n+    /// For display in the undo log in the editor\n     pub label: String,\n     pub source_file_edits: Vec<SourceFileEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n@@ -19,7 +18,7 @@ pub struct SourceChange {\n impl SourceChange {\n     /// Creates a new SourceChange with the given label\n     /// from the edits.\n-    pub(crate) fn from_edits<L: Into<String>>(\n+    pub fn from_edits<L: Into<String>>(\n         label: L,\n         source_file_edits: Vec<SourceFileEdit>,\n         file_system_edits: Vec<FileSystemEdit>,\n@@ -34,7 +33,7 @@ impl SourceChange {\n \n     /// Creates a new SourceChange with the given label,\n     /// containing only the given `SourceFileEdits`.\n-    pub(crate) fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n+    pub fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n         let label = label.into();\n         assert!(label.starts_with(char::is_uppercase));\n         SourceChange {\n@@ -58,13 +57,13 @@ impl SourceChange {\n \n     /// Creates a new SourceChange with the given label,\n     /// containing only a single `SourceFileEdit`.\n-    pub(crate) fn source_file_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n+    pub fn source_file_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n         SourceChange::source_file_edits(label, vec![edit])\n     }\n \n     /// Creates a new SourceChange with the given label\n     /// from the given `FileId` and `TextEdit`\n-    pub(crate) fn source_file_edit_from<L: Into<String>>(\n+    pub fn source_file_edit_from<L: Into<String>>(\n         label: L,\n         file_id: FileId,\n         edit: TextEdit,\n@@ -74,18 +73,18 @@ impl SourceChange {\n \n     /// Creates a new SourceChange with the given label\n     /// from the given `FileId` and `TextEdit`\n-    pub(crate) fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n+    pub fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n         SourceChange::file_system_edits(label, vec![edit])\n     }\n \n     /// Sets the cursor position to the given `FilePosition`\n-    pub(crate) fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n+    pub fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n         self.cursor_position = Some(cursor_position);\n         self\n     }\n \n     /// Sets the cursor position to the given `FilePosition`\n-    pub(crate) fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n+    pub fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n         self.cursor_position = cursor_position;\n         self\n     }\n@@ -103,14 +102,14 @@ pub enum FileSystemEdit {\n     MoveFile { src: FileId, dst_source_root: SourceRootId, dst_path: RelativePathBuf },\n }\n \n-pub(crate) struct SingleFileChange {\n+pub struct SingleFileChange {\n     pub label: String,\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextSize>,\n }\n \n impl SingleFileChange {\n-    pub(crate) fn into_source_change(self, file_id: FileId) -> SourceChange {\n+    pub fn into_source_change(self, file_id: FileId) -> SourceChange {\n         SourceChange {\n             label: self.label,\n             source_file_edits: vec![SourceFileEdit { file_id, edit: self.edit }],", "previous_filename": "crates/ra_ide/src/source_change.rs"}, {"sha": "64b67f2adedbd4d4e7842ca22e55b5439996cc85", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3850b1c0860a075f1fd569577c2a2fecd1fc2f0c/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=3850b1c0860a075f1fd569577c2a2fecd1fc2f0c", "patch": "@@ -4,7 +4,7 @@\n //! so `TextEdit` is the ultimate representation of the work done by\n //! rust-analyzer.\n \n-use text_size::{TextRange, TextSize};\n+pub use text_size::{TextRange, TextSize};\n \n /// `InsertDelete` -- a single \"atomic\" change to text\n ///"}]}