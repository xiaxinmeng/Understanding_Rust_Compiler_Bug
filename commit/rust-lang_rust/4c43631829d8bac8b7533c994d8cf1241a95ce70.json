{"sha": "4c43631829d8bac8b7533c994d8cf1241a95ce70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNDM2MzE4MjlkOGJhYzhiNzUzM2M5OTRkOGNmMTI0MWE5NWNlNzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T11:35:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-26T12:06:06Z"}, "message": "Introduce hir_ty", "tree": {"sha": "5ff545a2330b806ac9d21e714813661412792440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff545a2330b806ac9d21e714813661412792440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c43631829d8bac8b7533c994d8cf1241a95ce70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c43631829d8bac8b7533c994d8cf1241a95ce70", "html_url": "https://github.com/rust-lang/rust/commit/4c43631829d8bac8b7533c994d8cf1241a95ce70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c43631829d8bac8b7533c994d8cf1241a95ce70/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a443b5033c2e95ee58bf086f7093ddc610d4f78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a443b5033c2e95ee58bf086f7093ddc610d4f78f", "html_url": "https://github.com/rust-lang/rust/commit/a443b5033c2e95ee58bf086f7093ddc610d4f78f"}], "stats": {"total": 442, "additions": 252, "deletions": 190}, "files": [{"sha": "9e5ca2fb6b953c9093ad831c9053d6e291e016e5", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -1024,6 +1024,7 @@ dependencies = [\n  \"ra_db 0.1.0\",\n  \"ra_hir_def 0.1.0\",\n  \"ra_hir_expand 0.1.0\",\n+ \"ra_hir_ty 0.1.0\",\n  \"ra_mbe 0.1.0\",\n  \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n@@ -1065,6 +1066,28 @@ dependencies = [\n  \"ra_tt 0.1.0\",\n ]\n \n+[[package]]\n+name = \"ra_hir_ty\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"chalk-ir 0.1.0 (git+https://github.com/jackh726/chalk.git?rev=095cd38a4f16337913bba487f2055b9ca0179f30)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/jackh726/chalk.git?rev=095cd38a4f16337913bba487f2055b9ca0179f30)\",\n+ \"chalk-solve 0.1.0 (git+https://github.com/jackh726/chalk.git?rev=095cd38a4f16337913bba487f2055b9ca0179f30)\",\n+ \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_arena 0.1.0\",\n+ \"ra_db 0.1.0\",\n+ \"ra_hir_def 0.1.0\",\n+ \"ra_hir_expand 0.1.0\",\n+ \"ra_prof 0.1.0\",\n+ \"ra_syntax 0.1.0\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n+]\n+\n [[package]]\n name = \"ra_ide_api\"\n version = \"0.1.0\""}, {"sha": "23c056e90eb8c334bfd91ea3d83767b0d3129e5c", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -23,6 +23,7 @@ mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n+hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n test_utils = { path = \"../test_utils\" }\n ra_prof = { path = \"../ra_prof\" }\n "}, {"sha": "2d23890a58da8f17a54b193540ee4ef228c3dd94", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -9,7 +9,7 @@ use std::iter;\n use std::sync::Arc;\n \n use hir_def::{\n-    builtin_type::{BuiltinFloat, BuiltinInt, BuiltinType},\n+    builtin_type::BuiltinType,\n     generics::WherePredicate,\n     path::{GenericArg, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n@@ -27,7 +27,7 @@ use super::{\n use crate::{\n     db::HirDatabase,\n     ty::{\n-        primitive::{FloatTy, IntTy, Uncertain},\n+        primitive::{FloatTy, IntTy},\n         Adt,\n     },\n     util::make_mut_slice,\n@@ -679,36 +679,6 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n     })\n }\n \n-impl From<BuiltinInt> for IntTy {\n-    fn from(t: BuiltinInt) -> Self {\n-        IntTy { signedness: t.signedness, bitness: t.bitness }\n-    }\n-}\n-\n-impl From<BuiltinFloat> for FloatTy {\n-    fn from(t: BuiltinFloat) -> Self {\n-        FloatTy { bitness: t.bitness }\n-    }\n-}\n-\n-impl From<Option<BuiltinInt>> for Uncertain<IntTy> {\n-    fn from(t: Option<BuiltinInt>) -> Self {\n-        match t {\n-            None => Uncertain::Unknown,\n-            Some(t) => Uncertain::Known(t.into()),\n-        }\n-    }\n-}\n-\n-impl From<Option<BuiltinFloat>> for Uncertain<FloatTy> {\n-    fn from(t: Option<BuiltinFloat>) -> Self {\n-        match t {\n-            None => Uncertain::Unknown,\n-            Some(t) => Uncertain::Known(t.into()),\n-        }\n-    }\n-}\n-\n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> FnSig {\n     let struct_data = db.struct_data(def.into());\n     let fields = struct_data.variant_data.fields();"}, {"sha": "eb7b5c4ef92314d67ee7fe31ee1efaa4b442bff2", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 1, "deletions": 158, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -1,160 +1,3 @@\n //! FIXME: write short doc here\n \n-use std::fmt;\n-\n-pub use hir_def::builtin_type::{FloatBitness, IntBitness, Signedness};\n-\n-#[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]\n-pub enum Uncertain<T> {\n-    Unknown,\n-    Known(T),\n-}\n-\n-impl From<IntTy> for Uncertain<IntTy> {\n-    fn from(ty: IntTy) -> Self {\n-        Uncertain::Known(ty)\n-    }\n-}\n-\n-impl fmt::Display for Uncertain<IntTy> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Uncertain::Unknown => write!(f, \"{{integer}}\"),\n-            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n-        }\n-    }\n-}\n-\n-impl From<FloatTy> for Uncertain<FloatTy> {\n-    fn from(ty: FloatTy) -> Self {\n-        Uncertain::Known(ty)\n-    }\n-}\n-\n-impl fmt::Display for Uncertain<FloatTy> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Uncertain::Unknown => write!(f, \"{{float}}\"),\n-            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Eq, PartialEq, Hash)]\n-pub struct IntTy {\n-    pub signedness: Signedness,\n-    pub bitness: IntBitness,\n-}\n-\n-impl fmt::Debug for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl IntTy {\n-    pub fn isize() -> IntTy {\n-        IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize }\n-    }\n-\n-    pub fn i8() -> IntTy {\n-        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 }\n-    }\n-\n-    pub fn i16() -> IntTy {\n-        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 }\n-    }\n-\n-    pub fn i32() -> IntTy {\n-        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 }\n-    }\n-\n-    pub fn i64() -> IntTy {\n-        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 }\n-    }\n-\n-    pub fn i128() -> IntTy {\n-        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 }\n-    }\n-\n-    pub fn usize() -> IntTy {\n-        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize }\n-    }\n-\n-    pub fn u8() -> IntTy {\n-        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 }\n-    }\n-\n-    pub fn u16() -> IntTy {\n-        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 }\n-    }\n-\n-    pub fn u32() -> IntTy {\n-        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 }\n-    }\n-\n-    pub fn u64() -> IntTy {\n-        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 }\n-    }\n-\n-    pub fn u128() -> IntTy {\n-        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 }\n-    }\n-\n-    pub(crate) fn ty_to_string(self) -> &'static str {\n-        match (self.signedness, self.bitness) {\n-            (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n-            (Signedness::Signed, IntBitness::X8) => \"i8\",\n-            (Signedness::Signed, IntBitness::X16) => \"i16\",\n-            (Signedness::Signed, IntBitness::X32) => \"i32\",\n-            (Signedness::Signed, IntBitness::X64) => \"i64\",\n-            (Signedness::Signed, IntBitness::X128) => \"i128\",\n-            (Signedness::Unsigned, IntBitness::Xsize) => \"usize\",\n-            (Signedness::Unsigned, IntBitness::X8) => \"u8\",\n-            (Signedness::Unsigned, IntBitness::X16) => \"u16\",\n-            (Signedness::Unsigned, IntBitness::X32) => \"u32\",\n-            (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n-            (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct FloatTy {\n-    pub bitness: FloatBitness,\n-}\n-\n-impl fmt::Debug for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl FloatTy {\n-    pub fn f32() -> FloatTy {\n-        FloatTy { bitness: FloatBitness::X32 }\n-    }\n-\n-    pub fn f64() -> FloatTy {\n-        FloatTy { bitness: FloatBitness::X64 }\n-    }\n-\n-    pub(crate) fn ty_to_string(self) -> &'static str {\n-        match self.bitness {\n-            FloatBitness::X32 => \"f32\",\n-            FloatBitness::X64 => \"f64\",\n-        }\n-    }\n-}\n+pub use hir_ty::primitive::{FloatBitness, IntBitness, Signedness, FloatTy, IntTy, Uncertain};"}, {"sha": "70216ab24000d620c9c027ad0f81f3687adc0e08", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -0,0 +1,32 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_hir_ty\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+log = \"0.4.5\"\n+rustc-hash = \"1.0\"\n+parking_lot = \"0.9.0\"\n+ena = \"0.13\"\n+\n+ra_syntax = { path = \"../ra_syntax\" }\n+ra_arena = { path = \"../ra_arena\" }\n+ra_db = { path = \"../ra_db\" }\n+hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n+hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n+test_utils = { path = \"../test_utils\" }\n+ra_prof = { path = \"../ra_prof\" }\n+\n+# https://github.com/rust-lang/chalk/pull/294\n+chalk-solve =   { git = \"https://github.com/jackh726/chalk.git\", rev = \"095cd38a4f16337913bba487f2055b9ca0179f30\" }\n+chalk-rust-ir = { git = \"https://github.com/jackh726/chalk.git\", rev = \"095cd38a4f16337913bba487f2055b9ca0179f30\" }\n+chalk-ir =      { git = \"https://github.com/jackh726/chalk.git\", rev = \"095cd38a4f16337913bba487f2055b9ca0179f30\" }\n+\n+lalrpop-intern = \"0.15.1\"\n+\n+[dev-dependencies]\n+insta = \"0.12.0\""}, {"sha": "25bfc1d154c213218ef08909c1f8738fac53d41d", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -0,0 +1,3 @@\n+//! FIXME: write short doc here\n+\n+pub mod primitive;"}, {"sha": "afa22448dabb42ace3a1f8010a8b5cde5c523d5e", "filename": "crates/ra_hir_ty/src/primitive.rs", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir_ty%2Fsrc%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43631829d8bac8b7533c994d8cf1241a95ce70/crates%2Fra_hir_ty%2Fsrc%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fprimitive.rs?ref=4c43631829d8bac8b7533c994d8cf1241a95ce70", "patch": "@@ -0,0 +1,190 @@\n+//! FIXME: write short doc here\n+\n+use std::fmt;\n+\n+pub use hir_def::builtin_type::{BuiltinFloat, BuiltinInt, FloatBitness, IntBitness, Signedness};\n+\n+#[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]\n+pub enum Uncertain<T> {\n+    Unknown,\n+    Known(T),\n+}\n+\n+impl From<IntTy> for Uncertain<IntTy> {\n+    fn from(ty: IntTy) -> Self {\n+        Uncertain::Known(ty)\n+    }\n+}\n+\n+impl fmt::Display for Uncertain<IntTy> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            Uncertain::Unknown => write!(f, \"{{integer}}\"),\n+            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n+        }\n+    }\n+}\n+\n+impl From<FloatTy> for Uncertain<FloatTy> {\n+    fn from(ty: FloatTy) -> Self {\n+        Uncertain::Known(ty)\n+    }\n+}\n+\n+impl fmt::Display for Uncertain<FloatTy> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            Uncertain::Unknown => write!(f, \"{{float}}\"),\n+            Uncertain::Known(ty) => write!(f, \"{}\", ty),\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Eq, PartialEq, Hash)]\n+pub struct IntTy {\n+    pub signedness: Signedness,\n+    pub bitness: IntBitness,\n+}\n+\n+impl fmt::Debug for IntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Display for IntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.ty_to_string())\n+    }\n+}\n+\n+impl IntTy {\n+    pub fn isize() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize }\n+    }\n+\n+    pub fn i8() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 }\n+    }\n+\n+    pub fn i16() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 }\n+    }\n+\n+    pub fn i32() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 }\n+    }\n+\n+    pub fn i64() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 }\n+    }\n+\n+    pub fn i128() -> IntTy {\n+        IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 }\n+    }\n+\n+    pub fn usize() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize }\n+    }\n+\n+    pub fn u8() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 }\n+    }\n+\n+    pub fn u16() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 }\n+    }\n+\n+    pub fn u32() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 }\n+    }\n+\n+    pub fn u64() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 }\n+    }\n+\n+    pub fn u128() -> IntTy {\n+        IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 }\n+    }\n+\n+    pub fn ty_to_string(self) -> &'static str {\n+        match (self.signedness, self.bitness) {\n+            (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n+            (Signedness::Signed, IntBitness::X8) => \"i8\",\n+            (Signedness::Signed, IntBitness::X16) => \"i16\",\n+            (Signedness::Signed, IntBitness::X32) => \"i32\",\n+            (Signedness::Signed, IntBitness::X64) => \"i64\",\n+            (Signedness::Signed, IntBitness::X128) => \"i128\",\n+            (Signedness::Unsigned, IntBitness::Xsize) => \"usize\",\n+            (Signedness::Unsigned, IntBitness::X8) => \"u8\",\n+            (Signedness::Unsigned, IntBitness::X16) => \"u16\",\n+            (Signedness::Unsigned, IntBitness::X32) => \"u32\",\n+            (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n+            (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct FloatTy {\n+    pub bitness: FloatBitness,\n+}\n+\n+impl fmt::Debug for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Display for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.ty_to_string())\n+    }\n+}\n+\n+impl FloatTy {\n+    pub fn f32() -> FloatTy {\n+        FloatTy { bitness: FloatBitness::X32 }\n+    }\n+\n+    pub fn f64() -> FloatTy {\n+        FloatTy { bitness: FloatBitness::X64 }\n+    }\n+\n+    pub fn ty_to_string(self) -> &'static str {\n+        match self.bitness {\n+            FloatBitness::X32 => \"f32\",\n+            FloatBitness::X64 => \"f64\",\n+        }\n+    }\n+}\n+\n+impl From<BuiltinInt> for IntTy {\n+    fn from(t: BuiltinInt) -> Self {\n+        IntTy { signedness: t.signedness, bitness: t.bitness }\n+    }\n+}\n+\n+impl From<BuiltinFloat> for FloatTy {\n+    fn from(t: BuiltinFloat) -> Self {\n+        FloatTy { bitness: t.bitness }\n+    }\n+}\n+\n+impl From<Option<BuiltinInt>> for Uncertain<IntTy> {\n+    fn from(t: Option<BuiltinInt>) -> Self {\n+        match t {\n+            None => Uncertain::Unknown,\n+            Some(t) => Uncertain::Known(t.into()),\n+        }\n+    }\n+}\n+\n+impl From<Option<BuiltinFloat>> for Uncertain<FloatTy> {\n+    fn from(t: Option<BuiltinFloat>) -> Self {\n+        match t {\n+            None => Uncertain::Unknown,\n+            Some(t) => Uncertain::Known(t.into()),\n+        }\n+    }\n+}"}]}