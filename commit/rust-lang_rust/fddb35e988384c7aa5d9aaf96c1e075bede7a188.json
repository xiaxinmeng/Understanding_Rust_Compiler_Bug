{"sha": "fddb35e988384c7aa5d9aaf96c1e075bede7a188", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZGIzNWU5ODgzODRjN2FhNWQ5YWFmOTZjMWUwNzViZWRlN2ExODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T16:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T16:16:22Z"}, "message": "auto merge of #7984 : gifnksm/rust/tutorial-links, r=bstrie", "tree": {"sha": "46bd4f74a67a9d4cdc73836e01487130d1d4fdd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46bd4f74a67a9d4cdc73836e01487130d1d4fdd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fddb35e988384c7aa5d9aaf96c1e075bede7a188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fddb35e988384c7aa5d9aaf96c1e075bede7a188", "html_url": "https://github.com/rust-lang/rust/commit/fddb35e988384c7aa5d9aaf96c1e075bede7a188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fddb35e988384c7aa5d9aaf96c1e075bede7a188/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c9b112b52b31f511b08438fc7f812108688804", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c9b112b52b31f511b08438fc7f812108688804", "html_url": "https://github.com/rust-lang/rust/commit/63c9b112b52b31f511b08438fc7f812108688804"}, {"sha": "e68697b55e0b89c72ab52e7a8004cc1ceb7619ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68697b55e0b89c72ab52e7a8004cc1ceb7619ff", "html_url": "https://github.com/rust-lang/rust/commit/e68697b55e0b89c72ab52e7a8004cc1ceb7619ff"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "b7ea5f146e4134001a5d0d3ea78a72707814e609", "filename": "doc/tutorial.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fddb35e988384c7aa5d9aaf96c1e075bede7a188/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/fddb35e988384c7aa5d9aaf96c1e075bede7a188/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=fddb35e988384c7aa5d9aaf96c1e075bede7a188", "patch": "@@ -309,7 +309,7 @@ was taken.\n \n In short, everything that's not a declaration (declarations are `let` for\n variables; `fn` for functions; and any top-level named items such as\n-[traits](#traits), [enum types](#enums), and [constants](#constants)) is an\n+[traits](#traits), [enum types](#enums), and static items) is an\n expression, including function bodies.\n \n ~~~~\n@@ -992,7 +992,7 @@ task-local garbage collector. It will be destroyed at some point after there\n are no references left to the box, no later than the end of the task. Managed\n boxes lack an owner, so they start a new ownership tree and don't inherit\n mutability. They do own the contained object, and mutability is defined by the\n-type of the shared box (`@` or `@mut`). An object containing a managed box is\n+type of the managed box (`@` or `@mut`). An object containing a managed box is\n not `Owned`, and can't be sent between tasks.\n \n ~~~~\n@@ -1089,10 +1089,8 @@ we might like to compute the distance between `on_the_stack` and\n to define a function that takes two arguments of type point\u2014that is,\n it takes the points by value. But this will cause the points to be\n copied when we call the function. For points, this is probably not so\n-bad, but often copies are expensive or, worse, if there are mutable\n-fields, they can change the semantics of your program. So we\u2019d like to\n-define a function that takes the points by pointer. We can use\n-borrowed pointers to do this:\n+bad, but often copies are expensive. So we\u2019d like to define a function\n+that takes the points by pointer. We can use borrowed pointers to do this:\n \n ~~~\n # struct Point { x: float, y: float }\n@@ -1375,7 +1373,7 @@ let exchange_crayons: ~str = ~\"Black, BlizzardBlue, Blue\";\n ~~~\n \n Both vectors and strings support a number of useful\n-[methods](#functions-and-methods), defined in [`std::vec`]\n+[methods](#methods), defined in [`std::vec`]\n and [`std::str`]. Here are some examples.\n \n [`std::vec`]: std/vec.html\n@@ -1930,7 +1928,7 @@ that implements a trait includes the name of the trait at the start of\n the definition, as in the following impls of `Printable` for `int`\n and `~str`.\n \n-[impls]: #functions-and-methods\n+[impls]: #methods\n \n ~~~~\n # trait Printable { fn print(&self); }"}]}