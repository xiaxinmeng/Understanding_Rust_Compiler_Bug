{"sha": "e2e29de5e8a2908260d54182638241ff086a26c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZTI5ZGU1ZThhMjkwODI2MGQ1NDE4MjYzODI0MWZmMDg2YTI2YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-16T03:16:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-16T03:16:07Z"}, "message": "Auto merge of #74375 - Manishearth:rollup-10vbpdh, r=Manishearth\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #72973 (RISC-V GNU/Linux as host platform)\n - #73918 (Clean up E0715 explanation)\n - #73959 (Clean up E0716 explanation)\n - #74119 (Remove `Compiler::compile()`.)\n - #74196 (Add option to collapse automatically implementors)\n - #74218 (Add margin after doc search results)\n - #74276 (improve DiscriminantKind handling)\n - #74291 (Added docs for `From<c_int>` for `ExitStatus`)\n - #74294 (Update cross-compilation README)\n - #74337 (Handle case of incomplete local ty more gracefully)\n - #74344 (Remove string comparison and use diagnostic item instead)\n - #74347 (Initialize default providers only once)\n - #74353 (Edit docs for rustc_middle::dep_graph::dep_node)\n - #74374 (Add a 1.45 release note on lto vs. embed-bitcode)\n\nFailed merges:\n\n - #74251 (Teach bootstrap about target files vs target triples)\n\nr? @ghost", "tree": {"sha": "e44d40c0247410d83ffa8a34aa0becdca30b9418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44d40c0247410d83ffa8a34aa0becdca30b9418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2e29de5e8a2908260d54182638241ff086a26c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e29de5e8a2908260d54182638241ff086a26c2", "html_url": "https://github.com/rust-lang/rust/commit/e2e29de5e8a2908260d54182638241ff086a26c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2e29de5e8a2908260d54182638241ff086a26c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "html_url": "https://github.com/rust-lang/rust/commit/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149"}, {"sha": "0bde1c3ae5b75eb07338ecf26e797c2f1c436518", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bde1c3ae5b75eb07338ecf26e797c2f1c436518", "html_url": "https://github.com/rust-lang/rust/commit/0bde1c3ae5b75eb07338ecf26e797c2f1c436518"}], "stats": {"total": 419, "additions": 221, "deletions": 198}, "files": [{"sha": "29421895a9482789c5d1605084cfb244174e141e", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -297,6 +297,9 @@ jobs:\n           - name: dist-powerpc64le-linux\n             os: ubuntu-latest-xl\n             env: {}\n+          - name: dist-riscv64-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n           - name: dist-s390x-linux\n             os: ubuntu-latest-xl\n             env: {}"}, {"sha": "7bac14cb415340a90d944ed62fd956bcdf910687", "filename": "RELEASES.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -82,6 +82,9 @@ Stabilized APIs\n Cargo\n -----\n \n+- [Cargo uses the `embed-bitcode` flag to optimize disk usage and build\n+  time.][cargo/8066]\n+\n Misc\n ----\n - [Rustdoc now supports strikethrough text in Markdown.][71928] E.g.\n@@ -97,12 +100,18 @@ Compatibility Notes\n - [Rustdoc's CLI's extra error exit codes have been removed.][71900] These were\n   previously undocumented and not intended for public use. Rustdoc still provides\n   a non-zero exit code on errors.\n+- [Rustc's `lto` flag is incompatible with the new `embed-bitcode=no`.][71848]\n+  This may cause issues if LTO is enabled through `RUSTFLAGS` or `cargo rustc`\n+  flags while cargo is adding `embed-bitcode` itself. The recommended way to\n+  control LTO is with Cargo profiles, either in `Cargo.toml` or `.cargo/config`,\n+  or by setting `CARGO_PROFILE_<name>_LTO` in the environment.\n \n Internals Only\n --------------\n - [Make clippy a git subtree instead of a git submodule][70655]\n - [Unify the undo log of all snapshot types][69464]\n \n+[71848]: https://github.com/rust-lang/rust/issues/71848/\n [73420]: https://github.com/rust-lang/rust/issues/73420/\n [72324]: https://github.com/rust-lang/rust/pull/72324/\n [71843]: https://github.com/rust-lang/rust/pull/71843/\n@@ -129,6 +138,7 @@ Internals Only\n [69813]: https://github.com/rust-lang/rust/pull/69813/\n [69464]: https://github.com/rust-lang/rust/pull/69464/\n [68717]: https://github.com/rust-lang/rust/pull/68717/\n+[cargo/8066]: https://github.com/rust-lang/cargo/pull/8066\n [`Arc::as_ptr`]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.as_ptr\n [`BTreeMap::remove_entry`]: https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.remove_entry\n [`Rc::as_ptr`]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.as_ptr"}, {"sha": "b7c527f6712e1d48184e5ad45fec504cdcfe4bbb", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -112,6 +112,15 @@ impl Step for Llvm {\n     /// Compile LLVM for `target`.\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         let target = self.target;\n+        let target_native = if self.target.starts_with(\"riscv\") {\n+            // RISC-V target triples in Rust is not named the same as C compiler target triples.\n+            // This converts Rust RISC-V target triples to C compiler triples.\n+            let idx = target.find('-').unwrap();\n+\n+            format!(\"riscv{}{}\", &target[5..7], &target[idx..])\n+        } else {\n+            target.to_string()\n+        };\n \n         let Meta { stamp, build_llvm_config, out_dir, root } =\n             match prebuilt_llvm_config(builder, target) {\n@@ -165,8 +174,8 @@ impl Step for Llvm {\n             .define(\"LLVM_ENABLE_BINDINGS\", \"OFF\")\n             .define(\"LLVM_ENABLE_Z3_SOLVER\", \"OFF\")\n             .define(\"LLVM_PARALLEL_COMPILE_JOBS\", builder.jobs().to_string())\n-            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n-            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n+            .define(\"LLVM_TARGET_ARCH\", target_native.split('-').next().unwrap())\n+            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target_native);\n \n         if !target.contains(\"netbsd\") {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"ON\");\n@@ -213,6 +222,17 @@ impl Step for Llvm {\n             }\n         }\n \n+        if target.starts_with(\"riscv\") {\n+            // In RISC-V, using C++ atomics require linking to `libatomic` but the LLVM build\n+            // system check cannot detect this. Therefore it is set manually here.\n+            if !builder.config.llvm_tools_enabled {\n+                cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-latomic\");\n+            } else {\n+                cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-latomic -static-libstdc++\");\n+            }\n+            cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", \"-latomic\");\n+        }\n+\n         if target.contains(\"msvc\") {\n             cfg.define(\"LLVM_USE_CRT_DEBUG\", \"MT\");\n             cfg.define(\"LLVM_USE_CRT_RELEASE\", \"MT\");"}, {"sha": "1786baa0278b9896df976494b3051a9eedfc972f", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -53,6 +53,7 @@ jobs:\n       dist-powerpc-linux: {}\n       dist-powerpc64-linux: {}\n       dist-powerpc64le-linux: {}\n+      dist-riscv64-linux: {}\n       dist-s390x-linux: {}\n       dist-x86_64-freebsd: {}\n       dist-x86_64-illumos: {}"}, {"sha": "ff28f4f603c9dcc97fe4bbdb0ba6378e3080b8db", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -16,6 +16,11 @@ for example:\n \n Images will output artifacts in an `obj` dir at the root of a repository.\n \n+To match conditions in rusts CI, also set the environment variable `DEPLOY=1`, e.g.:\n+```\n+DEPLOY=1 ./src/ci/docker/run.sh x86_64-gnu\n+```\n+\n **NOTE**: Re-using the same `obj` dir with different docker images with\n the same target triple (e.g. `dist-x86_64-linux` and `dist-various-1`)\n may result in strange linker errors, due shared library versions differing between platforms.\n@@ -85,42 +90,60 @@ how to generate them, and how the existing ones were generated.\n \n ### Generating a `.config` file\n \n+**NOTE:** Existing Dockerfiles can also be a good guide for the process and order\n+of script execution.\n+\n If you have a `linux-cross` image lying around you can use that and skip the\n next two steps.\n \n-- First we spin up a container and copy `build_toolchain_root.sh` into it. All\n+- First we spin up a container and copy all scripts into it. All\n   these steps are outside the container:\n \n ```\n-# Note: We use ubuntu:15.10 because that's the \"base\" of linux-cross Docker\n-# image\n-$ docker run -it ubuntu:15.10 bash\n+# Note: We use ubuntu:16.04 because that's the \"base\" of linux-cross Docker\n+# image, or simply run ./src/ci/docker/run.sh once, which will download the correct\n+# one and you can check it out with `docker images`\n+$ docker run -it ubuntu:16.04 bash\n+# in another terminal:\n $ docker ps\n CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n-cfbec05ed730        ubuntu:15.10        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n-$ docker cp build_toolchain_root.sh drunk_murdock:/\n+cfbec05ed730        ubuntu:16.04        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n+$ docker cp src/ci/docker/scripts drunk_murdock:/tmp/\n ```\n \n - Then inside the container we build crosstool-ng by simply calling the bash\n   script we copied in the previous step:\n \n ```\n-$ bash build_toolchain_root.sh\n+$ cd /tmp/scripts\n+# Download packages necessary for building\n+$ bash ./cross-apt-packages.sh\n+# Download and build crosstool-ng\n+$ bash ./crosstool-ng.sh\n+```\n+\n+- In case you want to adjust or start from an existing config, copy that\n+  to the container. `crosstool-ng` will automatically load `./.config` if\n+  present. Otherwise one can use the TUI to load any config-file.\n+\n+```\n+$ docker cp arm-linux-gnueabi.config drunk_murdock:/tmp/.config\n ```\n \n - Now, inside the container run the following command to configure the\n   toolchain. To get a clue of which options need to be changed check the next\n   section and come back.\n \n ```\n+$ cd /tmp/\n $ ct-ng menuconfig\n ```\n \n - Finally, we retrieve the `.config` file from the container and give it a\n   meaningful name. This is done outside the container.\n \n ```\n-$ docker drunk_murdock:/.config arm-linux-gnueabi.config\n+$ docker cp drunk_murdock:/tmp/.config arm-linux-gnueabi.config\n ```\n \n - Now you can shutdown the container or repeat the two last steps to generate a"}, {"sha": "dff7c475157a239b8928090f85e6b8b9023adacf", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/Dockerfile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -0,0 +1,31 @@\n+FROM ubuntu:18.04\n+\n+COPY scripts/cross-apt-packages.sh /scripts/\n+RUN sh /scripts/cross-apt-packages.sh\n+\n+COPY host-x86_64/dist-riscv64-linux/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n+\n+COPY scripts/rustbuild-setup.sh /scripts/\n+RUN sh /scripts/rustbuild-setup.sh\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY host-x86_64/dist-riscv64-linux/build-toolchains.sh host-x86_64/dist-riscv64-linux/riscv64-unknown-linux-gnu.config /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV PATH=$PATH:/x-tools/riscv64-unknown-linux-gnu/bin\n+\n+ENV CC_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-gcc \\\n+    AR_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-ar \\\n+    CXX_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-g++\n+\n+ENV HOSTS=riscv64gc-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs\n+ENV SCRIPT python3 ../x.py dist --target $HOSTS --host $HOSTS"}, {"sha": "6a7c022d01a5d86b1ee93392284e36653c87fdbd", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/build-toolchains.sh", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -19,9 +19,9 @@ exit 1\n   set -x\n }\n \n-mkdir -p /tmp/build-riscv\n-cp riscv64-unknown-linux-gnu.config /tmp/build-riscv/.config\n-cd /tmp/build-riscv\n+mkdir build\n+cd build\n+cp ../riscv64-unknown-linux-gnu.config .config\n hide_output ct-ng build\n cd ..\n-rm -rf build-riscv\n+rm -rf build", "previous_filename": "src/ci/docker/host-x86_64/dist-various-1/build-riscv-toolchain.sh"}, {"sha": "fb067a79a5c85c93691cdf5244394982d465289f", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/crosstool-ng.sh", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fcrosstool-ng.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fcrosstool-ng.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fcrosstool-ng.sh?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1,4 +1,3 @@\n-#!/bin/bash\n set -ex\n \n # Mirrored from https://github.com/crosstool-ng/crosstool-ng/archive/crosstool-ng-1.24.0.tar.gz", "previous_filename": "src/ci/docker/host-x86_64/dist-various-1/crosstool-ng.sh"}, {"sha": "dbb4be550dd70072efaaa4b525c901892ffc75e4", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/riscv64-unknown-linux-gnu.config", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.config?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -17,8 +17,6 @@ CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n CT_CONFIGURE_has_python_3_4_or_newer=y\n CT_CONFIGURE_has_bison_2_7_or_newer=y\n CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_dtc=y\n-CT_CONFIGURE_has_svn=y\n CT_CONFIGURE_has_git=y\n CT_CONFIGURE_has_md5sum=y\n CT_CONFIGURE_has_sha1sum=y", "previous_filename": "src/ci/docker/host-x86_64/dist-various-1/riscv64-unknown-linux-gnu.config"}, {"sha": "ac228cfe01d800cb777297c58631957487e42d3d", "filename": "src/ci/docker/host-x86_64/dist-various-1/Dockerfile", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -47,18 +47,6 @@ RUN add-apt-repository ppa:team-gcc-arm-embedded/ppa && \\\n     apt-get update && \\\n     apt-get install -y --no-install-recommends gcc-arm-embedded\n \n-COPY scripts/rustbuild-setup.sh host-x86_64/dist-various-1/build-riscv-toolchain.sh host-x86_64/dist-various-1/riscv64-unknown-linux-gnu.config host-x86_64/dist-various-1/crosstool-ng.sh /build/\n-RUN ./crosstool-ng.sh\n-\n-# Crosstool-ng will refuse to build as root\n-RUN sh ./rustbuild-setup.sh\n-USER rustbuild\n-\n-RUN ./build-riscv-toolchain.sh\n-\n-USER root\n-ENV PATH=/x-tools/riscv64-unknown-linux-gnu/bin:$PATH\n-\n COPY host-x86_64/dist-various-1/build-rumprun.sh /build\n RUN ./build-rumprun.sh\n \n@@ -158,7 +146,6 @@ ENV TARGETS=$TARGETS,riscv32imc-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv32imac-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv64imac-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv64gc-unknown-none-elf\n-ENV TARGETS=$TARGETS,riscv64gc-unknown-linux-gnu\n ENV TARGETS=$TARGETS,armebv7r-none-eabi\n ENV TARGETS=$TARGETS,armebv7r-none-eabihf\n ENV TARGETS=$TARGETS,armv7r-none-eabi\n@@ -186,9 +173,6 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CFLAGS_aarch64_unknown_none_softfloat=-mstrict-align -march=armv8-a+nofp+nosimd \\\n     CC_aarch64_unknown_none=aarch64-none-elf-gcc \\\n     CFLAGS_aarch64_unknown_none=-mstrict-align -march=armv8-a+fp+simd \\\n-    CC_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-gcc \\\n-    AR_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-ar \\\n-    CXX_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-g++ \\\n     CC_riscv32i_unknown_none_elf=false \\\n     CC_riscv32imc_unknown_none_elf=false \\\n     CC_riscv32imac_unknown_none_elf=false \\"}, {"sha": "8545ec15d32800a41d8f77f00934218ef0006c35", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -341,6 +341,9 @@ jobs:\n           - name: dist-powerpc64le-linux\n             <<: *job-linux-xl\n \n+          - name: dist-riscv64-linux\n+            <<: *job-linux-xl\n+\n           - name: dist-s390x-linux\n             <<: *job-linux-xl\n "}, {"sha": "56dddee7b7799f00fd01a608f11b20a74f4f22f9", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -693,6 +693,7 @@ mod impls {\n pub trait DiscriminantKind {\n     /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n+    #[cfg_attr(not(bootstrap), lang = \"discriminant_type\")]\n     type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n }\n "}, {"sha": "a27e8d2a724529f67c3110d0bd1c747542dda36a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1681,6 +1681,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n /// to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n /// implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n /// returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n+#[rustc_diagnostic_item = \"none_error\"]\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n pub struct NoneError;"}, {"sha": "b27702b3c26e27c473e73193b8b07979ce987ad1", "filename": "src/librustc_error_codes/error_codes/E0715.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0715.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0715.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0715.md?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -15,8 +15,7 @@ struct OverrideConst;\n impl Marker for OverrideConst { // error!\n     const N: usize = 1;\n }\n-\n-fn main() {}\n+# fn main() {}\n ```\n \n Because marker traits are allowed to have multiple implementations for the same"}, {"sha": "c6d0337ddda56d0c10efa53e415cb69d9eb5b35a", "filename": "src/librustc_error_codes/error_codes/E0716.md", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0716.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0716.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0716.md?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1,5 +1,4 @@\n-This error indicates that a temporary value is being dropped\n-while a borrow is still in active use.\n+A temporary value is being dropped while a borrow is still in active use.\n \n Erroneous code example:\n \n@@ -11,12 +10,11 @@ let p = bar(&foo());\n let q = *p;\n ```\n \n-Here, the expression `&foo()` is borrowing the expression\n-`foo()`. As `foo()` is a call to a function, and not the name of\n-a variable, this creates a **temporary** -- that temporary stores\n-the return value from `foo()` so that it can be borrowed.\n-You could imagine that `let p = bar(&foo());` is equivalent\n-to this:\n+Here, the expression `&foo()` is borrowing the expression `foo()`. As `foo()` is\n+a call to a function, and not the name of a variable, this creates a\n+**temporary** -- that temporary stores the return value from `foo()` so that it\n+can be borrowed. You could imagine that `let p = bar(&foo());` is equivalent to\n+this:\n \n ```compile_fail,E0597\n # fn foo() -> i32 { 22 }\n@@ -28,16 +26,14 @@ let p = {\n let q = p;\n ```\n \n-Whenever a temporary is created, it is automatically dropped (freed)\n-according to fixed rules. Ordinarily, the temporary is dropped\n-at the end of the enclosing statement -- in this case, after the `let`.\n-This is illustrated in the example above by showing that `tmp` would\n-be freed as we exit the block.\n+Whenever a temporary is created, it is automatically dropped (freed) according\n+to fixed rules. Ordinarily, the temporary is dropped at the end of the enclosing\n+statement -- in this case, after the `let`. This is illustrated in the example\n+above by showing that `tmp` would be freed as we exit the block.\n \n-To fix this problem, you need to create a local variable\n-to store the value in rather than relying on a temporary.\n-For example, you might change the original program to\n-the following:\n+To fix this problem, you need to create a local variable to store the value in\n+rather than relying on a temporary. For example, you might change the original\n+program to the following:\n \n ```\n fn foo() -> i32 { 22 }\n@@ -47,16 +43,15 @@ let p = bar(&value);\n let q = *p;\n ```\n \n-By introducing the explicit `let value`, we allocate storage\n-that will last until the end of the enclosing block (when `value`\n-goes out of scope). When we borrow `&value`, we are borrowing a\n-local variable that already exists, and hence no temporary is created.\n+By introducing the explicit `let value`, we allocate storage that will last\n+until the end of the enclosing block (when `value` goes out of scope). When we\n+borrow `&value`, we are borrowing a local variable that already exists, and\n+hence no temporary is created.\n \n-Temporaries are not always dropped at the end of the enclosing\n-statement. In simple cases where the `&` expression is immediately\n-stored into a variable, the compiler will automatically extend\n-the lifetime of the temporary until the end of the enclosing\n-block. Therefore, an alternative way to fix the original\n+Temporaries are not always dropped at the end of the enclosing statement. In\n+simple cases where the `&` expression is immediately stored into a variable, the\n+compiler will automatically extend the lifetime of the temporary until the end\n+of the enclosing block. Therefore, an alternative way to fix the original\n program is to write `let tmp = &foo()` and not `let tmp = foo()`:\n \n ```\n@@ -67,10 +62,10 @@ let p = bar(value);\n let q = *p;\n ```\n \n-Here, we are still borrowing `foo()`, but as the borrow is assigned\n-directly into a variable, the temporary will not be dropped until\n-the end of the enclosing block. Similar rules apply when temporaries\n-are stored into aggregate structures like a tuple or struct:\n+Here, we are still borrowing `foo()`, but as the borrow is assigned directly\n+into a variable, the temporary will not be dropped until the end of the\n+enclosing block. Similar rules apply when temporaries are stored into aggregate\n+structures like a tuple or struct:\n \n ```\n // Here, two temporaries are created, but"}, {"sha": "88c97d874bed6f3c9a849b8f6cc309bddaef21ea", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -193,6 +193,9 @@ language_item_table! {\n     CloneTraitLangItem,            sym::clone,              clone_trait,             Target::Trait;\n     SyncTraitLangItem,             sym::sync,               sync_trait,              Target::Trait;\n     DiscriminantKindTraitLangItem, sym::discriminant_kind,  discriminant_kind_trait, Target::Trait;\n+    // The associated item of `trait DiscriminantKind`.\n+    DiscriminantTypeLangItem,      sym::discriminant_type,  discriminant_type,       Target::AssocTy;\n+\n     FreezeTraitLangItem,           sym::freeze,             freeze_trait,            Target::Trait;\n \n     DropTraitLangItem,             sym::drop,               drop_trait,              Target::Trait;"}, {"sha": "fe40c615f79c96f4aec3fd521be3f5d6c657f358", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -14,6 +14,7 @@ mod queries;\n pub mod util;\n \n pub use interface::{run_compiler, Config};\n+pub use passes::{DEFAULT_EXTERN_QUERY_PROVIDERS, DEFAULT_QUERY_PROVIDERS};\n pub use queries::Queries;\n \n #[cfg(test)]"}, {"sha": "af4397075bb600a5171b588c2482a8e7723c3100", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -3,6 +3,7 @@ use crate::proc_macro_decls;\n use crate::util;\n \n use log::{info, log_enabled, warn};\n+use once_cell::sync::Lazy;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self, ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -19,6 +20,7 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir as mir;\n@@ -719,7 +721,8 @@ pub fn prepare_outputs(\n     Ok(outputs)\n }\n \n-pub fn default_provide(providers: &mut ty::query::Providers) {\n+pub static DEFAULT_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+    let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n     plugin::build::provide(providers);\n@@ -738,12 +741,15 @@ pub fn default_provide(providers: &mut ty::query::Providers) {\n     rustc_lint::provide(providers);\n     rustc_symbol_mangling::provide(providers);\n     rustc_codegen_ssa::provide(providers);\n-}\n+    *providers\n+});\n \n-pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n-    rustc_metadata::provide_extern(providers);\n-    rustc_codegen_ssa::provide_extern(providers);\n-}\n+pub static DEFAULT_EXTERN_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+    let mut extern_providers = *DEFAULT_QUERY_PROVIDERS;\n+    rustc_metadata::provide_extern(&mut extern_providers);\n+    rustc_codegen_ssa::provide_extern(&mut extern_providers);\n+    extern_providers\n+});\n \n pub struct QueryContext<'tcx>(&'tcx GlobalCtxt<'tcx>);\n \n@@ -780,12 +786,11 @@ pub fn create_global_ctxt<'tcx>(\n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n     let codegen_backend = compiler.codegen_backend();\n-    let mut local_providers = ty::query::Providers::default();\n-    default_provide(&mut local_providers);\n+    let mut local_providers = *DEFAULT_QUERY_PROVIDERS;\n     codegen_backend.provide(&mut local_providers);\n \n-    let mut extern_providers = local_providers;\n-    default_provide_extern(&mut extern_providers);\n+    let mut extern_providers = *DEFAULT_EXTERN_QUERY_PROVIDERS;\n+    codegen_backend.provide(&mut extern_providers);\n     codegen_backend.provide_extern(&mut extern_providers);\n \n     if let Some(callback) = compiler.override_queries {"}, {"sha": "4265e6dca6a240acfbda3cad626052c7ea0b1d03", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -18,7 +18,6 @@ use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n-use std::mem;\n use std::rc::Rc;\n \n /// Represent the result of a query.\n@@ -395,37 +394,4 @@ impl Compiler {\n \n         ret\n     }\n-\n-    // This method is different to all the other methods in `Compiler` because\n-    // it lacks a `Queries` entry. It's also not currently used. It does serve\n-    // as an example of how `Compiler` can be used, with additional steps added\n-    // between some passes. And see `rustc_driver::run_compiler` for a more\n-    // complex example.\n-    pub fn compile(&self) -> Result<()> {\n-        let linker = self.enter(|queries| {\n-            queries.prepare_outputs()?;\n-\n-            if self.session().opts.output_types.contains_key(&OutputType::DepInfo)\n-                && self.session().opts.output_types.len() == 1\n-            {\n-                return Ok(None);\n-            }\n-\n-            queries.global_ctxt()?;\n-\n-            // Drop AST after creating GlobalCtxt to free memory.\n-            mem::drop(queries.expansion()?.take());\n-\n-            queries.ongoing_codegen()?;\n-\n-            let linker = queries.linker()?;\n-            Ok(Some(linker))\n-        })?;\n-\n-        if let Some(linker) = linker {\n-            linker.link()?\n-        }\n-\n-        Ok(())\n-    }\n }"}, {"sha": "5145b3b5e6fcc9cf423c52a0d250a8183213f9c1", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -275,6 +275,11 @@ fn main() {\n         \"stdc++\"\n     };\n \n+    // RISC-V requires libatomic for sub-word atomic operations\n+    if target.starts_with(\"riscv\") {\n+        println!(\"cargo:rustc-link-lib=atomic\");\n+    }\n+\n     // C++ runtime library\n     if !target.contains(\"msvc\") {\n         if let Some(s) = llvm_static_stdcpp {"}, {"sha": "98eed4045a34ad6d32443b359fb57511fe17cef4", "filename": "src/librustc_middle/dep_graph/dep_node.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1,7 +1,9 @@\n //! This module defines the `DepNode` type which the compiler uses to represent\n-//! nodes in the dependency graph. A `DepNode` consists of a `DepKind` (which\n+//! nodes in the dependency graph.\n+//!\n+//! A `DepNode` consists of a `DepKind` (which\n //! specifies the kind of thing it represents, like a piece of HIR, MIR, etc)\n-//! and a `Fingerprint`, a 128 bit hash value the exact meaning of which\n+//! and a `Fingerprint`, a 128-bit hash value the exact meaning of which\n //! depends on the node's `DepKind`. Together, the kind and the fingerprint\n //! fully identify a dependency node, even across multiple compilation sessions.\n //! In other words, the value of the fingerprint does not depend on anything\n@@ -11,9 +13,9 @@\n //! uniquely identify a given commit and has a few advantages:\n //!\n //! * A `DepNode` can simply be serialized to disk and loaded in another session\n-//!   without the need to do any \"rebasing (like we have to do for Spans and\n-//!   NodeIds) or \"retracing\" like we had to do for `DefId` in earlier\n-//!   implementations of the dependency graph.\n+//!   without the need to do any \"rebasing\" (like we have to do for Spans and\n+//!   NodeIds) or \"retracing\" (like we had to do for `DefId` in earlier\n+//!   implementations of the dependency graph).\n //! * A `Fingerprint` is just a bunch of bits, which allows `DepNode` to\n //!   implement `Copy`, `Sync`, `Send`, `Freeze`, etc.\n //! * Since we just have a bit pattern, `DepNode` can be mapped from disk into\n@@ -42,7 +44,7 @@\n //!   `DefId` it was computed from. In other cases, too much information gets\n //!   lost during fingerprint computation.\n //!\n-//! The `DepConstructor` enum, together with `DepNode::new()` ensures that only\n+//! The `DepConstructor` enum, together with `DepNode::new()`, ensures that only\n //! valid `DepNode` instances can be constructed. For example, the API does not\n //! allow for constructing parameterless `DepNode`s with anything other\n //! than a zeroed out fingerprint. More generally speaking, it relieves the"}, {"sha": "d04920de47f09c44a70f7cada631d53f13c1c6cd", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -162,13 +162,19 @@ impl<'a> Parser<'a> {\n             match self.parse_ty() {\n                 Ok(ty) => (None, Some(ty)),\n                 Err(mut err) => {\n-                    // Rewind to before attempting to parse the type and continue parsing.\n-                    let parser_snapshot_after_type =\n-                        mem::replace(self, parser_snapshot_before_type);\n                     if let Ok(snip) = self.span_to_snippet(pat.span) {\n                         err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snip));\n                     }\n-                    (Some((parser_snapshot_after_type, colon_sp, err)), None)\n+                    let err = if self.check(&token::Eq) {\n+                        err.emit();\n+                        None\n+                    } else {\n+                        // Rewind to before attempting to parse the type and continue parsing.\n+                        let parser_snapshot_after_type =\n+                            mem::replace(self, parser_snapshot_before_type);\n+                        Some((parser_snapshot_after_type, colon_sp, err))\n+                    };\n+                    (err, None)\n                 }\n             }\n         } else {"}, {"sha": "86b770104ea8e9c90fb78342ffff32f5c21946d0", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -327,6 +327,7 @@ symbols! {\n         diagnostic,\n         direct,\n         discriminant_kind,\n+        discriminant_type,\n         discriminant_value,\n         dispatch_from_dyn,\n         div,\n@@ -631,6 +632,7 @@ symbols! {\n         nomem,\n         non_ascii_idents,\n         None,\n+        none_error,\n         non_exhaustive,\n         no_niche,\n         non_modrs_mods,"}, {"sha": "79d5c148ce4fe9a5a096e9b122ca35b9bdc68a34", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -26,6 +26,7 @@ use rustc_middle::ty::{\n     TypeFoldable, WithConstness,\n };\n use rustc_session::DiagnosticMessageId;\n+use rustc_span::symbol::sym;\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n@@ -283,8 +284,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             .span_to_snippet(span)\n                             .map(|s| &s == \"?\")\n                             .unwrap_or(false);\n-                        let is_from = format!(\"{}\", trait_ref.print_only_trait_path())\n-                            .starts_with(\"std::convert::From<\");\n+                        let is_from = self.tcx.get_diagnostic_item(sym::from_trait)\n+                            == Some(trait_ref.def_id());\n                         let is_unsize =\n                             { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n                         let (message, note) = if is_try && is_from {\n@@ -315,12 +316,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             ))\n                         );\n \n-                        let should_convert_option_to_result =\n-                            format!(\"{}\", trait_ref.print_only_trait_path())\n-                                .starts_with(\"std::convert::From<std::option::NoneError\");\n-                        let should_convert_result_to_option = format!(\"{}\", trait_ref)\n-                            .starts_with(\"<std::option::NoneError as std::convert::From<\");\n                         if is_try && is_from {\n+                            let none_error = self\n+                                .tcx\n+                                .get_diagnostic_item(sym::none_error)\n+                                .map(|def_id| tcx.type_of(def_id));\n+                            let should_convert_option_to_result =\n+                                Some(trait_ref.skip_binder().substs.type_at(1)) == none_error;\n+                            let should_convert_result_to_option =\n+                                Some(trait_ref.self_ty().skip_binder()) == none_error;\n                             if should_convert_option_to_result {\n                                 err.span_suggestion_verbose(\n                                     span.shrink_to_lo(),"}, {"sha": "c08198ec373b8114c22702872fe81a1e70a2504d", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -23,11 +23,12 @@ use crate::traits::error_reporting::InferCtxtExt;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{FnOnceOutputLangItem, FnOnceTraitLangItem, GeneratorTraitLangItem};\n+use rustc_hir::lang_items::{\n+    DiscriminantTypeLangItem, FnOnceOutputLangItem, FnOnceTraitLangItem, GeneratorTraitLangItem,\n+};\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n@@ -1324,22 +1325,11 @@ fn confirm_discriminant_kind_candidate<'cx, 'tcx>(\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n     let substs = tcx.mk_substs([self_ty.into()].iter());\n \n-    let assoc_items = tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n-    // FIXME: emit an error if the trait definition is wrong\n-    let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n-\n-    let discriminant_ty = match self_ty.kind {\n-        // Use the discriminant type for enums.\n-        ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),\n-        // Default to `i32` for generators.\n-        ty::Generator(..) => tcx.types.i32,\n-        // Use `u8` for all other types.\n-        _ => tcx.types.u8,\n-    };\n+    let discriminant_def_id = tcx.require_lang_item(DiscriminantTypeLangItem, None);\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: discriminant_def_id },\n-        ty: discriminant_ty,\n+        ty: self_ty.discriminant_ty(tcx),\n     };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::bind(predicate))"}, {"sha": "9fa3f6cc3961077ca3c4c667a00ec084065c813c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1322,8 +1322,9 @@ fn settings(root_path: &str, suffix: &str) -> String {\n             .into(),\n         (\"auto-hide-attributes\", \"Auto-hide item attributes.\", true).into(),\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n-        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementations documentation\", true)\n+        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", true)\n             .into(),\n+        (\"auto-collapse-implementors\", \"Auto-hide implementors of a trait\", true).into(),\n         (\"go-to-only-result\", \"Directly go to item in search if there is only one result\", false)\n             .into(),\n         (\"line-numbers\", \"Show line numbers on code examples\", false).into(),"}, {"sha": "336c691ac1c24b8fa2e933a414d1f7b22791c3eb", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -2243,8 +2243,7 @@ function defocusSearchBar() {\n                 relatedDoc = relatedDoc.nextElementSibling;\n             }\n \n-            if ((!relatedDoc && hasClass(docblock, \"docblock\") === false) ||\n-                (pageId && document.getElementById(pageId))) {\n+            if (!relatedDoc && hasClass(docblock, \"docblock\") === false) {\n                 return;\n             }\n \n@@ -2364,6 +2363,7 @@ function defocusSearchBar() {\n     (function() {\n         var toggle = createSimpleToggle(false);\n         var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n+        var hideImplementors = getCurrentValue(\"rustdoc-auto-collapse-implementors\") !== \"false\";\n         var pageId = getPageId();\n \n         var func = function(e) {\n@@ -2393,7 +2393,13 @@ function defocusSearchBar() {\n             if (hasClass(e, \"impl\") &&\n                 (next.getElementsByClassName(\"method\").length > 0 ||\n                  next.getElementsByClassName(\"associatedconstant\").length > 0)) {\n-                insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n+                var newToggle = toggle.cloneNode(true);\n+                insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n+                // In case the option \"auto-collapse implementors\" is not set to false, we collapse\n+                // all implementors.\n+                if (hideImplementors === true && e.parentNode.id === \"implementors-list\") {\n+                    collapseDocs(newToggle, \"hide\", pageId);\n+                }\n             }\n         };\n "}, {"sha": "15a0c76ceeafb4026d6f8f4848994a7b8f41c8b6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -364,6 +364,7 @@ nav.sub {\n #results > table {\n \twidth: 100%;\n \ttable-layout: fixed;\n+\tmargin-bottom: 40px;\n }\n \n .content pre.line-numbers {"}, {"sha": "6daf2885baed0768e010cbd8698521b655da6e7a", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -246,6 +246,7 @@ impl ExitStatus {\n     }\n }\n \n+/// Converts a raw `c_int` to a type-safe `ExitStatus` by wrapping it without copying.\n impl From<c_int> for ExitStatus {\n     fn from(a: c_int) -> ExitStatus {\n         ExitStatus(a as i64)"}, {"sha": "371291b9f76ab0a529bbaaab35646ed66f2febe3", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -479,6 +479,7 @@ impl ExitStatus {\n     }\n }\n \n+/// Converts a raw `c_int` to a type-safe `ExitStatus` by wrapping it without copying.\n impl From<c_int> for ExitStatus {\n     fn from(a: c_int) -> ExitStatus {\n         ExitStatus(a)"}, {"sha": "bbbd5eda7731411ee6a7ddf39aeebe35ac927426", "filename": "src/libstd/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -376,6 +376,7 @@ impl ExitStatus {\n     }\n }\n \n+/// Converts a raw `c_int` to a type-safe `ExitStatus` by wrapping it without copying.\n impl From<c_int> for ExitStatus {\n     fn from(a: c_int) -> ExitStatus {\n         ExitStatus(a)"}, {"sha": "7d6d4775eec8a87b588d94c2603f90ab4bb87915", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -378,6 +378,7 @@ impl ExitStatus {\n     }\n }\n \n+/// Converts a raw `c::DWORD` to a type-safe `ExitStatus` by wrapping it without copying.\n impl From<c::DWORD> for ExitStatus {\n     fn from(u: c::DWORD) -> ExitStatus {\n         ExitStatus(u)"}, {"sha": "195e77022992d567c856e58d58ac571405bf79c3", "filename": "src/test/ui/generator/discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -66,8 +66,8 @@ macro_rules! yield250 {\n }\n \n fn cycle(\n-    gen: impl Generator<()> + Unpin + DiscriminantKind<Discriminant = i32>,\n-    expected_max_discr: i32\n+    gen: impl Generator<()> + Unpin + DiscriminantKind<Discriminant = u32>,\n+    expected_max_discr: u32\n ) {\n     let mut gen = Box::pin(gen);\n     let mut max_discr = 0;"}, {"sha": "97905e2f8fa432532c2cecd8ea9c4a1e435b36cd", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1,11 +1,6 @@\n fn main () {\n     let sr: Vec<(u32, _, _) = vec![];\n     //~^ ERROR expected one of `,` or `>`, found `=`\n-    //~| ERROR expected value, found struct `Vec`\n-    //~| ERROR mismatched types\n-    //~| ERROR invalid left-hand side of assignment\n-    //~| ERROR expected expression, found reserved identifier `_`\n-    //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-    //~^ ERROR no method named `iter` found\n+    //~^ ERROR a value of type `std::vec::Vec<(u32, _, _)>` cannot be built\n }"}, {"sha": "364f8264db463b8b64b5c077523070a3f1856969", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2e29de5e8a2908260d54182638241ff086a26c2/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=e2e29de5e8a2908260d54182638241ff086a26c2", "patch": "@@ -1,55 +1,19 @@\n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/issue-34334.rs:2:23\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                       ^ expected expression\n-\n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/issue-34334.rs:2:26\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                          ^ expected expression\n-\n error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         ---                 ^ expected one of `,` or `>`\n-   |         | |\n-   |         | help: use `=` if you meant to assign\n+   |         --                  ^ expected one of `,` or `>`\n+   |         |\n    |         while parsing the type for `sr`\n \n-error[E0423]: expected value, found struct `Vec`\n-  --> $DIR/issue-34334.rs:2:13\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             ^^^ help: use struct literal syntax instead: `Vec { buf: val, len: val }`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-34334.rs:2:31\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                               ^^^^^^ expected `bool`, found struct `std::vec::Vec`\n-   |\n-   = note: expected type `bool`\n-            found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-34334.rs:2:29\n-   |\n-LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             --------------- ^\n-   |             |\n-   |             cannot assign to this expression\n-\n-error[E0599]: no method named `iter` found for unit type `()` in the current scope\n-  --> $DIR/issue-34334.rs:9:36\n+error[E0277]: a value of type `std::vec::Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n+  --> $DIR/issue-34334.rs:4:87\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                    ^^^^ method not found in `()`\n+   |                                                                                       ^^^^^^^ value of type `std::vec::Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |\n+   = help: the trait `std::iter::FromIterator<()>` is not implemented for `std::vec::Vec<(u32, _, _)>`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0070, E0308, E0423, E0599.\n-For more information about an error, try `rustc --explain E0070`.\n+For more information about this error, try `rustc --explain E0277`."}]}