{"sha": "ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOWM4Yjk5MmMyMTU1ZjNjYjJlMTlkYzBlN2Y2NWNlMTYxNTg4ODk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-29T20:53:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-29T20:53:30Z"}, "message": "Rollup merge of #40814 - abonander:issue_39436, r=jseyfried\n\nRustdoc: memoize `pub use`-reexported macros so they don't appear twice in docs\n\nCloses #39436\n\nPreserves existing behavior for `#[macro_reexport]`. `pub use`'d macros are shown as reexports unless inlined, and also correctly obey `#[doc(hidden)]`.\n\nr? @jseyfried\n\ncc @SergioBenitez", "tree": {"sha": "bfca9f97a434f6a471abae1f50516e2695197b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfca9f97a434f6a471abae1f50516e2695197b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "html_url": "https://github.com/rust-lang/rust/commit/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2", "html_url": "https://github.com/rust-lang/rust/commit/a9dc8ac7ac5dee13675b01ea7db8a93d90d40cf2"}, {"sha": "d8fc5b80b61f662dd0d63d236875ade5a3f1129c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8fc5b80b61f662dd0d63d236875ade5a3f1129c", "html_url": "https://github.com/rust-lang/rust/commit/d8fc5b80b61f662dd0d63d236875ade5a3f1129c"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "c89ec5bbe15bd36a0b14a8fcfc13139c69c2937f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "patch": "@@ -21,7 +21,7 @@ use syntax_pos::Span;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::LoadedMacro;\n use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::FxHashSet;\n@@ -48,6 +48,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n     inlining: bool,\n     /// Is the current module and all of its parents public?\n     inside_public_path: bool,\n+    reexported_macros: FxHashSet<DefId>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -62,6 +63,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n+            reexported_macros: FxHashSet(),\n         }\n     }\n \n@@ -201,9 +203,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         if let Some(exports) = self.cx.tcx.export_map.get(&id) {\n             for export in exports {\n                 if let Def::Macro(def_id, ..) = export.def {\n-                    if def_id.krate == LOCAL_CRATE {\n+                    if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }\n+\n                     let imported_from = self.cx.sess().cstore.original_crate_name(def_id.krate);\n                     let def = match self.cx.sess().cstore.load_macro(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n@@ -217,6 +220,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         unreachable!()\n                     };\n+\n                     om.macros.push(Macro {\n                         def_id: def_id,\n                         attrs: def.attrs.clone().into(),\n@@ -263,6 +267,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             false\n         }\n \n+        debug!(\"maybe_inline_local def: {:?}\", def);\n+\n         let tcx = self.cx.tcx;\n         if def == Def::Err {\n             return false;\n@@ -274,6 +280,17 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let is_no_inline = use_attrs.lists(\"doc\").has_word(\"no_inline\") ||\n                            use_attrs.lists(\"doc\").has_word(\"hidden\");\n \n+        // Memoize the non-inlined `pub use`'d macros so we don't push an extra\n+        // declaration in `visit_mod_contents()`\n+        if !def_did.is_local() {\n+            if let Def::Macro(did, _) = def {\n+                if please_inline { return true }\n+                debug!(\"memoizing non-inlined macro export: {:?}\", def);\n+                self.reexported_macros.insert(did);\n+                return false;\n+            }\n+        }\n+\n         // For cross-crate impl inlining we need to know whether items are\n         // reachable in documentation - a previously nonreachable item can be\n         // made reachable by cross-crate inlining which we're checking here.\n@@ -294,6 +311,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 },\n                 _ => {},\n             }\n+\n             return false\n         }\n "}, {"sha": "70d174a149daab1386d8ffdcc7bef503b8dfa425", "filename": "src/test/rustdoc/auxiliary/pub-use-extern-macros.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/src%2Ftest%2Frustdoc%2Fauxiliary%2Fpub-use-extern-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/src%2Ftest%2Frustdoc%2Fauxiliary%2Fpub-use-extern-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fpub-use-extern-macros.rs?ref=ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![crate_name=\"macros\"]\n+\n+#[macro_export]\n+macro_rules! foo {\n+    () => {};\n+}\n+\n+#[macro_export]\n+macro_rules! bar {\n+    () => {};\n+}\n+\n+#[macro_export]\n+macro_rules! baz {\n+    () => {};\n+}\n+\n+#[macro_export]\n+macro_rules! quux {\n+    () => {};\n+}"}, {"sha": "3f8f6f9544e80d8a4cdba16f6457b3671f8d6900", "filename": "src/test/rustdoc/pub-use-extern-macros.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9c8b992c2155f3cb2e19dc0e7f65ce16158889/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs?ref=ea9c8b992c2155f3cb2e19dc0e7f65ce16158889", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:pub-use-extern-macros.rs\n+\n+#![feature(use_extern_macros, macro_reexport)]\n+\n+// @has pub_use_extern_macros/macro.foo.html\n+// @!has pub_use_extern_macros/index.html 'pub use macros::foo;'\n+#[macro_reexport(foo)] extern crate macros;\n+\n+// @has pub_use_extern_macros/index.html 'pub use macros::bar;'\n+// @!has pub_use_extern_macros/macro.bar.html\n+pub use macros::bar;\n+\n+// @has pub_use_extern_macros/macro.baz.html\n+// @!has pub_use_extern_macros/index.html 'pub use macros::baz;'\n+#[doc(inline)]\n+pub use macros::baz;\n+\n+// @!has pub_use_extern_macros/macro.quux.html\n+// @!has pub_use_extern_macros/index.html 'pub use macros::quux;'\n+#[doc(hidden)]\n+pub use macros::quux;"}]}