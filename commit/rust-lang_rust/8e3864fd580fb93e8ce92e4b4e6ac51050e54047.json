{"sha": "8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzg2NGZkNTgwZmI5M2U4Y2U5MmU0YjRlNmFjNTEwNTBlNTQwNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-14T13:26:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-14T13:26:42Z"}, "message": "Merge #2008\n\n2008: Prepare SourceDatabase API for lazy file loading r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7cc9565b1e81ec069297167e935d062b7dc4bc06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cc9565b1e81ec069297167e935d062b7dc4bc06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpHeSCRBK7hj4Ov3rIwAAdHIIAAdyFKEFLeVA1SMiMpdnLP4h\nw/jqk+Xj5V+4lnVTzSEnhhbQ/r3YnLTAHxo6U0wpxUGHctXPsFZwr2taj72rNyXb\nfO7Go6GLJezwAuEbRhqFaKGsvB2iHXpO8KM3jo2pRyVy0xy52jSnmQhh/OE3Q04c\nhxOLqMsxUx+12IhVBo/IFREfFoo4YyEd2GgpCOSRb9F/Gt3daelBNdjZISKc31UU\nG54Lf6loWcmOZJoKypV7Pq944KiTSryW42l7rPv23t/7MLrAQzdau8J4cNy/WFgO\nWAOXswjhTtVhB0hZblxenxjgi7dsGKy90ktxkBvwGV/9qpWlmtZRS4Y9r3Dw8P0=\n=4xYx\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cc9565b1e81ec069297167e935d062b7dc4bc06\nparent e182825170e346abb84240b84458b49b73783dca\nparent abf2179c0b606730acadc61451739baecfa33a5d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571059602 +0000\ncommitter GitHub <noreply@github.com> 1571059602 +0000\n\nMerge #2008\n\n2008: Prepare SourceDatabase API for lazy file loading r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "html_url": "https://github.com/rust-lang/rust/commit/8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e182825170e346abb84240b84458b49b73783dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e182825170e346abb84240b84458b49b73783dca", "html_url": "https://github.com/rust-lang/rust/commit/e182825170e346abb84240b84458b49b73783dca"}, {"sha": "abf2179c0b606730acadc61451739baecfa33a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf2179c0b606730acadc61451739baecfa33a5d", "html_url": "https://github.com/rust-lang/rust/commit/abf2179c0b606730acadc61451739baecfa33a5d"}], "stats": {"total": 209, "additions": 121, "deletions": 88}, "files": [{"sha": "8bbe5d9e83e0275fc078473e086f7ff453a1104b", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use ra_db::{\n     salsa::{Database, Durability},\n-    FileId, SourceDatabase,\n+    FileId, SourceDatabaseExt,\n };\n use ra_ide_api::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n "}, {"sha": "35c867dce96bf22a573356ce6d2adb7dd8a97147", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -2,7 +2,7 @@\n \n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n-use ra_db::SourceDatabase;\n+use ra_db::SourceDatabaseExt;\n use ra_hir::{AssocItem, Crate, HasBodySource, HasSource, HirDisplay, ModuleDef, Ty, TypeWalk};\n use ra_syntax::AstNode;\n "}, {"sha": "eafa95921cd616626460ba1ca6c0bd0e96c74ceb", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -57,7 +57,7 @@ impl SourceRoot {\n     pub fn walk(&self) -> impl Iterator<Item = FileId> + '_ {\n         self.files.values().copied()\n     }\n-    pub(crate) fn file_by_relative_path(&self, path: &RelativePath) -> Option<FileId> {\n+    pub fn file_by_relative_path(&self, path: &RelativePath) -> Option<FileId> {\n         self.files.get(path).copied()\n     }\n }"}, {"sha": "fc5d6d39654c1d2a578fb90b673efa66dd3d829f", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 60, "deletions": 34, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -64,21 +64,39 @@ pub struct FileRange {\n \n pub const DEFAULT_LRU_CAP: usize = 128;\n \n-/// Database which stores all significant input facts: source code and project\n-/// model. Everything else in rust-analyzer is derived from these queries.\n-#[salsa::query_group(SourceDatabaseStorage)]\n-pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n+pub trait FileLoader {\n     /// Text of the file.\n-    #[salsa::input]\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n-\n-    #[salsa::transparent]\n     fn resolve_relative_path(&self, anchor: FileId, relative_path: &RelativePath)\n         -> Option<FileId>;\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>>;\n+}\n \n+/// Database which stores all significant input facts: source code and project\n+/// model. Everything else in rust-analyzer is derived from these queries.\n+#[salsa::query_group(SourceDatabaseStorage)]\n+pub trait SourceDatabase: CheckCanceled + FileLoader + std::fmt::Debug {\n     // Parses the file into the syntax tree.\n     #[salsa::invoke(parse_query)]\n     fn parse(&self, file_id: FileId) -> Parse<ast::SourceFile>;\n+\n+    /// The crate graph.\n+    #[salsa::input]\n+    fn crate_graph(&self) -> Arc<CrateGraph>;\n+}\n+\n+fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n+    let _p = profile(\"parse_query\");\n+    let text = db.file_text(file_id);\n+    SourceFile::parse(&*text)\n+}\n+\n+/// We don't want to give HIR knowledge of source roots, hence we extract these\n+/// methods into a separate DB.\n+#[salsa::query_group(SourceDatabaseExtStorage)]\n+pub trait SourceDatabaseExt: SourceDatabase {\n+    #[salsa::input]\n+    fn file_text(&self, file_id: FileId) -> Arc<String>;\n     /// Path to a file, relative to the root of its source root.\n     #[salsa::input]\n     fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n@@ -88,40 +106,48 @@ pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n     /// Contents of the source root.\n     #[salsa::input]\n     fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n-    fn source_root_crates(&self, id: SourceRootId) -> Arc<Vec<CrateId>>;\n-    /// The crate graph.\n-    #[salsa::input]\n-    fn crate_graph(&self) -> Arc<CrateGraph>;\n-}\n \n-fn resolve_relative_path(\n-    db: &impl SourceDatabase,\n-    anchor: FileId,\n-    relative_path: &RelativePath,\n-) -> Option<FileId> {\n-    let path = {\n-        let mut path = db.file_relative_path(anchor);\n-        // Workaround for relative path API: turn `lib.rs` into ``.\n-        if !path.pop() {\n-            path = RelativePathBuf::default();\n-        }\n-        path.push(relative_path);\n-        path.normalize()\n-    };\n-    let source_root = db.file_source_root(anchor);\n-    let source_root = db.source_root(source_root);\n-    source_root.file_by_relative_path(&path)\n+    fn source_root_crates(&self, id: SourceRootId) -> Arc<Vec<CrateId>>;\n }\n \n-fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<CrateId>> {\n+fn source_root_crates(\n+    db: &(impl SourceDatabaseExt + SourceDatabase),\n+    id: SourceRootId,\n+) -> Arc<Vec<CrateId>> {\n     let root = db.source_root(id);\n     let graph = db.crate_graph();\n     let res = root.walk().filter_map(|it| graph.crate_id_for_crate_root(it)).collect::<Vec<_>>();\n     Arc::new(res)\n }\n \n-fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n-    let _p = profile(\"parse_query\");\n-    let text = db.file_text(file_id);\n-    SourceFile::parse(&*text)\n+/// Silly workaround for cyclic deps between the traits\n+pub struct FileLoaderDelegate<T>(pub T);\n+\n+impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n+    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        SourceDatabaseExt::file_text(self.0, file_id)\n+    }\n+    fn resolve_relative_path(\n+        &self,\n+        anchor: FileId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        let path = {\n+            let mut path = self.0.file_relative_path(anchor);\n+            // Workaround for relative path API: turn `lib.rs` into ``.\n+            if !path.pop() {\n+                path = RelativePathBuf::default();\n+            }\n+            path.push(relative_path);\n+            path.normalize()\n+        };\n+        let source_root = self.0.file_source_root(anchor);\n+        let source_root = self.0.source_root(source_root);\n+        source_root.file_by_relative_path(&path)\n+    }\n+\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+        let source_root = self.0.file_source_root(file_id);\n+        self.0.source_root_crates(source_root)\n+    }\n }"}, {"sha": "f80d8eb5f1ed991ce36c36e293d25d2c0380045f", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -189,14 +189,14 @@ impl Module {\n             ModuleSource::SourceFile(_) => None,\n         };\n \n-        let source_root_id = db.file_source_root(src.file_id.original_file(db));\n-        db.source_root_crates(source_root_id).iter().map(|&crate_id| Crate { crate_id }).find_map(\n-            |krate| {\n+        db.relevant_crates(src.file_id.original_file(db))\n+            .iter()\n+            .map(|&crate_id| Crate { crate_id })\n+            .find_map(|krate| {\n                 let def_map = db.crate_def_map(krate);\n                 let module_id = def_map.find_module_by_source(src.file_id, decl_id)?;\n                 Some(Module { krate, module_id })\n-            },\n-        )\n+            })\n     }\n }\n "}, {"sha": "499dcafea2ebf4558c61dcdaf4804c1519e27795", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -85,11 +85,7 @@ impl HirFileId {\n                 // Note:\n                 // The final goal we would like to make all parse_macro success,\n                 // such that the following log will not call anyway.\n-                log::warn!(\n-                    \"fail on macro_parse: (reason: {}) {}\",\n-                    err,\n-                    macro_call_id.debug_dump(db)\n-                );\n+                log::warn!(\"fail on macro_parse: (reason: {})\", err,);\n             })\n             .ok()?;\n         match macro_file.macro_file_kind {\n@@ -367,35 +363,6 @@ impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n     }\n }\n \n-impl MacroCallId {\n-    pub fn debug_dump(self, db: &impl AstDatabase) -> String {\n-        let loc = self.loc(db);\n-        let node = loc.ast_id.to_node(db);\n-        let syntax_str = {\n-            let mut res = String::new();\n-            node.syntax().text().for_each_chunk(|chunk| {\n-                if !res.is_empty() {\n-                    res.push(' ')\n-                }\n-                res.push_str(chunk)\n-            });\n-            res\n-        };\n-\n-        // dump the file name\n-        let file_id: HirFileId = self.loc(db).ast_id.file_id();\n-        let original = file_id.original_file(db);\n-        let macro_rules = db.macro_def(loc.def);\n-\n-        format!(\n-            \"macro call [file: {:?}] : {}\\nhas rules: {}\",\n-            db.file_relative_path(original),\n-            syntax_str,\n-            macro_rules.is_some()\n-        )\n-    }\n-}\n-\n /// This exists just for Chalk, because Chalk just has a single `StructId` where\n /// we have different kinds of ADTs, primitive types and special type\n /// constructors like tuples and function pointers."}, {"sha": "0b278deb3ae3e99ce755414f8023a9b739c8ff8f", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -5,10 +5,10 @@ use std::{panic, sync::Arc};\n use parking_lot::Mutex;\n use ra_cfg::CfgOptions;\n use ra_db::{\n-    salsa, CrateGraph, CrateId, Edition, FileId, FilePosition, SourceDatabase, SourceRoot,\n-    SourceRootId,\n+    salsa, CrateGraph, CrateId, Edition, FileId, FileLoader, FileLoaderDelegate, FilePosition,\n+    SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n-use relative_path::RelativePathBuf;\n+use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::FxHashMap;\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n@@ -17,6 +17,7 @@ use crate::{db, debug::HirDebugHelper, diagnostics::DiagnosticSink};\n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n #[salsa::database(\n+    ra_db::SourceDatabaseExtStorage,\n     ra_db::SourceDatabaseStorage,\n     db::InternDatabaseStorage,\n     db::AstDatabaseStorage,\n@@ -34,6 +35,22 @@ pub struct MockDatabase {\n \n impl panic::RefUnwindSafe for MockDatabase {}\n \n+impl FileLoader for MockDatabase {\n+    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        FileLoaderDelegate(self).file_text(file_id)\n+    }\n+    fn resolve_relative_path(\n+        &self,\n+        anchor: FileId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n+    }\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+        FileLoaderDelegate(self).relevant_crates(file_id)\n+    }\n+}\n+\n impl HirDebugHelper for MockDatabase {\n     fn crate_name(&self, krate: CrateId) -> Option<String> {\n         self.crate_names.get(&krate).cloned()"}, {"sha": "af9c39760268c5f5e35f301f7fe1282b4192688f", "filename": "crates/ra_hir/src/nameres/tests/incremental.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use std::sync::Arc;\n \n-use ra_db::SourceDatabase;\n+use ra_db::{SourceDatabase, SourceDatabaseExt};\n \n fn check_def_map_is_not_recomputed(initial: &str, file_change: &str) {\n     let (mut db, pos) = MockDatabase::with_position(initial);"}, {"sha": "050249c0e680e06b3b86ccfcc7938c64e7d3eb54", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -4,7 +4,7 @@ use std::{fmt, sync::Arc, time};\n \n use ra_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, CrateId, FileId, SourceDatabase, SourceRoot, SourceRootId,\n+    CrateGraph, CrateId, FileId, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n use ra_prof::{memory_usage, profile, Bytes};\n use ra_syntax::SourceFile;"}, {"sha": "bbf04bcf702454a67f6ae2b66053435ecee46694", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -4,8 +4,10 @@ use std::sync::Arc;\n \n use ra_db::{\n     salsa::{self, Database, Durability},\n-    Canceled, CheckCanceled, CrateId, FileId, SourceDatabase, SourceRootId,\n+    Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase,\n+    SourceDatabaseExt, SourceRootId,\n };\n+use relative_path::RelativePath;\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -15,6 +17,7 @@ use crate::{\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n+    ra_db::SourceDatabaseExtStorage,\n     LineIndexDatabaseStorage,\n     symbol_index::SymbolsDatabaseStorage,\n     hir::db::InternDatabaseStorage,\n@@ -31,6 +34,22 @@ pub(crate) struct RootDatabase {\n     pub(crate) last_gc_check: crate::wasm_shims::Instant,\n }\n \n+impl FileLoader for RootDatabase {\n+    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        FileLoaderDelegate(self).file_text(file_id)\n+    }\n+    fn resolve_relative_path(\n+        &self,\n+        anchor: FileId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n+    }\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+        FileLoaderDelegate(self).relevant_crates(file_id)\n+    }\n+}\n+\n impl hir::debug::HirDebugHelper for RootDatabase {\n     fn crate_name(&self, krate: CrateId) -> Option<String> {\n         self.debug_data.crate_names.get(&krate).cloned()"}, {"sha": "8743a3a798316d5234d8b912bcc415a88ac1d4d5", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -4,7 +4,7 @@ use std::cell::RefCell;\n \n use hir::diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink};\n use itertools::Itertools;\n-use ra_db::SourceDatabase;\n+use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{\n     algo,"}, {"sha": "f7fd42f652973f35a9f96ba7ceb77956a8e64a77", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -52,7 +52,7 @@ use std::sync::Arc;\n use ra_cfg::CfgOptions;\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n-    CheckCanceled, SourceDatabase,\n+    CheckCanceled, FileLoader, SourceDatabase,\n };\n use ra_syntax::{SourceFile, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n@@ -289,10 +289,14 @@ impl AnalysisHost {\n     pub fn per_query_memory_usage(&mut self) -> Vec<(String, ra_prof::Bytes)> {\n         self.db.per_query_memory_usage()\n     }\n-    pub fn raw_database(&self) -> &(impl hir::db::HirDatabase + salsa::Database) {\n+    pub fn raw_database(\n+        &self,\n+    ) -> &(impl hir::db::HirDatabase + salsa::Database + ra_db::SourceDatabaseExt) {\n         &self.db\n     }\n-    pub fn raw_database_mut(&mut self) -> &mut (impl hir::db::HirDatabase + salsa::Database) {\n+    pub fn raw_database_mut(\n+        &mut self,\n+    ) -> &mut (impl hir::db::HirDatabase + salsa::Database + ra_db::SourceDatabaseExt) {\n         &mut self.db\n     }\n }"}, {"sha": "4247c6d90852edddc72aaafa27cbce3c433fa6c7", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{Either, ModuleSource};\n-use ra_db::SourceDatabase;\n+use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxNode};\n use relative_path::{RelativePath, RelativePathBuf};\n "}, {"sha": "5729eb5b3dc1209049143163251bbbe5cd8f0b9b", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3864fd580fb93e8ce92e4b4e6ac51050e54047/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=8e3864fd580fb93e8ce92e4b4e6ac51050e54047", "patch": "@@ -29,7 +29,7 @@ use std::{\n use fst::{self, Streamer};\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n-    SourceDatabase, SourceRootId,\n+    SourceDatabaseExt, SourceRootId,\n };\n use ra_syntax::{\n     ast::{self, NameOwner},"}]}