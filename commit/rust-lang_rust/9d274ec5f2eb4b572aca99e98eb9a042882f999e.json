{"sha": "9d274ec5f2eb4b572aca99e98eb9a042882f999e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjc0ZWM1ZjJlYjRiNTcyYWNhOTllOThlYjlhMDQyODgyZjk5OWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-06T19:14:09Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-06T19:20:13Z"}, "message": "Re-rename option functions\n\nget_with_default (nee from_maybe) => get_default\nwith_option (nee maybe) => map_default\nwith_option_do (nee may) => iter\n\nAs per discussion of 21be1379d561b6679a8a2ea47dce88f948c5acca", "tree": {"sha": "2435da59e6fa0f76e988083a5de3a372e45eee1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2435da59e6fa0f76e988083a5de3a372e45eee1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d274ec5f2eb4b572aca99e98eb9a042882f999e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d274ec5f2eb4b572aca99e98eb9a042882f999e", "html_url": "https://github.com/rust-lang/rust/commit/9d274ec5f2eb4b572aca99e98eb9a042882f999e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d274ec5f2eb4b572aca99e98eb9a042882f999e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc202ca034e0d657b41b98ad0b28d43fd32f3982", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc202ca034e0d657b41b98ad0b28d43fd32f3982", "html_url": "https://github.com/rust-lang/rust/commit/fc202ca034e0d657b41b98ad0b28d43fd32f3982"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "5ce05b2b50230cfb7716f3dd8f60dc6166f7b6f9", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -1538,7 +1538,7 @@ programs that just can't be typed.\n \n ~~~~\n let n = option::none;\n-# option::with_option_do(n, fn&(&&x:int) {})\n+# option::iter(n, fn&(&&x:int) {})\n ~~~~\n \n If you never do anything else with `n`, the compiler will not be able"}, {"sha": "75f4eb98050c689c374e81a04dd6afcce6390e41", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -40,7 +40,7 @@ fn load_props(testfile: str) -> test_props {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n \n-        option::with_option_do(parse_aux_build(ln)) {|ab|\n+        option::iter(parse_aux_build(ln)) {|ab|\n             aux_builds += [ab];\n         }\n     };"}, {"sha": "1eca3daa18c21b2ee65c4e382f69ea2b85b39c01", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -29,7 +29,7 @@ impl<A> of iterable<A> for [A] {\n \n impl<A> of iterable<A> for option<A> {\n     fn iter(blk: fn(A)) {\n-        option::with_option_do(self, blk)\n+        option::iter(self, blk)\n     }\n }\n "}, {"sha": "a20e985023033ebb417a4461844b0646aaa21ae3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -58,13 +58,13 @@ pure fn get_or_default<T: copy>(opt: option<T>, def: T) -> T {\n     alt opt { some(x) { x } none { def } }\n }\n \n-fn with_option<T, U: copy>(opt: option<T>, def: U, f: fn(T) -> U) -> U {\n+fn map_default<T, U: copy>(opt: option<T>, def: U, f: fn(T) -> U) -> U {\n     #[doc = \"Applies a function to the contained value or returns a default\"];\n \n     alt opt { none { def } some(t) { f(t) } }\n }\n \n-fn with_option_do<T>(opt: option<T>, f: fn(T)) {\n+fn iter<T>(opt: option<T>, f: fn(T)) {\n     #[doc = \"Performs an operation on the contained value or does nothing\"];\n \n     alt opt { none { } some(t) { f(t); } }\n@@ -96,10 +96,10 @@ impl extensions<T:copy> for option<T> {\n     #[doc = \"Returns the contained value or a default\"]\n     fn get_or_default(def: T) -> T { get_or_default(self, def) }\n     #[doc = \"Applies a function to the contained value or returns a default\"]\n-    fn with_option<U: copy>(def: U, f: fn(T) -> U) -> U\n-        { with_option(self, def, f) }\n+    fn map_default<U: copy>(def: U, f: fn(T) -> U) -> U\n+        { map_default(self, def, f) }\n     #[doc = \"Performs an operation on the contained value or does nothing\"]\n-    fn with_option_do(f: fn(T)) { with_option_do(self, f) }\n+    fn iter(f: fn(T)) { iter(self, f) }\n     #[doc = \"\n     Gets the value out of an option\n "}, {"sha": "05aeab4a559b08967441e1e164ed1dce58c038d7", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -767,7 +767,7 @@ mod tests {\n         setenv(\"HOME\", \"\");\n         assert os::homedir() == none;\n \n-        option::with_option_do(oldhome, {|s| setenv(\"HOME\", s)});\n+        option::iter(oldhome, {|s| setenv(\"HOME\", s)});\n     }\n \n     #[test]\n@@ -797,8 +797,8 @@ mod tests {\n         setenv(\"USERPROFILE\", \"/home/PaloAlto\");\n         assert os::homedir() == some(\"/home/MountainView\");\n \n-        option::with_option_do(oldhome, {|s| setenv(\"HOME\", s)});\n-        option::with_option_do(olduserprofile,\n+        option::iter(oldhome, {|s| setenv(\"HOME\", s)});\n+        option::iter(olduserprofile,\n                                {|s| setenv(\"USERPROFILE\", s)});\n     }\n "}, {"sha": "b29d503dff8af1878bf5e2bc8ff6d0642f08ac1a", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -505,7 +505,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n       }\n     };\n \n-    option::with_option_do(opts.notify_chan) {|c|\n+    option::iter(opts.notify_chan) {|c|\n         // FIXME (1087): Would like to do notification in Rust\n         rustrt::rust_task_config_notify(new_task, c);\n     }"}, {"sha": "756a86030db5ab456ed67f2847e622f317b91df5", "filename": "src/librustsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fdiagnostic.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -243,8 +243,8 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n }\n \n fn print_macro_backtrace(cm: codemap::codemap, sp: span) {\n-    option::with_option_do (sp.expn_info) {|ei|\n-        let ss = option::with_option(ei.callie.span, \"\",\n+    option::iter (sp.expn_info) {|ei|\n+        let ss = option::map_default(ei.callie.span, \"\",\n                                bind codemap::span_to_str(_, cm));\n         print_diagnostic(ss, note,\n                          #fmt(\"in expansion of #%s\", ei.callie.name));"}, {"sha": "d307e11ca043b41ba22ae3a4565626aa588c0a68", "filename": "src/librustsyntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fqquote.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -135,7 +135,7 @@ fn expand_ast(ecx: ext_ctxt, _sp: span,\n     -> @ast::expr\n {\n     let mut what = \"expr\";\n-    option::with_option_do(arg) {|arg|\n+    option::iter(arg) {|arg|\n         let args: [@ast::expr] =\n             alt arg.node {\n               ast::expr_vec(elts, _) { elts }"}, {"sha": "fe9c9531d5ea621f9c2a04b3f9ce49978d86ebed", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -793,7 +793,7 @@ fn print_mac(s: ps, m: ast::mac) {\n           some(@{node: ast::expr_vec(_, _), _}) { }\n           _ { word(s.s, \" \"); }\n         }\n-        option::with_option_do(arg, bind print_expr(s, _));\n+        option::iter(arg, bind print_expr(s, _));\n         // FIXME: extension 'body'\n       }\n       ast::mac_embed_type(ty) {"}, {"sha": "6250c9dc7c9fce0594cffa7255886cec4f599d42", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -225,7 +225,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n       }\n       pat_ident(path, inner) {\n           visit_path(path, e, v);\n-          option::with_option_do(inner, {|subpat| v.visit_pat(subpat, e, v)});\n+          option::iter(inner, {|subpat| v.visit_pat(subpat, e, v)});\n       }\n       pat_lit(ex) { v.visit_expr(ex, e, v); }\n       pat_range(e1, e2) { v.visit_expr(e1, e, v); v.visit_expr(e2, e, v); }"}, {"sha": "b2aa4fe312f0833ff86bde853ea563e395306011", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -692,15 +692,15 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n \n     #debug[\"Encoding side tables for id %d\", id];\n \n-    option::with_option_do(tcx.def_map.find(id)) {|def|\n+    option::iter(tcx.def_map.find(id)) {|def|\n         ebml_w.tag(c::tag_table_def) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n                 ast::serialize_def(ebml_w, def)\n             }\n         }\n     }\n-    option::with_option_do((*tcx.node_types).find(id as uint)) {|ty|\n+    option::iter((*tcx.node_types).find(id as uint)) {|ty|\n         ebml_w.tag(c::tag_table_node_type) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -709,7 +709,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::with_option_do(tcx.node_type_substs.find(id)) {|tys|\n+    option::iter(tcx.node_type_substs.find(id)) {|tys|\n         ebml_w.tag(c::tag_table_node_type_subst) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -718,7 +718,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::with_option_do(tcx.freevars.find(id)) {|fv|\n+    option::iter(tcx.freevars.find(id)) {|fv|\n         ebml_w.tag(c::tag_table_freevars) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -730,7 +730,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     }\n \n     let lid = {crate: ast::local_crate, node: id};\n-    option::with_option_do(tcx.tcache.find(lid)) {|tpbt|\n+    option::iter(tcx.tcache.find(lid)) {|tpbt|\n         ebml_w.tag(c::tag_table_tcache) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -739,7 +739,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::with_option_do(tcx.ty_param_bounds.find(id)) {|pbs|\n+    option::iter(tcx.ty_param_bounds.find(id)) {|pbs|\n         ebml_w.tag(c::tag_table_param_bounds) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -753,7 +753,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     // is what we actually use in trans, all modes will have been\n     // resolved.\n     //\n-    //option::with_option_do(tcx.inferred_modes.find(id)) {|m|\n+    //option::iter(tcx.inferred_modes.find(id)) {|m|\n     //    ebml_w.tag(c::tag_table_inferred_modes) {||\n     //        ebml_w.id(id);\n     //        ebml_w.tag(c::tag_table_val) {||\n@@ -762,25 +762,25 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     //    }\n     //}\n \n-    option::with_option_do(ccx.maps.mutbl_map.find(id)) {|_m|\n+    option::iter(ccx.maps.mutbl_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_mutbl) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::with_option_do(ccx.maps.copy_map.find(id)) {|_m|\n+    option::iter(ccx.maps.copy_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_copy) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::with_option_do(ccx.maps.spill_map.find(id)) {|_m|\n+    option::iter(ccx.maps.spill_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_spill) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::with_option_do(ccx.maps.last_uses.find(id)) {|m|\n+    option::iter(ccx.maps.last_uses.find(id)) {|m|\n         ebml_w.tag(c::tag_table_last_use) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -792,7 +792,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     // impl_map is not used except when emitting metadata,\n     // don't need to keep it.\n \n-    option::with_option_do(ccx.maps.method_map.find(id)) {|mo|\n+    option::iter(ccx.maps.method_map.find(id)) {|mo|\n         ebml_w.tag(c::tag_table_method_map) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -801,7 +801,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::with_option_do(ccx.maps.vtable_map.find(id)) {|dr|\n+    option::iter(ccx.maps.vtable_map.find(id)) {|dr|\n         ebml_w.tag(c::tag_table_vtable_map) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||"}, {"sha": "c9a944b32091460cb683658e99d9c75a42ab73b3", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -163,7 +163,7 @@ fn get_dep_hashes(cstore: cstore) -> [str] {\n \n fn get_path(cstore: cstore, d: ast::def_id) -> [str] {\n     // let f = bind str::split_str(_, \"::\");\n-    option::with_option(p(cstore).mod_path_map.find(d), [],\n+    option::map_default(p(cstore).mod_path_map.find(d), [],\n                   {|ds| str::split_str(ds, \"::\")})\n }\n // Local Variables:"}, {"sha": "c40e8d8f609ab43d544c1ebe51985caa9818b55d", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -120,7 +120,7 @@ fn class_member_id(d: ebml::doc, cdata: cmd) -> ast::def_id {\n \n fn field_mutability(d: ebml::doc) -> ast::class_mutability {\n     // Use maybe_get_doc in case it's a method\n-    option::with_option(ebml::maybe_get_doc(d, tag_class_mut),\n+    option::map_default(ebml::maybe_get_doc(d, tag_class_mut),\n                   ast::class_immutable,\n                   {|d|\n                   alt ebml::doc_as_u8(d) as char {"}, {"sha": "26e6c2bc4698f3fb46b11bb17d35e204a213314d", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -24,7 +24,7 @@ fn check_item(sess: session, ast_map: ast_map::map, def_map: resolve::def_map,\n       }\n       item_enum(vs, _) {\n         for vs.each {|var|\n-            option::with_option_do(var.node.disr_expr) {|ex|\n+            option::iter(var.node.disr_expr) {|ex|\n                 v.visit_expr(ex, true, v);\n             }\n         }"}, {"sha": "df274ea06f2868c1d7874b0350accb9a5209671b", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -183,7 +183,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         }\n       }\n       expr_path(_) | expr_field(_, _, _) {\n-        option::with_option_do(cx.tcx.node_type_substs.find(e.id)) {|ts|\n+        option::iter(cx.tcx.node_type_substs.find(e.id)) {|ts|\n             let bounds = alt check e.node {\n               expr_path(_) {\n                 let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n@@ -251,7 +251,7 @@ fn check_stmt(stmt: @stmt, cx: ctx, v: visit::vt<ctx>) {\n fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n     alt aty.node {\n       ty_path(_, id) {\n-        option::with_option_do(cx.tcx.node_type_substs.find(id)) {|ts|\n+        option::iter(cx.tcx.node_type_substs.find(id)) {|ts|\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n             vec::iter2(ts, *bounds) {|ty, bound|"}, {"sha": "b737ba1b02c808ce121988d9e38484624b980d3a", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -133,7 +133,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n             clear_in_current(cx, root_id, false);\n           }\n           _ {\n-            option::with_option_do(def_is_owned_local(cx, my_def)) {|nid|\n+            option::iter(def_is_owned_local(cx, my_def)) {|nid|\n                 clear_in_current(cx, nid, false);\n                 cx.current += [{def: nid,\n                                 uses: cons(var_use(ex.id), @nil)}];\n@@ -188,7 +188,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n                 alt ty::arg_mode(cx.tcx, arg_t) {\n                   by_ref | by_val | by_mutbl_ref {\n                     let def = cx.def_map.get(arg.id);\n-                    option::with_option_do(def_is_owned_local(cx, def)) {|id|\n+                    option::iter(def_is_owned_local(cx, def)) {|id|\n                         clear_in_current(cx, id, false);\n                         cx.spill_map.insert(id, ());\n                     }\n@@ -243,7 +243,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n         alt cx.tcx.freevars.find(id) {\n           some(vars) {\n             for vec::each(*vars) {|v|\n-                option::with_option_do(def_is_owned_local(cx, v.def)) {|nid|\n+                option::iter(def_is_owned_local(cx, v.def)) {|nid|\n                     clear_in_current(cx, nid, false);\n                     cx.current += [{def: nid,\n                                     uses: cons(close_over(id), @nil)}];"}, {"sha": "fc4ea88581eb65a5ad6ec5deca8c8289b869015e", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -1928,7 +1928,7 @@ fn check_exports(e: @env) {\n \n \n     fn maybe_add_reexport(e: @env, export_id: node_id, def: option<def>) {\n-        option::with_option_do(def) {|def|\n+        option::iter(def) {|def|\n             add_export(e, export_id, def_id_of_def(def), true);\n         }\n     }\n@@ -2110,7 +2110,7 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n           ast::view_path_simple(name, pt, id) {\n             let mut found = [];\n             if vec::len(*pt) == 1u {\n-                option::with_option_do(sc) {|sc|\n+                option::iter(sc) {|sc|\n                     list::iter(sc) {|level|\n                         if vec::len(found) == 0u {\n                             for vec::each(*level) {|imp|"}, {"sha": "468d34c001067acca0071ff1d9bacbf5998ea387", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -1657,7 +1657,7 @@ fn trans_if(cx: block, cond: @ast::expr, thn: ast::blk,\n     let then_cx = scope_block(bcx, \"then\");\n     then_cx.block_span = some(thn.span);\n     let else_cx = scope_block(bcx, \"else\");\n-    option::with_option_do(els) {|e| else_cx.block_span = some(e.span); }\n+    option::iter(els) {|e| else_cx.block_span = some(e.span); }\n     CondBr(bcx, cond_val, then_cx.llbb, else_cx.llbb);\n     let then_bcx = trans_block(then_cx, thn, then_dest);\n     let then_bcx = trans_block_cleanups(then_bcx, then_cx);\n@@ -2717,7 +2717,7 @@ fn trans_call_inner(in_cx: block, fn_expr_ty: ty::t, ret_ty: ty::t,\n             Unreachable(bcx);\n         } else if ret_in_loop {\n             bcx = with_cond(bcx, Load(bcx, option::get(ret_flag))) {|bcx|\n-                option::with_option_do(bcx.fcx.loop_ret) {|lret|\n+                option::iter(bcx.fcx.loop_ret) {|lret|\n                     Store(bcx, C_bool(true), lret.flagptr);\n                     Store(bcx, C_bool(false), bcx.fcx.llretptr);\n                 }\n@@ -3674,7 +3674,7 @@ fn cleanup_and_leave(bcx: block, upto: option<BasicBlockRef>,\n     loop {\n         alt cur.kind {\n           block_scope(info) if info.cleanups.len() > 0u {\n-            option::with_option_do(vec::find(info.cleanup_paths,\n+            option::iter(vec::find(info.cleanup_paths,\n                                              {|cp| cp.target == leave})) {|cp|\n                 Br(bcx, cp.dest);\n                 done = true;\n@@ -3786,7 +3786,7 @@ fn alloc_local(cx: block, local: @ast::local) -> block {\n     }\n     let val = alloc_ty(cx, t);\n     if cx.sess().opts.debuginfo {\n-        option::with_option_do(simple_name) {|name|\n+        option::iter(simple_name) {|name|\n             str::as_c_str(name, {|buf|\n                 llvm::LLVMSetValueName(val, buf)\n             });"}, {"sha": "36dfc3eb19c5310c29eff59e6c6f6cfbb07f8d7d", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -325,7 +325,7 @@ fn build_closure(bcx0: block,\n           }\n         }\n     }\n-    option::with_option_do(include_ret_handle) {|flagptr|\n+    option::iter(include_ret_handle) {|flagptr|\n         let our_ret = alt bcx.fcx.loop_ret {\n           some({retptr, _}) { retptr }\n           none { bcx.fcx.llretptr }"}, {"sha": "c089361bda0421e741adc95685e388d50f225fd9", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -280,7 +280,7 @@ fn add_clean_free(cx: block, ptr: ValueRef, shared: bool) {\n // drop glue checks whether it is zero.\n fn revoke_clean(cx: block, val: ValueRef) {\n     in_scope_cx(cx) {|info|\n-        option::with_option_do(vec::position(info.cleanups, {|cu|\n+        option::iter(vec::position(info.cleanups, {|cu|\n             alt cu { clean_temp(v, _, _) if v == val { true } _ { false } }\n         })) {|i|\n             info.cleanups =\n@@ -836,7 +836,7 @@ fn hash_mono_id(&&mi: mono_id) -> uint {\n         h = h * alt param {\n           mono_precise(ty, vts) {\n             let mut h = ty::type_id(ty);\n-            option::with_option_do(vts) {|vts|\n+            option::iter(vts) {|vts|\n                 for vec::each(vts) {|vt| h += hash_mono_id(vt); }\n             }\n             h"}, {"sha": "6e522196343d5b01e11dc7e29f756536d31e401c", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -51,7 +51,7 @@ fn traverse_exports(cx: ctx, vis: [@view_item]) -> bool {\n }\n \n fn traverse_export(cx: ctx, exp_id: node_id) {\n-    option::with_option_do(cx.exp_map.find(exp_id)) {|defs|\n+    option::iter(cx.exp_map.find(exp_id)) {|defs|\n         for vec::each(defs) {|def| traverse_def_id(cx, def.id); }\n     }\n }"}, {"sha": "b220f30a5ac3c125dedf73f47f28ee1f7a1cf560", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -146,7 +146,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n         }\n       }\n       expr_path(_) {\n-        option::with_option_do(cx.ccx.tcx.node_type_substs.find(e.id)) {|ts|\n+        option::iter(cx.ccx.tcx.node_type_substs.find(e.id)) {|ts|\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get(e.id));\n             vec::iter2(type_uses_for(cx.ccx, id, ts.len()), ts) {|uses, subst|\n                 type_needs(cx, uses, subst)\n@@ -215,7 +215,7 @@ fn handle_body(cx: ctx, body: blk) {\n         },\n         visit_block: {|b, cx, v|\n             visit::visit_block(b, cx, v);\n-            option::with_option_do(b.node.expr) {|e|\n+            option::iter(b.node.expr) {|e|\n                 node_type_needs(cx, use_repr, e.id);\n             }\n         },"}, {"sha": "ec7c8354d8c717bf2b881aab27389a2b67ebd7f4", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -338,7 +338,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n \n         let use_cap_item = fn@(&&cap_item: @capture_item) {\n             let d = local_node_id_to_local_def_id(fcx, cap_item.id);\n-            option::with_option_do(d, { |id| use_var(fcx, id) });\n+            option::iter(d, { |id| use_var(fcx, id) });\n         };\n         vec::iter(cap_clause.copies, use_cap_item);\n         vec::iter(cap_clause.moves, use_cap_item);"}, {"sha": "8ec37b9c0cb673174b3c5351a8bd1fe6f71d248f", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -410,7 +410,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n \n         let base_pres = alt vec::last_opt(exs) { none { pres }\n                           some(f) { expr_poststate(fcx.ccx, f) }};\n-        option::with_option_do(maybe_base, {|base|\n+        option::iter(maybe_base, {|base|\n             changed |= find_pre_post_state_expr(fcx, base_pres, base) |\n               set_poststate_ann(fcx.ccx, e.id,\n                                 expr_poststate(fcx.ccx, base))});\n@@ -608,7 +608,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         handle_fail(fcx, pres, post);\n         ret set_prestate_ann(fcx.ccx, e.id, pres) |\n                 set_poststate_ann(fcx.ccx, e.id, post) |\n-                option::with_option(maybe_fail_val, false, {|fail_val|\n+                option::map_default(maybe_fail_val, false, {|fail_val|\n                         find_pre_post_state_expr(fcx, pres, fail_val)});\n       }\n       expr_check(_, p) {"}, {"sha": "094d2f90d5d9a2ff019d673bf43528aad97fbe81", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -411,7 +411,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            region_map: @middle::region::region_map) -> ctxt {\n     let interner = map::hashmap({|&&k: intern_key|\n         hash_type_structure(k.struct) +\n-            option::with_option(k.o_def_id, 0u, ast_util::hash_def_id)\n+            option::map_default(k.o_def_id, 0u, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n     @{interner: interner,\n       mut next_id: 0u,"}, {"sha": "c7ccb9e03dfa6136d218c1839c13b8bc0056d2d1", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -3168,7 +3168,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_rec(fields, base) {\n-        option::with_option_do(base) {|b| check_expr(fcx, b); }\n+        option::iter(base) {|b| check_expr(fcx, b); }\n         let fields_t = vec::map(fields, {|f|\n             bot |= check_expr(fcx, f.node.expr);\n             let expr_t = fcx.expr_ty(f.node.expr);"}, {"sha": "3c2a11b051643dc8698ecfc313fc4a252076ec15", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -132,7 +132,7 @@ fn config_from_opts(\n     let result = result::chain(result) {|config|\n         let output_format = getopts::opt_maybe_str(\n             match, opt_output_format());\n-        option::with_option(output_format, result::ok(config))\n+        option::map_default(output_format, result::ok(config))\n            {|output_format|\n             result::chain(parse_output_format(output_format)) {|output_format|\n                 result::ok({\n@@ -144,7 +144,7 @@ fn config_from_opts(\n     };\n     let result = result::chain(result) {|config|\n         let output_style = getopts::opt_maybe_str(match, opt_output_style());\n-        option::with_option(output_style, result::ok(config))\n+        option::map_default(output_style, result::ok(config))\n           {|output_style|\n             result::chain(parse_output_style(output_style)) {|output_style|\n                 result::ok({"}, {"sha": "d4ed8c336efe11e21ddc02cd9df5a0dec0394b5e", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d274ec5f2eb4b572aca99e98eb9a042882f999e/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=9d274ec5f2eb4b572aca99e98eb9a042882f999e", "patch": "@@ -195,7 +195,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n             }\n \n             if reexportdocs.len() > 0u {\n-                option::with_option_do(path_map.find(modpath)) {|docs|\n+                option::iter(path_map.find(modpath)) {|docs|\n                     reexportdocs = docs + vec::filter(reexportdocs, {|x|\n                         !vec::contains(docs, x)\n                     });"}]}