{"sha": "f1359c61d302057d82c5276aba86fec1fe326bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzU5YzYxZDMwMjA1N2Q4MmM1Mjc2YWJhODZmZWMxZmUzMjZiYjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-23T13:54:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-24T08:47:46Z"}, "message": "expand: Fully preserve visibilities on unnamed fields with attributes", "tree": {"sha": "7060c8ea19e8577ed82934d83db668d7de93cf69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7060c8ea19e8577ed82934d83db668d7de93cf69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1359c61d302057d82c5276aba86fec1fe326bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1359c61d302057d82c5276aba86fec1fe326bb8", "html_url": "https://github.com/rust-lang/rust/commit/f1359c61d302057d82c5276aba86fec1fe326bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1359c61d302057d82c5276aba86fec1fe326bb8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37bb0c7fa68700b7637c137c8b31cdc2e6b49b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/37bb0c7fa68700b7637c137c8b31cdc2e6b49b5e", "html_url": "https://github.com/rust-lang/rust/commit/37bb0c7fa68700b7637c137c8b31cdc2e6b49b5e"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "6694ddc53d4f1c377e29fab4b2cac2a2f6af3f6a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f1359c61d302057d82c5276aba86fec1fe326bb8", "patch": "@@ -746,6 +746,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n                 // Record field names for error reporting.\n                 let field_names = struct_def.fields().iter().map(|field| {\n+                    // NOTE: The field may be an expansion placeholder, but expansion sets correct\n+                    // visibilities for unnamed field placeholders specifically, so the constructor\n+                    // visibility should still be determined correctly.\n                     let field_vis = self.resolve_visibility(&field.vis);\n                     if ctor_vis.is_at_least(field_vis, &*self.r) {\n                         ctor_vis = field_vis;"}, {"sha": "4f05b0147bff41ae8db1ae4918a559c3bb83d33b", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=f1359c61d302057d82c5276aba86fec1fe326bb8", "patch": "@@ -86,7 +86,7 @@ macro_rules! ast_fragments {\n                         // mention some macro variable from those arguments even if it's not used.\n                         #[cfg_attr(bootstrap, allow(unused_macros))]\n                         macro _repeating($flat_map_ast_elt) {}\n-                        placeholder(AstFragmentKind::$Kind, *id).$make_ast()\n+                        placeholder(AstFragmentKind::$Kind, *id, None).$make_ast()\n                     })),)?)*\n                     _ => panic!(\"unexpected AST fragment kind\")\n                 }\n@@ -275,6 +275,23 @@ pub enum InvocationKind {\n     },\n }\n \n+impl InvocationKind {\n+    fn placeholder_visibility(&self) -> Option<ast::Visibility> {\n+        // HACK: For unnamed fields placeholders should have the same visibility as the actual\n+        // fields because for tuple structs/variants resolve determines visibilities of their\n+        // constructor using these field visibilities before attributes on them are are expanded.\n+        // The assumption is that the attribute expansion cannot change field visibilities,\n+        // and it holds because only inert attributes are supported in this position.\n+        match self {\n+            InvocationKind::Attr { item: Annotatable::StructField(field), .. } |\n+            InvocationKind::Derive { item: Annotatable::StructField(field), .. } |\n+            InvocationKind::DeriveContainer { item: Annotatable::StructField(field), .. }\n+                if field.ident.is_none() => Some(field.vis.clone()),\n+            _ => None,\n+        }\n+    }\n+}\n+\n impl Invocation {\n     pub fn span(&self) -> Span {\n         match &self.kind {\n@@ -931,6 +948,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             _ => None,\n         };\n         let expn_id = ExpnId::fresh(expn_data);\n+        let vis = kind.placeholder_visibility();\n         self.invocations.push(Invocation {\n             kind,\n             fragment_kind,\n@@ -940,7 +958,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 ..self.cx.current_expansion.clone()\n             },\n         });\n-        placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id))\n+        placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id), vis)\n     }\n \n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {"}, {"sha": "6cbe8c132457c2a5df9c65990b17cd7c8daff0a3", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=f1359c61d302057d82c5276aba86fec1fe326bb8", "patch": "@@ -12,7 +12,8 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n+pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visibility>)\n+                   -> AstFragment {\n     fn mac_placeholder() -> ast::Mac {\n         ast::Mac {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n@@ -26,7 +27,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     let ident = ast::Ident::invalid();\n     let attrs = Vec::new();\n     let generics = ast::Generics::default();\n-    let vis = dummy_spanned(ast::VisibilityKind::Inherited);\n+    let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n     let span = DUMMY_SP;\n     let expr_placeholder = || P(ast::Expr {\n         id, span,"}, {"sha": "d12155f6d81fdc6b6dcb2aea438278246f849999", "filename": "src/test/ui/attributes/unnamed-field-attributes-vis.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1359c61d302057d82c5276aba86fec1fe326bb8/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes-vis.rs?ref=f1359c61d302057d82c5276aba86fec1fe326bb8", "patch": "@@ -0,0 +1,11 @@\n+// Unnamed fields don't lose their visibility due to non-builtin attributes on them.\n+\n+// check-pass\n+\n+mod m {\n+    pub struct S(#[rustfmt::skip] pub u8);\n+}\n+\n+fn main() {\n+    m::S(0);\n+}"}]}