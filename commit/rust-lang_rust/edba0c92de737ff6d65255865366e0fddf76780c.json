{"sha": "edba0c92de737ff6d65255865366e0fddf76780c", "node_id": "C_kwDOAAsO6NoAKGVkYmEwYzkyZGU3MzdmZjZkNjUyNTU4NjUzNjZlMGZkZGY3Njc4MGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-04T02:10:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-04T02:10:31Z"}, "message": "Address nits, rename enclosing_scope => parent_label", "tree": {"sha": "30a0a515d64c0c82dbd9071106aed891b9b91e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a0a515d64c0c82dbd9071106aed891b9b91e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edba0c92de737ff6d65255865366e0fddf76780c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edba0c92de737ff6d65255865366e0fddf76780c", "html_url": "https://github.com/rust-lang/rust/commit/edba0c92de737ff6d65255865366e0fddf76780c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edba0c92de737ff6d65255865366e0fddf76780c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c23fe81764281c35b58dcf578a494076bf2325c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c23fe81764281c35b58dcf578a494076bf2325c0", "html_url": "https://github.com/rust-lang/rust/commit/c23fe81764281c35b58dcf578a494076bf2325c0"}], "stats": {"total": 206, "additions": 141, "deletions": 65}, "files": [{"sha": "1da8c69490bd688d3d5ca8afc12d445e383390ff", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edba0c92de737ff6d65255865366e0fddf76780c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edba0c92de737ff6d65255865366e0fddf76780c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=edba0c92de737ff6d65255865366e0fddf76780c", "patch": "@@ -661,7 +661,6 @@ symbols! {\n         emit_struct,\n         emit_struct_field,\n         enable,\n-        enclosing_scope,\n         encode,\n         end,\n         env,\n@@ -1063,6 +1062,7 @@ symbols! {\n         panic_unwind,\n         panicking,\n         param_attrs,\n+        parent_label,\n         partial_cmp,\n         partial_ord,\n         passes,"}, {"sha": "6ebadb42d9efaae436e670fabe028646032e55ab", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edba0c92de737ff6d65255865366e0fddf76780c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edba0c92de737ff6d65255865366e0fddf76780c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=edba0c92de737ff6d65255865366e0fddf76780c", "patch": "@@ -349,7 +349,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             message,\n                             label,\n                             note,\n-                            enclosing_scope,\n+                            parent_label,\n                             append_const_msg,\n                         } = self.on_unimplemented_note(trait_ref, &obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n@@ -515,7 +515,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n                             err.note(s.as_str());\n                         }\n-                        if let Some(ref s) = enclosing_scope {\n+                        if let Some(ref s) = parent_label {\n                             let body = tcx\n                                 .hir()\n                                 .opt_local_def_id(obligation.cause.body_id)\n@@ -524,11 +524,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         hir_id: obligation.cause.body_id,\n                                     })\n                                 });\n-\n-                            let enclosing_scope_span =\n-                                tcx.hir().span(tcx.hir().local_def_id_to_hir_id(body));\n-\n-                            err.span_label(enclosing_scope_span, s);\n+                            err.span_label(tcx.def_span(body), s);\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);"}, {"sha": "4a4f34b768059355ed43e33e7acf594c3e243f96", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/edba0c92de737ff6d65255865366e0fddf76780c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edba0c92de737ff6d65255865366e0fddf76780c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=edba0c92de737ff6d65255865366e0fddf76780c", "patch": "@@ -22,7 +22,7 @@ pub struct OnUnimplementedDirective {\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n     pub note: Option<OnUnimplementedFormatString>,\n-    pub enclosing_scope: Option<OnUnimplementedFormatString>,\n+    pub parent_label: Option<OnUnimplementedFormatString>,\n     pub append_const_msg: Option<Option<Symbol>>,\n }\n \n@@ -31,7 +31,7 @@ pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n     pub note: Option<String>,\n-    pub enclosing_scope: Option<String>,\n+    pub parent_label: Option<String>,\n     /// Append a message for `~const Trait` errors. `None` means not requested and\n     /// should fallback to a generic message, `Some(None)` suggests using the default\n     /// appended message, `Some(Some(s))` suggests use the `s` message instead of the\n@@ -74,7 +74,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n-        let mut enclosing_scope = None;\n+        let mut parent_label = None;\n         let mut subcommands = vec![];\n         let mut append_const_msg = None;\n \n@@ -94,9 +94,9 @@ impl<'tcx> OnUnimplementedDirective {\n                     note = parse_value(note_)?;\n                     continue;\n                 }\n-            } else if item.has_name(sym::enclosing_scope) && enclosing_scope.is_none() {\n-                if let Some(enclosing_scope_) = item.value_str() {\n-                    enclosing_scope = parse_value(enclosing_scope_)?;\n+            } else if item.has_name(sym::parent_label) && parent_label.is_none() {\n+                if let Some(parent_label_) = item.value_str() {\n+                    parent_label = parse_value(parent_label_)?;\n                     continue;\n                 }\n             } else if item.has_name(sym::on)\n@@ -135,7 +135,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 message,\n                 label,\n                 note,\n-                enclosing_scope,\n+                parent_label,\n                 append_const_msg,\n             })\n         }\n@@ -160,7 +160,7 @@ impl<'tcx> OnUnimplementedDirective {\n                     attr.span,\n                 )?),\n                 note: None,\n-                enclosing_scope: None,\n+                parent_label: None,\n                 append_const_msg: None,\n             }))\n         } else {\n@@ -181,7 +181,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n-        let mut enclosing_scope = None;\n+        let mut parent_label = None;\n         let mut append_const_msg = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n@@ -217,8 +217,8 @@ impl<'tcx> OnUnimplementedDirective {\n                 note = Some(note_.clone());\n             }\n \n-            if let Some(ref enclosing_scope_) = command.enclosing_scope {\n-                enclosing_scope = Some(enclosing_scope_.clone());\n+            if let Some(ref parent_label_) = command.parent_label {\n+                parent_label = Some(parent_label_.clone());\n             }\n \n             append_const_msg = command.append_const_msg;\n@@ -228,7 +228,7 @@ impl<'tcx> OnUnimplementedDirective {\n             label: label.map(|l| l.format(tcx, trait_ref, &options_map)),\n             message: message.map(|m| m.format(tcx, trait_ref, &options_map)),\n             note: note.map(|n| n.format(tcx, trait_ref, &options_map)),\n-            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options_map)),\n+            parent_label: parent_label.map(|e_s| e_s.format(tcx, trait_ref, &options_map)),\n             append_const_msg,\n         }\n     }"}, {"sha": "10f041344095c2f14614f914260b9ebe6a5160eb", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/edba0c92de737ff6d65255865366e0fddf76780c/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edba0c92de737ff6d65255865366e0fddf76780c/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=edba0c92de737ff6d65255865366e0fddf76780c", "patch": "@@ -222,7 +222,87 @@ pub trait Try: FromResidual {\n /// Every `Try` type needs to be recreatable from its own associated\n /// `Residual` type, but can also have additional `FromResidual` implementations\n /// to support interconversion with other `Try` types.\n-#[rustc_on_unimplemented(\n+#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+            R = \"std::option::Option<std::convert::Infallible>\"\n+        ),\n+        message = \"the `?` operator can only be used on `Result`s, not `Option`s, \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\n+        parent_label = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+        ),\n+        // There's a special error message in the trait selection code for\n+        // `From` in `?`, so this is not shown for result-in-result errors,\n+        // and thus it can be phrased more strongly than `ControlFlow`'s.\n+        message = \"the `?` operator can only be used on `Result`s \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+            R = \"std::result::Result<T, E>\",\n+        ),\n+        message = \"the `?` operator can only be used on `Option`s, not `Result`s, \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"use `.ok()?` if you want to discard the `{R}` error information\",\n+        parent_label = \"this function returns an `Option`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+        ),\n+        // `Option`-in-`Option` always works, as there's only one possible\n+        // residual, so this can also be phrased strongly.\n+        message = \"the `?` operator can only be used on `Option`s \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns an `Option`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+            R = \"std::ops::ControlFlow<B, C>\",\n+        ),\n+        message = \"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n+            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns a `ControlFlow`\",\n+        note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+            // `R` is not a `ControlFlow`, as that case was matched previously\n+        ),\n+        message = \"the `?` operator can only be used on `ControlFlow`s \\\n+            in {ItemContext} that returns `ControlFlow`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns a `ControlFlow`\",\n+    ),\n+    on(\n+        all(from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be used in {ItemContext} \\\n+                    that returns `Result` or `Option` \\\n+                    (or another type that implements `{FromResidual}`)\",\n+        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+        parent_label = \"this function should return `Result` or `Option` to accept `?`\"\n+    ),\n+))]\n+#[cfg_attr(bootstrap, rustc_on_unimplemented(\n     on(\n         all(\n             from_desugaring = \"QuestionMark\",\n@@ -301,7 +381,7 @@ pub trait Try: FromResidual {\n         label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n         enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n     ),\n-)]\n+))]\n #[rustc_diagnostic_item = \"FromResidual\"]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub trait FromResidual<R = <Self as Try>::Residual> {"}, {"sha": "881bff63f5f63974cebc462cf46fc7e6eafae95e", "filename": "src/test/ui/on-unimplemented/enclosing-scope.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1,27 +0,0 @@\n-// Test scope annotations from `enclosing_scope` parameter\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_on_unimplemented(enclosing_scope=\"in this scope\")]\n-trait Trait{}\n-\n-struct Foo;\n-\n-fn f<T: Trait>(x: T) {}\n-\n-fn main() {\n-    let x = || {\n-        f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-        let y = || {\n-            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-        };\n-    };\n-\n-    {\n-        {\n-            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-        }\n-    }\n-\n-    f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-}"}, {"sha": "b65f6496831ea03d565fed1106da685adcd1fed5", "filename": "src/test/ui/on-unimplemented/parent-label.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/edba0c92de737ff6d65255865366e0fddf76780c/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edba0c92de737ff6d65255865366e0fddf76780c/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.rs?ref=edba0c92de737ff6d65255865366e0fddf76780c", "patch": "@@ -0,0 +1,27 @@\n+// Test scope annotations from `parent_label` parameter\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_on_unimplemented(parent_label = \"in this scope\")]\n+trait Trait {}\n+\n+struct Foo;\n+\n+fn f<T: Trait>(x: T) {}\n+\n+fn main() {\n+    let x = || {\n+        f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        let y = || {\n+            f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        };\n+    };\n+\n+    {\n+        {\n+            f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        }\n+    }\n+\n+    f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+}"}, {"sha": "8cd7412fd9d3d923743f3d938d1d72536d0d737f", "filename": "src/test/ui/on-unimplemented/parent-label.stderr", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/edba0c92de737ff6d65255865366e0fddf76780c/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edba0c92de737ff6d65255865366e0fddf76780c/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.stderr?ref=edba0c92de737ff6d65255865366e0fddf76780c", "patch": "@@ -1,65 +1,65 @@\n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:14:11\n+  --> $DIR/parent-label.rs:14:11\n    |\n LL |     let x = || {\n    |             -- in this scope\n-LL |         f(Foo{});\n-   |         - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL |         f(Foo {});\n+   |         - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n    |         |\n    |         required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n+  --> $DIR/parent-label.rs:10:9\n    |\n LL | fn f<T: Trait>(x: T) {}\n    |         ^^^^^ required by this bound in `f`\n \n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:16:15\n+  --> $DIR/parent-label.rs:16:15\n    |\n LL |         let y = || {\n    |                 -- in this scope\n-LL |             f(Foo{});\n-   |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL |             f(Foo {});\n+   |             - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n    |             |\n    |             required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n+  --> $DIR/parent-label.rs:10:9\n    |\n LL | fn f<T: Trait>(x: T) {}\n    |         ^^^^^ required by this bound in `f`\n \n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:22:15\n+  --> $DIR/parent-label.rs:22:15\n    |\n LL | fn main() {\n    | --------- in this scope\n ...\n-LL |             f(Foo{});\n-   |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL |             f(Foo {});\n+   |             - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n    |             |\n    |             required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n+  --> $DIR/parent-label.rs:10:9\n    |\n LL | fn f<T: Trait>(x: T) {}\n    |         ^^^^^ required by this bound in `f`\n \n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:26:7\n+  --> $DIR/parent-label.rs:26:7\n    |\n LL | fn main() {\n    | --------- in this scope\n ...\n-LL |     f(Foo{});\n-   |     - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL |     f(Foo {});\n+   |     - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n+  --> $DIR/parent-label.rs:10:9\n    |\n LL | fn f<T: Trait>(x: T) {}\n    |         ^^^^^ required by this bound in `f`", "previous_filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr"}]}