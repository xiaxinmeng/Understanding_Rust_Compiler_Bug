{"sha": "7d43997053f940d3aa656a5054995a08edf5f3d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDM5OTcwNTNmOTQwZDNhYTY1NmE1MDU0OTk1YTA4ZWRmNWYzZDQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-29T17:54:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T17:54:01Z"}, "message": "Rollup merge of #69572 - matthiaskrgr:try_err_and_iter_on_ref, r=Centril\n\nuse .iter() instead of .into_iter() on references", "tree": {"sha": "68b172c44e427de40e84a099af257dffe49d9a68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68b172c44e427de40e84a099af257dffe49d9a68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d43997053f940d3aa656a5054995a08edf5f3d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWqU5CRBK7hj4Ov3rIwAAdHIIAKUMFur/yB/lKzlE49pfNn2F\nGbfC8uivpxdaAHd/snkDprEEPRnEZ+9IQuXaGQJTwnXpM624VRj8mVXER2p4T8u9\nEZPrwYPRJkcQ6RDieRX30RIZTB+kIX/cnWsBOZXMCpuYU/fUaouO2FAdHSpOai3j\ncos5SlK2MZPiUtT7BsJXt3mb/7tGNW5LLFTUzCodwQsCh4U1x1txIDPoGccSxjc1\nIcCt6vLduLvcxA3o7jJhKploJi7Mlsa3lJrmMS2OzRX6uwvsfKscw//TMQX6QEGi\n94UYvfM2rVu2llDWzqrKW1Q7eXc7O2ryrG1MawGsTWsQU1It3mZEl1F9EokNcZM=\n=EvMG\n-----END PGP SIGNATURE-----\n", "payload": "tree 68b172c44e427de40e84a099af257dffe49d9a68\nparent b22631bfafe0a6dbe038b180bf838847b39385ea\nparent de7c40c1686c1c4be74f14493c4b12955e9ed5f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582998841 +0100\ncommitter GitHub <noreply@github.com> 1582998841 +0100\n\nRollup merge of #69572 - matthiaskrgr:try_err_and_iter_on_ref, r=Centril\n\nuse .iter() instead of .into_iter() on references\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d43997053f940d3aa656a5054995a08edf5f3d4", "html_url": "https://github.com/rust-lang/rust/commit/7d43997053f940d3aa656a5054995a08edf5f3d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d43997053f940d3aa656a5054995a08edf5f3d4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22631bfafe0a6dbe038b180bf838847b39385ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22631bfafe0a6dbe038b180bf838847b39385ea", "html_url": "https://github.com/rust-lang/rust/commit/b22631bfafe0a6dbe038b180bf838847b39385ea"}, {"sha": "de7c40c1686c1c4be74f14493c4b12955e9ed5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7c40c1686c1c4be74f14493c4b12955e9ed5f2", "html_url": "https://github.com/rust-lang/rust/commit/de7c40c1686c1c4be74f14493c4b12955e9ed5f2"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "f37a94321927b7fa0724c063d1a941547b2344b6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -2291,13 +2291,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        let kinds: Vec<_> = ts.into_iter().map(|&t| GenericArg::from(t)).collect();\n+        let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();\n         self.mk_ty(Tuple(self.intern_substs(&kinds)))\n     }\n \n     pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|ts| {\n-            let kinds: Vec<_> = ts.into_iter().map(|&t| GenericArg::from(t)).collect();\n+            let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();\n             self.mk_ty(Tuple(self.intern_substs(&kinds)))\n         })\n     }"}, {"sha": "8c1675ad29dff6c798c37743774cb8c49456e90e", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -149,7 +149,7 @@ impl<'a> CollectProcMacros<'a> {\n                         .span_err(attr.span(), \"attribute must be of form: `attributes(foo, bar)`\");\n                     &[]\n                 })\n-                .into_iter()\n+                .iter()\n                 .filter_map(|attr| {\n                     let attr = match attr.meta_item() {\n                         Some(meta_item) => meta_item,"}, {"sha": "77f1c6bf28109fcc8675330f423d5a4b821f0fe7", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -630,7 +630,7 @@ pub fn make_query_region_constraints<'tcx>(\n     assert!(givens.is_empty());\n \n     let outlives: Vec<_> = constraints\n-        .into_iter()\n+        .iter()\n         .map(|(k, _)| match *k {\n             // Swap regions because we are going from sub (<=) to outlives\n             // (>=)."}, {"sha": "24741462f431c3b64e9c73279c840bfd579dab84", "filename": "src/librustc_infer/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -237,10 +237,8 @@ impl<'tcx> OnUnimplementedDirective {\n             }\n         }\n \n-        let options: FxHashMap<Symbol, String> = options\n-            .into_iter()\n-            .filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned())))\n-            .collect();\n+        let options: FxHashMap<Symbol, String> =\n+            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n         OnUnimplementedNote {\n             label: label.map(|l| l.format(tcx, trait_ref, &options)),\n             message: message.map(|m| m.format(tcx, trait_ref, &options)),"}, {"sha": "1b92c126a15c2a4e4be17bd0b83961fa08ea3ec6", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -2411,7 +2411,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         types\n             .skip_binder()\n-            .into_iter()\n+            .iter()\n             .flat_map(|ty| {\n                 // binder moved -\\\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/"}, {"sha": "0282454edcf10f6325ae1bc9b0e61177d9a0e372", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -739,7 +739,7 @@ impl EarlyLintPass for DeprecatedAttr {\n }\n \n fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {\n-    let mut attrs = attrs.into_iter().peekable();\n+    let mut attrs = attrs.iter().peekable();\n \n     // Accumulate a single span for sugared doc comments.\n     let mut sugared_span: Option<Span> = None;"}, {"sha": "9451fee499d36df2efe292fd7029192a3777b093", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -519,7 +519,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn add_move_error_details(&self, err: &mut DiagnosticBuilder<'a>, binds_to: &[Local]) {\n-        for (j, local) in binds_to.into_iter().enumerate() {\n+        for (j, local) in binds_to.iter().enumerate() {\n             let bind_to = &self.body.local_decls[*local];\n             let binding_span = bind_to.source_info.span;\n "}, {"sha": "d433a4a48d311d8c5b689c2dd92a8ab685d1d28e", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -419,7 +419,7 @@ impl RustcMirAttrs {\n         let mut ret = RustcMirAttrs::default();\n \n         let rustc_mir_attrs = attrs\n-            .into_iter()\n+            .iter()\n             .filter(|attr| attr.check_name(sym::rustc_mir))\n             .flat_map(|attr| attr.meta_item_list().into_iter().flat_map(|v| v.into_iter()));\n "}, {"sha": "a7c0efd63b1a80330edaaeb563d7d0b5c6e99e0c", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n             .local_map\n             .get(&place.local)\n             .into_iter()\n-            .flat_map(|bs| bs.into_iter())\n+            .flat_map(|bs| bs.iter())\n             .copied();\n \n         // If the borrowed place is a local with no projections, all other borrows of this"}, {"sha": "a035dff9f5a04568f3968e8828ba32006a609417", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -509,7 +509,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         ops: &[mir::Operand<'tcx>],\n     ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {\n-        ops.into_iter().map(|op| self.eval_operand(op, None)).collect()\n+        ops.iter().map(|op| self.eval_operand(op, None)).collect()\n     }\n \n     // Used when the miri-engine runs into a constant and for extracting information from constants"}, {"sha": "f6a93363dc109089dff3e27f5e8d9bef9563f56b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -401,10 +401,8 @@ fn record_accesses<'tcx>(\n     // We collect this into a `SmallVec` to avoid calling `is_inlining_candidate` in the lock.\n     // FIXME: Call `is_inlining_candidate` when pushing to `neighbors` in `collect_items_rec`\n     // instead to avoid creating this `SmallVec`.\n-    let accesses: SmallVec<[_; 128]> = callees\n-        .into_iter()\n-        .map(|mono_item| (*mono_item, is_inlining_candidate(mono_item)))\n-        .collect();\n+    let accesses: SmallVec<[_; 128]> =\n+        callees.iter().map(|mono_item| (*mono_item, is_inlining_candidate(mono_item))).collect();\n \n     inlining_map.lock_mut().record_accesses(caller, &accesses);\n }"}, {"sha": "4dcbcdcbae4a65585fd2059bf948d67bbf3ab65f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -644,7 +644,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n         }\n     }\n \n-    let mut unsafe_blocks: Vec<_> = unsafe_blocks.into_iter().collect();\n+    let mut unsafe_blocks: Vec<_> = unsafe_blocks.iter().collect();\n     unsafe_blocks.sort_by_cached_key(|(hir_id, _)| tcx.hir().hir_to_node_id(*hir_id));\n     let used_unsafe: FxHashSet<_> =\n         unsafe_blocks.iter().flat_map(|&&(id, used)| used.then_some(id)).collect();"}, {"sha": "bbaa66f5954cbdbaee1c17a1fe6575bbf8ff31bd", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n                 &mut body.basic_blocks_mut()[bb].terminator_mut().kind\n             {\n                 let vals = &*values;\n-                let zipped = vals.iter().zip(targets.into_iter());\n+                let zipped = vals.iter().zip(targets.iter());\n \n                 let mut matched_values = Vec::with_capacity(allowed_variants.len());\n                 let mut matched_targets = Vec::with_capacity(allowed_variants.len() + 1);"}, {"sha": "b18d4070c24ca0b9fb401213f2aabdbab3a7d3a2", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -1426,7 +1426,7 @@ crate fn show_candidates(\n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n     let mut path_strings: Vec<_> =\n-        candidates.into_iter().map(|c| path_names_to_string(&c.path)).collect();\n+        candidates.iter().map(|c| path_names_to_string(&c.path)).collect();\n     path_strings.sort();\n     path_strings.dedup();\n "}, {"sha": "ad439e3950e13da9619b0cbcf1686d7fe7d32b1a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -430,7 +430,7 @@ impl Sig for ast::Item {\n                 sig.text.push_str(\" = \");\n                 let ty = match ty {\n                     Some(ty) => ty.make(offset + sig.text.len(), id, scx)?,\n-                    None => Err(\"Ty\")?,\n+                    None => return Err(\"Ty\"),\n                 };\n                 sig.text.push_str(&ty.text);\n                 sig.text.push(';');"}, {"sha": "320039b7c911a519c002e6a49bf00be7c1058348", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -395,7 +395,7 @@ impl SourceMap {\n                         .unwrap_or_else(|x| x);\n                     let special_chars = end_width_idx - start_width_idx;\n                     let non_narrow: usize = f.non_narrow_chars[start_width_idx..end_width_idx]\n-                        .into_iter()\n+                        .iter()\n                         .map(|x| x.width())\n                         .sum();\n                     col.0 - special_chars + non_narrow\n@@ -413,7 +413,7 @@ impl SourceMap {\n                         .binary_search_by_key(&pos, |x| x.pos())\n                         .unwrap_or_else(|x| x);\n                     let non_narrow: usize =\n-                        f.non_narrow_chars[0..end_width_idx].into_iter().map(|x| x.width()).sum();\n+                        f.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();\n                     chpos.0 - end_width_idx + non_narrow\n                 };\n                 Loc { file: f, line: 0, col: chpos, col_display }"}, {"sha": "e0c3dc8a961dad555fa2e4c2dc8494611d231803", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -256,7 +256,7 @@ fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n \n     // `WellFormed(WC)`\n     let wf_conditions = where_clauses\n-        .into_iter()\n+        .iter()\n         .map(|wc| wc.subst(tcx, bound_vars))\n         .map(|wc| wc.map_bound(|goal| goal.into_well_formed_goal()));\n "}, {"sha": "e6f59157c8b4b37a204409f8f6ea5e56d1a3728b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -2388,9 +2388,9 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n             hir::TypeBindingKind::Equality { ref ty } => {\n                 TypeBindingKind::Equality { ty: ty.clean(cx) }\n             }\n-            hir::TypeBindingKind::Constraint { ref bounds } => TypeBindingKind::Constraint {\n-                bounds: bounds.into_iter().map(|b| b.clean(cx)).collect(),\n-            },\n+            hir::TypeBindingKind::Constraint { ref bounds } => {\n+                TypeBindingKind::Constraint { bounds: bounds.iter().map(|b| b.clean(cx)).collect() }\n+            }\n         }\n     }\n }"}, {"sha": "ed007fe383c1db9b98e51d2044b9ef3a4899b668", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -738,7 +738,7 @@ impl Markdown<'_> {\n             return String::new();\n         }\n         let replacer = |_: &str, s: &str| {\n-            if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n+            if let Some(&(_, ref replace)) = links.iter().find(|link| &*link.0 == s) {\n                 Some((replace.clone(), s.to_owned()))\n             } else {\n                 None\n@@ -816,7 +816,7 @@ impl MarkdownSummaryLine<'_> {\n         }\n \n         let replacer = |_: &str, s: &str| {\n-            if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n+            if let Some(&(_, ref replace)) = links.iter().find(|link| &*link.0 == s) {\n                 Some((replace.clone(), s.to_owned()))\n             } else {\n                 None"}, {"sha": "a0a35e4ce4b852d555d298b9ada5be64876d14f7", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d43997053f940d3aa656a5054995a08edf5f3d4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=7d43997053f940d3aa656a5054995a08edf5f3d4", "patch": "@@ -670,7 +670,7 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n             let segments = &path.segments;\n-            let path_segment = segments.into_iter().last().unwrap_or_else(|| panic!(\n+            let path_segment = segments.iter().last().unwrap_or_else(|| panic!(\n                 \"get_index_type_name(clean_type: {:?}, accept_generic: {:?}) had length zero path\",\n                 clean_type, accept_generic\n             ));"}]}