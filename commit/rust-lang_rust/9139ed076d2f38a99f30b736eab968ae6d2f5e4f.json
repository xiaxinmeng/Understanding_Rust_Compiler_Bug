{"sha": "9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "node_id": "C_kwDOAAsO6NoAKDkxMzllZDA3NmQyZjM4YTk5ZjMwYjczNmVhYjk2OGFlNmQyZjVlNGY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-17T15:37:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-17T19:28:00Z"}, "message": "Fix impl_trait_ty_to_ty substs", "tree": {"sha": "447c5109503f38a69766d32508b2f521d5168dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/447c5109503f38a69766d32508b2f521d5168dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQUv0EACgkQgTGiTgx5\n76+Pag//WdN8hneAAZAP+qnzVIHotFgRU/dPYR8tAq8zDuWCKeRmb5b5jES+eJcc\nzwIXX7VzfnU2oCiEzvhHNje+i48OiROtnCYEJb26lX802w8AUdKj3uFYTF1W6iOA\nhchz5yqALH4K/45Rdrns9kStt9hVeDYZg/M8Cyq8i6rJSZcELmvf4IXPBkkx8J8B\n+iyH90hnRuOMm8PIo+ICCUhGPcUVYb76Zk5Mv5i/P3PwEXDzw27wXbA25WVvfjME\ncBhBquN6u2ozanWZ819xfkD7MtQIUPpfttsgVY2h1wnw6TExoE5XO4yRf6aLJHD+\na14qho5b550mOgqxWv0Hdwb2kYLT/pM/PcUQ8wozL4mpKJmeYCMkmful5mjl4bfX\njdkjWqs495S5m2NNIiOWG9yHHMkeOyWC6yeP7/rtZknEhkwPdm6WcWTEGNjIxQrU\nvNHB3Xm5yaOL/DvbEyjJEeI5tsvNv0FUnjacp96UaSCKKXgjxYF+lAoE+v+jw1JS\nb7G74UYnB5hUMaKS0fUl3HGEFGjPrPnz3l+zTgQCydO7VpUpRCGktD7y/noD5FSF\n/UoIQrQ8lF5yZWAkc2hTBnVhFIbtXiDciyArUkkSF3p+WMt1ItgqkFD8aRnhmWqY\nLANE0Ytge5PWyXX1vEu25eSzLpKFcOfNGQS1McMyD5bwBAtpWy0=\n=IdH3\n-----END PGP SIGNATURE-----", "payload": "tree 447c5109503f38a69766d32508b2f521d5168dff\nparent 03b01c5bec658081605ab078ad3fbcdb6b30f6c2\nauthor Santiago Pastorino <spastorino@gmail.com> 1679067447 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1679081280 -0300\n\nFix impl_trait_ty_to_ty substs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "html_url": "https://github.com/rust-lang/rust/commit/9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "html_url": "https://github.com/rust-lang/rust/commit/03b01c5bec658081605ab078ad3fbcdb6b30f6c2"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "333e7502041e7946973b7774e273898a3ae599ed", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -3141,8 +3141,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"impl_trait_ty_to_ty: generics={:?}\", generics);\n         let substs = InternalSubsts::for_item(tcx, def_id, |param, _| {\n-            if let Some(i) = (param.index as usize).checked_sub(generics.parent_count) {\n-                // Our own parameters are the resolved lifetimes.\n+            // We use `generics.count() - lifetimes.len()` here instead of `generics.parent_count`\n+            // since return-position impl trait in trait squashes all of the generics from its source fn\n+            // into its own generics, so the opaque's \"own\" params isn't always just lifetimes.\n+            if let Some(i) = (param.index as usize).checked_sub(generics.count() - lifetimes.len())\n+            {\n+                // Resolve our own lifetime parameters.\n                 let GenericParamDefKind::Lifetime { .. } = param.kind else { bug!() };\n                 let hir::GenericArg::Lifetime(lifetime) = &lifetimes[i] else { bug!() };\n                 self.ast_region_to_region(lifetime, None).into()"}, {"sha": "0e9477544a4a6febde94fbb27295f994278be3fb", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lifetime-mismatch.rs:3:12\n+  --> $DIR/lifetime-mismatch.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n-  --> $DIR/lifetime-mismatch.rs:12:17\n+  --> $DIR/lifetime-mismatch.rs:14:17\n    |\n LL |     async fn foo<'a>(&self);\n    |                 ---- lifetimes in impl do not match this method in trait", "previous_filename": "tests/ui/async-await/in-trait/lifetime-mismatch.stderr"}, {"sha": "0e9477544a4a6febde94fbb27295f994278be3fb", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.next.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/lifetime-mismatch.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n+  --> $DIR/lifetime-mismatch.rs:14:17\n+   |\n+LL |     async fn foo<'a>(&self);\n+   |                 ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     async fn foo(&self) {}\n+   |                 ^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0195`."}, {"sha": "5ff5a01a1ee0356a3c63d4c069bc72705c69e548", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}, {"sha": "64c942705cf8e5ab86f7147101ee3d94c3f06740", "filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.current.stderr?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -1,5 +1,5 @@\n error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n-  --> $DIR/trait-more-generics-than-impl.rs:11:11\n+  --> $DIR/trait-more-generics-than-impl.rs:14:11\n    |\n LL |     fn bar<T>() -> impl Sized;\n    |            - expected 1 type parameter", "previous_filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.stderr"}, {"sha": "64c942705cf8e5ab86f7147101ee3d94c3f06740", "filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.next.stderr?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n+  --> $DIR/trait-more-generics-than-impl.rs:14:11\n+   |\n+LL |     fn bar<T>() -> impl Sized;\n+   |            - expected 1 type parameter\n+...\n+LL |     fn bar() -> impl Sized {}\n+   |           ^ found 0 type parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "c2e394a1f664518a7eb58f1fa468da59d1b3daa1", "filename": "tests/ui/impl-trait/in-trait/trait-more-generics-than-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9139ed076d2f38a99f30b736eab968ae6d2f5e4f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs?ref=9139ed076d2f38a99f30b736eab968ae6d2f5e4f", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}]}