{"sha": "ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTBjNGI4ZTJkODFhZjdmYzM1YTQ2NmNkNDM0ZTJjMzk1MmJmZDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-15T22:15:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T22:15:30Z"}, "message": "Merge #2270\n\n2270: Reduce some duplication r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "895770caf6ae51bf9fad7766924212ff5f326758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895770caf6ae51bf9fad7766924212ff5f326758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzyOCCRBK7hj4Ov3rIwAAdHIIAHApk2CZrKPNFR4tzryzZ62T\noBLi+0+d5LEyQduRuzGV0JpQaUffEXRk8HdurAfOHjp3JvyQydUI5qQeVU/MzajF\nVRx61f0Kmx7AJ07WoEhMN+q3tQWJzbNE83OFZIwbgvGrnM++3vzXIwMKvMUcy022\npaEMIkfS7+bFP5PDHtf2Bb9dcGDLpW7Lc1DcwQU+9ghiWmGXm+Byc/jNr9hxJOiF\numxn+tuo/dBD/gSuTIUeh9jVX7/xHcuwWcXtQKK23Pz1IWipX6BQ9E66c0q0pO6W\nequtLxHzlsfvvczP8R4LPY5nt6SRrcOXSqHLiPtMTkXBnDmFh/T6jncHqzb2ZzA=\n=LyaH\n-----END PGP SIGNATURE-----\n", "payload": "tree 895770caf6ae51bf9fad7766924212ff5f326758\nparent d843455de2d619bf4f2577bd004044fa88c56533\nparent f36ac059f362050dae36569940b94a331387294a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573856130 +0000\ncommitter GitHub <noreply@github.com> 1573856130 +0000\n\nMerge #2270\n\n2270: Reduce some duplication r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "html_url": "https://github.com/rust-lang/rust/commit/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d843455de2d619bf4f2577bd004044fa88c56533", "url": "https://api.github.com/repos/rust-lang/rust/commits/d843455de2d619bf4f2577bd004044fa88c56533", "html_url": "https://github.com/rust-lang/rust/commit/d843455de2d619bf4f2577bd004044fa88c56533"}, {"sha": "f36ac059f362050dae36569940b94a331387294a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f36ac059f362050dae36569940b94a331387294a", "html_url": "https://github.com/rust-lang/rust/commit/f36ac059f362050dae36569940b94a331387294a"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "71f7ce1b19f53f16adeb73f0f633bd21b198439c", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "patch": "@@ -1,6 +1,5 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n-\n-use hir::db::HirDatabase;\n+use hir::{db::HirDatabase, SourceAnalyzer};\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n@@ -113,6 +112,13 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), self.frange.range)\n     }\n+    pub(crate) fn source_analyzer(\n+        &self,\n+        node: &SyntaxNode,\n+        offset: Option<TextUnit>,\n+    ) -> SourceAnalyzer {\n+        SourceAnalyzer::new(self.db, self.frange.file_id, node, offset)\n+    }\n \n     pub(crate) fn covering_node_for_range(&self, range: TextRange) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), range)"}, {"sha": "562a096853cbf4da87fbfcbeed285f13158b2599", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n     }\n     // Infer type\n     let db = ctx.db;\n-    let analyzer = hir::SourceAnalyzer::new(db, ctx.frange.file_id, stmt.syntax(), None);\n+    let analyzer = ctx.source_analyzer(stmt.syntax(), None);\n     let ty = analyzer.type_of(db, &expr)?;\n     // Assist not applicable if the type is unknown\n     if is_unknown(&ty) {"}, {"sha": "91af161ee0891783bf6c13812d395d78f5b8d6f1", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "patch": "@@ -100,8 +100,7 @@ fn add_missing_impl_members_inner(\n     let impl_item_list = impl_node.item_list()?;\n \n     let trait_def = {\n-        let file_id = ctx.frange.file_id;\n-        let analyzer = hir::SourceAnalyzer::new(ctx.db, file_id, impl_node.syntax(), None);\n+        let analyzer = ctx.source_analyzer(impl_node.syntax(), None);\n \n         resolve_target_trait_def(ctx.db, &analyzer, &impl_node)?\n     };"}, {"sha": "b851c20823be179fa7ac2b91f38eedf3cce8233b", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "patch": "@@ -47,8 +47,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n \n     let expr = match_expr.expr()?;\n     let enum_def = {\n-        let file_id = ctx.frange.file_id;\n-        let analyzer = hir::SourceAnalyzer::new(ctx.db, file_id, expr.syntax(), None);\n+        let analyzer = ctx.source_analyzer(expr.syntax(), None);\n         resolve_enum_def(ctx.db, &analyzer, &expr)?\n     };\n     let variant_list = enum_def.variant_list()?;"}, {"sha": "18a34502ccdd404da9204bdfe7000a1226f0cd6d", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<\n     } else {\n         let_stmt.syntax().text_range()\n     };\n-    let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, bind_pat.syntax(), None);\n+    let analyzer = ctx.source_analyzer(bind_pat.syntax(), None);\n     let refs = analyzer.find_all_refs(&bind_pat);\n \n     let mut wrap_in_parens = vec![true; refs.len()];"}, {"sha": "e5b073a0f899c952571a8006e74824d14178c3bc", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=ad10c4b8e2d81af7fc35a466cd434e2c3952bfd8", "patch": "@@ -125,12 +125,12 @@ pub struct ModuleData {\n     pub impls: Vec<ImplId>,\n }\n \n-#[derive(Default, Debug, PartialEq, Eq, Clone)]\n+#[derive(Default, Debug, PartialEq, Eq)]\n pub(crate) struct Declarations {\n     fns: FxHashMap<FileAstId<ast::FnDef>, FunctionId>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq, Clone)]\n+#[derive(Debug, Default, PartialEq, Eq)]\n pub struct ModuleScope {\n     items: FxHashMap<Name, Resolution>,\n     /// Macros visable in current module in legacy textual scope"}]}