{"sha": "6fcf55347e913b632c98725543c24296b67c191c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2Y1NTM0N2U5MTNiNjMyYzk4NzI1NTQzYzI0Mjk2YjY3YzE5MWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-22T21:22:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-22T21:24:53Z"}, "message": "Resolve the easy case of type paths.", "tree": {"sha": "792d3a58205224b0db19124c6599917afddcb254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/792d3a58205224b0db19124c6599917afddcb254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcf55347e913b632c98725543c24296b67c191c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf55347e913b632c98725543c24296b67c191c", "html_url": "https://github.com/rust-lang/rust/commit/6fcf55347e913b632c98725543c24296b67c191c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf55347e913b632c98725543c24296b67c191c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdac6ffa7c818f5902173cbf9227bd3def5956a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdac6ffa7c818f5902173cbf9227bd3def5956a5", "html_url": "https://github.com/rust-lang/rust/commit/fdac6ffa7c818f5902173cbf9227bd3def5956a5"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "3ccc6c8b3ae1be4ffb9055318f78c30af00ca041", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf55347e913b632c98725543c24296b67c191c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf55347e913b632c98725543c24296b67c191c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=6fcf55347e913b632c98725543c24296b67c191c", "patch": "@@ -12,6 +12,7 @@ import std.option;\n import std.option.some;\n import std.option.none;\n import std._str;\n+import std._vec;\n \n tag scope {\n     scope_crate(@ast.crate);\n@@ -105,6 +106,10 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n fn fold_expr_name(&env e, &span sp, &ast.name n,\n                   &option.t[def] d, ann a) -> @ast.expr {\n \n+    if (_vec.len[@ast.ty](n.node.types) > 0u) {\n+        e.sess.unimpl(\"resoling name expr with ty params\");\n+    }\n+\n     auto d_ = lookup_name(e, n.node.ident);\n \n     alt (d_) {\n@@ -119,6 +124,35 @@ fn fold_expr_name(&env e, &span sp, &ast.name n,\n     ret @fold.respan[ast.expr_](sp, ast.expr_name(n, d_, a));\n }\n \n+fn fold_ty_path(&env e, &span sp, ast.path p,\n+                &option.t[def] d) -> @ast.ty {\n+\n+    let uint len = _vec.len[ast.name](p);\n+    check (len != 0u);\n+    if (len > 1u) {\n+        e.sess.unimpl(\"resoling path ty with >1 component\");\n+    }\n+\n+    let ast.name n = p.(0);\n+\n+    if (_vec.len[@ast.ty](n.node.types) > 0u) {\n+        e.sess.unimpl(\"resoling path ty with ty params\");\n+    }\n+\n+    auto d_ = lookup_name(e, n.node.ident);\n+\n+    alt (d_) {\n+        case (some[def](_)) {\n+            // log \"resolved name \" + n.node.ident;\n+        }\n+        case (none[def]) {\n+            e.sess.err(\"unresolved name: \" + n.node.ident);\n+        }\n+    }\n+\n+    ret @fold.respan[ast.ty_](sp, ast.ty_path(p, d_));\n+}\n+\n fn update_env_for_crate(&env e, @ast.crate c) -> env {\n     ret rec(scopes = cons[scope](scope_crate(c), @e.scopes) with e);\n }\n@@ -136,6 +170,7 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n     let fold.ast_fold[env] fld = fold.new_identity_fold[env]();\n \n     fld = @rec( fold_expr_name = bind fold_expr_name(_,_,_,_,_),\n+                fold_ty_path = bind fold_ty_path(_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_)"}]}