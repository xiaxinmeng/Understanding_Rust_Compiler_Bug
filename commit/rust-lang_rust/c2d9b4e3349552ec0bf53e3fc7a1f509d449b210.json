{"sha": "c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDliNGUzMzQ5NTUyZWMwYmY1M2UzZmM3YTFmNTA5ZDQ0OWIyMTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-08T21:36:37Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-15T13:27:49Z"}, "message": "ICH: Hash lists of local trait impls as part of the HIR.", "tree": {"sha": "d6cf19a1b3862a67d6685c3cd39fc6120ed8fd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6cf19a1b3862a67d6685c3cd39fc6120ed8fd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "html_url": "https://github.com/rust-lang/rust/commit/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac254fbe7961dc78575fe8144a7049d280f06126", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac254fbe7961dc78575fe8144a7049d280f06126", "html_url": "https://github.com/rust-lang/rust/commit/ac254fbe7961dc78575fe8144a7049d280f06126"}], "stats": {"total": 144, "additions": 127, "deletions": 17}, "files": [{"sha": "93dd76a69849122d818db7cc5f44d48b2cd05d9a", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -116,6 +116,8 @@ pub enum DepNode<D: Clone + Debug> {\n     // than changes in the impl body.\n     TraitImpls(D),\n \n+    AllLocalTraitImpls,\n+\n     // Nodes representing caches. To properly handle a true cache, we\n     // don't use a DepTrackingMap, but rather we push a task node.\n     // Otherwise the write into the map would be incorrectly\n@@ -263,6 +265,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             ConstEval(ref d) => op(d).map(ConstEval),\n             SymbolName(ref d) => op(d).map(SymbolName),\n             TraitImpls(ref d) => op(d).map(TraitImpls),\n+            AllLocalTraitImpls => Some(AllLocalTraitImpls),\n             TraitItems(ref d) => op(d).map(TraitItems),\n             ReprHints(ref d) => op(d).map(ReprHints),\n             TraitSelect { ref trait_def_id, ref input_def_id } => {"}, {"sha": "868730edfedda83b1d4d10ef586ca3f37b75dc58", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -497,15 +497,15 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [NodeId] {\n-        self.dep_graph.read(DepNode::TraitImpls(trait_did));\n+        self.dep_graph.read(DepNode::AllLocalTraitImpls);\n \n         // NB: intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n         self.forest.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     pub fn trait_default_impl(&self, trait_did: DefId) -> Option<NodeId> {\n-        self.dep_graph.read(DepNode::TraitImpls(trait_did));\n+        self.dep_graph.read(DepNode::AllLocalTraitImpls);\n \n         // NB: intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here"}, {"sha": "ccdbab88b8b9c17e9e9916804d194c2d953392ae", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -94,3 +94,11 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n         fingerprint\n     }\n }\n+\n+impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n+    fn hash_stable<W: stable_hasher::StableHasherResult>(&self,\n+                                          _: &mut CTX,\n+                                          hasher: &mut stable_hasher::StableHasher<W>) {\n+        ::std::hash::Hash::hash(&self.0, hasher);\n+    }\n+}"}, {"sha": "786d1c5035d96fa388278aa906c362e2c6467ffa", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -16,7 +16,7 @@ use ty;\n use util::nodemap::NodeMap;\n \n use std::hash as std_hash;\n-use std::collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet, BTreeMap};\n \n use syntax::ast;\n use syntax::attr;\n@@ -348,3 +348,25 @@ pub fn hash_stable_nodemap<'a, 'tcx, V, W>(hcx: &mut StableHashingContext<'a, 't\n         hcx.tcx.hir.definitions().node_to_hir_id(*node_id).local_id\n     });\n }\n+\n+\n+pub fn hash_stable_btreemap<'a, 'tcx, K, V, SK, F, W>(hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                                      hasher: &mut StableHasher<W>,\n+                                                      map: &BTreeMap<K, V>,\n+                                                      extract_stable_key: F)\n+    where K: Eq + Ord,\n+          V: HashStable<StableHashingContext<'a, 'tcx>>,\n+          SK: HashStable<StableHashingContext<'a, 'tcx>> + Ord + Clone,\n+          F: Fn(&mut StableHashingContext<'a, 'tcx>, &K) -> SK,\n+          W: StableHasherResult,\n+{\n+    let mut keys: Vec<_> = map.keys()\n+                              .map(|k| (extract_stable_key(hcx, k), k))\n+                              .collect();\n+    keys.sort_unstable_by_key(|&(ref stable_key, _)| stable_key.clone());\n+    keys.len().hash_stable(hcx, hasher);\n+    for (stable_key, key) in keys {\n+        stable_key.hash_stable(hcx, hasher);\n+        map[key].hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "5b23809085053d09b2cf6a821a25140dc9315602", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -13,7 +13,8 @@\n pub use self::fingerprint::Fingerprint;\n pub use self::caching_codemap_view::CachingCodemapView;\n pub use self::hcx::{StableHashingContext, NodeIdHashingMode, hash_stable_hashmap,\n-                    hash_stable_hashset, hash_stable_nodemap};\n+                    hash_stable_hashset, hash_stable_nodemap,\n+                    hash_stable_btreemap};\n mod fingerprint;\n mod caching_codemap_view;\n mod hcx;"}, {"sha": "8cdabc1d894e229af7070f87337312e11c5fda0b", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -36,9 +36,10 @@ use rustc::hir::def_id::{LOCAL_CRATE, CRATE_DEF_INDEX, DefId};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ich::{Fingerprint, StableHashingContext};\n use rustc::ty::TyCtxt;\n+use rustc::util::common::record_time;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc::util::common::record_time;\n+use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n pub type IchHasher = StableHasher<Fingerprint>;\n \n@@ -159,6 +160,11 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n                                         // difference, filter them out.\n                                         return None\n                                     }\n+                                    DepNode::AllLocalTraitImpls => {\n+                                        // These are already covered by hashing\n+                                        // the HIR.\n+                                        return None\n+                                    }\n                                     ref other => {\n                                         bug!(\"Found unexpected DepNode during \\\n                                               SVH computation: {:?}\",\n@@ -213,6 +219,49 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n                                                  true,\n                                                  (module, (span, attrs)));\n     }\n+\n+    fn compute_and_store_ich_for_trait_impls(&mut self, krate: &'tcx hir::Crate)\n+    {\n+        let tcx = self.hcx.tcx();\n+\n+        let mut impls: Vec<(u64, Fingerprint)> = krate\n+            .trait_impls\n+            .iter()\n+            .map(|(&trait_id, impls)| {\n+                let trait_id = tcx.def_path_hash(trait_id);\n+                let mut impls: AccumulateVec<[_; 32]> = impls\n+                    .iter()\n+                    .map(|&node_id| {\n+                        let def_id = tcx.hir.local_def_id(node_id);\n+                        tcx.def_path_hash(def_id)\n+                    })\n+                    .collect();\n+\n+                impls.sort_unstable();\n+                let mut hasher = StableHasher::new();\n+                impls.hash_stable(&mut self.hcx, &mut hasher);\n+                (trait_id, hasher.finish())\n+            })\n+            .collect();\n+\n+        impls.sort_unstable();\n+\n+        let mut default_impls: AccumulateVec<[_; 32]> = krate\n+            .trait_default_impl\n+            .iter()\n+            .map(|(&trait_def_id, &impl_node_id)| {\n+                let impl_def_id = tcx.hir.local_def_id(impl_node_id);\n+                (tcx.def_path_hash(trait_def_id), tcx.def_path_hash(impl_def_id))\n+            })\n+            .collect();\n+\n+        default_impls.sort_unstable();\n+\n+        let mut hasher = StableHasher::new();\n+        impls.hash_stable(&mut self.hcx, &mut hasher);\n+\n+        self.hashes.insert(DepNode::AllLocalTraitImpls, hasher.finish());\n+    }\n }\n \n impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for ComputeItemHashesVisitor<'a, 'tcx> {\n@@ -235,6 +284,8 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for ComputeItemHashesVisitor<'a, 'tcx>\n     }\n }\n \n+\n+\n pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                                     -> IncrementalHashesMap {\n     let _ignore = tcx.dep_graph.in_ignore();\n@@ -272,6 +323,8 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n             let fingerprint = hasher.finish();\n             visitor.hashes.insert(dep_node, fingerprint);\n         }\n+\n+        visitor.compute_and_store_ich_for_trait_impls(krate);\n     });\n \n     tcx.sess.perf_stats.incr_comp_hashes_count.set(visitor.hashes.len() as u64);"}, {"sha": "54f09a0f3198dd91c58df7b3689f691441812d8e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -315,11 +315,20 @@ impl<'a> CrateLoader<'a> {\n         let exported_symbols = crate_root.exported_symbols\n                                          .map(|x| x.decode(&metadata).collect());\n \n+        let trait_impls = crate_root\n+            .impls\n+            .map(|impls| {\n+                impls.decode(&metadata)\n+                     .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))\n+                     .collect()\n+            });\n+\n         let mut cmeta = cstore::CrateMetadata {\n             name: name,\n             extern_crate: Cell::new(None),\n             def_path_table: def_path_table,\n             exported_symbols: exported_symbols,\n+            trait_impls: trait_impls,\n             proc_macros: crate_root.macro_derive_registrar.map(|_| {\n                 self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n             }),"}, {"sha": "4e70387c8b08229d3ba2b5db44344b5947a2aa9f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -85,6 +85,8 @@ pub struct CrateMetadata {\n \n     pub exported_symbols: Tracked<FxHashSet<DefIndex>>,\n \n+    pub trait_impls: Tracked<FxHashMap<(u32, DefIndex), schema::LazySeq<DefIndex>>>,\n+\n     pub dep_kind: Cell<DepKind>,\n     pub source: CrateSource,\n "}, {"sha": "d42aab60c6eb297a1c0ebdeadb1160b49dc5d936", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -147,10 +147,8 @@ impl CrateStore for cstore::CStore {\n \n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>\n     {\n-        if let Some(def_id) = filter {\n-            self.dep_graph.read(DepNode::MetaData(def_id));\n-        }\n         let mut result = vec![];\n+\n         self.iter_crate_data(|_, cdata| {\n             cdata.get_implementations_for_trait(filter, &self.dep_graph, &mut result)\n         });"}, {"sha": "518224742548de6c0dc29fcf7d9c30316acb3816", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -961,17 +961,17 @@ impl<'a, 'tcx> CrateMetadata {\n             None => None,\n         };\n \n-        // FIXME(eddyb) Make this O(1) instead of O(n).\n         let dep_node = self.metadata_dep_node(GlobalMetaDataKind::Impls);\n-        for trait_impls in self.root.impls.get(dep_graph, dep_node).decode(self) {\n-            if filter.is_some() && filter != Some(trait_impls.trait_id) {\n-                continue;\n-            }\n-\n-            result.extend(trait_impls.impls.decode(self).map(|index| self.local_def_id(index)));\n \n-            if filter.is_some() {\n-                break;\n+        if let Some(filter) = filter {\n+            if let Some(impls) = self.trait_impls\n+                                     .get(dep_graph, dep_node)\n+                                     .get(&filter) {\n+                result.extend(impls.decode(self).map(|idx| self.local_def_id(idx)));\n+            }\n+        } else {\n+            for impls in self.trait_impls.get(dep_graph, dep_node).values() {\n+                result.extend(impls.decode(self).map(|idx| self.local_def_id(idx)));\n             }\n         }\n     }"}, {"sha": "91a22d922199da6d2e6f3e35192ec9957a9491e1", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d9b4e3349552ec0bf53e3fc7a1f509d449b210/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=c2d9b4e3349552ec0bf53e3fc7a1f509d449b210", "patch": "@@ -221,6 +221,20 @@ impl<T> Tracked<T> {\n     }\n }\n \n+impl<'a, 'tcx, T> HashStable<StableHashingContext<'a, 'tcx>> for Tracked<T>\n+    where T: HashStable<StableHashingContext<'a, 'tcx>>\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let Tracked {\n+            ref state\n+        } = *self;\n+\n+        state.hash_stable(hcx, hasher);\n+    }\n+}\n+\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct CrateRoot {"}]}