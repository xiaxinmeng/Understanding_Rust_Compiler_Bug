{"sha": "3a3f99a79b00b5efcb1bf061404112a281084b97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhM2Y5OWE3OWIwMGI1ZWZjYjFiZjA2MTQwNDExMmEyODEwODRiOTc=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-02T16:54:32Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-02T21:28:10Z"}, "message": "rustdoc: Higher-ranked lifetimes can't have bounds\n\nThis cleans up the other spot I found where rustdoc was rendering bounds\ninto the lifetime name itself. However, in this case, I don't think it\ncould have actually happened because higher-ranked lifetime definitions\naren't currently allowed to have bounds.", "tree": {"sha": "f82ffa2ceb43add67ffe692a0f2bf69b06ab8d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82ffa2ceb43add67ffe692a0f2bf69b06ab8d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a3f99a79b00b5efcb1bf061404112a281084b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3f99a79b00b5efcb1bf061404112a281084b97", "html_url": "https://github.com/rust-lang/rust/commit/3a3f99a79b00b5efcb1bf061404112a281084b97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a3f99a79b00b5efcb1bf061404112a281084b97/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6022949077176bfff9f72282dc52e51a175cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6022949077176bfff9f72282dc52e51a175cb7", "html_url": "https://github.com/rust-lang/rust/commit/2a6022949077176bfff9f72282dc52e51a175cb7"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "3664687cbb79ef3eac2374ac207f3c7833269e28", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3a3f99a79b00b5efcb1bf061404112a281084b97", "patch": "@@ -30,6 +30,7 @@ use rustc_target::spec::abi::Abi;\n use rustc_typeck::check::intrinsic::intrinsic_operation_unsafety;\n use rustc_typeck::hir_ty_to_ty;\n \n+use std::assert_matches::assert_matches;\n use std::collections::hash_map::Entry;\n use std::default::Default;\n use std::hash::Hash;\n@@ -242,30 +243,6 @@ impl Clean<Lifetime> for hir::Lifetime {\n     }\n }\n \n-impl Clean<Lifetime> for hir::GenericParam<'_> {\n-    fn clean(&self, _: &mut DocContext<'_>) -> Lifetime {\n-        match self.kind {\n-            hir::GenericParamKind::Lifetime { .. } => {\n-                if !self.bounds.is_empty() {\n-                    let mut bounds = self.bounds.iter().map(|bound| match bound {\n-                        hir::GenericBound::Outlives(lt) => lt,\n-                        _ => panic!(),\n-                    });\n-                    let name = bounds.next().expect(\"no more bounds\").name.ident();\n-                    let mut s = format!(\"{}: {}\", self.name.ident(), name);\n-                    for bound in bounds {\n-                        s.push_str(&format!(\" + {}\", bound.name.ident()));\n-                    }\n-                    Lifetime(Symbol::intern(&s))\n-                } else {\n-                    Lifetime(self.name.ident().name)\n-                }\n-            }\n-            _ => panic!(),\n-        }\n-    }\n-}\n-\n impl Clean<Constant> for hir::ConstArg {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Constant {\n         Constant {\n@@ -303,11 +280,30 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n impl Clean<WherePredicate> for hir::WherePredicate<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> WherePredicate {\n         match *self {\n-            hir::WherePredicate::BoundPredicate(ref wbp) => WherePredicate::BoundPredicate {\n-                ty: wbp.bounded_ty.clean(cx),\n-                bounds: wbp.bounds.clean(cx),\n-                bound_params: wbp.bound_generic_params.into_iter().map(|x| x.clean(cx)).collect(),\n-            },\n+            hir::WherePredicate::BoundPredicate(ref wbp) => {\n+                let bound_params = wbp\n+                    .bound_generic_params\n+                    .into_iter()\n+                    .map(|param| {\n+                        // Higher-ranked params must be lifetimes.\n+                        // Higher-ranked lifetimes can't have bounds.\n+                        assert_matches!(\n+                            param,\n+                            hir::GenericParam {\n+                                kind: hir::GenericParamKind::Lifetime { .. },\n+                                bounds: [],\n+                                ..\n+                            }\n+                        );\n+                        Lifetime(param.name.ident().name)\n+                    })\n+                    .collect();\n+                WherePredicate::BoundPredicate {\n+                    ty: wbp.bounded_ty.clean(cx),\n+                    bounds: wbp.bounds.clean(cx),\n+                    bound_params,\n+                }\n+            }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n                 lifetime: wrp.lifetime.clean(cx),"}, {"sha": "2dbe4c42b888ebcd1251167c7fb97f75d036c0ce", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3a3f99a79b00b5efcb1bf061404112a281084b97", "patch": "@@ -4,6 +4,7 @@\n )]\n #![feature(rustc_private)]\n #![feature(array_methods)]\n+#![feature(assert_matches)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]"}, {"sha": "b2e000b9757409dd2d892a86f9bc3ff37d0b3d15", "filename": "src/test/rustdoc-ui/bounded-hr-lifetime.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Ftest%2Frustdoc-ui%2Fbounded-hr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Ftest%2Frustdoc-ui%2Fbounded-hr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fbounded-hr-lifetime.rs?ref=3a3f99a79b00b5efcb1bf061404112a281084b97", "patch": "@@ -0,0 +1,9 @@\n+// This test ensures that rustdoc doesn't panic on higher-ranked lifetimes\n+// with bounds, because an error should have already been emitted by rustc.\n+\n+pub fn hrlt<'b, 'c>()\n+where\n+    for<'a: 'b + 'c> &'a (): std::fmt::Debug,\n+    //~^ ERROR lifetime bounds cannot be used in this context\n+{\n+}"}, {"sha": "d8fcd6cb4b13f5fcc97a57a5c24cbdd1d0202e5f", "filename": "src/test/rustdoc-ui/bounded-hr-lifetime.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Ftest%2Frustdoc-ui%2Fbounded-hr-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a3f99a79b00b5efcb1bf061404112a281084b97/src%2Ftest%2Frustdoc-ui%2Fbounded-hr-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fbounded-hr-lifetime.stderr?ref=3a3f99a79b00b5efcb1bf061404112a281084b97", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/bounded-hr-lifetime.rs:6:13\n+   |\n+LL |     for<'a: 'b + 'c> &'a (): std::fmt::Debug,\n+   |             ^^   ^^\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 2 previous errors\n+"}]}