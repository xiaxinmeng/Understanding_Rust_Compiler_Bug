{"sha": "6016214101d40c627f2c52412fb77d56254c901e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMTYyMTQxMDFkNDBjNjI3ZjJjNTI0MTJmYjc3ZDU2MjU0YzkwMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-13T05:27:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-13T05:27:22Z"}, "message": "auto merge of #4900 : luqmana/rust/core_os_errors, r=graydon\n\nRewrote the last pull request (#4859) to not require on llvm for core.\r\n\r\nAlso fixes #2269.", "tree": {"sha": "501c5e07c3e50246ca3c202d4935dc18552ff013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501c5e07c3e50246ca3c202d4935dc18552ff013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6016214101d40c627f2c52412fb77d56254c901e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6016214101d40c627f2c52412fb77d56254c901e", "html_url": "https://github.com/rust-lang/rust/commit/6016214101d40c627f2c52412fb77d56254c901e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6016214101d40c627f2c52412fb77d56254c901e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b3e01377ff9b25a38a76937c3d14cd9d0fb2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b3e01377ff9b25a38a76937c3d14cd9d0fb2b0", "html_url": "https://github.com/rust-lang/rust/commit/27b3e01377ff9b25a38a76937c3d14cd9d0fb2b0"}, {"sha": "2180fe25520727a747c5a73b4d582a120ad116bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2180fe25520727a747c5a73b4d582a120ad116bd", "html_url": "https://github.com/rust-lang/rust/commit/2180fe25520727a747c5a73b4d582a120ad116bd"}], "stats": {"total": 217, "additions": 148, "deletions": 69}, "files": [{"sha": "0efc17354dd58c781f461ec01847b49b3cffe75e", "filename": "src/libcore/os.rs", "status": "modified", "additions": 134, "deletions": 10, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -62,11 +62,10 @@ extern mod rustrt {\n     unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n     unsafe fn rust_list_files2(&&path: ~str) -> ~[~str];\n     unsafe fn rust_process_wait(handle: c_int) -> c_int;\n-    unsafe fn last_os_error() -> ~str;\n     unsafe fn rust_set_exit_status(code: libc::intptr_t);\n }\n \n-pub const tmpbuf_sz : uint = 1000u;\n+pub const TMPBUF_SZ : uint = 1000u;\n \n pub fn getcwd() -> Path {\n     unsafe {\n@@ -80,7 +79,7 @@ pub fn as_c_charp<T>(s: &str, f: fn(*c_char) -> T) -> T {\n \n pub fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n     -> Option<~str> {\n-    let buf = vec::cast_to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n+    let buf = vec::cast_to_mut(vec::from_elem(TMPBUF_SZ, 0u8 as c_char));\n     do vec::as_mut_buf(buf) |b, sz| {\n         if f(b, sz as size_t) {\n             unsafe {\n@@ -99,19 +98,19 @@ pub mod win32 {\n     use str;\n     use option::{None, Option};\n     use option;\n-    use os::tmpbuf_sz;\n+    use os::TMPBUF_SZ;\n     use libc::types::os::arch::extra::DWORD;\n \n     pub fn fill_utf16_buf_and_decode(f: fn(*mut u16, DWORD) -> DWORD)\n         -> Option<~str> {\n         unsafe {\n-            let mut n = tmpbuf_sz as DWORD;\n+            let mut n = TMPBUF_SZ as DWORD;\n             let mut res = None;\n             let mut done = false;\n             while !done {\n                 let buf = vec::cast_to_mut(vec::from_elem(n as uint, 0u16));\n                 do vec::as_mut_buf(buf) |b, _sz| {\n-                    let k : DWORD = f(b, tmpbuf_sz as DWORD);\n+                    let k : DWORD = f(b, TMPBUF_SZ as DWORD);\n                     if k == (0 as DWORD) {\n                         done = true;\n                     } else if (k == n &&\n@@ -387,11 +386,11 @@ pub fn self_exe_path() -> Option<Path> {\n         unsafe {\n             use libc::funcs::posix01::unistd::readlink;\n \n-            let mut path_str = str::with_capacity(tmpbuf_sz);\n+            let mut path_str = str::with_capacity(TMPBUF_SZ);\n             let len = do str::as_c_str(path_str) |buf| {\n                 let buf = buf as *mut c_char;\n                 do as_c_charp(\"/proc/self/exe\") |proc_self_buf| {\n-                    readlink(proc_self_buf, buf, tmpbuf_sz as size_t)\n+                    readlink(proc_self_buf, buf, TMPBUF_SZ as size_t)\n                 }\n             };\n             if len == -1 {\n@@ -766,11 +765,136 @@ pub fn remove_file(p: &Path) -> bool {\n     }\n }\n \n+#[cfg(unix)]\n+pub fn errno() -> int {\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn errno_location() -> *c_int {\n+        #[nolink]\n+        extern {\n+            unsafe fn __error() -> *c_int;\n+        }\n+        unsafe {\n+            __error()\n+        }\n+    }\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n+    fn errno_location() -> *c_int {\n+        #[nolink]\n+        extern {\n+            unsafe fn __errno_location() -> *c_int;\n+        }\n+        unsafe {\n+            __errno_location()\n+        }\n+    }\n+\n+    unsafe {\n+        (*errno_location()) as int\n+    }\n+}\n+\n+#[cfg(windows)]\n+pub fn errno() -> uint {\n+    use libc::types::os::arch::extra::DWORD;\n+\n+    #[link_name = \"kernel32\"]\n+    #[abi = \"stdcall\"]\n+    extern {\n+        unsafe fn GetLastError() -> DWORD;\n+    }\n+\n+    unsafe {\n+        GetLastError() as uint\n+    }\n+}\n+\n /// Get a string representing the platform-dependent last error\n pub fn last_os_error() -> ~str {\n-    unsafe {\n-        rustrt::last_os_error()\n+    #[cfg(unix)]\n+    fn strerror() -> ~str {\n+        #[cfg(target_os = \"macos\")]\n+        #[cfg(target_os = \"android\")]\n+        #[cfg(target_os = \"freebsd\")]\n+        fn strerror_r(errnum: c_int, buf: *c_char, buflen: size_t) -> c_int {\n+            #[nolink]\n+            extern {\n+                unsafe fn strerror_r(errnum: c_int, buf: *c_char,\n+                                     buflen: size_t) -> c_int;\n+            }\n+            unsafe {\n+                strerror_r(errnum, buf, buflen)\n+            }\n+        }\n+\n+        // GNU libc provides a non-compliant version of strerror_r by default\n+        // and requires macros to instead use the POSIX compliant variant.\n+        // So we just use __xpg_strerror_r which is always POSIX compliant\n+        #[cfg(target_os = \"linux\")]\n+        fn strerror_r(errnum: c_int, buf: *c_char, buflen: size_t) -> c_int {\n+            #[nolink]\n+            extern {\n+                unsafe fn __xpg_strerror_r(errnum: c_int, buf: *c_char,\n+                                           buflen: size_t) -> c_int;\n+            }\n+            unsafe {\n+                __xpg_strerror_r(errnum, buf, buflen)\n+            }\n+        }\n+\n+        let mut buf = [0 as c_char, ..TMPBUF_SZ];\n+        unsafe {\n+            let err = strerror_r(errno() as c_int, &buf[0],\n+                                 TMPBUF_SZ as size_t);\n+            if err < 0 {\n+                die!(~\"strerror_r failure\");\n+            }\n+\n+            str::raw::from_c_str(&buf[0])\n+        }\n+    }\n+\n+    #[cfg(windows)]\n+    fn strerror() -> ~str {\n+        use libc::types::os::arch::extra::DWORD;\n+        use libc::types::os::arch::extra::LPSTR;\n+        use libc::types::os::arch::extra::LPVOID;\n+\n+        #[link_name = \"kernel32\"]\n+        #[abi = \"stdcall\"]\n+        extern {\n+            unsafe fn FormatMessageA(flags: DWORD, lpSrc: LPVOID,\n+                                     msgId: DWORD, langId: DWORD,\n+                                     buf: LPSTR, nsize: DWORD,\n+                                     args: *c_void) -> DWORD;\n+        }\n+\n+        const FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n+        const FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n+\n+        let mut buf = [0 as c_char, ..TMPBUF_SZ];\n+\n+        // This value is calculated from the macro\n+        // MAKELANGID(LANG_SYSTEM_DEFAULT, SUBLANG_SYS_DEFAULT)\n+        let langId = 0x0800 as DWORD;\n+        let err = errno() as DWORD;\n+        unsafe {\n+            let res = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |\n+                                     FORMAT_MESSAGE_IGNORE_INSERTS,\n+                                     ptr::mut_null(), err, langId,\n+                                     &mut buf[0], TMPBUF_SZ as DWORD,\n+                                     ptr::null());\n+            if res == 0 {\n+                die!(fmt!(\"[%?] FormatMessage failure\", errno()));\n+            }\n+\n+            str::raw::from_c_str(&buf[0])\n+        }\n     }\n+\n+    strerror()\n }\n \n /**"}, {"sha": "86f371a30f3ac8ca95ff14ec35f4ba1050880c33", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -52,50 +52,6 @@ timegm(struct tm *tm)\n }\n #endif\n \n-\n-extern \"C\" CDECL rust_str*\n-last_os_error() {\n-    rust_task *task = rust_get_current_task();\n-\n-    LOG(task, task, \"last_os_error()\");\n-\n-#if defined(__WIN32__)\n-    LPTSTR buf;\n-    DWORD err = GetLastError();\n-    DWORD res = FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n-                              FORMAT_MESSAGE_FROM_SYSTEM |\n-                              FORMAT_MESSAGE_IGNORE_INSERTS,\n-                              NULL, err,\n-                              MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n-                              (LPTSTR) &buf, 0, NULL);\n-    if (!res) {\n-        task->fail();\n-        return NULL;\n-    }\n-#elif defined(_GNU_SOURCE) && !defined(__ANDROID__)\n-    char cbuf[BUF_BYTES];\n-    char *buf = strerror_r(errno, cbuf, sizeof(cbuf));\n-    if (!buf) {\n-        task->fail();\n-        return NULL;\n-    }\n-#else\n-    char buf[BUF_BYTES];\n-    int err = strerror_r(errno, buf, sizeof(buf));\n-    if (err) {\n-        task->fail();\n-        return NULL;\n-    }\n-#endif\n-\n-    rust_str * st = make_str(task->kernel, buf, strlen(buf),\n-                             \"last_os_error\");\n-#ifdef __WIN32__\n-    LocalFree((HLOCAL)buf);\n-#endif\n-    return st;\n-}\n-\n extern \"C\" CDECL rust_str *\n rust_getcwd() {\n     rust_task *task = rust_get_current_task();"}, {"sha": "c554489c4b35b97e90579fb1fd966cc1df6754c0", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -14,7 +14,6 @@ rust_gmtime\n rust_localtime\n rust_timegm\n rust_mktime\n-last_os_error\n new_task\n precise_time_ns\n rand_free"}, {"sha": "bccbb8173aad1d388606aa0b48604f06cee49ca0", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -15,5 +15,5 @@\n \n #[crate_type = \"lib\"];\n extern {\n-  fn last_os_error() -> ~str;\n+  fn rust_get_argc() -> libc::c_int;\n }"}, {"sha": "1d9c1cdbf83f0693c864b93a701a7a13207b617e", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -11,5 +11,5 @@\n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n \n pub extern mod rustrt {\n-    pub fn last_os_error() -> ~str;\n+    pub fn rust_get_argc() -> libc::c_int;\n }"}, {"sha": "8236489834d1163bd3bc256c13122454be3a3f03", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -18,15 +18,15 @@\n extern mod std;\n \n extern mod rustrt {\n-    pub fn last_os_error() -> ~str;\n+    pub fn rust_get_argc() -> libc::c_int;\n }\n \n fn getbig_call_c_and_fail(i: int) {\n     if i != 0 {\n         getbig_call_c_and_fail(i - 1);\n     } else {\n         unsafe {\n-            rustrt::last_os_error();\n+            rustrt::rust_get_argc();\n             die!();\n         }\n     }"}, {"sha": "ed57b32b3d9e557dc7ad3b3f77fa18e0585bdfce", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -15,5 +15,5 @@ extern mod anonexternmod;\n use anonexternmod::*;\n \n pub fn main() {\n-  last_os_error();\n+  rust_get_argc();\n }"}, {"sha": "6e73022fad2e150c7814c5ab23537ce41f63e363", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -11,11 +11,11 @@\n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern {\n-    fn last_os_error() -> ~str;\n+    fn rust_get_argc() -> libc::c_int;\n }\n \n pub fn main() {\n     unsafe {\n-        let _ = last_os_error();\n+        let _ = rust_get_argc();\n     }\n }"}, {"sha": "6230fe11363ad48b580e736fd56e2273f46700dc", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -14,18 +14,18 @@\n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern mod rustrt1 {\n-    pub fn last_os_error() -> ~str;\n+    pub fn rust_get_argc() -> libc::c_int;\n }\n \n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern mod rustrt2 {\n-    pub fn last_os_error() -> ~str;\n+    pub fn rust_get_argc() -> libc::c_int;\n }\n \n pub fn main() {\n     unsafe {\n-        rustrt1::last_os_error();\n-        rustrt2::last_os_error();\n+        rustrt1::rust_get_argc();\n+        rustrt2::rust_get_argc();\n     }\n }"}, {"sha": "69fce9e541e06e49e02e9e74812b661813548cba", "filename": "src/test/run-pass/invoke-external-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -18,5 +18,5 @@\n extern mod foreign_lib;\n \n pub fn main() {\n-    let foo = foreign_lib::rustrt::last_os_error();\n+    let foo = foreign_lib::rustrt::rust_get_argc();\n }"}, {"sha": "d56d9c30b7066c5ef697e3bf69b62fa006d0365b", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6016214101d40c627f2c52412fb77d56254c901e/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=6016214101d40c627f2c52412fb77d56254c901e", "patch": "@@ -15,15 +15,15 @@ extern mod rustrt {\n     pub fn debug_get_stk_seg() -> *u8;\n \n     pub fn rust_get_sched_id() -> libc::intptr_t;\n-    pub fn last_os_error() -> ~str;\n+    pub fn rust_get_argc() -> libc::c_int;\n     pub fn rust_getcwd() -> ~str;\n     pub fn get_task_id() -> libc::intptr_t;\n     pub fn rust_sched_threads();\n     pub fn rust_get_task();\n }\n \n fn calllink01() { unsafe { rustrt::rust_get_sched_id(); } }\n-fn calllink02() { unsafe { rustrt::last_os_error(); } }\n+fn calllink02() { unsafe { rustrt::rust_get_argc(); } }\n fn calllink03() { unsafe { rustrt::rust_getcwd(); } }\n fn calllink08() { unsafe { rustrt::get_task_id(); } }\n fn calllink09() { unsafe { rustrt::rust_sched_threads(); } }"}]}