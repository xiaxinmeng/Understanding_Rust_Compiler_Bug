{"sha": "5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MDBiMzJjZWVlNWNiYjdmN2RiMTFkOWFlZDUyYTM1YmEzZWM5YmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T15:23:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T15:25:45Z"}, "message": "unify call_intrinsic handling of intruction pointer with other machine hooks", "tree": {"sha": "9bd56bc27103a9900fac577af13f862103d67e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd56bc27103a9900fac577af13f862103d67e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "html_url": "https://github.com/rust-lang/rust/commit/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903", "html_url": "https://github.com/rust-lang/rust/commit/7bfed2e32a3b56a2a9035c64ed8fbfa021c86903"}], "stats": {"total": 28, "additions": 5, "deletions": 23}, "files": [{"sha": "82899d43257328fb118f4bcb0b263afd4ad51d36", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "patch": "@@ -141,7 +141,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Returns either the mir to use for the call, or `None` if execution should\n     /// just proceed (which usually means this hook did all the work that the\n     /// called function should usually have done). In the latter case, it is\n-    /// this hook's responsibility to call `goto_block(ret)` to advance the instruction pointer!\n+    /// this hook's responsibility to advance the instruction pointer!\n     /// (This is to support functions like `__rust_maybe_catch_panic` that neither find a MIR\n     /// nor just jump to `ret`, but instead push their own stack frame.)\n     /// Passing `dest`and `ret` in the same `Option` proved very annoying when only one of them\n@@ -155,7 +155,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         unwind: Option<mir::BasicBlock>\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>>;\n \n-    /// Execute `fn_val`.  it is the hook's responsibility to advance the instruction\n+    /// Execute `fn_val`.  It is the hook's responsibility to advance the instruction\n     /// pointer as appropriate.\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n@@ -165,8 +165,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;\n \n-    /// Directly process an intrinsic without pushing a stack frame.\n-    /// If this returns successfully, the engine will take care of jumping to the next block.\n+    /// Directly process an intrinsic without pushing a stack frame. It is the hook's\n+    /// responsibility to advance the instruction pointer as appropriate.\n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         span: Span,"}, {"sha": "ad4613bf5b364724d6b6f39066483140d4de4b9e", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=5900b32ceee5cbb7f7db11d9aed52a35ba3ec9be", "patch": "@@ -254,25 +254,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n-\n-                let old_stack = self.cur_frame();\n-                let old_bb = self.frame().block;\n-                M::call_intrinsic(self, span, instance, args, dest, ret, unwind)?;\n-                // No stack frame gets pushed, the main loop will just act as if the\n-                // call completed.\n-                if ret.is_some() {\n-                    self.return_to_block(ret)?;\n-                } else {\n-                    // If this intrinsic call doesn't have a ret block,\n-                    // then the intrinsic implementation should have\n-                    // changed the stack frame (otherwise, we'll end\n-                    // up trying to execute this intrinsic call again)\n-                    debug_assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n-                }\n-                if let Some(dest) = dest {\n-                    self.dump_place(*dest)\n-                }\n-                Ok(())\n+                return M::call_intrinsic(self, span, instance, args, dest, ret, unwind);\n             }\n             ty::InstanceDef::VtableShim(..) |\n             ty::InstanceDef::ReifyShim(..) |"}]}