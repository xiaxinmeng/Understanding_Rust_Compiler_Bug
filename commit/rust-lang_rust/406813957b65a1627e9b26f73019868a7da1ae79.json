{"sha": "406813957b65a1627e9b26f73019868a7da1ae79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNjgxMzk1N2I2NWExNjI3ZTliMjZmNzMwMTk4NjhhN2RhMWFlNzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-20T00:34:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T16:19:00Z"}, "message": "test: Remove most uses of `&fn()` from the tests.", "tree": {"sha": "7c7c11405f338e2289b7dd3df3a692e460edfca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7c11405f338e2289b7dd3df3a692e460edfca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406813957b65a1627e9b26f73019868a7da1ae79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406813957b65a1627e9b26f73019868a7da1ae79", "html_url": "https://github.com/rust-lang/rust/commit/406813957b65a1627e9b26f73019868a7da1ae79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406813957b65a1627e9b26f73019868a7da1ae79/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef70b7666e4846f02cd37eed26999b71d0c21326", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef70b7666e4846f02cd37eed26999b71d0c21326", "html_url": "https://github.com/rust-lang/rust/commit/ef70b7666e4846f02cd37eed26999b71d0c21326"}], "stats": {"total": 505, "additions": 249, "deletions": 256}, "files": [{"sha": "f038acf67a82ed8eeee50beee03cd96517fac6ca", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,12 +11,12 @@\n #[link(name=\"cci_impl_lib\", vers=\"0.0\")];\n \n trait uint_helpers {\n-    fn to(&self, v: uint, f: &fn(uint));\n+    fn to(&self, v: uint, f: |uint|);\n }\n \n impl uint_helpers for uint {\n     #[inline]\n-    fn to(&self, v: uint, f: &fn(uint)) {\n+    fn to(&self, v: uint, f: |uint|) {\n         let mut i = *self;\n         while i < v {\n             f(i);"}, {"sha": "e08a2f7fcbbecc07f117c616980fc1648f4ee027", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n #[link(name=\"cci_iter_lib\", vers=\"0.0\")];\n \n #[inline]\n-pub fn iter<T>(v: &[T], f: &fn(&T)) {\n+pub fn iter<T>(v: &[T], f: |&T|) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "99d13e91752ab6a11b6252ebf5800a83ade23061", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n #[link(name=\"cci_no_inline_lib\", vers=\"0.0\")];\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n-pub fn iter(v: ~[uint], f: &fn(uint)) {\n+pub fn iter(v: ~[uint], f: |uint|) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "3cfe615b9c019a6bb2e3c56efc200cc9f475d8f0", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -19,7 +19,7 @@ use std::trie::TrieMap;\n use std::uint;\n use std::vec;\n \n-fn timed(label: &str, f: &fn()) {\n+fn timed(label: &str, f: ||) {\n     let start = time::precise_time_s();\n     f();\n     let end = time::precise_time_s();"}, {"sha": "f9a3618d2abb61566decb693a14fc117c77cc05a", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -27,7 +27,7 @@ struct Results {\n     delete_strings: f64\n }\n \n-fn timed(result: &mut f64, op: &fn()) {\n+fn timed(result: &mut f64, op: ||) {\n     let start = extra::time::precise_time_s();\n     op();\n     let end = extra::time::precise_time_s();\n@@ -36,13 +36,12 @@ fn timed(result: &mut f64, op: &fn()) {\n \n impl Results {\n     pub fn bench_int<T:MutableSet<uint>,\n-                 R: rand::Rng>(\n-                 &mut self,\n-                 rng: &mut R,\n-                 num_keys: uint,\n-                 rand_cap: uint,\n-                 f: &fn() -> T) {\n-        {\n+                     R: rand::Rng>(\n+                     &mut self,\n+                     rng: &mut R,\n+                     num_keys: uint,\n+                     rand_cap: uint,\n+                     f: || -> T) { {\n             let mut set = f();\n             do timed(&mut self.sequential_ints) {\n                 for i in range(0u, num_keys) {\n@@ -79,11 +78,11 @@ impl Results {\n     }\n \n     pub fn bench_str<T:MutableSet<~str>,\n-                 R:rand::Rng>(\n-                 &mut self,\n-                 rng: &mut R,\n-                 num_keys: uint,\n-                 f: &fn() -> T) {\n+                     R:rand::Rng>(\n+                     &mut self,\n+                     rng: &mut R,\n+                     num_keys: uint,\n+                     f: || -> T) {\n         {\n             let mut set = f();\n             do timed(&mut self.sequential_strings) {"}, {"sha": "c7036f8d9db312a11aa70eb012eafc7033809b2c", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -40,7 +40,7 @@ fn main() {\n     bench!(argv, is_utf8_multibyte);\n }\n \n-fn maybe_run_test(argv: &[~str], name: ~str, test: &fn()) {\n+fn maybe_run_test(argv: &[~str], name: ~str, test: ||) {\n     let mut run_test = false;\n \n     if os::getenv(\"RUST_BENCH\").is_some() {"}, {"sha": "853b4eaba9d6832975adce4277373e93e4b2b2f5", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -104,8 +104,7 @@ fn update_freq(mm: &mut HashMap<~[u8], uint>, key: &[u8]) {\n // given a ~[u8], for each window call a function\n // i.e., for \"hello\" and windows of size four,\n // run it(\"hell\") and it(\"ello\"), then return \"llo\"\n-fn windows_with_carry(bb: &[u8], nn: uint,\n-                      it: &fn(window: &[u8])) -> ~[u8] {\n+fn windows_with_carry(bb: &[u8], nn: uint, it: |window: &[u8]|) -> ~[u8] {\n    let mut ii = 0u;\n \n    let len = bb.len();"}, {"sha": "f8ac5154e7b0d7ed10b5d82f5bad0cd6639b68c9", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -154,7 +154,7 @@ impl Table {\n         }\n     }\n \n-    fn each(&self, f: &fn(entry: &Entry) -> bool) {\n+    fn each(&self, f: |entry: &Entry| -> bool) {\n         for self.items.each |item| {\n             match *item {\n                 None => {}"}, {"sha": "ef853f57ef5e16b79e9bb65313c6044d9eb04061", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n \n struct sty(~[int]);\n \n-fn unpack(_unpack: &fn(v: &sty) -> ~[int]) {}\n+fn unpack(_unpack: |v: &sty| -> ~[int]) {}\n \n fn main() {\n     let _foo = unpack(|s| {"}, {"sha": "52359bed59c90438db721632d7da2cfbee3c0908", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     fn f(f: extern fn(extern fn(extern fn()))) {\n     }\n \n-    fn g(f: extern fn(&fn())) {\n+    fn g(f: extern fn(||)) {\n     }\n \n     f(g);"}, {"sha": "d07c3feb1942372dfe95db9cf08e4a29c4364bc4", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,9 +11,9 @@\n // Make sure that fn-to-block coercion isn't incorrectly lifted over\n // other tycons.\n \n-fn coerce(b: &fn()) -> extern fn() {\n-    fn lol(f: extern fn(v: &fn()) -> extern fn(),\n-           g: &fn()) -> extern fn() { return f(g); }\n+fn coerce(b: ||) -> extern fn() {\n+    fn lol(f: extern fn(v: ||) -> extern fn(),\n+           g: ||) -> extern fn() { return f(g); }\n     fn fn_id(f: extern fn()) -> extern fn() { return f }\n     return lol(fn_id, b);\n     //~^ ERROR mismatched types"}, {"sha": "55ef70ad8520fe37eb6eeae99cd9792428b3f35f", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -24,7 +24,7 @@ fn a() {\n     info!(\"{}\", *q);\n }\n \n-fn borrow(_x: &[int], _f: &fn()) {}\n+fn borrow(_x: &[int], _f: ||) {}\n \n fn b() {\n     // here we alias the mutable vector into an imm slice and try to"}, {"sha": "f834642eb3cc5874b7c170f35aef19dfb06e5b0c", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n struct X(Either<(uint,uint),extern fn()>);\n \n impl X {\n-    pub fn with(&self, blk: &fn(x: &Either<(uint,uint),extern fn()>)) {\n+    pub fn with(&self, blk: |x: &Either<(uint,uint),extern fn()>|) {\n         blk(&**self)\n     }\n }"}, {"sha": "358305aee08fbfa65a12621aa0e3f5ea26ee0d4f", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n }\n \n impl Foo {\n-    pub fn foo(&mut self, fun: &fn(&int)) {\n+    pub fn foo(&mut self, fun: |&int|) {\n         for f in self.n.iter() {\n             fun(f);\n         }"}, {"sha": "80b8770397fb2727bd5137bd58803c5c462e0e07", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -17,7 +17,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { fail!() }\n-fn for_func(_f: &fn() -> bool) { fail!() }\n+fn for_func(_f: || -> bool) { fail!() }\n fn produce<T>() -> T { fail!(); }\n \n fn inc(v: &mut ~int) {"}, {"sha": "14994c0245da99b1bbc9742c58898503250c5e92", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -111,7 +111,7 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: &fn(&'r mut uint) -> bool) {\n+fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n     // Here we check that when you break out of an inner loop, the\n     // borrows that go out of scope as you exit the inner loop are\n     // removed from the bitset.\n@@ -127,7 +127,7 @@ fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: &fn(&'r mut uint) -> bool)\n     }\n }\n \n-fn loop_loop_pops_scopes<'r>(_v: &'r mut [uint], f: &fn(&'r mut uint) -> bool) {\n+fn loop_loop_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n     // Similar to `loop_break_pops_scopes` but for the `loop` keyword\n \n     while cond() {"}, {"sha": "5e4e5bb1e73f1b51e9d273e0d283083b78e4959d", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -17,7 +17,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { fail!() }\n-fn for_func(_f: &fn() -> bool) { fail!() }\n+fn for_func(_f: || -> bool) { fail!() }\n fn produce<T>() -> T { fail!(); }\n \n fn inc(v: &mut ~int) {"}, {"sha": "7a226b8b67c0b797c806653de11285f9e1b3daa2", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n use std::task;\n \n-fn borrow(v: &int, f: &fn(x: &int)) {\n+fn borrow(v: &int, f: |x: &int|) {\n     f(v);\n }\n "}, {"sha": "417330b6864a7658480420416076bddda9b6a3ea", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn borrow(v: &int, f: &fn(x: &int)) {\n+fn borrow(v: &int, f: |x: &int|) {\n     f(v);\n }\n "}, {"sha": "e04eaa4d7af6ad256dcbd704351e19b734f37a9f", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,14 +12,14 @@ struct point { x: int, y: int }\n \n trait methods {\n     fn impurem(&self);\n-    fn blockm(&self, f: &fn());\n+    fn blockm(&self, f: ||);\n }\n \n impl methods for point {\n     fn impurem(&self) {\n     }\n \n-    fn blockm(&self, f: &fn()) { f() }\n+    fn blockm(&self, f: ||) { f() }\n }\n \n fn a() {"}, {"sha": "0617d1991911461483e77a37521974912123ae91", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n // (locally rooted) mutable, unique vector, and that we then prevent\n // modifications to the contents.\n \n-fn takes_imm_elt(_v: &int, f: &fn()) {\n+fn takes_imm_elt(_v: &int, f: ||) {\n     f();\n }\n "}, {"sha": "7615036300f6fefcf09b46f983e58cc9ea58f09f", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -1,4 +1,4 @@\n-fn with(f: &fn(&~str)) {}\n+fn with(f: |&~str|) {}\n \n fn arg_item(&_x: &~str) {}\n     //~^ ERROR cannot move out of dereference of & pointer"}, {"sha": "4afab8db5468b525cae2ed29fd6109ccfdbd189f", "filename": "src/test/compile-fail/closure-bounds-not-builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -1,7 +1,7 @@\n \n trait Foo {}\n \n-fn take(f: &fn:Foo()) {\n+fn take(f: ||:Foo) {\n     //~^ ERROR only the builtin traits can be used as closure or object bounds\n }\n "}, {"sha": "8fb64ee6dacec413e40ca847578dfe3c90e066b3", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn bar(blk: &fn:'static()) {\n+fn bar(blk: ||:'static) {\n }\n \n fn foo(x: &()) {"}, {"sha": "77281b26554b1f502fb49db5774486a0abdb880f", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -1,15 +1,15 @@\n \n-fn take_any(_: &fn:()) {\n+fn take_any(_: ||:) {\n }\n \n-fn take_const_owned(_: &fn:Freeze+Send()) {\n+fn take_const_owned(_: ||:Freeze+Send) {\n }\n \n-fn give_any(f: &fn:()) {\n+fn give_any(f: ||:) {\n     take_any(f);\n }\n \n-fn give_owned(f: &fn:Send()) {\n+fn give_owned(f: ||:Send) {\n     take_any(f);\n     take_const_owned(f); //~ ERROR expected bounds `Send+Freeze` but found bounds `Send`\n }"}, {"sha": "fc8e2d4d853f1e4f5ce23d5e07524536092bb29e", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -1,4 +1,4 @@\n-fn foo(f: &fn() -> !) {}\n+fn foo(f: || -> !) {}\n \n fn main() {\n     // Type inference didn't use to be able to handle this:"}, {"sha": "ffb779da354f8c590f1d5c30ca62cbede95a2aad", "filename": "src/test/compile-fail/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: &fn(int) -> bool) -> bool { f(10i) }\n+fn f(f: |int| -> bool) -> bool { f(10i) }\n \n fn main() {\n     assert!(do f() |i| { i == 10i } == 10i);"}, {"sha": "6b01b83db21fd31d0c097a459a52f00c9ba10411", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -14,5 +14,5 @@ extern fn f() {\n fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n-    let _x: &fn() = f; //~ ERROR mismatched types\n+    let _x: || = f; //~ ERROR mismatched types\n }"}, {"sha": "a4ebfef1774c63e13cda067a152263547693485e", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@\n fn takes_mut(x: @mut int) { }\n fn takes_imm(x: @int) { }\n \n-fn apply<T>(t: T, f: &fn(T)) {\n+fn apply<T>(t: T, f: |T|) {\n     f(t)\n }\n "}, {"sha": "663a50e9e553e1236b9de0ea08678193d8a68b80", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@ fn f(y: ~int) {\n }\n \n fn g() {\n-    let _frob: &fn(~int) = |q| { *q = 2; }; //~ ERROR cannot assign\n+    let _frob: |~int| = |q| { *q = 2; }; //~ ERROR cannot assign\n \n }\n "}, {"sha": "3b8c552db2bd29341b12a3fe07cc44e84a052bb9", "filename": "src/test/compile-fail/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,11 +10,11 @@\n \n // xfail-test\n fn main() {\n-    let one: &fn() -> uint = || {\n+    let one: || -> uint = || {\n         enum r { a };\n         a as uint\n     };\n-    let two = &fn() -> uint = || {\n+    let two = || -> uint = || {\n         enum r { a };\n         a as uint\n     };"}, {"sha": "8d2bdd2d2eb3673db1e55a61a99d604a8c39d11b", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: &fn(A) -> ~[B]);\n+    fn bind<B>(&self, f: |A| -> ~[B]);\n }\n \n impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B>(&self, f: &fn(A) -> ~[B]) {\n+    fn bind<B>(&self, f: |A| -> ~[B]) {\n         let mut r = fail!();\n         for elt in self.iter() { r = r + f(*elt); }\n         //~^ ERROR the type of this value must be known"}, {"sha": "ec9ec9565c4066fd5205793b05dbe9e57141a055", "filename": "src/test/compile-fail/issue-5216.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn f() { }\n-struct S(&fn()); //~ ERROR missing lifetime specifier\n+struct S(||); //~ ERROR missing lifetime specifier\n pub static C: S = S(f);\n \n \n fn g() { }\n-type T = &fn();  //~ ERROR missing lifetime specifier\n+type T = ||;  //~ ERROR missing lifetime specifier\n pub static D: T = g;\n \n fn main() {}"}, {"sha": "a316e3df042e03fb4aa7757148a00112c340b49e", "filename": "src/test/compile-fail/issue-5239-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,5 +11,5 @@\n // Regression test for issue #5239\n \n fn main() {\n-    let x: &fn(int) -> int = |ref x| { x += 1; }; //~ ERROR binary operation + cannot be applied to type `&int`\n+    let x: |int| -> int = |ref x| { x += 1; }; //~ ERROR binary operation + cannot be applied to type `&int`\n }"}, {"sha": "22bb660a080666160761e4c61c79c5cb9b8aee82", "filename": "src/test/compile-fail/issue-6762.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-6762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-6762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6762.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -4,20 +4,17 @@\n // transferring ownership of the owned box before invoking the stack\n // closure results in a crash.\n \n-fn twice(x: ~uint) -> uint\n-{\n+fn twice(x: ~uint) -> uint {\n      *x * 2\n }\n \n-fn invoke(f : &fn() -> uint)\n-{\n+fn invoke(f: || -> uint) {\n      f();\n }\n \n-fn main()\n-{\n+fn main() {\n       let x  : ~uint         = ~9;\n-      let sq : &fn() -> uint = || { *x * *x };\n+      let sq : || -> uint =  || { *x * *x };\n \n       twice(x);\n       invoke(sq);"}, {"sha": "4ab0ac6386e4c4fe75cff9206f8f64154b3f8746", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -35,7 +35,7 @@ pub fn remove_package_from_database() {\n \n }\n \n-pub fn list_database(f: &fn(&PkgId)) {\n+pub fn list_database(f: |&PkgId|) {\n     let stuff = [\"foo\", \"bar\"];\n \n     for l in stuff.iter() {"}, {"sha": "474c1b1d3cfa4aa9a4bbae28c66c7398e451421d", "filename": "src/test/compile-fail/kindck-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -45,7 +45,7 @@ fn test<'a,T,U:Freeze>(_: &'a int) {\n     assert_freeze::<&'a mut Dummy:Freeze>(); //~ ERROR does not fulfill `Freeze`\n \n     // closures are like an `&mut` object\n-    assert_freeze::<&fn()>(); //~ ERROR does not fulfill `Freeze`\n+    assert_freeze::<||>(); //~ ERROR does not fulfill `Freeze`\n \n     // unsafe ptrs are ok unless they point at unfreezeable things\n     assert_freeze::<*int>();"}, {"sha": "d73f0e6ab1e68f2f52624194cd57fad91b75e3fb", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -55,7 +55,7 @@ fn main() {\n     let mut _allowed = 1;\n }\n \n-fn callback(f: &fn()) {}\n+fn callback(f: ||) {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]"}, {"sha": "253459be85a82df3279f82a37d50a868c18dd4a1", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -18,7 +18,7 @@ mod foo {\n     }\n }\n \n-fn callback<T>(_f: &fn() -> T) -> T { fail!() }\n+fn callback<T>(_f: || -> T) -> T { fail!() }\n unsafe fn unsf() {}\n \n fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block"}, {"sha": "c46b9013a068d79ac00033711ef2ba6f8a436426", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: &fn()) { f(); }\n+fn force(f: ||) { f(); }\n fn main() {\n     let x: int;\n     force(|| {"}, {"sha": "9d46202d64e21143a62f5e1d62fe8b20c2734255", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: &fn() -> int) -> int { f() }\n+fn force(f: || -> int) -> int { f() }\n fn main() { info!(\"{:?}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "d759a5738bd22703b7187705b8dd3fdca5511201", "filename": "src/test/compile-fail/liveness-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let j: &fn() -> int = || {\n+    let j: || -> int = || {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "f6bb2f5428370893c8394bb9a2ee1a56b4eb6790", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f: &fn() -> int = || {\n+    let f: || -> int = || {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "5448766c30a72cb501e63666513baa0bce841815", "filename": "src/test/compile-fail/missing-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for issue #2783\n \n-fn foo(f: &fn()) { f() }\n+fn foo(f: ||) { f() }\n \n fn main() {\n     ~\"\" || 42; //~ ERROR binary operation || cannot be applied to type"}, {"sha": "355305b6c630c6a3f5901b9c5edf8bf4a3483ffb", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@ enum E {\n     Baz\n }\n \n-fn f(s: &S, g: &fn(&S)) {\n+fn f(s: &S, g: |&S|) {\n     g(s)\n }\n "}, {"sha": "db8effb1de3df0d6badac72a9ea9e2b470bb957d", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -36,7 +36,7 @@ fn innocent_looking_victim() {\n     }\n }\n \n-fn conspirator(f: &fn(&R, bool)) {\n+fn conspirator(f: |&R, bool|) {\n     let r = R {c: f};\n     f(&r, false) //~ ERROR use of moved value\n }"}, {"sha": "f43ff0421a9a76d4cef0f1e36261f3f3592fa811", "filename": "src/test/compile-fail/omitted-arg-wrong-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-test - #2093\n-fn let_in<T>(x: T, f: &fn(T)) {}\n+fn let_in<T>(x: T, f: |T|) {}\n \n fn main() {\n     let_in(3u, |i| { assert!(i == 3); });"}, {"sha": "4927acde48d8740bbaf4a28dc0d241370f16434b", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -15,7 +15,7 @@ extern mod extra;\n use extra::arc;\n use std::util;\n \n-fn foo(blk: &fn()) {\n+fn foo(blk: ||) {\n     blk();\n     blk();\n }"}, {"sha": "503b4d3e77b978e5ea0a80fb8e25cbe57e4a8669", "filename": "src/test/compile-fail/once-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n #[feature(once_fns)];\n fn main() {\n     let f: &once fn() = ||();\n-    let g: &fn() = f;  //~ ERROR mismatched types\n-    let h: &fn() = ||();\n+    let g: || = f;  //~ ERROR mismatched types\n+    let h: || = ||();\n     let i: &once fn() = h;  // ok\n }"}, {"sha": "f55fcfc204b2fcb3d47a621738b078675ea7c9a3", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -62,6 +62,6 @@ fn main() {\n     check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n }\n \n-fn check_pp<T>(expr: T, f: &fn(pprust::ps, T), expect: str) {\n+fn check_pp<T>(expr: T, f: |pprust::ps, T|, expect: str) {\n     fail!();\n }"}, {"sha": "262abc045a411d820fc597008e2324c27d4e28fb", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -57,6 +57,6 @@ fn main() {\n     check_pp(*stmt,  pprust::print_stmt, \"\");\n }\n \n-fn check_pp<T>(expr: T, f: &fn(pprust::ps, T), expect: str) {\n+fn check_pp<T>(expr: T, f: |pprust::ps, T|, expect: str) {\n     fail!();\n }"}, {"sha": "f66b17d68c76fa954eff2ba7432ee359e703c6fd", "filename": "src/test/compile-fail/regionck-closure-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn env<'a>(_: &'a uint, blk: &fn(p: &'a fn())) {\n+fn env<'a>(_: &'a uint, blk: |p: 'a |||) {\n     // Test that the closure here cannot be assigned\n     // the lifetime `'a`, which outlives the current\n     // block.\n@@ -21,7 +21,7 @@ fn env<'a>(_: &'a uint, blk: &fn(p: &'a fn())) {\n     blk(|| *statep = 1); //~ ERROR cannot infer an appropriate lifetime\n }\n \n-fn no_env_no_for<'a>(_: &'a uint, blk: &fn(p: &'a fn())) {\n+fn no_env_no_for<'a>(_: &'a uint, blk: |p: 'a |||) {\n     // Test that a closure with no free variables CAN\n     // outlive the block in which it is created.\n     //"}, {"sha": "0a370425c4165388684a516df56f74327bb6538a", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -27,7 +27,7 @@ fn compute(x: &ast) -> uint {\n     }\n }\n \n-fn map_nums(x: &ast, f: &fn(uint) -> uint) -> &ast {\n+fn map_nums(x: &ast, f: |uint| -> uint) -> &ast {\n     match *x {\n       num(x) => {\n         return &num(f(x)); //~ ERROR borrowed value does not live long enough"}, {"sha": "d2551ec4fedb444991cd1b402ed4b3640369ff74", "filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with_int(f: &fn(x: &int)) {\n+fn with_int(f: |x: &int|) {\n     let x = 3;\n     f(&x);\n }"}, {"sha": "eb72b4b0c53219a532c62ea42451f3302417d09b", "filename": "src/test/compile-fail/regions-escape-bound-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with_int(f: &fn(x: &int)) {\n+fn with_int(f: |x: &int|) {\n     let x = 3;\n     f(&x);\n }"}, {"sha": "32ec59d97413b006c70296e525d77bfba00bf90d", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -18,7 +18,7 @@ impl<'self> deref for &'self int {\n     }\n }\n \n-fn with<R:deref>(f: &fn(x: &int) -> R) -> int {\n+fn with<R:deref>(f: |x: &int| -> R) -> int {\n     f(&3).get()\n }\n "}, {"sha": "09801d37ee92c5ec6f91375d603419324974b608", "filename": "src/test/compile-fail/regions-fn-bound.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,8 +11,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> &fn(T) { fail!(); }\n-fn subtype<T>(x: &fn(T)) { fail!(); }\n+fn of<T>() -> |T| { fail!(); }\n+fn subtype<T>(x: |T|) { fail!(); }\n \n fn test_fn<T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters\n@@ -21,14 +21,14 @@ fn test_fn<T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // iff T1 <: T2.\n \n     // should be the default:\n-    subtype::<&'static fn()>(of::<&fn()>());\n-    subtype::<&fn()>(of::<&'static fn()>());\n+    subtype::<'static ||>(of::<||>());\n+    subtype::<||>(of::<'static ||>());\n \n     //\n-    subtype::<&'x fn()>(of::<&fn()>());    //~ ERROR mismatched types\n-    subtype::<&'x fn()>(of::<&'y fn()>());  //~ ERROR mismatched types\n+    subtype::<'x ||>(of::<||>());    //~ ERROR mismatched types\n+    subtype::<'x ||>(of::<'y ||>());  //~ ERROR mismatched types\n \n-    subtype::<&'x fn()>(of::<&'static fn()>()); //~ ERROR mismatched types\n-    subtype::<&'static fn()>(of::<&'x fn()>());\n+    subtype::<'x ||>(of::<'static ||>()); //~ ERROR mismatched types\n+    subtype::<'static ||>(of::<'x ||>());\n \n }"}, {"sha": "0cbd37a3b9a5ea9531fdb48ac096fa3fffb364a5", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,38 +8,38 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> &fn(T) { fail!(); }\n-fn subtype<T>(x: &fn(T)) { fail!(); }\n+fn of<T>() -> |T| { fail!(); }\n+fn subtype<T>(x: |T|) { fail!(); }\n \n fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters\n     // are bound.  Note that the arrangement\n     // subtype::<T1>(of::<T2>()) will typecheck\n     // iff T1 <: T2.\n \n-    subtype::<&fn<'a>(&'a T)>(\n-        of::<&fn<'a>(&'a T)>());\n+    subtype::< <'a>|&'a T|>(\n+        of::< <'a>|&'a T|>());\n \n-    subtype::<&fn<'a>(&'a T)>(\n-        of::<&fn<'b>(&'b T)>());\n+    subtype::< <'a>|&'a T|>(\n+        of::< <'b>|&'b T|>());\n \n-    subtype::<&fn<'b>(&'b T)>(\n-        of::<&fn(&'x T)>());\n+    subtype::< <'b>|&'b T|>(\n+        of::<|&'x T|>());\n \n-    subtype::<&fn(&'x T)>(\n-        of::<&fn<'b>(&'b T)>());  //~ ERROR mismatched types\n+    subtype::<|&'x T|>(\n+        of::< <'b>|&'b T|>());  //~ ERROR mismatched types\n \n-    subtype::<&fn<'a,'b>(&'a T, &'b T)>(\n-        of::<&fn<'a>(&'a T, &'a T)>());\n+    subtype::< <'a,'b>|&'a T, &'b T|>(\n+        of::< <'a>|&'a T, &'a T|>());\n \n-    subtype::<&fn<'a>(&'a T, &'a T)>(\n-        of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n+    subtype::< <'a>|&'a T, &'a T|>(\n+        of::< <'a,'b>|&'a T, &'b T|>()); //~ ERROR mismatched types\n \n-    subtype::<&fn<'a,'b>(&'a T, &'b T)>(\n-        of::<&fn(&'x T, &'y T)>());\n+    subtype::< <'a,'b>|&'a T, &'b T|>(\n+        of::<|&'x T, &'y T|>());\n \n-    subtype::<&fn(&'x T, &'y T)>(\n-        of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n+    subtype::<|&'x T, &'y T|>(\n+        of::< <'a,'b>|&'a T, &'b T|>()); //~ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "854584ec535e66ddb57ae48002b9c1a82e8bd3af", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n // we reported errors in this case:\n \n fn not_ok<'b>(a: &uint, b: &'b uint) {\n-    let mut g: &fn(x: &uint) = |x: &'b uint| {};\n+    let mut g: |x: &uint| = |x: &'b uint| {};\n     //~^ ERROR mismatched types\n     g(a);\n }"}, {"sha": "94c617b21826617339f10052014fd6a849e39519", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -30,7 +30,7 @@ fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n     fail!();\n }\n \n-fn ordering4<'a, 'b>(a: &'a uint, b: &'b uint, x: &fn(&'a &'b uint)) {\n+fn ordering4<'a, 'b>(a: &'a uint, b: &'b uint, x: |&'a &'b uint|) {\n     let z: Option<&'a &'b uint> = None;\n }\n "}, {"sha": "808e850907f28d94f5679fbb68dc2eb7255e6eec", "filename": "src/test/compile-fail/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -26,7 +26,7 @@ fn call3<'a, 'b>(a: &'a uint, b: &'b uint) {\n }\n \n fn call4<'a, 'b>(a: &'a uint, b: &'b uint) {\n-    let z: Option<&fn(&'a &'b uint)> = None;\n+    let z: Option<|&'a &'b uint|> = None;\n     //~^ ERROR pointer has a longer lifetime than the data it references\n }\n "}, {"sha": "26b0f2b66c38770db385309de9591815c2d0ff19", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n \n-fn foo(cond: &fn() -> bool, box: &fn() -> @int) {\n+fn foo(cond: || -> bool, box: || -> @int) {\n     let mut y: &int;\n     loop {\n         let x = box();"}, {"sha": "8002f8bcc50d2db1ae4a12a7a55b32acf2c2872e", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n fn select<'r>(x: &'r int, y: &'r int) -> &'r int { x }\n \n-fn with<T>(f: &fn(x: &int) -> T) -> T {\n+fn with<T>(f: |x: &int| -> T) -> T {\n     f(&20)\n }\n "}, {"sha": "ba3d7bd29f4acf507f83551d094aa3b58cf2f2e9", "filename": "src/test/compile-fail/regions-name-undeclared.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -43,16 +43,16 @@ fn bar<'a>(x: &'a int) {\n \n     // &'a CAN be declared on functions and used then:\n     fn g<'a>(a: &'a int) { } // OK\n-    fn h(a: &fn<'a>(&'a int)) { } // OK\n+    fn h(a: <'a>|&'a int|) { } // OK\n }\n \n // Test nesting of lifetimes in fn type declarations\n fn fn_types(a: &'a int, //~ ERROR undeclared lifetime\n-            b: &fn<'a>(a: &'a int,\n-                       b: &'b int, //~ ERROR undeclared lifetime\n-                       c: &fn<'b>(a: &'a int,\n-                                  b: &'b int),\n-                       d: &'b int), //~ ERROR undeclared lifetime\n+            b: <'a>|a: &'a int,\n+                    b: &'b int, //~ ERROR undeclared lifetime\n+                    c: <'b>|a: &'a int,\n+                            b: &'b int|,\n+                    d: &'b int|, //~ ERROR undeclared lifetime\n             c: &'a int) //~ ERROR undeclared lifetime\n {\n }"}, {"sha": "8e9a7546541d09675fbb5d4b26564490b41c2ddb", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ignore(_f: &fn<'z>(&'z int) -> &'z int) {}\n+fn ignore(_f: <'z>|&'z int| -> &'z int) {}\n \n fn nested() {\n     let y = 3;"}, {"sha": "11610f422a0c8121ca7192cf9c1118fd346de6da", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -14,13 +14,13 @@ fn nested<'x>(x: &'x int) {\n     let y = 3;\n     let mut ay = &y; //~ ERROR cannot infer an appropriate lifetime\n \n-    ignore::<&fn<'z>(&'z int)>(|z| {\n+    ignore::< <'z>|&'z int|>(|z| {\n         ay = x;\n         ay = &y;\n         ay = z;\n     });\n \n-    ignore::<&fn<'z>(&'z int) -> &'z int>(|z| {\n+    ignore::< <'z>|&'z int| -> &'z int>(|z| {\n         if false { return x; }  //~ ERROR mismatched types\n         //~^ ERROR cannot infer an appropriate lifetime\n         if false { return ay; }"}, {"sha": "9574f05fa5852fdc9cd1054b8d2cd8df106afc5b", "filename": "src/test/compile-fail/regions-ref-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -2,7 +2,7 @@ fn arg_item(~ref x: ~int) -> &'static int {\n     x //~^ ERROR borrowed value does not live long enough\n }\n \n-fn with<R>(f: &fn(~int) -> R) -> R { f(~3) }\n+fn with<R>(f: |~int| -> R) -> R { f(~3) }\n \n fn arg_closure() -> &'static int {\n     with(|~ref x| x) //~ ERROR borrowed value does not live long enough"}, {"sha": "7eb5fa3c60be6de41b98526e9e562609c5591008", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n // some point regions-ret-borrowed reported an error but this file did\n // not, due to special hardcoding around the anonymous region.\n \n-fn with<R>(f: &fn<'a>(x: &'a int) -> R) -> R {\n+fn with<R>(f: <'a>|x: &'a int| -> R) -> R {\n     f(&3)\n }\n "}, {"sha": "2f6f2f44cda585e9cf60a53ca65e74ef607b2b2b", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -15,7 +15,7 @@\n // used to successfully compile because we failed to account for the\n // fact that fn(x: &int) rebound the region &.\n \n-fn with<R>(f: &fn(x: &int) -> R) -> R {\n+fn with<R>(f: |x: &int| -> R) -> R {\n     f(&3)\n }\n "}, {"sha": "240b1aa06d472853d02ba0850fe9a035895c9e9e", "filename": "src/test/compile-fail/type-arg-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:attempt to use a type argument out of scope\n fn foo<T>(x: T) {\n-    fn bar(f: &fn(T) -> T) { }\n+    fn bar(f: |T| -> T) { }\n }\n fn main() { foo(1); }"}, {"sha": "f052448c146a637a922a1e55d871e7c5d1ccd799", "filename": "src/test/debug-info/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -51,7 +51,7 @@ fn main() {\n     zzz();\n     sentinel();\n \n-    let stack_closure: &fn(int) = |x| {\n+    let stack_closure: |int| = |x| {\n         zzz();\n         sentinel();\n "}, {"sha": "1f5e455564e348d6cfc2e2c11423c81ba42e8ae6", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@\n #[allow(unreachable_code)];\n #[allow(unused_variable)];\n \n-fn x(it: &fn(int)) {\n+fn x(it: |int|) {\n     fail!();\n     it(0);\n }"}, {"sha": "d0726d2544ca6fb1463bcd1409a1a0eff465f99f", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn x(it: &fn(int)) {\n+fn x(it: |int|) {\n     let _a = @0;\n     it(1);\n }"}, {"sha": "bd415e9eac3e73eb9223ac84c987df0c4841afbd", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -16,13 +16,13 @@ fn main() {\n     let cheese = ~\"roquefort\";\n     let carrots = @~\"crunchy\";\n \n-    let result: &'static fn(@~str, &fn(~str)) = (|tasties, macerate| {\n+    let result: &'static fn(@~str, |~str|) = (|tasties, macerate| {\n         macerate((*tasties).clone());\n     });\n     result(carrots, |food| {\n         let mush = food + cheese;\n         let cheese = cheese.clone();\n-        let f: &fn() = || {\n+        let f: || = || {\n             let _chew = mush + cheese;\n             fail!(\"so yummy\")\n         };"}, {"sha": "0fcd49790e072604bb373e0d6ccfb3bd65e51990", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -74,7 +74,7 @@ fn main() {\n }\n \n fn check_pp<T>(cx: fake_ext_ctxt,\n-               expr: T, f: &fn(pprust::ps, T), expect: ~str) {\n+               expr: T, f: |pprust::ps, T|, expect: ~str) {\n     let s = do io::with_str_writer |wr| {\n         let pp = pprust::rust_printer(wr, cx.parse_sess().interner);\n         f(pp, expr);"}, {"sha": "7f43642463e1e4092a6a0111e01a2d77c200b2af", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -21,7 +21,7 @@ fn f1(a: &mut X, b: &mut int, c: int) -> int {\n     return r;\n }\n \n-fn f2(a: int, f: &fn(int)) -> int { f(1); return a; }\n+fn f2(a: int, f: |int|) -> int { f(1); return a; }\n \n pub fn main() {\n     let mut a = X {x: 1};"}, {"sha": "1da5023dce023f92432eb46515eab05c9c9bdab5", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,17 +13,17 @@\n // it.\n \n trait iterable<A> {\n-    fn iterate(&self, blk: &fn(x: &A) -> bool) -> bool;\n+    fn iterate(&self, blk: |x: &A| -> bool) -> bool;\n }\n \n impl<'self,A> iterable<A> for &'self [A] {\n-    fn iterate(&self, f: &fn(x: &A) -> bool) -> bool {\n+    fn iterate(&self, f: |x: &A| -> bool) -> bool {\n         self.iter().advance(f)\n     }\n }\n \n impl<A> iterable<A> for ~[A] {\n-    fn iterate(&self, f: &fn(x: &A) -> bool) -> bool {\n+    fn iterate(&self, f: |x: &A| -> bool) -> bool {\n         self.iter().advance(f)\n     }\n }"}, {"sha": "c0ceb50a2c4bec72ee84612d963589a96b0484cc", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,10 +10,10 @@\n \n fn f<T>(x: ~[T]) -> T { return x[0]; }\n \n-fn g(act: &fn(~[int]) -> int) -> int { return act(~[1, 2, 3]); }\n+fn g(act: |~[int]| -> int) -> int { return act(~[1, 2, 3]); }\n \n pub fn main() {\n     assert_eq!(g(f), 1);\n-    let f1: &fn(~[~str]) -> ~str = f;\n+    let f1: |~[~str]| -> ~str = f;\n     assert_eq!(f1(~[~\"x\", ~\"y\", ~\"z\"]), ~\"x\");\n }"}, {"sha": "70307e1ff0465424f4b5f99d785c3747d7738445", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,11 +10,11 @@\n \n extern mod extra;\n \n-fn asSendfn( f : proc()->uint ) -> uint {\n+fn asSendfn(f: proc() -> uint) -> uint {\n    return f();\n }\n \n-fn asBlock( f : &fn()->uint ) -> uint {\n+fn asBlock(f: || -> uint) -> uint {\n    return f();\n }\n "}, {"sha": "0d82e294caf22bd035c631ae36d28f82085b840d", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    fn f(i: &fn() -> uint) -> uint { i() }\n+    fn f(i: || -> uint) -> uint { i() }\n     let v = ~[-1.0, 0.0, 1.0, 2.0, 3.0];\n     let z = do do v.iter().fold(f) |x, _y| { x } { 22u };\n     assert_eq!(z, 22u);"}, {"sha": "f05eb8e30b17cd2f5c8748976c96e4150a18a5e8", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn call_any(f: &fn() -> uint) -> uint {\n+fn call_any(f: || -> uint) -> uint {\n     return f();\n }\n "}, {"sha": "82e563ae41ced32dd91533988bf6313ec0fc2440", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn main() {\n-    fn as_buf<T>(s: ~str, f: &fn(~str) -> T) -> T { f(s) }\n+    fn as_buf<T>(s: ~str, f: |~str| -> T) -> T { f(s) }\n     as_buf(~\"foo\", |foo: ~str| -> () error!(\"{}\", foo) );\n }"}, {"sha": "bbb30e9578e9e10a26389db3b2e3efafa327f6c0", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: &fn() -> int) -> int { return f(); }\n+fn force(f: || -> int) -> int { return f(); }\n pub fn main() {\n     fn f() -> int { return 7; }\n     assert_eq!(force(f), 7);"}, {"sha": "821f4b17a79b18393785488686b820724be48790", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-fn iter_vec<T>(v: ~[T], f: &fn(&T)) { for x in v.iter() { f(x); } }\n+fn iter_vec<T>(v: ~[T], f: |&T|) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7];"}, {"sha": "ddaf7f233cf01f0c6c11ef15b2afe86b1ec5e4fe", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-fn iter_vec<T>(v: ~[T], f: &fn(&T)) { for x in v.iter() { f(x); } }\n+fn iter_vec<T>(v: ~[T], f: |&T|) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n     let v = ~[1, 2, 3, 4, 5];"}, {"sha": "dae10ed6d3917d634d71b308b8c9559d96e47e7c", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@\n use std::borrow;\n use std::ptr;\n \n-fn borrow(x: &int, f: &fn(x: &int)) {\n+fn borrow(x: &int, f: |x: &int|) {\n     f(x)\n }\n "}, {"sha": "7b4c4247a353bc7dfaff0f9788ec47c3fe5f4b35", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -20,7 +20,7 @@ fn add_int(x: &mut Ints, v: int) {\n     util::swap(&mut values, &mut x.values);\n }\n \n-fn iter_ints(x: &Ints, f: &fn(x: &int) -> bool) -> bool {\n+fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {\n     let l = x.values.len();\n     range(0u, l).advance(|i| f(&x.values[i]))\n }"}, {"sha": "bc8eeb5cd41784f036867660152008840ea40ddf", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n use std::ptr;\n \n-fn borrow(x: &int, f: &fn(x: &int)) {\n+fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n     f(x);\n     let after = *x;"}, {"sha": "3ff30192efed897fa79a8974fdb6952d267fe28a", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n use std::ptr;\n \n-fn borrow(x: &int, f: &fn(x: &int)) {\n+fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n     f(x);\n     let after = *x;"}, {"sha": "e83621d6bb280b8fb395211864488e6410c2a71b", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n use std::ptr;\n \n-fn borrow(x: &int, f: &fn(x: &int)) {\n+fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n     f(x);\n     let after = *x;"}, {"sha": "6041fa977f5c37441eb35b3d095b48c728a313af", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n use std::ptr;\n \n-fn borrow(x: &int, f: &fn(x: &int)) {\n+fn borrow(x: &int, f: |x: &int|) {\n     let before = *x;\n     f(x);\n     let after = *x;"}, {"sha": "b6943b45700180f145160b2c6ebd42cffa385474", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n fn foo(i: int) -> int { i + 1 }\n \n-fn apply<A>(f: &fn(A) -> A, v: A) -> A { f(v) }\n+fn apply<A>(f: |A| -> A, v: A) -> A { f(v) }\n \n pub fn main() {\n     let f = {|i| foo(i)};"}, {"sha": "0078294eb89d58e92906bf1f979199f3d0d424f9", "filename": "src/test/run-pass/do-empty-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n // no-reformat\n // Testing various forms of `do` with empty arg lists\n \n-fn f(_f: &fn() -> bool) -> bool {\n+fn f(_f: || -> bool) -> bool {\n     true\n }\n "}, {"sha": "eb6a4a3db542150e56007ced3bc7b8fba3ace8b9", "filename": "src/test/run-pass/do-no-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-no-args.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,9 +10,9 @@\n \n // Testing that we can drop the || in do exprs\n \n-fn f(_f: &fn() -> bool) -> bool { true }\n+fn f(_f: || -> bool) -> bool { true }\n \n-fn d(_f: &fn()) { }\n+fn d(_f: ||) { }\n \n pub fn main() {\n     do d { }"}, {"sha": "85bb84c6061ac4477b8d78c968952f8b13cc9fb2", "filename": "src/test/run-pass/do-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-pure.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(_f: &fn()) {\n+fn f(_f: ||) {\n }\n \n fn g() {"}, {"sha": "fddf3b15c78da4ec5bf8af7a1bc904b718a659f0", "filename": "src/test/run-pass/do-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-stack.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: &fn(int)) { f(10) }\n+fn f(f: |int|) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert!(i == 10) }"}, {"sha": "fddf3b15c78da4ec5bf8af7a1bc904b718a659f0", "filename": "src/test/run-pass/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: &fn(int)) { f(10) }\n+fn f(f: |int|) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert!(i == 10) }"}, {"sha": "1bfb10a9f7568771ca224947e9f2addadc166e05", "filename": "src/test/run-pass/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: &fn(int) -> int) -> int { f(10) }\n+fn f(f: |int| -> int) -> int { f(10) }\n \n pub fn main() {\n     assert_eq!(do f() |i| { i }, 10);"}, {"sha": "c08842a45ce7743151e8f903673bcd76e0445722", "filename": "src/test/run-pass/do3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: &fn(int) -> int) -> int { f(10) }\n+fn f(f: |int| -> int) -> int { f(10) }\n \n pub fn main() {\n     assert_eq!(do f |i| { i }, 10);"}, {"sha": "1231a49dcd31be7f521683c87b9e8797fdcfa495", "filename": "src/test/run-pass/fn-bare-coerce-to-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n fn bare() {}\n \n-fn likes_block(f: &fn()) { f() }\n+fn likes_block(f: ||) { f() }\n \n pub fn main() {\n     likes_block(bare);"}, {"sha": "fb75abc6ea0934bba220ecef8d2e6234bda73dc0", "filename": "src/test/run-pass/fn-pattern-expected-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let f: &fn((int,int)) = |(x, y)| {\n+    let f: |(int,int)| = |(x, y)| {\n         assert_eq!(x, 1);\n         assert_eq!(y, 2);\n     };"}, {"sha": "cf783ca141c0aa8b3c877952a59ebdbc4e6f7d00", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n #[allow(unused_variable)];\n \n pub fn main() {\n-    // We should be able to type infer inside of &fns.\n+    // We should be able to type infer inside of ||s.\n     let _f = || {\n         let i = 10;\n     };"}, {"sha": "1f63bd68d34f7b1fe8dc4d3c2884de16d1be0c2b", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n \n \n \n-fn two(it: &fn(int)) { it(0); it(1); }\n+fn two(it: |int|) { it(0); it(1); }\n \n pub fn main() {\n     let mut a: ~[int] = ~[-1, -1, -1, -1];"}, {"sha": "91468841e092355acd98797433c70de615cb0fbc", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn pairs(it: &fn((int, int))) {\n+fn pairs(it: |(int, int)|) {\n     let mut i: int = 0;\n     let mut j: int = 0;\n     while i < 10 { it((i, j)); i += 1; j += i; }"}, {"sha": "34b131893269a3d081a95f195870d0d123f46be2", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     assert_eq!(sum, 45);\n }\n \n-fn first_ten(it: &fn(int)) {\n+fn first_ten(it: |int|) {\n     let mut i: int = 0;\n     while i < 10 { info!(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "479f4f8387fb46a00dd780d6671d453d5a852ecf", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ho(f: &fn(int) -> int) -> int { let n: int = f(3); return n; }\n+fn ho(f: |int| -> int) -> int { let n: int = f(3); return n; }\n \n fn direct(x: int) -> int { return x + 1; }\n "}, {"sha": "5832c565d7f4c901c1d61f5f9e68d97b8fa6bd3b", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait vec_utils<T> {\n-    fn map_<U>(x: &Self, f: &fn(&T) -> U) -> ~[U];\n+    fn map_<U>(x: &Self, f: |&T| -> U) -> ~[U];\n }\n \n impl<T> vec_utils<T> for ~[T] {\n-    fn map_<U>(x: &~[T], f: &fn(&T) -> U) -> ~[U] {\n+    fn map_<U>(x: &~[T], f: |&T| -> U) -> ~[U] {\n         let mut r = ~[];\n         for elt in x.iter() {\n             r.push(f(elt));"}, {"sha": "ce5c932f8da2e82b3a42941f5cf2b42122e4c51c", "filename": "src/test/run-pass/issue-1458.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-1458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-1458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1458.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn plus_one(f: &fn() -> int) -> int {\n+fn plus_one(f: || -> int) -> int {\n   return f() + 1;\n }\n \n-fn ret_plus_one() -> extern fn(&fn() -> int) -> int {\n+fn ret_plus_one() -> extern fn(|| -> int) -> int {\n   return plus_one;\n }\n "}, {"sha": "afe7656b7a343756876bb2d4ba7d2ccba0ebf2a2", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -18,12 +18,12 @@\n //\n // Running /usr/local/bin/rustc:\n // issue-2185.rs:24:0: 26:1 error: conflicting implementations for a trait\n-// issue-2185.rs:24 impl iterable<uint> for &'static fn(&fn(uint)) {\n-// issue-2185.rs:25     fn iter(&self, blk: &fn(v: uint)) { self( |i| blk(i) ) }\n+// issue-2185.rs:24 impl iterable<uint> for &'static fn(|uint|) {\n+// issue-2185.rs:25     fn iter(&self, blk: |v: uint|) { self( |i| blk(i) ) }\n // issue-2185.rs:26 }\n // issue-2185.rs:20:0: 22:1 note: note conflicting implementation here\n-// issue-2185.rs:20 impl<A> iterable<A> for &'static fn(&fn(A)) {\n-// issue-2185.rs:21     fn iter(&self, blk: &fn(A)) { self(blk); }\n+// issue-2185.rs:20 impl<A> iterable<A> for 'static ||A|| {\n+// issue-2185.rs:21     fn iter(&self, blk: |A|) { self(blk); }\n // issue-2185.rs:22 }\n //\n // \u2026 so it looks like it's just not possible to implement both the generic iterable<uint> and iterable<A> for the type iterable<uint>. Is it okay if I just remove this test?\n@@ -39,34 +39,32 @@\n // warrant still having a test, so I inlined the old definitions.\n \n trait iterable<A> {\n-    fn iter(&self, blk: &fn(A));\n+    fn iter(&self, blk: |A|);\n }\n \n-impl<A> iterable<A> for &'static fn(&fn(A)) {\n-    fn iter(&self, blk: &fn(A)) { self(blk); }\n+impl<A> iterable<A> for 'static ||A|| {\n+    fn iter(&self, blk: |A|) { self(blk); }\n }\n \n-impl iterable<uint> for &'static fn(&fn(uint)) {\n-    fn iter(&self, blk: &fn(v: uint)) { self( |i| blk(i) ) }\n+impl iterable<uint> for 'static ||uint|| {\n+    fn iter(&self, blk: |v: uint|) { self( |i| blk(i) ) }\n }\n \n-fn filter<A,IA:iterable<A>>(self: IA,\n-                            prd: &'static fn(A) -> bool,\n-                            blk: &fn(A)) {\n+fn filter<A,IA:iterable<A>>(self: IA, prd: 'static |A| -> bool, blk: |A|) {\n     do self.iter |a| {\n         if prd(a) { blk(a) }\n     }\n }\n \n-fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: &fn(B, A) -> B) -> B {\n+fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: |B, A| -> B) -> B {\n     let mut b = b0;\n     do self.iter |a| {\n         b = blk(b, a);\n     }\n     b\n }\n \n-fn range(lo: uint, hi: uint, it: &fn(uint)) {\n+fn range(lo: uint, hi: uint, it: |uint|) {\n     let mut i = lo;\n     while i < hi {\n         it(i);\n@@ -75,8 +73,8 @@ fn range(lo: uint, hi: uint, it: &fn(uint)) {\n }\n \n pub fn main() {\n-    let range: &'static fn(&fn(uint)) = |a| range(0u, 1000u, a);\n-    let filt: &'static fn(&fn(v: uint)) = |a| filter(\n+    let range: 'static ||uint|| = |a| range(0u, 1000u, a);\n+    let filt: 'static ||v: uint|| = |a| filter(\n         range,\n         |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n         a);"}, {"sha": "571944e5300b8262fa4724421d307a439098f7a0", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,19 +10,19 @@\n \n // xfail-test FIXME #2190\n mod a {\n-    fn foo(f: &fn()) { f() }\n+    fn foo(f: ||) { f() }\n     fn bar() {}\n     pub fn main() { foo(||bar()); }\n }\n \n mod b {\n-    fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n+    fn foo(f: Option<||>) { f.iter(|x|x()) }\n     fn bar() {}\n     pub fn main() { foo(Some(bar)); }\n }\n \n mod c {\n-    fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n+    fn foo(f: Option<||>) { f.iter(|x|x()) }\n     fn bar() {}\n     pub fn main() { foo(Some(||bar())); }\n }"}, {"sha": "110bceced82a1085772eedae9e5ae7b4c0a31c5d", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -31,7 +31,7 @@ fn socket() -> socket {\n     }\n }\n \n-fn closure(f: &fn()) { f() }\n+fn closure(f: ||) { f() }\n \n fn setsockopt_bytes(_sock: int) { }\n "}, {"sha": "cce90f8a2cd29339edf892cfdfce9f55f0b3618a", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n   let x = 1;\n-  let y: &fn() -> int = || x;\n+  let y: || -> int = || x;\n   let _z = y();\n }"}, {"sha": "a7c6f86b45357b5f7dbd6ca0d54e798c25015e28", "filename": "src/test/run-pass/issue-3796.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3796.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n #[deny(dead_assignment)];\n fn main() {\n     let mut x = 1;\n-    let f: &fn() -> int = || { x + 20 };\n+    let f: || -> int = || { x + 20 };\n     assert_eq!(f(), 21);\n     x += 1;\n     assert_eq!(f(), 22);"}, {"sha": "40725311f313cbab9770b6923aacf76a55449d0f", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n enum PureCounter { PureCounter(uint) }\n \n-fn each(thing: PureCounter, blk: &fn(v: &uint)) {\n+fn each(thing: PureCounter, blk: |v: &uint|) {\n     let PureCounter(ref x) = thing;\n     blk(x);\n }"}, {"sha": "4a9b58067b0561717d3621f674259a610f36df79", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-test\n-type ErrPrinter = &fn(&str, &str);\n+type ErrPrinter = |&str, &str|;\n \n fn example_err(prog: &str, arg: &str) {\n     println!(\"{}: {}\", prog, arg)"}, {"sha": "eabc1cfeb595ff891d1bc965f7266d1b398c7606", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #5239\n \n pub fn main() { \n-    let _f: &fn(int) -> int = |ref x: int| { *x };\n+    let _f: |int| -> int = |ref x: int| { *x };\n     let foo = 10;\n     assert!(_f(foo) == 10);\n }"}, {"sha": "f7d0316880a4d3d196c38b59c560d5838c3032a1", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn swap(f: &fn(~[int]) -> ~[int]) -> ~[int] {\n+fn swap(f: |~[int]| -> ~[int]) -> ~[int] {\n     let x = ~[1, 2, 3];\n     f(x)\n }"}, {"sha": "12dcc4ecd2c3a1b6685f364250b606bc581a2c0e", "filename": "src/test/run-pass/issue-868.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-868.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T>(g: &fn() -> T) -> T { g() }\n+fn f<T>(g: || -> T) -> T { g() }\n \n pub fn main() {\n   let _x = f( | | { 10 });"}, {"sha": "c44b7389666f9fe0a42a9c78352c605cda050c45", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn range_(a: int, b: int, it: &fn(int)) {\n+fn range_(a: int, b: int, it: |int|) {\n     assert!((a < b));\n     let mut i: int = a;\n     while i < b { it(i); i += 1; }"}, {"sha": "b6ee2d10fb33f9f3e32a0a632f3b1577f4fe4e6d", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n // This should typecheck even though the type of e is not fully\n-// resolved when we finish typechecking the &fn.\n+// resolved when we finish typechecking the ||.\n \n \n struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let _f: &fn() = || error!(\"{}\", e.n);\n+    let _f: || = || error!(\"{}\", e.n);\n     e.refs.push(1);\n }"}, {"sha": "8117c5657e9892b8e742da0b6433d223ce33867e", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,16 +10,16 @@\n \n // Issue #1818\n \n-fn lp<T>(s: ~str, f: &fn(~str) -> T) -> T {\n+fn lp<T>(s: ~str, f: |~str| -> T) -> T {\n     while false {\n         let r = f(s);\n         return (r);\n     }\n     fail!();\n }\n \n-fn apply<T>(s: ~str, f: &fn(~str) -> T) -> T {\n-    fn g<T>(s: ~str, f: &fn(~str) -> T) -> T {f(s)}\n+fn apply<T>(s: ~str, f: |~str| -> T) -> T {\n+    fn g<T>(s: ~str, f: |~str| -> T) -> T {f(s)}\n     g(s, |v| { let r = f(v); r })\n }\n "}, {"sha": "c34e65b2b421388de2f71f4ffda6deaaa4be9c1d", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@\n struct A { a: ~int }\n \n pub fn main() {\n-    fn invoke(f: &fn()) { f(); }\n+    fn invoke(f: ||) { f(); }\n     let k = ~22;\n     let _u = A {a: k.clone()};\n     invoke(|| error!(\"{:?}\", k.clone()) )"}, {"sha": "fc851e444e86be7803b2fcaa6b8364ea7842e1fc", "filename": "src/test/run-pass/match-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-phi.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@\n \n enum thing { a, b, c, }\n \n-fn foo(it: &fn(int)) { it(10); }\n+fn foo(it: |int|) { it(10); }\n \n pub fn main() {\n     let mut x = true;"}, {"sha": "891ee4812c1b89a6370124467851881072598de0", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -11,11 +11,11 @@\n // xfail-fast\n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: &fn(&A) -> ~[B]) -> ~[B];\n+    fn bind<B>(&self, f: |&A| -> ~[B]) -> ~[B];\n }\n \n impl<A> vec_monad<A> for ~[A] {\n-    fn bind<B>(&self, f: &fn(&A) -> ~[B]) -> ~[B] {\n+    fn bind<B>(&self, f: |&A| -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n         for elt in self.iter() {\n             r.push_all_move(f(elt));\n@@ -25,11 +25,11 @@ impl<A> vec_monad<A> for ~[A] {\n }\n \n trait option_monad<A> {\n-    fn bind<B>(&self, f: &fn(&A) -> Option<B>) -> Option<B>;\n+    fn bind<B>(&self, f: |&A| -> Option<B>) -> Option<B>;\n }\n \n impl<A> option_monad<A> for Option<A> {\n-    fn bind<B>(&self, f: &fn(&A) -> Option<B>) -> Option<B> {\n+    fn bind<B>(&self, f: |&A| -> Option<B>) -> Option<B> {\n         match *self {\n             Some(ref a) => { f(a) }\n             None => { None }"}, {"sha": "4b613e9beaab2605b237bc2463828a655cab11ec", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(_thing: &fn()) { }\n+fn f2(_thing: ||) { }\n \n-fn f(thing: &fn()) {\n+fn f(thing: ||) {\n     f2(thing);\n }\n "}, {"sha": "5801ccebb0fcdd57fea7926f287951aa06ce25e8", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -14,7 +14,7 @@ fn f(mut y: ~int) {\n }\n \n fn g() {\n-    let frob: &fn(~int) = |mut q| { *q = 2; assert!(*q == 2); };\n+    let frob: |~int| = |mut q| { *q = 2; assert!(*q == 2); };\n     let w = ~37;\n     frob(w);\n "}, {"sha": "1835514c0d1fe8766e9de233f1b7997a80d50f23", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,9 +10,9 @@\n \n // Tests for the new |args| expr lambda syntax\n \n-fn f(i: int, f: &fn(int) -> int) -> int { f(i) }\n+fn f(i: int, f: |int| -> int) -> int { f(i) }\n \n-fn g(_g: &fn()) { }\n+fn g(_g: ||) { }\n \n pub fn main() {\n     assert_eq!(f(10, |a| a), 10);"}, {"sha": "8262432db607f3b04fd0127535fa0940a6776004", "filename": "src/test/run-pass/non-legacy-modes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@ struct X {\n     repr: int\n }\n \n-fn apply<T>(x: T, f: &fn(T)) {\n+fn apply<T>(x: T, f: |T|) {\n     f(x);\n }\n "}, {"sha": "bbb312842ce14587aacf1b3a46174a9852648aca", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn something(f: &fn()) { f(); }\n+fn something(f: ||) { f(); }\n pub fn main() {\n     something(|| error!(\"hi!\") );\n }"}, {"sha": "96081d30275fb32be75273c5d3bffa8cba895aea", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -22,7 +22,7 @@ use std::unstable::raw::Vec;\n \n /// Trait for visitor that wishes to reflect on data.\n trait movable_ptr {\n-    fn move_ptr(&mut self, adjustment: &fn(*c_void) -> *c_void);\n+    fn move_ptr(&mut self, adjustment: |*c_void| -> *c_void);\n }\n \n /// Helper function for alignment calculation.\n@@ -471,7 +471,7 @@ struct Stuff {\n }\n \n impl my_visitor {\n-    pub fn get<T:Clone>(&mut self, f: &fn(T)) {\n+    pub fn get<T:Clone>(&mut self, f: |T|) {\n         unsafe {\n             f((*(self.ptr1 as *T)).clone());\n         }\n@@ -490,7 +490,7 @@ impl my_visitor {\n struct Inner<V> { inner: V }\n \n impl movable_ptr for my_visitor {\n-    fn move_ptr(&mut self, adjustment: &fn(*c_void) -> *c_void) {\n+    fn move_ptr(&mut self, adjustment: |*c_void| -> *c_void) {\n         self.ptr1 = adjustment(self.ptr1);\n         self.ptr2 = adjustment(self.ptr2);\n     }"}, {"sha": "9d2a959eae1c7fa807a8697eda8c1db0c857994b", "filename": "src/test/run-pass/regions-fn-subtyping-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,13 +13,13 @@\n // Here, `f` is a function that takes a pointer `x` and a function\n // `g`, where `g` requires its argument `y` to be in the same region\n // that `x` is in.\n-fn has_same_region(f: &fn<'a>(x: &'a int, g: &fn(y: &'a int))) {\n+fn has_same_region(f: <'a>|x: &'a int, g: |y: &'a int||) {\n     // `f` should be the type that `wants_same_region` wants, but\n     // right now the compiler complains that it isn't.\n     wants_same_region(f);\n }\n \n-fn wants_same_region(_f: &fn<'b>(x: &'b int, g: &fn(y: &'b int))) {\n+fn wants_same_region(_f: <'b>|x: &'b int, g: |y: &'b int||) {\n }\n \n pub fn main() {"}, {"sha": "14e56bd6181177688f301f251b4b1e236ba3f195", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -14,21 +14,21 @@\n #[allow(unused_variable)];\n \n // Should pass region checking.\n-fn ok(f: &fn(x: &uint)) {\n+fn ok(f: |x: &uint|) {\n     // Here, g is a function that can accept a uint pointer with\n     // lifetime r, and f is a function that can accept a uint pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: &fn<'r>(y: &'r uint) = |x| { };\n+    let mut g: <'r>|y: &'r uint| = |x| { };\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: &fn(x: &uint)) {\n-    let mut g: &fn<'r>(x: &'r uint) = |_| {};\n+fn ok_inferred(f: |x: &uint|) {\n+    let mut g: <'r>|x: &'r uint| = |_| {};\n     g = f;\n }\n "}, {"sha": "061f27972871fe334f6fa322808ff806dfb9a3ee", "filename": "src/test/run-pass/regions-infer-call-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n fn takes_two(x: &int, y: &int) -> int { *x + *y }\n \n-fn with<T>(f: &fn(x: &int) -> T) -> T {\n+fn with<T>(f: |x: &int| -> T) -> T {\n     f(&20)\n }\n "}, {"sha": "5fe92f527d05bba6a3ded0ae67adccf2a1064bae", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -12,7 +12,7 @@\n \n fn region_identity<'r>(x: &'r uint) -> &'r uint { x }\n \n-fn apply<T>(t: T, f: &fn(T) -> T) -> T { f(t) }\n+fn apply<T>(t: T, f: |T| -> T) -> T { f(t) }\n \n fn parameterized(x: &uint) -> uint {\n     let z = apply(x, ({|y|"}, {"sha": "1b80d7648a6df116c07eedf225319b3ea149f46b", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-fn test(f: &fn(uint) -> uint) -> uint {\n+fn test(f: |uint| -> uint) -> uint {\n     return f(22u);\n }\n "}, {"sha": "28aab18cf6cfcd96151ee41621a539598ac81436", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -26,27 +26,27 @@ mod b {\n \n trait uint_utils {\n     fn str(&self) -> ~str;\n-    fn multi(&self, f: &fn(uint));\n+    fn multi(&self, f: |uint|);\n }\n \n impl uint_utils for uint {\n     fn str(&self) -> ~str { self.to_str() }\n-    fn multi(&self, f: &fn(uint)) {\n+    fn multi(&self, f: |uint|) {\n         let mut c = 0u;\n         while c < *self { f(c); c += 1u; }\n     }\n }\n \n trait vec_utils<T> {\n     fn length_(&self, ) -> uint;\n-    fn iter_(&self, f: &fn(&T));\n-    fn map_<U>(&self, f: &fn(&T) -> U) -> ~[U];\n+    fn iter_(&self, f: |&T|);\n+    fn map_<U>(&self, f: |&T| -> U) -> ~[U];\n }\n \n impl<T> vec_utils<T> for ~[T] {\n     fn length_(&self) -> uint { self.len() }\n-    fn iter_(&self, f: &fn(&T)) { for x in self.iter() { f(x); } }\n-    fn map_<U>(&self, f: &fn(&T) -> U) -> ~[U] {\n+    fn iter_(&self, f: |&T|) { for x in self.iter() { f(x); } }\n+    fn map_<U>(&self, f: |&T| -> U) -> ~[U] {\n         let mut r = ~[];\n         for elt in self.iter() {\n             r.push(f(elt));"}, {"sha": "94e402bfa90211a2945ffe341c07220fbc065120", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -45,7 +45,7 @@ fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n }\n \n fn joinable(f: proc()) -> Port<bool> {\n-    fn wrapper(c: Chan<bool>, f: &fn()) {\n+    fn wrapper(c: Chan<bool>, f: ||) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\",\n                0,"}, {"sha": "cee2079251a28cd5658d8ccd9fabbb60757c7d9e", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -136,7 +136,7 @@ pub fn test_rmdir_recursive_ok() {\n     assert!(!root.join(\"bar\").join(\"blat\").exists());\n }\n \n-fn in_tmpdir(f: &fn()) {\n+fn in_tmpdir(f: ||) {\n     let tmpdir = TempDir::new(\"test\").expect(\"can't make tmpdir\");\n     assert!(os::change_dir(tmpdir.path()));\n "}, {"sha": "7b331c43568075c88f021bff1e3633b7f2c4f34c", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -22,7 +22,7 @@ use std::task;\n use std::cell;\n \n trait Pet {\n-    fn name(&self, blk: &fn(&str));\n+    fn name(&self, blk: |&str|);\n     fn num_legs(&self) -> uint;\n     fn of_good_pedigree(&self) -> bool;\n }\n@@ -44,19 +44,19 @@ struct Goldfyshe {\n }\n \n impl Pet for Catte {\n-    fn name(&self, blk: &fn(&str)) { blk(self.name) }\n+    fn name(&self, blk: |&str|) { blk(self.name) }\n     fn num_legs(&self) -> uint { 4 }\n     fn of_good_pedigree(&self) -> bool { self.num_whiskers >= 4 }\n }\n impl Pet for Dogge {\n-    fn name(&self, blk: &fn(&str)) { blk(self.name) }\n+    fn name(&self, blk: |&str|) { blk(self.name) }\n     fn num_legs(&self) -> uint { 4 }\n     fn of_good_pedigree(&self) -> bool {\n         self.bark_decibels < 70 || self.tricks_known > 20\n     }\n }\n impl Pet for Goldfyshe {\n-    fn name(&self, blk: &fn(&str)) { blk(self.name) }\n+    fn name(&self, blk: |&str|) { blk(self.name) }\n     fn num_legs(&self) -> uint { 0 }\n     fn of_good_pedigree(&self) -> bool { self.swim_speed >= 500 }\n }"}, {"sha": "90f87d832ff89935f3d4289fc2594fde96a6ddbc", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -24,10 +24,10 @@ impl to_str for () {\n }\n \n trait map<T> {\n-    fn map<U>(&self, f: &fn(&T) -> U) -> ~[U];\n+    fn map<U>(&self, f: |&T| -> U) -> ~[U];\n }\n impl<T> map<T> for ~[T] {\n-    fn map<U>(&self, f: &fn(&T) -> U) -> ~[U] {\n+    fn map<U>(&self, f: |&T| -> U) -> ~[U] {\n         let mut r = ~[];\n         // FIXME: #7355 generates bad code with VecIterator\n         for i in range(0u, self.len()) {"}, {"sha": "042b5e96bbc08a1ab60077ecc859cf59ef287fbb", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -13,7 +13,7 @@ struct S<T> {\n     b: uint,\n }\n \n-fn range_(lo: uint, hi: uint, it: &fn(uint)) {\n+fn range_(lo: uint, hi: uint, it: |uint|) {\n     let mut lo_ = lo;\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }"}, {"sha": "948824834df844071542df662b62507db80a0336", "filename": "src/test/run-pass/unnamed_argument_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -3,7 +3,7 @@ fn good(_a: &int) {\n \n // unnamed argument &int is now parse x: &int\n \n-fn called(_f: &fn(&int)) {\n+fn called(_f: |&int|) {\n }\n \n pub fn main() {"}, {"sha": "ceb91d557f6aea0ec78e9338cf1bd55f509a6be2", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let _x = ~1;\n-    let lam_move: &fn() = || {};\n+    let lam_move: || = || {};\n     lam_move();\n }"}, {"sha": "06026d58f6005f124d1463af87bac6892b702ecc", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -15,7 +15,7 @@ extern {\n     fn sprintf(s: *mut c_char, format: *c_char, ...) -> c_int;\n }\n \n-unsafe fn check<T>(expected: &str, f: &fn(*mut c_char) -> T) {\n+unsafe fn check<T>(expected: &str, f: |*mut c_char| -> T) {\n     let mut x = [0i8, ..50];\n     f(&mut x[0] as *mut c_char);\n     let res = CString::new(&x[0], false);"}, {"sha": "75c48da8d812d11b5739f34fcd3ade83e4052db6", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406813957b65a1627e9b26f73019868a7da1ae79/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=406813957b65a1627e9b26f73019868a7da1ae79", "patch": "@@ -1,6 +1,6 @@\n fn foldl<T,U:Clone>(values: &[T],\n                     initial: U,\n-                    function: &fn(partial: U, element: &T) -> U)\n+                    function: |partial: U, element: &T| -> U)\n                     -> U {\n     match values {\n         [ref head, ..tail] =>\n@@ -11,7 +11,7 @@ fn foldl<T,U:Clone>(values: &[T],\n \n fn foldr<T,U:Clone>(values: &[T],\n                     initial: U,\n-                    function: &fn(element: &T, partial: U) -> U)\n+                    function: |element: &T, partial: U| -> U)\n                     -> U {\n     match values {\n         [..head, ref tail] =>"}]}