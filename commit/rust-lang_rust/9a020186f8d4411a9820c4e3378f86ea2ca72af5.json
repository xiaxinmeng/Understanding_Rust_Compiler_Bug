{"sha": "9a020186f8d4411a9820c4e3378f86ea2ca72af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMDIwMTg2ZjhkNDQxMWE5ODIwYzRlMzM3OGY4NmVhMmNhNzJhZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T07:14:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T07:14:47Z"}, "message": "remove unused parameters", "tree": {"sha": "b16dfd1029dce2b3c8bf536aab9bf0726c319c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16dfd1029dce2b3c8bf536aab9bf0726c319c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a020186f8d4411a9820c4e3378f86ea2ca72af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a020186f8d4411a9820c4e3378f86ea2ca72af5", "html_url": "https://github.com/rust-lang/rust/commit/9a020186f8d4411a9820c4e3378f86ea2ca72af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a020186f8d4411a9820c4e3378f86ea2ca72af5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7820b28937ba875521a2525cf75223c80faf9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7820b28937ba875521a2525cf75223c80faf9f2", "html_url": "https://github.com/rust-lang/rust/commit/b7820b28937ba875521a2525cf75223c80faf9f2"}], "stats": {"total": 32, "additions": 1, "deletions": 31}, "files": [{"sha": "87bb26c709e5e5bb3ecabe94aa12723dc64d7361", "filename": "src/libsyntax/ext/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a020186f8d4411a9820c4e3378f86ea2ca72af5/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a020186f8d4411a9820c4e3378f86ea2ca72af5/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs?ref=9a020186f8d4411a9820c4e3378f86ea2ca72af5", "patch": "@@ -371,10 +371,6 @@ pub fn compile_declarative_macro(\n                             tt.clone().into(),\n                             true,\n                             sess,\n-                            features,\n-                            &def.attrs,\n-                            edition,\n-                            def.id,\n                         )\n                         .pop()\n                         .unwrap();\n@@ -398,10 +394,6 @@ pub fn compile_declarative_macro(\n                             tt.clone().into(),\n                             false,\n                             sess,\n-                            features,\n-                            &def.attrs,\n-                            edition,\n-                            def.id,\n                         )\n                         .pop()\n                         .unwrap();"}, {"sha": "c881350fec3f866a731e7bf91a6930785166e4d3", "filename": "src/libsyntax/ext/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a020186f8d4411a9820c4e3378f86ea2ca72af5/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a020186f8d4411a9820c4e3378f86ea2ca72af5/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs?ref=9a020186f8d4411a9820c4e3378f86ea2ca72af5", "patch": "@@ -1,15 +1,13 @@\n use crate::ast;\n-use crate::ast::NodeId;\n use crate::ext::mbe::macro_parser;\n use crate::ext::mbe::{TokenTree, KleeneOp, KleeneToken, SequenceRepetition, Delimited};\n-use crate::feature_gate::Features;\n use crate::parse::token::{self, Token};\n use crate::parse::ParseSess;\n use crate::print::pprust;\n use crate::symbol::kw;\n use crate::tokenstream;\n \n-use syntax_pos::{edition::Edition, Span};\n+use syntax_pos::Span;\n \n use rustc_data_structures::sync::Lrc;\n use std::iter::Peekable;\n@@ -39,10 +37,6 @@ pub(super) fn parse(\n     input: tokenstream::TokenStream,\n     expect_matchers: bool,\n     sess: &ParseSess,\n-    features: &Features,\n-    attrs: &[ast::Attribute],\n-    edition: Edition,\n-    macro_node_id: NodeId,\n ) -> Vec<TokenTree> {\n     // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n@@ -58,10 +52,6 @@ pub(super) fn parse(\n             &mut trees,\n             expect_matchers,\n             sess,\n-            features,\n-            attrs,\n-            edition,\n-            macro_node_id,\n         );\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n@@ -112,10 +102,6 @@ fn parse_tree(\n     trees: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n-    features: &Features,\n-    attrs: &[ast::Attribute],\n-    edition: Edition,\n-    macro_node_id: NodeId,\n ) -> TokenTree {\n     // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n@@ -135,10 +121,6 @@ fn parse_tree(\n                     tts.into(),\n                     expect_matchers,\n                     sess,\n-                    features,\n-                    attrs,\n-                    edition,\n-                    macro_node_id,\n                 );\n                 // Get the Kleene operator and optional separator\n                 let (separator, kleene) = parse_sep_and_kleene_op(trees, span.entire(), sess);\n@@ -192,10 +174,6 @@ fn parse_tree(\n                     tts.into(),\n                     expect_matchers,\n                     sess,\n-                    features,\n-                    attrs,\n-                    edition,\n-                    macro_node_id,\n                 ),\n             }),\n         ),"}]}