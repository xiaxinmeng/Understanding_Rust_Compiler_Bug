{"sha": "d36d3fa5a6441f13c3888b6895cc7046740b1e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNmQzZmE1YTY0NDFmMTNjMzg4OGI2ODk1Y2M3MDQ2NzQwYjFlM2Q=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-03-18T08:02:29Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-03-18T08:26:04Z"}, "message": "fixes to `Option::{zip,zip_with}`\n\n- remove `#[inline]` attributes (see https://github.com/rust-lang/rust/pull/69997#discussion_r393942617)\n- fill tracking issue in `#[unstable]` attributes\n- slightly improve the docs", "tree": {"sha": "829518b6b0d91cdf1fc369af5bdfded5a3051b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829518b6b0d91cdf1fc369af5bdfded5a3051b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36d3fa5a6441f13c3888b6895cc7046740b1e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36d3fa5a6441f13c3888b6895cc7046740b1e3d", "html_url": "https://github.com/rust-lang/rust/commit/d36d3fa5a6441f13c3888b6895cc7046740b1e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36d3fa5a6441f13c3888b6895cc7046740b1e3d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5206f9749faf60f6b4163a526de9ad18241503e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5206f9749faf60f6b4163a526de9ad18241503e", "html_url": "https://github.com/rust-lang/rust/commit/a5206f9749faf60f6b4163a526de9ad18241503e"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "4bec3ec9f6b423aa1239653cadcc482a1ae58cb0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d36d3fa5a6441f13c3888b6895cc7046740b1e3d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36d3fa5a6441f13c3888b6895cc7046740b1e3d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d36d3fa5a6441f13c3888b6895cc7046740b1e3d", "patch": "@@ -916,8 +916,8 @@ impl<T> Option<T> {\n \n     /// Zips `self` with another `Option`.\n     ///\n-    /// Returns `Some((_, _))` when both `self` and `other`\n-    /// are `Some(_)`, otherwise return `None`.\n+    /// If `self` is `Some(s)` and other is `Some(o)`, this method returns `Some((s, o))`.\n+    /// Otherwise, `None` is returned.\n     ///\n     /// # Examples\n     ///\n@@ -930,16 +930,15 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip(y), Some((1, \"hi\")));\n     /// assert_eq!(x.zip(z), None);\n     /// ```\n-    #[inline]\n-    #[unstable(feature = \"option_zip\", issue = \"none\")]\n+    #[unstable(feature = \"option_zip\", issue = \"70086\")]\n     pub fn zip<U>(self, other: Option<U>) -> Option<(T, U)> {\n         self.zip_with(other, |a, b| (a, b))\n     }\n \n     /// Zips `self` and another `Option` with function `f`.\n     ///\n-    /// Returns `Some(_)` when both `self` and `other`\n-    /// are `Some(_)`, otherwise return `None`.\n+    /// If `self` is `Some(s)` and other is `Some(o)`, this method returns `Some(f(s, o))`.\n+    /// Otherwise, `None` is returned.\n     ///\n     /// # Examples\n     ///\n@@ -958,14 +957,13 @@ impl<T> Option<T> {\n     ///     }\n     /// }\n     ///\n-    /// let x = Some(17.);\n-    /// let y = Some(42.);\n+    /// let x = Some(17.5);\n+    /// let y = Some(42.7);\n     ///\n-    /// assert_eq!(x.zip_with(y, Point::new), Some(Point { x: 17., y: 42. }));\n+    /// assert_eq!(x.zip_with(y, Point::new), Some(Point { x: 17.5, y: 42.7 }));\n     /// assert_eq!(x.zip_with(None, Point::new), None);\n     /// ```\n-    #[inline]\n-    #[unstable(feature = \"option_zip\", issue = \"none\")]\n+    #[unstable(feature = \"option_zip\", issue = \"70086\")]\n     pub fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n     where\n         F: FnOnce(T, U) -> R,"}]}