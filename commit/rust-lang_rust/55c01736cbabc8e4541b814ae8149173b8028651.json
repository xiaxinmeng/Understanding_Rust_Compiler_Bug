{"sha": "55c01736cbabc8e4541b814ae8149173b8028651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzAxNzM2Y2JhYmM4ZTQ1NDFiODE0YWU4MTQ5MTczYjgwMjg2NTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-18T18:43:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-18T18:48:20Z"}, "message": "std: Update randomness implementation on Windows\n\nThis commit updates the OS random number generator on Windows to match the\nupstream implementation in the `rand` crate. First proposed in\nrust-lang-nursery/rand#111 this implementation uses a \"private\" API of\n`RtlGenRandom`. Despite the [documentation][dox] indicating this is a private\nfunction its widespread use in Chromium and Firefox as well as [comments] from\nMicrosoft internally indicates that it's highly unlikely to break.\n\nAnother motivation for switching this is to also attempt to make progress\non #44911. It may be the case that this function succeeds while the previous\nimplementation may fail in \"weird\" scenarios.\n\n[dox]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa387694(v=vs.85).aspx\n[comments]: https://github.com/rust-lang-nursery/rand/issues/111#issuecomment-316140155", "tree": {"sha": "9525eecc07ab0adde3de1e0dc87ae463cc2d41a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9525eecc07ab0adde3de1e0dc87ae463cc2d41a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c01736cbabc8e4541b814ae8149173b8028651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c01736cbabc8e4541b814ae8149173b8028651", "html_url": "https://github.com/rust-lang/rust/commit/55c01736cbabc8e4541b814ae8149173b8028651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c01736cbabc8e4541b814ae8149173b8028651/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4f39453cfbeab1c2220331f2eae8938165c964", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f39453cfbeab1c2220331f2eae8938165c964", "html_url": "https://github.com/rust-lang/rust/commit/7a4f39453cfbeab1c2220331f2eae8938165c964"}], "stats": {"total": 56, "additions": 10, "deletions": 46}, "files": [{"sha": "39e00270233b41aa14a25e646b67984f5997bd3e", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55c01736cbabc8e4541b814ae8149173b8028651/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c01736cbabc8e4541b814ae8149173b8028651/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=55c01736cbabc8e4541b814ae8149173b8028651", "patch": "@@ -37,7 +37,6 @@ pub type BOOL = c_int;\n pub type BYTE = u8;\n pub type BOOLEAN = BYTE;\n pub type GROUP = c_uint;\n-pub type LONG_PTR = isize;\n pub type LARGE_INTEGER = c_longlong;\n pub type LONG = c_long;\n pub type UINT = c_uint;\n@@ -46,7 +45,6 @@ pub type USHORT = c_ushort;\n pub type SIZE_T = usize;\n pub type WORD = u16;\n pub type CHAR = c_char;\n-pub type HCRYPTPROV = LONG_PTR;\n pub type ULONG_PTR = usize;\n pub type ULONG = c_ulong;\n #[cfg(target_arch = \"x86_64\")]\n@@ -288,10 +286,6 @@ pub const IMAGE_FILE_MACHINE_I386: DWORD = 0x014c;\n #[cfg(feature = \"backtrace\")]\n pub const IMAGE_FILE_MACHINE_AMD64: DWORD = 0x8664;\n \n-pub const PROV_RSA_FULL: DWORD = 1;\n-pub const CRYPT_SILENT: DWORD = 64;\n-pub const CRYPT_VERIFYCONTEXT: DWORD = 0xF0000000;\n-\n pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n pub const EXCEPTION_STACK_OVERFLOW: DWORD = 0xc00000fd;\n pub const EXCEPTION_MAXIMUM_PARAMETERS: usize = 15;\n@@ -1136,15 +1130,6 @@ extern \"system\" {\n     pub fn GetProcAddress(handle: HMODULE,\n                           name: LPCSTR) -> *mut c_void;\n     pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n-    pub fn CryptAcquireContextA(phProv: *mut HCRYPTPROV,\n-                                pszContainer: LPCSTR,\n-                                pszProvider: LPCSTR,\n-                                dwProvType: DWORD,\n-                                dwFlags: DWORD) -> BOOL;\n-    pub fn CryptGenRandom(hProv: HCRYPTPROV,\n-                          dwLen: DWORD,\n-                          pbBuffer: *mut BYTE) -> BOOL;\n-    pub fn CryptReleaseContext(hProv: HCRYPTPROV, dwFlags: DWORD) -> BOOL;\n \n     pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);\n \n@@ -1175,6 +1160,9 @@ extern \"system\" {\n                   writefds: *mut fd_set,\n                   exceptfds: *mut fd_set,\n                   timeout: *const timeval) -> c_int;\n+\n+    #[link_name = \"SystemFunction036\"]\n+    pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n }\n \n // Functions that aren't available on every version of Windows that we support,"}, {"sha": "f66b0a3bdc3f4d382a8e422d771b8b33593c97a1", "filename": "src/libstd/sys/windows/rand.rs", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/55c01736cbabc8e4541b814ae8149173b8028651/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c01736cbabc8e4541b814ae8149173b8028651/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frand.rs?ref=55c01736cbabc8e4541b814ae8149173b8028651", "patch": "@@ -14,25 +14,12 @@ use mem;\n use rand::Rng;\n use sys::c;\n \n-pub struct OsRng {\n-    hcryptprov: c::HCRYPTPROV\n-}\n+pub struct OsRng;\n \n impl OsRng {\n     /// Create a new `OsRng`.\n     pub fn new() -> io::Result<OsRng> {\n-        let mut hcp = 0;\n-        let ret = unsafe {\n-            c::CryptAcquireContextA(&mut hcp, 0 as c::LPCSTR, 0 as c::LPCSTR,\n-                                    c::PROV_RSA_FULL,\n-                                    c::CRYPT_VERIFYCONTEXT | c::CRYPT_SILENT)\n-        };\n-\n-        if ret == 0 {\n-            Err(io::Error::last_os_error())\n-        } else {\n-            Ok(OsRng { hcryptprov: hcp })\n-        }\n+        Ok(OsRng)\n     }\n }\n \n@@ -42,18 +29,19 @@ impl Rng for OsRng {\n         self.fill_bytes(&mut v);\n         unsafe { mem::transmute(v) }\n     }\n+\n     fn next_u64(&mut self) -> u64 {\n         let mut v = [0; 8];\n         self.fill_bytes(&mut v);\n         unsafe { mem::transmute(v) }\n     }\n+\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n-        // CryptGenRandom takes a DWORD (u32) for the length so we need to\n+        // RtlGenRandom takes an ULONG (u32) for the length so we need to\n         // split up the buffer.\n-        for slice in v.chunks_mut(<c::DWORD>::max_value() as usize) {\n+        for slice in v.chunks_mut(<c::ULONG>::max_value() as usize) {\n             let ret = unsafe {\n-                c::CryptGenRandom(self.hcryptprov, slice.len() as c::DWORD,\n-                                  slice.as_mut_ptr())\n+                c::RtlGenRandom(slice.as_mut_ptr(), slice.len() as c::ULONG)\n             };\n             if ret == 0 {\n                 panic!(\"couldn't generate random bytes: {}\",\n@@ -62,15 +50,3 @@ impl Rng for OsRng {\n         }\n     }\n }\n-\n-impl Drop for OsRng {\n-    fn drop(&mut self) {\n-        let ret = unsafe {\n-            c::CryptReleaseContext(self.hcryptprov, 0)\n-        };\n-        if ret == 0 {\n-            panic!(\"couldn't release context: {}\",\n-                   io::Error::last_os_error());\n-        }\n-    }\n-}"}]}