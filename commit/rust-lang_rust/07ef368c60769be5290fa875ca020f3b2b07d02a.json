{"sha": "07ef368c60769be5290fa875ca020f3b2b07d02a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZWYzNjhjNjA3NjliZTUyOTBmYTg3NWNhMDIwZjNiMmIwN2QwMmE=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T08:17:59Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T09:57:05Z"}, "message": "(core::str) rename find_chars -> find", "tree": {"sha": "ad858b5863c1816b9d54b90a9a089ae984f88f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad858b5863c1816b9d54b90a9a089ae984f88f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ef368c60769be5290fa875ca020f3b2b07d02a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ef368c60769be5290fa875ca020f3b2b07d02a", "html_url": "https://github.com/rust-lang/rust/commit/07ef368c60769be5290fa875ca020f3b2b07d02a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ef368c60769be5290fa875ca020f3b2b07d02a/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81867474a2cac8fcb646390ae5f3782dda45aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81867474a2cac8fcb646390ae5f3782dda45aae", "html_url": "https://github.com/rust-lang/rust/commit/c81867474a2cac8fcb646390ae5f3782dda45aae"}], "stats": {"total": 101, "additions": 37, "deletions": 64}, "files": [{"sha": "6633586a366989903abdaab976e90b1a3e1f1651", "filename": "src/libcore/str.rs", "status": "modified", "additions": 37, "deletions": 64, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/07ef368c60769be5290fa875ca020f3b2b07d02a/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ef368c60769be5290fa875ca020f3b2b07d02a/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=07ef368c60769be5290fa875ca020f3b2b07d02a", "patch": "@@ -69,9 +69,8 @@ export\n    // Searching\n    index,\n    rindex,\n-   //find,\n+   find,\n    find_bytes,\n-   find_chars,\n    contains,\n    starts_with,\n    ends_with,\n@@ -877,58 +876,40 @@ fn rindex(ss: str, cc: char) -> option<uint> {\n     ret option::none;\n }\n \n-/*\n-Function: find\n-\n-Finds the index of the first matching substring.\n-Returns -1 if `haystack` does not contain `needle`.\n-\n-Parameters:\n-\n-haystack - The string to look in\n-needle - The string to look for\n-\n-Returns:\n-\n-The index of the first occurance of `needle`, or -1 if not found.\n-\n-FIXME: return an option<char position uint> instead\n-*/\n-fn find(haystack: str, needle: str) -> int {\n-    let haystack_len: int = len_bytes(haystack) as int;\n-    let needle_len: int = len_bytes(needle) as int;\n-    if needle_len == 0 { ret 0; }\n-    fn match_at(haystack: str, needle: str, i: int) -> bool {\n-        let j: int = i;\n-        for c: u8 in needle { if haystack[j] != c { ret false; } j += 1; }\n+//Function: find_bytes\n+//\n+// Find the char position of the first instance of one string\n+// within another, or return option::none\n+fn find_bytes(haystack: str, needle: str) -> option<uint> {\n+    let haystack_len = len_bytes(haystack);\n+    let needle_len   = len_bytes(needle);\n+\n+    if needle_len == 0u { ret option::some(0u); }\n+    if needle_len > haystack_len { ret option::none; }\n+\n+    fn match_at(haystack: str, needle: str, ii: uint) -> bool {\n+        let jj = ii;\n+        for c: u8 in needle { if haystack[jj] != c { ret false; } jj += 1u; }\n         ret true;\n     }\n-    let i: int = 0;\n-    while i <= haystack_len - needle_len {\n-        if match_at(haystack, needle, i) { ret i; }\n-        i += 1;\n+\n+    let ii = 0u;\n+    while ii <= haystack_len - needle_len {\n+        if match_at(haystack, needle, ii) { ret option::some(ii); }\n+        ii += 1u;\n     }\n-    ret -1;\n+\n+    ret option::none;\n }\n \n-// Function: find_chars\n+// Function: find\n //\n-// Find the character position of the first instance of the substring,\n-// or return option::none\n-//\n-// FIXME: rename find_chars -> find,\n-//               find -> find_bytes\n-fn find_chars(hay: str, pin: str) -> option<uint> {\n-   alt find_bytes(hay, pin) {\n+// Find the char position of the first instance of one string\n+// within another, or return option::none\n+fn find(haystack: str, needle: str) -> option<uint> {\n+   alt find_bytes(haystack, needle) {\n       option::none { ret option::none; }\n-      option::some(nn) { ret option::some(b2c_pos(hay, nn)); }\n-   }\n-}\n-\n-fn find_bytes(hay: str, pin: str) -> option<uint> {\n-   alt find(hay, pin) {\n-      -1 { ret option::none; }\n-      nn { ret option::some(nn as uint); }\n+      option::some(nn) { ret option::some(b2c_pos(haystack, nn)); }\n    }\n }\n \n@@ -1741,32 +1722,24 @@ mod tests {\n \n     #[test]\n     fn test_find_bytes() {\n-        fn t(haystack: str, needle: str, i: int) {\n-            let j: int = find(haystack, needle);\n-            log(debug, \"searched for \" + needle);\n-            log(debug, j);\n-            assert (i == j);\n-        }\n-        t(\"this is a simple\", \"is a\", 5);\n-        t(\"this is a simple\", \"is z\", -1);\n-        t(\"this is a simple\", \"\", 0);\n-        t(\"this is a simple\", \"simple\", 10);\n-        t(\"this\", \"simple\", -1);\n-\n+        // byte positions\n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert (find_bytes(data, \"\")     == option::some(0u));\n         assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some( 0u));\n         assert (find_bytes(data, \"\u0e30\u0e40\")   == option::some( 6u));\n         assert (find_bytes(data, \"\u4e2d\u534e\") == option::some(27u));\n         assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == option::none);\n     }\n \n     #[test]\n-    fn test_find_chars() {\n+    fn test_find() {\n+        // char positions\n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find_chars(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some(0u));\n-        assert (find_chars(data, \"\u0e30\u0e40\")   == option::some(2u));\n-        assert (find_chars(data, \"\u4e2d\u534e\") == option::some(9u));\n-        assert (find_chars(data, \"\u0e44\u0e17\u534e\") == option::none);\n+        assert (find(data, \"\")     == option::some(0u));\n+        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some(0u));\n+        assert (find(data, \"\u0e30\u0e40\")   == option::some(2u));\n+        assert (find(data, \"\u4e2d\u534e\") == option::some(9u));\n+        assert (find(data, \"\u0e44\u0e17\u534e\") == option::none);\n     }\n \n     #[test]"}]}