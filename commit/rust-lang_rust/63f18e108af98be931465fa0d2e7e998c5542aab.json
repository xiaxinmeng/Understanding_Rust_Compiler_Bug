{"sha": "63f18e108af98be931465fa0d2e7e998c5542aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZjE4ZTEwOGFmOThiZTkzMTQ2NWZhMGQyZTdlOTk4YzU1NDJhYWI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-04-30T08:57:11Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-06-03T11:46:19Z"}, "message": "s/panic_fmt/panic_impl/g in docs", "tree": {"sha": "b4863027e4cf9352cfe7b80fc3da93225c2447f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4863027e4cf9352cfe7b80fc3da93225c2447f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f18e108af98be931465fa0d2e7e998c5542aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f18e108af98be931465fa0d2e7e998c5542aab", "html_url": "https://github.com/rust-lang/rust/commit/63f18e108af98be931465fa0d2e7e998c5542aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f18e108af98be931465fa0d2e7e998c5542aab/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "html_url": "https://github.com/rust-lang/rust/commit/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "bac619fd4a30d2c17e50d45415d55d1ef42600d6", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=63f18e108af98be931465fa0d2e7e998c5542aab", "patch": "@@ -19,6 +19,7 @@ sugar for dynamic allocations via `malloc` and `free`:\n #![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n #![no_std]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n extern crate libc;\n \n@@ -50,7 +51,7 @@ fn main(_argc: isize, _argv: *const *const u8) -> isize {\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n+#[lang = \"panic_impl\"] extern fn rust_begin_panic(info: &PanicInfo) -> ! { unsafe { intrinsics::abort() } }\n #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n #[no_mangle] pub extern fn rust_eh_register_frames () {}\n #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n@@ -110,6 +111,7 @@ in the same format as C:\n #![feature(start)]\n #![no_std]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -134,12 +136,9 @@ pub extern fn rust_eh_personality() {\n pub extern fn rust_eh_unwind_resume() {\n }\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n #[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32,\n-                               _column: u32) -> ! {\n+pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n     unsafe { intrinsics::abort() }\n }\n ```\n@@ -155,6 +154,7 @@ compiler's name mangling too:\n #![no_std]\n #![no_main]\n use core::intrinsics;\n+use core::panic::PanicInfo;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -179,12 +179,9 @@ pub extern fn rust_eh_personality() {\n pub extern fn rust_eh_unwind_resume() {\n }\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n #[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32,\n-                               _column: u32) -> ! {\n+pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n     unsafe { intrinsics::abort() }\n }\n ```\n@@ -215,7 +212,7 @@ called. The language item's name is `eh_personality`.\n \n The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n compiler. When a panic happens, this controls the message that's displayed on\n-the screen. While the language item's name is `panic_fmt`, the symbol name is\n+the screen. While the language item's name is `panic_impl`, the symbol name is\n `rust_begin_panic`.\n \n A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n@@ -259,8 +256,8 @@ the source code.\n   - `msvc_try_filter`: `libpanic_unwind/seh.rs` (SEH)\n   - `panic`: `libcore/panicking.rs`\n   - `panic_bounds_check`: `libcore/panicking.rs`\n-  - `panic_fmt`: `libcore/panicking.rs`\n-  - `panic_fmt`: `libstd/panicking.rs`\n+  - `panic_impl`: `libcore/panicking.rs`\n+  - `panic_impl`: `libstd/panicking.rs`\n - Allocations\n   - `owned_box`: `liballoc/boxed.rs`\n   - `exchange_malloc`: `liballoc/heap.rs`"}, {"sha": "c3b7f2e41e15b27b265f37fcc75e53801538ef8c", "filename": "src/doc/unstable-book/src/language-features/used.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fused.md?ref=63f18e108af98be931465fa0d2e7e998c5542aab", "patch": "@@ -87,11 +87,13 @@ This condition can be met using `#[used]` and `#[link_section]` plus a linker\n script.\n \n ``` rust,ignore\n-#![feature(lang_items)]\n+#![feature(panic_implementation)]\n #![feature(used)]\n #![no_main]\n #![no_std]\n \n+use core::panic::PanicInfo;\n+\n extern \"C\" fn reset_handler() -> ! {\n     loop {}\n }\n@@ -100,8 +102,10 @@ extern \"C\" fn reset_handler() -> ! {\n #[used]\n static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() {}\n+#[panic_implementation]\n+fn panic_impl(info: &PanicInfo) -> ! {\n+    loop {}\n+}\n ```\n \n ``` text"}, {"sha": "e6ab64a331272c9109f97863d4a458023b852d40", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=63f18e108af98be931465fa0d2e7e998c5542aab", "patch": "@@ -41,7 +41,7 @@\n //!   dictate the panic message, the file at which panic was invoked, and the\n //!   line and column inside the file. It is up to consumers of this core\n //!   library to define this panic function; it is only required to never\n-//!   return. This requires a `lang` attribute named `panic_fmt`.\n+//!   return. This requires a `lang` attribute named `panic_impl`.\n //!\n //! * `rust_eh_personality` - is used by the failure mechanisms of the\n //!    compiler. This is often mapped to GCC's personality function, but crates"}, {"sha": "61f05ca347358781a75f399b0d3d8963d6901dc9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f18e108af98be931465fa0d2e7e998c5542aab/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=63f18e108af98be931465fa0d2e7e998c5542aab", "patch": "@@ -637,8 +637,8 @@ Erroneous code example:\n ```compile_fail,E0152\n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-struct Foo; // error: duplicate lang item found: `panic_fmt`\n+#[lang = \"panic_impl\"]\n+struct Foo; // error: duplicate lang item found: `panic_impl`\n ```\n \n Lang items are already implemented in the standard library. Unless you are\n@@ -824,7 +824,7 @@ A list of available external lang items is available in\n #![feature(lang_items)]\n \n extern \"C\" {\n-    #[lang = \"panic_fmt\"] // ok!\n+    #[lang = \"panic_impl\"] // ok!\n     fn cake();\n }\n ```"}]}