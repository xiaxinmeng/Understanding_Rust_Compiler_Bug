{"sha": "5a5a32a4a82027b3f4112919fa307dbae744069b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNWEzMmE0YTgyMDI3YjNmNDExMjkxOWZhMzA3ZGJhZTc0NDA2OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-05T15:58:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-05T15:58:11Z"}, "message": "Auto merge of #43652 - frewsxcv:frewsxcv-str-examples, r=QuietMisdreavus\n\nString slice doc improvements.\n\nNone", "tree": {"sha": "992bd67c8d8f85d836fada73318d5f1bc6d83279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992bd67c8d8f85d836fada73318d5f1bc6d83279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5a32a4a82027b3f4112919fa307dbae744069b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5a32a4a82027b3f4112919fa307dbae744069b", "html_url": "https://github.com/rust-lang/rust/commit/5a5a32a4a82027b3f4112919fa307dbae744069b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5a32a4a82027b3f4112919fa307dbae744069b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b82b7e50a9ebb514ac5cf2a0a5b65ac3d92cefb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b82b7e50a9ebb514ac5cf2a0a5b65ac3d92cefb", "html_url": "https://github.com/rust-lang/rust/commit/2b82b7e50a9ebb514ac5cf2a0a5b65ac3d92cefb"}, {"sha": "6722185abdab8c5b83109a375e3fe14bd6aa8dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6722185abdab8c5b83109a375e3fe14bd6aa8dc4", "html_url": "https://github.com/rust-lang/rust/commit/6722185abdab8c5b83109a375e3fe14bd6aa8dc4"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "80317cd763b5c8680e6b5d5dc6d51fce0ea87e98", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5a5a32a4a82027b3f4112919fa307dbae744069b/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5a32a4a82027b3f4112919fa307dbae744069b/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=5a5a32a4a82027b3f4112919fa307dbae744069b", "patch": "@@ -273,7 +273,10 @@ impl str {\n         core_str::StrExt::is_char_boundary(self, index)\n     }\n \n-    /// Converts a string slice to a byte slice.\n+    /// Converts a string slice to a byte slice. To convert the byte slice back\n+    /// into a string slice, use the [`str::from_utf8`] function.\n+    ///\n+    /// [`str::from_utf8`]: ./str/fn.from_utf8.html\n     ///\n     /// # Examples\n     ///\n@@ -289,7 +292,11 @@ impl str {\n         core_str::StrExt::as_bytes(self)\n     }\n \n-    /// Converts a mutable string slice to a mutable byte slice.\n+    /// Converts a mutable string slice to a mutable byte slice. To convert the\n+    /// mutable byte slice back into a mutable string slice, use the\n+    /// [`str::from_utf8_mut`] function.\n+    ///\n+    /// [`str::from_utf8_mut`]: ./str/fn.from_utf8_mut.html\n     #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n@@ -328,11 +335,16 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// let v = \"\ud83d\uddfb\u2208\ud83c\udf0f\";\n+    /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n+    ///\n     /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get(0..4));\n-    /// assert!(v.get(1..).is_none());\n-    /// assert!(v.get(..8).is_none());\n-    /// assert!(v.get(..42).is_none());\n+    ///\n+    /// // indices not on UTF-8 sequence boundaries\n+    /// assert!(v.get_mut(1..).is_none());\n+    /// assert!(v.get_mut(..8).is_none());\n+    ///\n+    /// // out of bounds\n+    /// assert!(v.get_mut(..42).is_none());\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]\n@@ -351,9 +363,14 @@ impl str {\n     ///\n     /// ```\n     /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n+    ///\n     /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get_mut(0..4).map(|v| &*v));\n+    ///\n+    /// // indices not on UTF-8 sequence boundaries\n     /// assert!(v.get_mut(1..).is_none());\n     /// assert!(v.get_mut(..8).is_none());\n+    ///\n+    /// // out of bounds\n     /// assert!(v.get_mut(..42).is_none());\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n@@ -563,12 +580,16 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let mut s = \"Per Martin-L\u00f6f\".to_string();\n-    ///\n-    /// let (first, last) = s.split_at_mut(3);\n+    /// use std::ascii::AsciiExt;\n     ///\n-    /// assert_eq!(\"Per\", first);\n-    /// assert_eq!(\" Martin-L\u00f6f\", last);\n+    /// let mut s = \"Per Martin-L\u00f6f\".to_string();\n+    /// {\n+    ///     let (first, last) = s.split_at_mut(3);\n+    ///     first.make_ascii_uppercase();\n+    ///     assert_eq!(\"PER\", first);\n+    ///     assert_eq!(\" Martin-L\u00f6f\", last);\n+    /// }\n+    /// assert_eq!(\"PER Martin-L\u00f6f\", s);\n     /// ```\n     #[inline]\n     #[stable(feature = \"str_split_at\", since = \"1.4.0\")]"}]}