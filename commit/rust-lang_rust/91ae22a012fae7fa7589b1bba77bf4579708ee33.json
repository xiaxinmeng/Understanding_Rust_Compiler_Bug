{"sha": "91ae22a012fae7fa7589b1bba77bf4579708ee33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYWUyMmEwMTJmYWU3ZmE3NTg5YjFiYmE3N2JmNDU3OTcwOGVlMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-05T20:06:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-05T20:06:00Z"}, "message": "Auto merge of #40348 - nrc:save-extern-fn, r=eddyb\n\nHandle extern functions and statics in save-analysis\n\nr? @eddyb", "tree": {"sha": "481fb8085cf5bd67b5dada18ccd37d345a1ddb13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481fb8085cf5bd67b5dada18ccd37d345a1ddb13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ae22a012fae7fa7589b1bba77bf4579708ee33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ae22a012fae7fa7589b1bba77bf4579708ee33", "html_url": "https://github.com/rust-lang/rust/commit/91ae22a012fae7fa7589b1bba77bf4579708ee33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ae22a012fae7fa7589b1bba77bf4579708ee33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "html_url": "https://github.com/rust-lang/rust/commit/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5"}, {"sha": "d76daf5c616f7969752e5370287f4495b95fe00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d76daf5c616f7969752e5370287f4495b95fe00c", "html_url": "https://github.com/rust-lang/rust/commit/d76daf5c616f7969752e5370287f4495b95fe00c"}], "stats": {"total": 110, "additions": 101, "deletions": 9}, "files": [{"sha": "3fd0ce45e3610af20760a82c093a76450a1f6e9d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/91ae22a012fae7fa7589b1bba77bf4579708ee33/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ae22a012fae7fa7589b1bba77bf4579708ee33/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=91ae22a012fae7fa7589b1bba77bf4579708ee33", "patch": "@@ -1401,15 +1401,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n         debug!(\"visit_expr {:?}\", ex.node);\n         self.process_macro_use(ex.span, ex.id);\n         match ex.node {\n-            ast::ExprKind::Call(ref _f, ref _args) => {\n-                // Don't need to do anything for function calls,\n-                // because just walking the callee path does what we want.\n-                visit::walk_expr(self, ex);\n-            }\n-            ast::ExprKind::Path(_, ref path) => {\n-                self.process_path(ex.id, path, None);\n-                visit::walk_expr(self, ex);\n-            }\n             ast::ExprKind::Struct(ref path, ref fields, ref base) => {\n                 let hir_expr = self.save_ctxt.tcx.hir.expect_expr(ex.id);\n                 let adt = match self.save_ctxt.tables.expr_ty_opt(&hir_expr) {\n@@ -1507,6 +1498,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                 self.visit_expr(element);\n                 self.nest_tables(count.id, |v| v.visit_expr(count));\n             }\n+            // In particular, we take this branch for call and path expressions,\n+            // where we'll index the idents involved just by continuing to walk.\n             _ => {\n                 visit::walk_expr(self, ex)\n             }\n@@ -1606,4 +1599,39 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n         walk_list!(self, visit_ty, &l.ty);\n         walk_list!(self, visit_expr, &l.init);\n     }\n+\n+    fn visit_foreign_item(&mut self, item: &'l ast::ForeignItem) {\n+        match item.node {\n+            ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n+                if let Some(fn_data) = self.save_ctxt.get_extern_item_data(item) {\n+                    down_cast_data!(fn_data, FunctionData, item.span);\n+                    if !self.span.filter_generated(Some(fn_data.span), item.span) {\n+                        self.dumper.function(fn_data.clone().lower(self.tcx));\n+                    }\n+\n+                    self.nest_tables(item.id, |v| v.process_formals(&decl.inputs,\n+                                                                    &fn_data.qualname));\n+                    self.process_generic_params(generics, item.span, &fn_data.qualname, item.id);\n+                }\n+\n+                for arg in &decl.inputs {\n+                    self.visit_ty(&arg.ty);\n+                }\n+\n+                if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n+                    self.visit_ty(&ret_ty);\n+                }\n+            }\n+            ast::ForeignItemKind::Static(ref ty, _) => {\n+                if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n+                    down_cast_data!(var_data, VariableData, item.span);\n+                    if !self.span.filter_generated(Some(var_data.span), item.span) {\n+                        self.dumper.variable(var_data.lower(self.tcx));\n+                    }\n+                }\n+\n+                self.visit_ty(ty);\n+            }\n+        }\n+    }\n }"}, {"sha": "44615071a56a71eb87e495b03b3907ddb91bcc30", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/91ae22a012fae7fa7589b1bba77bf4579708ee33/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ae22a012fae7fa7589b1bba77bf4579708ee33/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=91ae22a012fae7fa7589b1bba77bf4579708ee33", "patch": "@@ -120,6 +120,50 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         result\n     }\n \n+    pub fn get_extern_item_data(&self, item: &ast::ForeignItem) -> Option<Data> {\n+        let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+        match item.node {\n+            ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n+                let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Fn);\n+                filter!(self.span_utils, sub_span, item.span, None);\n+                Some(Data::FunctionData(FunctionData {\n+                    id: item.id,\n+                    name: item.ident.to_string(),\n+                    qualname: qualname,\n+                    declaration: None,\n+                    span: sub_span.unwrap(),\n+                    scope: self.enclosing_scope(item.id),\n+                    value: make_signature(decl, generics),\n+                    visibility: From::from(&item.vis),\n+                    parent: None,\n+                    docs: docs_for_attrs(&item.attrs),\n+                    sig: self.sig_base_extern(item),\n+                    attributes: item.attrs.clone(),\n+                }))\n+            }\n+            ast::ForeignItemKind::Static(ref ty, m) => {\n+                let keyword = if m { keywords::Mut } else { keywords::Static };\n+                let sub_span = self.span_utils.sub_span_after_keyword(item.span, keyword);\n+                filter!(self.span_utils, sub_span, item.span, None);\n+                Some(Data::VariableData(VariableData {\n+                    id: item.id,\n+                    kind: VariableKind::Static,\n+                    name: item.ident.to_string(),\n+                    qualname: qualname,\n+                    span: sub_span.unwrap(),\n+                    scope: self.enclosing_scope(item.id),\n+                    parent: None,\n+                    value: String::new(),\n+                    type_value: ty_to_string(ty),\n+                    visibility: From::from(&item.vis),\n+                    docs: docs_for_attrs(&item.attrs),\n+                    sig: Some(self.sig_base_extern(item)),\n+                    attributes: item.attrs.clone(),\n+                }))\n+            }\n+        }\n+    }\n+\n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.node {\n             ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n@@ -751,6 +795,21 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    fn sig_base_extern(&self, item: &ast::ForeignItem) -> Signature {\n+        let text = self.span_utils.signature_string_for_span(item.span);\n+        let name = item.ident.to_string();\n+        let ident_start = text.find(&name).expect(\"Name not in signature?\");\n+        let ident_end = ident_start + name.len();\n+        Signature {\n+            span: Span { hi: item.span.lo + BytePos(text.len() as u32), ..item.span },\n+            text: text,\n+            ident_start: ident_start,\n+            ident_end: ident_end,\n+            defs: vec![],\n+            refs: vec![],\n+        }\n+    }\n+\n     #[inline]\n     pub fn enclosing_scope(&self, id: NodeId) -> NodeId {\n         self.tcx.hir.get_enclosing_scope(id).unwrap_or(CRATE_NODE_ID)"}, {"sha": "a996aa4fad5a7c247e0791430489ed8e61bdf4c3", "filename": "src/test/run-make/save-analysis-fail/foo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91ae22a012fae7fa7589b1bba77bf4579708ee33/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ae22a012fae7fa7589b1bba77bf4579708ee33/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs?ref=91ae22a012fae7fa7589b1bba77bf4579708ee33", "patch": "@@ -448,3 +448,8 @@ fn test_format_args() {\n     print!(\"{0} + {} = {}\", x, y);\n     print!(\"x is {}, y is {1}, name is {n}\", x, y, n = name);\n }\n+\n+extern {\n+    static EXTERN_FOO: u8;\n+    fn extern_foo(a: u8, b: i32) -> String;\n+}"}]}