{"sha": "cb96d41fa1961974aff9405aa323779d6b3d6849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOTZkNDFmYTE5NjE5NzRhZmY5NDA1YWEzMjM3NzlkNmIzZDY4NDk=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-30T05:22:40Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Apply suggestions for try_validation_pat!.", "tree": {"sha": "4065625b7a985851837804ea1c400e3f874d102e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4065625b7a985851837804ea1c400e3f874d102e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb96d41fa1961974aff9405aa323779d6b3d6849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb96d41fa1961974aff9405aa323779d6b3d6849", "html_url": "https://github.com/rust-lang/rust/commit/cb96d41fa1961974aff9405aa323779d6b3d6849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb96d41fa1961974aff9405aa323779d6b3d6849/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9459b3778009cf067b4ae0cae7c27de683b5ced5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9459b3778009cf067b4ae0cae7c27de683b5ced5", "html_url": "https://github.com/rust-lang/rust/commit/9459b3778009cf067b4ae0cae7c27de683b5ced5"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "5192dfaa4043d01a296311c77c2e9d96deaae0d0", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb96d41fa1961974aff9405aa323779d6b3d6849/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb96d41fa1961974aff9405aa323779d6b3d6849/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=cb96d41fa1961974aff9405aa323779d6b3d6849", "patch": "@@ -25,23 +25,25 @@ use super::{\n };\n \n macro_rules! throw_validation_failure {\n-    ($what:expr, $where:expr $(, $details:expr )?) => {{\n+    ($what:expr, $where:expr $(, $expected:expr )?) => {{\n         let mut msg = format!(\"encountered {}\", $what);\n         let where_ = &$where;\n         if !where_.is_empty() {\n             msg.push_str(\" at \");\n             write_path(&mut msg, where_);\n         }\n-        $( write!(&mut msg, \", but expected {}\", $details).unwrap(); )?\n+        $( write!(&mut msg, \", but expected {}\", $expected).unwrap(); )?\n         throw_ub!(ValidationFailure(msg))\n     }};\n }\n \n /// Returns a validation failure for any Err value of $e.\n // FIXME: Replace all usages of try_validation! with try_validation_pat!.\n macro_rules! try_validation {\n-    ($e:expr, $what:expr, $where:expr $(, $details:expr )?) => {{\n-        try_validation_pat!($e, _, $what, $where $(, $details )?)\n+    ($e:expr, $what:expr, $where:expr $(, $expected:expr )?) => {{\n+        try_validation_pat!($e, $where, {\n+            _ => { $what } $( expected { $expected } )?,\n+        })\n     }};\n }\n /// Like try_validation, but will throw a validation error if any of the patterns in $p are\n@@ -54,12 +56,12 @@ macro_rules! try_validation {\n /// // unchanged.\n /// ```\n macro_rules! try_validation_pat {\n-    ($e:expr, $( $p:pat )|*, $what:expr, $where:expr $(, $details:expr )?) => {{\n+    ($e:expr, $where:expr, { $( $p:pat )|* => { $what:tt } $( expected { $expected:expr } )? $( , )?}) => {{\n         match $e {\n             Ok(x) => x,\n             // We catch the error and turn it into a validation failure. We are okay with\n             // allocation here as this can only slow down builds that fail anyway.\n-            $( Err(InterpErrorInfo { kind: $p, .. }) )|* => throw_validation_failure!($what, $where $(, $details)?),\n+            $( Err(InterpErrorInfo { kind: $p, .. }) )|* => throw_validation_failure!($what, $where $(, $expected)?),\n             #[allow(unreachable_patterns)]\n             Err(e) => Err::<!, _>(e)?,\n         }\n@@ -493,12 +495,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // We are conservative with undef for integers, but try to\n                 // actually enforce the strict rules for raw pointers (mostly because\n                 // that lets us re-use `ref_to_mplace`).\n-                let place = try_validation_pat!(\n-                    self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    err_ub!(InvalidUndefBytes(..)),\n-                    \"uninitialized raw pointer\",\n-                    self.path\n-                );\n+                let place = try_validation_pat!(self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?), self.path, {\n+                    err_ub!(InvalidUndefBytes(..)) => { \"uninitialized raw pointer\" },\n+                });\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n                 }"}]}