{"sha": "29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTZkN2E0YWRiMTUzNmQ2ZjUxYjhkNWZkNzk2NjExMzY4MWJiYzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-14T00:12:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-14T00:12:45Z"}, "message": "rustc: Hack to get rid of passing i1 types for unit around in most cases, suggested by Rafael", "tree": {"sha": "a6a81be7f2191cc52732efb56d6ac7e14ce0a1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6a81be7f2191cc52732efb56d6ac7e14ce0a1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "html_url": "https://github.com/rust-lang/rust/commit/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3cbdc661cec57ab07bb209637b10d9e6d6bbb36", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cbdc661cec57ab07bb209637b10d9e6d6bbb36", "html_url": "https://github.com/rust-lang/rust/commit/a3cbdc661cec57ab07bb209637b10d9e6d6bbb36"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "cbf017351043b217dedf12c2a9101316e89f6829", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "patch": "@@ -322,7 +322,15 @@ fn type_of_inner(@crate_ctxt cx, @typeck.ty t) -> TypeRef {\n                 }\n                 atys += t;\n             }\n-            ret T_fn(atys, type_of(cx, out));\n+\n+            auto ret_ty;\n+            if (typeck.type_is_nil(out)) {\n+                ret_ty = llvm.LLVMVoidType();\n+            } else {\n+                ret_ty = type_of(cx, out);\n+            }\n+\n+            ret T_fn(atys, ret_ty);\n         }\n         case (typeck.ty_var(_)) {\n             // FIXME: implement.\n@@ -1511,7 +1519,14 @@ impure fn trans_call(@block_ctxt cx, @ast.expr f,\n     auto fn_ty = typeck.expr_ty(f);\n     auto ret_ty = typeck.ann_to_type(ann);\n     auto args_res = trans_args(f_res._0.bcx, args, fn_ty);\n-    auto retval = args_res._0.build.FastCall(f_res._0.val, args_res._1);\n+    \n+    auto real_retval = args_res._0.build.FastCall(f_res._0.val, args_res._1);\n+    auto retval;\n+    if (typeck.type_is_nil(ret_ty)) {\n+        retval = C_nil();\n+    } else {\n+        retval = real_retval;\n+    }\n \n     // Structured returns come back as first-class values. This is nice for\n     // LLVM but wrong for us; we treat structured values by pointer in\n@@ -1795,16 +1810,22 @@ impure fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     }\n \n     alt (e) {\n-        case (some[@ast.expr](_)) {\n-            r.val = r.bcx.build.Ret(r.val);\n+        case (some[@ast.expr](?ex)) {\n+            if (typeck.type_is_nil(typeck.expr_ty(ex))) {\n+                r.bcx.build.RetVoid();\n+                r.val = C_nil();\n+            } else {\n+                r.val = r.bcx.build.Ret(r.val);\n+            }\n             ret r;\n         }\n         case (_) { /* fall through */  }\n     }\n \n     // FIXME: until LLVM has a unit type, we are moving around\n     // C_nil values rather than their void type.\n-    r.val = r.bcx.build.Ret(C_nil());\n+    r.bcx.build.RetVoid();\n+    r.val = C_nil();\n     ret r;\n }\n \n@@ -2054,7 +2075,7 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n     if (!is_terminated(res.bcx)) {\n         // FIXME: until LLVM has a unit type, we are moving around\n         // C_nil values rather than their void type.\n-        res.bcx.build.Ret(C_nil());\n+        res.bcx.build.RetVoid();\n     }\n }\n "}]}