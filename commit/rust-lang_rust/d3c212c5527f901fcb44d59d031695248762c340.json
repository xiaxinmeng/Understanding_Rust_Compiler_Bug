{"sha": "d3c212c5527f901fcb44d59d031695248762c340", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzIxMmM1NTI3ZjkwMWZjYjQ0ZDU5ZDAzMTY5NTI0ODc2MmMzNDA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-03T11:55:00Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-11T14:08:16Z"}, "message": "Require a list of features to allow in `allow_internal_unstable`", "tree": {"sha": "517e224748ab0be13ec54bc99b5f728263152328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517e224748ab0be13ec54bc99b5f728263152328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c212c5527f901fcb44d59d031695248762c340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c212c5527f901fcb44d59d031695248762c340", "html_url": "https://github.com/rust-lang/rust/commit/d3c212c5527f901fcb44d59d031695248762c340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c212c5527f901fcb44d59d031695248762c340/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d7cfc3cf50f0c427ad3043ff09eaef20671320", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "html_url": "https://github.com/rust-lang/rust/commit/57d7cfc3cf50f0c427ad3043ff09eaef20671320"}], "stats": {"total": 275, "additions": 182, "deletions": 93}, "files": [{"sha": "7ae57a8dc79841284c23e0e6588391c14e30e787", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -34,7 +34,8 @@\n #[cfg(not(test))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(not(stage0), allow_internal_unstable(box_syntax))]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n macro_rules! vec {\n     ($elem:expr; $n:expr) => (\n         $crate::vec::from_elem($elem, $n)"}, {"sha": "6b5fe84ff61dfa4cb7dec2ce4e10339726deffed", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1,6 +1,7 @@\n /// Entry point of thread panic, for details, see std::macros\n #[macro_export]\n-#[allow_internal_unstable]\n+#[cfg_attr(not(stage0), allow_internal_unstable(core_panic, __rust_unstable_column))]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n@@ -409,7 +410,8 @@ macro_rules! write {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(format_args_nl))]\n macro_rules! writeln {\n     ($dst:expr) => (\n         write!($dst, \"\\n\")"}, {"sha": "b01362b0ed4b35a8278d1031962dbbfe2e9942dd", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -681,13 +681,18 @@ impl<'a> LoweringContext<'a> {\n         Ident::with_empty_ctxt(Symbol::gensym(s))\n     }\n \n-    fn allow_internal_unstable(&self, reason: CompilerDesugaringKind, span: Span) -> Span {\n+    fn allow_internal_unstable(\n+        &self,\n+        reason: CompilerDesugaringKind,\n+        span: Span,\n+        allow_internal_unstable: Vec<Symbol>,\n+    ) -> Span {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(source_map::ExpnInfo {\n             call_site: span,\n             def_site: Some(span),\n             format: source_map::CompilerDesugaring(reason),\n-            allow_internal_unstable: true,\n+            allow_internal_unstable,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: source_map::hygiene::default_edition(),\n@@ -964,7 +969,13 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n         };\n \n-        let unstable_span = self.allow_internal_unstable(CompilerDesugaringKind::Async, span);\n+        let unstable_span = self.allow_internal_unstable(\n+            CompilerDesugaringKind::Async,\n+            span,\n+            vec![\n+                Symbol::intern(\"gen_future\"),\n+            ],\n+        );\n         let gen_future = self.expr_std_path(\n             unstable_span, &[\"future\", \"from_generator\"], None, ThinVec::new());\n         hir::ExprKind::Call(P(gen_future), hir_vec![generator])\n@@ -1363,6 +1374,7 @@ impl<'a> LoweringContext<'a> {\n         let exist_ty_span = self.allow_internal_unstable(\n             CompilerDesugaringKind::ExistentialReturnType,\n             span,\n+            Vec::new(), // doesn'c actually allow anything unstable\n         );\n \n         let exist_ty_def_index = self\n@@ -3927,8 +3939,13 @@ impl<'a> LoweringContext<'a> {\n             }),\n             ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n-                    let unstable_span =\n-                        this.allow_internal_unstable(CompilerDesugaringKind::TryBlock, body.span);\n+                    let unstable_span = this.allow_internal_unstable(\n+                        CompilerDesugaringKind::TryBlock,\n+                        body.span,\n+                        vec![\n+                            Symbol::intern(\"try_trait\"),\n+                        ],\n+                    );\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else(\n                         || {\n@@ -4363,6 +4380,7 @@ impl<'a> LoweringContext<'a> {\n                 let desugared_span = self.allow_internal_unstable(\n                     CompilerDesugaringKind::ForLoop,\n                     head_sp,\n+                    Vec::new(),\n                 );\n \n                 let iter = self.str_to_ident(\"iter\");\n@@ -4525,8 +4543,13 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span =\n-                    self.allow_internal_unstable(CompilerDesugaringKind::QuestionMark, e.span);\n+                let unstable_span = self.allow_internal_unstable(\n+                    CompilerDesugaringKind::QuestionMark,\n+                    e.span,\n+                    vec![\n+                        Symbol::intern(\"try_trait\")\n+                    ],\n+                );\n \n                 // `Try::into_result(<expr>)`\n                 let discr = {"}, {"sha": "5d606abb3cd79f621ae3a758faed16c0626cb838", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -561,11 +561,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n     /// `id`.\n     pub fn eval_stability(self, def_id: DefId, id: Option<NodeId>, span: Span) -> EvalResult {\n-        if span.allows_unstable() {\n-            debug!(\"stability: skipping span={:?} since it is internal\", span);\n-            return EvalResult::Allow;\n-        }\n-\n         let lint_deprecated = |def_id: DefId,\n                                id: NodeId,\n                                note: Option<Symbol>,\n@@ -694,6 +689,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         match stability {\n             Some(&Stability { level: attr::Unstable { reason, issue }, feature, .. }) => {\n+                if span.allows_unstable(&feature.as_str()) {\n+                    debug!(\"stability: skipping span={:?} since it is internal\", span);\n+                    return EvalResult::Allow;\n+                }\n                 if self.stability().active_features.contains(&feature) {\n                     return EvalResult::Allow;\n                 }"}, {"sha": "b877c80af1aba57c9323339309c481024308d3a5", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -91,7 +91,9 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n             call_site: item.span, // use the call site of the static\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(name)),\n-            allow_internal_unstable: true,\n+            allow_internal_unstable: vec![\n+                Symbol::intern(\"rustc_attrs\"),\n+            ],\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: hygiene::default_edition(),"}, {"sha": "9fca1a983c30d73beee8b2a6b2ca62619540780e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -570,7 +570,7 @@ impl<'a> CrateLoader<'a> {\n                 ProcMacro::Bang { name, client } => {\n                     (name, SyntaxExtension::ProcMacro {\n                         expander: Box::new(BangProcMacro { client }),\n-                        allow_internal_unstable: false,\n+                        allow_internal_unstable: Vec::new(),\n                         edition: root.edition,\n                     })\n                 }"}, {"sha": "f7c7c627959a70c2c583950eae90d61bad5bf82b", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -425,7 +425,9 @@ impl cstore::CStore {\n             let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n             let ext = SyntaxExtension::ProcMacro {\n                 expander: Box::new(BangProcMacro { client }),\n-                allow_internal_unstable: true,\n+                allow_internal_unstable: vec![\n+                    Symbol::intern(\"proc_macro_def_site\"),\n+                ],\n                 edition: data.root.edition,\n             };\n             return LoadedMacro::ProcMacro(Lrc::new(ext));"}, {"sha": "d1b005ffb858af4372bb07446bcb433b5a7e4ea1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -907,7 +907,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                     // Check `#[unstable]` const fns or `#[rustc_const_unstable]`\n                                     // functions without the feature gate active in this crate in\n                                     // order to report a better error message than the one below.\n-                                    if self.span.allows_unstable() {\n+                                    if self.span.allows_unstable(&feature.as_str()) {\n                                         // `allow_internal_unstable` can make such calls stable.\n                                         is_const_fn = true;\n                                     } else {"}, {"sha": "14312f0b2f705a29ad554e8379c4eb65dea864fc", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -110,8 +110,8 @@ impl<'a> Registry<'a> {\n                     edition,\n                 }\n             }\n-            IdentTT(ext, _, allow_internal_unstable) => {\n-                IdentTT(ext, Some(self.krate_span), allow_internal_unstable)\n+            IdentTT { ext, span: _, allow_internal_unstable } => {\n+                IdentTT { ext, span: Some(self.krate_span), allow_internal_unstable }\n             }\n             _ => extension,\n         }));\n@@ -126,7 +126,7 @@ impl<'a> Registry<'a> {\n         self.register_syntax_extension(Symbol::intern(name), NormalTT {\n             expander: Box::new(expander),\n             def_info: None,\n-            allow_internal_unstable: false,\n+            allow_internal_unstable: Vec::new(),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             unstable_feature: None,"}, {"sha": "506b6d4e8e0a84c3216a283f524b75d07fc0503b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -53,7 +53,8 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(__rust_unstable_column, libstd_sys_internals))]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")\n@@ -111,7 +112,8 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(print_internals))]\n macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n }\n@@ -143,7 +145,8 @@ macro_rules! print {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(print_internals, format_args_nl))]\n macro_rules! println {\n     () => (print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n@@ -174,7 +177,8 @@ macro_rules! println {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(print_internals))]\n macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n }\n@@ -202,7 +206,8 @@ macro_rules! eprint {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(print_internals, format_args_nl))]\n macro_rules! eprintln {\n     () => (eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n@@ -325,7 +330,8 @@ macro_rules! dbg {\n /// A macro to await on an async call.\n #[macro_export]\n #[unstable(feature = \"await_macro\", issue = \"50547\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(gen_future, generators))]\n #[allow_internal_unsafe]\n macro_rules! await {\n     ($e:expr) => { {"}, {"sha": "8207709e1f9f00ca07de1b6ad7bb53a110b6d589", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -126,7 +126,8 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// [`std::thread::LocalKey`]: ../std/thread/struct.LocalKey.html\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(thread_local_internals))]\n macro_rules! thread_local {\n     // empty (base case for the recursion)\n     () => {};\n@@ -148,7 +149,10 @@ macro_rules! thread_local {\n            reason = \"should not be necessary\",\n            issue = \"0\")]\n #[macro_export]\n-#[allow_internal_unstable]\n+#[cfg_attr(stage0, allow_internal_unstable)]\n+#[cfg_attr(not(stage0), allow_internal_unstable(\n+    thread_local_internals, cfg_target_thread_local, thread_local,\n+))]\n #[allow_internal_unsafe]\n macro_rules! __thread_local_inner {\n     (@key $(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {"}, {"sha": "02d6d7218733cc3e73172b958706d56bd631d780", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -621,7 +621,8 @@ pub enum SyntaxExtension {\n     /// A function-like procedural macro. TokenStream -> TokenStream.\n     ProcMacro {\n         expander: Box<dyn ProcMacro + sync::Sync + sync::Send>,\n-        allow_internal_unstable: bool,\n+        /// Whitelist of unstable features that are treated as stable inside this macro\n+        allow_internal_unstable: Vec<Symbol>,\n         edition: Edition,\n     },\n \n@@ -638,8 +639,10 @@ pub enum SyntaxExtension {\n         expander: Box<dyn TTMacroExpander + sync::Sync + sync::Send>,\n         def_info: Option<(ast::NodeId, Span)>,\n         /// Whether the contents of the macro can\n-        /// directly use `#[unstable]` things (true == yes).\n-        allow_internal_unstable: bool,\n+        /// directly use `#[unstable]` things.\n+        ///\n+        /// Only allows things that require a feature gate in the given whitelist\n+        allow_internal_unstable: Vec<Symbol>,\n         /// Whether the contents of the macro can use `unsafe`\n         /// without triggering the `unsafe_code` lint.\n         allow_internal_unsafe: bool,\n@@ -654,8 +657,11 @@ pub enum SyntaxExtension {\n \n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n-    ///\n-    IdentTT(Box<dyn IdentMacroExpander + sync::Sync + sync::Send>, Option<Span>, bool),\n+    IdentTT {\n+        ext: Box<dyn IdentMacroExpander + sync::Sync + sync::Send>,\n+        span: Option<Span>,\n+        allow_internal_unstable: Vec<Symbol>,\n+    },\n \n     /// An attribute-like procedural macro. TokenStream -> TokenStream.\n     /// The input is the annotated item.\n@@ -682,7 +688,7 @@ impl SyntaxExtension {\n         match *self {\n             SyntaxExtension::DeclMacro { .. } |\n             SyntaxExtension::NormalTT { .. } |\n-            SyntaxExtension::IdentTT(..) |\n+            SyntaxExtension::IdentTT { .. } |\n             SyntaxExtension::ProcMacro { .. } =>\n                 MacroKind::Bang,\n             SyntaxExtension::NonMacroAttr { .. } |\n@@ -716,7 +722,7 @@ impl SyntaxExtension {\n             SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n             // Unstable legacy stuff\n             SyntaxExtension::NonMacroAttr { .. } |\n-            SyntaxExtension::IdentTT(..) |\n+            SyntaxExtension::IdentTT { .. } |\n             SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n             SyntaxExtension::BuiltinDerive(..) => hygiene::default_edition(),"}, {"sha": "03d68f4257f1b1c238bf527135d31fda8994eb70", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -58,7 +58,10 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n         call_site: span,\n         def_site: None,\n         format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n-        allow_internal_unstable: true,\n+        allow_internal_unstable: vec![\n+            Symbol::intern(\"rustc_attrs\"),\n+            Symbol::intern(\"structural_match\"),\n+        ],\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "65500cd23bd7e80c1f0c3dfb552e6d3d236e9927", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -558,7 +558,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             call_site: attr.span,\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(&attr.path.to_string())),\n-            allow_internal_unstable: false,\n+            allow_internal_unstable: Vec::new(),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: ext.edition(),\n@@ -725,7 +725,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 // don't stability-check macros in the same crate\n                 // (the only time this is null is for syntax extensions registered as macros)\n                 if def_site_span.map_or(false, |def_span| !crate_span.contains(def_span))\n-                    && !span.allows_unstable() && this.cx.ecfg.features.map_or(true, |feats| {\n+                    && !span.allows_unstable(&feature.as_str())\n+                    && this.cx.ecfg.features.map_or(true, |feats| {\n                     // macro features will count as lib features\n                     !feats.declared_lib_features.iter().any(|&(feat, _)| feat == feature)\n                 }) {\n@@ -757,7 +758,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let opt_expanded = match *ext {\n             DeclMacro { ref expander, def_info, edition, .. } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n-                                                                    false, false, false, None,\n+                                                                    Vec::new(), false, false, None,\n                                                                     edition) {\n                     dummy_span\n                 } else {\n@@ -768,14 +769,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             NormalTT {\n                 ref expander,\n                 def_info,\n-                allow_internal_unstable,\n+                ref allow_internal_unstable,\n                 allow_internal_unsafe,\n                 local_inner_macros,\n                 unstable_feature,\n                 edition,\n             } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n-                                                                    allow_internal_unstable,\n+                                                                    allow_internal_unstable.clone(),\n                                                                     allow_internal_unsafe,\n                                                                     local_inner_macros,\n                                                                     unstable_feature,\n@@ -791,7 +792,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n             }\n \n-            IdentTT(ref expander, tt_span, allow_internal_unstable) => {\n+            IdentTT { ext: ref expander, span: tt_span, ref allow_internal_unstable } => {\n                 if ident.name == keywords::Invalid.name() {\n                     self.cx.span_err(path.span,\n                                     &format!(\"macro {}! expects an ident argument\", path));\n@@ -802,7 +803,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         call_site: span,\n                         def_site: tt_span,\n                         format: macro_bang_format(path),\n-                        allow_internal_unstable,\n+                        allow_internal_unstable: allow_internal_unstable.clone(),\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n                         edition: hygiene::default_edition(),\n@@ -827,7 +828,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.dummy(span)\n             }\n \n-            SyntaxExtension::ProcMacro { ref expander, allow_internal_unstable, edition } => {\n+            SyntaxExtension::ProcMacro { ref expander, ref allow_internal_unstable, edition } => {\n                 if ident.name != keywords::Invalid.name() {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -843,7 +844,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         def_site: None,\n                         format: macro_bang_format(path),\n                         // FIXME probably want to follow macro_rules macros here.\n-                        allow_internal_unstable,\n+                        allow_internal_unstable: allow_internal_unstable.clone(),\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n                         edition,\n@@ -918,7 +919,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             call_site: span,\n             def_site: None,\n             format: MacroAttribute(pretty_name),\n-            allow_internal_unstable: false,\n+            allow_internal_unstable: Vec::new(),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: ext.edition(),\n@@ -937,7 +938,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(invoc.fragment_kind.expect_from_annotatables(items))\n             }\n             BuiltinDerive(func) => {\n-                expn_info.allow_internal_unstable = true;\n+                expn_info.allow_internal_unstable = vec![\n+                    Symbol::intern(\"rustc_attrs\"),\n+                    Symbol::intern(\"derive_clone_copy\"),\n+                    Symbol::intern(\"derive_eq\"),\n+                ];\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let mut items = Vec::new();"}, {"sha": "549de1628eb550e5979d72767cc150a740e82ced", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -44,7 +44,7 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTr\n /* __rust_unstable_column!(): expands to the current column number */\n pub fn expand_column_gated(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n                   -> Box<dyn base::MacResult+'static> {\n-    if sp.allows_unstable() {\n+    if sp.allows_unstable(\"__rust_unstable_column\") {\n         expand_column(cx, sp, tts)\n     } else {\n         cx.span_fatal(sp, \"the __rust_unstable_column macro is unstable\");"}, {"sha": "4409bf13b6c7b1be3bd460ef4f520072834e4a9c", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -376,7 +376,18 @@ pub fn compile(\n     });\n \n     if body.legacy {\n-        let allow_internal_unstable = attr::contains_name(&def.attrs, \"allow_internal_unstable\");\n+        let allow_internal_unstable = attr::find_by_name(&def.attrs, \"allow_internal_unstable\")\n+            .map_or(Vec::new(), |attr| attr\n+                .meta_item_list()\n+                .unwrap_or_else(|| sess.span_diagnostic.span_bug(\n+                    attr.span, \"allow_internal_unstable expects list of feature names\",\n+                ))\n+                .iter()\n+                .map(|it| it.name().unwrap_or_else(|| sess.span_diagnostic.span_bug(\n+                    it.span, \"allow internal unstable expects feature names\",\n+                )))\n+                .collect()\n+            );\n         let allow_internal_unsafe = attr::contains_name(&def.attrs, \"allow_internal_unsafe\");\n         let mut local_inner_macros = false;\n         if let Some(macro_export) = attr::find_by_name(&def.attrs, \"macro_export\") {"}, {"sha": "1e1b315824f1eb26bba725547d035994b69cace0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1091,7 +1091,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n                                               stable\",\n                                              cfg_fn!(profiler_runtime))),\n \n-    (\"allow_internal_unstable\", Normal, template!(Word), Gated(Stability::Unstable,\n+    (\"allow_internal_unstable\", Normal, template!(List: \"feat1, feat2\"), Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\",\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n                                               cfg_fn!(allow_internal_unstable))),\n@@ -1199,7 +1199,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n     (\"proc_macro\", Normal, template!(Word), Ungated),\n \n     (\"rustc_proc_macro_decls\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                             \"rustc_proc_macro_decls\",\n+                                             \"rustc_attrs\",\n                                              \"used internally by rustc\",\n                                              cfg_fn!(rustc_attrs))),\n \n@@ -1284,7 +1284,7 @@ impl GatedCfg {\n \n     pub fn check_and_emit(&self, sess: &ParseSess, features: &Features) {\n         let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n-        if !has_feature(features) && !self.span.allows_unstable() {\n+        if !has_feature(features) && !self.span.allows_unstable(feature) {\n             let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n             emit_feature_err(sess, feature, self.span, GateIssue::Language, &explain);\n         }\n@@ -1303,7 +1303,7 @@ macro_rules! gate_feature_fn {\n              name, explain, level) = ($cx, $has_feature, $span, $name, $explain, $level);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n-        if !has_feature && !span.allows_unstable() {\n+        if !has_feature && !span.allows_unstable($name) {\n             leveled_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain, level)\n                 .emit();\n         }\n@@ -1328,7 +1328,11 @@ impl<'a> Context<'a> {\n         for &(n, ty, _template, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {\n-                    gate_feature_fn!(self, has_feature, attr.span, name, desc, GateStrength::Hard);\n+                    if !attr.span.allows_unstable(name) {\n+                        gate_feature_fn!(\n+                            self, has_feature, attr.span, name, desc, GateStrength::Hard\n+                        );\n+                    }\n                 } else if name == \"doc\" {\n                     if let Some(content) = attr.meta_item_list() {\n                         if content.iter().any(|c| c.check_name(\"include\")) {\n@@ -1493,13 +1497,13 @@ struct PostExpansionVisitor<'a> {\n macro_rules! gate_feature_post {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {{\n         let (cx, span) = ($cx, $span);\n-        if !span.allows_unstable() {\n+        if !span.allows_unstable(stringify!($feature)) {\n             gate_feature!(cx.context, $feature, span, $explain)\n         }\n     }};\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n         let (cx, span) = ($cx, $span);\n-        if !span.allows_unstable() {\n+        if !span.allows_unstable(stringify!($feature)) {\n             gate_feature!(cx.context, $feature, span, $explain, $level)\n         }\n     }}\n@@ -1610,10 +1614,8 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        if !attr.span.allows_unstable() {\n-            // check for gated attributes\n-            self.context.check_attribute(attr, false);\n-        }\n+        // check for gated attributes\n+        self.context.check_attribute(attr, false);\n \n         if attr.check_name(\"doc\") {\n             if let Some(content) = attr.meta_item_list() {"}, {"sha": "91ec42a33b5f6f5203f0b9e0be737b8f73245f64", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -20,7 +20,9 @@ fn ignored_span(sp: Span) -> Span {\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"std_inject\")),\n-        allow_internal_unstable: true,\n+        allow_internal_unstable: vec![\n+            Symbol::intern(\"prelude_import\"),\n+        ],\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "aa107130eee2bf8b7f96bafe9bebd90333a59024", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -285,7 +285,11 @@ fn generate_test_harness(sess: &ParseSess,\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"test_case\")),\n-        allow_internal_unstable: true,\n+        allow_internal_unstable: vec![\n+            Symbol::intern(\"main\"),\n+            Symbol::intern(\"test\"),\n+            Symbol::intern(\"rustc_attrs\"),\n+        ],\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "bc86ffa852bbe6c942ca1fc47087dc9007596419", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -136,11 +136,15 @@ fn call_intrinsic(cx: &ExtCtxt<'_>,\n                   intrinsic: &str,\n                   args: Vec<P<ast::Expr>>)\n                   -> P<ast::Expr> {\n-    if cx.current_expansion.mark.expn_info().unwrap().allow_internal_unstable {\n+    let intrinsic_allowed_via_allow_internal_unstable = cx\n+        .current_expansion.mark.expn_info().unwrap()\n+        .allow_internal_unstable.iter()\n+        .any(|&s| s == \"core_intrinsics\");\n+    if intrinsic_allowed_via_allow_internal_unstable {\n         span = span.with_ctxt(cx.backtrace());\n     } else { // Avoid instability errors with user defined curstom derives, cc #36316\n         let mut info = cx.current_expansion.mark.expn_info().unwrap();\n-        info.allow_internal_unstable = true;\n+        info.allow_internal_unstable = vec![Symbol::intern(\"core_intrinsics\")];\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(info);\n         span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "1b17fc0d040a5e12110366557bb6e48564850a1c", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -711,7 +711,7 @@ pub fn expand_format_args_nl<'cx>(\n     //if !ecx.ecfg.enable_allow_internal_unstable() {\n \n     // For some reason, the only one that actually works for `println` is the first check\n-    if !sp.allows_unstable()   // the enclosing span is marked as `#[allow_insternal_unsable]`\n+    if !sp.allows_unstable(\"format_args_nl\") // the span is marked as `#[allow_insternal_unsable]`\n         && !ecx.ecfg.enable_allow_internal_unstable()  // NOTE: when is this enabled?\n         && !ecx.ecfg.enable_format_args_nl()  // enabled using `#[feature(format_args_nl]`\n     {"}, {"sha": "dacc54d272bca99d7001807ae9f76c59c42f87a5", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -60,7 +60,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                      NormalTT {\n                         expander: Box::new($f as MacroExpanderFn),\n                         def_info: None,\n-                        allow_internal_unstable: false,\n+                        allow_internal_unstable: Vec::new(),\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n                         unstable_feature: None,\n@@ -103,7 +103,9 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n              NormalTT {\n                 expander: Box::new(format::expand_format_args),\n                 def_info: None,\n-                allow_internal_unstable: true,\n+                allow_internal_unstable: vec![\n+                    Symbol::intern(\"fmt_internals\"),\n+                ],\n                 allow_internal_unsafe: false,\n                 local_inner_macros: false,\n                 unstable_feature: None,\n@@ -113,7 +115,9 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n              NormalTT {\n                  expander: Box::new(format::expand_format_args_nl),\n                  def_info: None,\n-                 allow_internal_unstable: true,\n+                 allow_internal_unstable: vec![\n+                     Symbol::intern(\"fmt_internals\"),\n+                 ],\n                  allow_internal_unsafe: false,\n                  local_inner_macros: false,\n                  unstable_feature: None,"}, {"sha": "f198739d1048b4e7717570e8fe74b25d518208c3", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -333,7 +333,10 @@ fn mk_decls(\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n-        allow_internal_unstable: true,\n+        allow_internal_unstable: vec![\n+            Symbol::intern(\"rustc_attrs\"),\n+            Symbol::intern(\"proc_macro_internals\"),\n+        ],\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "e2bea0c8b07e5485221b87e8af252252d9810926", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -66,7 +66,10 @@ pub fn expand_test_or_bench(\n             call_site: DUMMY_SP,\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(\"test\")),\n-            allow_internal_unstable: true,\n+            allow_internal_unstable: vec![\n+                Symbol::intern(\"rustc_attrs\"),\n+                Symbol::intern(\"test\"),\n+            ],\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: hygiene::default_edition(),"}, {"sha": "a581c28219303453d9857190d364440116c71832", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -41,7 +41,10 @@ pub fn expand(\n             call_site: DUMMY_SP,\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(\"test_case\")),\n-            allow_internal_unstable: true,\n+            allow_internal_unstable: vec![\n+                Symbol::intern(\"test\"),\n+                Symbol::intern(\"rustc_attrs\"),\n+            ],\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: hygiene::default_edition(),"}, {"sha": "f9394826c9b68310b4d04a9037ef50e2b6c33b27", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -550,10 +550,10 @@ pub struct ExpnInfo {\n     pub def_site: Option<Span>,\n     /// The format with which the macro was invoked.\n     pub format: ExpnFormat,\n-    /// Whether the macro is allowed to use #[unstable]/feature-gated\n-    /// features internally without forcing the whole crate to opt-in\n+    /// List of #[unstable]/feature-gated features that the macro is allowed to use\n+    /// internally without forcing the whole crate to opt-in\n     /// to them.\n-    pub allow_internal_unstable: bool,\n+    pub allow_internal_unstable: Vec<Symbol>,\n     /// Whether the macro is allowed to use `unsafe` internally\n     /// even if the user crate has `#![forbid(unsafe_code)]`.\n     pub allow_internal_unsafe: bool,"}, {"sha": "efb21e06f34cc8edcf57d9d4bf98777eea737481", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -385,9 +385,9 @@ impl Span {\n     /// Check if a span is \"internal\" to a macro in which `#[unstable]`\n     /// items can be used (that is, a macro marked with\n     /// `#[allow_internal_unstable]`).\n-    pub fn allows_unstable(&self) -> bool {\n+    pub fn allows_unstable(&self, feature: &str) -> bool {\n         match self.ctxt().outer().expn_info() {\n-            Some(info) => info.allow_internal_unstable,\n+            Some(info) => info.allow_internal_unstable.iter().any(|&f| f == feature),\n             None => false,\n         }\n     }"}, {"sha": "ee48f9516299abe838ee657351b0950132532cb8", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -5,7 +5,7 @@\n macro_rules! bar {\n     () => {\n         // more layers don't help:\n-        #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+        #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n         macro_rules! baz {\n             () => {}\n         }"}, {"sha": "802c74239d71933e9a2981c5a3350d997e06a1e6", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: allow_internal_unstable side-steps feature gating and stability checks\n   --> $DIR/feature-gate-allow-internal-unstable-nested-macro.rs:8:9\n    |\n-LL |         #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | bar!();\n    | ------- in this macro invocation"}, {"sha": "ede969097d5ae2209b8f5c6cfbc0c766b68bbcf9", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1,7 +1,7 @@\n // checks that this attribute is caught on non-macro items.\n // this needs a different test since this is done after expansion\n \n-#[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+#[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n struct S;\n \n fn main() {}"}, {"sha": "d619f1e3239cadb0254241d29f247bfbafe76f81", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: allow_internal_unstable side-steps feature gating and stability checks\n   --> $DIR/feature-gate-allow-internal-unstable-struct.rs:4:1\n    |\n-LL | #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(allow_internal_unstable)] to the crate attributes to enable\n "}, {"sha": "0a1b6acd9bff25e254897439a5ded1180f101ed6", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_macros)]\n \n-#[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+#[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n macro_rules! foo {\n     () => {}\n }"}, {"sha": "aa4f6648c4fbd354d44807d4ec69db3a720c3159", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable.stderr?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: allow_internal_unstable side-steps feature gating and stability checks\n   --> $DIR/feature-gate-allow-internal-unstable.rs:3:1\n    |\n-LL | #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(allow_internal_unstable)] to the crate attributes to enable\n "}, {"sha": "7c79dcb752272e169081497e2cf9f993dd09c5cc", "filename": "src/test/ui/internal/auxiliary/internal_unstable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Finternal%2Fauxiliary%2Finternal_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Finternal%2Fauxiliary%2Finternal_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Fauxiliary%2Finternal_unstable.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -23,14 +23,14 @@ pub struct Bar {\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[allow_internal_unstable(function)]\n #[macro_export]\n macro_rules! call_unstable_allow {\n     () => { $crate::unstable() }\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[allow_internal_unstable(struct_field)]\n #[macro_export]\n macro_rules! construct_unstable_allow {\n     ($e: expr) => {\n@@ -39,21 +39,21 @@ macro_rules! construct_unstable_allow {\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[allow_internal_unstable(method)]\n #[macro_export]\n macro_rules! call_method_allow {\n     ($e: expr) => { $e.method() }\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[allow_internal_unstable(struct_field, struct2_field)]\n #[macro_export]\n macro_rules! access_field_allow {\n     ($e: expr) => { $e.x }\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n-#[allow_internal_unstable]\n+#[allow_internal_unstable()]\n #[macro_export]\n macro_rules! pass_through_allow {\n     ($e: expr) => { $e }"}, {"sha": "e09a5d89172e81d329a8a9f8fa79de385668b551", "filename": "src/test/ui/internal/internal-unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c212c5527f901fcb44d59d031695248762c340/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.rs?ref=d3c212c5527f901fcb44d59d031695248762c340", "patch": "@@ -13,7 +13,7 @@ macro_rules! foo {\n     }}\n }\n \n-#[allow_internal_unstable]\n+#[allow_internal_unstable(function)]\n macro_rules! bar {\n     ($e: expr) => {{\n         foo!($e,"}]}