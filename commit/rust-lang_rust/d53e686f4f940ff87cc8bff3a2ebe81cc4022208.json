{"sha": "d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1M2U2ODZmNGY5NDBmZjg3Y2M4YmZmM2EyZWJlODFjYzQwMjIyMDg=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-04-25T05:38:44Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-04-25T05:38:44Z"}, "message": "Rename vec::mod2 to vec::mod_zip", "tree": {"sha": "a8740f66c3e48193fe63886d8f16c8cb54835be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8740f66c3e48193fe63886d8f16c8cb54835be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "html_url": "https://github.com/rust-lang/rust/commit/d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d53babd2f23439975518fda94d9122b15e779c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d53babd2f23439975518fda94d9122b15e779c9", "html_url": "https://github.com/rust-lang/rust/commit/1d53babd2f23439975518fda94d9122b15e779c9"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "9171c5167bc7bbdbf13debc0d05aa69f8995ad60", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -358,7 +358,7 @@ pub fn map_vec2<S,T,U:Copy,V:Copy>(ss: &[S], ts: &[T],\n \n /**\n  * Applies op to the pairwise elements from `ss` and `ts`, aborting on\n- * error.  This could be implemented using `map2()` but it is more efficient\n+ * error.  This could be implemented using `map_zip()` but it is more efficient\n  * on its own as no result vector is built.\n  */\n #[inline(always)]"}, {"sha": "a2b6f0eb1a7143ff3218eb5437e3c1e72661467c", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -123,7 +123,7 @@ impl<'self,A:Copy,B:Copy> ExtendedTupleOps<A,B> for (&'self [A], &'self [B]) {\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C] {\n         match *self {\n             (ref a, ref b) => {\n-                vec::map2(*a, *b, f)\n+                vec::map_zip(*a, *b, f)\n             }\n         }\n     }\n@@ -144,7 +144,7 @@ impl<A:Copy,B:Copy> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C] {\n         match *self {\n             (ref a, ref b) => {\n-                vec::map2(*a, *b, f)\n+                vec::map_zip(*a, *b, f)\n             }\n         }\n     }"}, {"sha": "cd944dcb18a11963bd35a8c9ec823d2269d6d79e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -847,8 +847,11 @@ pub fn flat_map<T, U>(v: &[T], f: &fn(t: &T) -> ~[U]) -> ~[U] {\n     result\n }\n \n-/// Apply a function to each pair of elements and return the results\n-pub fn map2<T:Copy,U:Copy,V>(v0: &[T], v1: &[U],\n+/**\n+ * Apply a function to each pair of elements and return the results.\n+ * Equivalent to `map(zip(v0, v1), f)`.\n+ */\n+pub fn map_zip<T:Copy,U:Copy,V>(v0: &[T], v1: &[U],\n                                   f: &fn(t: &T, v: &U) -> V) -> ~[V] {\n     let v0_len = len(v0);\n     if v0_len != len(v1) { fail!(); }\n@@ -3396,12 +3399,12 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_map2() {\n+    fn test_map_zip() {\n         fn times(x: &int, y: &int) -> int { *x * *y }\n         let f = times;\n         let v0 = ~[1, 2, 3, 4, 5];\n         let v1 = ~[5, 4, 3, 2, 1];\n-        let u = map2::<int, int, int>(v0, v1, f);\n+        let u = map_zip::<int, int, int>(v0, v1, f);\n         let mut i = 0;\n         while i < 5 { assert!(v0[i] * v1[i] == u[i]); i += 1; }\n     }\n@@ -4335,10 +4338,10 @@ mod tests {\n     #[ignore(windows)]\n     #[should_fail]\n     #[allow(non_implicitly_copyable_typarams)]\n-    fn test_map2_fail() {\n+    fn test_map_zip_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;\n-        do map2(v, v) |_elt1, _elt2| {\n+        do map_zip(v, v) |_elt1, _elt2| {\n             if i == 2 {\n                 fail!()\n             }"}, {"sha": "db422d1b1bf5598949b017929ce25e68e00d308c", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -356,7 +356,7 @@ pub fn make_mono_id(ccx: @CrateContext,\n       Some(vts) => {\n         let item_ty = ty::lookup_item_type(ccx.tcx, item);\n         let mut i = 0;\n-        vec::map2(*item_ty.generics.type_param_defs, substs, |type_param_def, subst| {\n+        vec::map_zip(*item_ty.generics.type_param_defs, substs, |type_param_def, subst| {\n             let mut v = ~[];\n             for type_param_def.bounds.each |bound| {\n                 match *bound {\n@@ -376,7 +376,7 @@ pub fn make_mono_id(ccx: @CrateContext,\n     };\n     let param_ids = match param_uses {\n       Some(ref uses) => {\n-        vec::map2(precise_param_ids, **uses, |id, uses| {\n+        vec::map_zip(precise_param_ids, **uses, |id, uses| {\n             if ccx.sess.no_monomorphic_collapse() {\n                 match copy *id {\n                     (a, b) => mono_precise(a, b)"}, {"sha": "49338291a7c85df3b636b16488dc9c8e577992d7", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -209,7 +209,7 @@ fn merge_method_attrs(\n         }\n     };\n \n-    do vec::map2(docs, attrs) |doc, attrs| {\n+    do vec::map_zip(docs, attrs) |doc, attrs| {\n         assert!(doc.name == attrs.first());\n         let desc = attrs.second();\n "}, {"sha": "461c99e8442e9910aceed4c9cdfc529b79e96197", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -629,7 +629,7 @@ impl<'self> MethodDef<'self> {\n                                 }\n                             }\n                             let field_tuples =\n-                                do vec::map2(*self_vec,\n+                                do vec::map_zip(*self_vec,\n                                              enum_matching_fields) |&(id, self_f), &other| {\n                                 (id, self_f, other)\n                             };"}, {"sha": "105e08e5fb459ba0493c759861045fa317d4d761", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -57,7 +57,7 @@ impl gen_send for message {\n             assert!(next_state.tys.len() ==\n                 next.generics.ty_params.len());\n             let arg_names = tys.mapi(|i, _ty| cx.ident_of(~\"x_\"+i.to_str()));\n-            let args_ast = vec::map2(arg_names, *tys, |n, t| cx.arg(*n, *t));\n+            let args_ast = vec::map_zip(arg_names, *tys, |n, t| cx.arg(*n, *t));\n \n             let pipe_ty = cx.ty_path_ast_builder(\n                 path(~[this.data_name()], span)\n@@ -135,7 +135,7 @@ impl gen_send for message {\n                 debug!(\"pipec: no next state\");\n                 let arg_names = tys.mapi(|i, _ty| (~\"x_\" + i.to_str()));\n \n-                let args_ast = do vec::map2(arg_names, *tys) |n, t| {\n+                let args_ast = do vec::map_zip(arg_names, *tys) |n, t| {\n                     cx.arg(cx.ident_of(*n), *t)\n                 };\n "}, {"sha": "5d637ba8cef06a479bb230d4c37781479c6a3ca6", "filename": "src/test/run-pass/block-vec-map_zip.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Ftest%2Frun-pass%2Fblock-vec-map_zip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e686f4f940ff87cc8bff3a2ebe81cc4022208/src%2Ftest%2Frun-pass%2Fblock-vec-map_zip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map_zip.rs?ref=d53e686f4f940ff87cc8bff3a2ebe81cc4022208", "patch": "@@ -12,7 +12,7 @@ extern mod std;\n \n pub fn main() {\n     let v =\n-        vec::map2(~[1, 2, 3, 4, 5],\n+        vec::map_zip(~[1, 2, 3, 4, 5],\n                   ~[true, false, false, true, true],\n                   |i, b| if *b { -(*i) } else { *i } );\n     error!(v.clone());", "previous_filename": "src/test/run-pass/block-vec-map2.rs"}]}