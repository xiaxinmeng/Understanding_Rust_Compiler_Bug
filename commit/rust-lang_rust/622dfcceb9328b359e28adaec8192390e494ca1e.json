{"sha": "622dfcceb9328b359e28adaec8192390e494ca1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmRmY2NlYjkzMjhiMzU5ZTI4YWRhZWM4MTkyMzkwZTQ5NGNhMWU=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T21:44:54Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T21:44:54Z"}, "message": "Fix Windows compilation errors.", "tree": {"sha": "42b83f5d982e1209b8f822cff767930b766ae31a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b83f5d982e1209b8f822cff767930b766ae31a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622dfcceb9328b359e28adaec8192390e494ca1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622dfcceb9328b359e28adaec8192390e494ca1e", "html_url": "https://github.com/rust-lang/rust/commit/622dfcceb9328b359e28adaec8192390e494ca1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622dfcceb9328b359e28adaec8192390e494ca1e/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c14add399c35153883f8b84a2e11a7c22f6721", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c14add399c35153883f8b84a2e11a7c22f6721", "html_url": "https://github.com/rust-lang/rust/commit/18c14add399c35153883f8b84a2e11a7c22f6721"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "92c5f49e58a005928d3563333cde1d8446d32644", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=622dfcceb9328b359e28adaec8192390e494ca1e", "patch": "@@ -7,6 +7,7 @@ use crate::convert::TryFrom;\n use crate::ffi::c_void;\n use crate::fmt;\n use crate::fs;\n+use crate::io;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n use crate::ptr::NonNull;\n@@ -114,7 +115,7 @@ impl BorrowedHandle<'_> {\n impl OwnedHandle {\n     /// Creates a new `OwnedHandle` instance that shares the same underlying file handle\n     /// as the existing `OwnedHandle` instance.\n-    pub fn try_clone(&self) -> crate::io::Result<FileDesc> {\n+    pub fn try_clone(&self) -> crate::io::Result<Self> {\n         let handle = self.duplicate(0, false, c::DUPLICATE_SAME_ACCESS)?;\n \n         Ok(unsafe { OwnedHandle::from_raw_handle(handle) })"}, {"sha": "0d77643404742cdd58473efb004f0fbd57770ddf", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=622dfcceb9328b359e28adaec8192390e494ca1e", "patch": "@@ -4,7 +4,9 @@\n \n use super::raw::{AsRawSocket, FromRawSocket, IntoRawSocket, RawSocket};\n use crate::fmt;\n+use crate::io;\n use crate::marker::PhantomData;\n+use crate::mem;\n use crate::mem::forget;\n use crate::sys::c;\n use crate::sys::cvt;\n@@ -91,7 +93,7 @@ impl OwnedSocket {\n         };\n \n         if socket != c::INVALID_SOCKET {\n-            unsafe { Ok(Self::from_inner(OwnedSocket::from_raw_socket(socket))) }\n+            unsafe { Ok(Self(OwnedSocket::from_raw_socket(socket))) }\n         } else {\n             let error = unsafe { c::WSAGetLastError() };\n \n@@ -115,14 +117,19 @@ impl OwnedSocket {\n             }\n \n             unsafe {\n-                let socket = Self::from_inner(OwnedSocket::from_raw_socket(socket));\n+                let socket = Self(OwnedSocket::from_raw_socket(socket));\n                 socket.set_no_inherit()?;\n                 Ok(socket)\n             }\n         }\n     }\n }\n \n+/// Returns the last error from the Windows socket interface.\n+fn last_error() -> io::Error {\n+    io::Error::from_raw_os_error(unsafe { c::WSAGetLastError() })\n+}\n+\n impl AsRawSocket for BorrowedSocket<'_> {\n     #[inline]\n     fn as_raw_socket(&self) -> RawSocket {"}, {"sha": "34455b7e3161a700972a119aa24402bdec1c8722", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=622dfcceb9328b359e28adaec8192390e494ca1e", "patch": "@@ -455,7 +455,7 @@ impl File {\n     }\n \n     pub fn duplicate(&self) -> io::Result<File> {\n-        Ok(Self(self.0.try_clone()?))\n+        Ok(Self { handle: self.handle.try_clone()? })\n     }\n \n     fn reparse_point<'a>("}, {"sha": "39417baebd44c7438662d3874ae6c0691a4e330b", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622dfcceb9328b359e28adaec8192390e494ca1e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=622dfcceb9328b359e28adaec8192390e494ca1e", "patch": "@@ -208,7 +208,7 @@ impl Socket {\n     }\n \n     pub fn duplicate(&self) -> io::Result<Socket> {\n-        Ok(Self(self.0.duplicate()?))\n+        Ok(Self(self.0.try_clone()?))\n     }\n \n     fn recv_with_flags(&self, buf: &mut [u8], flags: c_int) -> io::Result<usize> {"}]}